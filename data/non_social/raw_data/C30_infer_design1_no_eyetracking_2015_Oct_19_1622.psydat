ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C30_infer_design1_no_eyetracking_2015_Oct_19_1622
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vr
sVcontacts
p57
Vn
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS's\x9c\x17\x0cJ\x05N@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Oct_19_1622
p66
sVparticipant
p67
VC30
p68
sVglasses
p69
Vn
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vr
sg15
F1.5668447017669678
sg14
S'space'
p88
sg58
g62
sg57
Vn
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp89
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F20.100222149492765
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P8\x00'
tbsg69
Vn
sa(dp95
g63
g64
sg20
F19.350000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F1.3999999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x18\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p102
sg21
F1.8
sg69
Vn
sa(dp103
g63
g64
sg20
F12.9
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F2.2400000000000007
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'\x05\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p109
sg21
F1.3999999999999999
sg69
Vn
sa(dp110
g63
g64
sg20
F7.9340000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F2.2200000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S'\x01\x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p116
sg21
F1.6000000000000001
sg69
Vn
sa(dp117
g63
g64
sg20
F17.934000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F0.37999999999999856
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'\x1d\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V40-sardines.png
p123
sg21
F2
sg69
Vn
sa(dp124
g63
g64
sg20
F6.0839999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F1.1799999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'\x16\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p130
sg21
F1.3999999999999999
sg69
Vn
sa(dp131
g63
g64
sg20
F3.718
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F1.8
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'\x0b\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p137
sg21
F1.8
sg69
Vn
sa(dp138
g63
g64
sg20
F6.3840000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F2.5000000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'\x17\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p144
sg21
F1.8999999999999999
sg69
Vn
sa(dp145
g63
g64
sg20
F4.0670000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F1.9600000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'\x1e\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p151
sg21
F1.2
sg69
Vn
sa(dp152
g63
g64
sg20
F8.1669999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F1.4199999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x1a\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V35-raisins.png
p158
sg21
F1.8
sg69
Vn
sa(dp159
g63
g64
sg20
F5.1669999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F0.91999999999999993
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'\x0e\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p165
sg21
F1.1000000000000001
sg69
Vn
sa(dp166
g63
g64
sg20
F3.3170000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F0.85999999999999965
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'\x07\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p172
sg21
F1.2
sg69
Vn
sa(dp173
g63
g64
sg20
F4.617
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F0.87999999999999923
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S'"\x00\x00\x00'
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p179
sg21
F1.7
sg69
Vn
sa(dp180
g63
g64
sg20
F7.4669999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F0.65999999999999925
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'\x15\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V29-beans.png
p186
sg21
F1.3999999999999999
sg69
Vn
sa(dp187
g63
g64
sg20
F3.7509999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F0.33999999999999897
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'&\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V50-polo.png
p193
sg21
F1.6000000000000001
sg69
Vn
sa(dp194
g63
g64
sg20
F8.3170000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F1.6799999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'\x14\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p200
sg21
F1.8
sg69
Vn
sa(dp201
g63
g64
sg20
F8.4009999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F1.5200000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'\r\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p207
sg21
F1.3
sg69
Vn
sa(dp208
g63
g64
sg20
F3.2679999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F1.8799999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'%\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p214
sg21
F2
sg69
Vn
sa(dp215
g63
g64
sg20
F10.500999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F1.0599999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'\x03\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V4-corn.png
p221
sg21
F1.7
sg69
Vn
sa(dp222
g63
g64
sg20
F5.9169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F2.5800000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x1c\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p228
sg21
F2
sg69
Vn
sa(dp229
g63
g64
sg20
F3.3010000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F1.7199999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'\x19\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p235
sg21
F1.8999999999999999
sg69
Vn
sa(dp236
g63
g64
sg20
F3.7509999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F1.0799999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'\x0f\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p242
sg21
F1.7
sg69
Vn
sa(dp243
g63
g64
sg20
F2.8839999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F1.48
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'\x12\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p249
sg21
F1.6000000000000001
sg69
Vn
sa(dp250
g63
g64
sg20
F5.8170000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F2
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S'\x1f\x00\x00\x00'
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p256
sg21
F1.8
sg69
Vn
sa(dp257
g63
g64
sg20
F2.8170000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F1.6799999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'\n\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p263
sg21
F1.8
sg69
Vn
sa(dp264
g63
g64
sg20
F4.101
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F2.3800000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'\x0c\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V18-mms.png
p270
sg21
F1.8
sg69
Vn
sa(dp271
g63
g64
sg20
F4.617
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F2.3000000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'!\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V44-crunch.png
p277
sg21
F1.8
sg69
Vn
sa(dp278
g63
g64
sg20
F7.4509999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F1.5
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S' \x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p284
sg21
F1.6000000000000001
sg69
Vn
sa(dp285
g63
g64
sg20
F3.2509999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F1.3999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S"'\x00\x00\x00"
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V51-mars.png
p291
sg21
F1.5
sg69
Vn
sa(dp292
g63
g64
sg20
F5.5839999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S'\x06\x00\x00\x00'
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V7-olives.png
p298
sg21
F1.3
sg69
Vn
sa(dp299
g63
g64
sg20
F3.4169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F1.7200000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S'\x02\x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p305
sg21
F1.5
sg69
Vn
sa(dp306
g63
g64
sg20
F5.5339999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F1.54
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S'\x11\x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p312
sg21
F1.5
sg69
Vn
sa(dp313
g63
g64
sg20
F5.2169999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F1.46
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S'\x10\x00\x00\x00'
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V22-daim.png
p319
sg21
F1.5
sg69
Vn
sa(dp320
g63
g64
sg20
F7.8339999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F1.2599999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'\x04\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p326
sg21
F1.6000000000000001
sg69
Vn
sa(dp327
g63
g64
sg20
F6.0170000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F0.75999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'\x1b\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p333
sg21
F1.2
sg69
Vn
sa(dp334
g63
g64
sg20
F4.234
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F2.3400000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'\x00\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p340
sg21
F1.7
sg69
Vn
sa(dp341
g63
g64
sg20
F3.2839999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F1.78
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S'$\x00\x00\x00'
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V48-twix.png
p347
sg21
F1.7
sg69
Vn
sa(dp348
g63
g64
sg20
F1.734
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F1.5999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S'\x08\x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p354
sg21
F1.7
sg69
Vn
sa(dp355
g63
g64
sg20
F8.234
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F2.4000000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S'#\x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p361
sg21
F1.8
sg69
Vn
sa(dp362
g63
g64
sg20
F8.3840000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F1.4599999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'\t\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p368
sg21
F1.8999999999999999
sg69
Vn
sa(dp369
g63
g64
sg20
F5.3840000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F1.1999999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\x13\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p375
sg21
F1.6000000000000001
sg69
Vn
sa(dp376
g63
g64
sg55
g11
sg56
Vr
sg23
F25.18304068825455
sg57
Vn
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vn
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p380
sg26
F1.8999999999999992
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'13-mccoys_steak_crisps.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vr
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'right'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F4.4001299483279581
sg27
F14.717000000000001
sg69
Vn
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p389
sg26
F5.2000000000000011
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'16-skips_prawn.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vr
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'left'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F2.8334104052191833
sg27
F5.5839999999999996
sg69
Vn
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'46-pistachios.png'
p398
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'29-beans.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vr
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'left'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F1.5167051170792547
sg27
F3.4510000000000001
sg69
Vn
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p407
sg26
F4.9000000000000012
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'18-mms.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vr
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'right'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F1.9001863980192866
sg27
F1.8009999999999999
sg69
Vn
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p416
sg26
F4.9000000000000021
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'42-mrkipling_lemon_slices.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vr
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'right'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F1.9999797579403094
sg27
F11.467000000000001
sg69
Vn
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p425
sg26
F1
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'38-maltesers.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vr
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'right'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F7.3498056191929209
sg27
F6.0839999999999996
sg69
Vn
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'4-corn.png'
p434
sg26
F2.5999999999999992
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'10-bounty_redo.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vr
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'right'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F7.516625574335194
sg27
F2.7839999999999998
sg69
Vn
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'40-sardines.png'
p443
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'5-pineapple.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vr
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'right'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F1.3005931779116509
sg27
F2.0840000000000001
sg69
Vn
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'7-olives.png'
p452
sg26
F5.9999999999999982
sg28
F3
sg58
g62
sg57
Vn
sg80
S'22-daim.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vr
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'right'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F1.366772457568004
sg27
F1.8009999999999999
sg69
Vn
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'29-beans.png'
p461
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'46-pistachios.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vr
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'right'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F1.7001808670902392
sg27
F1.651
sg69
Vn
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'49-yorkie.png'
p470
sg26
F4.0000000000000009
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'35-raisins.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vr
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'left'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F2.3834034487881581
sg27
F2.5670000000000002
sg69
Vn
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'48-twix.png'
p479
sg26
F5.4999999999999991
sg28
F4
sg58
g62
sg57
Vn
sg80
S'50-polo.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vr
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'left'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F1.333446327749698
sg27
F1.2669999999999999
sg69
Vn
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'18-mms.png'
p488
sg26
F3.0999999999999996
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'43-mrporky_pork_crackles_redo.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vr
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'left'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F3.0835110453226662
sg27
F1.617
sg69
Vn
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'5-pineapple.png'
p497
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'40-sardines.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vr
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'left'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F1.4168456140869239
sg27
F1.2509999999999999
sg69
Vn
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'51-mars.png'
p506
sg26
F2.1999999999999984
sg28
F4
sg58
g62
sg57
Vn
sg80
S'27-hartleys_raspberries_jelly.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vr
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'right'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F4.4334173046227079
sg27
F1.9670000000000001
sg69
Vn
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p515
sg26
F1.9999999999999996
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'4-corn.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vr
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'left'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F2.2335121287032962
sg27
F1.667
sg69
Vn
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p524
sg26
F4.3000000000000007
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'33-ambrosia_rice.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vr
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'right'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F1.5668583865444816
sg27
F3.0179999999999998
sg69
Vn
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p533
sg26
F5.6999999999999984
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'17-jacobs_mini_cheddars_redo.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vr
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'right'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F1.7001931263657752
sg27
F1.651
sg69
Vn
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p542
sg26
F4.9000000000000004
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vr
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'right'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F1.683488864586252
sg27
F3.1669999999999998
sg69
Vn
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p551
sg26
F4
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'19-caramello_redo.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vr
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'right'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F1.4668457851439598
sg27
F4.3840000000000003
sg69
Vn
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p560
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'23-crunchie_redo.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vr
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'left'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F1.5167054021803779
sg27
F1.5169999999999999
sg69
Vn
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p569
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'8-liquorice_catherine_wheels.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vr
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'left'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F1.0333902771963039
sg27
F1.417
sg69
Vn
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'35-raisins.png'
p578
sg26
F2.1999999999999993
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'49-yorkie.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vr
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'right'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F1.0167102488703676
sg27
F1.351
sg69
Vn
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p587
sg26
F5.2999999999999998
sg28
F4
sg58
g62
sg57
Vn
sg80
S'2-steamed_puddings.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vr
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'right'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F2.5000168208680407
sg27
F1.284
sg69
Vn
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'44-crunch.png'
p596
sg26
F1
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'26-walkers_smoky_bacon.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vr
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'right'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F8.1999536428302235
sg27
F1.1679999999999999
sg69
Vn
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'25-kitkat.png'
p605
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'31-hobnobs.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vr
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'right'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F1.3001253297188669
sg27
F3.0009999999999999
sg69
Vn
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p614
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'21-nakd_banana_crunch.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vr
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'left'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F1.4001721430468024
sg27
F1.0509999999999999
sg69
Vn
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p623
sg26
F2.7999999999999998
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'51-mars.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vr
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'left'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F1.7667521584844508
sg27
F1.768
sg69
Vn
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p632
sg26
F4.9000000000000004
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'30-spaghetti_hoops.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vr
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'left'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F1.9000854728146805
sg27
F1.101
sg69
Vn
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p641
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'1-treacle_cookies.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vr
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'right'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F1.1667221660281939
sg27
F1.5169999999999999
sg69
Vn
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'31-hobnobs.png'
p650
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'25-kitkat.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vr
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'left'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F0.88340316369067295
sg27
F2.9169999999999998
sg69
Vn
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p659
sg26
F2.9999999999999996
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'36-fig_rolls.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vr
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'left'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F3.0505338772272808
sg27
F2.3170000000000002
sg69
Vn
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p668
sg26
F1
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'44-crunch.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vr
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'left'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F1.6168383155418269
sg27
F2.6339999999999999
sg69
Vn
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p677
sg26
F1
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'3-ellas_strawberries_apples.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vr
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'right'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F11.816527671184303
sg27
F1.6339999999999999
sg69
Vn
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p686
sg26
F4.4000000000000012
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'45-chewy_nougat_redo.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vr
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'left'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F3.1338373701510136
sg27
F1.268
sg69
Vn
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'22-daim.png'
p695
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'7-olives.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vr
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'left'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F1.4168604392580164
sg27
F1.034
sg69
Vn
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'38-maltesers.png'
p704
sg26
F1
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'6-sour_patch_kids.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vr
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'left'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F2.8332230948799406
sg27
F6.6340000000000003
sg69
Vn
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p713
sg26
F5.9999999999999982
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'41-peanuts_redo.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vr
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'right'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F0.96673687715883716
sg27
F0.98399999999999999
sg69
Vn
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p722
sg26
F4.9000000000000012
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'20-fruit_pastilles.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vr
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'left'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F1.0667289513912692
sg27
F1.2010000000000001
sg69
Vn
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'50-polo.png'
p731
sg26
F5.8999999999999977
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'48-twix.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vr
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'right'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F1.1334889786230633
sg27
F1.0840000000000001
sg69
Vn
sa(dp738
g63
g64
sg56
Vr
sg29
S'space'
p739
sg57
Vn
sg58
g62
sg30
F360.22542442755002
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp740
g63
g64
sg56
Vr
sg57
Vn
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F3.233396948526206
sg65
g66
sg67
g68
sg69
Vn
sa(dp742
g63
g64
sg81
S'53-cheestrings.png'
p743
sg82
S'53-cheestrings.png'
p744
sg56
Vr
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'47-picnic.png'
p748
sg33
g748
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S"\x07\xdf\n\x13\x10'\x18\x02eH"
tRp753
sa(dp754
g63
g64
sg81
S'32-hovis_crackers.png'
p755
sg82
S'32-hovis_crackers.png'
p756
sg56
Vr
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S"\x07\xdf\n\x13\x10'\x1f\x01D8"
tRp764
sa(dp765
g63
g64
sg81
S'12-topic.png'
p766
sg82
S'12-topic.png'
p767
sg56
Vr
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'39-mackerel.png'
p771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S"\x07\xdf\n\x13\x10'%\n\xa6\x90"
tRp775
sa(dp776
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p777
sg82
S'9-yu_mango_pieces.png'
p778
sg56
Vr
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p781
I0
sg83
S'9-yu_mango_pieces.png'
p782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p783
sS'practice_loop.thisIndex'
p784
g59
(g98
S'\x03\x00\x00\x00'
tRp785
sg34
g752
(S"\x07\xdf\n\x13\x10'-\x03O\xa8"
tRp786
sa(dp787
g63
g64
sg81
S'52-aero_mousse.png'
p788
sg82
S'14-discos_salt_vinegar.png'
p789
sg56
Vr
sS'practice_loop.thisN'
p790
I4
sS'practice_loop.thisTrialN'
p791
I4
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p792
I0
sg83
S'14-discos_salt_vinegar.png'
p793
sg33
g788
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p794
sS'practice_loop.thisIndex'
p795
g59
(g98
S'\x04\x00\x00\x00'
tRp796
sg34
g752
(S"\x07\xdf\n\x13\x10'4\x05G\x90"
tRp797
sa(dp798
g63
g64
sg81
g755
sg82
S'24-food_doctor_apple_walnut_bar.png'
p799
sg56
Vr
sS'practice_loop.thisN'
p800
I5
sS'practice_loop.thisTrialN'
p801
I5
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p802
I0
sg83
g760
sg33
g760
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p803
sS'practice_loop.thisIndex'
p804
g59
(g98
S'\x05\x00\x00\x00'
tRp805
sg34
g752
(S"\x07\xdf\n\x13\x10';\x03\xadh"
tRp806
sa(dp807
g63
g64
sg81
g743
sg82
S'47-picnic.png'
p808
sg56
Vr
sS'practice_loop.thisN'
p809
I6
sS'practice_loop.thisTrialN'
p810
I6
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p811
I0
sg83
g748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p812
sS'practice_loop.thisIndex'
p813
g59
(g98
S'\x06\x00\x00\x00'
tRp814
sg34
g752
(S'\x07\xdf\n\x13\x10(\x06\x08\n\x98'
tRp815
sa(dp816
g63
g64
sg81
S'11-snickers.png'
p817
sg82
S'11-snickers.png'
p818
sg56
Vr
sS'practice_loop.thisN'
p819
I7
sS'practice_loop.thisTrialN'
p820
I7
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p821
I0
sg83
S'54-frubes_yogurt.png'
p822
sg33
g817
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p823
sS'practice_loop.thisIndex'
p824
g59
(g98
S'\x07\x00\x00\x00'
tRp825
sg34
g752
(S'\x07\xdf\n\x13\x10(\r\x02\xde`'
tRp826
sa(dp827
g63
g64
sg81
g766
sg82
S'39-mackerel.png'
p828
sg56
Vr
sS'practice_loop.thisN'
p829
I8
sS'practice_loop.thisTrialN'
p830
I8
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p831
I0
sg83
g771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p832
sS'practice_loop.thisIndex'
p833
g59
(g98
S'\x08\x00\x00\x00'
tRp834
sg34
g752
(S'\x07\xdf\n\x13\x10(\x13\n\xd1\x88'
tRp835
sa(dp836
g63
g64
sg81
g777
sg82
S'37-nakd_cashew_cookie.png'
p837
sg56
Vr
sS'practice_loop.thisN'
p838
I9
sS'practice_loop.thisTrialN'
p839
I9
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p840
I0
sg83
g782
sg33
g782
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p841
sS'practice_loop.thisIndex'
p842
g59
(g98
S'\t\x00\x00\x00'
tRp843
sg34
g752
(S'\x07\xdf\n\x13\x10(\x1c\x0b\x8d\x08'
tRp844
sa(dp845
g63
g64
sg81
S'15-walnut_whip.png'
p846
sg82
S'28-maple_pecan.png'
p847
sg56
Vr
sS'practice_loop.thisN'
p848
I10
sS'practice_loop.thisTrialN'
p849
I10
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p850
I0
sg83
S'28-maple_pecan.png'
p851
sg33
g846
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p852
sS'practice_loop.thisIndex'
p853
g59
(g98
S'\n\x00\x00\x00'
tRp854
sg34
g752
(S'\x07\xdf\n\x13\x10(#\x0e\xb5\xa0'
tRp855
sa(dp856
g63
g64
sg81
g788
sg82
S'52-aero_mousse.png'
p857
sg56
Vr
sS'practice_loop.thisN'
p858
I11
sS'practice_loop.thisTrialN'
p859
I11
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p860
I0
sg83
g793
sg33
g788
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\n\x13\x10(*\x0cc\xe0'
tRp864
sa(dp865
g63
g64
sg81
g817
sg82
S'54-frubes_yogurt.png'
p866
sg56
Vr
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g822
sg33
g817
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\n\x13\x10(2\x01@P'
tRp873
sa(dp874
g63
g64
sg81
g846
sg82
S'15-walnut_whip.png'
p875
sg56
Vr
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g851
sg33
g851
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\n\x13\x10(8\t\xeb\x10'
tRp882
sa(dp883
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F38.649817194233037
sg65
g66
sg67
g68
sg69
Vn
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vr
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vn
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'5-pineapple.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'left'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'5-pineapple.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'40-sardines.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p907
I0
sS'img_wrong'
p908
S'40-sardines.png'
p909
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vn
sS'block_loop.thisTrialN'
p911
I0
sg39
F0.93344353377324296
sg34
g752
(S'\x07\xdf\n\x13\x10)2\x02*\xb0'
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'left'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'36-fig_rolls.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p925
I0
sg908
S'36-fig_rolls.png'
p926
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vn
sS'block_loop.thisTrialN'
p928
I0
sg39
F1.2167462854376936
sg34
g752
(S'\x07\xdf\n\x13\x10)8\x01\x8a\x88'
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'41-peanuts_redo.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'left'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
S'41-peanuts_redo.png'
p936
sg63
g64
sS'trial_loop.thisIndex'
p937
g59
(g98
S'\x02\x00\x00\x00'
tRp938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p939
I0
sg903
S'45-chewy_nougat_redo.png'
p940
sS'block_loop.thisRepN'
p941
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p942
I0
sg908
S'45-chewy_nougat_redo.png'
p943
sg55
g11
sS'block_loop.thisTrial'
p944
Nsg69
Vn
sS'block_loop.thisTrialN'
p945
I0
sg39
F1.7832676844336675
sg34
g752
(S'\x07\xdf\n\x13\x10*\x02\x05r\x88'
tRp946
sa(dp947
S'trial_loop.thisTrialN'
p948
I3
sg894
S'49-yorkie.png'
p949
sS'block_loop.thisIndex'
p950
g888
sg38
S'left'
p951
sg58
g62
sS'trial_loop.thisN'
p952
I3
sg33
S'49-yorkie.png'
p953
sg63
g64
sS'trial_loop.thisIndex'
p954
g59
(g98
S'\x03\x00\x00\x00'
tRp955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p956
I0
sg903
S'35-raisins.png'
p957
sS'block_loop.thisRepN'
p958
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p959
I0
sg908
S'35-raisins.png'
p960
sg55
g11
sS'block_loop.thisTrial'
p961
Nsg69
Vn
sS'block_loop.thisTrialN'
p962
I0
sg39
F2.5167396141114295
sg34
g752
(S'\x07\xdf\n\x13\x10*\t\x02\xa7\xb0'
tRp963
sa(dp964
S'trial_loop.thisTrialN'
p965
I4
sg894
S'16-skips_prawn.png'
p966
sS'block_loop.thisIndex'
p967
g888
sg38
S'left'
p968
sg58
g62
sS'trial_loop.thisN'
p969
I4
sg33
S'16-skips_prawn.png'
p970
sg63
g64
sS'trial_loop.thisIndex'
p971
g59
(g98
S'\x04\x00\x00\x00'
tRp972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p973
I0
sg903
S'42-mrkipling_lemon_slices.png'
p974
sS'block_loop.thisRepN'
p975
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p976
I0
sg908
S'42-mrkipling_lemon_slices.png'
p977
sg55
g11
sS'block_loop.thisTrial'
p978
Nsg69
Vn
sS'block_loop.thisTrialN'
p979
I0
sg39
F1.600118943490088
sg34
g752
(S'\x07\xdf\n\x13\x10*\x10\x0b\x10\x08'
tRp980
sa(dp981
S'trial_loop.thisTrialN'
p982
I5
sg894
g949
sS'block_loop.thisIndex'
p983
g888
sg38
S'left'
p984
sg58
g62
sS'trial_loop.thisN'
p985
I5
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p986
g59
(g98
S'\x05\x00\x00\x00'
tRp987
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p988
I0
sg903
g957
sS'block_loop.thisRepN'
p989
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p990
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p991
Nsg69
Vn
sS'block_loop.thisTrialN'
p992
I0
sg39
F1.4835739952832228
sg34
g752
(S'\x07\xdf\n\x13\x10*\x17\x05j\xb8'
tRp993
sa(dp994
S'trial_loop.thisTrialN'
p995
I6
sg894
S'51-mars.png'
p996
sS'block_loop.thisIndex'
p997
g888
sg38
S'left'
p998
sg58
g62
sS'trial_loop.thisN'
p999
I6
sg33
S'51-mars.png'
p1000
sg63
g64
sS'trial_loop.thisIndex'
p1001
g59
(g98
S'\x06\x00\x00\x00'
tRp1002
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1003
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p1004
sS'block_loop.thisRepN'
p1005
I0
sg906
S'27-hartleys_raspberries_jelly.png'
p1006
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1007
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p1008
Nsg69
Vn
sS'block_loop.thisTrialN'
p1009
I0
sg39
F1.2668040465869126
sg34
g752
(S'\x07\xdf\n\x13\x10*\x1d\rY\xf8'
tRp1010
sa(dp1011
S'trial_loop.thisTrialN'
p1012
I7
sg894
S'35-raisins.png'
p1013
sS'block_loop.thisIndex'
p1014
g888
sg38
S'right'
p1015
sg58
g62
sS'trial_loop.thisN'
p1016
I7
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1017
g59
(g98
S'\x07\x00\x00\x00'
tRp1018
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1019
I0
sg903
S'49-yorkie.png'
p1020
sS'block_loop.thisRepN'
p1021
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1022
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1023
Nsg69
Vn
sS'block_loop.thisTrialN'
p1024
I0
sg39
F1.0334820792195387
sg34
g752
(S'\x07\xdf\n\x13\x10*$\x02\xb7P'
tRp1025
sa(dp1026
S'trial_loop.thisTrialN'
p1027
I8
sg894
S'6-sour_patch_kids.png'
p1028
sS'block_loop.thisIndex'
p1029
g888
sg38
S'left'
p1030
sg58
g62
sS'trial_loop.thisN'
p1031
I8
sg33
S'38-maltesers.png'
p1032
sg63
g64
sS'trial_loop.thisIndex'
p1033
g59
(g98
S'\x08\x00\x00\x00'
tRp1034
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1035
I0
sg903
S'38-maltesers.png'
p1036
sS'block_loop.thisRepN'
p1037
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1038
I0
sg908
S'6-sour_patch_kids.png'
p1039
sg55
g11
sS'block_loop.thisTrial'
p1040
Nsg69
Vn
sS'block_loop.thisTrialN'
p1041
I0
sg39
F1.1331747990334406
sg34
g752
(S'\x07\xdf\n\x13\x10**\x03\xc0\xf0'
tRp1042
sa(dp1043
S'trial_loop.thisTrialN'
p1044
I9
sg894
S'18-mms.png'
p1045
sS'block_loop.thisIndex'
p1046
g888
sg38
S'left'
p1047
sg58
g62
sS'trial_loop.thisN'
p1048
I9
sg33
S'18-mms.png'
p1049
sg63
g64
sS'trial_loop.thisIndex'
p1050
g59
(g98
S'\t\x00\x00\x00'
tRp1051
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1052
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p1053
sS'block_loop.thisRepN'
p1054
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1055
I0
sg908
S'43-mrporky_pork_crackles_redo.png'
p1056
sg55
g11
sS'block_loop.thisTrial'
p1057
Nsg69
Vn
sS'block_loop.thisTrialN'
p1058
I0
sg39
F1.3505691155187378
sg34
g752
(S'\x07\xdf\n\x13\x10*0\x069\xc0'
tRp1059
sa(dp1060
S'trial_loop.thisTrialN'
p1061
I10
sg894
S'36-fig_rolls.png'
p1062
sS'block_loop.thisIndex'
p1063
g888
sg38
S'left'
p1064
sg58
g62
sS'trial_loop.thisN'
p1065
I10
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1066
g59
(g98
S'\n\x00\x00\x00'
tRp1067
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1068
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p1069
sS'block_loop.thisRepN'
p1070
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1071
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1072
Nsg69
Vn
sS'block_loop.thisTrialN'
p1073
I0
sg39
F2.6834991281648399
sg34
g752
(S'\x07\xdf\n\x13\x10*6\x0c\n\x08'
tRp1074
sa(dp1075
S'trial_loop.thisTrialN'
p1076
I11
sg894
g949
sS'block_loop.thisIndex'
p1077
g888
sg38
S'left'
p1078
sg58
g62
sS'trial_loop.thisN'
p1079
I11
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1080
g59
(g98
S'\x0b\x00\x00\x00'
tRp1081
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1082
I0
sg903
g957
sS'block_loop.thisRepN'
p1083
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1084
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1085
Nsg69
Vn
sS'block_loop.thisTrialN'
p1086
I0
sg39
F1.1667672117400798
sg34
g752
(S'\x07\xdf\n\x13\x10+\x02\x07\xcc\x18'
tRp1087
sa(dp1088
S'trial_loop.thisTrialN'
p1089
I12
sg894
S'8-liquorice_catherine_wheels.png'
p1090
sS'block_loop.thisIndex'
p1091
g888
sg38
S'right'
p1092
sg58
g62
sS'trial_loop.thisN'
p1093
I12
sg33
S'8-liquorice_catherine_wheels.png'
p1094
sg63
g64
sS'trial_loop.thisIndex'
p1095
g59
(g98
S'\x0c\x00\x00\x00'
tRp1096
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1097
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p1098
sS'block_loop.thisRepN'
p1099
I0
sg906
S'17-jacobs_mini_cheddars_redo.png'
p1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1101
I0
sg908
g1094
sg55
g11
sS'block_loop.thisTrial'
p1102
Nsg69
Vn
sS'block_loop.thisTrialN'
p1103
I0
sg39
F1.8168615226386464
sg34
g752
(S'\x07\xdf\n\x13\x10+\x08\n\xbe\x00'
tRp1104
sa(dp1105
S'trial_loop.thisTrialN'
p1106
I13
sg894
S'46-pistachios.png'
p1107
sS'block_loop.thisIndex'
p1108
g888
sg38
S'left'
p1109
sg58
g62
sS'trial_loop.thisN'
p1110
I13
sg33
S'29-beans.png'
p1111
sg63
g64
sS'trial_loop.thisIndex'
p1112
g59
(g98
S'\r\x00\x00\x00'
tRp1113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1114
I0
sg903
S'29-beans.png'
p1115
sS'block_loop.thisRepN'
p1116
I0
sg906
g1111
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1117
I0
sg908
S'46-pistachios.png'
p1118
sg55
g11
sS'block_loop.thisTrial'
p1119
Nsg69
Vn
sS'block_loop.thisTrialN'
p1120
I0
sg39
F1.183421010915481
sg34
g752
(S'\x07\xdf\n\x13\x10+\x0f\x08l@'
tRp1121
sa(dp1122
S'trial_loop.thisTrialN'
p1123
I14
sg894
S'38-maltesers.png'
p1124
sS'block_loop.thisIndex'
p1125
g888
sg38
S'left'
p1126
sg58
g62
sS'trial_loop.thisN'
p1127
I14
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p1128
g59
(g98
S'\x0e\x00\x00\x00'
tRp1129
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1130
I0
sg903
S'6-sour_patch_kids.png'
p1131
sS'block_loop.thisRepN'
p1132
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1133
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p1134
Nsg69
Vn
sS'block_loop.thisTrialN'
p1135
I0
sg39
F2.5165862306093914
sg34
g752
(S'\x07\xdf\n\x13\x10+\x15\x0b\xdb('
tRp1136
sa(dp1137
S'trial_loop.thisTrialN'
p1138
I15
sg894
S'44-crunch.png'
p1139
sS'block_loop.thisIndex'
p1140
g888
sg38
S'left'
p1141
sg58
g62
sS'trial_loop.thisN'
p1142
I15
sg33
S'26-walkers_smoky_bacon.png'
p1143
sg63
g64
sS'trial_loop.thisIndex'
p1144
g59
(g98
S'\x0f\x00\x00\x00'
tRp1145
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1146
I0
sg903
S'26-walkers_smoky_bacon.png'
p1147
sS'block_loop.thisRepN'
p1148
I0
sg906
g1143
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1149
I0
sg908
S'44-crunch.png'
p1150
sg55
g11
sS'block_loop.thisTrial'
p1151
Nsg69
Vn
sS'block_loop.thisTrialN'
p1152
I0
sg39
F1.3668870675464859
sg34
g752
(S'\x07\xdf\n\x13\x10+\x1d\x04\xfdX'
tRp1153
sa(dp1154
S'trial_loop.thisTrialN'
p1155
I16
sg894
S'21-nakd_banana_crunch.png'
p1156
sS'block_loop.thisIndex'
p1157
g888
sg38
S'left'
p1158
sg58
g62
sS'trial_loop.thisN'
p1159
I16
sg33
S'1-treacle_cookies.png'
p1160
sg63
g64
sS'trial_loop.thisIndex'
p1161
g59
(g98
S'\x10\x00\x00\x00'
tRp1162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1163
I0
sg903
S'1-treacle_cookies.png'
p1164
sS'block_loop.thisRepN'
p1165
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1166
I0
sg908
S'21-nakd_banana_crunch.png'
p1167
sg55
g11
sS'block_loop.thisTrial'
p1168
Nsg69
Vn
sS'block_loop.thisTrialN'
p1169
I0
sg39
F1.0334641179506434
sg34
g752
(S'\x07\xdf\n\x13\x10+#\x0b\x088'
tRp1170
sa(dp1171
S'trial_loop.thisTrialN'
p1172
I17
sg894
S'10-bounty_redo.png'
p1173
sS'block_loop.thisIndex'
p1174
g888
sg38
S'left'
p1175
sg58
g62
sS'trial_loop.thisN'
p1176
I17
sg33
S'4-corn.png'
p1177
sg63
g64
sS'trial_loop.thisIndex'
p1178
g59
(g98
S'\x11\x00\x00\x00'
tRp1179
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1180
I0
sg903
S'4-corn.png'
p1181
sS'block_loop.thisRepN'
p1182
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1183
I0
sg908
S'10-bounty_redo.png'
p1184
sg55
g11
sS'block_loop.thisTrial'
p1185
Nsg69
Vn
sS'block_loop.thisTrialN'
p1186
I0
sg39
F0.93363626100108377
sg34
g752
(S'\x07\xdf\n\x13\x10+)\x0c\x11\xd8'
tRp1187
sa(dp1188
S'trial_loop.thisTrialN'
p1189
I18
sg894
S'31-hobnobs.png'
p1190
sS'block_loop.thisIndex'
p1191
g888
sg38
S'left'
p1192
sg58
g62
sS'trial_loop.thisN'
p1193
I18
sg33
S'25-kitkat.png'
p1194
sg63
g64
sS'trial_loop.thisIndex'
p1195
g59
(g98
S'\x12\x00\x00\x00'
tRp1196
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1197
I0
sg903
S'25-kitkat.png'
p1198
sS'block_loop.thisRepN'
p1199
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1200
I0
sg908
S'31-hobnobs.png'
p1201
sg55
g11
sS'block_loop.thisTrial'
p1202
Nsg69
Vn
sS'block_loop.thisTrialN'
p1203
I0
sg39
F1.2834846451150952
sg34
g752
(S'\x07\xdf\n\x13\x10+/\x0bu\x98'
tRp1204
sa(dp1205
S'trial_loop.thisTrialN'
p1206
I19
sg894
S'19-caramello_redo.png'
p1207
sS'block_loop.thisIndex'
p1208
g888
sg38
S'left'
p1209
sg58
g62
sS'trial_loop.thisN'
p1210
I19
sg33
S'30-spaghetti_hoops.png'
p1211
sg63
g64
sS'trial_loop.thisIndex'
p1212
g59
(g98
S'\x13\x00\x00\x00'
tRp1213
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1214
I0
sg903
S'30-spaghetti_hoops.png'
p1215
sS'block_loop.thisRepN'
p1216
I0
sg906
g1211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1217
I0
sg908
S'19-caramello_redo.png'
p1218
sg55
g11
sS'block_loop.thisTrial'
p1219
Nsg69
Vn
sS'block_loop.thisTrialN'
p1220
I0
sg39
F0.93353505069535458
sg34
g752
(S'\x07\xdf\n\x13\x10+6\x01\r\x88'
tRp1221
sa(dp1222
S'trial_loop.thisTrialN'
p1223
I20
sg894
g895
sS'block_loop.thisIndex'
p1224
g888
sg38
S'left'
p1225
sg58
g62
sS'trial_loop.thisN'
p1226
I20
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1227
g59
(g98
S'\x14\x00\x00\x00'
tRp1228
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1229
I0
sg903
g904
sS'block_loop.thisRepN'
p1230
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1231
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1232
Nsg69
Vn
sS'block_loop.thisTrialN'
p1233
I0
sg39
F3.7000480107453768
sg34
g752
(S'\x07\xdf\n\x13\x10,\x00\x00\xab\xe0'
tRp1234
sa(dp1235
S'trial_loop.thisTrialN'
p1236
I21
sg894
g966
sS'block_loop.thisIndex'
p1237
g888
sg38
S'left'
p1238
sg58
g62
sS'trial_loop.thisN'
p1239
I21
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p1240
g59
(g98
S'\x15\x00\x00\x00'
tRp1241
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1242
I0
sg903
g974
sS'block_loop.thisRepN'
p1243
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1244
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1245
Nsg69
Vn
sS'block_loop.thisTrialN'
p1246
I0
sg39
F2.3000694502261467
sg34
g752
(S'\x07\xdf\n\x13\x10,\x08\x0b\xa8`'
tRp1247
sa(dp1248
S'trial_loop.thisTrialN'
p1249
I22
sg894
S'3-ellas_strawberries_apples.png'
p1250
sS'block_loop.thisIndex'
p1251
g888
sg38
S'left'
p1252
sg58
g62
sS'trial_loop.thisN'
p1253
I22
sg33
S'3-ellas_strawberries_apples.png'
p1254
sg63
g64
sS'trial_loop.thisIndex'
p1255
g59
(g98
S'\x16\x00\x00\x00'
tRp1256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1257
I0
sg903
S'13-mccoys_steak_crisps.png'
p1258
sS'block_loop.thisRepN'
p1259
I0
sg906
S'13-mccoys_steak_crisps.png'
p1260
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1261
I0
sg908
g1254
sg55
g11
sS'block_loop.thisTrial'
p1262
Nsg69
Vn
sS'block_loop.thisTrialN'
p1263
I0
sg39
F1.3167403553707118
sg34
g752
(S'\x07\xdf\n\x13\x10,\x10\x01\xb5\x80'
tRp1264
sa(dp1265
S'trial_loop.thisTrialN'
p1266
I23
sg894
g996
sS'block_loop.thisIndex'
p1267
g888
sg38
S'left'
p1268
sg58
g62
sS'trial_loop.thisN'
p1269
I23
sg33
g1006
sg63
g64
sS'trial_loop.thisIndex'
p1270
g59
(g98
S'\x17\x00\x00\x00'
tRp1271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1272
I0
sg903
g1004
sS'block_loop.thisRepN'
p1273
I0
sg906
g1006
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1274
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p1275
Nsg69
Vn
sS'block_loop.thisTrialN'
p1276
I0
sg39
F3.1005334780857083
sg34
g752
(S'\x07\xdf\n\x13\x10,\x16\x07\x08\xc8'
tRp1277
sa(dp1278
S'trial_loop.thisTrialN'
p1279
I24
sg894
S'40-sardines.png'
p1280
sS'block_loop.thisIndex'
p1281
g888
sg38
S'left'
p1282
sg58
g62
sS'trial_loop.thisN'
p1283
I24
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1284
g59
(g98
S'\x18\x00\x00\x00'
tRp1285
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1286
I0
sg903
S'5-pineapple.png'
p1287
sS'block_loop.thisRepN'
p1288
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1289
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1290
Nsg69
Vn
sS'block_loop.thisTrialN'
p1291
I0
sg39
F1.4834539684125048
sg34
g752
(S'\x07\xdf\n\x13\x10,\x1e\x08\xf8\xe0'
tRp1292
sa(dp1293
S'trial_loop.thisTrialN'
p1294
I25
sg894
S'22-daim.png'
p1295
sS'block_loop.thisIndex'
p1296
g888
sg38
S'left'
p1297
sg58
g62
sS'trial_loop.thisN'
p1298
I25
sg33
S'22-daim.png'
p1299
sg63
g64
sS'trial_loop.thisIndex'
p1300
g59
(g98
S'\x19\x00\x00\x00'
tRp1301
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1302
I0
sg903
S'7-olives.png'
p1303
sS'block_loop.thisRepN'
p1304
I0
sg906
g1299
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1305
I0
sg908
S'7-olives.png'
p1306
sg55
g11
sS'block_loop.thisTrial'
p1307
Nsg69
Vn
sS'block_loop.thisTrialN'
p1308
I0
sg39
F1.8501893630564155
sg34
g752
(S'\x07\xdf\n\x13\x10,%\x01\xa9\xc8'
tRp1309
sa(dp1310
S'trial_loop.thisTrialN'
p1311
I26
sg894
g1173
sS'block_loop.thisIndex'
p1312
g888
sg38
S'right'
p1313
sg58
g62
sS'trial_loop.thisN'
p1314
I26
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p1315
g59
(g98
S'\x1a\x00\x00\x00'
tRp1316
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1317
I0
sg903
g1181
sS'block_loop.thisRepN'
p1318
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1319
I0
sg908
g1184
sg55
g11
sS'block_loop.thisTrial'
p1320
Nsg69
Vn
sS'block_loop.thisTrialN'
p1321
I0
sg39
F1.3834638898733829
sg34
g752
(S'\x07\xdf\n\x13\x10,+\x0f\x17H'
tRp1322
sa(dp1323
S'trial_loop.thisTrialN'
p1324
I27
sg894
S'48-twix.png'
p1325
sS'block_loop.thisIndex'
p1326
g888
sg38
S'left'
p1327
sg58
g62
sS'trial_loop.thisN'
p1328
I27
sg33
S'48-twix.png'
p1329
sg63
g64
sS'trial_loop.thisIndex'
p1330
g59
(g98
S'\x1b\x00\x00\x00'
tRp1331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1332
I0
sg903
S'50-polo.png'
p1333
sS'block_loop.thisRepN'
p1334
I0
sg906
S'50-polo.png'
p1335
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1336
I0
sg908
g1329
sg55
g11
sS'block_loop.thisTrial'
p1337
Nsg69
Vn
sS'block_loop.thisTrialN'
p1338
I0
sg39
F1.3167346533846285
sg34
g752
(S'\x07\xdf\n\x13\x10,2\x06\x1a\x80'
tRp1339
sa(dp1340
S'trial_loop.thisTrialN'
p1341
I28
sg894
S'1-treacle_cookies.png'
p1342
sS'block_loop.thisIndex'
p1343
g888
sg38
S'left'
p1344
sg58
g62
sS'trial_loop.thisN'
p1345
I28
sg33
g1167
sg63
g64
sS'trial_loop.thisIndex'
p1346
g59
(g98
S'\x1c\x00\x00\x00'
tRp1347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1348
I0
sg903
S'21-nakd_banana_crunch.png'
p1349
sS'block_loop.thisRepN'
p1350
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1351
I0
sg908
g1167
sg55
g11
sS'block_loop.thisTrial'
p1352
Nsg69
Vn
sS'block_loop.thisTrialN'
p1353
I0
sg39
F1.9505329649073246
sg34
g752
(S'\x07\xdf\n\x13\x10,8\x0bq\xb0'
tRp1354
sa(dp1355
S'trial_loop.thisTrialN'
p1356
I29
sg894
g932
sS'block_loop.thisIndex'
p1357
g888
sg38
S'left'
p1358
sg58
g62
sS'trial_loop.thisN'
p1359
I29
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1360
g59
(g98
S'\x1d\x00\x00\x00'
tRp1361
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1362
I0
sg903
g940
sS'block_loop.thisRepN'
p1363
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1364
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1365
Nsg69
Vn
sS'block_loop.thisTrialN'
p1366
I0
sg39
F2.166781466712564
sg34
g752
(S'\x07\xdf\n\x13\x10-\x03\x0bB\xd0'
tRp1367
sa(dp1368
S'trial_loop.thisTrialN'
p1369
I30
sg894
g1295
sS'block_loop.thisIndex'
p1370
g888
sg38
S'right'
p1371
sg58
g62
sS'trial_loop.thisN'
p1372
I30
sg33
g1299
sg63
g64
sS'trial_loop.thisIndex'
p1373
g59
(g98
S'\x1e\x00\x00\x00'
tRp1374
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1375
I0
sg903
g1303
sS'block_loop.thisRepN'
p1376
I0
sg906
g1299
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1377
I0
sg908
g1306
sg55
g11
sS'block_loop.thisTrial'
p1378
Nsg69
Vn
sS'block_loop.thisTrialN'
p1379
I0
sg39
F3.3667331138458394
sg34
g752
(S'\x07\xdf\n\x13\x10-\n\x0e0\xd0'
tRp1380
sa(dp1381
S'trial_loop.thisTrialN'
p1382
I31
sg894
g1107
sS'block_loop.thisIndex'
p1383
g888
sg38
S'left'
p1384
sg58
g62
sS'trial_loop.thisN'
p1385
I31
sg33
g1118
sg63
g64
sS'trial_loop.thisIndex'
p1386
g59
(g98
S'\x1f\x00\x00\x00'
tRp1387
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1388
I0
sg903
g1115
sS'block_loop.thisRepN'
p1389
I0
sg906
g1111
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1390
I0
sg908
g1118
sg55
g11
sS'block_loop.thisTrial'
p1391
Nsg69
Vn
sS'block_loop.thisTrialN'
p1392
I0
sg39
F1.933506255649263
sg34
g752
(S'\x07\xdf\n\x13\x10-\x13\x05(P'
tRp1393
sa(dp1394
S'trial_loop.thisTrialN'
p1395
I32
sg894
S'7-olives.png'
p1396
sS'block_loop.thisIndex'
p1397
g888
sg38
S'right'
p1398
sg58
g62
sS'trial_loop.thisN'
p1399
I32
sg33
g1299
sg63
g64
sS'trial_loop.thisIndex'
p1400
g59
(g98
S' \x00\x00\x00'
tRp1401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1402
I0
sg903
S'22-daim.png'
p1403
sS'block_loop.thisRepN'
p1404
I0
sg906
g1299
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1405
I0
sg908
g1306
sg55
g11
sS'block_loop.thisTrial'
p1406
Nsg69
Vn
sS'block_loop.thisTrialN'
p1407
I0
sg39
F1.9334064708455116
sg34
g752
(S'\x07\xdf\n\x13\x10-\x1a\x04\xc2\xc0'
tRp1408
sa(dp1409
S'trial_loop.thisTrialN'
p1410
I33
sg894
g1028
sS'block_loop.thisIndex'
p1411
g888
sg38
S'right'
p1412
sg58
g62
sS'trial_loop.thisN'
p1413
I33
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p1414
g59
(g98
S'!\x00\x00\x00'
tRp1415
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1416
I0
sg903
g1036
sS'block_loop.thisRepN'
p1417
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1418
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p1419
Nsg69
Vn
sS'block_loop.thisTrialN'
p1420
I0
sg39
F1.1669992826900852
sg34
g752
(S'\x07\xdf\n\x13\x10-!\x04\x1a\xc8'
tRp1421
sa(dp1422
S'trial_loop.thisTrialN'
p1423
I34
sg894
g1325
sS'block_loop.thisIndex'
p1424
g888
sg38
S'left'
p1425
sg58
g62
sS'trial_loop.thisN'
p1426
I34
sg33
g1335
sg63
g64
sS'trial_loop.thisIndex'
p1427
g59
(g98
S'"\x00\x00\x00'
tRp1428
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1429
I0
sg903
g1333
sS'block_loop.thisRepN'
p1430
I0
sg906
g1335
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1431
I0
sg908
g1329
sg55
g11
sS'block_loop.thisTrial'
p1432
Nsg69
Vn
sS'block_loop.thisTrialN'
p1433
I0
sg39
F1.1835550076575601
sg34
g752
(S"\x07\xdf\n\x13\x10-'\x07\x0c\xb0"
tRp1434
sa(dp1435
S'trial_loop.thisTrialN'
p1436
I35
sg894
g1250
sS'block_loop.thisIndex'
p1437
g888
sg38
S'left'
p1438
sg58
g62
sS'trial_loop.thisN'
p1439
I35
sg33
g1260
sg63
g64
sS'trial_loop.thisIndex'
p1440
g59
(g98
S'#\x00\x00\x00'
tRp1441
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1442
I0
sg903
g1258
sS'block_loop.thisRepN'
p1443
I0
sg906
g1260
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1444
I0
sg908
g1254
sg55
g11
sS'block_loop.thisTrial'
p1445
Nsg69
Vn
sS'block_loop.thisTrialN'
p1446
I0
sg39
F1.85016940609421
sg34
g752
(S'\x07\xdf\n\x13\x10--\n{\x98'
tRp1447
sa(dp1448
S'trial_loop.thisTrialN'
p1449
I36
sg894
S'2-steamed_puddings.png'
p1450
sS'block_loop.thisIndex'
p1451
g888
sg38
S'left'
p1452
sg58
g62
sS'trial_loop.thisN'
p1453
I36
sg33
S'2-steamed_puddings.png'
p1454
sg63
g64
sS'trial_loop.thisIndex'
p1455
g59
(g98
S'$\x00\x00\x00'
tRp1456
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1457
I0
sg903
S'20-fruit_pastilles.png'
p1458
sS'block_loop.thisRepN'
p1459
I0
sg906
g1454
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1460
I0
sg908
S'20-fruit_pastilles.png'
p1461
sg55
g11
sS'block_loop.thisTrial'
p1462
Nsg69
Vn
sS'block_loop.thisTrialN'
p1463
I0
sg39
F2.2501653576800891
sg34
g752
(S'\x07\xdf\n\x13\x10-4\x08\xa6\xd8'
tRp1464
sa(dp1465
S'trial_loop.thisTrialN'
p1466
I37
sg894
g1090
sS'block_loop.thisIndex'
p1467
g888
sg38
S'left'
p1468
sg58
g62
sS'trial_loop.thisN'
p1469
I37
sg33
g1094
sg63
g64
sS'trial_loop.thisIndex'
p1470
g59
(g98
S'%\x00\x00\x00'
tRp1471
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1472
I0
sg903
g1098
sS'block_loop.thisRepN'
p1473
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1474
I0
sg908
g1094
sg55
g11
sS'block_loop.thisTrial'
p1475
Nsg69
Vn
sS'block_loop.thisTrialN'
p1476
I0
sg39
F1.9168287932188832
sg34
g752
(S'\x07\xdf\n\x13\x10-;\r\x00 '
tRp1477
sa(dp1478
S'trial_loop.thisTrialN'
p1479
I38
sg894
g1045
sS'block_loop.thisIndex'
p1480
g888
sg38
S'left'
p1481
sg58
g62
sS'trial_loop.thisN'
p1482
I38
sg33
g1056
sg63
g64
sS'trial_loop.thisIndex'
p1483
g59
(g98
S'&\x00\x00\x00'
tRp1484
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1485
I0
sg903
g1053
sS'block_loop.thisRepN'
p1486
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1487
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p1488
Nsg69
Vn
sS'block_loop.thisTrialN'
p1489
I0
sg39
F1.5672213181424013
sg34
g752
(S'\x07\xdf\n\x13\x10.\x06\x0cX('
tRp1490
sa(dp1491
S'trial_loop.thisTrialN'
p1492
I39
sg894
g996
sS'block_loop.thisIndex'
p1493
g888
sg38
S'right'
p1494
sg58
g62
sS'trial_loop.thisN'
p1495
I39
sg33
g1000
sg63
g64
sS'trial_loop.thisIndex'
p1496
g59
(g98
S"'\x00\x00\x00"
tRp1497
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1498
I0
sg903
g1004
sS'block_loop.thisRepN'
p1499
I0
sg906
g1006
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1500
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p1501
Nsg69
Vn
sS'block_loop.thisTrialN'
p1502
I0
sg39
F1.66685103097916
sg34
g752
(S'\x07\xdf\n\x13\x10.\r\x069\xc0'
tRp1503
sa(dp1504
S'trial_loop.thisTrialN'
p1505
I40
sg894
S'42-mrkipling_lemon_slices.png'
p1506
sS'block_loop.thisIndex'
p1507
g888
sg38
S'left'
p1508
sg58
g62
sS'trial_loop.thisN'
p1509
I40
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1510
g59
(g98
S'(\x00\x00\x00'
tRp1511
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1512
I0
sg903
S'16-skips_prawn.png'
p1513
sS'block_loop.thisRepN'
p1514
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1515
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1516
Nsg69
Vn
sS'block_loop.thisTrialN'
p1517
I0
sg39
F1.8833107914688298
sg34
g752
(S'\x07\xdf\n\x13\x10.\x14\x01\x8a\x88'
tRp1518
sa(dp1519
S'trial_loop.thisTrialN'
p1520
I41
sg894
g1342
sS'block_loop.thisIndex'
p1521
g888
sg38
S'left'
p1522
sg58
g62
sS'trial_loop.thisN'
p1523
I41
sg33
g1160
sg63
g64
sS'trial_loop.thisIndex'
p1524
g59
(g98
S')\x00\x00\x00'
tRp1525
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1526
I0
sg903
g1349
sS'block_loop.thisRepN'
p1527
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1528
I0
sg908
g1167
sg55
g11
sS'block_loop.thisTrial'
p1529
Nsg69
Vn
sS'block_loop.thisTrialN'
p1530
I0
sg39
F1.1501875384165032
sg34
g752
(S'\x07\xdf\n\x13\x10.\x1b\x00ix'
tRp1531
sa(dp1532
S'trial_loop.thisTrialN'
p1533
I42
sg894
S'43-mrporky_pork_crackles_redo.png'
p1534
sS'block_loop.thisIndex'
p1535
g888
sg38
S'left'
p1536
sg58
g62
sS'trial_loop.thisN'
p1537
I42
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p1538
g59
(g98
S'*\x00\x00\x00'
tRp1539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1540
I0
sg903
S'18-mms.png'
p1541
sS'block_loop.thisRepN'
p1542
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1543
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p1544
Nsg69
Vn
sS'block_loop.thisTrialN'
p1545
I0
sg39
F1.6334339544337126
sg34
g752
(S'\x07\xdf\n\x13\x10.!\x03 \xc8'
tRp1546
sa(dp1547
S'trial_loop.thisTrialN'
p1548
I43
sg894
g1250
sS'block_loop.thisIndex'
p1549
g888
sg38
S'right'
p1550
sg58
g62
sS'trial_loop.thisN'
p1551
I43
sg33
g1260
sg63
g64
sS'trial_loop.thisIndex'
p1552
g59
(g98
S'+\x00\x00\x00'
tRp1553
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1554
I0
sg903
g1258
sS'block_loop.thisRepN'
p1555
I0
sg906
g1260
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1556
I0
sg908
g1254
sg55
g11
sS'block_loop.thisTrial'
p1557
Nsg69
Vn
sS'block_loop.thisTrialN'
p1558
I0
sg39
F1.4835585999098839
sg34
g752
(S"\x07\xdf\n\x13\x10.'\r6\xd0"
tRp1559
sa(dp1560
S'trial_loop.thisTrialN'
p1561
I44
sg894
g1124
sS'block_loop.thisIndex'
p1562
g888
sg38
S'left'
p1563
sg58
g62
sS'trial_loop.thisN'
p1564
I44
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p1565
g59
(g98
S',\x00\x00\x00'
tRp1566
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1567
I0
sg903
g1131
sS'block_loop.thisRepN'
p1568
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1569
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p1570
Nsg69
Vn
sS'block_loop.thisTrialN'
p1571
I0
sg39
F1.5831535306169826
sg34
g752
(S'\x07\xdf\n\x13\x10..\x05\xe7\xb8'
tRp1572
sa(dp1573
S'trial_loop.thisTrialN'
p1574
I45
sg894
S'27-hartleys_raspberries_jelly.png'
p1575
sS'block_loop.thisIndex'
p1576
g888
sg38
S'right'
p1577
sg58
g62
sS'trial_loop.thisN'
p1578
I45
sg33
g1006
sg63
g64
sS'trial_loop.thisIndex'
p1579
g59
(g98
S'-\x00\x00\x00'
tRp1580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1581
I0
sg903
S'51-mars.png'
p1582
sS'block_loop.thisRepN'
p1583
I0
sg906
g1006
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1584
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p1585
Nsg69
Vn
sS'block_loop.thisTrialN'
p1586
I0
sg39
F1.93343840198213
sg34
g752
(S'\x07\xdf\n\x13\x10.5\x00\x03\xe8'
tRp1587
sa(dp1588
S'trial_loop.thisTrialN'
p1589
I46
sg894
g1156
sS'block_loop.thisIndex'
p1590
g888
sg38
S'right'
p1591
sg58
g62
sS'trial_loop.thisN'
p1592
I46
sg33
g1160
sg63
g64
sS'trial_loop.thisIndex'
p1593
g59
(g98
S'.\x00\x00\x00'
tRp1594
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1595
I0
sg903
g1164
sS'block_loop.thisRepN'
p1596
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1597
I0
sg908
g1167
sg55
g11
sS'block_loop.thisTrial'
p1598
Nsg69
Vn
sS'block_loop.thisTrialN'
p1599
I0
sg39
F1.1502573877805844
sg34
g752
(S'\x07\xdf\n\x13\x10.;\x0e\xdc\xb0'
tRp1600
sa(dp1601
S'trial_loop.thisTrialN'
p1602
I47
sg894
S'29-beans.png'
p1603
sS'block_loop.thisIndex'
p1604
g888
sg38
S'right'
p1605
sg58
g62
sS'trial_loop.thisN'
p1606
I47
sg33
g1118
sg63
g64
sS'trial_loop.thisIndex'
p1607
g59
(g98
S'/\x00\x00\x00'
tRp1608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1609
I0
sg903
S'46-pistachios.png'
p1610
sS'block_loop.thisRepN'
p1611
I0
sg906
g1111
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1612
I0
sg908
g1118
sg55
g11
sS'block_loop.thisTrial'
p1613
Nsg69
Vn
sS'block_loop.thisTrialN'
p1614
I0
sg39
F1.7835071679728571
sg34
g752
(S'\x07\xdf\n\x13\x10/\x06\x02Q\xc0'
tRp1615
sa(dp1616
S'trial_loop.thisTrialN'
p1617
I48
sg894
g1450
sS'block_loop.thisIndex'
p1618
g888
sg38
S'left'
p1619
sg58
g62
sS'trial_loop.thisN'
p1620
I48
sg33
g1454
sg63
g64
sS'trial_loop.thisIndex'
p1621
g59
(g98
S'0\x00\x00\x00'
tRp1622
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1623
I0
sg903
g1458
sS'block_loop.thisRepN'
p1624
I0
sg906
g1454
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1625
I0
sg908
g1461
sg55
g11
sS'block_loop.thisTrial'
p1626
Nsg69
Vn
sS'block_loop.thisTrialN'
p1627
I0
sg39
F1.0838842405028117
sg34
g752
(S'\x07\xdf\n\x13\x10/\x0c\x0e\xc9('
tRp1628
sa(dp1629
S'trial_loop.thisTrialN'
p1630
I49
sg894
g1325
sS'block_loop.thisIndex'
p1631
g888
sg38
S'left'
p1632
sg58
g62
sS'trial_loop.thisN'
p1633
I49
sg33
g1335
sg63
g64
sS'trial_loop.thisIndex'
p1634
g59
(g98
S'1\x00\x00\x00'
tRp1635
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1636
I0
sg903
g1333
sS'block_loop.thisRepN'
p1637
I0
sg906
g1335
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1638
I0
sg908
g1329
sg55
g11
sS'block_loop.thisTrial'
p1639
Nsg69
Vn
sS'block_loop.thisTrialN'
p1640
I0
sg39
F1.0335080232689506
sg34
g752
(S'\x07\xdf\n\x13\x10/\x13\x01H '
tRp1641
sa(dp1642
S'trial_loop.thisTrialN'
p1643
I50
sg894
g1124
sS'block_loop.thisIndex'
p1644
g888
sg38
S'left'
p1645
sg58
g62
sS'trial_loop.thisN'
p1646
I50
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p1647
g59
(g98
S'2\x00\x00\x00'
tRp1648
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1649
I0
sg903
g1131
sS'block_loop.thisRepN'
p1650
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1651
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p1652
Nsg69
Vn
sS'block_loop.thisTrialN'
p1653
I0
sg39
F1.2166174204903655
sg34
g752
(S'\x07\xdf\n\x13\x10/\x19\x02U\xa8'
tRp1654
sa(dp1655
S'trial_loop.thisTrialN'
p1656
I51
sg894
S'17-jacobs_mini_cheddars_redo.png'
p1657
sS'block_loop.thisIndex'
p1658
g888
sg38
S'right'
p1659
sg58
g62
sS'trial_loop.thisN'
p1660
I51
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p1661
g59
(g98
S'3\x00\x00\x00'
tRp1662
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1663
I0
sg903
S'8-liquorice_catherine_wheels.png'
p1664
sS'block_loop.thisRepN'
p1665
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1666
I0
sg908
g1094
sg55
g11
sS'block_loop.thisTrial'
p1667
Nsg69
Vn
sS'block_loop.thisTrialN'
p1668
I0
sg39
F1.3834698769642273
sg34
g752
(S'\x07\xdf\n\x13\x10/\x1f\x069\xc0'
tRp1669
sa(dp1670
S'trial_loop.thisTrialN'
p1671
I52
sg894
S'25-kitkat.png'
p1672
sS'block_loop.thisIndex'
p1673
g888
sg38
S'right'
p1674
sg58
g62
sS'trial_loop.thisN'
p1675
I52
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p1676
g59
(g98
S'4\x00\x00\x00'
tRp1677
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1678
I0
sg903
S'31-hobnobs.png'
p1679
sS'block_loop.thisRepN'
p1680
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1681
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p1682
Nsg69
Vn
sS'block_loop.thisTrialN'
p1683
I0
sg39
F2.316746057360433
sg34
g752
(S'\x07\xdf\n\x13\x10/%\x0c\x83 '
tRp1684
sa(dp1685
S'trial_loop.thisTrialN'
p1686
I53
sg894
g1280
sS'block_loop.thisIndex'
p1687
g888
sg38
S'right'
p1688
sg58
g62
sS'trial_loop.thisN'
p1689
I53
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1690
g59
(g98
S'5\x00\x00\x00'
tRp1691
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1692
I0
sg903
g1287
sS'block_loop.thisRepN'
p1693
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1694
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1695
Nsg69
Vn
sS'block_loop.thisTrialN'
p1696
I0
sg39
F1.3339201630296884
sg34
g752
(S'\x07\xdf\n\x13\x10/-\x02\x90@'
tRp1697
sa(dp1698
S'trial_loop.thisTrialN'
p1699
I54
sg894
g1156
sS'block_loop.thisIndex'
p1700
g888
sg38
S'right'
p1701
sg58
g62
sS'trial_loop.thisN'
p1702
I54
sg33
g1160
sg63
g64
sS'trial_loop.thisIndex'
p1703
g59
(g98
S'6\x00\x00\x00'
tRp1704
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1705
I0
sg903
g1164
sS'block_loop.thisRepN'
p1706
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1707
I0
sg908
g1167
sg55
g11
sS'block_loop.thisTrial'
p1708
Nsg69
Vn
sS'block_loop.thisTrialN'
p1709
I0
sg39
F1.0334809388186841
sg34
g752
(S'\x07\xdf\n\x13\x10/3\x08\x1e '
tRp1710
sa(dp1711
S'trial_loop.thisTrialN'
p1712
I55
sg894
S'30-spaghetti_hoops.png'
p1713
sS'block_loop.thisIndex'
p1714
g888
sg38
S'left'
p1715
sg58
g62
sS'trial_loop.thisN'
p1716
I55
sg33
g1211
sg63
g64
sS'trial_loop.thisIndex'
p1717
g59
(g98
S'7\x00\x00\x00'
tRp1718
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1719
I0
sg903
S'19-caramello_redo.png'
p1720
sS'block_loop.thisRepN'
p1721
I0
sg906
g1211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1722
I0
sg908
g1218
sg55
g11
sS'block_loop.thisTrial'
p1723
Nsg69
Vn
sS'block_loop.thisTrialN'
p1724
I0
sg39
F2.8667105909917154
sg34
g752
(S'\x07\xdf\n\x13\x10/9\t+\xa8'
tRp1725
sa(dp1726
S'trial_loop.thisTrialN'
p1727
I56
sg894
S'33-ambrosia_rice.png'
p1728
sS'block_loop.thisIndex'
p1729
g888
sg38
S'left'
p1730
sg58
g62
sS'trial_loop.thisN'
p1731
I56
sg33
S'33-ambrosia_rice.png'
p1732
sg63
g64
sS'trial_loop.thisIndex'
p1733
g59
(g98
S'8\x00\x00\x00'
tRp1734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1735
I0
sg903
S'23-crunchie_redo.png'
p1736
sS'block_loop.thisRepN'
p1737
I0
sg906
g1732
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1738
I0
sg908
S'23-crunchie_redo.png'
p1739
sg55
g11
sS'block_loop.thisTrial'
p1740
Nsg69
Vn
sS'block_loop.thisTrialN'
p1741
I0
sg39
F1.5500788585086411
sg34
g752
(S'\x07\xdf\n\x13\x100\x05\x07\xc80'
tRp1742
sa(dp1743
S'trial_loop.thisTrialN'
p1744
I57
sg894
g1396
sS'block_loop.thisIndex'
p1745
g888
sg38
S'right'
p1746
sg58
g62
sS'trial_loop.thisN'
p1747
I57
sg33
g1306
sg63
g64
sS'trial_loop.thisIndex'
p1748
g59
(g98
S'9\x00\x00\x00'
tRp1749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1750
I0
sg903
g1403
sS'block_loop.thisRepN'
p1751
I0
sg906
g1299
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1752
I0
sg908
g1306
sg55
g11
sS'block_loop.thisTrial'
p1753
Nsg69
Vn
sS'block_loop.thisTrialN'
p1754
I0
sg39
F1.9668571891270403
sg34
g752
(S'\x07\xdf\n\x13\x100\x0c\x01kH'
tRp1755
sa(dp1756
S'trial_loop.thisTrialN'
p1757
I58
sg894
g966
sS'block_loop.thisIndex'
p1758
g888
sg38
S'left'
p1759
sg58
g62
sS'trial_loop.thisN'
p1760
I58
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1761
g59
(g98
S':\x00\x00\x00'
tRp1762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1763
I0
sg903
g974
sS'block_loop.thisRepN'
p1764
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1765
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1766
Nsg69
Vn
sS'block_loop.thisTrialN'
p1767
I0
sg39
F3.5000031360941648
sg34
g752
(S'\x07\xdf\n\x13\x100\x13\x01@P'
tRp1768
sa(dp1769
S'trial_loop.thisTrialN'
p1770
I59
sg894
g1028
sS'block_loop.thisIndex'
p1771
g888
sg38
S'right'
p1772
sg58
g62
sS'trial_loop.thisN'
p1773
I59
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p1774
g59
(g98
S';\x00\x00\x00'
tRp1775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1776
I0
sg903
g1036
sS'block_loop.thisRepN'
p1777
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1778
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p1779
Nsg69
Vn
sS'block_loop.thisTrialN'
p1780
I0
sg39
F0.83331860319594853
sg34
g752
(S'\x07\xdf\n\x13\x100\x1b\tbX'
tRp1781
sa(dp1782
S'trial_loop.thisTrialN'
p1783
I60
sg894
g1190
sS'block_loop.thisIndex'
p1784
g888
sg38
S'right'
p1785
sg58
g62
sS'trial_loop.thisN'
p1786
I60
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p1787
g59
(g98
S'<\x00\x00\x00'
tRp1788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1789
I0
sg903
g1198
sS'block_loop.thisRepN'
p1790
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1791
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p1792
Nsg69
Vn
sS'block_loop.thisTrialN'
p1793
I0
sg39
F1.4000732135391445
sg34
g752
(S'\x07\xdf\n\x13\x100!\x07V\xe8'
tRp1794
sa(dp1795
S'trial_loop.thisTrialN'
p1796
I61
sg894
g1124
sS'block_loop.thisIndex'
p1797
g888
sg38
S'left'
p1798
sg58
g62
sS'trial_loop.thisN'
p1799
I61
sg33
g1039
sg63
g64
sS'trial_loop.thisIndex'
p1800
g59
(g98
S'=\x00\x00\x00'
tRp1801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1802
I0
sg903
g1131
sS'block_loop.thisRepN'
p1803
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1804
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p1805
Nsg69
Vn
sS'block_loop.thisTrialN'
p1806
I0
sg39
F0.86651700846414315
sg34
g752
(S"\x07\xdf\n\x13\x100'\x0e\x19`"
tRp1807
sa(dp1808
S'trial_loop.thisTrialN'
p1809
I62
sg894
g1295
sS'block_loop.thisIndex'
p1810
g888
sg38
S'left'
p1811
sg58
g62
sS'trial_loop.thisN'
p1812
I62
sg33
g1299
sg63
g64
sS'trial_loop.thisIndex'
p1813
g59
(g98
S'>\x00\x00\x00'
tRp1814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1815
I0
sg903
g1303
sS'block_loop.thisRepN'
p1816
I0
sg906
g1299
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1817
I0
sg908
g1306
sg55
g11
sS'block_loop.thisTrial'
p1818
Nsg69
Vn
sS'block_loop.thisTrialN'
p1819
I0
sg39
F1.0834571615268942
sg34
g752
(S'\x07\xdf\n\x13\x100-\x0c\x83 '
tRp1820
sa(dp1821
S'trial_loop.thisTrialN'
p1822
I63
sg894
g1045
sS'block_loop.thisIndex'
p1823
g888
sg38
S'left'
p1824
sg58
g62
sS'trial_loop.thisN'
p1825
I63
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p1826
g59
(g98
S'?\x00\x00\x00'
tRp1827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1828
I0
sg903
g1053
sS'block_loop.thisRepN'
p1829
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1830
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p1831
Nsg69
Vn
sS'block_loop.thisTrialN'
p1832
I0
sg39
F2.5669108448419138
sg34
g752
(S'\x07\xdf\n\x13\x1003\x0eH@'
tRp1833
sa(dp1834
S'trial_loop.thisTrialN'
p1835
I64
sg894
g1250
sS'block_loop.thisIndex'
p1836
g888
sg38
S'right'
p1837
sg58
g62
sS'trial_loop.thisN'
p1838
I64
sg33
g1260
sg63
g64
sS'trial_loop.thisIndex'
p1839
g59
(g98
S'@\x00\x00\x00'
tRp1840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1841
I0
sg903
g1258
sS'block_loop.thisRepN'
p1842
I0
sg906
g1260
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1843
I0
sg908
g1254
sg55
g11
sS'block_loop.thisTrial'
p1844
Nsg69
Vn
sS'block_loop.thisTrialN'
p1845
I0
sg39
F1.3834442180123006
sg34
g752
(S'\x07\xdf\n\x13\x100;\x08"\x08'
tRp1846
sa(dp1847
S'trial_loop.thisTrialN'
p1848
I65
sg894
g1173
sS'block_loop.thisIndex'
p1849
g888
sg38
S'right'
p1850
sg58
g62
sS'trial_loop.thisN'
p1851
I65
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p1852
g59
(g98
S'A\x00\x00\x00'
tRp1853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1854
I0
sg903
g1181
sS'block_loop.thisRepN'
p1855
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1856
I0
sg908
g1184
sg55
g11
sS'block_loop.thisTrial'
p1857
Nsg69
Vn
sS'block_loop.thisTrialN'
p1858
I0
sg39
F1.2834729560381675
sg34
g752
(S'\x07\xdf\n\x13\x101\x05\x0eg\x80'
tRp1859
sa(dp1860
S'trial_loop.thisTrialN'
p1861
I66
sg894
g1250
sS'block_loop.thisIndex'
p1862
g888
sg38
S'right'
p1863
sg58
g62
sS'trial_loop.thisN'
p1864
I66
sg33
g1260
sg63
g64
sS'trial_loop.thisIndex'
p1865
g59
(g98
S'B\x00\x00\x00'
tRp1866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1867
I0
sg903
g1258
sS'block_loop.thisRepN'
p1868
I0
sg906
g1260
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1869
I0
sg908
g1254
sg55
g11
sS'block_loop.thisTrial'
p1870
Nsg69
Vn
sS'block_loop.thisTrialN'
p1871
I0
sg39
F0.70030659594704048
sg34
g752
(S'\x07\xdf\n\x13\x101\x0c\x03\xffp'
tRp1872
sa(dp1873
S'trial_loop.thisTrialN'
p1874
I67
sg894
S'20-fruit_pastilles.png'
p1875
sS'block_loop.thisIndex'
p1876
g888
sg38
S'right'
p1877
sg58
g62
sS'trial_loop.thisN'
p1878
I67
sg33
g1454
sg63
g64
sS'trial_loop.thisIndex'
p1879
g59
(g98
S'C\x00\x00\x00'
tRp1880
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1881
I0
sg903
S'2-steamed_puddings.png'
p1882
sS'block_loop.thisRepN'
p1883
I0
sg906
g1454
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1884
I0
sg908
g1461
sg55
g11
sS'block_loop.thisTrial'
p1885
Nsg69
Vn
sS'block_loop.thisTrialN'
p1886
I0
sg39
F1.2335469108365942
sg34
g752
(S'\x07\xdf\n\x13\x101\x12\x00\x0b\xb8'
tRp1887
sa(dp1888
S'trial_loop.thisTrialN'
p1889
I68
sg894
g1506
sS'block_loop.thisIndex'
p1890
g888
sg38
S'right'
p1891
sg58
g62
sS'trial_loop.thisN'
p1892
I68
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1893
g59
(g98
S'D\x00\x00\x00'
tRp1894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1895
I0
sg903
g1513
sS'block_loop.thisRepN'
p1896
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1897
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1898
Nsg69
Vn
sS'block_loop.thisTrialN'
p1899
I0
sg39
F1.2834387441034778
sg34
g752
(S'\x07\xdf\n\x13\x101\x18\x04.P'
tRp1900
sa(dp1901
S'trial_loop.thisTrialN'
p1902
I69
sg894
g1603
sS'block_loop.thisIndex'
p1903
g888
sg38
S'right'
p1904
sg58
g62
sS'trial_loop.thisN'
p1905
I69
sg33
g1111
sg63
g64
sS'trial_loop.thisIndex'
p1906
g59
(g98
S'E\x00\x00\x00'
tRp1907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1908
I0
sg903
g1610
sS'block_loop.thisRepN'
p1909
I0
sg906
g1111
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1910
I0
sg908
g1118
sg55
g11
sS'block_loop.thisTrial'
p1911
Nsg69
Vn
sS'block_loop.thisTrialN'
p1912
I0
sg39
F1.1835016940603964
sg34
g752
(S'\x07\xdf\n\x13\x101\x1e\x08\xcd\xe8'
tRp1913
sa(dp1914
S'trial_loop.thisTrialN'
p1915
I70
sg894
S'45-chewy_nougat_redo.png'
p1916
sS'block_loop.thisIndex'
p1917
g888
sg38
S'right'
p1918
sg58
g62
sS'trial_loop.thisN'
p1919
I70
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1920
g59
(g98
S'F\x00\x00\x00'
tRp1921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1922
I0
sg903
S'41-peanuts_redo.png'
p1923
sS'block_loop.thisRepN'
p1924
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1925
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1926
Nsg69
Vn
sS'block_loop.thisTrialN'
p1927
I0
sg39
F1.2834250593296019
sg34
g752
(S'\x07\xdf\n\x13\x101$\x0c8\xe8'
tRp1928
sa(dp1929
S'trial_loop.thisTrialN'
p1930
I71
sg894
S'23-crunchie_redo.png'
p1931
sS'block_loop.thisIndex'
p1932
g888
sg38
S'right'
p1933
sg58
g62
sS'trial_loop.thisN'
p1934
I71
sg33
g1732
sg63
g64
sS'trial_loop.thisIndex'
p1935
g59
(g98
S'G\x00\x00\x00'
tRp1936
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1937
I0
sg903
S'33-ambrosia_rice.png'
p1938
sS'block_loop.thisRepN'
p1939
I0
sg906
g1732
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1940
I0
sg908
g1739
sg55
g11
sS'block_loop.thisTrial'
p1941
Nsg69
Vn
sS'block_loop.thisTrialN'
p1942
I0
sg39
F1.783560766667506
sg34
g752
(S'\x07\xdf\n\x13\x101+\x01\xd0\xd8'
tRp1943
sa(dp1944
S'trial_loop.thisTrialN'
p1945
I72
sg894
g1295
sS'block_loop.thisIndex'
p1946
g888
sg38
S'left'
p1947
sg58
g62
sS'trial_loop.thisN'
p1948
I72
sg33
g1299
sg63
g64
sS'trial_loop.thisIndex'
p1949
g59
(g98
S'H\x00\x00\x00'
tRp1950
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1951
I0
sg903
g1303
sS'block_loop.thisRepN'
p1952
I0
sg906
g1299
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1953
I0
sg908
g1306
sg55
g11
sS'block_loop.thisTrial'
p1954
Nsg69
Vn
sS'block_loop.thisTrialN'
p1955
I0
sg39
F0.85020561372220982
sg34
g752
(S'\x07\xdf\n\x13\x1011\x0eL('
tRp1956
sa(dp1957
S'trial_loop.thisTrialN'
p1958
I73
sg894
g1728
sS'block_loop.thisIndex'
p1959
g888
sg38
S'left'
p1960
sg58
g62
sS'trial_loop.thisN'
p1961
I73
sg33
g1732
sg63
g64
sS'trial_loop.thisIndex'
p1962
g59
(g98
S'I\x00\x00\x00'
tRp1963
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1964
I0
sg903
g1736
sS'block_loop.thisRepN'
p1965
I0
sg906
g1732
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1966
I0
sg908
g1739
sg55
g11
sS'block_loop.thisTrial'
p1967
Nsg69
Vn
sS'block_loop.thisTrialN'
p1968
I0
sg39
F1.1001996266350034
sg34
g752
(S'\x07\xdf\n\x13\x1017\x0c{P'
tRp1969
sa(dp1970
S'trial_loop.thisTrialN'
p1971
I74
sg894
g915
sS'block_loop.thisIndex'
p1972
g888
sg38
S'left'
p1973
sg58
g62
sS'trial_loop.thisN'
p1974
I74
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1975
g59
(g98
S'J\x00\x00\x00'
tRp1976
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1977
I0
sg903
g923
sS'block_loop.thisRepN'
p1978
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1979
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1980
Nsg69
Vn
sS'block_loop.thisTrialN'
p1981
I0
sg39
F1.3501762484775099
sg34
g752
(S'\x07\xdf\n\x13\x102\x01\x0e{\x08'
tRp1982
sa(dp1983
S'trial_loop.thisTrialN'
p1984
I75
sg894
S'50-polo.png'
p1985
sS'block_loop.thisIndex'
p1986
g888
sg38
S'left'
p1987
sg58
g62
sS'trial_loop.thisN'
p1988
I75
sg33
g1335
sg63
g64
sS'trial_loop.thisIndex'
p1989
g59
(g98
S'K\x00\x00\x00'
tRp1990
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1991
I0
sg903
S'48-twix.png'
p1992
sS'block_loop.thisRepN'
p1993
I0
sg906
g1335
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1994
I0
sg908
g1329
sg55
g11
sS'block_loop.thisTrial'
p1995
Nsg69
Vn
sS'block_loop.thisTrialN'
p1996
I0
sg39
F1.0167746813458507
sg34
g752
(S'\x07\xdf\n\x13\x102\x08\x05\x05('
tRp1997
sa(dp1998
S'trial_loop.thisTrialN'
p1999
I76
sg894
S'4-corn.png'
p2000
sS'block_loop.thisIndex'
p2001
g888
sg38
S'left'
p2002
sg58
g62
sS'trial_loop.thisN'
p2003
I76
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p2004
g59
(g98
S'L\x00\x00\x00'
tRp2005
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2006
I0
sg903
S'10-bounty_redo.png'
p2007
sS'block_loop.thisRepN'
p2008
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2009
I0
sg908
g1184
sg55
g11
sS'block_loop.thisTrial'
p2010
Nsg69
Vn
sS'block_loop.thisTrialN'
p2011
I0
sg39
F0.95011957070892095
sg34
g752
(S'\x07\xdf\n\x13\x102\x0e\x05\xd40'
tRp2012
sa(dp2013
S'trial_loop.thisTrialN'
p2014
I77
sg894
g1190
sS'block_loop.thisIndex'
p2015
g888
sg38
S'right'
p2016
sg58
g62
sS'trial_loop.thisN'
p2017
I77
sg33
g1201
sg63
g64
sS'trial_loop.thisIndex'
p2018
g59
(g98
S'M\x00\x00\x00'
tRp2019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2020
I0
sg903
g1198
sS'block_loop.thisRepN'
p2021
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2022
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p2023
Nsg69
Vn
sS'block_loop.thisTrialN'
p2024
I0
sg39
F1.2835322567225376
sg34
g752
(S'\x07\xdf\n\x13\x102\x14\x05\xad '
tRp2025
sa(dp2026
S'trial_loop.thisTrialN'
p2027
I78
sg894
g1506
sS'block_loop.thisIndex'
p2028
g888
sg38
S'right'
p2029
sg58
g62
sS'trial_loop.thisN'
p2030
I78
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2031
g59
(g98
S'N\x00\x00\x00'
tRp2032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2033
I0
sg903
g1513
sS'block_loop.thisRepN'
p2034
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2035
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2036
Nsg69
Vn
sS'block_loop.thisTrialN'
p2037
I0
sg39
F0.98339096143536153
sg34
g752
(S'\x07\xdf\n\x13\x102\x1a\n\x87P'
tRp2038
sa(dp2039
S'trial_loop.thisTrialN'
p2040
I79
sg894
g1875
sS'block_loop.thisIndex'
p2041
g888
sg38
S'right'
p2042
sg58
g62
sS'trial_loop.thisN'
p2043
I79
sg33
g1454
sg63
g64
sS'trial_loop.thisIndex'
p2044
g59
(g98
S'O\x00\x00\x00'
tRp2045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2046
I0
sg903
g1882
sS'block_loop.thisRepN'
p2047
I0
sg906
g1454
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2048
I0
sg908
g1461
sg55
g11
sS'block_loop.thisTrial'
p2049
Nsg69
Vn
sS'block_loop.thisTrialN'
p2050
I0
sg39
F1.2334171905822586
sg34
g752
(S'\x07\xdf\n\x13\x102 \n\x9e\xc0'
tRp2051
sa(dp2052
S'trial_loop.thisTrialN'
p2053
I80
sg894
g1342
sS'block_loop.thisIndex'
p2054
g888
sg38
S'left'
p2055
sg58
g62
sS'trial_loop.thisN'
p2056
I80
sg33
g1167
sg63
g64
sS'trial_loop.thisIndex'
p2057
g59
(g98
S'P\x00\x00\x00'
tRp2058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2059
I0
sg903
g1349
sS'block_loop.thisRepN'
p2060
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2061
I0
sg908
g1167
sg55
g11
sS'block_loop.thisTrial'
p2062
Nsg69
Vn
sS'block_loop.thisTrialN'
p2063
I0
sg39
F0.96676025531269261
sg34
g752
(S'\x07\xdf\n\x13\x102&\x0e\xc1X'
tRp2064
sa(dp2065
S'trial_loop.thisTrialN'
p2066
I81
sg894
g1672
sS'block_loop.thisIndex'
p2067
g888
sg38
S'left'
p2068
sg58
g62
sS'trial_loop.thisN'
p2069
I81
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p2070
g59
(g98
S'Q\x00\x00\x00'
tRp2071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2072
I0
sg903
g1679
sS'block_loop.thisRepN'
p2073
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2074
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p2075
Nsg69
Vn
sS'block_loop.thisTrialN'
p2076
I0
sg39
F0.88348641272750683
sg34
g752
(S'\x07\xdf\n\x13\x102,\x0e\xd8\xc8'
tRp2077
sa(dp2078
S'trial_loop.thisTrialN'
p2079
I82
sg894
g1985
sS'block_loop.thisIndex'
p2080
g888
sg38
S'left'
p2081
sg58
g62
sS'trial_loop.thisN'
p2082
I82
sg33
g1335
sg63
g64
sS'trial_loop.thisIndex'
p2083
g59
(g98
S'R\x00\x00\x00'
tRp2084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2085
I0
sg903
g1992
sS'block_loop.thisRepN'
p2086
I0
sg906
g1335
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2087
I0
sg908
g1329
sg55
g11
sS'block_loop.thisTrial'
p2088
Nsg69
Vn
sS'block_loop.thisTrialN'
p2089
I0
sg39
F1.3500870123498316
sg34
g752
(S'\x07\xdf\n\x13\x1022\r\x84\xf0'
tRp2090
sa(dp2091
S'trial_loop.thisTrialN'
p2092
I83
sg894
g1657
sS'block_loop.thisIndex'
p2093
g888
sg38
S'right'
p2094
sg58
g62
sS'trial_loop.thisN'
p2095
I83
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p2096
g59
(g98
S'S\x00\x00\x00'
tRp2097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2098
I0
sg903
g1664
sS'block_loop.thisRepN'
p2099
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2100
I0
sg908
g1094
sg55
g11
sS'block_loop.thisTrial'
p2101
Nsg69
Vn
sS'block_loop.thisTrialN'
p2102
I0
sg39
F1.5005556588257605
sg34
g752
(S'\x07\xdf\n\x13\x1029\x04\x0f\x10'
tRp2103
sa(dp2104
S'trial_loop.thisTrialN'
p2105
I84
sg894
g1728
sS'block_loop.thisIndex'
p2106
g888
sg38
S'left'
p2107
sg58
g62
sS'trial_loop.thisN'
p2108
I84
sg33
g1732
sg63
g64
sS'trial_loop.thisIndex'
p2109
g59
(g98
S'T\x00\x00\x00'
tRp2110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2111
I0
sg903
g1736
sS'block_loop.thisRepN'
p2112
I0
sg906
g1732
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2113
I0
sg908
g1739
sg55
g11
sS'block_loop.thisTrial'
p2114
Nsg69
Vn
sS'block_loop.thisTrialN'
p2115
I0
sg39
F1.0669501885640784
sg34
g752
(S'\x07\xdf\n\x13\x103\x03\x0c@\xb8'
tRp2116
sa(dp2117
S'trial_loop.thisTrialN'
p2118
I85
sg894
g1713
sS'block_loop.thisIndex'
p2119
g888
sg38
S'left'
p2120
sg58
g62
sS'trial_loop.thisN'
p2121
I85
sg33
g1211
sg63
g64
sS'trial_loop.thisIndex'
p2122
g59
(g98
S'U\x00\x00\x00'
tRp2123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2124
I0
sg903
g1720
sS'block_loop.thisRepN'
p2125
I0
sg906
g1211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2126
I0
sg908
g1218
sg55
g11
sS'block_loop.thisTrial'
p2127
Nsg69
Vn
sS'block_loop.thisTrialN'
p2128
I0
sg39
F1.150159313572658
sg34
g752
(S'\x07\xdf\n\x13\x103\t\r\xc3p'
tRp2129
sa(dp2130
S'trial_loop.thisTrialN'
p2131
I86
sg894
g1657
sS'block_loop.thisIndex'
p2132
g888
sg38
S'left'
p2133
sg58
g62
sS'trial_loop.thisN'
p2134
I86
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p2135
g59
(g98
S'V\x00\x00\x00'
tRp2136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2137
I0
sg903
g1664
sS'block_loop.thisRepN'
p2138
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2139
I0
sg908
g1094
sg55
g11
sS'block_loop.thisTrial'
p2140
Nsg69
Vn
sS'block_loop.thisTrialN'
p2141
I0
sg39
F0.90011369765852578
sg34
g752
(S'\x07\xdf\n\x13\x103\x10\x018\x80'
tRp2142
sa(dp2143
S'trial_loop.thisTrialN'
p2144
I87
sg894
g1342
sS'block_loop.thisIndex'
p2145
g888
sg38
S'left'
p2146
sg58
g62
sS'trial_loop.thisN'
p2147
I87
sg33
g1160
sg63
g64
sS'trial_loop.thisIndex'
p2148
g59
(g98
S'W\x00\x00\x00'
tRp2149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2150
I0
sg903
g1349
sS'block_loop.thisRepN'
p2151
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2152
I0
sg908
g1167
sg55
g11
sS'block_loop.thisTrial'
p2153
Nsg69
Vn
sS'block_loop.thisTrialN'
p2154
I0
sg39
F0.85025807201964199
sg34
g752
(S'\x07\xdf\n\x13\x103\x16\x00Y\xd8'
tRp2155
sa(dp2156
S'trial_loop.thisTrialN'
p2157
I88
sg894
g1672
sS'block_loop.thisIndex'
p2158
g888
sg38
S'left'
p2159
sg58
g62
sS'trial_loop.thisN'
p2160
I88
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p2161
g59
(g98
S'X\x00\x00\x00'
tRp2162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2163
I0
sg903
g1679
sS'block_loop.thisRepN'
p2164
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2165
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p2166
Nsg69
Vn
sS'block_loop.thisTrialN'
p2167
I0
sg39
F1.1668866684085515
sg34
g752
(S'\x07\xdf\n\x13\x103\x1b\r\xcf('
tRp2168
sa(dp2169
S'trial_loop.thisTrialN'
p2170
I89
sg894
g1156
sS'block_loop.thisIndex'
p2171
g888
sg38
S'right'
p2172
sg58
g62
sS'trial_loop.thisN'
p2173
I89
sg33
g1160
sg63
g64
sS'trial_loop.thisIndex'
p2174
g59
(g98
S'Y\x00\x00\x00'
tRp2175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2176
I0
sg903
g1164
sS'block_loop.thisRepN'
p2177
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2178
I0
sg908
g1167
sg55
g11
sS'block_loop.thisTrial'
p2179
Nsg69
Vn
sS'block_loop.thisTrialN'
p2180
I0
sg39
F0.83344347675301833
sg34
g752
(S'\x07\xdf\n\x13\x103"\x01~\xd0'
tRp2181
sa(dp2182
S'trial_loop.thisTrialN'
p2183
I90
sg894
g1575
sS'block_loop.thisIndex'
p2184
g888
sg38
S'left'
p2185
sg58
g62
sS'trial_loop.thisN'
p2186
I90
sg33
g1006
sg63
g64
sS'trial_loop.thisIndex'
p2187
g59
(g98
S'Z\x00\x00\x00'
tRp2188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2189
I0
sg903
g1582
sS'block_loop.thisRepN'
p2190
I0
sg906
g1006
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2191
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p2192
Nsg69
Vn
sS'block_loop.thisTrialN'
p2193
I0
sg39
F1.7001877094735391
sg34
g752
(S"\x07\xdf\n\x13\x103'\x0e\xb5\xa0"
tRp2194
sa(dp2195
S'trial_loop.thisTrialN'
p2196
I91
sg894
g1713
sS'block_loop.thisIndex'
p2197
g888
sg38
S'left'
p2198
sg58
g62
sS'trial_loop.thisN'
p2199
I91
sg33
g1211
sg63
g64
sS'trial_loop.thisIndex'
p2200
g59
(g98
S'[\x00\x00\x00'
tRp2201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2202
I0
sg903
g1720
sS'block_loop.thisRepN'
p2203
I0
sg906
g1211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2204
I0
sg908
g1218
sg55
g11
sS'block_loop.thisTrial'
p2205
Nsg69
Vn
sS'block_loop.thisTrialN'
p2206
I0
sg39
F1.1001625637072721
sg34
g752
(S'\x07\xdf\n\x13\x103.\n\xba\x18'
tRp2207
sa(dp2208
S'trial_loop.thisTrialN'
p2209
I92
sg894
g1190
sS'block_loop.thisIndex'
p2210
g888
sg38
S'right'
p2211
sg58
g62
sS'trial_loop.thisN'
p2212
I92
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p2213
g59
(g98
S'\\\x00\x00\x00'
tRp2214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2215
I0
sg903
g1198
sS'block_loop.thisRepN'
p2216
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2217
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p2218
Nsg69
Vn
sS'block_loop.thisTrialN'
p2219
I0
sg39
F0.83353442347652162
sg34
g752
(S'\x07\xdf\n\x13\x1034\x0c\xb9\xd0'
tRp2220
sa(dp2221
S'trial_loop.thisTrialN'
p2222
I93
sg894
g1985
sS'block_loop.thisIndex'
p2223
g888
sg38
S'left'
p2224
sg58
g62
sS'trial_loop.thisN'
p2225
I93
sg33
g1329
sg63
g64
sS'trial_loop.thisIndex'
p2226
g59
(g98
S']\x00\x00\x00'
tRp2227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2228
I0
sg903
g1992
sS'block_loop.thisRepN'
p2229
I0
sg906
g1335
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2230
I0
sg908
g1329
sg55
g11
sS'block_loop.thisTrial'
p2231
Nsg69
Vn
sS'block_loop.thisTrialN'
p2232
I0
sg39
F0.9172761142544914
sg34
g752
(S'\x07\xdf\n\x13\x103:\n\xaax'
tRp2233
sa(dp2234
S'trial_loop.thisTrialN'
p2235
I94
sg894
g1534
sS'block_loop.thisIndex'
p2236
g888
sg38
S'right'
p2237
sg58
g62
sS'trial_loop.thisN'
p2238
I94
sg33
g1056
sg63
g64
sS'trial_loop.thisIndex'
p2239
g59
(g98
S'^\x00\x00\x00'
tRp2240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2241
I0
sg903
g1541
sS'block_loop.thisRepN'
p2242
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2243
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p2244
Nsg69
Vn
sS'block_loop.thisTrialN'
p2245
I0
sg39
F1.6334382309250941
sg34
g752
(S'\x07\xdf\n\x13\x104\x04\t\xcf\xb8'
tRp2246
sa(dp2247
S'trial_loop.thisTrialN'
p2248
I95
sg894
g1713
sS'block_loop.thisIndex'
p2249
g888
sg38
S'left'
p2250
sg58
g62
sS'trial_loop.thisN'
p2251
I95
sg33
g1211
sg63
g64
sS'trial_loop.thisIndex'
p2252
g59
(g98
S'_\x00\x00\x00'
tRp2253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2254
I0
sg903
g1720
sS'block_loop.thisRepN'
p2255
I0
sg906
g1211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2256
I0
sg908
g1218
sg55
g11
sS'block_loop.thisTrial'
p2257
Nsg69
Vn
sS'block_loop.thisTrialN'
p2258
I0
sg39
F0.88352262036278262
sg34
g752
(S'\x07\xdf\n\x13\x104\x0b\x04\xe2\x00'
tRp2259
sa(dp2260
S'trial_loop.thisTrialN'
p2261
I96
sg894
g1107
sS'block_loop.thisIndex'
p2262
g888
sg38
S'left'
p2263
sg58
g62
sS'trial_loop.thisN'
p2264
I96
sg33
g1111
sg63
g64
sS'trial_loop.thisIndex'
p2265
g59
(g98
S'`\x00\x00\x00'
tRp2266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2267
I0
sg903
g1115
sS'block_loop.thisRepN'
p2268
I0
sg906
g1111
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2269
I0
sg908
g1118
sg55
g11
sS'block_loop.thisTrial'
p2270
Nsg69
Vn
sS'block_loop.thisTrialN'
p2271
I0
sg39
F1.5668486931608641
sg34
g752
(S'\x07\xdf\n\x13\x104\x11\x03\x8a@'
tRp2272
sa(dp2273
S'trial_loop.thisTrialN'
p2274
I97
sg894
g1916
sS'block_loop.thisIndex'
p2275
g888
sg38
S'right'
p2276
sg58
g62
sS'trial_loop.thisN'
p2277
I97
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2278
g59
(g98
S'a\x00\x00\x00'
tRp2279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2280
I0
sg903
g1923
sS'block_loop.thisRepN'
p2281
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2282
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2283
Nsg69
Vn
sS'block_loop.thisTrialN'
p2284
I0
sg39
F5.2666848750159261
sg34
g752
(S'\x07\xdf\n\x13\x104\x17\x0c\xae\x18'
tRp2285
sa(dp2286
S'trial_loop.thisTrialN'
p2287
I98
sg894
g2000
sS'block_loop.thisIndex'
p2288
g888
sg38
S'left'
p2289
sg58
g62
sS'trial_loop.thisN'
p2290
I98
sg33
g1184
sg63
g64
sS'trial_loop.thisIndex'
p2291
g59
(g98
S'b\x00\x00\x00'
tRp2292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2293
I0
sg903
g2007
sS'block_loop.thisRepN'
p2294
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2295
I0
sg908
g1184
sg55
g11
sS'block_loop.thisTrial'
p2296
Nsg69
Vn
sS'block_loop.thisTrialN'
p2297
I0
sg39
F0.9672771406112588
sg34
g752
(S'\x07\xdf\n\x13\x104"\x01\xf0\x18'
tRp2298
sa(dp2299
S'trial_loop.thisTrialN'
p2300
I99
sg894
g1875
sS'block_loop.thisIndex'
p2301
g888
sg38
S'right'
p2302
sg58
g62
sS'trial_loop.thisN'
p2303
I99
sg33
g1454
sg63
g64
sS'trial_loop.thisIndex'
p2304
g59
(g98
S'c\x00\x00\x00'
tRp2305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2306
I0
sg903
g1882
sS'block_loop.thisRepN'
p2307
I0
sg906
g1454
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2308
I0
sg908
g1461
sg55
g11
sS'block_loop.thisTrial'
p2309
Nsg69
Vn
sS'block_loop.thisTrialN'
p2310
I0
sg39
F1.2001825776860642
sg34
g752
(S'\x07\xdf\n\x13\x104(\x02\x07\x88'
tRp2311
sa(dp2312
S'trial_loop.thisTrialN'
p2313
I100
sg894
g1028
sS'block_loop.thisIndex'
p2314
g888
sg38
S'right'
p2315
sg58
g62
sS'trial_loop.thisN'
p2316
I100
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p2317
g59
(g98
S'd\x00\x00\x00'
tRp2318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2319
I0
sg903
g1036
sS'block_loop.thisRepN'
p2320
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2321
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p2322
Nsg69
Vn
sS'block_loop.thisTrialN'
p2323
I0
sg39
F1.1499397869956738
sg34
g752
(S'\x07\xdf\n\x13\x104.\x05\xb1\x08'
tRp2324
sa(dp2325
S'trial_loop.thisTrialN'
p2326
I101
sg894
g1672
sS'block_loop.thisIndex'
p2327
g888
sg38
S'left'
p2328
sg58
g62
sS'trial_loop.thisN'
p2329
I101
sg33
g1194
sg63
g64
sS'trial_loop.thisIndex'
p2330
g59
(g98
S'e\x00\x00\x00'
tRp2331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2332
I0
sg903
g1679
sS'block_loop.thisRepN'
p2333
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2334
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p2335
Nsg69
Vn
sS'block_loop.thisTrialN'
p2336
I0
sg39
F1.5001451156203984
sg34
g752
(S'\x07\xdf\n\x13\x1044\x08dp'
tRp2337
sa(dp2338
S'trial_loop.thisTrialN'
p2339
I102
sg894
g1207
sS'block_loop.thisIndex'
p2340
g888
sg38
S'right'
p2341
sg58
g62
sS'trial_loop.thisN'
p2342
I102
sg33
g1211
sg63
g64
sS'trial_loop.thisIndex'
p2343
g59
(g98
S'f\x00\x00\x00'
tRp2344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2345
I0
sg903
g1215
sS'block_loop.thisRepN'
p2346
I0
sg906
g1211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2347
I0
sg908
g1218
sg55
g11
sS'block_loop.thisTrial'
p2348
Nsg69
Vn
sS'block_loop.thisTrialN'
p2349
I0
sg39
F0.81662745598805486
sg34
g752
(S'\x07\xdf\n\x13\x104;\x01S\xd8'
tRp2350
sa(dp2351
S'trial_loop.thisTrialN'
p2352
I103
sg894
g2000
sS'block_loop.thisIndex'
p2353
g888
sg38
S'left'
p2354
sg58
g62
sS'trial_loop.thisN'
p2355
I103
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p2356
g59
(g98
S'g\x00\x00\x00'
tRp2357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2358
I0
sg903
g2007
sS'block_loop.thisRepN'
p2359
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2360
I0
sg908
g1184
sg55
g11
sS'block_loop.thisTrial'
p2361
Nsg69
Vn
sS'block_loop.thisTrialN'
p2362
I0
sg39
F0.91722109006150276
sg34
g752
(S'\x07\xdf\n\x13\x105\x04\x0eL('
tRp2363
sa(dp2364
S'trial_loop.thisTrialN'
p2365
I104
sg894
S'26-walkers_smoky_bacon.png'
p2366
sS'block_loop.thisIndex'
p2367
g888
sg38
S'right'
p2368
sg58
g62
sS'trial_loop.thisN'
p2369
I104
sg33
g1143
sg63
g64
sS'trial_loop.thisIndex'
p2370
g59
(g98
S'h\x00\x00\x00'
tRp2371
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2372
I0
sg903
S'44-crunch.png'
p2373
sS'block_loop.thisRepN'
p2374
I0
sg906
g1143
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2375
I0
sg908
g1150
sg55
g11
sS'block_loop.thisTrial'
p2376
Nsg69
Vn
sS'block_loop.thisTrialN'
p2377
I0
sg39
F2.8168236044075456
sg34
g752
(S'\x07\xdf\n\x13\x105\n\rm\x80'
tRp2378
sa(dp2379
S'trial_loop.thisTrialN'
p2380
I105
sg894
g1875
sS'block_loop.thisIndex'
p2381
g888
sg38
S'right'
p2382
sg58
g62
sS'trial_loop.thisN'
p2383
I105
sg33
g1454
sg63
g64
sS'trial_loop.thisIndex'
p2384
g59
(g98
S'i\x00\x00\x00'
tRp2385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2386
I0
sg903
g1882
sS'block_loop.thisRepN'
p2387
I0
sg906
g1454
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2388
I0
sg908
g1461
sg55
g11
sS'block_loop.thisTrial'
p2389
Nsg69
Vn
sS'block_loop.thisTrialN'
p2390
I0
sg39
F1.0167615667705832
sg34
g752
(S'\x07\xdf\n\x13\x105\x12\x0b\x17\xd8'
tRp2391
sa(dp2392
S'trial_loop.thisTrialN'
p2393
I106
sg894
S'13-mccoys_steak_crisps.png'
p2394
sS'block_loop.thisIndex'
p2395
g888
sg38
S'left'
p2396
sg58
g62
sS'trial_loop.thisN'
p2397
I106
sg33
g1260
sg63
g64
sS'trial_loop.thisIndex'
p2398
g59
(g98
S'j\x00\x00\x00'
tRp2399
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2400
I0
sg903
S'3-ellas_strawberries_apples.png'
p2401
sS'block_loop.thisRepN'
p2402
I0
sg906
g1260
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2403
I0
sg908
g1254
sg55
g11
sS'block_loop.thisTrial'
p2404
Nsg69
Vn
sS'block_loop.thisTrialN'
p2405
I0
sg39
F1.3501788143730664
sg34
g752
(S'\x07\xdf\n\x13\x105\x18\x0b\xe6\xe0'
tRp2406
sa(dp2407
S'trial_loop.thisTrialN'
p2408
I107
sg894
g1342
sS'block_loop.thisIndex'
p2409
g888
sg38
S'left'
p2410
sg58
g62
sS'trial_loop.thisN'
p2411
I107
sg33
g1160
sg63
g64
sS'trial_loop.thisIndex'
p2412
g59
(g98
S'k\x00\x00\x00'
tRp2413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2414
I0
sg903
g1349
sS'block_loop.thisRepN'
p2415
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2416
I0
sg908
g1167
sg55
g11
sS'block_loop.thisTrial'
p2417
Nsg69
Vn
sS'block_loop.thisTrialN'
p2418
I0
sg39
F0.76677411114360439
sg34
g752
(S'\x07\xdf\n\x13\x105\x1f\x02t\xe8'
tRp2419
sa(dp2420
S'trial_loop.thisTrialN'
p2421
I108
sg894
g1603
sS'block_loop.thisIndex'
p2422
g888
sg38
S'left'
p2423
sg58
g62
sS'trial_loop.thisN'
p2424
I108
sg33
g1111
sg63
g64
sS'trial_loop.thisIndex'
p2425
g59
(g98
S'l\x00\x00\x00'
tRp2426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2427
I0
sg903
g1610
sS'block_loop.thisRepN'
p2428
I0
sg906
g1111
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2429
I0
sg908
g1118
sg55
g11
sS'block_loop.thisTrial'
p2430
Nsg69
Vn
sS'block_loop.thisTrialN'
p2431
I0
sg39
F1.4335082513498492
sg34
g752
(S'\x07\xdf\n\x13\x105$\x0e\xb5\xa0'
tRp2432
sa(dp2433
S'trial_loop.thisTrialN'
p2434
I109
sg894
g1207
sS'block_loop.thisIndex'
p2435
g888
sg38
S'right'
p2436
sg58
g62
sS'trial_loop.thisN'
p2437
I109
sg33
g1211
sg63
g64
sS'trial_loop.thisIndex'
p2438
g59
(g98
S'm\x00\x00\x00'
tRp2439
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2440
I0
sg903
g1215
sS'block_loop.thisRepN'
p2441
I0
sg906
g1211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2442
I0
sg908
g1218
sg55
g11
sS'block_loop.thisTrial'
p2443
Nsg69
Vn
sS'block_loop.thisTrialN'
p2444
I0
sg39
F3.333378474078927
sg34
g752
(S'\x07\xdf\n\x13\x105+\x06\xae\xf0'
tRp2445
sa(dp2446
S'trial_loop.thisTrialN'
p2447
I110
sg894
g996
sS'block_loop.thisIndex'
p2448
g888
sg38
S'right'
p2449
sg58
g62
sS'trial_loop.thisN'
p2450
I110
sg33
g1006
sg63
g64
sS'trial_loop.thisIndex'
p2451
g59
(g98
S'n\x00\x00\x00'
tRp2452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2453
I0
sg903
g1004
sS'block_loop.thisRepN'
p2454
I0
sg906
g1006
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2455
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p2456
Nsg69
Vn
sS'block_loop.thisTrialN'
p2457
I0
sg39
F0.90015361158293672
sg34
g752
(S'\x07\xdf\n\x13\x1053\x0c1\x18'
tRp2458
sa(dp2459
S'trial_loop.thisTrialN'
p2460
I111
sg894
g1728
sS'block_loop.thisIndex'
p2461
g888
sg38
S'left'
p2462
sg58
g62
sS'trial_loop.thisN'
p2463
I111
sg33
g1732
sg63
g64
sS'trial_loop.thisIndex'
p2464
g59
(g98
S'o\x00\x00\x00'
tRp2465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2466
I0
sg903
g1736
sS'block_loop.thisRepN'
p2467
I0
sg906
g1732
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2468
I0
sg908
g1739
sg55
g11
sS'block_loop.thisTrial'
p2469
Nsg69
Vn
sS'block_loop.thisTrialN'
p2470
I0
sg39
F0.95020909193772241
sg34
g752
(S'\x07\xdf\n\x13\x1059\x0b\x17\xd8'
tRp2471
sa(dp2472
S'trial_loop.thisTrialN'
p2473
I112
sg894
g1107
sS'block_loop.thisIndex'
p2474
g888
sg38
S'right'
p2475
sg58
g62
sS'trial_loop.thisN'
p2476
I112
sg33
g1111
sg63
g64
sS'trial_loop.thisIndex'
p2477
g59
(g98
S'p\x00\x00\x00'
tRp2478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2479
I0
sg903
g1115
sS'block_loop.thisRepN'
p2480
I0
sg906
g1111
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2481
I0
sg908
g1118
sg55
g11
sS'block_loop.thisTrial'
p2482
Nsg69
Vn
sS'block_loop.thisTrialN'
p2483
I0
sg39
F0.78343304211375653
sg34
g752
(S'\x07\xdf\n\x13\x106\x03\n\xf4\xb0'
tRp2484
sa(dp2485
S'trial_loop.thisTrialN'
p2486
I113
sg894
g1280
sS'block_loop.thisIndex'
p2487
g888
sg38
S'right'
p2488
sg58
g62
sS'trial_loop.thisN'
p2489
I113
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2490
g59
(g98
S'q\x00\x00\x00'
tRp2491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2492
I0
sg903
g1287
sS'block_loop.thisRepN'
p2493
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2494
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2495
Nsg69
Vn
sS'block_loop.thisTrialN'
p2496
I0
sg39
F3.1838740339408105
sg34
g752
(S'\x07\xdf\n\x13\x106\t\x081\xa8'
tRp2497
sa(dp2498
S'trial_loop.thisTrialN'
p2499
I114
sg894
g1916
sS'block_loop.thisIndex'
p2500
g888
sg38
S'right'
p2501
sg58
g62
sS'trial_loop.thisN'
p2502
I114
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p2503
g59
(g98
S'r\x00\x00\x00'
tRp2504
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2505
I0
sg903
g1923
sS'block_loop.thisRepN'
p2506
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2507
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2508
Nsg69
Vn
sS'block_loop.thisTrialN'
p2509
I0
sg39
F1.2000947670567257
sg34
g752
(S'\x07\xdf\n\x13\x106\x11\x0bRp'
tRp2510
sa(dp2511
S'trial_loop.thisTrialN'
p2512
I115
sg894
g2366
sS'block_loop.thisIndex'
p2513
g888
sg38
S'left'
p2514
sg58
g62
sS'trial_loop.thisN'
p2515
I115
sg33
g1143
sg63
g64
sS'trial_loop.thisIndex'
p2516
g59
(g98
S's\x00\x00\x00'
tRp2517
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2518
I0
sg903
g2373
sS'block_loop.thisRepN'
p2519
I0
sg906
g1143
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2520
I0
sg908
g1150
sg55
g11
sS'block_loop.thisTrial'
p2521
Nsg69
Vn
sS'block_loop.thisTrialN'
p2522
I0
sg39
F1.5001927272278408
sg34
g752
(S'\x07\xdf\n\x13\x106\x17\x0e\xfb\xf0'
tRp2523
sa(dp2524
S'trial_loop.thisTrialN'
p2525
I116
sg894
g1450
sS'block_loop.thisIndex'
p2526
g888
sg38
S'left'
p2527
sg58
g62
sS'trial_loop.thisN'
p2528
I116
sg33
g1454
sg63
g64
sS'trial_loop.thisIndex'
p2529
g59
(g98
S't\x00\x00\x00'
tRp2530
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2531
I0
sg903
g1458
sS'block_loop.thisRepN'
p2532
I0
sg906
g1454
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2533
I0
sg908
g1461
sg55
g11
sS'block_loop.thisTrial'
p2534
Nsg69
Vn
sS'block_loop.thisTrialN'
p2535
I0
sg39
F0.78351372525867191
sg34
g752
(S'\x07\xdf\n\x13\x106\x1e\x07\xebX'
tRp2536
sa(dp2537
S'trial_loop.thisTrialN'
p2538
I117
sg894
g2000
sS'block_loop.thisIndex'
p2539
g888
sg38
S'left'
p2540
sg58
g62
sS'trial_loop.thisN'
p2541
I117
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p2542
g59
(g98
S'u\x00\x00\x00'
tRp2543
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2544
I0
sg903
g2007
sS'block_loop.thisRepN'
p2545
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2546
I0
sg908
g1184
sg55
g11
sS'block_loop.thisTrial'
p2547
Nsg69
Vn
sS'block_loop.thisTrialN'
p2548
I0
sg39
F0.90012681223379332
sg34
g752
(S'\x07\xdf\n\x13\x106$\x05$h'
tRp2549
sa(dp2550
S'trial_loop.thisTrialN'
p2551
I118
sg894
g895
sS'block_loop.thisIndex'
p2552
g888
sg38
S'left'
p2553
sg58
g62
sS'trial_loop.thisN'
p2554
I118
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2555
g59
(g98
S'v\x00\x00\x00'
tRp2556
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2557
I0
sg903
g904
sS'block_loop.thisRepN'
p2558
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2559
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2560
Nsg69
Vn
sS'block_loop.thisTrialN'
p2561
I0
sg39
F0.93355329705809709
sg34
g752
(S'\x07\xdf\n\x13\x106*\x04\x0b('
tRp2562
sa(dp2563
S'trial_loop.thisTrialN'
p2564
I119
sg894
g1875
sS'block_loop.thisIndex'
p2565
g888
sg38
S'right'
p2566
sg58
g62
sS'trial_loop.thisN'
p2567
I119
sg33
g1454
sg63
g64
sS'trial_loop.thisIndex'
p2568
g59
(g98
S'w\x00\x00\x00'
tRp2569
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2570
I0
sg903
g1882
sS'block_loop.thisRepN'
p2571
I0
sg906
g1454
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2572
I0
sg908
g1461
sg55
g11
sS'block_loop.thisTrial'
p2573
Nsg69
Vn
sS'block_loop.thisTrialN'
p2574
I0
sg39
F0.93338508838496637
sg34
g752
(S'\x07\xdf\n\x13\x1060\x03n\xe8'
tRp2575
sa(dp2576
S'trial_loop.thisTrialN'
p2577
I120
sg894
g1139
sS'block_loop.thisIndex'
p2578
g888
sg38
S'right'
p2579
sg58
g62
sS'trial_loop.thisN'
p2580
I120
sg33
g1150
sg63
g64
sS'trial_loop.thisIndex'
p2581
g59
(g98
S'x\x00\x00\x00'
tRp2582
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2583
I0
sg903
g1147
sS'block_loop.thisRepN'
p2584
I0
sg906
g1143
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2585
I0
sg908
g1150
sg55
g11
sS'block_loop.thisTrial'
p2586
Nsg69
Vn
sS'block_loop.thisTrialN'
p2587
I0
sg39
F0.78353254182002274
sg34
g752
(S'\x07\xdf\n\x13\x1066\x03\tX'
tRp2588
sa(dp2589
S'trial_loop.thisTrialN'
p2590
I121
sg894
g915
sS'block_loop.thisIndex'
p2591
g888
sg38
S'left'
p2592
sg58
g62
sS'trial_loop.thisN'
p2593
I121
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2594
g59
(g98
S'y\x00\x00\x00'
tRp2595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2596
I0
sg903
g923
sS'block_loop.thisRepN'
p2597
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2598
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2599
Nsg69
Vn
sS'block_loop.thisTrialN'
p2600
I0
sg39
F1.433504545057076
sg34
g752
(S'\x07\xdf\n\x13\x107\x00\x00FP'
tRp2601
sa(dp2602
S'trial_loop.thisTrialN'
p2603
I122
sg894
g1045
sS'block_loop.thisIndex'
p2604
g888
sg38
S'left'
p2605
sg58
g62
sS'trial_loop.thisN'
p2606
I122
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p2607
g59
(g98
S'z\x00\x00\x00'
tRp2608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2609
I0
sg903
g1053
sS'block_loop.thisRepN'
p2610
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2611
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p2612
Nsg69
Vn
sS'block_loop.thisTrialN'
p2613
I0
sg39
F1.2001620505252504
sg34
g752
(S'\x07\xdf\n\x13\x107\x06\x07GH'
tRp2614
sa(dp2615
S'trial_loop.thisTrialN'
p2616
I123
sg894
g1916
sS'block_loop.thisIndex'
p2617
g888
sg38
S'right'
p2618
sg58
g62
sS'trial_loop.thisN'
p2619
I123
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2620
g59
(g98
S'{\x00\x00\x00'
tRp2621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2622
I0
sg903
g1923
sS'block_loop.thisRepN'
p2623
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2624
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2625
Nsg69
Vn
sS'block_loop.thisTrialN'
p2626
I0
sg39
F0.80058376962915645
sg34
g752
(S'\x07\xdf\n\x13\x107\x0c\n\xf0\xc8'
tRp2627
sa(dp2628
S'trial_loop.thisTrialN'
p2629
I124
sg894
g2394
sS'block_loop.thisIndex'
p2630
g888
sg38
S'left'
p2631
sg58
g62
sS'trial_loop.thisN'
p2632
I124
sg33
g1260
sg63
g64
sS'trial_loop.thisIndex'
p2633
g59
(g98
S'|\x00\x00\x00'
tRp2634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2635
I0
sg903
g2401
sS'block_loop.thisRepN'
p2636
I0
sg906
g1260
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2637
I0
sg908
g1254
sg55
g11
sS'block_loop.thisTrial'
p2638
Nsg69
Vn
sS'block_loop.thisTrialN'
p2639
I0
sg39
F0.98344484523113351
sg34
g752
(S'\x07\xdf\n\x13\x107\x12\x08hX'
tRp2640
sa(dp2641
S'trial_loop.thisTrialN'
p2642
I125
sg894
g1045
sS'block_loop.thisIndex'
p2643
g888
sg38
S'left'
p2644
sg58
g62
sS'trial_loop.thisN'
p2645
I125
sg33
g1056
sg63
g64
sS'trial_loop.thisIndex'
p2646
g59
(g98
S'}\x00\x00\x00'
tRp2647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2648
I0
sg903
g1053
sS'block_loop.thisRepN'
p2649
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2650
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p2651
Nsg69
Vn
sS'block_loop.thisTrialN'
p2652
I0
sg39
F1.7501935825275723
sg34
g752
(S'\x07\xdf\n\x13\x107\x18\x08\x7f\xc8'
tRp2653
sa(dp2654
S'trial_loop.thisTrialN'
p2655
I126
sg894
g1672
sS'block_loop.thisIndex'
p2656
g888
sg38
S'left'
p2657
sg58
g62
sS'trial_loop.thisN'
p2658
I126
sg33
g1201
sg63
g64
sS'trial_loop.thisIndex'
p2659
g59
(g98
S'~\x00\x00\x00'
tRp2660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2661
I0
sg903
g1679
sS'block_loop.thisRepN'
p2662
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2663
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p2664
Nsg69
Vn
sS'block_loop.thisTrialN'
p2665
I0
sg39
F1.1667629352486983
sg34
g752
(S'\x07\xdf\n\x13\x107\x1f\x05;\xd8'
tRp2666
sa(dp2667
S'trial_loop.thisTrialN'
p2668
I127
sg894
g1156
sS'block_loop.thisIndex'
p2669
g888
sg38
S'right'
p2670
sg58
g62
sS'trial_loop.thisN'
p2671
I127
sg33
g1167
sg63
g64
sS'trial_loop.thisIndex'
p2672
g59
(g98
S'\x7f\x00\x00\x00'
tRp2673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2674
I0
sg903
g1164
sS'block_loop.thisRepN'
p2675
I0
sg906
g1160
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2676
I0
sg908
g1167
sg55
g11
sS'block_loop.thisTrial'
p2677
Nsg69
Vn
sS'block_loop.thisTrialN'
p2678
I0
sg39
F0.85017881437306642
sg34
g752
(S'\x07\xdf\n\x13\x107%\x08l@'
tRp2679
sa(dp2680
S'trial_loop.thisTrialN'
p2681
I128
sg894
g895
sS'block_loop.thisIndex'
p2682
g888
sg38
S'left'
p2683
sg58
g62
sS'trial_loop.thisN'
p2684
I128
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2685
g59
(g98
S'\x80\x00\x00\x00'
tRp2686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2687
I0
sg903
g904
sS'block_loop.thisRepN'
p2688
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2689
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2690
Nsg69
Vn
sS'block_loop.thisTrialN'
p2691
I0
sg39
F0.93360575535916723
sg34
g752
(S'\x07\xdf\n\x13\x107+\x06\x9bh'
tRp2692
sa(dp2693
S'trial_loop.thisTrialN'
p2694
I129
sg894
g1173
sS'block_loop.thisIndex'
p2695
g888
sg38
S'right'
p2696
sg58
g62
sS'trial_loop.thisN'
p2697
I129
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p2698
g59
(g98
S'\x81\x00\x00\x00'
tRp2699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2700
I0
sg903
g1181
sS'block_loop.thisRepN'
p2701
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2702
I0
sg908
g1184
sg55
g11
sS'block_loop.thisTrial'
p2703
Nsg69
Vn
sS'block_loop.thisTrialN'
p2704
I0
sg39
F1.0168071826810774
sg34
g752
(S'\x07\xdf\n\x13\x1071\x05\xfb@'
tRp2705
sa(dp2706
S'trial_loop.thisTrialN'
p2707
I130
sg894
g966
sS'block_loop.thisIndex'
p2708
g888
sg38
S'left'
p2709
sg58
g62
sS'trial_loop.thisN'
p2710
I130
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2711
g59
(g98
S'\x82\x00\x00\x00'
tRp2712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2713
I0
sg903
g974
sS'block_loop.thisRepN'
p2714
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2715
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2716
Nsg69
Vn
sS'block_loop.thisTrialN'
p2717
I0
sg39
F1.0333301212122024
sg34
g752
(S'\x07\xdf\n\x13\x1077\x06\xcaH'
tRp2718
sa(dp2719
S'trial_loop.thisTrialN'
p2720
I131
sg894
g949
sS'block_loop.thisIndex'
p2721
g888
sg38
S'left'
p2722
sg58
g62
sS'trial_loop.thisN'
p2723
I131
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2724
g59
(g98
S'\x83\x00\x00\x00'
tRp2725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2726
I0
sg903
g957
sS'block_loop.thisRepN'
p2727
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2728
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2729
Nsg69
Vn
sS'block_loop.thisTrialN'
p2730
I0
sg39
F2.1167878529377049
sg34
g752
(S'\x07\xdf\n\x13\x108\x01\x07\xd7\xd0'
tRp2731
sa(dp2732
S'trial_loop.thisTrialN'
p2733
I132
sg894
g1107
sS'block_loop.thisIndex'
p2734
g888
sg38
S'right'
p2735
sg58
g62
sS'trial_loop.thisN'
p2736
I132
sg33
g1111
sg63
g64
sS'trial_loop.thisIndex'
p2737
g59
(g98
S'\x84\x00\x00\x00'
tRp2738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2739
I0
sg903
g1115
sS'block_loop.thisRepN'
p2740
I0
sg906
g1111
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2741
I0
sg908
g1118
sg55
g11
sS'block_loop.thisTrial'
p2742
Nsg69
Vn
sS'block_loop.thisTrialN'
p2743
I0
sg39
F0.88328085602552164
sg34
g752
(S'\x07\xdf\n\x13\x108\x08\n\nP'
tRp2744
sa(dp2745
S'trial_loop.thisTrialN'
p2746
I133
sg894
g1534
sS'block_loop.thisIndex'
p2747
g888
sg38
S'right'
p2748
sg58
g62
sS'trial_loop.thisN'
p2749
I133
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p2750
g59
(g98
S'\x85\x00\x00\x00'
tRp2751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2752
I0
sg903
g1541
sS'block_loop.thisRepN'
p2753
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2754
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p2755
Nsg69
Vn
sS'block_loop.thisTrialN'
p2756
I0
sg39
F2.6671908695207094
sg34
g752
(S'\x07\xdf\n\x13\x108\x0e\x08\xf1\x10'
tRp2757
sa(dp2758
S'trial_loop.thisTrialN'
p2759
I134
sg894
g1028
sS'block_loop.thisIndex'
p2760
g888
sg38
S'right'
p2761
sg58
g62
sS'trial_loop.thisN'
p2762
I134
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p2763
g59
(g98
S'\x86\x00\x00\x00'
tRp2764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2765
I0
sg903
g1036
sS'block_loop.thisRepN'
p2766
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2767
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p2768
Nsg69
Vn
sS'block_loop.thisTrialN'
p2769
I0
sg39
F0.94993397096914123
sg34
g752
(S'\x07\xdf\n\x13\x108\x16\x04:\x08'
tRp2770
sa(dp2771
S'trial_loop.thisTrialN'
p2772
I135
sg894
g1139
sS'block_loop.thisIndex'
p2773
g888
sg38
S'right'
p2774
sg58
g62
sS'trial_loop.thisN'
p2775
I135
sg33
g1143
sg63
g64
sS'trial_loop.thisIndex'
p2776
g59
(g98
S'\x87\x00\x00\x00'
tRp2777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2778
I0
sg903
g1147
sS'block_loop.thisRepN'
p2779
I0
sg906
g1143
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2780
I0
sg908
g1150
sg55
g11
sS'block_loop.thisTrial'
p2781
Nsg69
Vn
sS'block_loop.thisTrialN'
p2782
I0
sg39
F0.88351634817445301
sg34
g752
(S'\x07\xdf\n\x13\x108\x1c\x04\x16\xe0'
tRp2783
sa(dp2784
S'trial_loop.thisTrialN'
p2785
I136
sg894
g1013
sS'block_loop.thisIndex'
p2786
g888
sg38
S'right'
p2787
sg58
g62
sS'trial_loop.thisN'
p2788
I136
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p2789
g59
(g98
S'\x88\x00\x00\x00'
tRp2790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2791
I0
sg903
g1020
sS'block_loop.thisRepN'
p2792
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2793
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2794
Nsg69
Vn
sS'block_loop.thisTrialN'
p2795
I0
sg39
F0.6667846028067288
sg34
g752
(S'\x07\xdf\n\x13\x108"\x02\xbf '
tRp2796
sa(dp2797
S'trial_loop.thisTrialN'
p2798
I137
sg894
g1090
sS'block_loop.thisIndex'
p2799
g888
sg38
S'right'
p2800
sg58
g62
sS'trial_loop.thisN'
p2801
I137
sg33
g1094
sg63
g64
sS'trial_loop.thisIndex'
p2802
g59
(g98
S'\x89\x00\x00\x00'
tRp2803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2804
I0
sg903
g1098
sS'block_loop.thisRepN'
p2805
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2806
I0
sg908
g1094
sg55
g11
sS'block_loop.thisTrial'
p2807
Nsg69
Vn
sS'block_loop.thisTrialN'
p2808
I0
sg39
F1.5334013960782613
sg34
g752
(S"\x07\xdf\n\x13\x108'\rV\x10"
tRp2809
sa(dp2810
S'trial_loop.thisTrialN'
p2811
I138
sg894
g1396
sS'block_loop.thisIndex'
p2812
g888
sg38
S'right'
p2813
sg58
g62
sS'trial_loop.thisN'
p2814
I138
sg33
g1299
sg63
g64
sS'trial_loop.thisIndex'
p2815
g59
(g98
S'\x8a\x00\x00\x00'
tRp2816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2817
I0
sg903
g1403
sS'block_loop.thisRepN'
p2818
I0
sg906
g1299
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2819
I0
sg908
g1306
sg55
g11
sS'block_loop.thisTrial'
p2820
Nsg69
Vn
sS'block_loop.thisTrialN'
p2821
I0
sg39
F1.0505489874958585
sg34
g752
(S'\x07\xdf\n\x13\x108.\x06\xbe\x90'
tRp2822
sa(dp2823
S'trial_loop.thisTrialN'
p2824
I139
sg894
g949
sS'block_loop.thisIndex'
p2825
g888
sg38
S'left'
p2826
sg58
g62
sS'trial_loop.thisN'
p2827
I139
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2828
g59
(g98
S'\x8b\x00\x00\x00'
tRp2829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2830
I0
sg903
g957
sS'block_loop.thisRepN'
p2831
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2832
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2833
Nsg69
Vn
sS'block_loop.thisTrialN'
p2834
I0
sg39
F0.76677297074638773
sg34
g752
(S'\x07\xdf\n\x13\x1084\x08\x06\xb0'
tRp2835
sa(dp2836
S'trial_loop.thisTrialN'
p2837
I140
sg894
g1931
sS'block_loop.thisIndex'
p2838
g888
sg38
S'right'
p2839
sg58
g62
sS'trial_loop.thisN'
p2840
I140
sg33
g1732
sg63
g64
sS'trial_loop.thisIndex'
p2841
g59
(g98
S'\x8c\x00\x00\x00'
tRp2842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2843
I0
sg903
g1938
sS'block_loop.thisRepN'
p2844
I0
sg906
g1732
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2845
I0
sg908
g1739
sg55
g11
sS'block_loop.thisTrial'
p2846
Nsg69
Vn
sS'block_loop.thisTrialN'
p2847
I0
sg39
F1.3669147221917228
sg34
g752
(S'\x07\xdf\n\x13\x108:\x05\x05('
tRp2848
sa(dp2849
S'trial_loop.thisTrialN'
p2850
I141
sg894
g996
sS'block_loop.thisIndex'
p2851
g888
sg38
S'right'
p2852
sg58
g62
sS'trial_loop.thisN'
p2853
I141
sg33
g1006
sg63
g64
sS'trial_loop.thisIndex'
p2854
g59
(g98
S'\x8d\x00\x00\x00'
tRp2855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2856
I0
sg903
g1004
sS'block_loop.thisRepN'
p2857
I0
sg906
g1006
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2858
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p2859
Nsg69
Vn
sS'block_loop.thisTrialN'
p2860
I0
sg39
F0.85011153090454172
sg34
g752
(S'\x07\xdf\n\x13\x109\x04\x0b\x10\x08'
tRp2861
sa(dp2862
S'trial_loop.thisTrialN'
p2863
I142
sg894
g1207
sS'block_loop.thisIndex'
p2864
g888
sg38
S'right'
p2865
sg58
g62
sS'trial_loop.thisN'
p2866
I142
sg33
g1218
sg63
g64
sS'trial_loop.thisIndex'
p2867
g59
(g98
S'\x8e\x00\x00\x00'
tRp2868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2869
I0
sg903
g1215
sS'block_loop.thisRepN'
p2870
I0
sg906
g1211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2871
I0
sg908
g1218
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vn
sS'block_loop.thisTrialN'
p2873
I0
sg39
F1.1835076811476029
sg34
g752
(S'\x07\xdf\n\x13\x109\n\t?0'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g1450
sS'block_loop.thisIndex'
p2877
g888
sg38
S'left'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g1461
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g1458
sS'block_loop.thisRepN'
p2883
I0
sg906
g1454
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2884
I0
sg908
g1461
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vn
sS'block_loop.thisTrialN'
p2886
I0
sg39
F0.80063052594050532
sg34
g752
(S'\x07\xdf\n\x13\x109\x10\x0c\xae\x18'
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g1295
sS'block_loop.thisIndex'
p2890
g888
sg38
S'left'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g1306
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g1303
sS'block_loop.thisRepN'
p2896
I0
sg906
g1299
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2897
I0
sg908
g1306
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vn
sS'block_loop.thisTrialN'
p2899
I0
sg39
F0.65021091657035868
sg34
g752
(S'\x07\xdf\n\x13\x109\x16\n%\xa8'
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g1534
sS'block_loop.thisIndex'
p2903
g888
sg38
S'right'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g1056
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g1541
sS'block_loop.thisRepN'
p2909
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2910
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vn
sS'block_loop.thisTrialN'
p2912
I0
sg39
F0.71677907187768142
sg34
g752
(S'\x07\xdf\n\x13\x109\x1c\x05;\xd8'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g915
sS'block_loop.thisIndex'
p2916
g888
sg38
S'left'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g923
sS'block_loop.thisRepN'
p2922
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2923
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vn
sS'block_loop.thisTrialN'
p2925
I0
sg39
F1.0835985708508815
sg34
g752
(S'\x07\xdf\n\x13\x109"\x01\x86\xa0'
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g1575
sS'block_loop.thisIndex'
p2929
g888
sg38
S'left'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g1006
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g1582
sS'block_loop.thisRepN'
p2935
I0
sg906
g1006
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2936
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vn
sS'block_loop.thisTrialN'
p2938
I0
sg39
F0.7501066271943273
sg34
g752
(S'\x07\xdf\n\x13\x109(\x03G\xd8'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g1139
sS'block_loop.thisIndex'
p2942
g888
sg38
S'right'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g1143
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g1147
sS'block_loop.thisRepN'
p2948
I0
sg906
g1143
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2949
I0
sg908
g1150
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vn
sS'block_loop.thisTrialN'
p2951
I0
sg39
F1.4667998841359804
sg34
g752
(S'\x07\xdf\n\x13\x109.\x00\x0b\xb8'
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g932
sS'block_loop.thisIndex'
p2955
g888
sg38
S'left'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g940
sS'block_loop.thisRepN'
p2961
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2962
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vn
sS'block_loop.thisTrialN'
p2964
I0
sg39
F0.78355791567446431
sg34
g752
(S'\x07\xdf\n\x13\x1094\x07\x81\xe0'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g1280
sS'block_loop.thisIndex'
p2968
g888
sg38
S'right'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g1287
sS'block_loop.thisRepN'
p2974
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2975
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vn
sS'block_loop.thisTrialN'
p2977
I0
sg39
F0.85011124580705655
sg34
g752
(S'\x07\xdf\n\x13\x109:\x04\xbe\xd8'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g2366
sS'block_loop.thisIndex'
p2981
g888
sg38
S'left'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g1143
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g2373
sS'block_loop.thisRepN'
p2987
I0
sg906
g1143
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2988
I0
sg908
g1150
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vn
sS'block_loop.thisTrialN'
p2990
I0
sg39
F0.75012230766151333
sg34
g752
(S'\x07\xdf\n\x13\x10:\x04\x02\xee\x00'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g1062
sS'block_loop.thisIndex'
p2994
g888
sg38
S'right'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g1069
sS'block_loop.thisRepN'
p3000
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3001
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vn
sS'block_loop.thisTrialN'
p3003
I0
sg39
F1.0834756929907599
sg34
g752
(S'\x07\xdf\n\x13\x10:\t\x0e\xf4 '
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g1534
sS'block_loop.thisIndex'
p3007
g888
sg38
S'right'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g1541
sS'block_loop.thisRepN'
p3013
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3014
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vn
sS'block_loop.thisTrialN'
p3016
I0
sg39
F0.85023070247189025
sg34
g752
(S'\x07\xdf\n\x13\x10:\x10\x01s\x18'
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g1139
sS'block_loop.thisIndex'
p3020
g888
sg38
S'right'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g1143
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g1147
sS'block_loop.thisRepN'
p3026
I0
sg906
g1143
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3027
I0
sg908
g1150
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vn
sS'block_loop.thisTrialN'
p3029
I0
sg39
F1.0835372744732013
sg34
g752
(S'\x07\xdf\n\x13\x10:\x15\x0e\xe4\x80'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g1713
sS'block_loop.thisIndex'
p3033
g888
sg38
S'left'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g1218
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g1720
sS'block_loop.thisRepN'
p3039
I0
sg906
g1211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3040
I0
sg908
g1218
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vn
sS'block_loop.thisTrialN'
p3042
I0
sg39
F0.88387785427039489
sg34
g752
(S'\x07\xdf\n\x13\x10:\x1c\x01cx'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g1062
sS'block_loop.thisIndex'
p3046
g888
sg38
S'right'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g1069
sS'block_loop.thisRepN'
p3052
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3053
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vn
sS'block_loop.thisTrialN'
p3055
I0
sg39
F0.81677627790122642
sg34
g752
(S'\x07\xdf\n\x13\x10:"\x00J8'
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g2000
sS'block_loop.thisIndex'
p3059
g888
sg38
S'left'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g2007
sS'block_loop.thisRepN'
p3065
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3066
I0
sg908
g1184
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vn
sS'block_loop.thisTrialN'
p3068
I0
sg39
F0.78343361231236486
sg34
g752
(S"\x07\xdf\n\x13\x10:'\rB\x88"
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1013
sS'block_loop.thisIndex'
p3072
g888
sg38
S'right'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1020
sS'block_loop.thisRepN'
p3078
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3079
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vn
sS'block_loop.thisTrialN'
p3081
I0
sg39
F0.86676932147383923
sg34
g752
(S'\x07\xdf\n\x13\x10:-\nD\xe8'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g2366
sS'block_loop.thisIndex'
p3085
g888
sg38
S'left'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g1143
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g2373
sS'block_loop.thisRepN'
p3091
I0
sg906
g1143
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3092
I0
sg908
g1150
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vn
sS'block_loop.thisTrialN'
p3094
I0
sg39
F0.78345185867510736
sg34
g752
(S'\x07\xdf\n\x13\x10:3\x08\xed('
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g1190
sS'block_loop.thisIndex'
p3098
g888
sg38
S'right'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g1201
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g1198
sS'block_loop.thisRepN'
p3104
I0
sg906
g1194
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3105
I0
sg908
g1201
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vn
sS'block_loop.thisTrialN'
p3107
I0
sg39
F0.65019951259455411
sg34
g752
(S'\x07\xdf\n\x13\x10:9\x06* '
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g1657
sS'block_loop.thisIndex'
p3111
g888
sg38
S'left'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g1664
sS'block_loop.thisRepN'
p3117
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3118
I0
sg908
g1094
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vn
sS'block_loop.thisTrialN'
p3120
I0
sg39
F1.4006000773188134
sg34
g752
(S'\x07\xdf\n\x13\x10;\x03\x01@P'
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g2366
sS'block_loop.thisIndex'
p3124
g888
sg38
S'left'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g1143
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g2373
sS'block_loop.thisRepN'
p3130
I0
sg906
g1143
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3131
I0
sg908
g1150
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vn
sS'block_loop.thisTrialN'
p3133
I0
sg39
F0.81680364744897815
sg34
g752
(S'\x07\xdf\n\x13\x10;\t\x07\xc80'
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g1062
sS'block_loop.thisIndex'
p3137
g888
sg38
S'right'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g1069
sS'block_loop.thisRepN'
p3143
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3144
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vn
sS'block_loop.thisTrialN'
p3146
I0
sg39
F1.1167832913488382
sg34
g752
(S'\x07\xdf\n\x13\x10;\x0f\x05~@'
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g1325
sS'block_loop.thisIndex'
p3150
g888
sg38
S'left'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g1335
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g1333
sS'block_loop.thisRepN'
p3156
I0
sg906
g1335
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3157
I0
sg908
g1329
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vn
sS'block_loop.thisTrialN'
p3159
I0
sg39
F0.95014865085249767
sg34
g752
(S'\x07\xdf\n\x13\x10;\x15\x07\xb8\x90'
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g966
sS'block_loop.thisIndex'
p3163
g888
sg38
S'left'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g974
sS'block_loop.thisRepN'
p3169
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3170
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vn
sS'block_loop.thisTrialN'
p3172
I0
sg39
F1.0833325730709475
sg34
g752
(S'\x07\xdf\n\x13\x10;\x1b\x07\x91\x80'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g932
sS'block_loop.thisIndex'
p3176
g888
sg38
S'left'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g940
sS'block_loop.thisRepN'
p3182
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3183
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vn
sS'block_loop.thisTrialN'
p3185
I0
sg39
F0.83354383175901603
sg34
g752
(S'\x07\xdf\n\x13\x10;!\tV\xa0'
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g1396
sS'block_loop.thisIndex'
p3189
g888
sg38
S'right'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g1299
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g1403
sS'block_loop.thisRepN'
p3195
I0
sg906
g1299
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3196
I0
sg908
g1306
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vn
sS'block_loop.thisTrialN'
p3198
I0
sg39
F0.75020897789363516
sg34
g752
(S"\x07\xdf\n\x13\x10;'\x07GH"
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g1985
sS'block_loop.thisIndex'
p3202
g888
sg38
S'left'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1335
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g1992
sS'block_loop.thisRepN'
p3208
I0
sg906
g1335
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3209
I0
sg908
g1329
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vn
sS'block_loop.thisTrialN'
p3211
I0
sg39
F0.93355244176200358
sg34
g752
(S'\x07\xdf\n\x13\x10;-\x04\x0b('
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g1931
sS'block_loop.thisIndex'
p3215
g888
sg38
S'right'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g1732
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g1938
sS'block_loop.thisRepN'
p3221
I0
sg906
g1732
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3222
I0
sg908
g1739
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vn
sS'block_loop.thisTrialN'
p3224
I0
sg39
F1.0001046314973792
sg34
g752
(S'\x07\xdf\n\x13\x10;3\x03k\x00'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g1506
sS'block_loop.thisIndex'
p3228
g888
sg38
S'right'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g1513
sS'block_loop.thisRepN'
p3234
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3235
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vn
sS'block_loop.thisTrialN'
p3237
I0
sg39
F0.81666480401690933
sg34
g752
(S'\x07\xdf\n\x13\x10;9\x03\xfb\x88'
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g915
sS'block_loop.thisIndex'
p3241
g888
sg38
S'left'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g923
sS'block_loop.thisRepN'
p3247
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3248
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vn
sS'block_loop.thisTrialN'
p3250
I0
sg39
F0.7501123291804106
sg34
g752
(S'\x07\xdf\n\x13\x11\x00\x03\x01\xb1\x98'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g1603
sS'block_loop.thisIndex'
p3254
g888
sg38
S'left'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g1111
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g1610
sS'block_loop.thisRepN'
p3260
I0
sg906
g1111
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3261
I0
sg908
g1118
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vn
sS'block_loop.thisTrialN'
p3263
I0
sg39
F1.0168901466204261
sg34
g752
(S'\x07\xdf\n\x13\x11\x00\x08\r\xb7\xb8'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g1013
sS'block_loop.thisIndex'
p3267
g888
sg38
S'right'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g1020
sS'block_loop.thisRepN'
p3273
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3274
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vn
sS'block_loop.thisTrialN'
p3276
I0
sg39
F0.76687959794071503
sg34
g752
(S'\x07\xdf\n\x13\x11\x00\x0e\x0e\x86\xc0'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g1931
sS'block_loop.thisIndex'
p3280
g888
sg38
S'right'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g1732
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g1938
sS'block_loop.thisRepN'
p3286
I0
sg906
g1732
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3287
I0
sg908
g1739
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vn
sS'block_loop.thisTrialN'
p3289
I0
sg39
F1.1835592841489415
sg34
g752
(S'\x07\xdf\n\x13\x11\x00\x14\x0bF\xb8'
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g1450
sS'block_loop.thisIndex'
p3293
g888
sg38
S'left'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g1454
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g1458
sS'block_loop.thisRepN'
p3299
I0
sg906
g1454
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3300
I0
sg908
g1461
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vn
sS'block_loop.thisTrialN'
p3302
I0
sg39
F0.78341536594962236
sg34
g752
(S'\x07\xdf\n\x13\x11\x00\x1a\x0e\xb5\xa0'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g2394
sS'block_loop.thisIndex'
p3306
g888
sg38
S'left'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g1260
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g2401
sS'block_loop.thisRepN'
p3312
I0
sg906
g1260
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3313
I0
sg908
g1254
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vn
sS'block_loop.thisTrialN'
p3315
I0
sg39
F1.8502010521297052
sg34
g752
(S'\x07\xdf\n\x13\x11\x00 \x0b\xee\xb0'
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g1931
sS'block_loop.thisIndex'
p3319
g888
sg38
S'right'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g1732
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g1938
sS'block_loop.thisRepN'
p3325
I0
sg906
g1732
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3326
I0
sg908
g1739
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vn
sS'block_loop.thisTrialN'
p3328
I0
sg39
F0.96689140105809201
sg34
g752
(S"\x07\xdf\n\x13\x11\x00'\n\x19\xf0"
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1013
sS'block_loop.thisIndex'
p3332
g888
sg38
S'right'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1020
sS'block_loop.thisRepN'
p3338
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3339
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vn
sS'block_loop.thisTrialN'
p3341
I0
sg39
F0.6502074953787087
sg34
g752
(S'\x07\xdf\n\x13\x11\x00-\n1`'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1090
sS'block_loop.thisIndex'
p3345
g888
sg38
S'right'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1098
sS'block_loop.thisRepN'
p3351
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3352
I0
sg908
g1094
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vn
sS'block_loop.thisTrialN'
p3354
I0
sg39
F0.85020732432167279
sg34
g752
(S'\x07\xdf\n\x13\x11\x003\x05G\x90'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g1728
sS'block_loop.thisIndex'
p3358
g888
sg38
S'left'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1732
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g1736
sS'block_loop.thisRepN'
p3364
I0
sg906
g1732
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3365
I0
sg908
g1739
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vn
sS'block_loop.thisTrialN'
p3367
I0
sg39
F0.90013051853020443
sg34
g752
(S'\x07\xdf\n\x13\x11\x009\x03z\xa0'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g932
sS'block_loop.thisIndex'
p3371
g888
sg38
S'left'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g940
sS'block_loop.thisRepN'
p3377
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3378
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vn
sS'block_loop.thisTrialN'
p3380
I0
sg39
F0.7501476815159549
sg34
g752
(S'\x07\xdf\n\x13\x11\x01\x03\x02a`'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g2394
sS'block_loop.thisIndex'
p3384
g888
sg38
S'left'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g1260
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g2401
sS'block_loop.thisRepN'
p3390
I0
sg906
g1260
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3391
I0
sg908
g1254
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vn
sS'block_loop.thisTrialN'
p3393
I0
sg39
F0.70011215812337468
sg34
g752
(S'\x07\xdf\n\x13\x11\x01\x08\x0ec\x98'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g1985
sS'block_loop.thisIndex'
p3397
g888
sg38
S'left'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g1335
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g1992
sS'block_loop.thisRepN'
p3403
I0
sg906
g1335
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3404
I0
sg908
g1329
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vn
sS'block_loop.thisTrialN'
p3406
I0
sg39
F0.96702596799877938
sg34
g752
(S'\x07\xdf\n\x13\x11\x01\x0e\no\xe0'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g1575
sS'block_loop.thisIndex'
p3410
g888
sg38
S'left'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g1006
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g1582
sS'block_loop.thisRepN'
p3416
I0
sg906
g1006
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3417
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vn
sS'block_loop.thisTrialN'
p3419
I0
sg39
F0.81689117297719349
sg34
g752
(S'\x07\xdf\n\x13\x11\x01\x14\nL\xb8'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g1124
sS'block_loop.thisIndex'
p3423
g888
sg38
S'left'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g1131
sS'block_loop.thisRepN'
p3429
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3430
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vn
sS'block_loop.thisTrialN'
p3432
I0
sg39
F1.0165950686896394
sg34
g752
(S'\x07\xdf\n\x13\x11\x01\x1a\x08\x02\xc8'
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g895
sS'block_loop.thisIndex'
p3436
g888
sg38
S'left'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g904
sS'block_loop.thisRepN'
p3442
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3443
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vn
sS'block_loop.thisTrialN'
p3445
I0
sg39
F0.93353020400536479
sg34
g752
(S'\x07\xdf\n\x13\x11\x01 \x08\xcd\xe8'
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g1916
sS'block_loop.thisIndex'
p3449
g888
sg38
S'right'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g1923
sS'block_loop.thisRepN'
p3455
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3456
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vn
sS'block_loop.thisTrialN'
p3458
I0
sg39
F0.85010696931203711
sg34
g752
(S'\x07\xdf\n\x13\x11\x01&\x08l@'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g1062
sS'block_loop.thisIndex'
p3462
g888
sg38
S'right'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g1069
sS'block_loop.thisRepN'
p3468
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3469
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vn
sS'block_loop.thisTrialN'
p3471
I0
sg39
F1.0502014512712776
sg34
g752
(S'\x07\xdf\n\x13\x11\x01,\x06\x9bh'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g1090
sS'block_loop.thisIndex'
p3475
g888
sg38
S'right'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g1098
sS'block_loop.thisRepN'
p3481
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3482
I0
sg908
g1094
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vn
sS'block_loop.thisTrialN'
p3484
I0
sg39
F0.96688056728089578
sg34
g752
(S'\x07\xdf\n\x13\x11\x012\x07\xe3\x88'
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g1396
sS'block_loop.thisIndex'
p3488
g888
sg38
S'right'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g1299
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g1403
sS'block_loop.thisRepN'
p3494
I0
sg906
g1299
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3495
I0
sg908
g1306
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vn
sS'block_loop.thisTrialN'
p3497
I0
sg39
F5.3834211249559303
sg34
g752
(S'\x07\xdf\n\x13\x11\x018\x07\xc0`'
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g1657
sS'block_loop.thisIndex'
p3501
g888
sg38
S'left'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g1664
sS'block_loop.thisRepN'
p3507
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3508
I0
sg908
g1094
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vn
sS'block_loop.thisTrialN'
p3510
I0
sg39
F1.7001888498743938
sg34
g752
(S'\x07\xdf\n\x13\x11\x02\x06\x0e,\xe8'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g1325
sS'block_loop.thisIndex'
p3514
g888
sg38
S'right'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g1335
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g1333
sS'block_loop.thisRepN'
p3520
I0
sg906
g1335
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3521
I0
sg908
g1329
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vn
sS'block_loop.thisTrialN'
p3523
I0
sg39
F0.95011415381668485
sg34
g752
(S'\x07\xdf\n\x13\x11\x02\r\n1`'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g1207
sS'block_loop.thisIndex'
p3527
g888
sg38
S'right'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g1211
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g1215
sS'block_loop.thisRepN'
p3533
I0
sg906
g1211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3534
I0
sg908
g1218
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vn
sS'block_loop.thisTrialN'
p3536
I0
sg39
F0.76692521385120926
sg34
g752
(S'\x07\xdf\n\x13\x11\x02\x13\t\xcf\xb8'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g2394
sS'block_loop.thisIndex'
p3540
g888
sg38
S'left'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g1260
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g2401
sS'block_loop.thisRepN'
p3546
I0
sg906
g1260
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3547
I0
sg908
g1254
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vn
sS'block_loop.thisTrialN'
p3549
I0
sg39
F1.4501711737066216
sg34
g752
(S'\x07\xdf\n\x13\x11\x02\x19\x06\xce0'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g1173
sS'block_loop.thisIndex'
p3553
g888
sg38
S'right'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g1181
sS'block_loop.thisRepN'
p3559
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3560
I0
sg908
g1184
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vn
sS'block_loop.thisTrialN'
p3562
I0
sg39
F0.71676852319433237
sg34
g752
(S'\x07\xdf\n\x13\x11\x02\x1f\x0e\t\xc0'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g1603
sS'block_loop.thisIndex'
p3566
g888
sg38
S'left'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g1111
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g1610
sS'block_loop.thisRepN'
p3572
I0
sg906
g1111
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3573
I0
sg908
g1118
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vn
sS'block_loop.thisTrialN'
p3575
I0
sg39
F0.96685832952061901
sg34
g752
(S'\x07\xdf\n\x13\x11\x02%\nP\xa0'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g1280
sS'block_loop.thisIndex'
p3579
g888
sg38
S'right'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g1287
sS'block_loop.thisRepN'
p3585
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3586
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vn
sS'block_loop.thisTrialN'
p3588
I0
sg39
F1.0834343535716471
sg34
g752
(S'\x07\xdf\n\x13\x11\x02+\nh\x10'
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g1506
sS'block_loop.thisIndex'
p3592
g888
sg38
S'right'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g1513
sS'block_loop.thisRepN'
p3598
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3599
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vn
sS'block_loop.thisTrialN'
p3601
I0
sg39
F1.1334062997848378
sg34
g752
(S'\x07\xdf\n\x13\x11\x021\x0c)H'
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g1575
sS'block_loop.thisIndex'
p3605
g888
sg38
S'left'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g1000
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g1582
sS'block_loop.thisRepN'
p3611
I0
sg906
g1006
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3612
I0
sg908
g1000
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vn
sS'block_loop.thisTrialN'
p3614
I0
sg39
F1.0005502419371624
sg34
g752
(S'\x07\xdf\n\x13\x11\x027\x0e\xa6\x00'
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F79.232181284474791
sg56
Vr
sS'block_loop.thisIndex'
p3618
g888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vn
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vr
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vn
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'36-fig_rolls.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'right'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'34-hula_hoops_bbq_beef_redo.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3645
I1
sS'img_wrong'
p3646
S'36-fig_rolls.png'
p3647
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vn
sS'block_loop.thisTrialN'
p3649
I0
sg39
F0.9834938823369157
sg34
g752
(S'\x07\xdf\n\x13\x11\x04\x1a\x04\x16\xe0'
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'41-peanuts_redo.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'left'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'41-peanuts_redo.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'45-chewy_nougat_redo.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3663
I1
sg3646
S'45-chewy_nougat_redo.png'
p3664
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vn
sS'block_loop.thisTrialN'
p3666
I0
sg39
F0.66678004121422418
sg34
g752
(S'\x07\xdf\n\x13\x11\x04 \x04.P'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'23-crunchie_redo.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'right'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
S'33-ambrosia_rice.png'
p3674
sg63
g64
sS'trial_loop.thisIndex'
p3675
g59
(g98
S'\x02\x00\x00\x00'
tRp3676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3677
I0
sg3641
S'33-ambrosia_rice.png'
p3678
sS'block_loop.thisRepN'
p3679
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3680
I1
sg3646
S'23-crunchie_redo.png'
p3681
sg55
g11
sS'block_loop.thisTrial'
p3682
Nsg69
Vn
sS'block_loop.thisTrialN'
p3683
I0
sg39
F0.63346303457728936
sg34
g752
(S'\x07\xdf\n\x13\x11\x04%\x0f\x03\xc0'
tRp3684
sa(dp3685
S'trial_loop.thisTrialN'
p3686
I3
sg3632
S'2-steamed_puddings.png'
p3687
sS'block_loop.thisIndex'
p3688
g3626
sg38
S'left'
p3689
sg58
g62
sS'trial_loop.thisN'
p3690
I3
sg33
S'2-steamed_puddings.png'
p3691
sg63
g64
sS'trial_loop.thisIndex'
p3692
g59
(g98
S'\x03\x00\x00\x00'
tRp3693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3694
I0
sg3641
S'20-fruit_pastilles.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3697
I1
sg3646
S'20-fruit_pastilles.png'
p3698
sg55
g11
sS'block_loop.thisTrial'
p3699
Nsg69
Vn
sS'block_loop.thisTrialN'
p3700
I0
sg39
F0.73355802971491357
sg34
g752
(S'\x07\xdf\n\x13\x11\x04+\t\xdbp'
tRp3701
sa(dp3702
S'trial_loop.thisTrialN'
p3703
I4
sg3632
S'51-mars.png'
p3704
sS'block_loop.thisIndex'
p3705
g3626
sg38
S'right'
p3706
sg58
g62
sS'trial_loop.thisN'
p3707
I4
sg33
S'51-mars.png'
p3708
sg63
g64
sS'trial_loop.thisIndex'
p3709
g59
(g98
S'\x04\x00\x00\x00'
tRp3710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3711
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p3712
sS'block_loop.thisRepN'
p3713
I1
sg3644
S'27-hartleys_raspberries_jelly.png'
p3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3715
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p3716
Nsg69
Vn
sS'block_loop.thisTrialN'
p3717
I0
sg39
F0.68343212979380041
sg34
g752
(S'\x07\xdf\n\x13\x11\x041\x06&8'
tRp3718
sa(dp3719
S'trial_loop.thisTrialN'
p3720
I5
sg3632
S'6-sour_patch_kids.png'
p3721
sS'block_loop.thisIndex'
p3722
g3626
sg38
S'right'
p3723
sg58
g62
sS'trial_loop.thisN'
p3724
I5
sg33
S'38-maltesers.png'
p3725
sg63
g64
sS'trial_loop.thisIndex'
p3726
g59
(g98
S'\x05\x00\x00\x00'
tRp3727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3728
I0
sg3641
S'38-maltesers.png'
p3729
sS'block_loop.thisRepN'
p3730
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3731
I1
sg3646
S'6-sour_patch_kids.png'
p3732
sg55
g11
sS'block_loop.thisTrial'
p3733
Nsg69
Vn
sS'block_loop.thisTrialN'
p3734
I0
sg39
F0.75023805803721189
sg34
g752
(S'\x07\xdf\n\x13\x11\x047\x01\xf4\x00'
tRp3735
sa(dp3736
S'trial_loop.thisTrialN'
p3737
I6
sg3632
S'21-nakd_banana_crunch.png'
p3738
sS'block_loop.thisIndex'
p3739
g3626
sg38
S'right'
p3740
sg58
g62
sS'trial_loop.thisN'
p3741
I6
sg33
S'21-nakd_banana_crunch.png'
p3742
sg63
g64
sS'trial_loop.thisIndex'
p3743
g59
(g98
S'\x06\x00\x00\x00'
tRp3744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3745
I0
sg3641
S'1-treacle_cookies.png'
p3746
sS'block_loop.thisRepN'
p3747
I1
sg3644
S'1-treacle_cookies.png'
p3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3749
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p3750
Nsg69
Vn
sS'block_loop.thisTrialN'
p3751
I0
sg39
F0.70019683266218635
sg34
g752
(S'\x07\xdf\n\x13\x11\x05\x00\r\xfa '
tRp3752
sa(dp3753
S'trial_loop.thisTrialN'
p3754
I7
sg3632
S'40-sardines.png'
p3755
sS'block_loop.thisIndex'
p3756
g3626
sg38
S'right'
p3757
sg58
g62
sS'trial_loop.thisN'
p3758
I7
sg33
S'5-pineapple.png'
p3759
sg63
g64
sS'trial_loop.thisIndex'
p3760
g59
(g98
S'\x07\x00\x00\x00'
tRp3761
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3762
I0
sg3641
S'5-pineapple.png'
p3763
sS'block_loop.thisRepN'
p3764
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3765
I1
sg3646
S'40-sardines.png'
p3766
sg55
g11
sS'block_loop.thisTrial'
p3767
Nsg69
Vn
sS'block_loop.thisTrialN'
p3768
I0
sg39
F0.86677901485745679
sg34
g752
(S'\x07\xdf\n\x13\x11\x05\x06\t\xc7\xe8'
tRp3769
sa(dp3770
S'trial_loop.thisTrialN'
p3771
I8
sg3632
S'31-hobnobs.png'
p3772
sS'block_loop.thisIndex'
p3773
g3626
sg38
S'right'
p3774
sg58
g62
sS'trial_loop.thisN'
p3775
I8
sg33
S'25-kitkat.png'
p3776
sg63
g64
sS'trial_loop.thisIndex'
p3777
g59
(g98
S'\x08\x00\x00\x00'
tRp3778
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3779
I0
sg3641
S'25-kitkat.png'
p3780
sS'block_loop.thisRepN'
p3781
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3782
I1
sg3646
S'31-hobnobs.png'
p3783
sg55
g11
sS'block_loop.thisTrial'
p3784
Nsg69
Vn
sS'block_loop.thisTrialN'
p3785
I0
sg39
F1.5001117589854402
sg34
g752
(S'\x07\xdf\n\x13\x11\x05\x0c\x085\x90'
tRp3786
sa(dp3787
S'trial_loop.thisTrialN'
p3788
I9
sg3632
S'16-skips_prawn.png'
p3789
sS'block_loop.thisIndex'
p3790
g3626
sg38
S'left'
p3791
sg58
g62
sS'trial_loop.thisN'
p3792
I9
sg33
S'42-mrkipling_lemon_slices.png'
p3793
sg63
g64
sS'trial_loop.thisIndex'
p3794
g59
(g98
S'\t\x00\x00\x00'
tRp3795
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3796
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p3797
sS'block_loop.thisRepN'
p3798
I1
sg3644
S'16-skips_prawn.png'
p3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3800
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p3801
Nsg69
Vn
sS'block_loop.thisTrialN'
p3802
I0
sg39
F1.0167501627911406
sg34
g752
(S'\x07\xdf\n\x13\x11\x05\x13\x01!\x10'
tRp3803
sa(dp3804
S'trial_loop.thisTrialN'
p3805
I10
sg3632
S'50-polo.png'
p3806
sS'block_loop.thisIndex'
p3807
g3626
sg38
S'left'
p3808
sg58
g62
sS'trial_loop.thisN'
p3809
I10
sg33
S'50-polo.png'
p3810
sg63
g64
sS'trial_loop.thisIndex'
p3811
g59
(g98
S'\n\x00\x00\x00'
tRp3812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3813
I0
sg3641
S'48-twix.png'
p3814
sS'block_loop.thisRepN'
p3815
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3816
I1
sg3646
S'48-twix.png'
p3817
sg55
g11
sS'block_loop.thisTrial'
p3818
Nsg69
Vn
sS'block_loop.thisTrialN'
p3819
I0
sg39
F0.86686882118010544
sg34
g752
(S'\x07\xdf\n\x13\x11\x05\x19\x01\xf0\x18'
tRp3820
sa(dp3821
S'trial_loop.thisTrialN'
p3822
I11
sg3632
S'27-hartleys_raspberries_jelly.png'
p3823
sS'block_loop.thisIndex'
p3824
g3626
sg38
S'left'
p3825
sg58
g62
sS'trial_loop.thisN'
p3826
I11
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p3827
g59
(g98
S'\x0b\x00\x00\x00'
tRp3828
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3829
I0
sg3641
S'51-mars.png'
p3830
sS'block_loop.thisRepN'
p3831
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3832
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p3833
Nsg69
Vn
sS'block_loop.thisTrialN'
p3834
I0
sg39
F1.1500945959960518
sg34
g752
(S'\x07\xdf\n\x13\x11\x05\x1f\x00]\xc0'
tRp3835
sa(dp3836
S'trial_loop.thisTrialN'
p3837
I12
sg3632
S'20-fruit_pastilles.png'
p3838
sS'block_loop.thisIndex'
p3839
g3626
sg38
S'right'
p3840
sg58
g62
sS'trial_loop.thisN'
p3841
I12
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p3842
g59
(g98
S'\x0c\x00\x00\x00'
tRp3843
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3844
I0
sg3641
S'2-steamed_puddings.png'
p3845
sS'block_loop.thisRepN'
p3846
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3847
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p3848
Nsg69
Vn
sS'block_loop.thisTrialN'
p3849
I0
sg39
F0.83352273440323188
sg34
g752
(S'\x07\xdf\n\x13\x11\x05%\x03\x11('
tRp3850
sa(dp3851
S'trial_loop.thisTrialN'
p3852
I13
sg3632
S'49-yorkie.png'
p3853
sS'block_loop.thisIndex'
p3854
g3626
sg38
S'left'
p3855
sg58
g62
sS'trial_loop.thisN'
p3856
I13
sg33
S'49-yorkie.png'
p3857
sg63
g64
sS'trial_loop.thisIndex'
p3858
g59
(g98
S'\r\x00\x00\x00'
tRp3859
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3860
I0
sg3641
S'35-raisins.png'
p3861
sS'block_loop.thisRepN'
p3862
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3863
I1
sg3646
S'35-raisins.png'
p3864
sg55
g11
sS'block_loop.thisTrial'
p3865
Nsg69
Vn
sS'block_loop.thisTrialN'
p3866
I0
sg39
F0.98346594259055564
sg34
g752
(S'\x07\xdf\n\x13\x11\x05+\x01D8'
tRp3867
sa(dp3868
S'trial_loop.thisTrialN'
p3869
I14
sg3632
g3670
sS'block_loop.thisIndex'
p3870
g3626
sg38
S'right'
p3871
sg58
g62
sS'trial_loop.thisN'
p3872
I14
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p3873
g59
(g98
S'\x0e\x00\x00\x00'
tRp3874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3875
I0
sg3641
g3678
sS'block_loop.thisRepN'
p3876
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3877
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p3878
Nsg69
Vn
sS'block_loop.thisTrialN'
p3879
I0
sg39
F0.70019825815688819
sg34
g752
(S'\x07\xdf\n\x13\x11\x051\x01[\xa8'
tRp3880
sa(dp3881
S'trial_loop.thisTrialN'
p3882
I15
sg3632
g3772
sS'block_loop.thisIndex'
p3883
g3626
sg38
S'right'
p3884
sg58
g62
sS'trial_loop.thisN'
p3885
I15
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p3886
g59
(g98
S'\x0f\x00\x00\x00'
tRp3887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3888
I0
sg3641
g3780
sS'block_loop.thisRepN'
p3889
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3890
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p3891
Nsg69
Vn
sS'block_loop.thisTrialN'
p3892
I0
sg39
F1.3335178877096041
sg34
g752
(S'\x07\xdf\n\x13\x11\x056\x0c\xa6H'
tRp3893
sa(dp3894
S'trial_loop.thisTrialN'
p3895
I16
sg3632
S'10-bounty_redo.png'
p3896
sS'block_loop.thisIndex'
p3897
g3626
sg38
S'right'
p3898
sg58
g62
sS'trial_loop.thisN'
p3899
I16
sg33
S'4-corn.png'
p3900
sg63
g64
sS'trial_loop.thisIndex'
p3901
g59
(g98
S'\x10\x00\x00\x00'
tRp3902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3903
I0
sg3641
S'4-corn.png'
p3904
sS'block_loop.thisRepN'
p3905
I1
sg3644
g3900
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3906
I1
sg3646
S'10-bounty_redo.png'
p3907
sg55
g11
sS'block_loop.thisTrial'
p3908
Nsg69
Vn
sS'block_loop.thisTrialN'
p3909
I0
sg39
F0.66676778193505015
sg34
g752
(S'\x07\xdf\n\x13\x11\x06\x01\x02\xf5\xd0'
tRp3910
sa(dp3911
S'trial_loop.thisTrialN'
p3912
I17
sg3632
S'13-mccoys_steak_crisps.png'
p3913
sS'block_loop.thisIndex'
p3914
g3626
sg38
S'left'
p3915
sg58
g62
sS'trial_loop.thisN'
p3916
I17
sg33
S'13-mccoys_steak_crisps.png'
p3917
sg63
g64
sS'trial_loop.thisIndex'
p3918
g59
(g98
S'\x11\x00\x00\x00'
tRp3919
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3920
I0
sg3641
S'3-ellas_strawberries_apples.png'
p3921
sS'block_loop.thisRepN'
p3922
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3923
I1
sg3646
S'3-ellas_strawberries_apples.png'
p3924
sg55
g11
sS'block_loop.thisTrial'
p3925
Nsg69
Vn
sS'block_loop.thisTrialN'
p3926
I0
sg39
F0.8502064690219413
sg34
g752
(S'\x07\xdf\n\x13\x11\x06\x06\r\x8c\xc0'
tRp3927
sa(dp3928
S'trial_loop.thisTrialN'
p3929
I18
sg3632
S'30-spaghetti_hoops.png'
p3930
sS'block_loop.thisIndex'
p3931
g3626
sg38
S'left'
p3932
sg58
g62
sS'trial_loop.thisN'
p3933
I18
sg33
S'19-caramello_redo.png'
p3934
sg63
g64
sS'trial_loop.thisIndex'
p3935
g59
(g98
S'\x12\x00\x00\x00'
tRp3936
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3937
I0
sg3641
S'19-caramello_redo.png'
p3938
sS'block_loop.thisRepN'
p3939
I1
sg3644
S'30-spaghetti_hoops.png'
p3940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3941
I1
sg3646
g3934
sg55
g11
sS'block_loop.thisTrial'
p3942
Nsg69
Vn
sS'block_loop.thisTrialN'
p3943
I0
sg39
F1.0000975040129561
sg34
g752
(S'\x07\xdf\n\x13\x11\x06\x0c\x0b\xbb\xe8'
tRp3944
sa(dp3945
S'trial_loop.thisTrialN'
p3946
I19
sg3632
S'3-ellas_strawberries_apples.png'
p3947
sS'block_loop.thisIndex'
p3948
g3626
sg38
S'right'
p3949
sg58
g62
sS'trial_loop.thisN'
p3950
I19
sg33
g3924
sg63
g64
sS'trial_loop.thisIndex'
p3951
g59
(g98
S'\x13\x00\x00\x00'
tRp3952
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3953
I0
sg3641
S'13-mccoys_steak_crisps.png'
p3954
sS'block_loop.thisRepN'
p3955
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3956
I1
sg3646
g3924
sg55
g11
sS'block_loop.thisTrial'
p3957
Nsg69
Vn
sS'block_loop.thisTrialN'
p3958
I0
sg39
F0.76678551512304693
sg34
g752
(S'\x07\xdf\n\x13\x11\x06\x12\x0cPX'
tRp3959
sa(dp3960
S'trial_loop.thisTrialN'
p3961
I20
sg3632
S'33-ambrosia_rice.png'
p3962
sS'block_loop.thisIndex'
p3963
g3626
sg38
S'left'
p3964
sg58
g62
sS'trial_loop.thisN'
p3965
I20
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p3966
g59
(g98
S'\x14\x00\x00\x00'
tRp3967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3968
I0
sg3641
S'23-crunchie_redo.png'
p3969
sS'block_loop.thisRepN'
p3970
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3971
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p3972
Nsg69
Vn
sS'block_loop.thisTrialN'
p3973
I0
sg39
F0.76687075986046693
sg34
g752
(S'\x07\xdf\n\x13\x11\x06\x18\tN\xd0'
tRp3974
sa(dp3975
S'trial_loop.thisTrialN'
p3976
I21
sg3632
S'7-olives.png'
p3977
sS'block_loop.thisIndex'
p3978
g3626
sg38
S'right'
p3979
sg58
g62
sS'trial_loop.thisN'
p3980
I21
sg33
S'7-olives.png'
p3981
sg63
g64
sS'trial_loop.thisIndex'
p3982
g59
(g98
S'\x15\x00\x00\x00'
tRp3983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3984
I0
sg3641
S'22-daim.png'
p3985
sS'block_loop.thisRepN'
p3986
I1
sg3644
S'22-daim.png'
p3987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3988
I1
sg3646
g3981
sg55
g11
sS'block_loop.thisTrial'
p3989
Nsg69
Vn
sS'block_loop.thisTrialN'
p3990
I0
sg39
F0.7335620211015339
sg34
g752
(S'\x07\xdf\n\x13\x11\x06\x1e\x06MH'
tRp3991
sa(dp3992
S'trial_loop.thisTrialN'
p3993
I22
sg3632
g3930
sS'block_loop.thisIndex'
p3994
g3626
sg38
S'left'
p3995
sg58
g62
sS'trial_loop.thisN'
p3996
I22
sg33
g3940
sg63
g64
sS'trial_loop.thisIndex'
p3997
g59
(g98
S'\x16\x00\x00\x00'
tRp3998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3999
I0
sg3641
g3938
sS'block_loop.thisRepN'
p4000
I1
sg3644
g3940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4001
I1
sg3646
g3934
sg55
g11
sS'block_loop.thisTrial'
p4002
Nsg69
Vn
sS'block_loop.thisTrialN'
p4003
I0
sg39
F0.8501006971237075
sg34
g752
(S'\x07\xdf\n\x13\x11\x06$\x02\x94('
tRp4004
sa(dp4005
S'trial_loop.thisTrialN'
p4006
I23
sg3632
g3633
sS'block_loop.thisIndex'
p4007
g3626
sg38
S'right'
p4008
sg58
g62
sS'trial_loop.thisN'
p4009
I23
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p4010
g59
(g98
S'\x17\x00\x00\x00'
tRp4011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4012
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4013
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4014
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4015
Nsg69
Vn
sS'block_loop.thisTrialN'
p4016
I0
sg39
F0.95021992571491865
sg34
g752
(S'\x07\xdf\n\x13\x11\x06*\x00\xc78'
tRp4017
sa(dp4018
S'trial_loop.thisTrialN'
p4019
I24
sg3632
g3896
sS'block_loop.thisIndex'
p4020
g3626
sg38
S'right'
p4021
sg58
g62
sS'trial_loop.thisN'
p4022
I24
sg33
g3900
sg63
g64
sS'trial_loop.thisIndex'
p4023
g59
(g98
S'\x18\x00\x00\x00'
tRp4024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4025
I0
sg3641
g3904
sS'block_loop.thisRepN'
p4026
I1
sg3644
g3900
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4027
I1
sg3646
g3907
sg55
g11
sS'block_loop.thisTrial'
p4028
Nsg69
Vn
sS'block_loop.thisTrialN'
p4029
I0
sg39
F0.65021861425702809
sg34
g752
(S'\x07\xdf\n\x13\x11\x060\x00\xa0('
tRp4030
sa(dp4031
S'trial_loop.thisTrialN'
p4032
I25
sg3632
g3721
sS'block_loop.thisIndex'
p4033
g3626
sg38
S'right'
p4034
sg58
g62
sS'trial_loop.thisN'
p4035
I25
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4036
g59
(g98
S'\x19\x00\x00\x00'
tRp4037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4038
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4039
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4040
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4041
Nsg69
Vn
sS'block_loop.thisTrialN'
p4042
I0
sg39
F0.88318905400592485
sg34
g752
(S'\x07\xdf\n\x13\x11\x065\n\xfc\x80'
tRp4043
sa(dp4044
S'trial_loop.thisTrialN'
p4045
I26
sg3632
S'5-pineapple.png'
p4046
sS'block_loop.thisIndex'
p4047
g3626
sg38
S'left'
p4048
sg58
g62
sS'trial_loop.thisN'
p4049
I26
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4050
g59
(g98
S'\x1a\x00\x00\x00'
tRp4051
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4052
I0
sg3641
S'40-sardines.png'
p4053
sS'block_loop.thisRepN'
p4054
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4055
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4056
Nsg69
Vn
sS'block_loop.thisTrialN'
p4057
I0
sg39
F1.1501028638813295
sg34
g752
(S'\x07\xdf\n\x13\x11\x06;\t\xe3@'
tRp4058
sa(dp4059
S'trial_loop.thisTrialN'
p4060
I27
sg3632
g3962
sS'block_loop.thisIndex'
p4061
g3626
sg38
S'left'
p4062
sg58
g62
sS'trial_loop.thisN'
p4063
I27
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4064
g59
(g98
S'\x1b\x00\x00\x00'
tRp4065
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4066
I0
sg3641
g3969
sS'block_loop.thisRepN'
p4067
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4068
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4069
Nsg69
Vn
sS'block_loop.thisTrialN'
p4070
I0
sg39
F0.65031925436051097
sg34
g752
(S'\x07\xdf\n\x13\x11\x07\x05\x0c\x96\xa8'
tRp4071
sa(dp4072
S'trial_loop.thisTrialN'
p4073
I28
sg3632
g3896
sS'block_loop.thisIndex'
p4074
g3626
sg38
S'right'
p4075
sg58
g62
sS'trial_loop.thisN'
p4076
I28
sg33
g3900
sg63
g64
sS'trial_loop.thisIndex'
p4077
g59
(g98
S'\x1c\x00\x00\x00'
tRp4078
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4079
I0
sg3641
g3904
sS'block_loop.thisRepN'
p4080
I1
sg3644
g3900
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4081
I1
sg3646
g3907
sg55
g11
sS'block_loop.thisTrial'
p4082
Nsg69
Vn
sS'block_loop.thisTrialN'
p4083
I0
sg39
F1.600082450757327
sg34
g752
(S'\x07\xdf\n\x13\x11\x07\x0b\x07\xb0\xc0'
tRp4084
sa(dp4085
S'trial_loop.thisTrialN'
p4086
I29
sg3632
S'45-chewy_nougat_redo.png'
p4087
sS'block_loop.thisIndex'
p4088
g3626
sg38
S'right'
p4089
sg58
g62
sS'trial_loop.thisN'
p4090
I29
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4091
g59
(g98
S'\x1d\x00\x00\x00'
tRp4092
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4093
I0
sg3641
S'41-peanuts_redo.png'
p4094
sS'block_loop.thisRepN'
p4095
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4096
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4097
Nsg69
Vn
sS'block_loop.thisTrialN'
p4098
I0
sg39
F0.58350933472684119
sg34
g752
(S'\x07\xdf\n\x13\x11\x07\x12\x02F\x08'
tRp4099
sa(dp4100
S'trial_loop.thisTrialN'
p4101
I30
sg3632
g3687
sS'block_loop.thisIndex'
p4102
g3626
sg38
S'left'
p4103
sg58
g62
sS'trial_loop.thisN'
p4104
I30
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4105
g59
(g98
S'\x1e\x00\x00\x00'
tRp4106
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4107
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4108
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4109
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4110
Nsg69
Vn
sS'block_loop.thisTrialN'
p4111
I0
sg39
F0.61681180129380664
sg34
g752
(S'\x07\xdf\n\x13\x11\x07\x17\x0b\xacH'
tRp4112
sa(dp4113
S'trial_loop.thisTrialN'
p4114
I31
sg3632
g3853
sS'block_loop.thisIndex'
p4115
g3626
sg38
S'left'
p4116
sg58
g62
sS'trial_loop.thisN'
p4117
I31
sg33
g3864
sg63
g64
sS'trial_loop.thisIndex'
p4118
g59
(g98
S'\x1f\x00\x00\x00'
tRp4119
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4120
I0
sg3641
g3861
sS'block_loop.thisRepN'
p4121
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4122
I1
sg3646
g3864
sg55
g11
sS'block_loop.thisTrial'
p4123
Nsg69
Vn
sS'block_loop.thisTrialN'
p4124
I0
sg39
F0.60013947065090179
sg34
g752
(S'\x07\xdf\n\x13\x11\x07\x1d\x06I`'
tRp4125
sa(dp4126
S'trial_loop.thisTrialN'
p4127
I32
sg3632
S'25-kitkat.png'
p4128
sS'block_loop.thisIndex'
p4129
g3626
sg38
S'left'
p4130
sg58
g62
sS'trial_loop.thisN'
p4131
I32
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4132
g59
(g98
S' \x00\x00\x00'
tRp4133
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4134
I0
sg3641
S'31-hobnobs.png'
p4135
sS'block_loop.thisRepN'
p4136
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4137
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4138
Nsg69
Vn
sS'block_loop.thisTrialN'
p4139
I0
sg39
F0.80019403868573136
sg34
g752
(S'\x07\xdf\n\x13\x11\x07#\x00\xab\xe0'
tRp4140
sa(dp4141
S'trial_loop.thisTrialN'
p4142
I33
sg3632
S'44-crunch.png'
p4143
sS'block_loop.thisIndex'
p4144
g3626
sg38
S'right'
p4145
sg58
g62
sS'trial_loop.thisN'
p4146
I33
sg33
S'26-walkers_smoky_bacon.png'
p4147
sg63
g64
sS'trial_loop.thisIndex'
p4148
g59
(g98
S'!\x00\x00\x00'
tRp4149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4150
I0
sg3641
S'26-walkers_smoky_bacon.png'
p4151
sS'block_loop.thisRepN'
p4152
I1
sg3644
g4147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4153
I1
sg3646
S'44-crunch.png'
p4154
sg55
g11
sS'block_loop.thisTrial'
p4155
Nsg69
Vn
sS'block_loop.thisTrialN'
p4156
I0
sg39
F0.88359104422852397
sg34
g752
(S'\x07\xdf\n\x13\x11\x07(\re\xb0'
tRp4157
sa(dp4158
S'trial_loop.thisTrialN'
p4159
I34
sg3632
g3806
sS'block_loop.thisIndex'
p4160
g3626
sg38
S'left'
p4161
sg58
g62
sS'trial_loop.thisN'
p4162
I34
sg33
g3817
sg63
g64
sS'trial_loop.thisIndex'
p4163
g59
(g98
S'"\x00\x00\x00'
tRp4164
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4165
I0
sg3641
g3814
sS'block_loop.thisRepN'
p4166
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4167
I1
sg3646
g3817
sg55
g11
sS'block_loop.thisTrial'
p4168
Nsg69
Vn
sS'block_loop.thisTrialN'
p4169
I0
sg39
F0.8335258704937587
sg34
g752
(S'\x07\xdf\n\x13\x11\x07.\x0c\x11\xd8'
tRp4170
sa(dp4171
S'trial_loop.thisTrialN'
p4172
I35
sg3632
g3896
sS'block_loop.thisIndex'
p4173
g3626
sg38
S'right'
p4174
sg58
g62
sS'trial_loop.thisN'
p4175
I35
sg33
g3900
sg63
g64
sS'trial_loop.thisIndex'
p4176
g59
(g98
S'#\x00\x00\x00'
tRp4177
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4178
I0
sg3641
g3904
sS'block_loop.thisRepN'
p4179
I1
sg3644
g3900
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4180
I1
sg3646
g3907
sg55
g11
sS'block_loop.thisTrial'
p4181
Nsg69
Vn
sS'block_loop.thisTrialN'
p4182
I0
sg39
F0.80019403868573136
sg34
g752
(S'\x07\xdf\n\x13\x11\x074\n\x02\x80'
tRp4183
sa(dp4184
S'trial_loop.thisTrialN'
p4185
I36
sg3632
g4143
sS'block_loop.thisIndex'
p4186
g3626
sg38
S'right'
p4187
sg58
g62
sS'trial_loop.thisN'
p4188
I36
sg33
g4147
sg63
g64
sS'trial_loop.thisIndex'
p4189
g59
(g98
S'$\x00\x00\x00'
tRp4190
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4191
I0
sg3641
g4151
sS'block_loop.thisRepN'
p4192
I1
sg3644
g4147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4193
I1
sg3646
g4154
sg55
g11
sS'block_loop.thisTrial'
p4194
Nsg69
Vn
sS'block_loop.thisTrialN'
p4195
I0
sg39
F0.86686340429150732
sg34
g752
(S'\x07\xdf\n\x13\x11\x07:\x07}\xf8'
tRp4196
sa(dp4197
S'trial_loop.thisTrialN'
p4198
I37
sg3632
g3913
sS'block_loop.thisIndex'
p4199
g3626
sg38
S'left'
p4200
sg58
g62
sS'trial_loop.thisN'
p4201
I37
sg33
g3917
sg63
g64
sS'trial_loop.thisIndex'
p4202
g59
(g98
S'%\x00\x00\x00'
tRp4203
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4204
I0
sg3641
g3921
sS'block_loop.thisRepN'
p4205
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4206
I1
sg3646
g3924
sg55
g11
sS'block_loop.thisTrial'
p4207
Nsg69
Vn
sS'block_loop.thisTrialN'
p4208
I0
sg39
F0.60010326301926398
sg34
g752
(S'\x07\xdf\n\x13\x11\x08\x04\x05\xeb\xa0'
tRp4209
sa(dp4210
S'trial_loop.thisTrialN'
p4211
I38
sg3632
g3853
sS'block_loop.thisIndex'
p4212
g3626
sg38
S'left'
p4213
sg58
g62
sS'trial_loop.thisN'
p4214
I38
sg33
g3857
sg63
g64
sS'trial_loop.thisIndex'
p4215
g59
(g98
S'&\x00\x00\x00'
tRp4216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4217
I0
sg3641
g3861
sS'block_loop.thisRepN'
p4218
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4219
I1
sg3646
g3864
sg55
g11
sS'block_loop.thisTrial'
p4220
Nsg69
Vn
sS'block_loop.thisTrialN'
p4221
I0
sg39
F0.66682850811776007
sg34
g752
(S'\x07\xdf\n\x13\x11\x08\n\x00J8'
tRp4222
sa(dp4223
S'trial_loop.thisTrialN'
p4224
I39
sg3632
g4128
sS'block_loop.thisIndex'
p4225
g3626
sg38
S'left'
p4226
sg58
g62
sS'trial_loop.thisN'
p4227
I39
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4228
g59
(g98
S"'\x00\x00\x00"
tRp4229
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4230
I0
sg3641
g4135
sS'block_loop.thisRepN'
p4231
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4232
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4233
Nsg69
Vn
sS'block_loop.thisTrialN'
p4234
I0
sg39
F0.78393111085097189
sg34
g752
(S'\x07\xdf\n\x13\x11\x08\x0f\x0b\x1f\xa8'
tRp4235
sa(dp4236
S'trial_loop.thisTrialN'
p4237
I40
sg3632
g3670
sS'block_loop.thisIndex'
p4238
g3626
sg38
S'right'
p4239
sg58
g62
sS'trial_loop.thisN'
p4240
I40
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p4241
g59
(g98
S'(\x00\x00\x00'
tRp4242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4243
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4244
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4245
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4246
Nsg69
Vn
sS'block_loop.thisTrialN'
p4247
I0
sg39
F0.6667965769811417
sg34
g752
(S'\x07\xdf\n\x13\x11\x08\x15\x08\\\xa0'
tRp4248
sa(dp4249
S'trial_loop.thisTrialN'
p4250
I41
sg3632
g3772
sS'block_loop.thisIndex'
p4251
g3626
sg38
S'right'
p4252
sg58
g62
sS'trial_loop.thisN'
p4253
I41
sg33
g3783
sg63
g64
sS'trial_loop.thisIndex'
p4254
g59
(g98
S')\x00\x00\x00'
tRp4255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4256
I0
sg3641
g3780
sS'block_loop.thisRepN'
p4257
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4258
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4259
Nsg69
Vn
sS'block_loop.thisTrialN'
p4260
I0
sg39
F0.55016638403685647
sg34
g752
(S'\x07\xdf\n\x13\x11\x08\x1b\x03\xb1P'
tRp4261
sa(dp4262
S'trial_loop.thisTrialN'
p4263
I42
sg3632
g4087
sS'block_loop.thisIndex'
p4264
g3626
sg38
S'right'
p4265
sg58
g62
sS'trial_loop.thisN'
p4266
I42
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p4267
g59
(g98
S'*\x00\x00\x00'
tRp4268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4269
I0
sg3641
g4094
sS'block_loop.thisRepN'
p4270
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4271
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4272
Nsg69
Vn
sS'block_loop.thisTrialN'
p4273
I0
sg39
F0.96674913643437321
sg34
g752
(S'\x07\xdf\n\x13\x11\x08 \x0c\x9ex'
tRp4274
sa(dp4275
S'trial_loop.thisTrialN'
p4276
I43
sg3632
S'4-corn.png'
p4277
sS'block_loop.thisIndex'
p4278
g3626
sg38
S'left'
p4279
sg58
g62
sS'trial_loop.thisN'
p4280
I43
sg33
g3900
sg63
g64
sS'trial_loop.thisIndex'
p4281
g59
(g98
S'+\x00\x00\x00'
tRp4282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4283
I0
sg3641
S'10-bounty_redo.png'
p4284
sS'block_loop.thisRepN'
p4285
I1
sg3644
g3900
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4286
I1
sg3646
g3907
sg55
g11
sS'block_loop.thisTrial'
p4287
Nsg69
Vn
sS'block_loop.thisTrialN'
p4288
I0
sg39
F0.81688233489330742
sg34
g752
(S'\x07\xdf\n\x13\x11\x08&\x0cwh'
tRp4289
sa(dp4290
S'trial_loop.thisTrialN'
p4291
I44
sg3632
g3913
sS'block_loop.thisIndex'
p4292
g3626
sg38
S'left'
p4293
sg58
g62
sS'trial_loop.thisN'
p4294
I44
sg33
g3917
sg63
g64
sS'trial_loop.thisIndex'
p4295
g59
(g98
S',\x00\x00\x00'
tRp4296
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4297
I0
sg3641
g3921
sS'block_loop.thisRepN'
p4298
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4299
I1
sg3646
g3924
sg55
g11
sS'block_loop.thisTrial'
p4300
Nsg69
Vn
sS'block_loop.thisTrialN'
p4301
I0
sg39
F0.58344803834188497
sg34
g752
(S'\x07\xdf\n\x13\x11\x08,\n-x'
tRp4302
sa(dp4303
S'trial_loop.thisTrialN'
p4304
I45
sg3632
S'46-pistachios.png'
p4305
sS'block_loop.thisIndex'
p4306
g3626
sg38
S'right'
p4307
sg58
g62
sS'trial_loop.thisN'
p4308
I45
sg33
S'29-beans.png'
p4309
sg63
g64
sS'trial_loop.thisIndex'
p4310
g59
(g98
S'-\x00\x00\x00'
tRp4311
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4312
I0
sg3641
S'29-beans.png'
p4313
sS'block_loop.thisRepN'
p4314
I1
sg3644
g4309
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4315
I1
sg3646
S'46-pistachios.png'
p4316
sg55
g11
sS'block_loop.thisTrial'
p4317
Nsg69
Vn
sS'block_loop.thisTrialN'
p4318
I0
sg39
F0.91693313961513923
sg34
g752
(S'\x07\xdf\n\x13\x11\x082\x04Qx'
tRp4319
sa(dp4320
S'trial_loop.thisTrialN'
p4321
I46
sg3632
S'22-daim.png'
p4322
sS'block_loop.thisIndex'
p4323
g3626
sg38
S'left'
p4324
sg58
g62
sS'trial_loop.thisN'
p4325
I46
sg33
g3987
sg63
g64
sS'trial_loop.thisIndex'
p4326
g59
(g98
S'.\x00\x00\x00'
tRp4327
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4328
I0
sg3641
S'7-olives.png'
p4329
sS'block_loop.thisRepN'
p4330
I1
sg3644
g3987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4331
I1
sg3646
g3981
sg55
g11
sS'block_loop.thisTrial'
p4332
Nsg69
Vn
sS'block_loop.thisTrialN'
p4333
I0
sg39
F0.65011227216382395
sg34
g752
(S'\x07\xdf\n\x13\x11\x088\x03\xb1P'
tRp4334
sa(dp4335
S'trial_loop.thisTrialN'
p4336
I47
sg3632
g3755
sS'block_loop.thisIndex'
p4337
g3626
sg38
S'right'
p4338
sg58
g62
sS'trial_loop.thisN'
p4339
I47
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4340
g59
(g98
S'/\x00\x00\x00'
tRp4341
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4342
I0
sg3641
g3763
sS'block_loop.thisRepN'
p4343
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4344
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4345
Nsg69
Vn
sS'block_loop.thisTrialN'
p4346
I0
sg39
F0.68354388877924066
sg34
g752
(S'\x07\xdf\n\x13\x11\t\x01\x0e\r\xa8'
tRp4347
sa(dp4348
S'trial_loop.thisTrialN'
p4349
I48
sg3632
S'19-caramello_redo.png'
p4350
sS'block_loop.thisIndex'
p4351
g3626
sg38
S'right'
p4352
sg58
g62
sS'trial_loop.thisN'
p4353
I48
sg33
g3940
sg63
g64
sS'trial_loop.thisIndex'
p4354
g59
(g98
S'0\x00\x00\x00'
tRp4355
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4356
I0
sg3641
S'30-spaghetti_hoops.png'
p4357
sS'block_loop.thisRepN'
p4358
I1
sg3644
g3940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4359
I1
sg3646
g3934
sg55
g11
sS'block_loop.thisTrial'
p4360
Nsg69
Vn
sS'block_loop.thisTrialN'
p4361
I0
sg39
F1.2501291500484513
sg34
g752
(S'\x07\xdf\n\x13\x11\t\x07\t\xdbp'
tRp4362
sa(dp4363
S'trial_loop.thisTrialN'
p4364
I49
sg3632
g3704
sS'block_loop.thisIndex'
p4365
g3626
sg38
S'right'
p4366
sg58
g62
sS'trial_loop.thisN'
p4367
I49
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p4368
g59
(g98
S'1\x00\x00\x00'
tRp4369
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4370
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4371
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4372
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p4373
Nsg69
Vn
sS'block_loop.thisTrialN'
p4374
I0
sg39
F0.71678505896488787
sg34
g752
(S'\x07\xdf\n\x13\x11\t\r\r\xfe\x08'
tRp4375
sa(dp4376
S'trial_loop.thisTrialN'
p4377
I50
sg3632
g4322
sS'block_loop.thisIndex'
p4378
g3626
sg38
S'left'
p4379
sg58
g62
sS'trial_loop.thisN'
p4380
I50
sg33
g3987
sg63
g64
sS'trial_loop.thisIndex'
p4381
g59
(g98
S'2\x00\x00\x00'
tRp4382
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4383
I0
sg3641
g4329
sS'block_loop.thisRepN'
p4384
I1
sg3644
g3987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4385
I1
sg3646
g3981
sg55
g11
sS'block_loop.thisTrial'
p4386
Nsg69
Vn
sS'block_loop.thisTrialN'
p4387
I0
sg39
F1.1167479390169319
sg34
g752
(S'\x07\xdf\n\x13\x11\t\x13\nD\xe8'
tRp4388
sa(dp4389
S'trial_loop.thisTrialN'
p4390
I51
sg3632
g4128
sS'block_loop.thisIndex'
p4391
g3626
sg38
S'left'
p4392
sg58
g62
sS'trial_loop.thisN'
p4393
I51
sg33
g3783
sg63
g64
sS'trial_loop.thisIndex'
p4394
g59
(g98
S'3\x00\x00\x00'
tRp4395
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4396
I0
sg3641
g4135
sS'block_loop.thisRepN'
p4397
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4398
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4399
Nsg69
Vn
sS'block_loop.thisTrialN'
p4400
I0
sg39
F0.78362776503854548
sg34
g752
(S'\x07\xdf\n\x13\x11\t\x19\x0c\x83 '
tRp4401
sa(dp4402
S'trial_loop.thisTrialN'
p4403
I52
sg3632
S'48-twix.png'
p4404
sS'block_loop.thisIndex'
p4405
g3626
sg38
S'right'
p4406
sg58
g62
sS'trial_loop.thisN'
p4407
I52
sg33
g3810
sg63
g64
sS'trial_loop.thisIndex'
p4408
g59
(g98
S'4\x00\x00\x00'
tRp4409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4410
I0
sg3641
S'50-polo.png'
p4411
sS'block_loop.thisRepN'
p4412
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4413
I1
sg3646
g3817
sg55
g11
sS'block_loop.thisTrial'
p4414
Nsg69
Vn
sS'block_loop.thisTrialN'
p4415
I0
sg39
F0.93350825134984916
sg34
g752
(S'\x07\xdf\n\x13\x11\t\x1f\t\xc0\x18'
tRp4416
sa(dp4417
S'trial_loop.thisTrialN'
p4418
I53
sg3632
S'38-maltesers.png'
p4419
sS'block_loop.thisIndex'
p4420
g3626
sg38
S'left'
p4421
sg58
g62
sS'trial_loop.thisN'
p4422
I53
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p4423
g59
(g98
S'5\x00\x00\x00'
tRp4424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4425
I0
sg3641
S'6-sour_patch_kids.png'
p4426
sS'block_loop.thisRepN'
p4427
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4428
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4429
Nsg69
Vn
sS'block_loop.thisTrialN'
p4430
I0
sg39
F0.66652573250394198
sg34
g752
(S'\x07\xdf\n\x13\x11\t%\tZ\x88'
tRp4431
sa(dp4432
S'trial_loop.thisTrialN'
p4433
I54
sg3632
S'43-mrporky_pork_crackles_redo.png'
p4434
sS'block_loop.thisIndex'
p4435
g3626
sg38
S'right'
p4436
sg58
g62
sS'trial_loop.thisN'
p4437
I54
sg33
S'18-mms.png'
p4438
sg63
g64
sS'trial_loop.thisIndex'
p4439
g59
(g98
S'6\x00\x00\x00'
tRp4440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4441
I0
sg3641
S'18-mms.png'
p4442
sS'block_loop.thisRepN'
p4443
I1
sg3644
g4438
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4444
I1
sg3646
S'43-mrporky_pork_crackles_redo.png'
p4445
sg55
g11
sS'block_loop.thisTrial'
p4446
Nsg69
Vn
sS'block_loop.thisTrialN'
p4447
I0
sg39
F0.71678334836906288
sg34
g752
(S'\x07\xdf\n\x13\x11\t+\x04\xaf8'
tRp4448
sa(dp4449
S'trial_loop.thisTrialN'
p4450
I55
sg3632
g4046
sS'block_loop.thisIndex'
p4451
g3626
sg38
S'left'
p4452
sg58
g62
sS'trial_loop.thisN'
p4453
I55
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4454
g59
(g98
S'7\x00\x00\x00'
tRp4455
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4456
I0
sg3641
g4053
sS'block_loop.thisRepN'
p4457
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4458
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4459
Nsg69
Vn
sS'block_loop.thisTrialN'
p4460
I0
sg39
F0.66686186475635623
sg34
g752
(S'\x07\xdf\n\x13\x11\t1\x00\xfa\x00'
tRp4461
sa(dp4462
S'trial_loop.thisTrialN'
p4463
I56
sg3632
g4404
sS'block_loop.thisIndex'
p4464
g3626
sg38
S'right'
p4465
sg58
g62
sS'trial_loop.thisN'
p4466
I56
sg33
g3810
sg63
g64
sS'trial_loop.thisIndex'
p4467
g59
(g98
S'8\x00\x00\x00'
tRp4468
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4469
I0
sg3641
g4411
sS'block_loop.thisRepN'
p4470
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4471
I1
sg3646
g3817
sg55
g11
sS'block_loop.thisTrial'
p4472
Nsg69
Vn
sS'block_loop.thisTrialN'
p4473
I0
sg39
F0.66678403260812047
sg34
g752
(S'\x07\xdf\n\x13\x11\t6\x0b\x90\xf0'
tRp4474
sa(dp4475
S'trial_loop.thisTrialN'
p4476
I57
sg3632
S'26-walkers_smoky_bacon.png'
p4477
sS'block_loop.thisIndex'
p4478
g3626
sg38
S'left'
p4479
sg58
g62
sS'trial_loop.thisN'
p4480
I57
sg33
g4147
sg63
g64
sS'trial_loop.thisIndex'
p4481
g59
(g98
S'9\x00\x00\x00'
tRp4482
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4483
I0
sg3641
S'44-crunch.png'
p4484
sS'block_loop.thisRepN'
p4485
I1
sg3644
g4147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4486
I1
sg3646
g4154
sg55
g11
sS'block_loop.thisTrial'
p4487
Nsg69
Vn
sS'block_loop.thisTrialN'
p4488
I0
sg39
F0.6835783858114155
sg34
g752
(S'\x07\xdf\n\x13\x11\n\x00\x06\xe5\xa0'
tRp4489
sa(dp4490
S'trial_loop.thisTrialN'
p4491
I58
sg3632
g4322
sS'block_loop.thisIndex'
p4492
g3626
sg38
S'left'
p4493
sg58
g62
sS'trial_loop.thisN'
p4494
I58
sg33
g3987
sg63
g64
sS'trial_loop.thisIndex'
p4495
g59
(g98
S':\x00\x00\x00'
tRp4496
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4497
I0
sg3641
g4329
sS'block_loop.thisRepN'
p4498
I1
sg3644
g3987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4499
I1
sg3646
g3981
sg55
g11
sS'block_loop.thisTrial'
p4500
Nsg69
Vn
sS'block_loop.thisTrialN'
p4501
I0
sg39
F0.70011016243006452
sg34
g752
(S'\x07\xdf\n\x13\x11\n\x06\x02\xb3h'
tRp4502
sa(dp4503
S'trial_loop.thisTrialN'
p4504
I59
sg3632
g3853
sS'block_loop.thisIndex'
p4505
g3626
sg38
S'left'
p4506
sg58
g62
sS'trial_loop.thisN'
p4507
I59
sg33
g3864
sg63
g64
sS'trial_loop.thisIndex'
p4508
g59
(g98
S';\x00\x00\x00'
tRp4509
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4510
I0
sg3641
g3861
sS'block_loop.thisRepN'
p4511
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4512
I1
sg3646
g3864
sg55
g11
sS'block_loop.thisTrial'
p4513
Nsg69
Vn
sS'block_loop.thisTrialN'
p4514
I0
sg39
F0.68339022017607931
sg34
g752
(S'\x07\xdf\n\x13\x11\n\x0b\r\xc3p'
tRp4515
sa(dp4516
S'trial_loop.thisTrialN'
p4517
I60
sg3632
g3930
sS'block_loop.thisIndex'
p4518
g3626
sg38
S'left'
p4519
sg58
g62
sS'trial_loop.thisN'
p4520
I60
sg33
g3940
sg63
g64
sS'trial_loop.thisIndex'
p4521
g59
(g98
S'<\x00\x00\x00'
tRp4522
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4523
I0
sg3641
g3938
sS'block_loop.thisRepN'
p4524
I1
sg3644
g3940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4525
I1
sg3646
g3934
sg55
g11
sS'block_loop.thisTrial'
p4526
Nsg69
Vn
sS'block_loop.thisTrialN'
p4527
I0
sg39
F0.70019569226133171
sg34
g752
(S'\x07\xdf\n\x13\x11\n\x11\t\x918'
tRp4528
sa(dp4529
S'trial_loop.thisTrialN'
p4530
I61
sg3632
g4305
sS'block_loop.thisIndex'
p4531
g3626
sg38
S'right'
p4532
sg58
g62
sS'trial_loop.thisN'
p4533
I61
sg33
g4309
sg63
g64
sS'trial_loop.thisIndex'
p4534
g59
(g98
S'=\x00\x00\x00'
tRp4535
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4536
I0
sg3641
g4313
sS'block_loop.thisRepN'
p4537
I1
sg3644
g4309
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4538
I1
sg3646
g4316
sg55
g11
sS'block_loop.thisTrial'
p4539
Nsg69
Vn
sS'block_loop.thisTrialN'
p4540
I0
sg39
F0.80020173636876279
sg34
g752
(S'\x07\xdf\n\x13\x11\n\x17\x05b\xe8'
tRp4541
sa(dp4542
S'trial_loop.thisTrialN'
p4543
I62
sg3632
g3947
sS'block_loop.thisIndex'
p4544
g3626
sg38
S'right'
p4545
sg58
g62
sS'trial_loop.thisN'
p4546
I62
sg33
g3917
sg63
g64
sS'trial_loop.thisIndex'
p4547
g59
(g98
S'>\x00\x00\x00'
tRp4548
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4549
I0
sg3641
g3954
sS'block_loop.thisRepN'
p4550
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4551
I1
sg3646
g3924
sg55
g11
sS'block_loop.thisTrial'
p4552
Nsg69
Vn
sS'block_loop.thisTrialN'
p4553
I0
sg39
F1.3668505748173629
sg34
g752
(S'\x07\xdf\n\x13\x11\n\x1d\x02\xdax'
tRp4554
sa(dp4555
S'trial_loop.thisTrialN'
p4556
I63
sg3632
g3721
sS'block_loop.thisIndex'
p4557
g3626
sg38
S'right'
p4558
sg58
g62
sS'trial_loop.thisN'
p4559
I63
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p4560
g59
(g98
S'?\x00\x00\x00'
tRp4561
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4562
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4563
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4564
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4565
Nsg69
Vn
sS'block_loop.thisTrialN'
p4566
I0
sg39
F0.63362554126433679
sg34
g752
(S'\x07\xdf\n\x13\x11\n#\x08\xe5X'
tRp4567
sa(dp4568
S'trial_loop.thisTrialN'
p4569
I64
sg3632
g4434
sS'block_loop.thisIndex'
p4570
g3626
sg38
S'right'
p4571
sg58
g62
sS'trial_loop.thisN'
p4572
I64
sg33
g4445
sg63
g64
sS'trial_loop.thisIndex'
p4573
g59
(g98
S'@\x00\x00\x00'
tRp4574
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4575
I0
sg3641
g4442
sS'block_loop.thisRepN'
p4576
I1
sg3644
g4438
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4577
I1
sg3646
g4445
sg55
g11
sS'block_loop.thisTrial'
p4578
Nsg69
Vn
sS'block_loop.thisTrialN'
p4579
I0
sg39
F0.66681339785282034
sg34
g752
(S'\x07\xdf\n\x13\x11\n)\x03\xffp'
tRp4580
sa(dp4581
S'trial_loop.thisTrialN'
p4582
I65
sg3632
g3977
sS'block_loop.thisIndex'
p4583
g3626
sg38
S'right'
p4584
sg58
g62
sS'trial_loop.thisN'
p4585
I65
sg33
g3987
sg63
g64
sS'trial_loop.thisIndex'
p4586
g59
(g98
S'A\x00\x00\x00'
tRp4587
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4588
I0
sg3641
g3985
sS'block_loop.thisRepN'
p4589
I1
sg3644
g3987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4590
I1
sg3646
g3981
sg55
g11
sS'block_loop.thisTrial'
p4591
Nsg69
Vn
sS'block_loop.thisTrialN'
p4592
I0
sg39
F0.61663247373871855
sg34
g752
(S'\x07\xdf\n\x13\x11\n.\x0e\x96`'
tRp4593
sa(dp4594
S'trial_loop.thisTrialN'
p4595
I66
sg3632
g3772
sS'block_loop.thisIndex'
p4596
g3626
sg38
S'right'
p4597
sg58
g62
sS'trial_loop.thisN'
p4598
I66
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4599
g59
(g98
S'B\x00\x00\x00'
tRp4600
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4601
I0
sg3641
g3780
sS'block_loop.thisRepN'
p4602
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4603
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4604
Nsg69
Vn
sS'block_loop.thisTrialN'
p4605
I0
sg39
F0.66688609820994316
sg34
g752
(S'\x07\xdf\n\x13\x11\n4\t3x'
tRp4606
sa(dp4607
S'trial_loop.thisTrialN'
p4608
I67
sg3632
g3687
sS'block_loop.thisIndex'
p4609
g3626
sg38
S'left'
p4610
sg58
g62
sS'trial_loop.thisN'
p4611
I67
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4612
g59
(g98
S'C\x00\x00\x00'
tRp4613
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4614
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4615
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4616
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4617
Nsg69
Vn
sS'block_loop.thisTrialN'
p4618
I0
sg39
F0.66676578624173999
sg34
g752
(S'\x07\xdf\n\x13\x11\n:\x04\xc2\xc0'
tRp4619
sa(dp4620
S'trial_loop.thisTrialN'
p4621
I68
sg3632
g4305
sS'block_loop.thisIndex'
p4622
g3626
sg38
S'right'
p4623
sg58
g62
sS'trial_loop.thisN'
p4624
I68
sg33
g4309
sg63
g64
sS'trial_loop.thisIndex'
p4625
g59
(g98
S'D\x00\x00\x00'
tRp4626
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4627
I0
sg3641
g4313
sS'block_loop.thisRepN'
p4628
I1
sg3644
g4309
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4629
I1
sg3646
g4316
sg55
g11
sS'block_loop.thisTrial'
p4630
Nsg69
Vn
sS'block_loop.thisTrialN'
p4631
I0
sg39
F0.83348282047882094
sg34
g752
(S'\x07\xdf\n\x13\x11\x0b\x04\x00\x17p'
tRp4632
sa(dp4633
S'trial_loop.thisTrialN'
p4634
I69
sg3632
g4419
sS'block_loop.thisIndex'
p4635
g3626
sg38
S'left'
p4636
sg58
g62
sS'trial_loop.thisN'
p4637
I69
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4638
g59
(g98
S'E\x00\x00\x00'
tRp4639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4640
I0
sg3641
g4426
sS'block_loop.thisRepN'
p4641
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4642
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4643
Nsg69
Vn
sS'block_loop.thisTrialN'
p4644
I0
sg39
F1.683245389656804
sg34
g752
(S'\x07\xdf\n\x13\x11\x0b\t\rN@'
tRp4645
sa(dp4646
S'trial_loop.thisTrialN'
p4647
I70
sg3632
g3806
sS'block_loop.thisIndex'
p4648
g3626
sg38
S'left'
p4649
sg58
g62
sS'trial_loop.thisN'
p4650
I70
sg33
g3810
sg63
g64
sS'trial_loop.thisIndex'
p4651
g59
(g98
S'F\x00\x00\x00'
tRp4652
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4653
I0
sg3641
g3814
sS'block_loop.thisRepN'
p4654
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4655
I1
sg3646
g3817
sg55
g11
sS'block_loop.thisTrial'
p4656
Nsg69
Vn
sS'block_loop.thisTrialN'
p4657
I0
sg39
F0.81680991963730776
sg34
g752
(S'\x07\xdf\n\x13\x11\x0b\x10\t\x18 '
tRp4658
sa(dp4659
S'trial_loop.thisTrialN'
p4660
I71
sg3632
g4322
sS'block_loop.thisIndex'
p4661
g3626
sg38
S'left'
p4662
sg58
g62
sS'trial_loop.thisN'
p4663
I71
sg33
g3987
sg63
g64
sS'trial_loop.thisIndex'
p4664
g59
(g98
S'G\x00\x00\x00'
tRp4665
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4666
I0
sg3641
g4329
sS'block_loop.thisRepN'
p4667
I1
sg3644
g3987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4668
I1
sg3646
g3981
sg55
g11
sS'block_loop.thisTrial'
p4669
Nsg69
Vn
sS'block_loop.thisTrialN'
p4670
I0
sg39
F0.71686203581703012
sg34
g752
(S'\x07\xdf\n\x13\x11\x0b\x16\x06\xce0'
tRp4671
sa(dp4672
S'trial_loop.thisTrialN'
p4673
I72
sg3632
g3947
sS'block_loop.thisIndex'
p4674
g3626
sg38
S'right'
p4675
sg58
g62
sS'trial_loop.thisN'
p4676
I72
sg33
g3917
sg63
g64
sS'trial_loop.thisIndex'
p4677
g59
(g98
S'H\x00\x00\x00'
tRp4678
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4679
I0
sg3641
g3954
sS'block_loop.thisRepN'
p4680
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4681
I1
sg3646
g3924
sg55
g11
sS'block_loop.thisTrial'
p4682
Nsg69
Vn
sS'block_loop.thisTrialN'
p4683
I0
sg39
F0.90020778047619388
sg34
g752
(S'\x07\xdf\n\x13\x11\x0b\x1c\x02\xd6\x90'
tRp4684
sa(dp4685
S'trial_loop.thisTrialN'
p4686
I73
sg3632
g3977
sS'block_loop.thisIndex'
p4687
g3626
sg38
S'right'
p4688
sg58
g62
sS'trial_loop.thisN'
p4689
I73
sg33
g3987
sg63
g64
sS'trial_loop.thisIndex'
p4690
g59
(g98
S'I\x00\x00\x00'
tRp4691
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4692
I0
sg3641
g3985
sS'block_loop.thisRepN'
p4693
I1
sg3644
g3987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4694
I1
sg3646
g3981
sg55
g11
sS'block_loop.thisTrial'
p4695
Nsg69
Vn
sS'block_loop.thisTrialN'
p4696
I0
sg39
F0.76678465982331545
sg34
g752
(S'\x07\xdf\n\x13\x11\x0b"\x01\xfb\xd0'
tRp4697
sa(dp4698
S'trial_loop.thisTrialN'
p4699
I74
sg3632
g4350
sS'block_loop.thisIndex'
p4700
g3626
sg38
S'right'
p4701
sg58
g62
sS'trial_loop.thisN'
p4702
I74
sg33
g3934
sg63
g64
sS'trial_loop.thisIndex'
p4703
g59
(g98
S'J\x00\x00\x00'
tRp4704
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4705
I0
sg3641
g4357
sS'block_loop.thisRepN'
p4706
I1
sg3644
g3940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4707
I1
sg3646
g3934
sg55
g11
sS'block_loop.thisTrial'
p4708
Nsg69
Vn
sS'block_loop.thisTrialN'
p4709
I0
sg39
F0.8001495631688158
sg34
g752
(S"\x07\xdf\n\x13\x11\x0b'\x0e\x01\xf0"
tRp4710
sa(dp4711
S'trial_loop.thisTrialN'
p4712
I75
sg3632
g4143
sS'block_loop.thisIndex'
p4713
g3626
sg38
S'right'
p4714
sg58
g62
sS'trial_loop.thisN'
p4715
I75
sg33
g4147
sg63
g64
sS'trial_loop.thisIndex'
p4716
g59
(g98
S'K\x00\x00\x00'
tRp4717
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4718
I0
sg3641
g4151
sS'block_loop.thisRepN'
p4719
I1
sg3644
g4147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4720
I1
sg3646
g4154
sg55
g11
sS'block_loop.thisTrial'
p4721
Nsg69
Vn
sS'block_loop.thisTrialN'
p4722
I0
sg39
F0.60057225161290262
sg34
g752
(S'\x07\xdf\n\x13\x11\x0b-\x0by\x80'
tRp4723
sa(dp4724
S'trial_loop.thisTrialN'
p4725
I76
sg3632
g3721
sS'block_loop.thisIndex'
p4726
g3626
sg38
S'right'
p4727
sg58
g62
sS'trial_loop.thisN'
p4728
I76
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p4729
g59
(g98
S'L\x00\x00\x00'
tRp4730
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4731
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4732
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4733
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4734
Nsg69
Vn
sS'block_loop.thisTrialN'
p4735
I0
sg39
F0.59970070259805652
sg34
g752
(S'\x07\xdf\n\x13\x11\x0b3\x05\xdc\x00'
tRp4736
sa(dp4737
S'trial_loop.thisTrialN'
p4738
I77
sg3632
g4477
sS'block_loop.thisIndex'
p4739
g3626
sg38
S'left'
p4740
sg58
g62
sS'trial_loop.thisN'
p4741
I77
sg33
g4147
sg63
g64
sS'trial_loop.thisIndex'
p4742
g59
(g98
S'M\x00\x00\x00'
tRp4743
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4744
I0
sg3641
g4484
sS'block_loop.thisRepN'
p4745
I1
sg3644
g4147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4746
I1
sg3646
g4154
sg55
g11
sS'block_loop.thisTrial'
p4747
Nsg69
Vn
sS'block_loop.thisTrialN'
p4748
I0
sg39
F0.75020897789727314
sg34
g752
(S'\x07\xdf\n\x13\x11\x0b9\x00:\x98'
tRp4749
sa(dp4750
S'trial_loop.thisTrialN'
p4751
I78
sg3632
g3755
sS'block_loop.thisIndex'
p4752
g3626
sg38
S'right'
p4753
sg58
g62
sS'trial_loop.thisN'
p4754
I78
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4755
g59
(g98
S'N\x00\x00\x00'
tRp4756
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4757
I0
sg3641
g3763
sS'block_loop.thisRepN'
p4758
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4759
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4760
Nsg69
Vn
sS'block_loop.thisTrialN'
p4761
I0
sg39
F1.2502246583680972
sg34
g752
(S'\x07\xdf\n\x13\x11\x0c\x02\x0c@\xb8'
tRp4762
sa(dp4763
S'trial_loop.thisTrialN'
p4764
I79
sg3632
S'35-raisins.png'
p4765
sS'block_loop.thisIndex'
p4766
g3626
sg38
S'right'
p4767
sg58
g62
sS'trial_loop.thisN'
p4768
I79
sg33
g3857
sg63
g64
sS'trial_loop.thisIndex'
p4769
g59
(g98
S'O\x00\x00\x00'
tRp4770
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4771
I0
sg3641
S'49-yorkie.png'
p4772
sS'block_loop.thisRepN'
p4773
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4774
I1
sg3646
g3864
sg55
g11
sS'block_loop.thisTrial'
p4775
Nsg69
Vn
sS'block_loop.thisTrialN'
p4776
I0
sg39
F0.86685570660847588
sg34
g752
(S'\x07\xdf\n\x13\x11\x0c\t\x01_\x90'
tRp4777
sa(dp4778
S'trial_loop.thisTrialN'
p4779
I80
sg3632
g3977
sS'block_loop.thisIndex'
p4780
g3626
sg38
S'right'
p4781
sg58
g62
sS'trial_loop.thisN'
p4782
I80
sg33
g3987
sg63
g64
sS'trial_loop.thisIndex'
p4783
g59
(g98
S'P\x00\x00\x00'
tRp4784
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4785
I0
sg3641
g3985
sS'block_loop.thisRepN'
p4786
I1
sg3644
g3987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4787
I1
sg3646
g3981
sg55
g11
sS'block_loop.thisTrial'
p4788
Nsg69
Vn
sS'block_loop.thisTrialN'
p4789
I0
sg39
F0.63354656871524639
sg34
g752
(S'\x07\xdf\n\x13\x11\x0c\x0e\x0f\x0b\x90'
tRp4790
sa(dp4791
S'trial_loop.thisTrialN'
p4792
I81
sg3632
S'42-mrkipling_lemon_slices.png'
p4793
sS'block_loop.thisIndex'
p4794
g3626
sg38
S'right'
p4795
sg58
g62
sS'trial_loop.thisN'
p4796
I81
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p4797
g59
(g98
S'Q\x00\x00\x00'
tRp4798
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4799
I0
sg3641
S'16-skips_prawn.png'
p4800
sS'block_loop.thisRepN'
p4801
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4802
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p4803
Nsg69
Vn
sS'block_loop.thisTrialN'
p4804
I0
sg39
F1.1833759652072331
sg34
g752
(S'\x07\xdf\n\x13\x11\x0c\x14\t\xe7('
tRp4805
sa(dp4806
S'trial_loop.thisTrialN'
p4807
I82
sg3632
g4404
sS'block_loop.thisIndex'
p4808
g3626
sg38
S'right'
p4809
sg58
g62
sS'trial_loop.thisN'
p4810
I82
sg33
g3810
sg63
g64
sS'trial_loop.thisIndex'
p4811
g59
(g98
S'R\x00\x00\x00'
tRp4812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4813
I0
sg3641
g4411
sS'block_loop.thisRepN'
p4814
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4815
I1
sg3646
g3817
sg55
g11
sS'block_loop.thisTrial'
p4816
Nsg69
Vn
sS'block_loop.thisTrialN'
p4817
I0
sg39
F0.98354234924408956
sg34
g752
(S'\x07\xdf\n\x13\x11\x0c\x1a\rV\x10'
tRp4818
sa(dp4819
S'trial_loop.thisTrialN'
p4820
I83
sg3632
g3853
sS'block_loop.thisIndex'
p4821
g3626
sg38
S'left'
p4822
sg58
g62
sS'trial_loop.thisN'
p4823
I83
sg33
g3857
sg63
g64
sS'trial_loop.thisIndex'
p4824
g59
(g98
S'S\x00\x00\x00'
tRp4825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4826
I0
sg3641
g3861
sS'block_loop.thisRepN'
p4827
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4828
I1
sg3646
g3864
sg55
g11
sS'block_loop.thisTrial'
p4829
Nsg69
Vn
sS'block_loop.thisTrialN'
p4830
I0
sg39
F0.61677160227191052
sg34
g752
(S'\x07\xdf\n\x13\x11\x0c \r\xa8\x18'
tRp4831
sa(dp4832
S'trial_loop.thisTrialN'
p4833
I84
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p4834
sS'block_loop.thisIndex'
p4835
g3626
sg38
S'left'
p4836
sg58
g62
sS'trial_loop.thisN'
p4837
I84
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4838
g59
(g98
S'T\x00\x00\x00'
tRp4839
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4840
I0
sg3641
S'36-fig_rolls.png'
p4841
sS'block_loop.thisRepN'
p4842
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4843
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4844
Nsg69
Vn
sS'block_loop.thisTrialN'
p4845
I0
sg39
F0.83344319165553316
sg34
g752
(S'\x07\xdf\n\x13\x11\x0c&\x08I\x18'
tRp4846
sa(dp4847
S'trial_loop.thisTrialN'
p4848
I85
sg3632
g3896
sS'block_loop.thisIndex'
p4849
g3626
sg38
S'right'
p4850
sg58
g62
sS'trial_loop.thisN'
p4851
I85
sg33
g3900
sg63
g64
sS'trial_loop.thisIndex'
p4852
g59
(g98
S'U\x00\x00\x00'
tRp4853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4854
I0
sg3641
g3904
sS'block_loop.thisRepN'
p4855
I1
sg3644
g3900
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4856
I1
sg3646
g3907
sg55
g11
sS'block_loop.thisTrial'
p4857
Nsg69
Vn
sS'block_loop.thisTrialN'
p4858
I0
sg39
F0.73344085384087521
sg34
g752
(S'\x07\xdf\n\x13\x11\x0c,\x069\xc0'
tRp4859
sa(dp4860
S'trial_loop.thisTrialN'
p4861
I86
sg3632
g3721
sS'block_loop.thisIndex'
p4862
g3626
sg38
S'right'
p4863
sg58
g62
sS'trial_loop.thisN'
p4864
I86
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4865
g59
(g98
S'V\x00\x00\x00'
tRp4866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4867
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4868
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4869
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4870
Nsg69
Vn
sS'block_loop.thisTrialN'
p4871
I0
sg39
F0.74994355030867155
sg34
g752
(S'\x07\xdf\n\x13\x11\x0c2\x02\x84\x88'
tRp4872
sa(dp4873
S'trial_loop.thisTrialN'
p4874
I87
sg3632
S'29-beans.png'
p4875
sS'block_loop.thisIndex'
p4876
g3626
sg38
S'left'
p4877
sg58
g62
sS'trial_loop.thisN'
p4878
I87
sg33
g4309
sg63
g64
sS'trial_loop.thisIndex'
p4879
g59
(g98
S'W\x00\x00\x00'
tRp4880
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4881
I0
sg3641
S'46-pistachios.png'
p4882
sS'block_loop.thisRepN'
p4883
I1
sg3644
g4309
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4884
I1
sg3646
g4316
sg55
g11
sS'block_loop.thisTrial'
p4885
Nsg69
Vn
sS'block_loop.thisTrialN'
p4886
I0
sg39
F0.80021028935152572
sg34
g752
(S'\x07\xdf\n\x13\x11\x0c7\x0e\x86\xc0'
tRp4887
sa(dp4888
S'trial_loop.thisTrialN'
p4889
I88
sg3632
g4793
sS'block_loop.thisIndex'
p4890
g3626
sg38
S'right'
p4891
sg58
g62
sS'trial_loop.thisN'
p4892
I88
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p4893
g59
(g98
S'X\x00\x00\x00'
tRp4894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4895
I0
sg3641
g4800
sS'block_loop.thisRepN'
p4896
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4897
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p4898
Nsg69
Vn
sS'block_loop.thisTrialN'
p4899
I0
sg39
F0.86666098368368694
sg34
g752
(S'\x07\xdf\n\x13\x11\r\x01\x0c\x028'
tRp4900
sa(dp4901
S'trial_loop.thisTrialN'
p4902
I89
sg3632
g3738
sS'block_loop.thisIndex'
p4903
g3626
sg38
S'right'
p4904
sg58
g62
sS'trial_loop.thisN'
p4905
I89
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p4906
g59
(g98
S'Y\x00\x00\x00'
tRp4907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4908
I0
sg3641
g3746
sS'block_loop.thisRepN'
p4909
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4910
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p4911
Nsg69
Vn
sS'block_loop.thisTrialN'
p4912
I0
sg39
F0.71690708152891602
sg34
g752
(S'\x07\xdf\n\x13\x11\r\x07\nk\xf8'
tRp4913
sa(dp4914
S'trial_loop.thisTrialN'
p4915
I90
sg3632
g3930
sS'block_loop.thisIndex'
p4916
g3626
sg38
S'left'
p4917
sg58
g62
sS'trial_loop.thisN'
p4918
I90
sg33
g3940
sg63
g64
sS'trial_loop.thisIndex'
p4919
g59
(g98
S'Z\x00\x00\x00'
tRp4920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4921
I0
sg3641
g3938
sS'block_loop.thisRepN'
p4922
I1
sg3644
g3940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4923
I1
sg3646
g3934
sg55
g11
sS'block_loop.thisTrial'
p4924
Nsg69
Vn
sS'block_loop.thisTrialN'
p4925
I0
sg39
F2.1002098902135913
sg34
g752
(S'\x07\xdf\n\x13\x11\r\r\x06\xb6\xc0'
tRp4926
sa(dp4927
S'trial_loop.thisTrialN'
p4928
I91
sg3632
g4765
sS'block_loop.thisIndex'
p4929
g3626
sg38
S'right'
p4930
sg58
g62
sS'trial_loop.thisN'
p4931
I91
sg33
g3857
sg63
g64
sS'trial_loop.thisIndex'
p4932
g59
(g98
S'[\x00\x00\x00'
tRp4933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4934
I0
sg3641
g4772
sS'block_loop.thisRepN'
p4935
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4936
I1
sg3646
g3864
sg55
g11
sS'block_loop.thisTrial'
p4937
Nsg69
Vn
sS'block_loop.thisTrialN'
p4938
I0
sg39
F1.0334441609920759
sg34
g752
(S'\x07\xdf\n\x13\x11\r\x14\x08\xae\xa8'
tRp4939
sa(dp4940
S'trial_loop.thisTrialN'
p4941
I92
sg3632
S'8-liquorice_catherine_wheels.png'
p4942
sS'block_loop.thisIndex'
p4943
g3626
sg38
S'right'
p4944
sg58
g62
sS'trial_loop.thisN'
p4945
I92
sg33
S'17-jacobs_mini_cheddars_redo.png'
p4946
sg63
g64
sS'trial_loop.thisIndex'
p4947
g59
(g98
S'\\\x00\x00\x00'
tRp4948
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4949
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p4950
sS'block_loop.thisRepN'
p4951
I1
sg3644
g4946
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4952
I1
sg3646
S'8-liquorice_catherine_wheels.png'
p4953
sg55
g11
sS'block_loop.thisTrial'
p4954
Nsg69
Vn
sS'block_loop.thisTrialN'
p4955
I0
sg39
F0.81688461569137871
sg34
g752
(S'\x07\xdf\n\x13\x11\r\x1a\t\xb8H'
tRp4956
sa(dp4957
S'trial_loop.thisTrialN'
p4958
I93
sg3632
g3789
sS'block_loop.thisIndex'
p4959
g3626
sg38
S'left'
p4960
sg58
g62
sS'trial_loop.thisN'
p4961
I93
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p4962
g59
(g98
S']\x00\x00\x00'
tRp4963
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4964
I0
sg3641
g3797
sS'block_loop.thisRepN'
p4965
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4966
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p4967
Nsg69
Vn
sS'block_loop.thisTrialN'
p4968
I0
sg39
F0.86673026284915977
sg34
g752
(S'\x07\xdf\n\x13\x11\r \x07nX'
tRp4969
sa(dp4970
S'trial_loop.thisTrialN'
p4971
I94
sg3632
g3823
sS'block_loop.thisIndex'
p4972
g3626
sg38
S'left'
p4973
sg58
g62
sS'trial_loop.thisN'
p4974
I94
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p4975
g59
(g98
S'^\x00\x00\x00'
tRp4976
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4977
I0
sg3641
g3830
sS'block_loop.thisRepN'
p4978
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4979
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p4980
Nsg69
Vn
sS'block_loop.thisTrialN'
p4981
I0
sg39
F0.81688518589362502
sg34
g752
(S'\x07\xdf\n\x13\x11\r&\x05\xdc\x00'
tRp4982
sa(dp4983
S'trial_loop.thisTrialN'
p4984
I95
sg3632
g3947
sS'block_loop.thisIndex'
p4985
g3626
sg38
S'right'
p4986
sg58
g62
sS'trial_loop.thisN'
p4987
I95
sg33
g3917
sg63
g64
sS'trial_loop.thisIndex'
p4988
g59
(g98
S'_\x00\x00\x00'
tRp4989
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4990
I0
sg3641
g3954
sS'block_loop.thisRepN'
p4991
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4992
I1
sg3646
g3924
sg55
g11
sS'block_loop.thisTrial'
p4993
Nsg69
Vn
sS'block_loop.thisTrialN'
p4994
I0
sg39
F0.56685525044667884
sg34
g752
(S'\x07\xdf\n\x13\x11\r,\x03\x92\x10'
tRp4995
sa(dp4996
S'trial_loop.thisTrialN'
p4997
I96
sg3632
g4434
sS'block_loop.thisIndex'
p4998
g3626
sg38
S'right'
p4999
sg58
g62
sS'trial_loop.thisN'
p5000
I96
sg33
g4438
sg63
g64
sS'trial_loop.thisIndex'
p5001
g59
(g98
S'`\x00\x00\x00'
tRp5002
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5003
I0
sg3641
g4442
sS'block_loop.thisRepN'
p5004
I1
sg3644
g4438
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5005
I1
sg3646
g4445
sg55
g11
sS'block_loop.thisTrial'
p5006
Nsg69
Vn
sS'block_loop.thisTrialN'
p5007
I0
sg39
F0.71689596265059663
sg34
g752
(S'\x07\xdf\n\x13\x11\r1\x0c\xbd\xb8'
tRp5008
sa(dp5009
S'trial_loop.thisTrialN'
p5010
I97
sg3632
g3806
sS'block_loop.thisIndex'
p5011
g3626
sg38
S'left'
p5012
sg58
g62
sS'trial_loop.thisN'
p5013
I97
sg33
g3810
sg63
g64
sS'trial_loop.thisIndex'
p5014
g59
(g98
S'a\x00\x00\x00'
tRp5015
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5016
I0
sg3641
g3814
sS'block_loop.thisRepN'
p5017
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5018
I1
sg3646
g3817
sg55
g11
sS'block_loop.thisTrial'
p5019
Nsg69
Vn
sS'block_loop.thisTrialN'
p5020
I0
sg39
F1.0501036621571984
sg34
g752
(S'\x07\xdf\n\x13\x11\r7\t\x04\x98'
tRp5021
sa(dp5022
S'trial_loop.thisTrialN'
p5023
I98
sg3632
g3653
sS'block_loop.thisIndex'
p5024
g3626
sg38
S'left'
p5025
sg58
g62
sS'trial_loop.thisN'
p5026
I98
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5027
g59
(g98
S'b\x00\x00\x00'
tRp5028
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5029
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5030
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5031
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5032
Nsg69
Vn
sS'block_loop.thisTrialN'
p5033
I0
sg39
F0.68391679885462509
sg34
g752
(S'\x07\xdf\n\x13\x11\x0e\x01\nL\xb8'
tRp5034
sa(dp5035
S'trial_loop.thisTrialN'
p5036
I99
sg3632
g3838
sS'block_loop.thisIndex'
p5037
g3626
sg38
S'right'
p5038
sg58
g62
sS'trial_loop.thisN'
p5039
I99
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p5040
g59
(g98
S'c\x00\x00\x00'
tRp5041
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5042
I0
sg3641
g3845
sS'block_loop.thisRepN'
p5043
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5044
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5045
Nsg69
Vn
sS'block_loop.thisTrialN'
p5046
I0
sg39
F0.70020253464826965
sg34
g752
(S'\x07\xdf\n\x13\x11\x0e\x07\x05\xdf\xe8'
tRp5047
sa(dp5048
S'trial_loop.thisTrialN'
p5049
I100
sg3632
g4419
sS'block_loop.thisIndex'
p5050
g3626
sg38
S'left'
p5051
sg58
g62
sS'trial_loop.thisN'
p5052
I100
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5053
g59
(g98
S'd\x00\x00\x00'
tRp5054
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5055
I0
sg3641
g4426
sS'block_loop.thisRepN'
p5056
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5057
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5058
Nsg69
Vn
sS'block_loop.thisTrialN'
p5059
I0
sg39
F0.68327589529508259
sg34
g752
(S'\x07\xdf\n\x13\x11\x0e\r\x01\xe8H'
tRp5060
sa(dp5061
S'trial_loop.thisTrialN'
p5062
I101
sg3632
g3704
sS'block_loop.thisIndex'
p5063
g3626
sg38
S'right'
p5064
sg58
g62
sS'trial_loop.thisN'
p5065
I101
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p5066
g59
(g98
S'e\x00\x00\x00'
tRp5067
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5068
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5069
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5070
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p5071
Nsg69
Vn
sS'block_loop.thisTrialN'
p5072
I0
sg39
F1.4834331561542058
sg34
g752
(S'\x07\xdf\n\x13\x11\x0e\x12\x0c\xbd\xb8'
tRp5073
sa(dp5074
S'trial_loop.thisTrialN'
p5075
I102
sg3632
S'1-treacle_cookies.png'
p5076
sS'block_loop.thisIndex'
p5077
g3626
sg38
S'left'
p5078
sg58
g62
sS'trial_loop.thisN'
p5079
I102
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p5080
g59
(g98
S'f\x00\x00\x00'
tRp5081
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5082
I0
sg3641
S'21-nakd_banana_crunch.png'
p5083
sS'block_loop.thisRepN'
p5084
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5085
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p5086
Nsg69
Vn
sS'block_loop.thisTrialN'
p5087
I0
sg39
F0.78342477423211676
sg34
g752
(S'\x07\xdf\n\x13\x11\x0e\x19\x05n\xa0'
tRp5088
sa(dp5089
S'trial_loop.thisTrialN'
p5090
I103
sg3632
g4350
sS'block_loop.thisIndex'
p5091
g3626
sg38
S'right'
p5092
sg58
g62
sS'trial_loop.thisN'
p5093
I103
sg33
g3940
sg63
g64
sS'trial_loop.thisIndex'
p5094
g59
(g98
S'g\x00\x00\x00'
tRp5095
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5096
I0
sg3641
g4357
sS'block_loop.thisRepN'
p5097
I1
sg3644
g3940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5098
I1
sg3646
g3934
sg55
g11
sS'block_loop.thisTrial'
p5099
Nsg69
Vn
sS'block_loop.thisTrialN'
p5100
I0
sg39
F0.88342996303981636
sg34
g752
(S'\x07\xdf\n\x13\x11\x0e\x1f\x02\xab\x98'
tRp5101
sa(dp5102
S'trial_loop.thisTrialN'
p5103
I104
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p5104
sS'block_loop.thisIndex'
p5105
g3626
sg38
S'left'
p5106
sg58
g62
sS'trial_loop.thisN'
p5107
I104
sg33
g4946
sg63
g64
sS'trial_loop.thisIndex'
p5108
g59
(g98
S'h\x00\x00\x00'
tRp5109
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5110
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p5111
sS'block_loop.thisRepN'
p5112
I1
sg3644
g4946
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5113
I1
sg3646
g4953
sg55
g11
sS'block_loop.thisTrial'
p5114
Nsg69
Vn
sS'block_loop.thisTrialN'
p5115
I0
sg39
F0.71727314922100049
sg34
g752
(S'\x07\xdf\n\x13\x11\x0e%\x01S\xd8'
tRp5116
sa(dp5117
S'trial_loop.thisTrialN'
p5118
I105
sg3632
g4477
sS'block_loop.thisIndex'
p5119
g3626
sg38
S'left'
p5120
sg58
g62
sS'trial_loop.thisN'
p5121
I105
sg33
g4147
sg63
g64
sS'trial_loop.thisIndex'
p5122
g59
(g98
S'i\x00\x00\x00'
tRp5123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5124
I0
sg3641
g4484
sS'block_loop.thisRepN'
p5125
I1
sg3644
g4147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5126
I1
sg3646
g4154
sg55
g11
sS'block_loop.thisTrial'
p5127
Nsg69
Vn
sS'block_loop.thisTrialN'
p5128
I0
sg39
F0.81679195837205043
sg34
g752
(S'\x07\xdf\n\x13\x11\x0e*\x0c\xe0\xe0'
tRp5129
sa(dp5130
S'trial_loop.thisTrialN'
p5131
I106
sg3632
g3653
sS'block_loop.thisIndex'
p5132
g3626
sg38
S'left'
p5133
sg58
g62
sS'trial_loop.thisN'
p5134
I106
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5135
g59
(g98
S'j\x00\x00\x00'
tRp5136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5137
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5138
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5139
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5140
Nsg69
Vn
sS'block_loop.thisTrialN'
p5141
I0
sg39
F0.83358716687507695
sg34
g752
(S'\x07\xdf\n\x13\x11\x0e0\n\x96\xf0'
tRp5142
sa(dp5143
S'trial_loop.thisTrialN'
p5144
I107
sg3632
g3823
sS'block_loop.thisIndex'
p5145
g3626
sg38
S'left'
p5146
sg58
g62
sS'trial_loop.thisN'
p5147
I107
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p5148
g59
(g98
S'k\x00\x00\x00'
tRp5149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5150
I0
sg3641
g3830
sS'block_loop.thisRepN'
p5151
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5152
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p5153
Nsg69
Vn
sS'block_loop.thisTrialN'
p5154
I0
sg39
F0.98343971344365855
sg34
g752
(S'\x07\xdf\n\x13\x11\x0e6\x08\x87\x98'
tRp5155
sa(dp5156
S'trial_loop.thisTrialN'
p5157
I108
sg3632
g5076
sS'block_loop.thisIndex'
p5158
g3626
sg38
S'left'
p5159
sg58
g62
sS'trial_loop.thisN'
p5160
I108
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p5161
g59
(g98
S'l\x00\x00\x00'
tRp5162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5163
I0
sg3641
g5083
sS'block_loop.thisRepN'
p5164
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5165
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p5166
Nsg69
Vn
sS'block_loop.thisTrialN'
p5167
I0
sg39
F1.0834326429758221
sg34
g752
(S'\x07\xdf\n\x13\x11\x0f\x00\x08\x9f\x08'
tRp5168
sa(dp5169
S'trial_loop.thisTrialN'
p5170
I109
sg3632
g3687
sS'block_loop.thisIndex'
p5171
g3626
sg38
S'left'
p5172
sg58
g62
sS'trial_loop.thisN'
p5173
I109
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5174
g59
(g98
S'm\x00\x00\x00'
tRp5175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5176
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5177
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5178
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5179
Nsg69
Vn
sS'block_loop.thisTrialN'
p5180
I0
sg39
F0.68343954237934668
sg34
g752
(S'\x07\xdf\n\x13\x11\x0f\x06\n`@'
tRp5181
sa(dp5182
S'trial_loop.thisTrialN'
p5183
I110
sg3632
g5076
sS'block_loop.thisIndex'
p5184
g3626
sg38
S'left'
p5185
sg58
g62
sS'trial_loop.thisN'
p5186
I110
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p5187
g59
(g98
S'n\x00\x00\x00'
tRp5188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5189
I0
sg3641
g5083
sS'block_loop.thisRepN'
p5190
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5191
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p5192
Nsg69
Vn
sS'block_loop.thisTrialN'
p5193
I0
sg39
F0.63330138318997342
sg34
g752
(S'\x07\xdf\n\x13\x11\x0f\x0c\x061\xf0'
tRp5194
sa(dp5195
S'trial_loop.thisTrialN'
p5196
I111
sg3632
g4350
sS'block_loop.thisIndex'
p5197
g3626
sg38
S'right'
p5198
sg58
g62
sS'trial_loop.thisN'
p5199
I111
sg33
g3934
sg63
g64
sS'trial_loop.thisIndex'
p5200
g59
(g98
S'o\x00\x00\x00'
tRp5201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5202
I0
sg3641
g4357
sS'block_loop.thisRepN'
p5203
I1
sg3644
g3940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5204
I1
sg3646
g3934
sg55
g11
sS'block_loop.thisTrial'
p5205
Nsg69
Vn
sS'block_loop.thisTrialN'
p5206
I0
sg39
F0.70008963526561274
sg34
g752
(S'\x07\xdf\n\x13\x11\x0f\x12\x01\t\xa0'
tRp5207
sa(dp5208
S'trial_loop.thisTrialN'
p5209
I112
sg3632
g4477
sS'block_loop.thisIndex'
p5210
g3626
sg38
S'left'
p5211
sg58
g62
sS'trial_loop.thisN'
p5212
I112
sg33
g4147
sg63
g64
sS'trial_loop.thisIndex'
p5213
g59
(g98
S'p\x00\x00\x00'
tRp5214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5215
I0
sg3641
g4484
sS'block_loop.thisRepN'
p5216
I1
sg3644
g4147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5217
I1
sg3646
g4154
sg55
g11
sS'block_loop.thisTrial'
p5218
Nsg69
Vn
sS'block_loop.thisTrialN'
p5219
I0
sg39
F0.73343600714724744
sg34
g752
(S'\x07\xdf\n\x13\x11\x0f\x17\x0cX('
tRp5220
sa(dp5221
S'trial_loop.thisTrialN'
p5222
I113
sg3632
g5076
sS'block_loop.thisIndex'
p5223
g3626
sg38
S'left'
p5224
sg58
g62
sS'trial_loop.thisN'
p5225
I113
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p5226
g59
(g98
S'q\x00\x00\x00'
tRp5227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5228
I0
sg3641
g5083
sS'block_loop.thisRepN'
p5229
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5230
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p5231
Nsg69
Vn
sS'block_loop.thisTrialN'
p5232
I0
sg39
F0.66688239191717003
sg34
g752
(S'\x07\xdf\n\x13\x11\x0f\x1d\x08\xa2\xf0'
tRp5233
sa(dp5234
S'trial_loop.thisTrialN'
p5235
I114
sg3632
S'18-mms.png'
p5236
sS'block_loop.thisIndex'
p5237
g3626
sg38
S'left'
p5238
sg58
g62
sS'trial_loop.thisN'
p5239
I114
sg33
g4438
sg63
g64
sS'trial_loop.thisIndex'
p5240
g59
(g98
S'r\x00\x00\x00'
tRp5241
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5242
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p5243
sS'block_loop.thisRepN'
p5244
I1
sg3644
g4438
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5245
I1
sg3646
g4445
sg55
g11
sS'block_loop.thisTrial'
p5246
Nsg69
Vn
sS'block_loop.thisTrialN'
p5247
I0
sg39
F1.1334419372142293
sg34
g752
(S'\x07\xdf\n\x13\x11\x0f#\x0428'
tRp5248
sa(dp5249
S'trial_loop.thisTrialN'
p5250
I115
sg3632
g4046
sS'block_loop.thisIndex'
p5251
g3626
sg38
S'left'
p5252
sg58
g62
sS'trial_loop.thisN'
p5253
I115
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5254
g59
(g98
S's\x00\x00\x00'
tRp5255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5256
I0
sg3641
g4053
sS'block_loop.thisRepN'
p5257
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5258
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5259
Nsg69
Vn
sS'block_loop.thisTrialN'
p5260
I0
sg39
F0.66678431770560564
sg34
g752
(S'\x07\xdf\n\x13\x11\x0f)\x06\xab\x08'
tRp5261
sa(dp5262
S'trial_loop.thisTrialN'
p5263
I116
sg3632
g4434
sS'block_loop.thisIndex'
p5264
g3626
sg38
S'right'
p5265
sg58
g62
sS'trial_loop.thisN'
p5266
I116
sg33
g4438
sg63
g64
sS'trial_loop.thisIndex'
p5267
g59
(g98
S't\x00\x00\x00'
tRp5268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5269
I0
sg3641
g4442
sS'block_loop.thisRepN'
p5270
I1
sg3644
g4438
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5271
I1
sg3646
g4445
sg55
g11
sS'block_loop.thisTrial'
p5272
Nsg69
Vn
sS'block_loop.thisTrialN'
p5273
I0
sg39
F0.60061957811922184
sg34
g752
(S'\x07\xdf\n\x13\x11\x0f/\x01\xff\xb8'
tRp5274
sa(dp5275
S'trial_loop.thisTrialN'
p5276
I117
sg3632
g3977
sS'block_loop.thisIndex'
p5277
g3626
sg38
S'right'
p5278
sg58
g62
sS'trial_loop.thisN'
p5279
I117
sg33
g3981
sg63
g64
sS'trial_loop.thisIndex'
p5280
g59
(g98
S'u\x00\x00\x00'
tRp5281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5282
I0
sg3641
g3985
sS'block_loop.thisRepN'
p5283
I1
sg3644
g3987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5284
I1
sg3646
g3981
sg55
g11
sS'block_loop.thisTrial'
p5285
Nsg69
Vn
sS'block_loop.thisTrialN'
p5286
I0
sg39
F0.8502090349138598
sg34
g752
(S'\x07\xdf\n\x13\x11\x0f4\x0b\xa4x'
tRp5287
sa(dp5288
S'trial_loop.thisTrialN'
p5289
I118
sg3632
g4128
sS'block_loop.thisIndex'
p5290
g3626
sg38
S'left'
p5291
sg58
g62
sS'trial_loop.thisN'
p5292
I118
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5293
g59
(g98
S'v\x00\x00\x00'
tRp5294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5295
I0
sg3641
g4135
sS'block_loop.thisRepN'
p5296
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5297
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p5298
Nsg69
Vn
sS'block_loop.thisTrialN'
p5299
I0
sg39
F1.0502040171668341
sg34
g752
(S'\x07\xdf\n\x13\x11\x0f:\n\x12 '
tRp5300
sa(dp5301
S'trial_loop.thisTrialN'
p5302
I119
sg3632
g3738
sS'block_loop.thisIndex'
p5303
g3626
sg38
S'right'
p5304
sg58
g62
sS'trial_loop.thisN'
p5305
I119
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5306
g59
(g98
S'w\x00\x00\x00'
tRp5307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5308
I0
sg3641
g3746
sS'block_loop.thisRepN'
p5309
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5310
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p5311
Nsg69
Vn
sS'block_loop.thisTrialN'
p5312
I0
sg39
F0.75013371164095588
sg34
g752
(S'\x07\xdf\n\x13\x11\x10\x04\x0bZ@'
tRp5313
sa(dp5314
S'trial_loop.thisTrialN'
p5315
I120
sg3632
g4834
sS'block_loop.thisIndex'
p5316
g3626
sg38
S'left'
p5317
sg58
g62
sS'trial_loop.thisN'
p5318
I120
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5319
g59
(g98
S'x\x00\x00\x00'
tRp5320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5321
I0
sg3641
g4841
sS'block_loop.thisRepN'
p5322
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5323
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5324
Nsg69
Vn
sS'block_loop.thisTrialN'
p5325
I0
sg39
F0.75009550831236993
sg34
g752
(S'\x07\xdf\n\x13\x11\x10\n\x07\xdf\xa0'
tRp5326
sa(dp5327
S'trial_loop.thisTrialN'
p5328
I121
sg3632
g5076
sS'block_loop.thisIndex'
p5329
g3626
sg38
S'left'
p5330
sg58
g62
sS'trial_loop.thisN'
p5331
I121
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p5332
g59
(g98
S'y\x00\x00\x00'
tRp5333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5334
I0
sg3641
g5083
sS'block_loop.thisRepN'
p5335
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5336
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p5337
Nsg69
Vn
sS'block_loop.thisTrialN'
p5338
I0
sg39
F0.78353653321391903
sg34
g752
(S'\x07\xdf\n\x13\x11\x10\x10\x04\x9f\x98'
tRp5339
sa(dp5340
S'trial_loop.thisTrialN'
p5341
I122
sg3632
g3913
sS'block_loop.thisIndex'
p5342
g3626
sg38
S'left'
p5343
sg58
g62
sS'trial_loop.thisN'
p5344
I122
sg33
g3917
sg63
g64
sS'trial_loop.thisIndex'
p5345
g59
(g98
S'z\x00\x00\x00'
tRp5346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5347
I0
sg3641
g3921
sS'block_loop.thisRepN'
p5348
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5349
I1
sg3646
g3924
sg55
g11
sS'block_loop.thisTrial'
p5350
Nsg69
Vn
sS'block_loop.thisTrialN'
p5351
I0
sg39
F0.70040467015860486
sg34
g752
(S'\x07\xdf\n\x13\x11\x10\x16\x01\xdc\x90'
tRp5352
sa(dp5353
S'trial_loop.thisTrialN'
p5354
I123
sg3632
g4793
sS'block_loop.thisIndex'
p5355
g3626
sg38
S'right'
p5356
sg58
g62
sS'trial_loop.thisN'
p5357
I123
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p5358
g59
(g98
S'{\x00\x00\x00'
tRp5359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5360
I0
sg3641
g4800
sS'block_loop.thisRepN'
p5361
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5362
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p5363
Nsg69
Vn
sS'block_loop.thisTrialN'
p5364
I0
sg39
F0.90000108337699203
sg34
g752
(S'\x07\xdf\n\x13\x11\x10\x1b\x0c\xec\x98'
tRp5365
sa(dp5366
S'trial_loop.thisTrialN'
p5367
I124
sg3632
g4875
sS'block_loop.thisIndex'
p5368
g3626
sg38
S'left'
p5369
sg58
g62
sS'trial_loop.thisN'
p5370
I124
sg33
g4309
sg63
g64
sS'trial_loop.thisIndex'
p5371
g59
(g98
S'|\x00\x00\x00'
tRp5372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5373
I0
sg3641
g4882
sS'block_loop.thisRepN'
p5374
I1
sg3644
g4309
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5375
I1
sg3646
g4316
sg55
g11
sS'block_loop.thisTrial'
p5376
Nsg69
Vn
sS'block_loop.thisTrialN'
p5377
I0
sg39
F1.1001622786061489
sg34
g752
(S'\x07\xdf\n\x13\x11\x10!\x0c\x11\xd8'
tRp5378
sa(dp5379
S'trial_loop.thisTrialN'
p5380
I125
sg3632
g4834
sS'block_loop.thisIndex'
p5381
g3626
sg38
S'left'
p5382
sg58
g62
sS'trial_loop.thisN'
p5383
I125
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5384
g59
(g98
S'}\x00\x00\x00'
tRp5385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5386
I0
sg3641
g4841
sS'block_loop.thisRepN'
p5387
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5388
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5389
Nsg69
Vn
sS'block_loop.thisTrialN'
p5390
I0
sg39
F0.95010702633589972
sg34
g752
(S"\x07\xdf\n\x13\x11\x10'\x0e\x11\x90"
tRp5391
sa(dp5392
S'trial_loop.thisTrialN'
p5393
I126
sg3632
g4128
sS'block_loop.thisIndex'
p5394
g3626
sg38
S'left'
p5395
sg58
g62
sS'trial_loop.thisN'
p5396
I126
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5397
g59
(g98
S'~\x00\x00\x00'
tRp5398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5399
I0
sg3641
g4135
sS'block_loop.thisRepN'
p5400
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5401
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p5402
Nsg69
Vn
sS'block_loop.thisTrialN'
p5403
I0
sg39
F1.1168742380723415
sg34
g752
(S'\x07\xdf\n\x13\x11\x10-\r\xaf\xe8'
tRp5404
sa(dp5405
S'trial_loop.thisTrialN'
p5406
I127
sg3632
g3823
sS'block_loop.thisIndex'
p5407
g3626
sg38
S'left'
p5408
sg58
g62
sS'trial_loop.thisN'
p5409
I127
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p5410
g59
(g98
S'\x7f\x00\x00\x00'
tRp5411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5412
I0
sg3641
g3830
sS'block_loop.thisRepN'
p5413
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5414
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p5415
Nsg69
Vn
sS'block_loop.thisTrialN'
p5416
I0
sg39
F1.500587875063502
sg34
g752
(S'\x07\xdf\n\x13\x11\x104\x00\xe6x'
tRp5417
sa(dp5418
S'trial_loop.thisTrialN'
p5419
I128
sg3632
g4793
sS'block_loop.thisIndex'
p5420
g3626
sg38
S'right'
p5421
sg58
g62
sS'trial_loop.thisN'
p5422
I128
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p5423
g59
(g98
S'\x80\x00\x00\x00'
tRp5424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5425
I0
sg3641
g4800
sS'block_loop.thisRepN'
p5426
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5427
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p5428
Nsg69
Vn
sS'block_loop.thisTrialN'
p5429
I0
sg39
F0.88340629978483776
sg34
g752
(S'\x07\xdf\n\x13\x11\x10:\x08\xd5\xb8'
tRp5430
sa(dp5431
S'trial_loop.thisTrialN'
p5432
I129
sg3632
g4875
sS'block_loop.thisIndex'
p5433
g3626
sg38
S'left'
p5434
sg58
g62
sS'trial_loop.thisN'
p5435
I129
sg33
g4309
sg63
g64
sS'trial_loop.thisIndex'
p5436
g59
(g98
S'\x81\x00\x00\x00'
tRp5437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5438
I0
sg3641
g4882
sS'block_loop.thisRepN'
p5439
I1
sg3644
g4309
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5440
I1
sg3646
g4316
sg55
g11
sS'block_loop.thisTrial'
p5441
Nsg69
Vn
sS'block_loop.thisTrialN'
p5442
I0
sg39
F0.85020418822750798
sg34
g752
(S'\x07\xdf\n\x13\x11\x11\x04\x07\xbcx'
tRp5443
sa(dp5444
S'trial_loop.thisTrialN'
p5445
I130
sg3632
g3838
sS'block_loop.thisIndex'
p5446
g3626
sg38
S'right'
p5447
sg58
g62
sS'trial_loop.thisN'
p5448
I130
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5449
g59
(g98
S'\x82\x00\x00\x00'
tRp5450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5451
I0
sg3641
g3845
sS'block_loop.thisRepN'
p5452
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5453
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5454
Nsg69
Vn
sS'block_loop.thisTrialN'
p5455
I0
sg39
F0.9002012231903791
sg34
g752
(S'\x07\xdf\n\x13\x11\x11\n\x05\xef\x88'
tRp5456
sa(dp5457
S'trial_loop.thisTrialN'
p5458
I131
sg3632
g4875
sS'block_loop.thisIndex'
p5459
g3626
sg38
S'left'
p5460
sg58
g62
sS'trial_loop.thisN'
p5461
I131
sg33
g4309
sg63
g64
sS'trial_loop.thisIndex'
p5462
g59
(g98
S'\x83\x00\x00\x00'
tRp5463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5464
I0
sg3641
g4882
sS'block_loop.thisRepN'
p5465
I1
sg3644
g4309
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5466
I1
sg3646
g4316
sg55
g11
sS'block_loop.thisTrial'
p5467
Nsg69
Vn
sS'block_loop.thisTrialN'
p5468
I0
sg39
F0.70016205052888836
sg34
g752
(S'\x07\xdf\n\x13\x11\x11\x10\x04\xd6H'
tRp5469
sa(dp5470
S'trial_loop.thisTrialN'
p5471
I132
sg3632
g4046
sS'block_loop.thisIndex'
p5472
g3626
sg38
S'left'
p5473
sg58
g62
sS'trial_loop.thisN'
p5474
I132
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5475
g59
(g98
S'\x84\x00\x00\x00'
tRp5476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5477
I0
sg3641
g4053
sS'block_loop.thisRepN'
p5478
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5479
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5480
Nsg69
Vn
sS'block_loop.thisTrialN'
p5481
I0
sg39
F0.86676418968636426
sg34
g752
(S'\x07\xdf\n\x13\x11\x11\x16\x00\xde\xa8'
tRp5482
sa(dp5483
S'trial_loop.thisTrialN'
p5484
I133
sg3632
g3789
sS'block_loop.thisIndex'
p5485
g3626
sg38
S'left'
p5486
sg58
g62
sS'trial_loop.thisN'
p5487
I133
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p5488
g59
(g98
S'\x85\x00\x00\x00'
tRp5489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5490
I0
sg3641
g3797
sS'block_loop.thisRepN'
p5491
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5492
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p5493
Nsg69
Vn
sS'block_loop.thisTrialN'
p5494
I0
sg39
F0.98376558211020892
sg34
g752
(S'\x07\xdf\n\x13\x11\x11\x1b\x0e\x8e\x90'
tRp5495
sa(dp5496
S'trial_loop.thisTrialN'
p5497
I134
sg3632
g4477
sS'block_loop.thisIndex'
p5498
g3626
sg38
S'left'
p5499
sg58
g62
sS'trial_loop.thisN'
p5500
I134
sg33
g4147
sg63
g64
sS'trial_loop.thisIndex'
p5501
g59
(g98
S'\x86\x00\x00\x00'
tRp5502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5503
I0
sg3641
g4484
sS'block_loop.thisRepN'
p5504
I1
sg3644
g4147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5505
I1
sg3646
g4154
sg55
g11
sS'block_loop.thisTrial'
p5506
Nsg69
Vn
sS'block_loop.thisTrialN'
p5507
I0
sg39
F0.68350055366317974
sg34
g752
(S'\x07\xdf\n\x13\x11\x11!\x0e\xe4\x80'
tRp5508
sa(dp5509
S'trial_loop.thisTrialN'
p5510
I135
sg3632
g3838
sS'block_loop.thisIndex'
p5511
g3626
sg38
S'right'
p5512
sg58
g62
sS'trial_loop.thisN'
p5513
I135
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5514
g59
(g98
S'\x87\x00\x00\x00'
tRp5515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5516
I0
sg3641
g3845
sS'block_loop.thisRepN'
p5517
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5518
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5519
Nsg69
Vn
sS'block_loop.thisTrialN'
p5520
I0
sg39
F1.000121737462905
sg34
g752
(S"\x07\xdf\n\x13\x11\x11'\ns\xc8"
tRp5521
sa(dp5522
S'trial_loop.thisTrialN'
p5523
I136
sg3632
g4322
sS'block_loop.thisIndex'
p5524
g3626
sg38
S'left'
p5525
sg58
g62
sS'trial_loop.thisN'
p5526
I136
sg33
g3987
sg63
g64
sS'trial_loop.thisIndex'
p5527
g59
(g98
S'\x88\x00\x00\x00'
tRp5528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5529
I0
sg3641
g4329
sS'block_loop.thisRepN'
p5530
I1
sg3644
g3987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5531
I1
sg3646
g3981
sg55
g11
sS'block_loop.thisTrial'
p5532
Nsg69
Vn
sS'block_loop.thisTrialN'
p5533
I0
sg39
F0.70014637005442637
sg34
g752
(S'\x07\xdf\n\x13\x11\x11-\x0b\x088'
tRp5534
sa(dp5535
S'trial_loop.thisTrialN'
p5536
I137
sg3632
g3653
sS'block_loop.thisIndex'
p5537
g3626
sg38
S'left'
p5538
sg58
g62
sS'trial_loop.thisN'
p5539
I137
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p5540
g59
(g98
S'\x89\x00\x00\x00'
tRp5541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5542
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5543
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5544
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vn
sS'block_loop.thisTrialN'
p5546
I0
sg39
F0.91674297828649287
sg34
g752
(S'\x07\xdf\n\x13\x11\x113\x06\xd6\x00'
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g3704
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'right'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5556
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5557
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vn
sS'block_loop.thisTrialN'
p5559
I0
sg39
F0.88354599851300009
sg34
g752
(S'\x07\xdf\n\x13\x11\x119\x065\xd8'
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g4404
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'right'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g3810
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g4411
sS'block_loop.thisRepN'
p5569
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5570
I1
sg3646
g3817
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vn
sS'block_loop.thisTrialN'
p5572
I0
sg39
F1.0834711313982552
sg34
g752
(S'\x07\xdf\n\x13\x11\x12\x03\x04\xe2\x00'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g3823
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'left'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g3830
sS'block_loop.thisRepN'
p5582
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5583
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vn
sS'block_loop.thisTrialN'
p5585
I0
sg39
F0.76677154525168589
sg34
g752
(S'\x07\xdf\n\x13\x11\x12\t\x06\xa38'
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g4277
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'left'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g3907
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g4284
sS'block_loop.thisRepN'
p5595
I1
sg3644
g3900
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5596
I1
sg3646
g3907
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vn
sS'block_loop.thisTrialN'
p5598
I0
sg39
F0.83354753805178916
sg34
g752
(S'\x07\xdf\n\x13\x11\x12\x0f\x03\xa1\xb0'
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g3962
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'left'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g3969
sS'block_loop.thisRepN'
p5608
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5609
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vn
sS'block_loop.thisTrialN'
p5611
I0
sg39
F0.78352826533227926
sg34
g752
(S'\x07\xdf\n\x13\x11\x12\x15\x01\x96@'
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g4350
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'right'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g3940
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g4357
sS'block_loop.thisRepN'
p5621
I1
sg3644
g3940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5622
I1
sg3646
g3934
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vn
sS'block_loop.thisTrialN'
p5624
I0
sg39
F0.86687566357068135
sg34
g752
(S'\x07\xdf\n\x13\x11\x12\x1a\x0e\x11\x90'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g3806
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'left'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g3810
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g3814
sS'block_loop.thisRepN'
p5634
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5635
I1
sg3646
g3817
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vn
sS'block_loop.thisTrialN'
p5637
I0
sg39
F0.95020025385019835
sg34
g752
(S'\x07\xdf\n\x13\x11\x12 \x0c\x7f8'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g3930
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'left'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g3934
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g3938
sS'block_loop.thisRepN'
p5647
I1
sg3644
g3940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5648
I1
sg3646
g3934
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vn
sS'block_loop.thisTrialN'
p5650
I0
sg39
F2.0501737966224027
sg34
g752
(S'\x07\xdf\n\x13\x11\x12&\x0c\x1d\x90'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g5236
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'left'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g4445
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g5243
sS'block_loop.thisRepN'
p5660
I1
sg3644
g4438
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5661
I1
sg3646
g4445
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vn
sS'block_loop.thisTrialN'
p5663
I0
sg39
F1.766829135340231
sg34
g752
(S'\x07\xdf\n\x13\x11\x12-\r\x9c`'
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g3670
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'right'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5673
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5674
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vn
sS'block_loop.thisTrialN'
p5676
I0
sg39
F0.68353562089396291
sg34
g752
(S'\x07\xdf\n\x13\x11\x124\nXp'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g3633
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'right'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5686
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5687
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vn
sS'block_loop.thisTrialN'
p5689
I0
sg39
F0.63347785974838189
sg34
g752
(S'\x07\xdf\n\x13\x11\x12:\x06&8'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g3947
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'right'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g3917
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g3954
sS'block_loop.thisRepN'
p5699
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5700
I1
sg3646
g3924
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vn
sS'block_loop.thisTrialN'
p5702
I0
sg39
F0.96676880829545553
sg34
g752
(S'\x07\xdf\n\x13\x11\x13\x04\x01\x01\xd0'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g4277
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'left'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g3900
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g4284
sS'block_loop.thisRepN'
p5712
I1
sg3644
g3900
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5713
I1
sg3646
g3907
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vn
sS'block_loop.thisTrialN'
p5715
I0
sg39
F0.6667649309420085
sg34
g752
(S'\x07\xdf\n\x13\x11\x13\n\x01\x19@'
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g4765
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'right'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g3864
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g4772
sS'block_loop.thisRepN'
p5725
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5726
I1
sg3646
g3864
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vn
sS'block_loop.thisTrialN'
p5728
I0
sg39
F0.56686722462472972
sg34
g752
(S'\x07\xdf\n\x13\x11\x13\x0f\x0b\xb00'
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g3633
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'right'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5738
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5739
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vn
sS'block_loop.thisTrialN'
p5741
I0
sg39
F0.81689373887274996
sg34
g752
(S'\x07\xdf\n\x13\x11\x13\x15\x05\x95\xb0'
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g4942
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'right'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g4946
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g4950
sS'block_loop.thisRepN'
p5751
I1
sg3644
g4946
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5752
I1
sg3646
g4953
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vn
sS'block_loop.thisTrialN'
p5754
I0
sg39
F0.65011654865156743
sg34
g752
(S'\x07\xdf\n\x13\x11\x13\x1b\x03K\xc0'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g4404
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'right'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g3810
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g4411
sS'block_loop.thisRepN'
p5764
I1
sg3644
g3810
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5765
I1
sg3646
g3817
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vn
sS'block_loop.thisTrialN'
p5767
I0
sg39
F0.63345077529811533
sg34
g752
(S'\x07\xdf\n\x13\x11\x13 \r\xa8\x18'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g5104
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'left'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g4946
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g5111
sS'block_loop.thisRepN'
p5777
I1
sg3644
g4946
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5778
I1
sg3646
g4953
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vn
sS'block_loop.thisTrialN'
p5780
I0
sg39
F0.85019820113666356
sg34
g752
(S'\x07\xdf\n\x13\x11\x13&\x08\xbeH'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g3913
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'left'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g3917
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g3921
sS'block_loop.thisRepN'
p5790
I1
sg3644
g3917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5791
I1
sg3646
g3924
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vn
sS'block_loop.thisTrialN'
p5793
I0
sg39
F0.78342676992542692
sg34
g752
(S'\x07\xdf\n\x13\x11\x13,\x06\xedp'
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g3687
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'left'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5803
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5804
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vn
sS'block_loop.thisTrialN'
p5806
I0
sg39
F0.78361550575937144
sg34
g752
(S'\x07\xdf\n\x13\x11\x132\x04*h'
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g4305
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'right'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g4309
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g4313
sS'block_loop.thisRepN'
p5816
I1
sg3644
g4309
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5817
I1
sg3646
g4316
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vn
sS'block_loop.thisTrialN'
p5819
I0
sg39
F0.66685074587439885
sg34
g752
(S'\x07\xdf\n\x13\x11\x138\x01,\xc8'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g3755
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'right'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g3763
sS'block_loop.thisRepN'
p5829
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5830
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vn
sS'block_loop.thisTrialN'
p5832
I0
sg39
F0.81681989811841049
sg34
g752
(S'\x07\xdf\n\x13\x11\x14\x01\x0b\xfeP'
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g3633
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'right'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5842
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5843
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vn
sS'block_loop.thisTrialN'
p5845
I0
sg39
F0.66686870714329416
sg34
g752
(S'\x07\xdf\n\x13\x11\x14\x07\t\xb4`'
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g5236
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'left'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g4438
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g5243
sS'block_loop.thisRepN'
p5855
I1
sg3644
g4438
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5856
I1
sg3646
g4445
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vn
sS'block_loop.thisTrialN'
p5858
I0
sg39
F0.70015606343804393
sg34
g752
(S'\x07\xdf\n\x13\x11\x14\r\x05\t\x10'
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g3789
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'left'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g3797
sS'block_loop.thisRepN'
p5868
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5869
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vn
sS'block_loop.thisTrialN'
p5871
I0
sg39
F0.73337442566844402
sg34
g752
(S'\x07\xdf\n\x13\x11\x14\x13\x01\x15X'
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g4087
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'right'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g4094
sS'block_loop.thisRepN'
p5881
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5882
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vn
sS'block_loop.thisTrialN'
p5884
I0
sg39
F0.81689944086610922
sg34
g752
(S'\x07\xdf\n\x13\x11\x14\x18\x0c\x9ex'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g4277
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'left'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g3907
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g4284
sS'block_loop.thisRepN'
p5894
I1
sg3644
g3900
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5895
I1
sg3646
g3907
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vn
sS'block_loop.thisTrialN'
p5897
I0
sg39
F1.050094253878342
sg34
g752
(S'\x07\xdf\n\x13\x11\x14\x1e\nT\x88'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g4942
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'right'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g4946
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g4950
sS'block_loop.thisRepN'
p5907
I1
sg3644
g4946
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5908
I1
sg3646
g4953
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vn
sS'block_loop.thisTrialN'
p5910
I0
sg39
F0.96677251458822866
sg34
g752
(S'\x07\xdf\n\x13\x11\x14$\x0b\x9c\xa8'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g3838
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'right'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g3845
sS'block_loop.thisRepN'
p5920
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5921
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vn
sS'block_loop.thisTrialN'
p5923
I0
sg39
F1.4834200415789383
sg34
g752
(S'\x07\xdf\n\x13\x11\x14*\x0b\xb4\x18'
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g4046
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'left'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g4053
sS'block_loop.thisRepN'
p5933
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5934
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vn
sS'block_loop.thisTrialN'
p5936
I0
sg39
F0.83342095389889437
sg34
g752
(S'\x07\xdf\n\x13\x11\x141\x04e\x00'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g4875
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'left'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g4309
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g4882
sS'block_loop.thisRepN'
p5946
I1
sg3644
g4309
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5947
I1
sg3646
g4316
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vn
sS'block_loop.thisTrialN'
p5949
I0
sg39
F1.2172799916043004
sg34
g752
(S'\x07\xdf\n\x13\x11\x147\x02Y\x90'
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g3704
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'right'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5959
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5960
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vn
sS'block_loop.thisTrialN'
p5962
I0
sg39
F1.0000952232148848
sg34
g752
(S'\x07\xdf\n\x13\x11\x15\x01\x06\x03\x10'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g3653
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'left'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5972
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5973
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vn
sS'block_loop.thisTrialN'
p5975
I0
sg39
F1.1168482940229296
sg34
g752
(S'\x07\xdf\n\x13\x11\x15\x07\x06\x93\x98'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g4942
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'right'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g4946
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g4950
sS'block_loop.thisRepN'
p5985
I1
sg3644
g4946
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5986
I1
sg3646
g4953
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vn
sS'block_loop.thisTrialN'
p5988
I0
sg39
F0.63344849450368201
sg34
g752
(S'\x07\xdf\n\x13\x11\x15\r\x08\xcd\xe8'
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g3670
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'right'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5998
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5999
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vn
sS'block_loop.thisTrialN'
p6001
I0
sg39
F0.60011922858757316
sg34
g752
(S'\x07\xdf\n\x13\x11\x15\x13\x03\xe8\x00'
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g4143
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'right'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g4147
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g4151
sS'block_loop.thisRepN'
p6011
I1
sg3644
g4147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6012
I1
sg3646
g4154
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vn
sS'block_loop.thisTrialN'
p6014
I0
sg39
F0.70022277671159827
sg34
g752
(S'\x07\xdf\n\x13\x11\x15\x18\r\x88\xd8'
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g4793
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'right'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g4800
sS'block_loop.thisRepN'
p6024
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6025
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vn
sS'block_loop.thisTrialN'
p6027
I0
sg39
F0.65036002358465339
sg34
g752
(S'\x07\xdf\n\x13\x11\x15\x1e\tZ\x88'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g4419
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'left'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g4426
sS'block_loop.thisRepN'
p6037
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6038
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vn
sS'block_loop.thisTrialN'
p6040
I0
sg39
F1.0332719609250489
sg34
g752
(S'\x07\xdf\n\x13\x11\x15$\x04\xaf8'
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g5236
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'left'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g4438
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g5243
sS'block_loop.thisRepN'
p6050
I1
sg3644
g4438
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6051
I1
sg3646
g4445
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vn
sS'block_loop.thisTrialN'
p6053
I0
sg39
F1.3335406956648512
sg34
g752
(S'\x07\xdf\n\x13\x11\x15*\x05zX'
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g4765
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'right'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g3857
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g4772
sS'block_loop.thisRepN'
p6063
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6064
I1
sg3646
g3864
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vn
sS'block_loop.thisTrialN'
p6066
I0
sg39
F0.63352233526165946
sg34
g752
(S'\x07\xdf\n\x13\x11\x150\x0bJ\xa0'
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g4087
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'right'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g4094
sS'block_loop.thisRepN'
p6076
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6077
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vn
sS'block_loop.thisTrialN'
p6079
I0
sg39
F1.5667454871581867
sg34
g752
(S'\x07\xdf\n\x13\x11\x156\x06&8'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g4434
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'right'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g4438
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g4442
sS'block_loop.thisRepN'
p6089
I1
sg3644
g4438
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6090
I1
sg3646
g4445
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vn
sS'block_loop.thisTrialN'
p6092
I0
sg39
F0.63394143144978443
sg34
g752
(S'\x07\xdf\n\x13\x11\x16\x01\x00\x07\xd0'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g3789
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'left'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g3797
sS'block_loop.thisRepN'
p6102
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6103
I1
sg3646
g3793
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vn
sS'block_loop.thisTrialN'
p6105
I0
sg39
F0.6834369764837902
sg34
g752
(S'\x07\xdf\n\x13\x11\x16\x06\n!\xc0'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g4765
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'right'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g3857
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g4772
sS'block_loop.thisRepN'
p6115
I1
sg3644
g3857
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6116
I1
sg3646
g3864
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vn
sS'block_loop.thisTrialN'
p6118
I0
sg39
F0.60009841632927419
sg34
g752
(S'\x07\xdf\n\x13\x11\x16\x0c\x05\xf3p'
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g5236
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'left'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g4438
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g5243
sS'block_loop.thisRepN'
p6128
I1
sg3644
g4438
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6129
I1
sg3646
g4445
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vn
sS'block_loop.thisTrialN'
p6131
I0
sg39
F0.95019170087107341
sg34
g752
(S'\x07\xdf\n\x13\x11\x16\x12\x00R\x08'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g5104
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'left'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g4946
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g5111
sS'block_loop.thisRepN'
p6141
I1
sg3644
g4946
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6142
I1
sg3646
g4953
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vn
sS'block_loop.thisTrialN'
p6144
I0
sg39
F0.75014711131734657
sg34
g752
(S'\x07\xdf\n\x13\x11\x16\x17\x0f2\xa0'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g3772
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'right'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g3780
sS'block_loop.thisRepN'
p6154
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6155
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vn
sS'block_loop.thisTrialN'
p6157
I0
sg39
F1.4001752791409672
sg34
g752
(S'\x07\xdf\n\x13\x11\x16\x1d\x0b\xf6\x80'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g4277
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'left'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g3900
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g4284
sS'block_loop.thisRepN'
p6167
I1
sg3644
g3900
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6168
I1
sg3646
g3907
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vn
sS'block_loop.thisTrialN'
p6170
I0
sg39
F0.73355432341850246
sg34
g752
(S'\x07\xdf\n\x13\x11\x16$\x0388'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g5104
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'left'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g4953
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g5111
sS'block_loop.thisRepN'
p6180
I1
sg3644
g4946
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6181
I1
sg3646
g4953
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vn
sS'block_loop.thisTrialN'
p6183
I0
sg39
F0.73349587803386385
sg34
g752
(S'\x07\xdf\n\x13\x11\x16)\x0e\xff\xd8'
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g3962
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'left'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g3969
sS'block_loop.thisRepN'
p6193
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6194
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vn
sS'block_loop.thisTrialN'
p6196
I0
sg39
F0.93344609966879943
sg34
g752
(S'\x07\xdf\n\x13\x11\x16/\x0b\x858'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g4942
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'right'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g4946
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g4950
sS'block_loop.thisRepN'
p6206
I1
sg3644
g4946
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6207
I1
sg3646
g4953
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vn
sS'block_loop.thisTrialN'
p6209
I0
sg39
F0.98342431807031971
sg34
g752
(S'\x07\xdf\n\x13\x11\x165\n\xe5\x10'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g4305
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'right'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g4316
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g4313
sS'block_loop.thisRepN'
p6219
I1
sg3644
g4309
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6220
I1
sg3646
g4316
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vn
sS'block_loop.thisTrialN'
p6222
I0
sg39
F1.150180125830957
sg34
g752
(S'\x07\xdf\n\x13\x11\x16;\x0b;\x00'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g3738
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'right'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g3746
sS'block_loop.thisRepN'
p6232
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6233
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vn
sS'block_loop.thisTrialN'
p6235
I0
sg39
F0.7167745102851768
sg34
g752
(S'\x07\xdf\n\x13\x11\x17\x05\r\xeeh'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g4143
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'right'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g4147
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g4151
sS'block_loop.thisRepN'
p6245
I1
sg3644
g4147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6246
I1
sg3646
g4154
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vn
sS'block_loop.thisTrialN'
p6248
I0
sg39
F0.85056569432708784
sg34
g752
(S'\x07\xdf\n\x13\x11\x17\x0b\n90'
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g4087
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'right'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g4094
sS'block_loop.thisRepN'
p6258
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6259
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vn
sS'block_loop.thisTrialN'
p6261
I0
sg39
F0.86691386689562933
sg34
g752
(S'\x07\xdf\n\x13\x11\x17\x11\x08hX'
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g3962
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'left'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g3969
sS'block_loop.thisRepN'
p6271
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6272
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vn
sS'block_loop.thisTrialN'
p6274
I0
sg39
F1.7168711589984014
sg34
g752
(S'\x07\xdf\n\x13\x11\x17\x17\x06\xd6\x00'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g4834
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'left'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g4841
sS'block_loop.thisRepN'
p6284
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6285
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vn
sS'block_loop.thisTrialN'
p6287
I0
sg39
F2.0667970901595254
sg34
g752
(S'\x07\xdf\n\x13\x11\x17\x1e\x03\x15\x10'
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g3738
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'right'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g3746
sS'block_loop.thisRepN'
p6297
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6298
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vn
sS'block_loop.thisTrialN'
p6300
I0
sg39
F0.85014944912836654
sg34
g752
(S'\x07\xdf\n\x13\x11\x17%\x04\x93\xe0'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g5104
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'left'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g4946
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g5111
sS'block_loop.thisRepN'
p6310
I1
sg3644
g4946
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6311
I1
sg3646
g4953
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vn
sS'block_loop.thisTrialN'
p6313
I0
sg39
F0.73354947672851267
sg34
g752
(S'\x07\xdf\n\x13\x11\x17+\x02\xc6\xf0'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g4419
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'left'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g4426
sS'block_loop.thisRepN'
p6323
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6324
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vn
sS'block_loop.thisTrialN'
p6326
I0
sg39
F0.98317571134975879
sg34
g752
(S'\x07\xdf\n\x13\x11\x170\x0e\x8e\x90'
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g4834
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'left'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g4841
sS'block_loop.thisRepN'
p6336
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6337
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vn
sS'block_loop.thisTrialN'
p6339
I0
sg39
F0.75009379771654494
sg34
g752
(S'\x07\xdf\n\x13\x11\x176\x0e\xa6\x00'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g3755
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'right'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g3763
sS'block_loop.thisRepN'
p6349
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6350
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vn
sS'block_loop.thisTrialN'
p6352
I0
sg39
F1.0167729707500257
sg34
g752
(S'\x07\xdf\n\x13\x11\x18\x00\x0be\xf8'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F145.44744733357948
sg56
Vr
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vn
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vr
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vn
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'42-mrkipling_lemon_slices.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'right'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'16-skips_prawn.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'16-skips_prawn.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6383
I2
sS'img_wrong'
p6384
S'42-mrkipling_lemon_slices.png'
p6385
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vn
sS'block_loop.thisTrialN'
p6387
I0
sg39
F0.64999566648839391
sg34
g752
(S'\x07\xdf\n\x13\x11\x1a%\x04=\xf0'
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'36-fig_rolls.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'right'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'36-fig_rolls.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
S'34-hula_hoops_bbq_beef_redo.png'
p6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6402
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vn
sS'block_loop.thisTrialN'
p6404
I0
sg39
F0.65020578477924573
sg34
g752
(S'\x07\xdf\n\x13\x11\x1a*\x0e\x96`'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'13-mccoys_steak_crisps.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'left'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'13-mccoys_steak_crisps.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'3-ellas_strawberries_apples.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6418
I2
sg6384
S'3-ellas_strawberries_apples.png'
p6419
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vn
sS'block_loop.thisTrialN'
p6421
I0
sg39
F0.71685519343009219
sg34
g752
(S'\x07\xdf\n\x13\x11\x1a0\t\xeb\x10'
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
S'26-walkers_smoky_bacon.png'
p6425
sS'block_loop.thisIndex'
p6426
g6364
sg38
S'left'
p6427
sg58
g62
sS'trial_loop.thisN'
p6428
I3
sg33
S'44-crunch.png'
p6429
sg63
g64
sS'trial_loop.thisIndex'
p6430
g59
(g98
S'\x03\x00\x00\x00'
tRp6431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6432
I0
sg6379
S'44-crunch.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6382
S'26-walkers_smoky_bacon.png'
p6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6436
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p6437
Nsg69
Vn
sS'block_loop.thisTrialN'
p6438
I0
sg39
F0.98355289792380063
sg34
g752
(S'\x07\xdf\n\x13\x11\x1a6\x05\xf7X'
tRp6439
sa(dp6440
S'trial_loop.thisTrialN'
p6441
I4
sg6370
S'27-hartleys_raspberries_jelly.png'
p6442
sS'block_loop.thisIndex'
p6443
g6364
sg38
S'left'
p6444
sg58
g62
sS'trial_loop.thisN'
p6445
I4
sg33
S'51-mars.png'
p6446
sg63
g64
sS'trial_loop.thisIndex'
p6447
g59
(g98
S'\x04\x00\x00\x00'
tRp6448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6449
I0
sg6379
S'51-mars.png'
p6450
sS'block_loop.thisRepN'
p6451
I2
sg6382
S'27-hartleys_raspberries_jelly.png'
p6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6453
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p6454
Nsg69
Vn
sS'block_loop.thisTrialN'
p6455
I0
sg39
F0.88853951535566011
sg34
g752
(S'\x07\xdf\n\x13\x11\x1b\x00\x06MH'
tRp6456
sa(dp6457
S'trial_loop.thisTrialN'
p6458
I5
sg6370
S'4-corn.png'
p6459
sS'block_loop.thisIndex'
p6460
g6364
sg38
S'left'
p6461
sg58
g62
sS'trial_loop.thisN'
p6462
I5
sg33
S'4-corn.png'
p6463
sg63
g64
sS'trial_loop.thisIndex'
p6464
g59
(g98
S'\x05\x00\x00\x00'
tRp6465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6466
I0
sg6379
S'10-bounty_redo.png'
p6467
sS'block_loop.thisRepN'
p6468
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6469
I2
sg6384
S'10-bounty_redo.png'
p6470
sg55
g11
sS'block_loop.thisTrial'
p6471
Nsg69
Vn
sS'block_loop.thisTrialN'
p6472
I0
sg39
F0.90018896391484304
sg34
g752
(S'\x07\xdf\n\x13\x11\x1b\x06\x07\x95h'
tRp6473
sa(dp6474
S'trial_loop.thisTrialN'
p6475
I6
sg6370
S'1-treacle_cookies.png'
p6476
sS'block_loop.thisIndex'
p6477
g6364
sg38
S'left'
p6478
sg58
g62
sS'trial_loop.thisN'
p6479
I6
sg33
S'1-treacle_cookies.png'
p6480
sg63
g64
sS'trial_loop.thisIndex'
p6481
g59
(g98
S'\x06\x00\x00\x00'
tRp6482
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6483
I0
sg6379
S'21-nakd_banana_crunch.png'
p6484
sS'block_loop.thisRepN'
p6485
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6486
I2
sg6384
S'21-nakd_banana_crunch.png'
p6487
sg55
g11
sS'block_loop.thisTrial'
p6488
Nsg69
Vn
sS'block_loop.thisTrialN'
p6489
I0
sg39
F0.66686557104912936
sg34
g752
(S'\x07\xdf\n\x13\x11\x1b\x0c\x06|('
tRp6490
sa(dp6491
S'trial_loop.thisTrialN'
p6492
I7
sg6370
S'38-maltesers.png'
p6493
sS'block_loop.thisIndex'
p6494
g6364
sg38
S'left'
p6495
sg58
g62
sS'trial_loop.thisN'
p6496
I7
sg33
S'38-maltesers.png'
p6497
sg63
g64
sS'trial_loop.thisIndex'
p6498
g59
(g98
S'\x07\x00\x00\x00'
tRp6499
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6500
I0
sg6379
S'6-sour_patch_kids.png'
p6501
sS'block_loop.thisRepN'
p6502
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6503
I2
sg6384
S'6-sour_patch_kids.png'
p6504
sg55
g11
sS'block_loop.thisTrial'
p6505
Nsg69
Vn
sS'block_loop.thisTrialN'
p6506
I0
sg39
F0.79983367297973018
sg34
g752
(S'\x07\xdf\n\x13\x11\x1b\x12\x02\x0bp'
tRp6507
sa(dp6508
S'trial_loop.thisTrialN'
p6509
I8
sg6370
g6442
sS'block_loop.thisIndex'
p6510
g6364
sg38
S'left'
p6511
sg58
g62
sS'trial_loop.thisN'
p6512
I8
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p6513
g59
(g98
S'\x08\x00\x00\x00'
tRp6514
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6515
I0
sg6379
g6450
sS'block_loop.thisRepN'
p6516
I2
sg6382
g6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6517
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p6518
Nsg69
Vn
sS'block_loop.thisTrialN'
p6519
I0
sg39
F0.71690907722586417
sg34
g752
(S'\x07\xdf\n\x13\x11\x1b\x17\x0e\xc9('
tRp6520
sa(dp6521
S'trial_loop.thisTrialN'
p6522
I9
sg6370
S'19-caramello_redo.png'
p6523
sS'block_loop.thisIndex'
p6524
g6364
sg38
S'right'
p6525
sg58
g62
sS'trial_loop.thisN'
p6526
I9
sg33
S'30-spaghetti_hoops.png'
p6527
sg63
g64
sS'trial_loop.thisIndex'
p6528
g59
(g98
S'\t\x00\x00\x00'
tRp6529
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6530
I0
sg6379
S'30-spaghetti_hoops.png'
p6531
sS'block_loop.thisRepN'
p6532
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6533
I2
sg6384
S'19-caramello_redo.png'
p6534
sg55
g11
sS'block_loop.thisTrial'
p6535
Nsg69
Vn
sS'block_loop.thisTrialN'
p6536
I0
sg39
F0.75009921460878104
sg34
g752
(S'\x07\xdf\n\x13\x11\x1b\x1d\n\xd5p'
tRp6537
sa(dp6538
S'trial_loop.thisTrialN'
p6539
I10
sg6370
S'25-kitkat.png'
p6540
sS'block_loop.thisIndex'
p6541
g6364
sg38
S'left'
p6542
sg58
g62
sS'trial_loop.thisN'
p6543
I10
sg33
S'25-kitkat.png'
p6544
sg63
g64
sS'trial_loop.thisIndex'
p6545
g59
(g98
S'\n\x00\x00\x00'
tRp6546
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6547
I0
sg6379
S'31-hobnobs.png'
p6548
sS'block_loop.thisRepN'
p6549
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6550
I2
sg6384
S'31-hobnobs.png'
p6551
sg55
g11
sS'block_loop.thisTrial'
p6552
Nsg69
Vn
sS'block_loop.thisTrialN'
p6553
I0
sg39
F0.83355780163401505
sg34
g752
(S'\x07\xdf\n\x13\x11\x1b#\x07\x95h'
tRp6554
sa(dp6555
S'trial_loop.thisTrialN'
p6556
I11
sg6370
S'20-fruit_pastilles.png'
p6557
sS'block_loop.thisIndex'
p6558
g6364
sg38
S'right'
p6559
sg58
g62
sS'trial_loop.thisN'
p6560
I11
sg33
S'2-steamed_puddings.png'
p6561
sg63
g64
sS'trial_loop.thisIndex'
p6562
g59
(g98
S'\x0b\x00\x00\x00'
tRp6563
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6564
I0
sg6379
S'2-steamed_puddings.png'
p6565
sS'block_loop.thisRepN'
p6566
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6567
I2
sg6384
S'20-fruit_pastilles.png'
p6568
sg55
g11
sS'block_loop.thisTrial'
p6569
Nsg69
Vn
sS'block_loop.thisTrialN'
p6570
I0
sg39
F0.70023646148547414
sg34
g752
(S'\x07\xdf\n\x13\x11\x1b)\x05\x89\xf8'
tRp6571
sa(dp6572
S'trial_loop.thisTrialN'
p6573
I12
sg6370
S'33-ambrosia_rice.png'
p6574
sS'block_loop.thisIndex'
p6575
g6364
sg38
S'left'
p6576
sg58
g62
sS'trial_loop.thisN'
p6577
I12
sg33
S'33-ambrosia_rice.png'
p6578
sg63
g64
sS'trial_loop.thisIndex'
p6579
g59
(g98
S'\x0c\x00\x00\x00'
tRp6580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6581
I0
sg6379
S'23-crunchie_redo.png'
p6582
sS'block_loop.thisRepN'
p6583
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6584
I2
sg6384
S'23-crunchie_redo.png'
p6585
sg55
g11
sS'block_loop.thisTrial'
p6586
Nsg69
Vn
sS'block_loop.thisTrialN'
p6587
I0
sg39
F0.61676903637635405
sg34
g752
(S'\x07\xdf\n\x13\x11\x1b/\x01\x96@'
tRp6588
sa(dp6589
S'trial_loop.thisTrialN'
p6590
I13
sg6370
S'2-steamed_puddings.png'
p6591
sS'block_loop.thisIndex'
p6592
g6364
sg38
S'left'
p6593
sg58
g62
sS'trial_loop.thisN'
p6594
I13
sg33
g6561
sg63
g64
sS'trial_loop.thisIndex'
p6595
g59
(g98
S'\r\x00\x00\x00'
tRp6596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6597
I0
sg6379
S'20-fruit_pastilles.png'
p6598
sS'block_loop.thisRepN'
p6599
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6600
I2
sg6384
g6568
sg55
g11
sS'block_loop.thisTrial'
p6601
Nsg69
Vn
sS'block_loop.thisTrialN'
p6602
I0
sg39
F0.65043101334595121
sg34
g752
(S'\x07\xdf\n\x13\x11\x1b4\x0bu\x98'
tRp6603
sa(dp6604
S'trial_loop.thisTrialN'
p6605
I14
sg6370
g6371
sS'block_loop.thisIndex'
p6606
g6364
sg38
S'right'
p6607
sg58
g62
sS'trial_loop.thisN'
p6608
I14
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6609
g59
(g98
S'\x0e\x00\x00\x00'
tRp6610
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6611
I0
sg6379
g6380
sS'block_loop.thisRepN'
p6612
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6613
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6614
Nsg69
Vn
sS'block_loop.thisTrialN'
p6615
I0
sg39
F0.96667529567639576
sg34
g752
(S'\x07\xdf\n\x13\x11\x1b:\x06\x8b\xc8'
tRp6616
sa(dp6617
S'trial_loop.thisTrialN'
p6618
I15
sg6370
S'23-crunchie_redo.png'
p6619
sS'block_loop.thisIndex'
p6620
g6364
sg38
S'right'
p6621
sg58
g62
sS'trial_loop.thisN'
p6622
I15
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p6623
g59
(g98
S'\x0f\x00\x00\x00'
tRp6624
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6625
I0
sg6379
S'33-ambrosia_rice.png'
p6626
sS'block_loop.thisRepN'
p6627
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6628
I2
sg6384
g6585
sg55
g11
sS'block_loop.thisTrial'
p6629
Nsg69
Vn
sS'block_loop.thisTrialN'
p6630
I0
sg39
F1.5834506042410794
sg34
g752
(S'\x07\xdf\n\x13\x11\x1c\x04\x06\xa38'
tRp6631
sa(dp6632
S'trial_loop.thisTrialN'
p6633
I16
sg6370
S'51-mars.png'
p6634
sS'block_loop.thisIndex'
p6635
g6364
sg38
S'right'
p6636
sg58
g62
sS'trial_loop.thisN'
p6637
I16
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p6638
g59
(g98
S'\x10\x00\x00\x00'
tRp6639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6640
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p6641
sS'block_loop.thisRepN'
p6642
I2
sg6382
g6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6643
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p6644
Nsg69
Vn
sS'block_loop.thisTrialN'
p6645
I0
sg39
F1.0168693343584891
sg34
g752
(S'\x07\xdf\n\x13\x11\x1c\x0b\x00\xc3P'
tRp6646
sa(dp6647
S'trial_loop.thisTrialN'
p6648
I17
sg6370
S'35-raisins.png'
p6649
sS'block_loop.thisIndex'
p6650
g6364
sg38
S'right'
p6651
sg58
g62
sS'trial_loop.thisN'
p6652
I17
sg33
S'49-yorkie.png'
p6653
sg63
g64
sS'trial_loop.thisIndex'
p6654
g59
(g98
S'\x11\x00\x00\x00'
tRp6655
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6656
I0
sg6379
S'49-yorkie.png'
p6657
sS'block_loop.thisRepN'
p6658
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6659
I2
sg6384
S'35-raisins.png'
p6660
sg55
g11
sS'block_loop.thisTrial'
p6661
Nsg69
Vn
sS'block_loop.thisTrialN'
p6662
I0
sg39
F0.63353060314693721
sg34
g752
(S'\x07\xdf\n\x13\x11\x1c\x11\x01\x92X'
tRp6663
sa(dp6664
S'trial_loop.thisTrialN'
p6665
I18
sg6370
S'43-mrporky_pork_crackles_redo.png'
p6666
sS'block_loop.thisIndex'
p6667
g6364
sg38
S'right'
p6668
sg58
g62
sS'trial_loop.thisN'
p6669
I18
sg33
S'18-mms.png'
p6670
sg63
g64
sS'trial_loop.thisIndex'
p6671
g59
(g98
S'\x12\x00\x00\x00'
tRp6672
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6673
I0
sg6379
S'18-mms.png'
p6674
sS'block_loop.thisRepN'
p6675
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6676
I2
sg6384
S'43-mrporky_pork_crackles_redo.png'
p6677
sg55
g11
sS'block_loop.thisTrial'
p6678
Nsg69
Vn
sS'block_loop.thisTrialN'
p6679
I0
sg39
F0.58348909266351257
sg34
g752
(S'\x07\xdf\n\x13\x11\x1c\x16\x0b\xacH'
tRp6680
sa(dp6681
S'trial_loop.thisTrialN'
p6682
I19
sg6370
S'6-sour_patch_kids.png'
p6683
sS'block_loop.thisIndex'
p6684
g6364
sg38
S'right'
p6685
sg58
g62
sS'trial_loop.thisN'
p6686
I19
sg33
g6504
sg63
g64
sS'trial_loop.thisIndex'
p6687
g59
(g98
S'\x13\x00\x00\x00'
tRp6688
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6689
I0
sg6379
S'38-maltesers.png'
p6690
sS'block_loop.thisRepN'
p6691
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6692
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p6693
Nsg69
Vn
sS'block_loop.thisTrialN'
p6694
I0
sg39
F0.83327469788127928
sg34
g752
(S'\x07\xdf\n\x13\x11\x1c\x1c\x05\xd0H'
tRp6695
sa(dp6696
S'trial_loop.thisTrialN'
p6697
I20
sg6370
S'17-jacobs_mini_cheddars_redo.png'
p6698
sS'block_loop.thisIndex'
p6699
g6364
sg38
S'left'
p6700
sg58
g62
sS'trial_loop.thisN'
p6701
I20
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6702
sg63
g64
sS'trial_loop.thisIndex'
p6703
g59
(g98
S'\x14\x00\x00\x00'
tRp6704
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6705
I0
sg6379
S'8-liquorice_catherine_wheels.png'
p6706
sS'block_loop.thisRepN'
p6707
I2
sg6382
g6702
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6708
I2
sg6384
S'8-liquorice_catherine_wheels.png'
p6709
sg55
g11
sS'block_loop.thisTrial'
p6710
Nsg69
Vn
sS'block_loop.thisTrialN'
p6711
I0
sg39
F0.91685530747054145
sg34
g752
(S'\x07\xdf\n\x13\x11\x1c"\x03\xc4\xd8'
tRp6712
sa(dp6713
S'trial_loop.thisTrialN'
p6714
I21
sg6370
S'50-polo.png'
p6715
sS'block_loop.thisIndex'
p6716
g6364
sg38
S'left'
p6717
sg58
g62
sS'trial_loop.thisN'
p6718
I21
sg33
S'50-polo.png'
p6719
sg63
g64
sS'trial_loop.thisIndex'
p6720
g59
(g98
S'\x15\x00\x00\x00'
tRp6721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6722
I0
sg6379
S'48-twix.png'
p6723
sS'block_loop.thisRepN'
p6724
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6725
I2
sg6384
S'48-twix.png'
p6726
sg55
g11
sS'block_loop.thisTrial'
p6727
Nsg69
Vn
sS'block_loop.thisTrialN'
p6728
I0
sg39
F0.91682993361973786
sg34
g752
(S'\x07\xdf\n\x13\x11\x1c(\x02\xea\x18'
tRp6729
sa(dp6730
S'trial_loop.thisTrialN'
p6731
I22
sg6370
g6634
sS'block_loop.thisIndex'
p6732
g6364
sg38
S'right'
p6733
sg58
g62
sS'trial_loop.thisN'
p6734
I22
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p6735
g59
(g98
S'\x16\x00\x00\x00'
tRp6736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6737
I0
sg6379
g6641
sS'block_loop.thisRepN'
p6738
I2
sg6382
g6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6739
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p6740
Nsg69
Vn
sS'block_loop.thisTrialN'
p6741
I0
sg39
F0.80056951465667225
sg34
g752
(S'\x07\xdf\n\x13\x11\x1c.\x02I\xf0'
tRp6742
sa(dp6743
S'trial_loop.thisTrialN'
p6744
I23
sg6370
g6715
sS'block_loop.thisIndex'
p6745
g6364
sg38
S'left'
p6746
sg58
g62
sS'trial_loop.thisN'
p6747
I23
sg33
g6726
sg63
g64
sS'trial_loop.thisIndex'
p6748
g59
(g98
S'\x17\x00\x00\x00'
tRp6749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6750
I0
sg6379
g6723
sS'block_loop.thisRepN'
p6751
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6752
I2
sg6384
g6726
sg55
g11
sS'block_loop.thisTrial'
p6753
Nsg69
Vn
sS'block_loop.thisTrialN'
p6754
I0
sg39
F1.3168578163422353
sg34
g752
(S'\x07\xdf\n\x13\x11\x1c3\x0f\x03\xc0'
tRp6755
sa(dp6756
S'trial_loop.thisTrialN'
p6757
I24
sg6370
S'21-nakd_banana_crunch.png'
p6758
sS'block_loop.thisIndex'
p6759
g6364
sg38
S'right'
p6760
sg58
g62
sS'trial_loop.thisN'
p6761
I24
sg33
g6487
sg63
g64
sS'trial_loop.thisIndex'
p6762
g59
(g98
S'\x18\x00\x00\x00'
tRp6763
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6764
I0
sg6379
S'1-treacle_cookies.png'
p6765
sS'block_loop.thisRepN'
p6766
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6767
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p6768
Nsg69
Vn
sS'block_loop.thisTrialN'
p6769
I0
sg39
F0.71661713538924232
sg34
g752
(S'\x07\xdf\n\x13\x11\x1c:\x05\x14\xc8'
tRp6770
sa(dp6771
S'trial_loop.thisTrialN'
p6772
I25
sg6370
g6574
sS'block_loop.thisIndex'
p6773
g6364
sg38
S'left'
p6774
sg58
g62
sS'trial_loop.thisN'
p6775
I25
sg33
g6578
sg63
g64
sS'trial_loop.thisIndex'
p6776
g59
(g98
S'\x19\x00\x00\x00'
tRp6777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6778
I0
sg6379
g6582
sS'block_loop.thisRepN'
p6779
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6780
I2
sg6384
g6585
sg55
g11
sS'block_loop.thisTrial'
p6781
Nsg69
Vn
sS'block_loop.thisTrialN'
p6782
I0
sg39
F0.63343452463232097
sg34
g752
(S'\x07\xdf\n\x13\x11\x1d\x04\x01!\x10'
tRp6783
sa(dp6784
S'trial_loop.thisTrialN'
p6785
I26
sg6370
S'10-bounty_redo.png'
p6786
sS'block_loop.thisIndex'
p6787
g6364
sg38
S'right'
p6788
sg58
g62
sS'trial_loop.thisN'
p6789
I26
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p6790
g59
(g98
S'\x1a\x00\x00\x00'
tRp6791
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6792
I0
sg6379
S'4-corn.png'
p6793
sS'block_loop.thisRepN'
p6794
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6795
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p6796
Nsg69
Vn
sS'block_loop.thisTrialN'
p6797
I0
sg39
F0.58345345523412107
sg34
g752
(S'\x07\xdf\n\x13\x11\x1d\t\x0b}h'
tRp6798
sa(dp6799
S'trial_loop.thisTrialN'
p6800
I27
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p6801
sS'block_loop.thisIndex'
p6802
g6364
sg38
S'left'
p6803
sg58
g62
sS'trial_loop.thisN'
p6804
I27
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p6805
g59
(g98
S'\x1b\x00\x00\x00'
tRp6806
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6807
I0
sg6379
S'36-fig_rolls.png'
p6808
sS'block_loop.thisRepN'
p6809
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6810
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p6811
Nsg69
Vn
sS'block_loop.thisTrialN'
p6812
I0
sg39
F1.0835335681767901
sg34
g752
(S'\x07\xdf\n\x13\x11\x1d\x0f\x05\xa1h'
tRp6813
sa(dp6814
S'trial_loop.thisTrialN'
p6815
I28
sg6370
g6425
sS'block_loop.thisIndex'
p6816
g6364
sg38
S'left'
p6817
sg58
g62
sS'trial_loop.thisN'
p6818
I28
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6819
g59
(g98
S'\x1c\x00\x00\x00'
tRp6820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6821
I0
sg6379
g6433
sS'block_loop.thisRepN'
p6822
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6823
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p6824
Nsg69
Vn
sS'block_loop.thisTrialN'
p6825
I0
sg39
F0.80053872391727054
sg34
g752
(S'\x07\xdf\n\x13\x11\x1d\x15\x07b\xa0'
tRp6826
sa(dp6827
S'trial_loop.thisTrialN'
p6828
I29
sg6370
S'31-hobnobs.png'
p6829
sS'block_loop.thisIndex'
p6830
g6364
sg38
S'right'
p6831
sg58
g62
sS'trial_loop.thisN'
p6832
I29
sg33
g6544
sg63
g64
sS'trial_loop.thisIndex'
p6833
g59
(g98
S'\x1d\x00\x00\x00'
tRp6834
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6835
I0
sg6379
S'25-kitkat.png'
p6836
sS'block_loop.thisRepN'
p6837
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6838
I2
sg6384
g6551
sg55
g11
sS'block_loop.thisTrial'
p6839
Nsg69
Vn
sS'block_loop.thisTrialN'
p6840
I0
sg39
F0.61687965496457764
sg34
g752
(S'\x07\xdf\n\x13\x11\x1d\x1b\x04\xda0'
tRp6841
sa(dp6842
S'trial_loop.thisTrialN'
p6843
I30
sg6370
g6425
sS'block_loop.thisIndex'
p6844
g6364
sg38
S'left'
p6845
sg58
g62
sS'trial_loop.thisN'
p6846
I30
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p6847
g59
(g98
S'\x1e\x00\x00\x00'
tRp6848
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6849
I0
sg6379
g6433
sS'block_loop.thisRepN'
p6850
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6851
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p6852
Nsg69
Vn
sS'block_loop.thisTrialN'
p6853
I0
sg39
F0.8334460426485748
sg34
g752
(S'\x07\xdf\n\x13\x11\x1d \x0e\xbdp'
tRp6854
sa(dp6855
S'trial_loop.thisTrialN'
p6856
I31
sg6370
g6574
sS'block_loop.thisIndex'
p6857
g6364
sg38
S'left'
p6858
sg58
g62
sS'trial_loop.thisN'
p6859
I31
sg33
g6578
sg63
g64
sS'trial_loop.thisIndex'
p6860
g59
(g98
S'\x1f\x00\x00\x00'
tRp6861
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6862
I0
sg6379
g6582
sS'block_loop.thisRepN'
p6863
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6864
I2
sg6384
g6585
sg55
g11
sS'block_loop.thisTrial'
p6865
Nsg69
Vn
sS'block_loop.thisTrialN'
p6866
I0
sg39
F0.75020812259754166
sg34
g752
(S'\x07\xdf\n\x13\x11\x1d&\x0c\xae\x18'
tRp6867
sa(dp6868
S'trial_loop.thisTrialN'
p6869
I32
sg6370
S'30-spaghetti_hoops.png'
p6870
sS'block_loop.thisIndex'
p6871
g6364
sg38
S'left'
p6872
sg58
g62
sS'trial_loop.thisN'
p6873
I32
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p6874
g59
(g98
S' \x00\x00\x00'
tRp6875
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6876
I0
sg6379
S'19-caramello_redo.png'
p6877
sS'block_loop.thisRepN'
p6878
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6879
I2
sg6384
g6534
sg55
g11
sS'block_loop.thisTrial'
p6880
Nsg69
Vn
sS'block_loop.thisTrialN'
p6881
I0
sg39
F1.2668254290438199
sg34
g752
(S'\x07\xdf\n\x13\x11\x1d,\tq\xf8'
tRp6882
sa(dp6883
S'trial_loop.thisTrialN'
p6884
I33
sg6370
S'3-ellas_strawberries_apples.png'
p6885
sS'block_loop.thisIndex'
p6886
g6364
sg38
S'right'
p6887
sg58
g62
sS'trial_loop.thisN'
p6888
I33
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6889
g59
(g98
S'!\x00\x00\x00'
tRp6890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6891
I0
sg6379
S'13-mccoys_steak_crisps.png'
p6892
sS'block_loop.thisRepN'
p6893
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6894
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6895
Nsg69
Vn
sS'block_loop.thisTrialN'
p6896
I0
sg39
F0.56675660604014411
sg34
g752
(S'\x07\xdf\n\x13\x11\x1d2\r\xd3\x10'
tRp6897
sa(dp6898
S'trial_loop.thisTrialN'
p6899
I34
sg6370
g6870
sS'block_loop.thisIndex'
p6900
g6364
sg38
S'left'
p6901
sg58
g62
sS'trial_loop.thisN'
p6902
I34
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p6903
g59
(g98
S'"\x00\x00\x00'
tRp6904
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6905
I0
sg6379
g6877
sS'block_loop.thisRepN'
p6906
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6907
I2
sg6384
g6534
sg55
g11
sS'block_loop.thisTrial'
p6908
Nsg69
Vn
sS'block_loop.thisTrialN'
p6909
I0
sg39
F1.7672185811861709
sg34
g752
(S'\x07\xdf\n\x13\x11\x1d8\x07\xb8\x90'
tRp6910
sa(dp6911
S'trial_loop.thisTrialN'
p6912
I35
sg6370
S'16-skips_prawn.png'
p6913
sS'block_loop.thisIndex'
p6914
g6364
sg38
S'left'
p6915
sg58
g62
sS'trial_loop.thisN'
p6916
I35
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6917
g59
(g98
S'#\x00\x00\x00'
tRp6918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6919
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p6920
sS'block_loop.thisRepN'
p6921
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6922
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6923
Nsg69
Vn
sS'block_loop.thisTrialN'
p6924
I0
sg39
F0.70009419685811736
sg34
g752
(S'\x07\xdf\n\x13\x11\x1e\x03\x04\xb3 '
tRp6925
sa(dp6926
S'trial_loop.thisTrialN'
p6927
I36
sg6370
g6715
sS'block_loop.thisIndex'
p6928
g6364
sg38
S'left'
p6929
sg58
g62
sS'trial_loop.thisN'
p6930
I36
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p6931
g59
(g98
S'$\x00\x00\x00'
tRp6932
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6933
I0
sg6379
g6723
sS'block_loop.thisRepN'
p6934
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6935
I2
sg6384
g6726
sg55
g11
sS'block_loop.thisTrial'
p6936
Nsg69
Vn
sS'block_loop.thisTrialN'
p6937
I0
sg39
F0.58353869997154106
sg34
g752
(S'\x07\xdf\n\x13\x11\x1e\t\x00\xbb\x80'
tRp6938
sa(dp6939
S'trial_loop.thisTrialN'
p6940
I37
sg6370
g6459
sS'block_loop.thisIndex'
p6941
g6364
sg38
S'left'
p6942
sg58
g62
sS'trial_loop.thisN'
p6943
I37
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p6944
g59
(g98
S'%\x00\x00\x00'
tRp6945
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6946
I0
sg6379
g6467
sS'block_loop.thisRepN'
p6947
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6948
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p6949
Nsg69
Vn
sS'block_loop.thisTrialN'
p6950
I0
sg39
F0.6835458844761888
sg34
g752
(S'\x07\xdf\n\x13\x11\x1e\x0e\n!\xc0'
tRp6951
sa(dp6952
S'trial_loop.thisTrialN'
p6953
I38
sg6370
g6619
sS'block_loop.thisIndex'
p6954
g6364
sg38
S'right'
p6955
sg58
g62
sS'trial_loop.thisN'
p6956
I38
sg33
g6578
sg63
g64
sS'trial_loop.thisIndex'
p6957
g59
(g98
S'&\x00\x00\x00'
tRp6958
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6959
I0
sg6379
g6626
sS'block_loop.thisRepN'
p6960
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6961
I2
sg6384
g6585
sg55
g11
sS'block_loop.thisTrial'
p6962
Nsg69
Vn
sS'block_loop.thisTrialN'
p6963
I0
sg39
F0.58344518734884332
sg34
g752
(S'\x07\xdf\n\x13\x11\x1e\x14\x05\xb4\xf0'
tRp6964
sa(dp6965
S'trial_loop.thisTrialN'
p6966
I39
sg6370
g6476
sS'block_loop.thisIndex'
p6967
g6364
sg38
S'left'
p6968
sg58
g62
sS'trial_loop.thisN'
p6969
I39
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p6970
g59
(g98
S"'\x00\x00\x00"
tRp6971
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6972
I0
sg6379
g6484
sS'block_loop.thisRepN'
p6973
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6974
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p6975
Nsg69
Vn
sS'block_loop.thisTrialN'
p6976
I0
sg39
F0.70008820977091091
sg34
g752
(S'\x07\xdf\n\x13\x11\x1e\x19\x0f\x1b0'
tRp6977
sa(dp6978
S'trial_loop.thisTrialN'
p6979
I40
sg6370
S'18-mms.png'
p6980
sS'block_loop.thisIndex'
p6981
g6364
sg38
S'left'
p6982
sg58
g62
sS'trial_loop.thisN'
p6983
I40
sg33
g6670
sg63
g64
sS'trial_loop.thisIndex'
p6984
g59
(g98
S'(\x00\x00\x00'
tRp6985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6986
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p6987
sS'block_loop.thisRepN'
p6988
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6989
I2
sg6384
g6677
sg55
g11
sS'block_loop.thisTrial'
p6990
Nsg69
Vn
sS'block_loop.thisTrialN'
p6991
I0
sg39
F0.65023315433063544
sg34
g752
(S"\x07\xdf\n\x13\x11\x1e\x1f\x0b'x"
tRp6992
sa(dp6993
S'trial_loop.thisTrialN'
p6994
I41
sg6370
S'41-peanuts_redo.png'
p6995
sS'block_loop.thisIndex'
p6996
g6364
sg38
S'left'
p6997
sg58
g62
sS'trial_loop.thisN'
p6998
I41
sg33
S'41-peanuts_redo.png'
p6999
sg63
g64
sS'trial_loop.thisIndex'
p7000
g59
(g98
S')\x00\x00\x00'
tRp7001
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7002
I0
sg6379
S'45-chewy_nougat_redo.png'
p7003
sS'block_loop.thisRepN'
p7004
I2
sg6382
g6999
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7005
I2
sg6384
S'45-chewy_nougat_redo.png'
p7006
sg55
g11
sS'block_loop.thisTrial'
p7007
Nsg69
Vn
sS'block_loop.thisTrialN'
p7008
I0
sg39
F0.73354206414296641
sg34
g752
(S'\x07\xdf\n\x13\x11\x1e%\x06=\xa8'
tRp7009
sa(dp7010
S'trial_loop.thisTrialN'
p7011
I42
sg6370
S'22-daim.png'
p7012
sS'block_loop.thisIndex'
p7013
g6364
sg38
S'left'
p7014
sg58
g62
sS'trial_loop.thisN'
p7015
I42
sg33
S'7-olives.png'
p7016
sg63
g64
sS'trial_loop.thisIndex'
p7017
g59
(g98
S'*\x00\x00\x00'
tRp7018
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7019
I0
sg6379
S'7-olives.png'
p7020
sS'block_loop.thisRepN'
p7021
I2
sg6382
S'22-daim.png'
p7022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7023
I2
sg6384
g7016
sg55
g11
sS'block_loop.thisTrial'
p7024
Nsg69
Vn
sS'block_loop.thisTrialN'
p7025
I0
sg39
F0.68353248479979811
sg34
g752
(S'\x07\xdf\n\x13\x11\x1e+\x02\xc3\x08'
tRp7026
sa(dp7027
S'trial_loop.thisTrialN'
p7028
I43
sg6370
g6634
sS'block_loop.thisIndex'
p7029
g6364
sg38
S'right'
p7030
sg58
g62
sS'trial_loop.thisN'
p7031
I43
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p7032
g59
(g98
S'+\x00\x00\x00'
tRp7033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7034
I0
sg6379
g6641
sS'block_loop.thisRepN'
p7035
I2
sg6382
g6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7036
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p7037
Nsg69
Vn
sS'block_loop.thisTrialN'
p7038
I0
sg39
F0.71679788843903225
sg34
g752
(S'\x07\xdf\n\x13\x11\x1e0\r\x98x'
tRp7039
sa(dp7040
S'trial_loop.thisTrialN'
p7041
I44
sg6370
g6649
sS'block_loop.thisIndex'
p7042
g6364
sg38
S'right'
p7043
sg58
g62
sS'trial_loop.thisN'
p7044
I44
sg33
g6660
sg63
g64
sS'trial_loop.thisIndex'
p7045
g59
(g98
S',\x00\x00\x00'
tRp7046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7047
I0
sg6379
g6657
sS'block_loop.thisRepN'
p7048
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7049
I2
sg6384
g6660
sg55
g11
sS'block_loop.thisTrial'
p7050
Nsg69
Vn
sS'block_loop.thisTrialN'
p7051
I0
sg39
F0.58347483769102837
sg34
g752
(S'\x07\xdf\n\x13\x11\x1e6\t\xdfX'
tRp7052
sa(dp7053
S'trial_loop.thisTrialN'
p7054
I45
sg6370
g6557
sS'block_loop.thisIndex'
p7055
g6364
sg38
S'right'
p7056
sg58
g62
sS'trial_loop.thisN'
p7057
I45
sg33
g6561
sg63
g64
sS'trial_loop.thisIndex'
p7058
g59
(g98
S'-\x00\x00\x00'
tRp7059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7060
I0
sg6379
g6565
sS'block_loop.thisRepN'
p7061
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7062
I2
sg6384
g6568
sg55
g11
sS'block_loop.thisTrial'
p7063
Nsg69
Vn
sS'block_loop.thisTrialN'
p7064
I0
sg39
F0.7001198558100441
sg34
g752
(S'\x07\xdf\n\x13\x11\x1f\x00\x04\x03X'
tRp7065
sa(dp7066
S'trial_loop.thisTrialN'
p7067
I46
sg6370
S'8-liquorice_catherine_wheels.png'
p7068
sS'block_loop.thisIndex'
p7069
g6364
sg38
S'right'
p7070
sg58
g62
sS'trial_loop.thisN'
p7071
I46
sg33
g6702
sg63
g64
sS'trial_loop.thisIndex'
p7072
g59
(g98
S'.\x00\x00\x00'
tRp7073
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7074
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p7075
sS'block_loop.thisRepN'
p7076
I2
sg6382
g6702
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7077
I2
sg6384
g6709
sg55
g11
sS'block_loop.thisTrial'
p7078
Nsg69
Vn
sS'block_loop.thisTrialN'
p7079
I0
sg39
F0.91721909436455462
sg34
g752
(S'\x07\xdf\n\x13\x11\x1f\x05\x0f\x13`'
tRp7080
sa(dp7081
S'trial_loop.thisTrialN'
p7082
I47
sg6370
g6591
sS'block_loop.thisIndex'
p7083
g6364
sg38
S'left'
p7084
sg58
g62
sS'trial_loop.thisN'
p7085
I47
sg33
g6561
sg63
g64
sS'trial_loop.thisIndex'
p7086
g59
(g98
S'/\x00\x00\x00'
tRp7087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7088
I0
sg6379
g6598
sS'block_loop.thisRepN'
p7089
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7090
I2
sg6384
g6568
sg55
g11
sS'block_loop.thisTrial'
p7091
Nsg69
Vn
sS'block_loop.thisTrialN'
p7092
I0
sg39
F0.65020293378620408
sg34
g752
(S'\x07\xdf\n\x13\x11\x1f\x0b\x0ew '
tRp7093
sa(dp7094
S'trial_loop.thisTrialN'
p7095
I48
sg6370
S'49-yorkie.png'
p7096
sS'block_loop.thisIndex'
p7097
g6364
sg38
S'left'
p7098
sg58
g62
sS'trial_loop.thisN'
p7099
I48
sg33
g6653
sg63
g64
sS'trial_loop.thisIndex'
p7100
g59
(g98
S'0\x00\x00\x00'
tRp7101
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7102
I0
sg6379
S'35-raisins.png'
p7103
sS'block_loop.thisRepN'
p7104
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7105
I2
sg6384
g6660
sg55
g11
sS'block_loop.thisTrial'
p7106
Nsg69
Vn
sS'block_loop.thisTrialN'
p7107
I0
sg39
F0.60023440876466339
sg34
g752
(S'\x07\xdf\n\x13\x11\x1f\x11\t\x8dP'
tRp7108
sa(dp7109
S'trial_loop.thisTrialN'
p7110
I49
sg6370
S'45-chewy_nougat_redo.png'
p7111
sS'block_loop.thisIndex'
p7112
g6364
sg38
S'right'
p7113
sg58
g62
sS'trial_loop.thisN'
p7114
I49
sg33
g7006
sg63
g64
sS'trial_loop.thisIndex'
p7115
g59
(g98
S'1\x00\x00\x00'
tRp7116
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7117
I0
sg6379
S'41-peanuts_redo.png'
p7118
sS'block_loop.thisRepN'
p7119
I2
sg6382
g6999
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7120
I2
sg6384
g7006
sg55
g11
sS'block_loop.thisTrial'
p7121
Nsg69
Vn
sS'block_loop.thisTrialN'
p7122
I0
sg39
F0.65014135230740067
sg34
g752
(S'\x07\xdf\n\x13\x11\x1f\x17\x03\xef\xd0'
tRp7123
sa(dp7124
S'trial_loop.thisTrialN'
p7125
I50
sg6370
S'48-twix.png'
p7126
sS'block_loop.thisIndex'
p7127
g6364
sg38
S'right'
p7128
sg58
g62
sS'trial_loop.thisN'
p7129
I50
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p7130
g59
(g98
S'2\x00\x00\x00'
tRp7131
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7132
I0
sg6379
S'50-polo.png'
p7133
sS'block_loop.thisRepN'
p7134
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7135
I2
sg6384
g6726
sg55
g11
sS'block_loop.thisTrial'
p7136
Nsg69
Vn
sS'block_loop.thisTrialN'
p7137
I0
sg39
F1.1334353799284145
sg34
g752
(S'\x07\xdf\n\x13\x11\x1f\x1c\x0e\x86\xc0'
tRp7138
sa(dp7139
S'trial_loop.thisTrialN'
p7140
I51
sg6370
S'44-crunch.png'
p7141
sS'block_loop.thisIndex'
p7142
g6364
sg38
S'right'
p7143
sg58
g62
sS'trial_loop.thisN'
p7144
I51
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p7145
g59
(g98
S'3\x00\x00\x00'
tRp7146
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7147
I0
sg6379
S'26-walkers_smoky_bacon.png'
p7148
sS'block_loop.thisRepN'
p7149
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7150
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p7151
Nsg69
Vn
sS'block_loop.thisTrialN'
p7152
I0
sg39
F0.76678294922749046
sg34
g752
(S'\x07\xdf\n\x13\x11\x1f#\x01\xbdP'
tRp7153
sa(dp7154
S'trial_loop.thisTrialN'
p7155
I52
sg6370
g7111
sS'block_loop.thisIndex'
p7156
g6364
sg38
S'right'
p7157
sg58
g62
sS'trial_loop.thisN'
p7158
I52
sg33
g6999
sg63
g64
sS'trial_loop.thisIndex'
p7159
g59
(g98
S'4\x00\x00\x00'
tRp7160
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7161
I0
sg6379
g7118
sS'block_loop.thisRepN'
p7162
I2
sg6382
g6999
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7163
I2
sg6384
g7006
sg55
g11
sS'block_loop.thisTrial'
p7164
Nsg69
Vn
sS'block_loop.thisTrialN'
p7165
I0
sg39
F0.76685678998546791
sg34
g752
(S'\x07\xdf\n\x13\x11\x1f(\r\xfe\x08'
tRp7166
sa(dp7167
S'trial_loop.thisTrialN'
p7168
I53
sg6370
g6634
sS'block_loop.thisIndex'
p7169
g6364
sg38
S'right'
p7170
sg58
g62
sS'trial_loop.thisN'
p7171
I53
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p7172
g59
(g98
S'5\x00\x00\x00'
tRp7173
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7174
I0
sg6379
g6641
sS'block_loop.thisRepN'
p7175
I2
sg6382
g6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7176
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p7177
Nsg69
Vn
sS'block_loop.thisTrialN'
p7178
I0
sg39
F0.6001149520961917
sg34
g752
(S'\x07\xdf\n\x13\x11\x1f.\n\xc1\xe8'
tRp7179
sa(dp7180
S'trial_loop.thisTrialN'
p7181
I54
sg6370
g6408
sS'block_loop.thisIndex'
p7182
g6364
sg38
S'left'
p7183
sg58
g62
sS'trial_loop.thisN'
p7184
I54
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7185
g59
(g98
S'6\x00\x00\x00'
tRp7186
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7187
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7188
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7189
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7190
Nsg69
Vn
sS'block_loop.thisTrialN'
p7191
I0
sg39
F0.63344906470229034
sg34
g752
(S'\x07\xdf\n\x13\x11\x1f4\x05_\x00'
tRp7192
sa(dp7193
S'trial_loop.thisTrialN'
p7194
I55
sg6370
g6786
sS'block_loop.thisIndex'
p7195
g6364
sg38
S'right'
p7196
sg58
g62
sS'trial_loop.thisN'
p7197
I55
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p7198
g59
(g98
S'7\x00\x00\x00'
tRp7199
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7200
I0
sg6379
g6793
sS'block_loop.thisRepN'
p7201
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7202
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7203
Nsg69
Vn
sS'block_loop.thisTrialN'
p7204
I0
sg39
F0.56686636932863621
sg34
g752
(S'\x07\xdf\n\x13\x11\x1f:\x00:\x98'
tRp7205
sa(dp7206
S'trial_loop.thisTrialN'
p7207
I56
sg6370
g6715
sS'block_loop.thisIndex'
p7208
g6364
sg38
S'left'
p7209
sg58
g62
sS'trial_loop.thisN'
p7210
I56
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p7211
g59
(g98
S'8\x00\x00\x00'
tRp7212
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7213
I0
sg6379
g6723
sS'block_loop.thisRepN'
p7214
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7215
I2
sg6384
g6726
sg55
g11
sS'block_loop.thisTrial'
p7216
Nsg69
Vn
sS'block_loop.thisTrialN'
p7217
I0
sg39
F0.95011472401529318
sg34
g752
(S'\x07\xdf\n\x13\x11 \x03\tbX'
tRp7218
sa(dp7219
S'trial_loop.thisTrialN'
p7220
I57
sg6370
g6557
sS'block_loop.thisIndex'
p7221
g6364
sg38
S'right'
p7222
sg58
g62
sS'trial_loop.thisN'
p7223
I57
sg33
g6561
sg63
g64
sS'trial_loop.thisIndex'
p7224
g59
(g98
S'9\x00\x00\x00'
tRp7225
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7226
I0
sg6379
g6565
sS'block_loop.thisRepN'
p7227
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7228
I2
sg6384
g6568
sg55
g11
sS'block_loop.thisTrial'
p7229
Nsg69
Vn
sS'block_loop.thisTrialN'
p7230
I0
sg39
F0.81687036071889452
sg34
g752
(S'\x07\xdf\n\x13\x11 \t\t\x00\xb0'
tRp7231
sa(dp7232
S'trial_loop.thisTrialN'
p7233
I58
sg6370
g6619
sS'block_loop.thisIndex'
p7234
g6364
sg38
S'right'
p7235
sg58
g62
sS'trial_loop.thisN'
p7236
I58
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p7237
g59
(g98
S':\x00\x00\x00'
tRp7238
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7239
I0
sg6379
g6626
sS'block_loop.thisRepN'
p7240
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7241
I2
sg6384
g6585
sg55
g11
sS'block_loop.thisTrial'
p7242
Nsg69
Vn
sS'block_loop.thisTrialN'
p7243
I0
sg39
F0.7838812184490962
sg34
g752
(S'\x07\xdf\n\x13\x11 \x0f\x06\xb6\xc0'
tRp7244
sa(dp7245
S'trial_loop.thisTrialN'
p7246
I59
sg6370
g6493
sS'block_loop.thisIndex'
p7247
g6364
sg38
S'left'
p7248
sg58
g62
sS'trial_loop.thisN'
p7249
I59
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p7250
g59
(g98
S';\x00\x00\x00'
tRp7251
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7252
I0
sg6379
g6501
sS'block_loop.thisRepN'
p7253
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7254
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p7255
Nsg69
Vn
sS'block_loop.thisTrialN'
p7256
I0
sg39
F0.7165028105082456
sg34
g752
(S'\x07\xdf\n\x13\x11 \x15\x03\xf3\xb8'
tRp7257
sa(dp7258
S'trial_loop.thisTrialN'
p7259
I60
sg6370
S'29-beans.png'
p7260
sS'block_loop.thisIndex'
p7261
g6364
sg38
S'left'
p7262
sg58
g62
sS'trial_loop.thisN'
p7263
I60
sg33
S'29-beans.png'
p7264
sg63
g64
sS'trial_loop.thisIndex'
p7265
g59
(g98
S'<\x00\x00\x00'
tRp7266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7267
I0
sg6379
S'46-pistachios.png'
p7268
sS'block_loop.thisRepN'
p7269
I2
sg6382
g7264
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7270
I2
sg6384
S'46-pistachios.png'
p7271
sg55
g11
sS'block_loop.thisTrial'
p7272
Nsg69
Vn
sS'block_loop.thisTrialN'
p7273
I0
sg39
F1.2168657421098033
sg34
g752
(S'\x07\xdf\n\x13\x11 \x1b\x00:\x98'
tRp7274
sa(dp7275
S'trial_loop.thisTrialN'
p7276
I61
sg6370
g6523
sS'block_loop.thisIndex'
p7277
g6364
sg38
S'right'
p7278
sg58
g62
sS'trial_loop.thisN'
p7279
I61
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p7280
g59
(g98
S'=\x00\x00\x00'
tRp7281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7282
I0
sg6379
g6531
sS'block_loop.thisRepN'
p7283
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7284
I2
sg6384
g6534
sg55
g11
sS'block_loop.thisTrial'
p7285
Nsg69
Vn
sS'block_loop.thisTrialN'
p7286
I0
sg39
F0.68352108082035556
sg34
g752
(S'\x07\xdf\n\x13\x11 !\x03\xe4\x18'
tRp7287
sa(dp7288
S'trial_loop.thisTrialN'
p7289
I62
sg6370
g6683
sS'block_loop.thisIndex'
p7290
g6364
sg38
S'right'
p7291
sg58
g62
sS'trial_loop.thisN'
p7292
I62
sg33
g6504
sg63
g64
sS'trial_loop.thisIndex'
p7293
g59
(g98
S'>\x00\x00\x00'
tRp7294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7295
I0
sg6379
g6690
sS'block_loop.thisRepN'
p7296
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7297
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p7298
Nsg69
Vn
sS'block_loop.thisTrialN'
p7299
I0
sg39
F0.61662591645290377
sg34
g752
(S'\x07\xdf\n\x13\x11 &\x0e\xf4 '
tRp7300
sa(dp7301
S'trial_loop.thisTrialN'
p7302
I63
sg6370
g7068
sS'block_loop.thisIndex'
p7303
g6364
sg38
S'right'
p7304
sg58
g62
sS'trial_loop.thisN'
p7305
I63
sg33
g6702
sg63
g64
sS'trial_loop.thisIndex'
p7306
g59
(g98
S'?\x00\x00\x00'
tRp7307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7308
I0
sg6379
g7075
sS'block_loop.thisRepN'
p7309
I2
sg6382
g6702
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7310
I2
sg6384
g6709
sg55
g11
sS'block_loop.thisTrial'
p7311
Nsg69
Vn
sS'block_loop.thisTrialN'
p7312
I0
sg39
F0.7668585005812929
sg34
g752
(S'\x07\xdf\n\x13\x11 ,\t\x918'
tRp7313
sa(dp7314
S'trial_loop.thisTrialN'
p7315
I64
sg6370
g6408
sS'block_loop.thisIndex'
p7316
g6364
sg38
S'left'
p7317
sg58
g62
sS'trial_loop.thisN'
p7318
I64
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7319
g59
(g98
S'@\x00\x00\x00'
tRp7320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7321
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7322
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7323
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7324
Nsg69
Vn
sS'block_loop.thisTrialN'
p7325
I0
sg39
F0.58348567147186259
sg34
g752
(S'\x07\xdf\n\x13\x11 2\x06\x93\x98'
tRp7326
sa(dp7327
S'trial_loop.thisTrialN'
p7328
I65
sg6370
g6634
sS'block_loop.thisIndex'
p7329
g6364
sg38
S'right'
p7330
sg58
g62
sS'trial_loop.thisN'
p7331
I65
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p7332
g59
(g98
S'A\x00\x00\x00'
tRp7333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7334
I0
sg6379
g6641
sS'block_loop.thisRepN'
p7335
I2
sg6382
g6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7336
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p7337
Nsg69
Vn
sS'block_loop.thisTrialN'
p7338
I0
sg39
F0.73347848696721485
sg34
g752
(S'\x07\xdf\n\x13\x11 8\x00\xb7\x98'
tRp7339
sa(dp7340
S'trial_loop.thisTrialN'
p7341
I66
sg6370
g7068
sS'block_loop.thisIndex'
p7342
g6364
sg38
S'right'
p7343
sg58
g62
sS'trial_loop.thisN'
p7344
I66
sg33
g6702
sg63
g64
sS'trial_loop.thisIndex'
p7345
g59
(g98
S'B\x00\x00\x00'
tRp7346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7347
I0
sg6379
g7075
sS'block_loop.thisRepN'
p7348
I2
sg6382
g6702
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7349
I2
sg6384
g6709
sg55
g11
sS'block_loop.thisTrial'
p7350
Nsg69
Vn
sS'block_loop.thisTrialN'
p7351
I0
sg39
F0.65011797414990724
sg34
g752
(S'\x07\xdf\n\x13\x11!\x01\x0c@\xb8'
tRp7352
sa(dp7353
S'trial_loop.thisTrialN'
p7354
I67
sg6370
g6913
sS'block_loop.thisIndex'
p7355
g6364
sg38
S'left'
p7356
sg58
g62
sS'trial_loop.thisN'
p7357
I67
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7358
g59
(g98
S'C\x00\x00\x00'
tRp7359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7360
I0
sg6379
g6920
sS'block_loop.thisRepN'
p7361
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7362
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7363
Nsg69
Vn
sS'block_loop.thisTrialN'
p7364
I0
sg39
F0.70008108228284982
sg34
g752
(S'\x07\xdf\n\x13\x11!\x07\x07\x95h'
tRp7365
sa(dp7366
S'trial_loop.thisTrialN'
p7367
I68
sg6370
g6408
sS'block_loop.thisIndex'
p7368
g6364
sg38
S'left'
p7369
sg58
g62
sS'trial_loop.thisN'
p7370
I68
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7371
g59
(g98
S'D\x00\x00\x00'
tRp7372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7373
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7374
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7375
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7376
Nsg69
Vn
sS'block_loop.thisTrialN'
p7377
I0
sg39
F0.61678899333492154
sg34
g752
(S'\x07\xdf\n\x13\x11!\r\x03c0'
tRp7378
sa(dp7379
S'trial_loop.thisTrialN'
p7380
I69
sg6370
g7012
sS'block_loop.thisIndex'
p7381
g6364
sg38
S'left'
p7382
sg58
g62
sS'trial_loop.thisN'
p7383
I69
sg33
g7022
sg63
g64
sS'trial_loop.thisIndex'
p7384
g59
(g98
S'E\x00\x00\x00'
tRp7385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7386
I0
sg6379
g7020
sS'block_loop.thisRepN'
p7387
I2
sg6382
g7022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7388
I2
sg6384
g7016
sg55
g11
sS'block_loop.thisTrial'
p7389
Nsg69
Vn
sS'block_loop.thisTrialN'
p7390
I0
sg39
F0.60012493058093241
sg34
g752
(S'\x07\xdf\n\x13\x11!\x12\rFp'
tRp7391
sa(dp7392
S'trial_loop.thisTrialN'
p7393
I70
sg6370
g7096
sS'block_loop.thisIndex'
p7394
g6364
sg38
S'left'
p7395
sg58
g62
sS'trial_loop.thisN'
p7396
I70
sg33
g6660
sg63
g64
sS'trial_loop.thisIndex'
p7397
g59
(g98
S'F\x00\x00\x00'
tRp7398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7399
I0
sg6379
g7103
sS'block_loop.thisRepN'
p7400
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7401
I2
sg6384
g6660
sg55
g11
sS'block_loop.thisTrial'
p7402
Nsg69
Vn
sS'block_loop.thisTrialN'
p7403
I0
sg39
F0.5835463976545725
sg34
g752
(S'\x07\xdf\n\x13\x11!\x18\x07\xe3\x88'
tRp7404
sa(dp7405
S'trial_loop.thisTrialN'
p7406
I71
sg6370
g7141
sS'block_loop.thisIndex'
p7407
g6364
sg38
S'right'
p7408
sg58
g62
sS'trial_loop.thisN'
p7409
I71
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p7410
g59
(g98
S'G\x00\x00\x00'
tRp7411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7412
I0
sg6379
g7148
sS'block_loop.thisRepN'
p7413
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7414
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p7415
Nsg69
Vn
sS'block_loop.thisTrialN'
p7416
I0
sg39
F0.78351001896589878
sg34
g752
(S'\x07\xdf\n\x13\x11!\x1e\x02\x07\x88'
tRp7417
sa(dp7418
S'trial_loop.thisTrialN'
p7419
I72
sg6370
g7111
sS'block_loop.thisIndex'
p7420
g6364
sg38
S'right'
p7421
sg58
g62
sS'trial_loop.thisN'
p7422
I72
sg33
g6999
sg63
g64
sS'trial_loop.thisIndex'
p7423
g59
(g98
S'H\x00\x00\x00'
tRp7424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7425
I0
sg6379
g7118
sS'block_loop.thisRepN'
p7426
I2
sg6382
g6999
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7427
I2
sg6384
g7006
sg55
g11
sS'block_loop.thisTrial'
p7428
Nsg69
Vn
sS'block_loop.thisTrialN'
p7429
I0
sg39
F0.85021616240192088
sg34
g752
(S'\x07\xdf\n\x13\x11!#\x0eH@'
tRp7430
sa(dp7431
S'trial_loop.thisTrialN'
p7432
I73
sg6370
g7260
sS'block_loop.thisIndex'
p7433
g6364
sg38
S'left'
p7434
sg58
g62
sS'trial_loop.thisN'
p7435
I73
sg33
g7264
sg63
g64
sS'trial_loop.thisIndex'
p7436
g59
(g98
S'I\x00\x00\x00'
tRp7437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7438
I0
sg6379
g7268
sS'block_loop.thisRepN'
p7439
I2
sg6382
g7264
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7440
I2
sg6384
g7271
sg55
g11
sS'block_loop.thisTrial'
p7441
Nsg69
Vn
sS'block_loop.thisTrialN'
p7442
I0
sg39
F1.0001456858190068
sg34
g752
(S'\x07\xdf\n\x13\x11!)\x0c\xb5\xe8'
tRp7443
sa(dp7444
S'trial_loop.thisTrialN'
p7445
I74
sg6370
g6408
sS'block_loop.thisIndex'
p7446
g6364
sg38
S'left'
p7447
sg58
g62
sS'trial_loop.thisN'
p7448
I74
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7449
g59
(g98
S'J\x00\x00\x00'
tRp7450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7451
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7452
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7453
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7454
Nsg69
Vn
sS'block_loop.thisTrialN'
p7455
I0
sg39
F0.78353339711975423
sg34
g752
(S'\x07\xdf\n\x13\x11!/\r\x07\xf0'
tRp7456
sa(dp7457
S'trial_loop.thisTrialN'
p7458
I75
sg6370
g7096
sS'block_loop.thisIndex'
p7459
g6364
sg38
S'left'
p7460
sg58
g62
sS'trial_loop.thisN'
p7461
I75
sg33
g6660
sg63
g64
sS'trial_loop.thisIndex'
p7462
g59
(g98
S'K\x00\x00\x00'
tRp7463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7464
I0
sg6379
g7103
sS'block_loop.thisRepN'
p7465
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7466
I2
sg6384
g6660
sg55
g11
sS'block_loop.thisTrial'
p7467
Nsg69
Vn
sS'block_loop.thisTrialN'
p7468
I0
sg39
F0.55015440986244357
sg34
g752
(S'\x07\xdf\n\x13\x11!5\nD\xe8'
tRp7469
sa(dp7470
S'trial_loop.thisTrialN'
p7471
I76
sg6370
g7068
sS'block_loop.thisIndex'
p7472
g6364
sg38
S'right'
p7473
sg58
g62
sS'trial_loop.thisN'
p7474
I76
sg33
g6702
sg63
g64
sS'trial_loop.thisIndex'
p7475
g59
(g98
S'L\x00\x00\x00'
tRp7476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7477
I0
sg6379
g7075
sS'block_loop.thisRepN'
p7478
I2
sg6382
g6702
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7479
I2
sg6384
g6709
sg55
g11
sS'block_loop.thisTrial'
p7480
Nsg69
Vn
sS'block_loop.thisTrialN'
p7481
I0
sg39
F1.0834970754513051
sg34
g752
(S'\x07\xdf\n\x13\x11!;\x03\xef\xd0'
tRp7482
sa(dp7483
S'trial_loop.thisTrialN'
p7484
I77
sg6370
g6523
sS'block_loop.thisIndex'
p7485
g6364
sg38
S'right'
p7486
sg58
g62
sS'trial_loop.thisN'
p7487
I77
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p7488
g59
(g98
S'M\x00\x00\x00'
tRp7489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7490
I0
sg6379
g6531
sS'block_loop.thisRepN'
p7491
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7492
I2
sg6384
g6534
sg55
g11
sS'block_loop.thisTrial'
p7493
Nsg69
Vn
sS'block_loop.thisTrialN'
p7494
I0
sg39
F0.83341867310082307
sg34
g752
(S'\x07\xdf\n\x13\x11"\x05\x05\xb1\x08'
tRp7495
sa(dp7496
S'trial_loop.thisTrialN'
p7497
I78
sg6370
g6493
sS'block_loop.thisIndex'
p7498
g6364
sg38
S'left'
p7499
sg58
g62
sS'trial_loop.thisN'
p7500
I78
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p7501
g59
(g98
S'N\x00\x00\x00'
tRp7502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7503
I0
sg6379
g6501
sS'block_loop.thisRepN'
p7504
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7505
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p7506
Nsg69
Vn
sS'block_loop.thisTrialN'
p7507
I0
sg39
F0.68319150586103206
sg34
g752
(S'\x07\xdf\n\x13\x11"\x0b\x03\xa5\x98'
tRp7508
sa(dp7509
S'trial_loop.thisTrialN'
p7510
I79
sg6370
g6829
sS'block_loop.thisIndex'
p7511
g6364
sg38
S'right'
p7512
sg58
g62
sS'trial_loop.thisN'
p7513
I79
sg33
g6544
sg63
g64
sS'trial_loop.thisIndex'
p7514
g59
(g98
S'O\x00\x00\x00'
tRp7515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7516
I0
sg6379
g6836
sS'block_loop.thisRepN'
p7517
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7518
I2
sg6384
g6551
sg55
g11
sS'block_loop.thisTrial'
p7519
Nsg69
Vn
sS'block_loop.thisTrialN'
p7520
I0
sg39
F0.85011495209982968
sg34
g752
(S'\x07\xdf\n\x13\x11"\x10\x0e\xb5\xa0'
tRp7521
sa(dp7522
S'trial_loop.thisTrialN'
p7523
I80
sg6370
g6698
sS'block_loop.thisIndex'
p7524
g6364
sg38
S'left'
p7525
sg58
g62
sS'trial_loop.thisN'
p7526
I80
sg33
g6702
sg63
g64
sS'trial_loop.thisIndex'
p7527
g59
(g98
S'P\x00\x00\x00'
tRp7528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7529
I0
sg6379
g6706
sS'block_loop.thisRepN'
p7530
I2
sg6382
g6702
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7531
I2
sg6384
g6709
sg55
g11
sS'block_loop.thisTrial'
p7532
Nsg69
Vn
sS'block_loop.thisTrialN'
p7533
I0
sg39
F0.60020903491749777
sg34
g752
(S'\x07\xdf\n\x13\x11"\x16\x0c\xe4\xc8'
tRp7534
sa(dp7535
S'trial_loop.thisTrialN'
p7536
I81
sg6370
g6391
sS'block_loop.thisIndex'
p7537
g6364
sg38
S'right'
p7538
sg58
g62
sS'trial_loop.thisN'
p7539
I81
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p7540
g59
(g98
S'Q\x00\x00\x00'
tRp7541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7542
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7543
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7544
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p7545
Nsg69
Vn
sS'block_loop.thisTrialN'
p7546
I0
sg39
F0.68342728310381062
sg34
g752
(S'\x07\xdf\n\x13\x11"\x1c\x07GH'
tRp7547
sa(dp7548
S'trial_loop.thisTrialN'
p7549
I82
sg6370
g6995
sS'block_loop.thisIndex'
p7550
g6364
sg38
S'left'
p7551
sg58
g62
sS'trial_loop.thisN'
p7552
I82
sg33
g6999
sg63
g64
sS'trial_loop.thisIndex'
p7553
g59
(g98
S'R\x00\x00\x00'
tRp7554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7555
I0
sg6379
g7003
sS'block_loop.thisRepN'
p7556
I2
sg6382
g6999
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7557
I2
sg6384
g7006
sg55
g11
sS'block_loop.thisTrial'
p7558
Nsg69
Vn
sS'block_loop.thisTrialN'
p7559
I0
sg39
F0.86714764844509773
sg34
g752
(S'\x07\xdf\n\x13\x11""\x02\xd6\x90'
tRp7560
sa(dp7561
S'trial_loop.thisTrialN'
p7562
I83
sg6370
g6980
sS'block_loop.thisIndex'
p7563
g6364
sg38
S'left'
p7564
sg58
g62
sS'trial_loop.thisN'
p7565
I83
sg33
g6670
sg63
g64
sS'trial_loop.thisIndex'
p7566
g59
(g98
S'S\x00\x00\x00'
tRp7567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7568
I0
sg6379
g6987
sS'block_loop.thisRepN'
p7569
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7570
I2
sg6384
g6677
sg55
g11
sS'block_loop.thisTrial'
p7571
Nsg69
Vn
sS'block_loop.thisTrialN'
p7572
I0
sg39
F0.65021946955675958
sg34
g752
(S'\x07\xdf\n\x13\x11"(\x01\x82\xb8'
tRp7573
sa(dp7574
S'trial_loop.thisTrialN'
p7575
I84
sg6370
g6371
sS'block_loop.thisIndex'
p7576
g6364
sg38
S'right'
p7577
sg58
g62
sS'trial_loop.thisN'
p7578
I84
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7579
g59
(g98
S'T\x00\x00\x00'
tRp7580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7581
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7582
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7583
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7584
Nsg69
Vn
sS'block_loop.thisTrialN'
p7585
I0
sg39
F0.69999640774767613
sg34
g752
(S'\x07\xdf\n\x13\x11"-\x0b\xdb('
tRp7586
sa(dp7587
S'trial_loop.thisTrialN'
p7588
I85
sg6370
g6523
sS'block_loop.thisIndex'
p7589
g6364
sg38
S'right'
p7590
sg58
g62
sS'trial_loop.thisN'
p7591
I85
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p7592
g59
(g98
S'U\x00\x00\x00'
tRp7593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7594
I0
sg6379
g6531
sS'block_loop.thisRepN'
p7595
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7596
I2
sg6384
g6534
sg55
g11
sS'block_loop.thisTrial'
p7597
Nsg69
Vn
sS'block_loop.thisTrialN'
p7598
I0
sg39
F0.65016273476794595
sg34
g752
(S'\x07\xdf\n\x13\x11"3\x07\xa8\xf0'
tRp7599
sa(dp7600
S'trial_loop.thisTrialN'
p7601
I86
sg6370
S'5-pineapple.png'
p7602
sS'block_loop.thisIndex'
p7603
g6364
sg38
S'left'
p7604
sg58
g62
sS'trial_loop.thisN'
p7605
I86
sg33
S'40-sardines.png'
p7606
sg63
g64
sS'trial_loop.thisIndex'
p7607
g59
(g98
S'V\x00\x00\x00'
tRp7608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7609
I0
sg6379
S'40-sardines.png'
p7610
sS'block_loop.thisRepN'
p7611
I2
sg6382
S'5-pineapple.png'
p7612
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7613
I2
sg6384
g7606
sg55
g11
sS'block_loop.thisTrial'
p7614
Nsg69
Vn
sS'block_loop.thisTrialN'
p7615
I0
sg39
F0.61680609930408536
sg34
g752
(S'\x07\xdf\n\x13\x11"9\x02\xfd\xa0'
tRp7616
sa(dp7617
S'trial_loop.thisTrialN'
p7618
I87
sg6370
g6683
sS'block_loop.thisIndex'
p7619
g6364
sg38
S'right'
p7620
sg58
g62
sS'trial_loop.thisN'
p7621
I87
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p7622
g59
(g98
S'W\x00\x00\x00'
tRp7623
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7624
I0
sg6379
g6690
sS'block_loop.thisRepN'
p7625
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7626
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p7627
Nsg69
Vn
sS'block_loop.thisTrialN'
p7628
I0
sg39
F0.83320998030831106
sg34
g752
(S'\x07\xdf\n\x13\x11#\x02\x0c\xe0\xe0'
tRp7629
sa(dp7630
S'trial_loop.thisTrialN'
p7631
I88
sg6370
g7012
sS'block_loop.thisIndex'
p7632
g6364
sg38
S'left'
p7633
sg58
g62
sS'trial_loop.thisN'
p7634
I88
sg33
g7022
sg63
g64
sS'trial_loop.thisIndex'
p7635
g59
(g98
S'X\x00\x00\x00'
tRp7636
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7637
I0
sg6379
g7020
sS'block_loop.thisRepN'
p7638
I2
sg6382
g7022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7639
I2
sg6384
g7016
sg55
g11
sS'block_loop.thisTrial'
p7640
Nsg69
Vn
sS'block_loop.thisTrialN'
p7641
I0
sg39
F0.6835783858114155
sg34
g752
(S'\x07\xdf\n\x13\x11#\x08\n\xd1\x88'
tRp7642
sa(dp7643
S'trial_loop.thisTrialN'
p7644
I89
sg6370
g6493
sS'block_loop.thisIndex'
p7645
g6364
sg38
S'left'
p7646
sg58
g62
sS'trial_loop.thisN'
p7647
I89
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p7648
g59
(g98
S'Y\x00\x00\x00'
tRp7649
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7650
I0
sg6379
g6501
sS'block_loop.thisRepN'
p7651
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7652
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p7653
Nsg69
Vn
sS'block_loop.thisTrialN'
p7654
I0
sg39
F0.78317474201321602
sg34
g752
(S'\x07\xdf\n\x13\x11#\x0e\x06d\xb8'
tRp7655
sa(dp7656
S'trial_loop.thisTrialN'
p7657
I90
sg6370
S'7-olives.png'
p7658
sS'block_loop.thisIndex'
p7659
g6364
sg38
S'right'
p7660
sg58
g62
sS'trial_loop.thisN'
p7661
I90
sg33
g7022
sg63
g64
sS'trial_loop.thisIndex'
p7662
g59
(g98
S'Z\x00\x00\x00'
tRp7663
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7664
I0
sg6379
S'22-daim.png'
p7665
sS'block_loop.thisRepN'
p7666
I2
sg6382
g7022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7667
I2
sg6384
g7016
sg55
g11
sS'block_loop.thisTrial'
p7668
Nsg69
Vn
sS'block_loop.thisTrialN'
p7669
I0
sg39
F0.65011540825435077
sg34
g752
(S'\x07\xdf\n\x13\x11#\x14\x03\xa1\xb0'
tRp7670
sa(dp7671
S'trial_loop.thisTrialN'
p7672
I91
sg6370
g6476
sS'block_loop.thisIndex'
p7673
g6364
sg38
S'left'
p7674
sg58
g62
sS'trial_loop.thisN'
p7675
I91
sg33
g6487
sg63
g64
sS'trial_loop.thisIndex'
p7676
g59
(g98
S'[\x00\x00\x00'
tRp7677
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7678
I0
sg6379
g6484
sS'block_loop.thisRepN'
p7679
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7680
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p7681
Nsg69
Vn
sS'block_loop.thisTrialN'
p7682
I0
sg39
F0.71686659740589675
sg34
g752
(S'\x07\xdf\n\x13\x11#\x19\x0e8\xa0'
tRp7683
sa(dp7684
S'trial_loop.thisTrialN'
p7685
I92
sg6370
g7012
sS'block_loop.thisIndex'
p7686
g6364
sg38
S'left'
p7687
sg58
g62
sS'trial_loop.thisN'
p7688
I92
sg33
g7022
sg63
g64
sS'trial_loop.thisIndex'
p7689
g59
(g98
S'\\\x00\x00\x00'
tRp7690
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7691
I0
sg6379
g7020
sS'block_loop.thisRepN'
p7692
I2
sg6382
g7022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7693
I2
sg6384
g7016
sg55
g11
sS'block_loop.thisTrial'
p7694
Nsg69
Vn
sS'block_loop.thisTrialN'
p7695
I0
sg39
F0.65017100264958572
sg34
g752
(S'\x07\xdf\n\x13\x11#\x1f\nD\xe8'
tRp7696
sa(dp7697
S'trial_loop.thisTrialN'
p7698
I93
sg6370
g6557
sS'block_loop.thisIndex'
p7699
g6364
sg38
S'right'
p7700
sg58
g62
sS'trial_loop.thisN'
p7701
I93
sg33
g6561
sg63
g64
sS'trial_loop.thisIndex'
p7702
g59
(g98
S']\x00\x00\x00'
tRp7703
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7704
I0
sg6379
g6565
sS'block_loop.thisRepN'
p7705
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7706
I2
sg6384
g6568
sg55
g11
sS'block_loop.thisTrial'
p7707
Nsg69
Vn
sS'block_loop.thisTrialN'
p7708
I0
sg39
F0.63353088824442239
sg34
g752
(S'\x07\xdf\n\x13\x11#%\x05[\x18'
tRp7709
sa(dp7710
S'trial_loop.thisTrialN'
p7711
I94
sg6370
g6786
sS'block_loop.thisIndex'
p7712
g6364
sg38
S'right'
p7713
sg58
g62
sS'trial_loop.thisN'
p7714
I94
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7715
g59
(g98
S'^\x00\x00\x00'
tRp7716
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7717
I0
sg6379
g6793
sS'block_loop.thisRepN'
p7718
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7719
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7720
Nsg69
Vn
sS'block_loop.thisTrialN'
p7721
I0
sg39
F0.6668889492029848
sg34
g752
(S'\x07\xdf\n\x13\x11#+\x00qH'
tRp7722
sa(dp7723
S'trial_loop.thisTrialN'
p7724
I95
sg6370
g7602
sS'block_loop.thisIndex'
p7725
g6364
sg38
S'left'
p7726
sg58
g62
sS'trial_loop.thisN'
p7727
I95
sg33
g7612
sg63
g64
sS'trial_loop.thisIndex'
p7728
g59
(g98
S'_\x00\x00\x00'
tRp7729
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7730
I0
sg6379
g7610
sS'block_loop.thisRepN'
p7731
I2
sg6382
g7612
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7732
I2
sg6384
g7606
sg55
g11
sS'block_loop.thisTrial'
p7733
Nsg69
Vn
sS'block_loop.thisTrialN'
p7734
I0
sg39
F0.73345339821389643
sg34
g752
(S'\x07\xdf\n\x13\x11#0\x0b\x088'
tRp7735
sa(dp7736
S'trial_loop.thisTrialN'
p7737
I96
sg6370
g6425
sS'block_loop.thisIndex'
p7738
g6364
sg38
S'left'
p7739
sg58
g62
sS'trial_loop.thisN'
p7740
I96
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p7741
g59
(g98
S'`\x00\x00\x00'
tRp7742
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7743
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7744
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7745
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p7746
Nsg69
Vn
sS'block_loop.thisTrialN'
p7747
I0
sg39
F0.76687731714628171
sg34
g752
(S'\x07\xdf\n\x13\x11#6\x07\x8d\x98'
tRp7748
sa(dp7749
S'trial_loop.thisTrialN'
p7750
I97
sg6370
g6557
sS'block_loop.thisIndex'
p7751
g6364
sg38
S'right'
p7752
sg58
g62
sS'trial_loop.thisN'
p7753
I97
sg33
g6568
sg63
g64
sS'trial_loop.thisIndex'
p7754
g59
(g98
S'a\x00\x00\x00'
tRp7755
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7756
I0
sg6379
g6565
sS'block_loop.thisRepN'
p7757
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7758
I2
sg6384
g6568
sg55
g11
sS'block_loop.thisTrial'
p7759
Nsg69
Vn
sS'block_loop.thisTrialN'
p7760
I0
sg39
F0.55010736845360952
sg34
g752
(S'\x07\xdf\n\x13\x11$\x00\x04\x8f\xf8'
tRp7761
sa(dp7762
S'trial_loop.thisTrialN'
p7763
I98
sg6370
g7260
sS'block_loop.thisIndex'
p7764
g6364
sg38
S'left'
p7765
sg58
g62
sS'trial_loop.thisN'
p7766
I98
sg33
g7264
sg63
g64
sS'trial_loop.thisIndex'
p7767
g59
(g98
S'b\x00\x00\x00'
tRp7768
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7769
I0
sg6379
g7268
sS'block_loop.thisRepN'
p7770
I2
sg6382
g7264
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7771
I2
sg6384
g7271
sg55
g11
sS'block_loop.thisTrial'
p7772
Nsg69
Vn
sS'block_loop.thisTrialN'
p7773
I0
sg39
F0.66685844356106827
sg34
g752
(S'\x07\xdf\n\x13\x11$\x05\r>\xa0'
tRp7774
sa(dp7775
S'trial_loop.thisTrialN'
p7776
I99
sg6370
g6574
sS'block_loop.thisIndex'
p7777
g6364
sg38
S'left'
p7778
sg58
g62
sS'trial_loop.thisN'
p7779
I99
sg33
g6578
sg63
g64
sS'trial_loop.thisIndex'
p7780
g59
(g98
S'c\x00\x00\x00'
tRp7781
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7782
I0
sg6379
g6582
sS'block_loop.thisRepN'
p7783
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7784
I2
sg6384
g6585
sg55
g11
sS'block_loop.thisTrial'
p7785
Nsg69
Vn
sS'block_loop.thisTrialN'
p7786
I0
sg39
F0.6000935696392844
sg34
g752
(S'\x07\xdf\n\x13\x11$\x0b\x08\xcd\xe8'
tRp7787
sa(dp7788
S'trial_loop.thisTrialN'
p7789
I100
sg6370
g6540
sS'block_loop.thisIndex'
p7790
g6364
sg38
S'left'
p7791
sg58
g62
sS'trial_loop.thisN'
p7792
I100
sg33
g6544
sg63
g64
sS'trial_loop.thisIndex'
p7793
g59
(g98
S'd\x00\x00\x00'
tRp7794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7795
I0
sg6379
g6548
sS'block_loop.thisRepN'
p7796
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7797
I2
sg6384
g6551
sg55
g11
sS'block_loop.thisTrial'
p7798
Nsg69
Vn
sS'block_loop.thisTrialN'
p7799
I0
sg39
F0.55022654002095805
sg34
g752
(S'\x07\xdf\n\x13\x11$\x11\x030h'
tRp7800
sa(dp7801
S'trial_loop.thisTrialN'
p7802
I101
sg6370
g6391
sS'block_loop.thisIndex'
p7803
g6364
sg38
S'right'
p7804
sg58
g62
sS'trial_loop.thisN'
p7805
I101
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p7806
g59
(g98
S'e\x00\x00\x00'
tRp7807
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7808
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7809
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7810
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p7811
Nsg69
Vn
sS'block_loop.thisTrialN'
p7812
I0
sg39
F0.61678329134520027
sg34
g752
(S'\x07\xdf\n\x13\x11$\x16\x0c\x1d\x90'
tRp7813
sa(dp7814
S'trial_loop.thisTrialN'
p7815
I102
sg6370
g6715
sS'block_loop.thisIndex'
p7816
g6364
sg38
S'left'
p7817
sg58
g62
sS'trial_loop.thisN'
p7818
I102
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p7819
g59
(g98
S'f\x00\x00\x00'
tRp7820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7821
I0
sg6379
g6723
sS'block_loop.thisRepN'
p7822
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7823
I2
sg6384
g6726
sg55
g11
sS'block_loop.thisTrial'
p7824
Nsg69
Vn
sS'block_loop.thisTrialN'
p7825
I0
sg39
F0.65020008279316244
sg34
g752
(S'\x07\xdf\n\x13\x11$\x1c\x06\xba\xa8'
tRp7826
sa(dp7827
S'trial_loop.thisTrialN'
p7828
I103
sg6370
g6371
sS'block_loop.thisIndex'
p7829
g6364
sg38
S'right'
p7830
sg58
g62
sS'trial_loop.thisN'
p7831
I103
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7832
g59
(g98
S'g\x00\x00\x00'
tRp7833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7834
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7835
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7836
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7837
Nsg69
Vn
sS'block_loop.thisTrialN'
p7838
I0
sg39
F0.56676515902290703
sg34
g752
(S'\x07\xdf\n\x13\x11$"\x01\xd0\xd8'
tRp7839
sa(dp7840
S'trial_loop.thisTrialN'
p7841
I104
sg6370
S'46-pistachios.png'
p7842
sS'block_loop.thisIndex'
p7843
g6364
sg38
S'right'
p7844
sg58
g62
sS'trial_loop.thisN'
p7845
I104
sg33
g7264
sg63
g64
sS'trial_loop.thisIndex'
p7846
g59
(g98
S'h\x00\x00\x00'
tRp7847
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7848
I0
sg6379
S'29-beans.png'
p7849
sS'block_loop.thisRepN'
p7850
I2
sg6382
g7264
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7851
I2
sg6384
g7271
sg55
g11
sS'block_loop.thisTrial'
p7852
Nsg69
Vn
sS'block_loop.thisTrialN'
p7853
I0
sg39
F0.75019073153089266
sg34
g752
(S"\x07\xdf\n\x13\x11$'\n\xfc\x80"
tRp7854
sa(dp7855
S'trial_loop.thisTrialN'
p7856
I105
sg6370
g6829
sS'block_loop.thisIndex'
p7857
g6364
sg38
S'right'
p7858
sg58
g62
sS'trial_loop.thisN'
p7859
I105
sg33
g6544
sg63
g64
sS'trial_loop.thisIndex'
p7860
g59
(g98
S'i\x00\x00\x00'
tRp7861
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7862
I0
sg6379
g6836
sS'block_loop.thisRepN'
p7863
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7864
I2
sg6384
g6551
sg55
g11
sS'block_loop.thisTrial'
p7865
Nsg69
Vn
sS'block_loop.thisTrialN'
p7866
I0
sg39
F0.53356390276167076
sg34
g752
(S'\x07\xdf\n\x13\x11$-\x07\xbcx'
tRp7867
sa(dp7868
S'trial_loop.thisTrialN'
p7869
I106
sg6370
g6523
sS'block_loop.thisIndex'
p7870
g6364
sg38
S'right'
p7871
sg58
g62
sS'trial_loop.thisN'
p7872
I106
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p7873
g59
(g98
S'j\x00\x00\x00'
tRp7874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7875
I0
sg6379
g6531
sS'block_loop.thisRepN'
p7876
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7877
I2
sg6384
g6534
sg55
g11
sS'block_loop.thisTrial'
p7878
Nsg69
Vn
sS'block_loop.thisTrialN'
p7879
I0
sg39
F0.71686973350006156
sg34
g752
(S'\x07\xdf\n\x13\x11$3\x01,\xc8'
tRp7880
sa(dp7881
S'trial_loop.thisTrialN'
p7882
I107
sg6370
g6371
sS'block_loop.thisIndex'
p7883
g6364
sg38
S'right'
p7884
sg58
g62
sS'trial_loop.thisN'
p7885
I107
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7886
g59
(g98
S'k\x00\x00\x00'
tRp7887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7888
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7889
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7890
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7891
Nsg69
Vn
sS'block_loop.thisTrialN'
p7892
I0
sg39
F0.7000551382334379
sg34
g752
(S'\x07\xdf\n\x13\x11$8\x0cwh'
tRp7893
sa(dp7894
S'trial_loop.thisTrialN'
p7895
I108
sg6370
g7111
sS'block_loop.thisIndex'
p7896
g6364
sg38
S'left'
p7897
sg58
g62
sS'trial_loop.thisN'
p7898
I108
sg33
g6999
sg63
g64
sS'trial_loop.thisIndex'
p7899
g59
(g98
S'l\x00\x00\x00'
tRp7900
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7901
I0
sg6379
g7118
sS'block_loop.thisRepN'
p7902
I2
sg6382
g6999
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7903
I2
sg6384
g7006
sg55
g11
sS'block_loop.thisTrial'
p7904
Nsg69
Vn
sS'block_loop.thisTrialN'
p7905
I0
sg39
F0.60022728128024028
sg34
g752
(S'\x07\xdf\n\x13\x11%\x02\x08\x83\xb0'
tRp7906
sa(dp7907
S'trial_loop.thisTrialN'
p7908
I109
sg6370
g6698
sS'block_loop.thisIndex'
p7909
g6364
sg38
S'left'
p7910
sg58
g62
sS'trial_loop.thisN'
p7911
I109
sg33
g6702
sg63
g64
sS'trial_loop.thisIndex'
p7912
g59
(g98
S'm\x00\x00\x00'
tRp7913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7914
I0
sg6379
g6706
sS'block_loop.thisRepN'
p7915
I2
sg6382
g6702
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7916
I2
sg6384
g6709
sg55
g11
sS'block_loop.thisTrial'
p7917
Nsg69
Vn
sS'block_loop.thisTrialN'
p7918
I0
sg39
F0.75011717587040039
sg34
g752
(S'\x07\xdf\n\x13\x11%\x08\x02\xe60'
tRp7919
sa(dp7920
S'trial_loop.thisTrialN'
p7921
I110
sg6370
g6540
sS'block_loop.thisIndex'
p7922
g6364
sg38
S'left'
p7923
sg58
g62
sS'trial_loop.thisN'
p7924
I110
sg33
g6551
sg63
g64
sS'trial_loop.thisIndex'
p7925
g59
(g98
S'n\x00\x00\x00'
tRp7926
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7927
I0
sg6379
g6548
sS'block_loop.thisRepN'
p7928
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7929
I2
sg6384
g6551
sg55
g11
sS'block_loop.thisTrial'
p7930
Nsg69
Vn
sS'block_loop.thisTrialN'
p7931
I0
sg39
F0.68354217818341567
sg34
g752
(S'\x07\xdf\n\x13\x11%\r\x0e\xecP'
tRp7932
sa(dp7933
S'trial_loop.thisTrialN'
p7934
I111
sg6370
g6786
sS'block_loop.thisIndex'
p7935
g6364
sg38
S'right'
p7936
sg58
g62
sS'trial_loop.thisN'
p7937
I111
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7938
g59
(g98
S'o\x00\x00\x00'
tRp7939
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7940
I0
sg6379
g6793
sS'block_loop.thisRepN'
p7941
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7942
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7943
Nsg69
Vn
sS'block_loop.thisTrialN'
p7944
I0
sg39
F0.65014534370129695
sg34
g752
(S'\x07\xdf\n\x13\x11%\x13\n{\x98'
tRp7945
sa(dp7946
S'trial_loop.thisTrialN'
p7947
I112
sg6370
g6476
sS'block_loop.thisIndex'
p7948
g6364
sg38
S'left'
p7949
sg58
g62
sS'trial_loop.thisN'
p7950
I112
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p7951
g59
(g98
S'p\x00\x00\x00'
tRp7952
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7953
I0
sg6379
g6484
sS'block_loop.thisRepN'
p7954
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7955
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p7956
Nsg69
Vn
sS'block_loop.thisTrialN'
p7957
I0
sg39
F0.65023172883229563
sg34
g752
(S'\x07\xdf\n\x13\x11%\x19\x05\xd0H'
tRp7958
sa(dp7959
S'trial_loop.thisTrialN'
p7960
I113
sg6370
g6870
sS'block_loop.thisIndex'
p7961
g6364
sg38
S'left'
p7962
sg58
g62
sS'trial_loop.thisN'
p7963
I113
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p7964
g59
(g98
S'q\x00\x00\x00'
tRp7965
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7966
I0
sg6379
g6877
sS'block_loop.thisRepN'
p7967
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7968
I2
sg6384
g6534
sg55
g11
sS'block_loop.thisTrial'
p7969
Nsg69
Vn
sS'block_loop.thisTrialN'
p7970
I0
sg39
F0.93342557250798563
sg34
g752
(S'\x07\xdf\n\x13\x11%\x1f\x00\xea`'
tRp7971
sa(dp7972
S'trial_loop.thisTrialN'
p7973
I114
sg6370
g6391
sS'block_loop.thisIndex'
p7974
g6364
sg38
S'right'
p7975
sg58
g62
sS'trial_loop.thisN'
p7976
I114
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p7977
g59
(g98
S'r\x00\x00\x00'
tRp7978
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7979
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7980
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7981
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p7982
Nsg69
Vn
sS'block_loop.thisTrialN'
p7983
I0
sg39
F1.0334450162881694
sg34
g752
(S'\x07\xdf\n\x13\x11%%\x00J8'
tRp7984
sa(dp7985
S'trial_loop.thisTrialN'
p7986
I115
sg6370
g7260
sS'block_loop.thisIndex'
p7987
g6364
sg38
S'left'
p7988
sg58
g62
sS'trial_loop.thisN'
p7989
I115
sg33
g7264
sg63
g64
sS'trial_loop.thisIndex'
p7990
g59
(g98
S's\x00\x00\x00'
tRp7991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7992
I0
sg6379
g7268
sS'block_loop.thisRepN'
p7993
I2
sg6382
g7264
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7994
I2
sg6384
g7271
sg55
g11
sS'block_loop.thisTrial'
p7995
Nsg69
Vn
sS'block_loop.thisTrialN'
p7996
I0
sg39
F0.733445700530865
sg34
g752
(S'\x07\xdf\n\x13\x11%+\x01S\xd8'
tRp7997
sa(dp7998
S'trial_loop.thisTrialN'
p7999
I116
sg6370
g7068
sS'block_loop.thisIndex'
p8000
g6364
sg38
S'right'
p8001
sg58
g62
sS'trial_loop.thisN'
p8002
I116
sg33
g6702
sg63
g64
sS'trial_loop.thisIndex'
p8003
g59
(g98
S't\x00\x00\x00'
tRp8004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8005
I0
sg6379
g7075
sS'block_loop.thisRepN'
p8006
I2
sg6382
g6702
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8007
I2
sg6384
g6709
sg55
g11
sS'block_loop.thisTrial'
p8008
Nsg69
Vn
sS'block_loop.thisTrialN'
p8009
I0
sg39
F1.0001385583309457
sg34
g752
(S'\x07\xdf\n\x13\x11%0\r\x1bx'
tRp8010
sa(dp8011
S'trial_loop.thisTrialN'
p8012
I117
sg6370
g6758
sS'block_loop.thisIndex'
p8013
g6364
sg38
S'right'
p8014
sg58
g62
sS'trial_loop.thisN'
p8015
I117
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p8016
g59
(g98
S'u\x00\x00\x00'
tRp8017
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8018
I0
sg6379
g6765
sS'block_loop.thisRepN'
p8019
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8020
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8021
Nsg69
Vn
sS'block_loop.thisTrialN'
p8022
I0
sg39
F0.63345391139228013
sg34
g752
(S'\x07\xdf\n\x13\x11%6\r\xac\x00'
tRp8023
sa(dp8024
S'trial_loop.thisTrialN'
p8025
I118
sg6370
g7141
sS'block_loop.thisIndex'
p8026
g6364
sg38
S'right'
p8027
sg58
g62
sS'trial_loop.thisN'
p8028
I118
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p8029
g59
(g98
S'v\x00\x00\x00'
tRp8030
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8031
I0
sg6379
g7148
sS'block_loop.thisRepN'
p8032
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8033
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p8034
Nsg69
Vn
sS'block_loop.thisTrialN'
p8035
I0
sg39
F0.66726157418088405
sg34
g752
(S'\x07\xdf\n\x13\x11&\x00\x08\x87\x98'
tRp8036
sa(dp8037
S'trial_loop.thisTrialN'
p8038
I119
sg6370
g7658
sS'block_loop.thisIndex'
p8039
g6364
sg38
S'right'
p8040
sg58
g62
sS'trial_loop.thisN'
p8041
I119
sg33
g7022
sg63
g64
sS'trial_loop.thisIndex'
p8042
g59
(g98
S'w\x00\x00\x00'
tRp8043
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8044
I0
sg6379
g7665
sS'block_loop.thisRepN'
p8045
I2
sg6382
g7022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8046
I2
sg6384
g7016
sg55
g11
sS'block_loop.thisTrial'
p8047
Nsg69
Vn
sS'block_loop.thisTrialN'
p8048
I0
sg39
F0.63339860209816834
sg34
g752
(S'\x07\xdf\n\x13\x11&\x06\x03\xdcH'
tRp8049
sa(dp8050
S'trial_loop.thisTrialN'
p8051
I120
sg6370
g7842
sS'block_loop.thisIndex'
p8052
g6364
sg38
S'right'
p8053
sg58
g62
sS'trial_loop.thisN'
p8054
I120
sg33
g7264
sg63
g64
sS'trial_loop.thisIndex'
p8055
g59
(g98
S'x\x00\x00\x00'
tRp8056
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8057
I0
sg6379
g7849
sS'block_loop.thisRepN'
p8058
I2
sg6382
g7264
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8059
I2
sg6384
g7271
sg55
g11
sS'block_loop.thisTrial'
p8060
Nsg69
Vn
sS'block_loop.thisTrialN'
p8061
I0
sg39
F0.60019535014362191
sg34
g752
(S'\x07\xdf\n\x13\x11&\x0b\r\xfa '
tRp8062
sa(dp8063
S'trial_loop.thisTrialN'
p8064
I121
sg6370
g6801
sS'block_loop.thisIndex'
p8065
g6364
sg38
S'left'
p8066
sg58
g62
sS'trial_loop.thisN'
p8067
I121
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p8068
g59
(g98
S'y\x00\x00\x00'
tRp8069
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8070
I0
sg6379
g6808
sS'block_loop.thisRepN'
p8071
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8072
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8073
Nsg69
Vn
sS'block_loop.thisTrialN'
p8074
I0
sg39
F0.65018782351762638
sg34
g752
(S'\x07\xdf\n\x13\x11&\x11\x08\x978'
tRp8075
sa(dp8076
S'trial_loop.thisTrialN'
p8077
I122
sg6370
S'40-sardines.png'
p8078
sS'block_loop.thisIndex'
p8079
g6364
sg38
S'right'
p8080
sg58
g62
sS'trial_loop.thisN'
p8081
I122
sg33
g7612
sg63
g64
sS'trial_loop.thisIndex'
p8082
g59
(g98
S'z\x00\x00\x00'
tRp8083
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8084
I0
sg6379
S'5-pineapple.png'
p8085
sS'block_loop.thisRepN'
p8086
I2
sg6382
g7612
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8087
I2
sg6384
g7606
sg55
g11
sS'block_loop.thisTrial'
p8088
Nsg69
Vn
sS'block_loop.thisTrialN'
p8089
I0
sg39
F0.71677821657794993
sg34
g752
(S'\x07\xdf\n\x13\x11&\x17\x03\xb1P'
tRp8090
sa(dp8091
S'trial_loop.thisTrialN'
p8092
I123
sg6370
g6913
sS'block_loop.thisIndex'
p8093
g6364
sg38
S'left'
p8094
sg58
g62
sS'trial_loop.thisN'
p8095
I123
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8096
g59
(g98
S'{\x00\x00\x00'
tRp8097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8098
I0
sg6379
g6920
sS'block_loop.thisRepN'
p8099
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8100
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8101
Nsg69
Vn
sS'block_loop.thisTrialN'
p8102
I0
sg39
F0.66670876635180321
sg34
g752
(S'\x07\xdf\n\x13\x11&\x1c\x0e\xfb\xf0'
tRp8103
sa(dp8104
S'trial_loop.thisTrialN'
p8105
I124
sg6370
g6666
sS'block_loop.thisIndex'
p8106
g6364
sg38
S'right'
p8107
sg58
g62
sS'trial_loop.thisN'
p8108
I124
sg33
g6677
sg63
g64
sS'trial_loop.thisIndex'
p8109
g59
(g98
S'|\x00\x00\x00'
tRp8110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8111
I0
sg6379
g6674
sS'block_loop.thisRepN'
p8112
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8113
I2
sg6384
g6677
sg55
g11
sS'block_loop.thisTrial'
p8114
Nsg69
Vn
sS'block_loop.thisTrialN'
p8115
I0
sg39
F0.85057681320176926
sg34
g752
(S'\x07\xdf\n\x13\x11&"\n\x8f '
tRp8116
sa(dp8117
S'trial_loop.thisTrialN'
p8118
I125
sg6370
g6459
sS'block_loop.thisIndex'
p8119
g6364
sg38
S'left'
p8120
sg58
g62
sS'trial_loop.thisN'
p8121
I125
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p8122
g59
(g98
S'}\x00\x00\x00'
tRp8123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8124
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8125
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8126
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8127
Nsg69
Vn
sS'block_loop.thisTrialN'
p8128
I0
sg39
F0.88353659023414366
sg34
g752
(S'\x07\xdf\n\x13\x11&(\x08\xbeH'
tRp8129
sa(dp8130
S'trial_loop.thisTrialN'
p8131
I126
sg6370
g6619
sS'block_loop.thisIndex'
p8132
g6364
sg38
S'right'
p8133
sg58
g62
sS'trial_loop.thisN'
p8134
I126
sg33
g6585
sg63
g64
sS'trial_loop.thisIndex'
p8135
g59
(g98
S'~\x00\x00\x00'
tRp8136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8137
I0
sg6379
g6626
sS'block_loop.thisRepN'
p8138
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8139
I2
sg6384
g6585
sg55
g11
sS'block_loop.thisTrial'
p8140
Nsg69
Vn
sS'block_loop.thisTrialN'
p8141
I0
sg39
F0.69997074879574939
sg34
g752
(S'\x07\xdf\n\x13\x11&.\x07jp'
tRp8142
sa(dp8143
S'trial_loop.thisTrialN'
p8144
I127
sg6370
g6885
sS'block_loop.thisIndex'
p8145
g6364
sg38
S'right'
p8146
sg58
g62
sS'trial_loop.thisN'
p8147
I127
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8148
g59
(g98
S'\x7f\x00\x00\x00'
tRp8149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8150
I0
sg6379
g6892
sS'block_loop.thisRepN'
p8151
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8152
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8153
Nsg69
Vn
sS'block_loop.thisTrialN'
p8154
I0
sg39
F0.68346662682961323
sg34
g752
(S'\x07\xdf\n\x13\x11&4\x03r\xd0'
tRp8155
sa(dp8156
S'trial_loop.thisTrialN'
p8157
I128
sg6370
g6391
sS'block_loop.thisIndex'
p8158
g6364
sg38
S'right'
p8159
sg58
g62
sS'trial_loop.thisN'
p8160
I128
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p8161
g59
(g98
S'\x80\x00\x00\x00'
tRp8162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8163
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8164
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8165
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8166
Nsg69
Vn
sS'block_loop.thisTrialN'
p8167
I0
sg39
F0.65019751689760596
sg34
g752
(S'\x07\xdf\n\x13\x11&9\x0eH@'
tRp8168
sa(dp8169
S'trial_loop.thisTrialN'
p8170
I129
sg6370
g7126
sS'block_loop.thisIndex'
p8171
g6364
sg38
S'right'
p8172
sg58
g62
sS'trial_loop.thisN'
p8173
I129
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p8174
g59
(g98
S'\x81\x00\x00\x00'
tRp8175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8176
I0
sg6379
g7133
sS'block_loop.thisRepN'
p8177
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8178
I2
sg6384
g6726
sg55
g11
sS'block_loop.thisTrial'
p8179
Nsg69
Vn
sS'block_loop.thisTrialN'
p8180
I0
sg39
F0.68342386190852267
sg34
g752
(S"\x07\xdf\n\x13\x11'\x03\t\x9c\xf0"
tRp8181
sa(dp8182
S'trial_loop.thisTrialN'
p8183
I130
sg6370
g7658
sS'block_loop.thisIndex'
p8184
g6364
sg38
S'right'
p8185
sg58
g62
sS'trial_loop.thisN'
p8186
I130
sg33
g7022
sg63
g64
sS'trial_loop.thisIndex'
p8187
g59
(g98
S'\x82\x00\x00\x00'
tRp8188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8189
I0
sg6379
g7665
sS'block_loop.thisRepN'
p8190
I2
sg6382
g7022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8191
I2
sg6384
g7016
sg55
g11
sS'block_loop.thisTrial'
p8192
Nsg69
Vn
sS'block_loop.thisTrialN'
p8193
I0
sg39
F0.65016872185151442
sg34
g752
(S"\x07\xdf\n\x13\x11'\t\x050 "
tRp8194
sa(dp8195
S'trial_loop.thisTrialN'
p8196
I131
sg6370
g6649
sS'block_loop.thisIndex'
p8197
g6364
sg38
S'right'
p8198
sg58
g62
sS'trial_loop.thisN'
p8199
I131
sg33
g6653
sg63
g64
sS'trial_loop.thisIndex'
p8200
g59
(g98
S'\x83\x00\x00\x00'
tRp8201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8202
I0
sg6379
g6657
sS'block_loop.thisRepN'
p8203
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8204
I2
sg6384
g6660
sg55
g11
sS'block_loop.thisTrial'
p8205
Nsg69
Vn
sS'block_loop.thisTrialN'
p8206
I0
sg39
F0.56687919880278059
sg34
g752
(S"\x07\xdf\n\x13\x11'\x0f\x00FP"
tRp8207
sa(dp8208
S'trial_loop.thisTrialN'
p8209
I132
sg6370
g6995
sS'block_loop.thisIndex'
p8210
g6364
sg38
S'left'
p8211
sg58
g62
sS'trial_loop.thisN'
p8212
I132
sg33
g6999
sg63
g64
sS'trial_loop.thisIndex'
p8213
g59
(g98
S'\x84\x00\x00\x00'
tRp8214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8215
I0
sg6379
g7003
sS'block_loop.thisRepN'
p8216
I2
sg6382
g6999
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8217
I2
sg6384
g7006
sg55
g11
sS'block_loop.thisTrial'
p8218
Nsg69
Vn
sS'block_loop.thisTrialN'
p8219
I0
sg39
F0.70019056047021877
sg34
g752
(S"\x07\xdf\n\x13\x11'\x14\tq\xf8"
tRp8220
sa(dp8221
S'trial_loop.thisTrialN'
p8222
I133
sg6370
g6980
sS'block_loop.thisIndex'
p8223
g6364
sg38
S'left'
p8224
sg58
g62
sS'trial_loop.thisN'
p8225
I133
sg33
g6670
sg63
g64
sS'trial_loop.thisIndex'
p8226
g59
(g98
S'\x85\x00\x00\x00'
tRp8227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8228
I0
sg6379
g6987
sS'block_loop.thisRepN'
p8229
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8230
I2
sg6384
g6677
sg55
g11
sS'block_loop.thisTrial'
p8231
Nsg69
Vn
sS'block_loop.thisTrialN'
p8232
I0
sg39
F0.65011911455076188
sg34
g752
(S"\x07\xdf\n\x13\x11'\x1a\x05zX"
tRp8233
sa(dp8234
S'trial_loop.thisTrialN'
p8235
I134
sg6370
g6619
sS'block_loop.thisIndex'
p8236
g6364
sg38
S'right'
p8237
sg58
g62
sS'trial_loop.thisN'
p8238
I134
sg33
g6578
sg63
g64
sS'trial_loop.thisIndex'
p8239
g59
(g98
S'\x86\x00\x00\x00'
tRp8240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8241
I0
sg6379
g6626
sS'block_loop.thisRepN'
p8242
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8243
I2
sg6384
g6585
sg55
g11
sS'block_loop.thisTrial'
p8244
Nsg69
Vn
sS'block_loop.thisTrialN'
p8245
I0
sg39
F0.65010599997549434
sg34
g752
(S"\x07\xdf\n\x13\x11' \x00\x94p"
tRp8246
sa(dp8247
S'trial_loop.thisTrialN'
p8248
I135
sg6370
g6442
sS'block_loop.thisIndex'
p8249
g6364
sg38
S'left'
p8250
sg58
g62
sS'trial_loop.thisN'
p8251
I135
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p8252
g59
(g98
S'\x87\x00\x00\x00'
tRp8253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8254
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8255
I2
sg6382
g6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8256
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p8257
Nsg69
Vn
sS'block_loop.thisTrialN'
p8258
I0
sg39
F0.6834155940268829
sg34
g752
(S"\x07\xdf\n\x13\x11'%\n\xec\xe0"
tRp8259
sa(dp8260
S'trial_loop.thisTrialN'
p8261
I136
sg6370
g7842
sS'block_loop.thisIndex'
p8262
g6364
sg38
S'right'
p8263
sg58
g62
sS'trial_loop.thisN'
p8264
I136
sg33
g7264
sg63
g64
sS'trial_loop.thisIndex'
p8265
g59
(g98
S'\x88\x00\x00\x00'
tRp8266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8267
I0
sg6379
g7849
sS'block_loop.thisRepN'
p8268
I2
sg6382
g7264
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8269
I2
sg6384
g7271
sg55
g11
sS'block_loop.thisTrial'
p8270
Nsg69
Vn
sS'block_loop.thisTrialN'
p8271
I0
sg39
F0.95022249161047512
sg34
g752
(S"\x07\xdf\n\x13\x11'+\x06\xba\xa8"
tRp8272
sa(dp8273
S'trial_loop.thisTrialN'
p8274
I137
sg6370
g7012
sS'block_loop.thisIndex'
p8275
g6364
sg38
S'left'
p8276
sg58
g62
sS'trial_loop.thisN'
p8277
I137
sg33
g7022
sg63
g64
sS'trial_loop.thisIndex'
p8278
g59
(g98
S'\x89\x00\x00\x00'
tRp8279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8280
I0
sg6379
g7020
sS'block_loop.thisRepN'
p8281
I2
sg6382
g7022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8282
I2
sg6384
g7016
sg55
g11
sS'block_loop.thisTrial'
p8283
Nsg69
Vn
sS'block_loop.thisTrialN'
p8284
I0
sg39
F0.550181209207949
sg34
g752
(S"\x07\xdf\n\x13\x11'1\x06Y\x00"
tRp8285
sa(dp8286
S'trial_loop.thisTrialN'
p8287
I138
sg6370
g6649
sS'block_loop.thisIndex'
p8288
g6364
sg38
S'right'
p8289
sg58
g62
sS'trial_loop.thisN'
p8290
I138
sg33
g6653
sg63
g64
sS'trial_loop.thisIndex'
p8291
g59
(g98
S'\x8a\x00\x00\x00'
tRp8292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8293
I0
sg6379
g6657
sS'block_loop.thisRepN'
p8294
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8295
I2
sg6384
g6660
sg55
g11
sS'block_loop.thisTrial'
p8296
Nsg69
Vn
sS'block_loop.thisTrialN'
p8297
I0
sg39
F0.56688119449972874
sg34
g752
(S"\x07\xdf\n\x13\x11'7\x00\x03\xe8"
tRp8298
sa(dp8299
S'trial_loop.thisTrialN'
p8300
I139
sg6370
g6698
sS'block_loop.thisIndex'
p8301
g6364
sg38
S'left'
p8302
sg58
g62
sS'trial_loop.thisN'
p8303
I139
sg33
g6702
sg63
g64
sS'trial_loop.thisIndex'
p8304
g59
(g98
S'\x8b\x00\x00\x00'
tRp8305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8306
I0
sg6379
g6706
sS'block_loop.thisRepN'
p8307
I2
sg6382
g6702
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8308
I2
sg6384
g6709
sg55
g11
sS'block_loop.thisTrial'
p8309
Nsg69
Vn
sS'block_loop.thisTrialN'
p8310
I0
sg39
F0.73348618465388427
sg34
g752
(S'\x07\xdf\n\x13\x11(\x00\t+\xa8'
tRp8311
sa(dp8312
S'trial_loop.thisTrialN'
p8313
I140
sg6370
g6995
sS'block_loop.thisIndex'
p8314
g6364
sg38
S'left'
p8315
sg58
g62
sS'trial_loop.thisN'
p8316
I140
sg33
g6999
sg63
g64
sS'trial_loop.thisIndex'
p8317
g59
(g98
S'\x8c\x00\x00\x00'
tRp8318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8319
I0
sg6379
g7003
sS'block_loop.thisRepN'
p8320
I2
sg6382
g6999
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8321
I2
sg6384
g7006
sg55
g11
sS'block_loop.thisTrial'
p8322
Nsg69
Vn
sS'block_loop.thisTrialN'
p8323
I0
sg39
F0.63353060314693721
sg34
g752
(S'\x07\xdf\n\x13\x11(\x06\x05\xb1\x08'
tRp8324
sa(dp8325
S'trial_loop.thisTrialN'
p8326
I141
sg6370
g7141
sS'block_loop.thisIndex'
p8327
g6364
sg38
S'right'
p8328
sg58
g62
sS'trial_loop.thisN'
p8329
I141
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p8330
g59
(g98
S'\x8d\x00\x00\x00'
tRp8331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8332
I0
sg6379
g7148
sS'block_loop.thisRepN'
p8333
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8334
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p8335
Nsg69
Vn
sS'block_loop.thisTrialN'
p8336
I0
sg39
F0.63344592861176352
sg34
g752
(S'\x07\xdf\n\x13\x11(\x0c\x00\x8c\xa0'
tRp8337
sa(dp8338
S'trial_loop.thisTrialN'
p8339
I142
sg6370
g6649
sS'block_loop.thisIndex'
p8340
g6364
sg38
S'right'
p8341
sg58
g62
sS'trial_loop.thisN'
p8342
I142
sg33
g6653
sg63
g64
sS'trial_loop.thisIndex'
p8343
g59
(g98
S'\x8e\x00\x00\x00'
tRp8344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8345
I0
sg6379
g6657
sS'block_loop.thisRepN'
p8346
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8347
I2
sg6384
g6660
sg55
g11
sS'block_loop.thisTrial'
p8348
Nsg69
Vn
sS'block_loop.thisTrialN'
p8349
I0
sg39
F0.5835637887212215
sg34
g752
(S'\x07\xdf\n\x13\x11(\x11\n\xaax'
tRp8350
sa(dp8351
S'trial_loop.thisTrialN'
p8352
I143
sg6370
g6476
sS'block_loop.thisIndex'
p8353
g6364
sg38
S'left'
p8354
sg58
g62
sS'trial_loop.thisN'
p8355
I143
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p8356
g59
(g98
S'\x8f\x00\x00\x00'
tRp8357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8358
I0
sg6379
g6484
sS'block_loop.thisRepN'
p8359
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8360
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8361
Nsg69
Vn
sS'block_loop.thisTrialN'
p8362
I0
sg39
F0.56676059743040241
sg34
g752
(S'\x07\xdf\n\x13\x11(\x17\x04\xcex'
tRp8363
sa(dp8364
S'trial_loop.thisTrialN'
p8365
I144
sg6370
g7602
sS'block_loop.thisIndex'
p8366
g6364
sg38
S'left'
p8367
sg58
g62
sS'trial_loop.thisN'
p8368
I144
sg33
g7612
sg63
g64
sS'trial_loop.thisIndex'
p8369
g59
(g98
S'\x90\x00\x00\x00'
tRp8370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8371
I0
sg6379
g7610
sS'block_loop.thisRepN'
p8372
I2
sg6382
g7612
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8373
I2
sg6384
g7606
sg55
g11
sS'block_loop.thisTrial'
p8374
Nsg69
Vn
sS'block_loop.thisTrialN'
p8375
I0
sg39
F0.65011113176660729
sg34
g752
(S'\x07\xdf\n\x13\x11(\x1c\r\xf68'
tRp8376
sa(dp8377
S'trial_loop.thisTrialN'
p8378
I145
sg6370
g7141
sS'block_loop.thisIndex'
p8379
g6364
sg38
S'right'
p8380
sg58
g62
sS'trial_loop.thisN'
p8381
I145
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p8382
g59
(g98
S'\x91\x00\x00\x00'
tRp8383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8384
I0
sg6379
g7148
sS'block_loop.thisRepN'
p8385
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8386
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p8387
Nsg69
Vn
sS'block_loop.thisTrialN'
p8388
I0
sg39
F0.61687566356704338
sg34
g752
(S'\x07\xdf\n\x13\x11("\tJ\xe8'
tRp8389
sa(dp8390
S'trial_loop.thisTrialN'
p8391
I146
sg6370
g6870
sS'block_loop.thisIndex'
p8392
g6364
sg38
S'left'
p8393
sg58
g62
sS'trial_loop.thisN'
p8394
I146
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p8395
g59
(g98
S'\x92\x00\x00\x00'
tRp8396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8397
I0
sg6379
g6877
sS'block_loop.thisRepN'
p8398
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8399
I2
sg6384
g6534
sg55
g11
sS'block_loop.thisTrial'
p8400
Nsg69
Vn
sS'block_loop.thisTrialN'
p8401
I0
sg39
F0.68352250632233336
sg34
g752
(S'\x07\xdf\n\x13\x11((\x03\xeb\xe8'
tRp8402
sa(dp8403
S'trial_loop.thisTrialN'
p8404
I147
sg6370
g6786
sS'block_loop.thisIndex'
p8405
g6364
sg38
S'right'
p8406
sg58
g62
sS'trial_loop.thisN'
p8407
I147
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8408
g59
(g98
S'\x93\x00\x00\x00'
tRp8409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8410
I0
sg6379
g6793
sS'block_loop.thisRepN'
p8411
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8412
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8413
Nsg69
Vn
sS'block_loop.thisTrialN'
p8414
I0
sg39
F0.5501045174569299
sg34
g752
(S'\x07\xdf\n\x13\x11(-\x0e\xbdp'
tRp8415
sa(dp8416
S'trial_loop.thisTrialN'
p8417
I148
sg6370
g7602
sS'block_loop.thisIndex'
p8418
g6364
sg38
S'left'
p8419
sg58
g62
sS'trial_loop.thisN'
p8420
I148
sg33
g7612
sg63
g64
sS'trial_loop.thisIndex'
p8421
g59
(g98
S'\x94\x00\x00\x00'
tRp8422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8423
I0
sg6379
g7610
sS'block_loop.thisRepN'
p8424
I2
sg6382
g7612
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8425
I2
sg6384
g7606
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vn
sS'block_loop.thisTrialN'
p8427
I0
sg39
F0.58349764564627549
sg34
g752
(S'\x07\xdf\n\x13\x11(3\x08hX'
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g6758
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'right'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g6487
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g6765
sS'block_loop.thisRepN'
p8437
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8438
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vn
sS'block_loop.thisTrialN'
p8440
I0
sg39
F0.66680570016251295
sg34
g752
(S'\x07\xdf\n\x13\x11(9\x02\x8cX'
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g6540
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'left'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6544
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g6548
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8451
I2
sg6384
g6551
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vn
sS'block_loop.thisTrialN'
p8453
I0
sg39
F0.55020088107266929
sg34
g752
(S'\x07\xdf\n\x13\x11)\x02\ra\xc8'
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g7658
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'right'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g7022
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g7665
sS'block_loop.thisRepN'
p8463
I2
sg6382
g7022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8464
I2
sg6384
g7016
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vn
sS'block_loop.thisTrialN'
p8466
I0
sg39
F0.56686922032167786
sg34
g752
(S'\x07\xdf\n\x13\x11)\x08\x07\x0c\xb0'
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g6801
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'left'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g6808
sS'block_loop.thisRepN'
p8476
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8477
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vn
sS'block_loop.thisTrialN'
p8479
I0
sg39
F0.61676533007994294
sg34
g752
(S'\x07\xdf\n\x13\x11)\x0e\x00\xf20'
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g6666
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'right'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6670
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g6674
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8490
I2
sg6384
g6677
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vn
sS'block_loop.thisTrialN'
p8492
I0
sg39
F0.5668657991263899
sg34
g752
(S'\x07\xdf\n\x13\x11)\x13\n\xd1\x88'
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g6870
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'left'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g6877
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8503
I2
sg6384
g6534
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vn
sS'block_loop.thisTrialN'
p8505
I0
sg39
F1.0168202972563449
sg34
g752
(S'\x07\xdf\n\x13\x11)\x19\x04\xba\xf0'
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g6885
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'right'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g6892
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8516
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vn
sS'block_loop.thisTrialN'
p8518
I0
sg39
F0.55011535123776412
sg34
g752
(S'\x07\xdf\n\x13\x11)\x1f\x05\x86\x10'
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g8078
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'right'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g7612
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g8085
sS'block_loop.thisRepN'
p8528
I2
sg6382
g7612
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8529
I2
sg6384
g7606
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vn
sS'block_loop.thisTrialN'
p8531
I0
sg39
F0.8835331690388557
sg34
g752
(S'\x07\xdf\n\x13\x11)$\x0e8\xa0'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g7842
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'right'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g7264
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g7849
sS'block_loop.thisRepN'
p8541
I2
sg6382
g7264
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8542
I2
sg6384
g7271
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vn
sS'block_loop.thisTrialN'
p8544
I0
sg39
F0.98354405983991455
sg34
g752
(S'\x07\xdf\n\x13\x11)*\r\x1f`'
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g6995
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'left'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g7006
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g7003
sS'block_loop.thisRepN'
p8554
I2
sg6382
g6999
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8555
I2
sg6384
g7006
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vn
sS'block_loop.thisTrialN'
p8557
I0
sg39
F0.56680592824341147
sg34
g752
(S'\x07\xdf\n\x13\x11)0\r6\xd0'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g6459
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'left'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8568
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vn
sS'block_loop.thisTrialN'
p8570
I0
sg39
F0.60020048193109687
sg34
g752
(S'\x07\xdf\n\x13\x11)6\x07\x1cP'
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g6829
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'right'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6544
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g6836
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8581
I2
sg6384
g6551
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vn
sS'block_loop.thisTrialN'
p8583
I0
sg39
F0.60059534466927289
sg34
g752
(S'\x07\xdf\n\x13\x11*\x00\x01~\xd0'
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g6758
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'right'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g6487
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g6765
sS'block_loop.thisRepN'
p8593
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8594
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vn
sS'block_loop.thisTrialN'
p8596
I0
sg39
F0.65018725331901805
sg34
g752
(S'\x07\xdf\n\x13\x11*\x05\x0b^('
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g7658
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'right'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g7022
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g7665
sS'block_loop.thisRepN'
p8606
I2
sg6382
g7022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8607
I2
sg6384
g7016
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vn
sS'block_loop.thisTrialN'
p8609
I0
sg39
F0.78352427393838298
sg34
g752
(S'\x07\xdf\n\x13\x11*\x0b\x06tX'
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g7096
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'left'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g6653
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g7103
sS'block_loop.thisRepN'
p8619
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8620
I2
sg6384
g6660
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vn
sS'block_loop.thisTrialN'
p8622
I0
sg39
F0.60015315542477765
sg34
g752
(S'\x07\xdf\n\x13\x11*\x11\x03\xb1P'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g8078
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'right'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g7606
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g8085
sS'block_loop.thisRepN'
p8632
I2
sg6382
g7612
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8633
I2
sg6384
g7606
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vn
sS'block_loop.thisTrialN'
p8635
I0
sg39
F0.5668238895086688
sg34
g752
(S'\x07\xdf\n\x13\x11*\x16\rV\x10'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g6829
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'right'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g6551
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g6836
sS'block_loop.thisRepN'
p8645
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8646
I2
sg6384
g6551
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vn
sS'block_loop.thisTrialN'
p8648
I0
sg39
F0.56689716006803792
sg34
g752
(S'\x07\xdf\n\x13\x11*\x1c\x07;\x90'
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g6591
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'left'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6568
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g6598
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8659
I2
sg6384
g6568
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vn
sS'block_loop.thisTrialN'
p8661
I0
sg39
F0.71694556995134917
sg34
g752
(S'\x07\xdf\n\x13\x11*"\x01!\x10'
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g6459
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'left'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8671
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8672
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vn
sS'block_loop.thisTrialN'
p8674
I0
sg39
F0.56687492231139913
sg34
g752
(S"\x07\xdf\n\x13\x11*'\x0co\x98"
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g7602
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'left'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g7612
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g7610
sS'block_loop.thisRepN'
p8684
I2
sg6382
g7612
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8685
I2
sg6384
g7606
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vn
sS'block_loop.thisTrialN'
p8687
I0
sg39
F0.6335300329446909
sg34
g752
(S'\x07\xdf\n\x13\x11*-\x06Y\x00'
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g6980
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'left'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g6670
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g6987
sS'block_loop.thisRepN'
p8697
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8698
I2
sg6384
g6677
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vn
sS'block_loop.thisTrialN'
p8700
I0
sg39
F0.8668839314559591
sg34
g752
(S'\x07\xdf\n\x13\x11*3\x01o0'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g7126
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'right'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g7133
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8711
I2
sg6384
g6726
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vn
sS'block_loop.thisTrialN'
p8713
I0
sg39
F0.76677525154082105
sg34
g752
(S'\x07\xdf\n\x13\x11*8\x0f\x1f\x18'
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g6698
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'left'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6702
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g6706
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6702
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8724
I2
sg6384
g6709
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vn
sS'block_loop.thisTrialN'
p8726
I0
sg39
F0.75019101662837784
sg34
g752
(S'\x07\xdf\n\x13\x11+\x02\x0c\x1d\x90'
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g7126
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'right'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g7133
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8737
I2
sg6384
g6726
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vn
sS'block_loop.thisTrialN'
p8739
I0
sg39
F0.61725484583439538
sg34
g752
(S'\x07\xdf\n\x13\x11+\x08\x08\xa2\xf0'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g6493
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'left'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g6501
sS'block_loop.thisRepN'
p8749
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8750
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vn
sS'block_loop.thisTrialN'
p8752
I0
sg39
F0.78320239666209091
sg34
g752
(S'\x07\xdf\n\x13\x11+\x0e\x03@\x08'
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g6591
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'left'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6561
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g6598
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8763
I2
sg6384
g6568
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vn
sS'block_loop.thisTrialN'
p8765
I0
sg39
F0.70011728991084965
sg34
g752
(S'\x07\xdf\n\x13\x11+\x14\x00}\x00'
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g6758
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'right'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6487
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g6765
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8776
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vn
sS'block_loop.thisTrialN'
p8778
I0
sg39
F0.7334251733700512
sg34
g752
(S'\x07\xdf\n\x13\x11+\x19\x0b\xcb\x88'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g6980
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'left'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6670
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g6987
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8789
I2
sg6384
g6677
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vn
sS'block_loop.thisTrialN'
p8791
I0
sg39
F0.71693958286414272
sg34
g752
(S'\x07\xdf\n\x13\x11+\x1f\x08P\xe8'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g8078
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'right'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g7612
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g8085
sS'block_loop.thisRepN'
p8801
I2
sg6382
g7612
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8802
I2
sg6384
g7606
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vn
sS'block_loop.thisTrialN'
p8804
I0
sg39
F0.9001276675335248
sg34
g752
(S'\x07\xdf\n\x13\x11+%\x04]0'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g6666
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'right'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6670
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g6674
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8815
I2
sg6384
g6677
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vn
sS'block_loop.thisTrialN'
p8817
I0
sg39
F1.8338691302305961
sg34
g752
(S'\x07\xdf\n\x13\x11++\x03C\xf0'
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g7126
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'right'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g7133
sS'block_loop.thisRepN'
p8827
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8828
I2
sg6384
g6726
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vn
sS'block_loop.thisTrialN'
p8830
I0
sg39
F0.68343155959519208
sg34
g752
(S'\x07\xdf\n\x13\x11+2\x01kH'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g6425
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'left'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8841
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vn
sS'block_loop.thisTrialN'
p8843
I0
sg39
F0.95021593432466034
sg34
g752
(S'\x07\xdf\n\x13\x11+7\x0c@\xb8'
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g7096
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'left'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6653
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g7103
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6653
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8854
I2
sg6384
g6660
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vn
sS'block_loop.thisTrialN'
p8856
I0
sg39
F0.61677701916050864
sg34
g752
(S'\x07\xdf\n\x13\x11,\x01\x0c\x19\xa8'
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g6574
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'left'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6578
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g6582
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6578
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8867
I2
sg6384
g6585
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vn
sS'block_loop.thisTrialN'
p8869
I0
sg39
F0.71682782388234045
sg34
g752
(S'\x07\xdf\n\x13\x11,\x07\x06\xba\xa8'
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g6442
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'left'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8879
I2
sg6382
g6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8880
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vn
sS'block_loop.thisTrialN'
p8882
I0
sg39
F0.83347968438465614
sg34
g752
(S'\x07\xdf\n\x13\x11,\r\x02\xc3\x08'
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g7842
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'right'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g7271
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g7849
sS'block_loop.thisRepN'
p8892
I2
sg6382
g7264
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8893
I2
sg6384
g7271
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vn
sS'block_loop.thisTrialN'
p8895
I0
sg39
F0.75052486808272079
sg34
g752
(S'\x07\xdf\n\x13\x11,\x13\x00\xb7\x98'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g6801
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'left'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g6808
sS'block_loop.thisRepN'
p8905
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8906
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vn
sS'block_loop.thisTrialN'
p8908
I0
sg39
F0.96678277817045455
sg34
g752
(S'\x07\xdf\n\x13\x11,\x18\x0c\xbd\xb8'
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g6885
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'right'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g6892
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8919
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vn
sS'block_loop.thisTrialN'
p8921
I0
sg39
F1.0168533687938179
sg34
g752
(S'\x07\xdf\n\x13\x11,\x1e\x0c\xd5('
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g6913
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'left'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g6920
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8932
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vn
sS'block_loop.thisTrialN'
p8934
I0
sg39
F0.56664883844496217
sg34
g752
(S'\x07\xdf\n\x13\x11,$\r\xa40'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g6683
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'right'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g6690
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8945
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vn
sS'block_loop.thisTrialN'
p8947
I0
sg39
F0.64990671546183876
sg34
g752
(S'\x07\xdf\n\x13\x11,*\x07\x89\xb0'
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g6801
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'left'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g6808
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8958
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vn
sS'block_loop.thisTrialN'
p8960
I0
sg39
F0.76684880720131332
sg34
g752
(S'\x07\xdf\n\x13\x11,0\x02\x9f\xe0'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g8078
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'right'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g7606
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g8085
sS'block_loop.thisRepN'
p8970
I2
sg6382
g7612
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8971
I2
sg6384
g7606
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vn
sS'block_loop.thisTrialN'
p8973
I0
sg39
F1.0505883312216611
sg34
g752
(S'\x07\xdf\n\x13\x11,5\x0e\xe4\x80'
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g6540
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'left'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g6544
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g6548
sS'block_loop.thisRepN'
p8983
I2
sg6382
g6544
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8984
I2
sg6384
g6551
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vn
sS'block_loop.thisTrialN'
p8986
I0
sg39
F0.68351794472982874
sg34
g752
(S'\x07\xdf\n\x13\x11-\x00\x00\xea`'
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g7111
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'right'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6999
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g7118
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6999
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8997
I2
sg6384
g7006
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vn
sS'block_loop.thisTrialN'
p8999
I0
sg39
F0.6167924145302095
sg34
g752
(S'\x07\xdf\n\x13\x11-\x05\x0b\xbb\xe8'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g6913
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'left'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g6920
sS'block_loop.thisRepN'
p9009
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9010
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vn
sS'block_loop.thisTrialN'
p9012
I0
sg39
F0.65001305755504291
sg34
g752
(S'\x07\xdf\n\x13\x11-\x0b\x06Y\x00'
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g6666
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'right'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g6670
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g6674
sS'block_loop.thisRepN'
p9022
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9023
I2
sg6384
g6677
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vn
sS'block_loop.thisTrialN'
p9025
I0
sg39
F1.3167471977576497
sg34
g752
(S'\x07\xdf\n\x13\x11-\x11\x01\xad\xb0'
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g6683
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'right'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g6504
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g6690
sS'block_loop.thisRepN'
p9035
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9036
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vn
sS'block_loop.thisTrialN'
p9038
I0
sg39
F0.58316493459278718
sg34
g752
(S'\x07\xdf\n\x13\x11-\x17\x07\x04\xe0'
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g7260
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'left'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g7271
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g7268
sS'block_loop.thisRepN'
p9048
I2
sg6382
g7264
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9049
I2
sg6384
g7271
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vn
sS'block_loop.thisTrialN'
p9051
I0
sg39
F0.65026080897587235
sg34
g752
(S'\x07\xdf\n\x13\x11-\x1d\x01(\xe0'
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g6885
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'right'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g6892
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9062
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vn
sS'block_loop.thisTrialN'
p9064
I0
sg39
F0.58342266449471936
sg34
g752
(S'\x07\xdf\n\x13\x11-"\x0b\x81P'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g6442
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'left'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g6450
sS'block_loop.thisRepN'
p9074
I2
sg6382
g6452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9075
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vn
sS'block_loop.thisTrialN'
p9077
I0
sg39
F0.68351937022816855
sg34
g752
(S'\x07\xdf\n\x13\x11-(\x05\xa5P'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g6591
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'left'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g6561
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g6598
sS'block_loop.thisRepN'
p9087
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9088
I2
sg6384
g6568
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vn
sS'block_loop.thisTrialN'
p9090
I0
sg39
F0.76684823700270499
sg34
g752
(S'\x07\xdf\n\x13\x11-.\x018\x80'
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vr
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vn
sa(dp9098
g63
g64
sg43
I31
sg56
Vr
sg57
Vn
sg42
I569
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp9099
g63
g64
sg43
I31
sg55
g11
sg56
Vr
sg45
F2.8500000000000001
sg42
I569
sg49
F0.01
sg57
Vn
sg58
g62
sg44
I00
sg48
I25
sg47
g722
sg51
F30.690000000000001
sg46
F2.2200000000000006
sg65
g66
sg67
g68
sg50
I0
sg69
Vn
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I84423504
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'\x8f\xc2\x15@{\x14\x0e@\xf6(\xdc?\x14\xae\x87?\xaeG\xa1?)\\\x0f@\x00\x00\x00\x00\xf6(\\?\xcd\xcc\xcc?H\xe1\xba?=\n\xd7?ff\xe6?\xecQ\x18@\\\x8f\xc2?\x1f\x85k?q=\x8a?H\xe1\xba?\xb8\x1e\xc5?\xa4p\xbd?\x9a\x99\x99?=\n\xd7?\xc3\xf5(?=\n\x97?\x00\x00 @33\xb3?\xf6(\xdc?\x8f\xc2\xb5?\\\x8fB?\xb8\x1e%@\\\x8f\xc2>H\xe1\xfa?\x00\x00\x00@\x00\x00\xc0?33\x13@\xaeGa?\x9a\x99\x19@\n\xd7\xe3?\xd7\xa3\xf0?{\x14\xae>33\xb3?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S'\xee|\x87@T\xe3\xfd@!\xb0Z@\x19\x04(A!\xb0\xfa@ffNA!\xb0\xb2@\xbaIT@\xb6\xf3\xdd?\xdd$\x06A\xbaI4@\xb6\xf3m@d;\x83@\x7fj\x06A\x10X\xa5@b\x10p@\xaa\xf1\xa6@\x87\x16\xb1@u\x938@\xbaI\xac@o\x12\x05A\xaa\xf1\xee@!\xb0\xc2@\xbaI\xcc@\xcd\xcc\x9aA\x96CS@\x08\xac\x02AD\x8b\xc0@\x10X\xbd@\xd5x\x8fA\xdd$\x82@\xdd$\xba@\x98n\xee@w\xbe\x93@w\xbe\x93@w\xbe\x03A\x0e-R@\xe9&Q@b\x10p@b\x10P@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x08B\x00\x00\x00@\x00\x00\xe8A\x00\x00\x88A\x00\x00\x00B\x00\x00\x80?\x00\x00\xe0A\x00\x00 A\x00\x00\x10B\x00\x00\x18B\x00\x00\xb8A\x00\x00\xa0@\x00\x00\xc0A\x00\x00pA\x00\x00\x10A\x00\x00\xa0A\x00\x00\xf8A\x00\x00\xf0A\x00\x00\xa8A\x00\x00\x1cB\x00\x00`A\x00\x00@A\x00\x00\x80@\x00\x00\xc0@\x00\x00\x00\x00\x00\x00\x98A\x00\x00\x00A\x00\x00\x04B\x00\x00\x90A\x00\x00@@\x00\x00\xe0@\x00\x00\xb0A\x00\x00\xd0A\x00\x00\xc8A\x00\x000A\x00\x00\x14B\x00\x00\x0cB\x00\x00\x80A\x00\x00PA\x00\x00\xd8A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'\x9a\x99\xd9?\xcd\xcc\xcc?\x00\x00\xc0?\x9a\x99\xd9?\xcd\xcc\xcc?33\xb3?ff\xa6?\x9a\x99\x99?\x9a\x99\xd9?33\xf3?ff\xe6?ff\xe6?ff\xe6?ff\xa6?\xcd\xcc\x8c?\x9a\x99\xd9?\x00\x00\xc0?\x00\x00\xc0?\xcd\xcc\xcc?\xcd\xcc\xcc?ff\xe6?33\xb3?33\xb3?33\xf3?ff\xe6?33\xf3?ff\xe6?\x9a\x99\x99?\x00\x00\x00@\x00\x00\x00@\x9a\x99\x99?ff\xe6?\xcd\xcc\xcc?ff\xe6?\x9a\x99\xd9?ff\xe6?\x9a\x99\xd9?\x00\x00\x00@\xcd\xcc\xcc?\x00\x00\xc0?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'\x18\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00\x1d\x00\x00\x00\x16\x00\x00\x00\x0b\x00\x00\x00\x17\x00\x00\x00\x1e\x00\x00\x00\x1a\x00\x00\x00\x0e\x00\x00\x00\x07\x00\x00\x00"\x00\x00\x00\x15\x00\x00\x00&\x00\x00\x00\x14\x00\x00\x00\r\x00\x00\x00%\x00\x00\x00\x03\x00\x00\x00\x1c\x00\x00\x00\x19\x00\x00\x00\x0f\x00\x00\x00\x12\x00\x00\x00\x1f\x00\x00\x00\n\x00\x00\x00\x0c\x00\x00\x00!\x00\x00\x00 \x00\x00\x00\'\x00\x00\x00\x06\x00\x00\x00\x02\x00\x00\x00\x11\x00\x00\x00\x10\x00\x00\x00\x04\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00$\x00\x00\x00\x08\x00\x00\x00#\x00\x00\x00\t\x00\x00\x00\x13\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g340
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g116
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g305
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g221
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g326
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g109
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g298
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g172
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g354
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g368
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g263
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g137
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g270
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g207
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g165
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g242
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g319
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g312
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g249
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g375
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g200
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g186
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g130
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g144
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g102
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g235
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g158
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g333
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g228
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g123
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g151
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g256
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g284
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g277
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g179
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g361
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g347
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g214
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g193
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g291
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I84423504
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'33\xf3?ff\xa6@\x00\x00\xc0@\xcd\xcc\x9c@\xcd\xcc\x9c@\x00\x00\x80?ff&@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\x80@\x00\x00\xb0@ffF@\x00\x00\xc0@\xcd\xcc\x0c@\x00\x00\x00@\x9a\x99\x89@ff\xb6@\xcd\xcc\x9c@\x00\x00\x80@\x00\x00\xc0@\x00\x00\xc0@\xcd\xcc\x0c@\x9a\x99\xa9@\x00\x00\x80?\x00\x00\xc0@\x00\x00\xc0@333@\xcd\xcc\x9c@\x00\x00\xc0@\x00\x00\xc0@\x00\x00@@\x00\x00\x80?\x00\x00\x80?\xcd\xcc\x8c@\x00\x00\xc0@\x00\x00\x80?\x00\x00\xc0@\xcd\xcc\x9c@\xcd\xcc\xbc@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S'\xdd\xcd\x8c@\x99V5@e#\xc2?O9\xf3?V\xff\xff?\x9c1\xeb@2\x88\xf0@\xd6y\xa6?f\xf2\xae?\x87\x9f\xd9?\xaf\x89\x18@_\xae\xaa??XE@2[\xb5?\x8e\xde\x8d@\xdd\xf1\x0e@\xd1\x8e\xc8?\xee\x9f\xd9?\x90|\xd7?\x9a\xc1\xbb?g#\xc2?"F\x84?\x90#\x82?G\x00 @\x033\x03A\x82j\xa6?\xd78\xb3?\xef$\xe2?\x006\xf3?\'W\x95?\xb6&b?\xf2;C@\x8f\xf4\xce?\x7f\x10=A\xcb\x90H@\xaf[\xb5?\x87S5@\x11|w?\x93\x8a\x88?+\x16\x91?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'\xcd\xccL@\xcd\xccL@\xcd\xccl@\x00\x00`@\xcd\xccL@\x9a\x99y@33S@\x9a\x999@\x00\x00@@ffF@\x9a\x999@\x00\x00\x80@\xcd\xccl@\x9a\x99\x89@\x00\x00\x80@\xcd\xcc,@\xcd\xccL@\x9a\x99y@\x9a\x99y@\x00\x00`@ffF@\x9a\x99Y@333@\x00\x00\x80@\x9a\x99Y@33\x83@33S@\xcd\xccL@\x9a\x99\x89@\x9a\x99y@333@\x9a\x99Y@\x00\x00`@\x00\x00`@333@ffF@\x9a\x99y@\xcd\xcc,@fff@33\x83@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S' k)\x03\xc0v\x82\r\x80r\x82\r\xa0\x9f\x80\r`\xc0!\x03\xa0\x9c\x80\r\xa0u\x82\r\xe0\xfe \x03\xc0s\x82\r\xc0u\x82\r@\x9f\x80\r\x80p\x82\r\xc0\xc0!\x03\xe0a)\x03 w\x82\r\x00E$\x03@b)\x03@i)\x03\x80\xfa \x03\xe0\xff \x03\x00v\x82\r\x00b+\x03@b+\x03\xe0a+\x03\xa0b+\x03\xc0`+\x03\x00a+\x03 a+\x03 `+\x03\xa0`+\x03\x80e+\x03\xe0b+\x03\xc0a+\x03\x80`+\x03`a+\x03\xa0a+\x03\x80a+\x03@a+\x03 b+\x03``+\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S'\xd5xkA!\xb0\xb2@/\xdd\\@+\x87\xe6?\xd5x7A!\xb0\xc2@\x0e-2@B`\x05@+\x87\xe6?\xf8S\xd3?\xbaI$@\x0e-\xa2?\xdb\xf9\xce?\xc5 \xa0?\xa8\xc6\xfb?B`\xd5?\xe9&A@\xf8S\xd3?!\xb0J@\xbaI\x8c@\x0e-\xc2?B`\xb5?\x91\xed\xac?\x1dZ\xa4?\x06\x81\x95?b\x10@@+\x87\x86?\xd3M\xe2?\x91\xed\x8c?\x0e-\xc2?!\xb0:@\xbaI\x14@u\x93(@\xe9&\xd1?\xd3M\xa2?\x1dZ\x84?\xbaI\xd4@m\xe7{?^\xba\x99?\x83\xc0\x8a?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I84423504
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'@m\xba\r\x80F+\x03xl\xba\rPF+\x03\xa0l\xba\r\x00\x91\xba\rPl\xba\r\xc8l\xba\rxl\xba\r F+\x03\xf0l\xba\r\xa0l\xba\r\xc8l\xba\r\x90m\xba\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S'x\x9e\xbe\x03\xe8\xa1d\x028\xfc\xea\x04H\xfb\xea\x04\x80\xfc\xea\x04P\xfc\xea\x04\x80\xff\xea\x04x\xe5\xf6\x04\xe8\xea\xf6\x04\xf0\xe2\xf6\x04H\xeb\xf6\x04\xe0\xec\xf6\x04\x10\xea\xf6\x04\xf8\xe6\xf6\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g777
sg82
g778
sg83
g782
sg84
g783
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g788
sg82
g789
sg83
g793
sg84
g794
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g755
sg82
g799
sg83
g760
sg84
g803
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g743
sg82
g808
sg83
g748
sg84
g812
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g817
sg82
g818
sg83
g822
sg84
g823
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g766
sg82
g828
sg83
g771
sg84
g832
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g777
sg82
g837
sg83
g782
sg84
g841
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g846
sg82
g847
sg83
g851
sg84
g852
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g788
sg82
g857
sg83
g793
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g817
sg82
g866
sg83
g822
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g846
sg82
g875
sg83
g851
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I84423504
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I84423504
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S'\x18}\xbc\r\x98\x85\xbc\r@}\xbc\rh}\xbc\r\x90}\xbc\rh}\xbc\r`\x16)\x03h}\xbc\r\xb8}\xbc\r\xc0\x1a)\x03\x98\x85\xbc\rh}\xbc\r\xb0\x86\xbc\r\xe0}\xbc\r\xb8}\xbc\r\xe0\xb0\xbc\r\x10\xb1\xbc\r\xa0\x1b)\x03\x08~\xbc\r@\xb1\xbc\r\x18}\xbc\r@\x86\xbc\r\xe8\x86\xbc\r\xd0\x85\xbc\r\x18}\xbc\r@\x1b)\x03\xa0\x1b)\x03\xe0\x19)\x03`\xb2\xbc\r@}\xbc\r@\x1b)\x03\xd0~\xbc\r@\x1b)\x03\xb8}\xbc\r\xc0\x1d)\x03p\xb1\xbc\r\xa0\xb1\xbc\r\xb0\x86\xbc\rx\x86\xbc\r`\x16)\x03\x90}\xbc\r\x10\xb1\xbc\r\xc0\x1a)\x03p\xb1\xbc\r\xb8}\xbc\r\xd0\x85\xbc\r\x10\xb1\xbc\r\xd0~\xbc\r\xa0\xb1\xbc\r\xc0\x1d)\x03\xb8}\xbc\r\x08\x86\xbc\r\x08~\xbc\r\x18}\xbc\r\x10\xb1\xbc\r@\xb1\xbc\r\xd0\xb1\xbc\rp\x7f\xbc\r\x90}\xbc\r\xb8}\xbc\r\x08~\xbc\r0\xb2\xbc\r@\x1b)\x03\xc0\x1a)\x03p\xb1\xbc\r\xa0\x1b)\x03p\xb1\xbc\r\xa0\xb1\xbc\r\x90}\xbc\r\xe0}\xbc\r@}\xbc\r\xd0\xb1\xbc\r@\x1b)\x03\xd0\xb1\xbc\r\x98\x85\xbc\r\xc0\x1d)\x03\xa0\x1b)\x03H\x7f\xbc\r\x90}\xbc\r\xa0\xb1\xbc\r`\xb2\xbc\r\x08~\xbc\r\xc0\x1d)\x03\x08\x86\xbc\r\xd0\xb1\xbc\r@\xb1\xbc\r\x08\x86\xbc\r\x10\xb1\xbc\r\x08~\xbc\r\x10\xb1\xbc\r\xd0\x85\xbc\r@\xb1\xbc\r\x08~\xbc\r\xe0\x19)\x03x\x86\xbc\r@\xb1\xbc\r\xe0}\xbc\r@}\xbc\r \x7f\xbc\r\xa0\xb1\xbc\r\xb8}\xbc\r\x08~\xbc\r@\xb1\xbc\r\xa0\x1b)\x03\xe0\xb0\xbc\r\xa0\xb1\xbc\rp\xb1\xbc\r\x10\xb1\xbc\r\xe0}\xbc\r@\xb1\xbc\r\xd0\x85\xbc\r\xd0\xb1\xbc\r\xe0}\xbc\r\x18}\xbc\r\x00\xb2\xbc\r\xe0\xb0\xbc\r\xa0\xb1\xbc\r\xa0\x1b)\x03\x18}\xbc\r\xa0\xb1\xbc\r\xf8~\xbc\r\x98\x85\xbc\r\xc0\x1a)\x03@}\xbc\rp\xb1\xbc\rx\x86\xbc\rH\x7f\xbc\r`\xb2\xbc\r\x18}\xbc\r\xa0\x1b)\x03\x90}\xbc\rh}\xbc\r\xe0}\xbc\r\xc0\x1a)\x03\xb8}\xbc\r\xe0\xb0\xbc\r\xa8~\xbc\r\xb0\x86\xbc\r@\x1b)\x03h}\xbc\r\xd0\xb1\xbc\r\xd0\x85\xbc\r\x90\xb2\xbc\r\xc0\xb2\xbc\rp\x7f\xbc\rx\x86\xbc\r\x80~\xbc\r\xd0\x85\xbc\r\xe0\xb0\xbc\r@}\xbc\r\x18}\xbc\r\xe0\xb0\xbc\r\x98\x85\xbc\r\xc0\x1a)\x03\xe0\xb0\xbc\r\x90\xb2\xbc\r\x98\x85\xbc\r\xa0\x1b)\x03h}\xbc\r\xe0\xb0\xbc\rH\x7f\xbc\r\x08\x86\xbc\r\xe0\xb0\xbc\r\x98\x85\xbc\r\xc0\x1d)\x03@\x86\xbc\r@}\xbc\r@\x1b)\x03\xc0\x1d)\x03\xd0\xb1\xbc\r\x90}\xbc\r\x98\x85\xbc\r\xe0}\xbc\rh}\xbc\r\xd0\xb1\xbc\r\xa0\xb1\xbc\rp\xb1\xbc\r\xd0\xb1\xbc\r\xa8~\xbc\r\x08\x86\xbc\r\xd0\xb1\xbc\r@}\xbc\rp\xb1\xbc\r\xc0\x1d)\x03\xd0\x85\xbc\r\xb8}\xbc\r\x18}\xbc\r\x00\xb2\xbc\r\x98\x85\xbc\r\x08\x86\xbc\r@\x1b)\x03\x08\x86\xbc\r\xc0\x1d)\x03@\xb1\xbc\rp\xb1\xbc\r\xa0\x1b)\x03\xe0}\xbc\rX~\xbc\r@\x86\xbc\r`\x16)\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S'\xe0k)\x03\xa0\xe9*\x03\xe03\x83\r\xa0\xef*\x03\x80\xe3*\x03\x80\xea*\x03@\xe6*\x03\xa0\xeb*\x03@\xec*\x03\xe0\xef*\x03 \xec*\x03\x80\xe6*\x03\xe0\xec*\x03@\xef*\x03\x00\xee*\x03`\xef*\x03@\xe8*\x03\x80\xef*\x03`\xeb*\x03`\xea*\x03@\xe9*\x03 \xeb*\x03@\xeb*\x03\xc0\xe8*\x03\xc0\xeb*\x03 \xe8*\x03\x80\xee*\x03`\xed*\x03@\xe3*\x03 \xe3*\x03\xa0\xee*\x03\x80\xec*\x03\xa0\xe0*\x03\xc0\xea*\x03 \xe9*\x03\xa0\xea*\x03\x00\xea*\x03\xe0\xe8*\x03\x00\xe9*\x03\x00\xeb*\x03`\xe9*\x03\xe0\xeb*\x03\xe0\xe9*\x03@\xea*\x03\x80\xeb*\x03\xa0\xe8*\x03\xc0\xe9*\x03\x80\xe9*\x03\x80\xed*\x03\x00\xec*\x03@#\x80\r\x00)\x80\r  \x80\r\xe0 \x80\r\x80 \x80\r\xc0*\x80\r\xa0 \x80\r\x00!\x80\r@!\x80\r\xa0"\x80\r\x00+\x80\r`\xe8*\x03\xe0"\x80\r\xe02}\r\x803}\r@6}\r`7}\r\x807}\r`<}\r\x80<}\r@;}\r\xe0;}\r\x802}\r\x003}\r\xc0;}\r\xe07}\r`2}\r`=}\r\x00<}\r\x80;}\r =}\r\xa0<}\r ;}\r@3}\r@0}\r\xa07}\r\xc02}\r\x006}\r\xa03}\r 6}\r`6}\r\xe06}\r\xa02}\r\xe0?}\r 0}\r@7}\r\x00;}\r@=}\r\xe0\xea*\x03\xa0B\x9e\x04@B\x9e\x04\xa0@\x9e\x04\xc0 \x80\r`A\x9e\x04\xa0A\x9e\x04 C\x9e\x04\x80C\x9e\x04\x00B\x9e\x04\xc0A\x9e\x04\xc0C\x9e\x04 B\x9e\x04\xc0B\x9e\x04 D\x9e\x04\xe0C\x9e\x04\x80A\x9e\x04\xe0B\x9e\x04\xa0C\x9e\x04`B\x9e\x04\x00E\x9e\x04 E\x9e\x04 A\x9e\x04\xe0@\x9e\x04\x00C\x9e\x04\x80E\x9e\x04\xc0D\x9e\x04\xa0D\x9e\x04`D\x9e\x04\xe0D\x9e\x04@F\x9e\x04`F\x9e\x04 F\x9e\x04`C\x9e\x04\x80D\x9e\x04\xe0E\x9e\x04\xc0E\x9e\x04\xc0@\x9e\x04\x00G\x9e\x04`G\x9e\x04\x00D\x9e\x04\xe0F\x9e\x04@A\x9e\x04\xc0F\x9e\x04\x80B\x9e\x04 H\x9e\x04\xe0G\x9e\x04 G\x9e\x04@C\x9e\x04\xa0G\x9e\x04\x00F\x9e\x04\x80G\x9e\x04@G\x9e\x04`E\x9e\x04@D\x9e\x04\x80F\x9e\x04\x00A\x9e\x04\x00I\x9e\x04\xc0G\x9e\x04\xe0H\x9e\x04\x00J\x9e\x04 J\x9e\x04\xe0I\x9e\x04`H\x9e\x04@H\x9e\x04\xa0I\x9e\x04\x80I\x9e\x04\xa0F\x9e\x04@I\x9e\x04 I\x9e\x04\x80J\x9e\x04`K\x9e\x04\xa0E\x9e\x04\xa0H\x9e\x04@J\x9e\x04\xc0K\x9e\x04\x80H\x9e\x04\xe0A\x9e\x04@E\x9e\x04\xa0J\x9e\x04\x80L\x9e\x04\xa0L\x9e\x04\x00H\x9e\x04`J\x9e\x04\xc0I\x9e\x04 M\x9e\x04@M\x9e\x04@K\x9e\x04`L\x9e\x04 L\x9e\x04\xc0J\x9e\x04\x80K\x9e\x04\x00M\x9e\x04`M\x9e\x04@N\x9e\x04\x00N\x9e\x04\x80M\x9e\x04\xc0L\x9e\x04\xe0K\x9e\x04\xe0N\x9e\x04\x00O\x9e\x04\xa0M\x9e\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S'(\xf6n?X\xbe\x9b?\x1eB\xe4?C\x12!@\xb3\xd0\xcc?\xc1\xe5\xbd?\xa3&\xa2?$I\x84?\xdf\x0b\x91?s\xdf\xac?s\xbe+@\xa1X\x95?\xeb\x8e\xe8?Wz\x97?\xc0\x0f!@(\xf6\xae?\x8dH\x84?\xc9\x02o?:I\xa4?\'\xfcn?\x96\xcdl@V4\x13@\xf3\x8a\xa8?$oF@\xd2\xe1\xbd?\x01\xd3\xec?X\x15\xb1?\xc3\x8a\xa8?\x10\xab\xf9?\x8c\xac\n@\x8exW@"}\xf7?\xddy\xf7?<`\x95?\xbb~\x97?Z\xd2\xec?\xb6\x02\x10@\xa5Z\xf5?\xb5\x9a\xc8?`[\xd5?T\x10\xf1?X9\x93?]\x14\xd1?@\xe5\xbd?\xc6\xa4\xca?\xe9z\xf7?\xa2;\x93?\xf6I\xe4?\xb8\xbc\x8a?\xfeI\x84?\x1f\xba\x9b?\x8a\x15\xb1?\x91E\x14@\xe5\xbd\xaa?\x1aI\x84?0x7@\xfch\xc6?\xfa\xc1\xfb?\r\x00`@^TU?\x995\xb3?\x0f\xd4]?\xb9\xae\x8a?DH$@\xb3\x14\xb1?\xd8H\xa4?KG3?\xdd\xe4\x9d?\xb9G\xa4?\xfc|\x97?FG\xa4?\xb8K\xe4?\x13\xa7Y?W\xd3\x8c?\x93\xd2\xac?\xac%\x82?\t;s?\xc9J\xa4?\x83\xbf{?\x9d\xe0\x9d?\x9a}w?*,b?\xa7\xcf\xac?5\x12\xc0?\xd3\x91\x88?l8\x93?\xdamf?\x83\xaaY?\x8b\\\x95?\x8d\\U?\xc0\x9f\xd9? \xd2\x8c?\x83bU?\x9c\xd2j?\x81\x14\xd1?\x8a.b?\x7f\x8e\xc8?\xaf\x88\xa8@z\x9fw?\x95\x9f\x99?:1\x93?\xc1\x04\xc0?\x7f\x0eQ?\x00\xcfj?\xd7F4@>%\x82?\xa9\xd2\xac?OKD?3}\xb7?\x13VU@xpf?\xe7@s?\x11\x8fH?\x98\xc4K@\xb5\x9c\x99?Q\x06\xc0?[\x94H?\xb6nf?Y\xfdn?S\xf2n?\x97\x95H?\x14}\xb7?\xe9\x9e\x99?\x0f\xf3L?\x0b\xc3{?X\x06\xe0?}X\x95?R\xa5Y?\xc9\x00o?\xbd&\x82?)D\x84?ty\x07@\xb2\x1eb?A\xb3*@\xdf.s?!.b?e\xb2*?\x7fF\xc4?dx\x86?<KD?\x10\xf7\xae?\xe9\xa0Y?.}\x97?\x1f\xf6L?9t&?\xd5~7?\\\xb3\x8a?\xfd\x06@?\x19\xc0\xbb?@\x97H?\xe4\xa0Y?\x04\x08@?U\xaf\x8a?\xb8\xa8Y?Y\xb1\x8a?\xd2Eb?@\x18Q?\x1b\x8fH?\x98\xe4]?M\x90H?zs&?\xddF\xb3?\x0b\x1aQ?\xc1\xf2\x8e?\xf1<s?\xa4\xaa\x8a?!cU?\xb2\r@?K\xfdn?n\x03\x80?\xf2\x10Q?]\x07@?u)\x82?9RD?\xdf~\x97?\xe9\x8dH?c\xd3\xec?2\x86w?\x00t&?0\xa7Y?\xf4nf?\xae\t@?\x8d:3?\x04\x8fw?\xc8\x1fQ?\xca\x1f\x82?\xd6\xfbn?\x9c\xa0Y?\x00m\x86?|\x85w?\xfcD\xac@\xca\x9f\xd9?\xae:s?6UD?6\x9f\xb9?$~7?\x07\x84w?\xfa\xad\x8a?u\x13\x91?\x08\x12\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S'\xc0\xeb\xf6\x048\xe0\xf6\x04\xf0k\xef\x04Hh\xef\x04\xe8j\xef\x04\xa0d\xef\x04\x00n\xef\x04\x88g\xef\x04Pf\xef\x04\xa8k\xef\x04\xf8`\xef\x048o\xef\x04 l\xef\x04\x98l\xef\x04\xa0a\xef\x04\x18n\xef\x04\xd0m\xef\x04`e\xef\x040n\xef\x04\x10g\xef\x04\xd0j\xef\x04\xa8n\xef\x04\xb8g\xef\x048l\xef\x04(g\xef\x04\xc8o\xef\x04\xb8j\xef\x048f\xef\x04\x00k\xef\x04\xd8n\xef\x04xb\xef\x040b\xef\x04xe\xef\x04xn\xef\x04@g\xef\x04Po\xef\x04Xj\xef\x04\x90h\xef\x04@j\xef\x04\x98o\xef\x04 o\xef\x04He\xef\x04\xb8d\xef\x04\xa8b\xef\x04\x90k\xef\x04\xf8l\xef\x04\xe8m\xef\x04pj\xef\x04\xe0o\xef\x048i\xef\x04Pi\xef\x04\x08o\xef\x04\x08l\xef\x04\xd8k\xef\x04\xd8e\xef\x04hc\xef\x04\x90\xa5\xef\x04\xe8\xa7\xef\x04\xd0\xa1\xef\x04p\xa1\xef\x04(\xad\xef\x04\xe0\xa0\xef\x04H\xab\xef\x04\xf8\xa9\xef\x04p\xa4\xef\x04\xc0\xa2\xef\x04\xd8\xae\xef\x04 \xa3\xef\x04`\xab\xef\x048\xa9\xef\x04 \xaf\xef\x04\x10\xa4\xef\x04\xa8\xa2\xef\x04(\xa4\xef\x04\x00\xa2\xef\x04\x90\xa8\xef\x04`\xa2\xef\x04p\xad\xef\x04\xd8\xa2\xef\x04H\xa5\xef\x04\x88\xa4\xef\x04\xf0\xab\xef\x04\x80\xa3\xef\x04\xb8\xa7\xef\x04\xe0\xa9\xef\x04\x98\xa3\xef\x04h\xac\xef\x04P\xa3\xef\x04`\xa5\xef\x04\xc8\xa0\xef\x04\x00\xab\xef\x04X\xa1\xef\x04\xc8\xa3\xef\x04H\xa2\xef\x04\xc8\xac\xef\x04\x90\xab\xef\x04p\xa7\xef\x040\xa8\xef\x04\xc0\xae\xef\x04h\xa3\xef\x04\x18\xab\xef\x04\xf8\xa0\xef\x04\x88\xa1\xef\x04\xb8\xa1\xef\x04\x98\xa0\xef\x04\x18\xa8\xef\x04\x00\xa8\xef\x04@\xa4\xef\x04\xb8\xad\xef\x04@\xa7\xef\x04h\xa0\xef\x04\x88\xaa\xef\x04\x88\xad\xef\x048\xa0\xef\x04(\xaa\xef\x04\x98\xa9\xef\x04\xc0\xa8\xef\x04H\xa8\xef\x04\x80\xa6\xef\x04\xd8\xab\xef\x04\xd0\xa4\xef\x04P\xa6\xef\x048\xaf\xef\x04 \xac\xef\x040\xa5\xef\x04\x08\xaf\xef\x04\xd0\xa7\xef\x04\x80\xa0\xef\x04\xe0\xa6\xef\x04(\xa1\xef\x048\xa3\xef\x04x\xa5\xef\x04\x98\xaf\xef\x04\xc0\xab\xef\x04P\xa9\xef\x04\xf0\xa8\xef\x040\xab\xef\x04\xb8\xa4\xef\x040\xa2\xef\x04\x08\xa9\xef\x04\xb0\xa0\xef\x04\xf8\xa6\xef\x04H\xae\xef\x04\xa8\xab\xef\x04\xe8\xad\xef\x04\x10\xad\xef\x04h\xa9\xef\x04\x98\xac\xef\x04\xa8\xae\xef\x04@\xad\xef\x04 \xa0\xef\x04\xb8\xaa\xef\x04x\xae\xef\x04\xd0\xad\xef\x04X\xaa\xef\x04`\xa8\xef\x04h\xaf\xef\x04\xa0\xa1\xef\x04\xb0\xa3\xef\x04p\xaa\xef\x04\xa0\xa7\xef\x04x\xa2\xef\x048\xac\xef\x04P\xac\xef\x04P\xa0\xef\x04\xc8\xa6\xef\x04\x18\xae\xef\x04\x90\xae\xef\x04x\xab\xef\x04\xf8\xac\xef\x04\xa0\xad\xef\x04 \xa9\xef\x04\x10\xaa\xef\x04\x00\xae\xef\x04\xa0\xaa\xef\x04\x18\xa5\xef\x04\x80\xac\xef\x04\xe0\xa3\xef\x04(\xa7\xef\x04\xa8\xa8\xef\x04\xe0\xaf\xef\x04\x10\xa7\xef\x040\xae\xef\x04\xb0\xac\xef\x04\xf0\xae\xef\x04\xb0\xa6\xef\x04@\xaa\xef\x04\xf0\xa2\xef\x04\xa0\xa4\xef\x04\x00\xa5\xef\x04\x08\xac\xef\x04X\xa7\xef\x04@\xa1\xef\x04`\xae\xef\x04\x18\xa2\xef\x04X\xa4\xef\x04\xe8\xaa\xef\x04\x80\xaf\xef\x04pg\xef\x04`h\xef\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g1006
sg894
g996
sg908
g1000
sg903
g1004
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g953
sg894
g1013
sg908
g960
sg903
g1020
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g919
sg894
g1062
sg908
g926
sg903
g1069
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g1100
sg894
g1090
sg908
g1094
sg903
g1098
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g1111
sg894
g1107
sg908
g1118
sg903
g1115
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g1032
sg894
g1124
sg908
g1039
sg903
g1131
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g1143
sg894
g1139
sg908
g1150
sg903
g1147
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g1160
sg894
g1156
sg908
g1167
sg903
g1164
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g1177
sg894
g1173
sg908
g1184
sg903
g1181
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g1194
sg894
g1190
sg908
g1201
sg903
g1198
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g1211
sg894
g1207
sg908
g1218
sg903
g1215
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g1260
sg894
g1250
sg908
g1254
sg903
g1258
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g1006
sg894
g996
sg908
g1000
sg903
g1004
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g899
sg894
g1280
sg908
g909
sg903
g1287
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g1299
sg894
g1295
sg908
g1306
sg903
g1303
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g1177
sg894
g1173
sg908
g1184
sg903
g1181
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g1335
sg894
g1325
sg908
g1329
sg903
g1333
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g1160
sg894
g1342
sg908
g1167
sg903
g1349
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g1299
sg894
g1295
sg908
g1306
sg903
g1303
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g1111
sg894
g1107
sg908
g1118
sg903
g1115
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g1299
sg894
g1396
sg908
g1306
sg903
g1403
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g1335
sg894
g1325
sg908
g1329
sg903
g1333
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g1260
sg894
g1250
sg908
g1254
sg903
g1258
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g1454
sg894
g1450
sg908
g1461
sg903
g1458
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g1100
sg894
g1090
sg908
g1094
sg903
g1098
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g1006
sg894
g996
sg908
g1000
sg903
g1004
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g970
sg894
g1506
sg908
g977
sg903
g1513
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g1160
sg894
g1342
sg908
g1167
sg903
g1349
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g1049
sg894
g1534
sg908
g1056
sg903
g1541
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g1260
sg894
g1250
sg908
g1254
sg903
g1258
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g1032
sg894
g1124
sg908
g1039
sg903
g1131
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g1006
sg894
g1575
sg908
g1000
sg903
g1582
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g1160
sg894
g1156
sg908
g1167
sg903
g1164
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g1111
sg894
g1603
sg908
g1118
sg903
g1610
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g1454
sg894
g1450
sg908
g1461
sg903
g1458
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g1335
sg894
g1325
sg908
g1329
sg903
g1333
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g1032
sg894
g1124
sg908
g1039
sg903
g1131
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g1100
sg894
g1657
sg908
g1094
sg903
g1664
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g1194
sg894
g1672
sg908
g1201
sg903
g1679
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g899
sg894
g1280
sg908
g909
sg903
g1287
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g1160
sg894
g1156
sg908
g1167
sg903
g1164
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g1211
sg894
g1713
sg908
g1218
sg903
g1720
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g1732
sg894
g1728
sg908
g1739
sg903
g1736
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g1299
sg894
g1396
sg908
g1306
sg903
g1403
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g1194
sg894
g1190
sg908
g1201
sg903
g1198
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g1032
sg894
g1124
sg908
g1039
sg903
g1131
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g1299
sg894
g1295
sg908
g1306
sg903
g1303
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g1260
sg894
g1250
sg908
g1254
sg903
g1258
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g1177
sg894
g1173
sg908
g1184
sg903
g1181
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g1260
sg894
g1250
sg908
g1254
sg903
g1258
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g1454
sg894
g1875
sg908
g1461
sg903
g1882
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g970
sg894
g1506
sg908
g977
sg903
g1513
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g1111
sg894
g1603
sg908
g1118
sg903
g1610
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g936
sg894
g1916
sg908
g943
sg903
g1923
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g1732
sg894
g1931
sg908
g1739
sg903
g1938
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g1299
sg894
g1295
sg908
g1306
sg903
g1303
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g1732
sg894
g1728
sg908
g1739
sg903
g1736
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g1335
sg894
g1985
sg908
g1329
sg903
g1992
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g1177
sg894
g2000
sg908
g1184
sg903
g2007
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g1194
sg894
g1190
sg908
g1201
sg903
g1198
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g970
sg894
g1506
sg908
g977
sg903
g1513
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g1454
sg894
g1875
sg908
g1461
sg903
g1882
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g1160
sg894
g1342
sg908
g1167
sg903
g1349
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g1194
sg894
g1672
sg908
g1201
sg903
g1679
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g1335
sg894
g1985
sg908
g1329
sg903
g1992
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g1100
sg894
g1657
sg908
g1094
sg903
g1664
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g1732
sg894
g1728
sg908
g1739
sg903
g1736
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g1211
sg894
g1713
sg908
g1218
sg903
g1720
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g1100
sg894
g1657
sg908
g1094
sg903
g1664
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g1160
sg894
g1342
sg908
g1167
sg903
g1349
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g1194
sg894
g1672
sg908
g1201
sg903
g1679
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g1160
sg894
g1156
sg908
g1167
sg903
g1164
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g1006
sg894
g1575
sg908
g1000
sg903
g1582
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g1211
sg894
g1713
sg908
g1218
sg903
g1720
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g1194
sg894
g1190
sg908
g1201
sg903
g1198
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g1335
sg894
g1985
sg908
g1329
sg903
g1992
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g1049
sg894
g1534
sg908
g1056
sg903
g1541
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g1211
sg894
g1713
sg908
g1218
sg903
g1720
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g1111
sg894
g1107
sg908
g1118
sg903
g1115
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g936
sg894
g1916
sg908
g943
sg903
g1923
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g1177
sg894
g2000
sg908
g1184
sg903
g2007
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g1454
sg894
g1875
sg908
g1461
sg903
g1882
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g1194
sg894
g1672
sg908
g1201
sg903
g1679
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g1211
sg894
g1207
sg908
g1218
sg903
g1215
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g1177
sg894
g2000
sg908
g1184
sg903
g2007
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g1143
sg894
g2366
sg908
g1150
sg903
g2373
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g1454
sg894
g1875
sg908
g1461
sg903
g1882
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g1260
sg894
g2394
sg908
g1254
sg903
g2401
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g1160
sg894
g1342
sg908
g1167
sg903
g1349
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g1111
sg894
g1603
sg908
g1118
sg903
g1610
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g1211
sg894
g1207
sg908
g1218
sg903
g1215
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g1006
sg894
g996
sg908
g1000
sg903
g1004
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g1732
sg894
g1728
sg908
g1739
sg903
g1736
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g1111
sg894
g1107
sg908
g1118
sg903
g1115
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g899
sg894
g1280
sg908
g909
sg903
g1287
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g936
sg894
g1916
sg908
g943
sg903
g1923
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g1143
sg894
g2366
sg908
g1150
sg903
g2373
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g1454
sg894
g1450
sg908
g1461
sg903
g1458
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g1177
sg894
g2000
sg908
g1184
sg903
g2007
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g1454
sg894
g1875
sg908
g1461
sg903
g1882
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g1143
sg894
g1139
sg908
g1150
sg903
g1147
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g936
sg894
g1916
sg908
g943
sg903
g1923
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g1260
sg894
g2394
sg908
g1254
sg903
g2401
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g1194
sg894
g1672
sg908
g1201
sg903
g1679
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g1160
sg894
g1156
sg908
g1167
sg903
g1164
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g1177
sg894
g1173
sg908
g1184
sg903
g1181
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g1111
sg894
g1107
sg908
g1118
sg903
g1115
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g1049
sg894
g1534
sg908
g1056
sg903
g1541
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g1143
sg894
g1139
sg908
g1150
sg903
g1147
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g953
sg894
g1013
sg908
g960
sg903
g1020
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g1100
sg894
g1090
sg908
g1094
sg903
g1098
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g1299
sg894
g1396
sg908
g1306
sg903
g1403
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g1732
sg894
g1931
sg908
g1739
sg903
g1938
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g1006
sg894
g996
sg908
g1000
sg903
g1004
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g1211
sg894
g1207
sg908
g1218
sg903
g1215
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g1454
sg894
g1450
sg908
g1461
sg903
g1458
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g1299
sg894
g1295
sg908
g1306
sg903
g1303
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g1049
sg894
g1534
sg908
g1056
sg903
g1541
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g1006
sg894
g1575
sg908
g1000
sg903
g1582
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g1143
sg894
g1139
sg908
g1150
sg903
g1147
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g899
sg894
g1280
sg908
g909
sg903
g1287
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g1143
sg894
g2366
sg908
g1150
sg903
g2373
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g919
sg894
g1062
sg908
g926
sg903
g1069
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g1049
sg894
g1534
sg908
g1056
sg903
g1541
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g1143
sg894
g1139
sg908
g1150
sg903
g1147
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g1211
sg894
g1713
sg908
g1218
sg903
g1720
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g919
sg894
g1062
sg908
g926
sg903
g1069
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1177
sg894
g2000
sg908
g1184
sg903
g2007
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g953
sg894
g1013
sg908
g960
sg903
g1020
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g1143
sg894
g2366
sg908
g1150
sg903
g2373
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g1194
sg894
g1190
sg908
g1201
sg903
g1198
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g1100
sg894
g1657
sg908
g1094
sg903
g1664
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g1143
sg894
g2366
sg908
g1150
sg903
g2373
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g919
sg894
g1062
sg908
g926
sg903
g1069
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g1335
sg894
g1325
sg908
g1329
sg903
g1333
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g1299
sg894
g1396
sg908
g1306
sg903
g1403
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1335
sg894
g1985
sg908
g1329
sg903
g1992
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g1732
sg894
g1931
sg908
g1739
sg903
g1938
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g970
sg894
g1506
sg908
g977
sg903
g1513
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g1111
sg894
g1603
sg908
g1118
sg903
g1610
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g953
sg894
g1013
sg908
g960
sg903
g1020
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g1732
sg894
g1931
sg908
g1739
sg903
g1938
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g1454
sg894
g1450
sg908
g1461
sg903
g1458
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g1260
sg894
g2394
sg908
g1254
sg903
g2401
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g1732
sg894
g1931
sg908
g1739
sg903
g1938
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g953
sg894
g1013
sg908
g960
sg903
g1020
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g1100
sg894
g1090
sg908
g1094
sg903
g1098
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1732
sg894
g1728
sg908
g1739
sg903
g1736
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g1260
sg894
g2394
sg908
g1254
sg903
g2401
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g1335
sg894
g1985
sg908
g1329
sg903
g1992
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g1006
sg894
g1575
sg908
g1000
sg903
g1582
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g1032
sg894
g1124
sg908
g1039
sg903
g1131
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g936
sg894
g1916
sg908
g943
sg903
g1923
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g919
sg894
g1062
sg908
g926
sg903
g1069
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g1100
sg894
g1090
sg908
g1094
sg903
g1098
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g1299
sg894
g1396
sg908
g1306
sg903
g1403
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g1100
sg894
g1657
sg908
g1094
sg903
g1664
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g1335
sg894
g1325
sg908
g1329
sg903
g1333
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g1211
sg894
g1207
sg908
g1218
sg903
g1215
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g1260
sg894
g2394
sg908
g1254
sg903
g2401
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g1177
sg894
g1173
sg908
g1184
sg903
g1181
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g1111
sg894
g1603
sg908
g1118
sg903
g1610
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g899
sg894
g1280
sg908
g909
sg903
g1287
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g970
sg894
g1506
sg908
g977
sg903
g1513
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g1006
sg894
g1575
sg908
g1000
sg903
g1582
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I84423504
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'\xb0\xbd\t\x0ep0\n\x0ep\xf7\t\x0e\xa0\xf7\t\x0e\x80O\x9e\x04\x980\n\x0eP\xf9\t\x0e\xc00\n\x0e\xe80\n\x0eX\xbe\t\x0e\x80N\x9e\x04\xe8\xbd\t\x0e\xa0\xf7\t\x0e81\n\x0e\xc0\xf8\t\x0e\xe80\n\x0e`O\x9e\x04\x00\xf8\t\x0e\x80\xf9\t\x0e\x90\xbe\t\x0ep\xf7\t\x0ex2\n\x0e0\xf8\t\x0e\xb01\n\x0e`O\x9e\x04\x980\n\x0e\xc00\n\x0ep\xf7\t\x0e`O\x9e\x04p0\n\x0e\xa0\xf7\t\x0e(2\n\x0e\xe80\n\x0e`\xf8\t\x0e\xe0O\x9e\x04`O\x9e\x04`\xf8\t\x0e\x00\xf8\t\x0e81\n\x0e\xe80\n\x0e\xc0\xf8\t\x0e\x002\n\x0e\x90\xf8\t\x0e`O\x9e\x04\x00\xf8\t\x0e`1\n\x0e\xa0O\x9e\x04\xc00\n\x0e0\xf8\t\x0e\xe8\xbd\t\x0e\xa0O\x9e\x04\x002\n\x0e\x80N\x9e\x04 \xf9\t\x0e\xc0O\x9e\x04\xc00\n\x0e\x80N\x9e\x04`\xf8\t\x0e\xa0O\x9e\x04(2\n\x0e0\xf8\t\x0e`1\n\x0e\x00\xf8\t\x0e \xf9\t\x0e\xc8\xbe\t\x0e\xa0O\x9e\x04\xe80\n\x0e\xa0\xf7\t\x0e`1\n\x0e\x980\n\x0e\x80N\x9e\x04\xa0O\x9e\x04\x00\xf8\t\x0e\xa0O\x9e\x04\x80\xf9\t\x0e`\xf8\t\x0e \xf9\t\x0e`\xf8\t\x0e\xc00\n\x0e81\n\x0e\xa0O\x9e\x04\x101\n\x0e\x80N\x9e\x0481\n\x0e\xb0\xbd\t\x0e`O\x9e\x04\x980\n\x0e`1\n\x0eX\xbe\t\x0e\xd0\xf7\t\x0e0\xf8\t\x0e81\n\x0e \xbe\t\x0e\x101\n\x0e\xe8\xbd\t\x0e\x00\xf8\t\x0e\xc0O\x9e\x04\x80N\x9e\x04p0\n\x0e\xf0\xf8\t\x0e\x980\n\x0e\xe8\xbd\t\x0e\xd0\xf7\t\x0e0\xf8\t\x0e \xbe\t\x0e`\xf8\t\x0ep0\n\x0e\xe8\xbd\t\x0e\xd0\xf7\t\x0e\xa0\xf7\t\x0e\xd0\xf7\t\x0e\x80\xf9\t\x0e`\xf8\t\x0e\xd0\xf7\t\x0e\xc0O\x9e\x04\xc00\n\x0e\xc0O\x9e\x04x2\n\x0e\xe80\n\x0eP\xf9\t\x0e\xb0\xbd\t\x0e\xd0\xf7\t\x0e\x00\xf8\t\x0e\x101\n\x0e`1\n\x0e\xb0\xbd\t\x0e\xe80\n\x0e\xe8\xbd\t\x0e\x101\n\x0e`1\n\x0e\xa0\xf7\t\x0e`1\n\x0e\xc00\n\x0eX\xbe\t\x0e`\xf8\t\x0e\xa0\xf7\t\x0e\xa0O\x9e\x04\x90\xf8\t\x0e\xe8\xbd\t\x0e\x80N\x9e\x04\xe8\xbd\t\x0eP2\n\x0ep\xf7\t\x0e0\xf8\t\x0e\x80N\x9e\x04\x80\xf9\t\x0e\xc8\xbe\t\x0ep\xf7\t\x0e\xb0\xbd\t\x0e\x00\xf8\t\x0e`O\x9e\x04(2\n\x0e\xb0\xbd\t\x0e \xbe\t\x0e\x80N\x9e\x04 \xbe\t\x0e\x00\xf8\t\x0e\xf0\xf8\t\x0e`1\n\x0e\xc00\n\x0e\xb0\xbd\t\x0e\xc0O\x9e\x04\x101\n\x0ep0\n\x0eP2\n\x0e \xbe\t\x0e\xa0\xf7\t\x0e\xc00\n\x0e`1\n\x0e\x80O\x9e\x04p0\n\x0e \xbe\t\x0ep\xf7\t\x0e`\xf8\t\x0e\x101\n\x0e \xf9\t\x0e\xc0O\x9e\x0481\n\x0ep0\n\x0e\xc0O\x9e\x04\x101\n\x0e81\n\x0e\xc0O\x9e\x04 \xbe\t\x0e\xe80\n\x0e`O\x9e\x04\x00\xbf\t\x0ep\xf7\t\x0e \xbe\t\x0e\xc82\n\x0e\xd0\xf7\t\x0e`\xf8\t\x0ep0\n\x0e\xc0\xf8\t\x0e\xb0\xbd\t\x0e\xd0\xf7\t\x0e \xbe\t\x0e\x980\n\x0e\xb0\xbd\t\x0e\xc00\n\x0e'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S'\xe0A\n\x0e`B\n\x0e\xc0B\n\x0e\x80B\n\x0e @\n\x0e\x80A\n\x0e\x00b)\x03\x00a)\x03\x806}\r\xe0@\n\x0e\xc0A\n\x0e\xe0B\n\x0e\x00C\n\x0e C\n\x0e@C\n\x0e\xa0C\n\x0e\x80@\n\x0e A\n\x0e\x00D\n\x0e D\n\x0e@@\n\x0e`D\n\x0e@D\n\x0e\xa0D\n\x0e\xc0D\n\x0e\x00B\n\x0e\xa0B\n\x0e\xe0D\n\x0e@E\n\x0e E\n\x0e\x80E\n\x0e`E\n\x0e\xc0E\n\x0e\xe0E\n\x0e\x80C\n\x0e\x00A\n\x0e\x00F\n\x0e F\n\x0e\x80F\n\x0e\xa0F\n\x0e\xc0F\n\x0e\xe0F\n\x0e`C\n\x0e G\n\x0e@G\n\x0e`G\n\x0e\xc0C\n\x0e\x00E\n\x0e\x80G\n\x0e\xa0G\n\x0e\xc0G\n\x0e\xe0G\n\x0e@H\n\x0e H\n\x0e\xa0@\n\x0e`H\n\x0e\x80H\n\x0e\xa0H\n\x0e\xc0H\n\x0e\xe0H\n\x0e@I\n\x0e`I\n\x0e`A\n\x0e\xa0A\n\x0e\x80I\n\x0e\xc0\xc1!\x03\xc0I\n\x0e J\n\x0e\x00G\n\x0e`F\n\x0e\xa0\xe4*\x03\x00l)\x03`\xe6*\x03\xe0\xed*\x03\xa0\xed*\x03 \xea*\x03\xe0`)\x03\x00\xe5*\x03\xe0\xe4*\x03\xc0\xe5*\x03@\xe5*\x03`\xe4*\x03 \xe6*\x03\xc0`)\x03`a)\x03@\xed*\x03 \xed*\x03\x80\x05*\x03\xa0\t*\x03@\r*\x03 \x0f*\x03\xe0\n*\x03\x00\t*\x03\xa0\x0b*\x03\xe0\x0b*\x03\x80\x0c*\x03`\x0e*\x03 \x0c*\x03`\x0c*\x03 \r*\x03\xe0\x0c*\x03\xa0\r*\x03`\r*\x03\xa0\x0e*\x03\xc0\r*\x03\x00\x0b*\x03@\x0e*\x03\x00\x0f*\x03\x00\n*\x03\xa0\x0f*\x03\x00\xed*\x03\xe0\t*\x03`\x0f*\x03\xc0\x0c*\x03\xc0\xed*\x03\x00\x0e*\x03\x80\x0b*\x03@\x0b*\x03\xe0\r*\x03 \x0e*\x03 2}\r\x80=}\r\x00\x0c*\x03\xe0\x0f*\x03\x00\r*\x03\x80\r*\x03\xa0\x0c*\x03\x80\x0e*\x03 \x0b*\x03\xc0\x0f*\x03@\x0f*\x03\xc0\x0b*\x03`\x0b*\x03\xc0a)\x03@\x0c*\x03\x80\xe5*\x03\xc0\xa9#\x03 \xa5#\x03\x00\xab#\x03`\xad#\x03\xa0\xa4#\x03\x00\xaa#\x03\xe0\xaa#\x03\x00\xa2#\x03\xe0\xa4#\x03\xa0\xab#\x03\xe0\xa5#\x03\xc0\xab#\x03\x80\xaa#\x03\x00\xa6#\x03@\xa5#\x03`\xa8#\x03\xc0\xa5#\x03\x00\xa5#\x03 \xa8#\x03\xc0k)\x03 A$\x03`C$\x03\xa0A$\x03\xe0D$\x03\xe0F$\x03\x00A$\x03\x00B$\x03`N$\x03\x80D$\x03\xe0O$\x03\x00C$\x03\xc0G$\x03\xe0A$\x03\xc0D$\x03\xa0J$\x03\xc0B$\x03`A$\x03\xe0K$\x03@\xab#\x03@r"\x03\xc0"\x80\r`!\x80\r\x00#\x80\r@ \x80\r\xa0K$\x03 #\x80\r\x00\'\x80\r\xe0\x0e*\x03\xe0r\x82\r\x00w\x82\r\xa0v\x82\r@p\x82\r\xa0p\x82\r`p\x82\r\xc0t\x82\r\xc0p\x82\r\x00L$\x03\xe0v\x82\r \x7f\x82\r\xc0\xc9\x82\r\xe0\xc9\x82\r\xa0\xc9\x82\r\x80\xc6\x82\r@\xc7\x82\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'A\xc6{?\x19\xb2*?\xa2*"?v\xca;?h\xf5.?\x9a\x0f@?\x1a@3?;\xe5]?\xaa\x03\xc0?\xdf$\x82?\x1d\xeb]?M6\x93?\xbfaU?m\xc4{?1@3?\xb7\xb0\xaa?K\xb1*?"\xa7Y?2\x03\x80?\x0eLD?\xa4QD?\xb8\xca;?3\xa0Y?\x9dAs?\xbat&?\xae\x18b?\x926\x93?S{&?\x80\xcf\xcc?\xde`\x15?a\xe7\x1d?\xbe\xa2\x19?\x84\xd9L?\x063b?\xf4aU?\x84\xd9L?\xc3\xea]?^\xa0\x19?F\xb5*?\xb6\xafH?.\xb3*?\xb4\xd7\x0c?\xdf|w?3\x1fQ?\xda\\\x15?!\xbcj?\xc2m&?\xbb\xfc.?;\x04\xa0?:\x7f7?\x99\xf1\x8e?\xd4\x9bH?f\xfan?n\xa1*?\x1d\x7f7?v\xb7*?\\\xb2*?\xfe\xfe.?k:3?\xa9\xf2.?\x06@3?\x05\xdaL?\xf6\xf4\xae?I5"?H\xb4*?\xa0\xdb\x1d?\x0c\xb9*?*\xb1*?!_U?\x96t\xd7?t\x1aQ?E\x847?\x04tf?\x00LD?\x9a\xd6L?\x1a\xbf\x19?\xfc\x85\x19?\xb2\r@?]\x07\xa0?A\xea]?\x1c0"?\xddx\x97?n\xc9{?\xbe\xe4\x1d?\x88\\U?\xc8\xc2;?M\xfc??\x95\xdaL?\x7f\xdd]?9\x877?\xd7i\x06@\xe6G\x84?Z\x1fQ?\t\xe2]?c\x1fQ?m\x1d\x11?~\x867?\xcci\x86?,\x15/?y@3?+\xeb.?#\xe1\xbd?\x87\x8eH?w(b?7\x9f7?G\x19Q?\xf8eU?\xb4\xc2{?\xec\xad\x8a?\xe5\xf5.?\n "?\x1393?v\xc2;?\xce\xb8*?\xa0\x14\x91?a\xb2*?4\xc2\x19?M\xa7Y?\x16m\x86?\xc3\x08@?B\x06@?\xda\x95H?\xb8M3?yff?\x1e\xd2\x8c?7:s?\xbc\xf5\x8e?C\x13\xc0?\xea&b?\xfb\xa6Y?\x96sf?\xd2=3?B\xe4]?\x10\xd8{?\xe4\xf9.?\xfd\x03\x80?\xcb<3?\xab\xafj?\x120b?/\xaf\x8a?$KD?_cU?O\x95H?\x90\xeb]?S@s?\x0c6\x03@u\'\xe2?1\xfc.?\x9b+"?)~w?\x1b\xb1*?6\x1e\x11?\xf3\x1fQ?\nn&?\xd4)"?\x97\xa6Y?\xa8\x8eH?\x07\x9bH?\xbb\xb6*?\x1c\x1bQ?\xe8\xb7*?n=3?m\xbe;?R Q?}i\x86?g~w?\xb5\xe0\xbd?\x13[U?\xd5\xcf\x9b?\x1f\x03\x80?\xe3\xf4\x8e?\xae)"?j\xa1\x19?\xcdA3?\xff}&?AB\x84?v\xb1\xaa?\x85."?\x1e\x8b\xc8?\xfcI"?\xba\xf5.?\r\xa0\x19?\xc3?s?\xa4\t@?\xf28\xb3?7\xca;?c\xc6;?S\xf6n?\xb2\xc1{?\x1a9\x93?\x89~7?\xac\xbeY?\x11\xee]?o\xc2\xdb?gF\x04@e\xa3Y?\xe6\xc9;?g\xb1{?&\x06@?\x9e%\x82?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'pm\xef\x04\xb0`\xef\x04P\xf3\xec\x048\xf6\xec\x04H\xf8\xec\x04\xd8\xfb\xec\x04(\xfd\xec\x04H\xf5\xec\x048\xf9\xec\x04\x88\xf4\xec\x04P\xf0\xec\x04\xb8\xf4\xec\x04\xd0\xf7\xec\x04X\xf1\xec\x04p\xfa\xec\x04\x98\xff\xec\x04x\xf8\xec\x04X\xf4\xec\x04 \xff\xec\x04\xf0\xf8\xec\x04H\xfb\xec\x04p\xf4\xec\x04\xb0\xf0\xec\x04\xa8\xf8\xec\x04\xd8\xf2\xec\x04\xa8\xf2\xec\x04\xf0\xf2\xec\x04\xc8\xf3\xec\x04\x10\xf1\xec\x04\xa0\xf4\xec\x040\xf2\xec\x04\xc0\xf2\xec\x04\xc8\xff\xec\x04\xa8\xfb\xec\x04\x80\xf3\xec\x04\xa8\xf5\xec\x04\xb0\xf9\xec\x048\xf3\xec\x04\xe8\xf4\xec\x04\xd8\xf5\xec\x04h\xf0\xec\x04\x00\xf2\xec\x04P\xf6\xec\x04\x10\xfd\xec\x04\xe8\xfa\xec\x04(\xf4\xec\x04\x00\xf8\xec\x04@\xfd\xec\x04\x80\xf9\xec\x04(\xf1\xec\x04\xf0\xf5\xec\x04X\xfa\xec\x04p\xf7\xec\x04 \xf0\xec\x04h\xf6\xec\x04\x08\xf6\xec\x04@\xf4\xec\x04\xf8\xf3\xec\x04@\xf1\xec\x04\x18\xf5\xec\x040\xf8\xec\x04 \xf3\xec\x04\x08\xf9\xec\x04\xd8\xf8\xec\x04\x90\xf5\xec\x04\xe0\xf9\xec\x04X\xfd\xec\x04\xe0\xfc\xec\x04\xf8\xfc\xec\x04\xa0\xf1\xec\x04x\xe2\xf6\x04\xc8\xf6\xec\x04\xf8\xf9\xec\x04\x00\xf5\xec\x04\xe8\xf7\xec\x04\x00\xfe\xec\x04\x80\xf0\xec\x04\xc8\xf0\xec\x040\xf5\xec\x04\x98\xf0\xec\x04\x90\xfb\xec\x04\x98\xfc\xec\x04\x10\xf4\xec\x04\xa0\xfa\xec\x04h\xfc\xec\x04h\xff\xec\x04\xb8\xf7\xec\x04p\xf1\xec\x04x\xfe\xec\x04 \xf9\xec\x04\x98\xf3\xec\x04\x88\xfa\xec\x04\xb0\xff\xec\x04\x18\xf2\xec\x04\x90\xf8\xec\x04X\xf7\xec\x04\xb0\xfc\xec\x04\x88\xfd\xec\x04x\xf2\xec\x04\x90\xfe\xec\x04h\xf3\xec\x04 \xf6\xec\x04\x10\xfa\xec\x04`\xfb\xec\x04\x88\xf1\xec\x04`\xf8\xec\x04\x18\xf8\xec\x04\xd0\xf1\xec\x048\xff\xec\x04\xf0\xfb\xec\x04\xc8\xfc\xec\x04\xc0\xfb\xec\x040\xfe\xec\x04\xb8\xfd\xec\x04\x08\xfc\xec\x04`\xf2\xec\x04\x80\xfc\xec\x04 \xfc\xec\x04\xd8\xfe\xec\x04\xd0\xfa\xec\x04\xf0\xfe\xec\x04\x08\xff\xec\x04p\xfd\xec\x04\xc0\xf5\xec\x04@\xfa\xec\x04\x18\xfe\xec\x048\xf0\xec\x040\xfb\xec\x04h\xf9\xec\x04\x88\xf7\xec\x04\xd0\xfd\xec\x04\x80\xff\xec\x04\xb8\xfa\xec\x048\xfc\xec\x04\xc0\xfe\xec\x04\xe0\xff\xec\x04\xe0\xf0\xec\x04H\xfe\xec\x04\x98\xf6\xec\x04\xd0\xf4\xec\x04x\xf5\xec\x04\xa0\xf7\xec\x04`\xfe\xec\x04\x80\xf6\xec\x04\xb0\xf6\xec\x04\x08\xf3\xec\x04\xe8\xf1\xec\x04(\xfa\xec\x04\x00\xfb\xec\x04\xe8\xfd\xec\x04P\xff\xec\x04P\xe6\xf6\x04\xa8\xee\xf6\x04 \xef\xf6\x04p\xe1\xf6\x04\xf8\xec\xf6\x04\x80\xec\xf6\x04\x80\xe0\xf6\x04H\xe5\xf6\x04\xe8\xe1\xf6\x04\xb0\xe6\xf6\x04(\xe7\xf6\x048\xe9\xf6\x04\x08\xef\xf6\x04\x88\xe4\xf6\x04h\xef\xf6\x04\x98\xec\xf6\x04\xc0\xe5\xf6\x04@\xe7\xf6\x04\xb0\xe9\xf6\x04\x00\xe5\xf6\x04\x00\xee\xf6\x04\xe0\xef\xf6\x04\xe8\xe4\xf6\x04\xb0\xe3\xf6\x04h\xe0\xf6\x04\x90\xe2\xf6\x04H\xe2\xf6\x04\x80\xe6\xf6\x04`\xee\xf6\x04x\xeb\xf6\x04\xd8\xee\xf6\x040\xee\xf6\x04X\xed\xf6\x04\x08\xe3\xf6\x04\xc8\xe3\xf6\x04p\xe7\xf6\x04\x08\xe6\xf6\x04\xc0\xe2\xf6\x04\xe0\xe0\xf6\x04@\xea\xf6\x04\x90\xee\xf6\x04\xd0\xe1\xf6\x04(\xed\xf6\x04\xe0\xf3\xec\x04\xf8\xf0\xec\x04\x18\xfb\xec\x04\x98\xf9\xec\x04x\xfb\xec\x04\xa0\xfd\xec\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3748
sg3632
g3738
sg3646
g3742
sg3641
g3746
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3799
sg3632
g3789
sg3646
g3793
sg3641
g3797
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3810
sg3632
g3806
sg3646
g3817
sg3641
g3814
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3714
sg3632
g3823
sg3646
g3708
sg3641
g3830
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3691
sg3632
g3838
sg3646
g3698
sg3641
g3845
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3857
sg3632
g3853
sg3646
g3864
sg3641
g3861
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3900
sg3632
g3896
sg3646
g3907
sg3641
g3904
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3917
sg3632
g3913
sg3646
g3924
sg3641
g3921
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3940
sg3632
g3930
sg3646
g3934
sg3641
g3938
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3917
sg3632
g3947
sg3646
g3924
sg3641
g3954
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3674
sg3632
g3962
sg3646
g3681
sg3641
g3969
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3987
sg3632
g3977
sg3646
g3981
sg3641
g3985
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3940
sg3632
g3930
sg3646
g3934
sg3641
g3938
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g3900
sg3632
g3896
sg3646
g3907
sg3641
g3904
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g3759
sg3632
g4046
sg3646
g3766
sg3641
g4053
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g3674
sg3632
g3962
sg3646
g3681
sg3641
g3969
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g3900
sg3632
g3896
sg3646
g3907
sg3641
g3904
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g3657
sg3632
g4087
sg3646
g3664
sg3641
g4094
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g3857
sg3632
g3853
sg3646
g3864
sg3641
g3861
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g3776
sg3632
g4128
sg3646
g3783
sg3641
g4135
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g4147
sg3632
g4143
sg3646
g4154
sg3641
g4151
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3810
sg3632
g3806
sg3646
g3817
sg3641
g3814
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g3900
sg3632
g3896
sg3646
g3907
sg3641
g3904
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g4147
sg3632
g4143
sg3646
g4154
sg3641
g4151
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g3917
sg3632
g3913
sg3646
g3924
sg3641
g3921
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g3857
sg3632
g3853
sg3646
g3864
sg3641
g3861
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g3776
sg3632
g4128
sg3646
g3783
sg3641
g4135
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g3657
sg3632
g4087
sg3646
g3664
sg3641
g4094
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g3900
sg3632
g4277
sg3646
g3907
sg3641
g4284
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g3917
sg3632
g3913
sg3646
g3924
sg3641
g3921
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g4309
sg3632
g4305
sg3646
g4316
sg3641
g4313
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g3987
sg3632
g4322
sg3646
g3981
sg3641
g4329
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g3940
sg3632
g4350
sg3646
g3934
sg3641
g4357
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g3987
sg3632
g4322
sg3646
g3981
sg3641
g4329
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g3776
sg3632
g4128
sg3646
g3783
sg3641
g4135
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g3810
sg3632
g4404
sg3646
g3817
sg3641
g4411
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g3725
sg3632
g4419
sg3646
g3732
sg3641
g4426
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g4438
sg3632
g4434
sg3646
g4445
sg3641
g4442
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g3759
sg3632
g4046
sg3646
g3766
sg3641
g4053
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g3810
sg3632
g4404
sg3646
g3817
sg3641
g4411
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g4147
sg3632
g4477
sg3646
g4154
sg3641
g4484
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g3987
sg3632
g4322
sg3646
g3981
sg3641
g4329
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g3857
sg3632
g3853
sg3646
g3864
sg3641
g3861
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g3940
sg3632
g3930
sg3646
g3934
sg3641
g3938
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g4309
sg3632
g4305
sg3646
g4316
sg3641
g4313
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g3917
sg3632
g3947
sg3646
g3924
sg3641
g3954
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g4438
sg3632
g4434
sg3646
g4445
sg3641
g4442
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g3987
sg3632
g3977
sg3646
g3981
sg3641
g3985
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g4309
sg3632
g4305
sg3646
g4316
sg3641
g4313
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g3725
sg3632
g4419
sg3646
g3732
sg3641
g4426
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g3810
sg3632
g3806
sg3646
g3817
sg3641
g3814
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g3987
sg3632
g4322
sg3646
g3981
sg3641
g4329
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g3917
sg3632
g3947
sg3646
g3924
sg3641
g3954
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g3987
sg3632
g3977
sg3646
g3981
sg3641
g3985
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g3940
sg3632
g4350
sg3646
g3934
sg3641
g4357
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g4147
sg3632
g4143
sg3646
g4154
sg3641
g4151
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g4147
sg3632
g4477
sg3646
g4154
sg3641
g4484
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g3857
sg3632
g4765
sg3646
g3864
sg3641
g4772
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g3987
sg3632
g3977
sg3646
g3981
sg3641
g3985
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g3799
sg3632
g4793
sg3646
g3793
sg3641
g4800
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g3810
sg3632
g4404
sg3646
g3817
sg3641
g4411
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g3857
sg3632
g3853
sg3646
g3864
sg3641
g3861
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g3637
sg3632
g4834
sg3646
g3647
sg3641
g4841
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g3900
sg3632
g3896
sg3646
g3907
sg3641
g3904
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g4309
sg3632
g4875
sg3646
g4316
sg3641
g4882
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g3799
sg3632
g4793
sg3646
g3793
sg3641
g4800
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g3748
sg3632
g3738
sg3646
g3742
sg3641
g3746
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g3940
sg3632
g3930
sg3646
g3934
sg3641
g3938
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g3857
sg3632
g4765
sg3646
g3864
sg3641
g4772
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g4946
sg3632
g4942
sg3646
g4953
sg3641
g4950
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g3799
sg3632
g3789
sg3646
g3793
sg3641
g3797
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g3714
sg3632
g3823
sg3646
g3708
sg3641
g3830
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g3917
sg3632
g3947
sg3646
g3924
sg3641
g3954
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g4438
sg3632
g4434
sg3646
g4445
sg3641
g4442
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g3810
sg3632
g3806
sg3646
g3817
sg3641
g3814
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g3691
sg3632
g3838
sg3646
g3698
sg3641
g3845
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g3725
sg3632
g4419
sg3646
g3732
sg3641
g4426
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g3748
sg3632
g5076
sg3646
g3742
sg3641
g5083
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g3940
sg3632
g4350
sg3646
g3934
sg3641
g4357
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g4946
sg3632
g5104
sg3646
g4953
sg3641
g5111
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g4147
sg3632
g4477
sg3646
g4154
sg3641
g4484
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g3714
sg3632
g3823
sg3646
g3708
sg3641
g3830
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g3748
sg3632
g5076
sg3646
g3742
sg3641
g5083
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g3748
sg3632
g5076
sg3646
g3742
sg3641
g5083
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g3940
sg3632
g4350
sg3646
g3934
sg3641
g4357
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g4147
sg3632
g4477
sg3646
g4154
sg3641
g4484
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g3748
sg3632
g5076
sg3646
g3742
sg3641
g5083
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g4438
sg3632
g5236
sg3646
g4445
sg3641
g5243
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g3759
sg3632
g4046
sg3646
g3766
sg3641
g4053
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g4438
sg3632
g4434
sg3646
g4445
sg3641
g4442
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g3987
sg3632
g3977
sg3646
g3981
sg3641
g3985
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g3776
sg3632
g4128
sg3646
g3783
sg3641
g4135
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g3748
sg3632
g3738
sg3646
g3742
sg3641
g3746
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g3637
sg3632
g4834
sg3646
g3647
sg3641
g4841
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g3748
sg3632
g5076
sg3646
g3742
sg3641
g5083
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g3917
sg3632
g3913
sg3646
g3924
sg3641
g3921
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g3799
sg3632
g4793
sg3646
g3793
sg3641
g4800
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g4309
sg3632
g4875
sg3646
g4316
sg3641
g4882
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g3637
sg3632
g4834
sg3646
g3647
sg3641
g4841
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g3776
sg3632
g4128
sg3646
g3783
sg3641
g4135
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g3714
sg3632
g3823
sg3646
g3708
sg3641
g3830
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g3799
sg3632
g4793
sg3646
g3793
sg3641
g4800
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g4309
sg3632
g4875
sg3646
g4316
sg3641
g4882
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g3691
sg3632
g3838
sg3646
g3698
sg3641
g3845
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g4309
sg3632
g4875
sg3646
g4316
sg3641
g4882
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g3759
sg3632
g4046
sg3646
g3766
sg3641
g4053
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g3799
sg3632
g3789
sg3646
g3793
sg3641
g3797
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g4147
sg3632
g4477
sg3646
g4154
sg3641
g4484
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g3691
sg3632
g3838
sg3646
g3698
sg3641
g3845
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g3987
sg3632
g4322
sg3646
g3981
sg3641
g4329
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g3810
sg3632
g4404
sg3646
g3817
sg3641
g4411
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g3714
sg3632
g3823
sg3646
g3708
sg3641
g3830
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g3900
sg3632
g4277
sg3646
g3907
sg3641
g4284
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g3674
sg3632
g3962
sg3646
g3681
sg3641
g3969
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g3940
sg3632
g4350
sg3646
g3934
sg3641
g4357
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g3810
sg3632
g3806
sg3646
g3817
sg3641
g3814
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g3940
sg3632
g3930
sg3646
g3934
sg3641
g3938
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g4438
sg3632
g5236
sg3646
g4445
sg3641
g5243
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g3917
sg3632
g3947
sg3646
g3924
sg3641
g3954
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g3900
sg3632
g4277
sg3646
g3907
sg3641
g4284
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g3857
sg3632
g4765
sg3646
g3864
sg3641
g4772
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g4946
sg3632
g4942
sg3646
g4953
sg3641
g4950
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g3810
sg3632
g4404
sg3646
g3817
sg3641
g4411
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g4946
sg3632
g5104
sg3646
g4953
sg3641
g5111
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g3917
sg3632
g3913
sg3646
g3924
sg3641
g3921
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g4309
sg3632
g4305
sg3646
g4316
sg3641
g4313
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g4438
sg3632
g5236
sg3646
g4445
sg3641
g5243
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g3799
sg3632
g3789
sg3646
g3793
sg3641
g3797
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g3657
sg3632
g4087
sg3646
g3664
sg3641
g4094
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g3900
sg3632
g4277
sg3646
g3907
sg3641
g4284
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g4946
sg3632
g4942
sg3646
g4953
sg3641
g4950
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g3691
sg3632
g3838
sg3646
g3698
sg3641
g3845
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g3759
sg3632
g4046
sg3646
g3766
sg3641
g4053
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g4309
sg3632
g4875
sg3646
g4316
sg3641
g4882
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g4946
sg3632
g4942
sg3646
g4953
sg3641
g4950
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g4147
sg3632
g4143
sg3646
g4154
sg3641
g4151
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g3799
sg3632
g4793
sg3646
g3793
sg3641
g4800
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g3725
sg3632
g4419
sg3646
g3732
sg3641
g4426
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g4438
sg3632
g5236
sg3646
g4445
sg3641
g5243
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g3857
sg3632
g4765
sg3646
g3864
sg3641
g4772
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g3657
sg3632
g4087
sg3646
g3664
sg3641
g4094
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g4438
sg3632
g4434
sg3646
g4445
sg3641
g4442
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g3799
sg3632
g3789
sg3646
g3793
sg3641
g3797
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g3857
sg3632
g4765
sg3646
g3864
sg3641
g4772
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g4438
sg3632
g5236
sg3646
g4445
sg3641
g5243
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g4946
sg3632
g5104
sg3646
g4953
sg3641
g5111
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g3900
sg3632
g4277
sg3646
g3907
sg3641
g4284
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g4946
sg3632
g5104
sg3646
g4953
sg3641
g5111
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g3674
sg3632
g3962
sg3646
g3681
sg3641
g3969
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g4946
sg3632
g4942
sg3646
g4953
sg3641
g4950
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g4309
sg3632
g4305
sg3646
g4316
sg3641
g4313
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g3748
sg3632
g3738
sg3646
g3742
sg3641
g3746
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g4147
sg3632
g4143
sg3646
g4154
sg3641
g4151
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g3657
sg3632
g4087
sg3646
g3664
sg3641
g4094
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g3674
sg3632
g3962
sg3646
g3681
sg3641
g3969
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g3637
sg3632
g4834
sg3646
g3647
sg3641
g4841
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g3748
sg3632
g3738
sg3646
g3742
sg3641
g3746
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g4946
sg3632
g5104
sg3646
g4953
sg3641
g5111
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g3725
sg3632
g4419
sg3646
g3732
sg3641
g4426
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g3637
sg3632
g4834
sg3646
g3647
sg3641
g4841
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I84423504
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S'\xf0\xf7r\x130\xf9r\x13 ,r\x13X\xf9r\x13 ?\x83\r`\x17)\x03\x80,r\x13\x18\xf8r\x13 ?\x83\r\xb0,r\x13@\xf8r\x13\xe0,r\x13\x10-r\x13\xe0,r\x13\xf0\xf7r\x13\x00.r\x13 ?\x83\rh\xf8r\x13`\x1c)\x03p-r\x13\xf0\x04s\x13@\x1e)\x03\xb8\x04s\x13\xa0=\x83\r@-r\x13\x10-r\x13`\x17)\x03\x80\x04s\x13X\xf9r\x13@\xf8r\x13P,r\x13\x10-r\x13\xb0,r\x13 ,r\x13\xb0,r\x13\xf0\xf7r\x13@\x1e)\x03`\x17)\x03\x10-r\x13\x80,r\x13`\x1c)\x03\x90\xf8r\x13\xf8\xf9r\x13\xb8\x04s\x13\xd0\xf9r\x13\xe0,r\x13\xf0\x04s\x13\xe0,r\x13h\xf8r\x130.r\x13@\x1e)\x03P,r\x13\x90\xf8r\x13\xb8\x04s\x13 ,r\x13\x80\xf9r\x13@\x1e)\x03\xe0,r\x13\x00.r\x13\x18\xf8r\x13\xb8\xf8r\x13\xb0,r\x13p-r\x13\xf0\x04s\x13 ,r\x13\xb8\x04s\x13\xf0\x04s\x13\xf0\xf7r\x13 ,r\x13\x80\x11)\x03\xd0\xf9r\x13P,r\x13\x90\xf8r\x13\xb8\xf8r\x13 ,r\x13\xd0\xf9r\x13\xf0\x04s\x13\xb0,r\x13\x18\xf8r\x13@\xf8r\x13\xf0\x04s\x13\x80\x04s\x13\x90\xf8r\x13`\x1c)\x03\xf0\xf7r\x13\xb0,r\x13H\xfar\x13\x18\xf8r\x13\x80\x11)\x03\x18\xf8r\x13\x80\x11)\x03@-r\x13\x80\x11)\x03\xe0,r\x13`\x17)\x03\xe0\xf8r\x13P,r\x13\xd0-r\x13\xb8\xf8r\x13\x10-r\x13@\xf8r\x13\x80\x04s\x13@\x1e)\x03\xf0\xf7r\x13\xb8\xf8r\x13@\xf8r\x13\xb0,r\x13\xf0\xf7r\x13\x90\xf8r\x13\xf0\x04s\x13\xa8\xf9r\x13`\x17)\x03\x80,r\x13\xb0,r\x13\x80\x04s\x13\xb8\xf8r\x13\xf0\x04s\x13\x80,r\x13P,r\x13\x80\x11)\x03\xb8\xf8r\x13\x80\x04s\x13\xe0\xf8r\x13\xf0\xf7r\x13\x98\x05s\x13\x80\xf9r\x13\x00.r\x13 ,r\x13\x80\x04s\x13@\x1e)\x03\x80\x11)\x03h\xf8r\x13\x90\xf8r\x13`\x1c)\x03\x10-r\x13\xb8\x04s\x13\xb8\xf8r\x13\x80\x11)\x03h\xf8r\x13\xf0\x04s\x13\x90\xf8r\x13P,r\x13h\xf8r\x13\x80,r\x13\xe0\xf8r\x13P,r\x13\xb0,r\x13`\x17)\x03\xe0\xf8r\x13@-r\x13@\xf8r\x13\x80\x11)\x03\x80\x04s\x13`\x1c)\x03\xb0,r\x13 ,r\x13\xe0\xf8r\x13\xb8\xf8r\x130.r\x13`\x17)\x03@\xf8r\x13@-r\x13\x80\x11)\x03h\xf8r\x13H\xfar\x13\xa8\xf9r\x13\xd0-r\x13`\x17)\x03\xe0\xf8r\x13`\x1c)\x03@\x1e)\x03\xf0\x04s\x13@\x1e)\x03\x18\xf8r\x13\xe0,r\x13@-r\x13`\x1c)\x03\xe0\xf8r\x13`\x1c)\x03@\x1e)\x03X\xf9r\x13h\xf8r\x13\x10-r\x13\xb8\x04s\x13 \xfar\x13\x80\x04s\x13`\x05s\x13\xf0\xf7r\x13\x18\xf8r\x13\x80\x04s\x13H\xfar\x13@\xf8r\x13\x90\xf8r\x13\xf0\xf7r\x13`\x1c)\x03p-r\x13 \xfar\x13`\x05s\x13\xb8\x04s\x13\xe0,r\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x80\xebs\x13\xa0\xeas\x13\xa0\xebs\x13@\xeas\x13\x00\xebs\x13\x80\xeas\x13\xc0\xecs\x13\xe0\xecs\x13`\xebs\x13 \xeas\x13\xc0\xebs\x13`\xeds\x13\x80\xeds\x13`\xeas\x13@\xecs\x13\xe0\xeds\x13\xe0\xe9s\x13 \xebs\x13 \xecs\x13\xe0\xeas\x13\xa0\xecs\x13\xa0\xees\x13\xc0\xeas\x13 \xeds\x13\x80\xees\x13\x80\xecs\x13 \xefs\x13\x00\xeds\x13@\xeds\x13`\xefs\x13\xe0\xefs\x13@\xefs\x13\x00\xefs\x13\xc0\xefs\x13\xa0\xefs\x13\x80\xefs\x13@\xees\x13\xa0\xeds\x13\x00\xecs\x13@\xebs\x13`\xecs\x13 \xees\x13\xe0\xebs\x13\xc0\xeds\x13\xe0\xees\x13\xc0\xees\x13`\xees\x13\x00\xees\x13`\x90\x86\x13\xe0\x91\x86\x13`\x92\x86\x13\xc0\x91\x86\x13\xe0\x90\x86\x13\xa0\x92\x86\x13\x80\x92\x86\x13\x00\x93\x86\x13\xe0\x92\x86\x13\x80\x91\x86\x13 \x93\x86\x13\x80\x93\x86\x13`\x93\x86\x13\xc0\x93\x86\x13\xa0\x93\x86\x13\x00\x92\x86\x13 \x94\x86\x13@\x94\x86\x13`\x91\x86\x13\x80\x94\x86\x13\xa0\x94\x86\x13\xc0\x94\x86\x13\x80\x90\x86\x13\x00\x95\x86\x13\xe0\x94\x86\x13@\x95\x86\x13`\x95\x86\x13\x80\x95\x86\x13\xa0\x95\x86\x13\xc0\x95\x86\x13 \x90\x86\x13@\x90\x86\x13\xe0\x95\x86\x13\x00\x96\x86\x13`\x96\x86\x13\x80\x96\x86\x13\xa0\x96\x86\x13\xa0\x90\x86\x13@\x92\x86\x13\xc0\x96\x86\x13\xe0\x96\x86\x13\x00\x97\x86\x13 \x97\x86\x13@\x97\x86\x13`\x97\x86\x13\x80\x97\x86\x13\xa0\x97\x86\x13\xc0\x97\x86\x13\xe0\x97\x86\x13\x00\x98\x86\x13 \x98\x86\x13\x80\x98\x86\x13\xa0\x98\x86\x13\xc0\x98\x86\x13\xe0\x98\x86\x13 \x92\x86\x13@\x93\x86\x13\x00\x99\x86\x13 \x99\x86\x13@\x99\x86\x13`\x99\x86\x13\xc0\x99\x86\x13\xa0\x99\x86\x13\x00\x9a\x86\x13\xe0\x99\x86\x13@\x98\x86\x13`\x9a\x86\x13\x80\x9a\x86\x13\xa0\x9a\x86\x13\xc0\x9a\x86\x13\xe0\x9a\x86\x13\xc0\x90\x86\x13\x00\x91\x86\x13\x00\x9b\x86\x13 \x9b\x86\x13@\x9b\x86\x13\xa0\x9b\x86\x13\x80\x9b\x86\x13\x80\x0f*\x03\x00\x9c\x86\x13 \x9c\x86\x13`\x98\x86\x13\xc0\x92\x86\x13 \x95\x86\x13\xa0\x9c\x86\x13\x80\x99\x86\x13`\x9b\x86\x13@\x9a\x86\x13\xc0\x9c\x86\x13\x00\x94\x86\x13\x00\x9d\x86\x13`\x9c\x86\x13`\x94\x86\x13\xa0\x9d\x86\x13\xe0\x93\x86\x13\xe0\x9c\x86\x13 \x9d\x86\x13@\x91\x86\x13 \x9e\x86\x13 \x96\x86\x13`\x9e\x86\x13\xc0\x9e\x86\x13@\x9d\x86\x13\x80\x9c\x86\x13\x00\x9f\x86\x13\xa0\x91\x86\x13\xe0\x9e\x86\x13\x80\x9f\x86\x13\xc0\x9f\x86\x13\xe0\x9b\x86\x13\x00\x9e\x86\x13\xc0\x9d\x86\x13@\x9c\x86\x13\xe0\x9d\x86\x13 \x9a\x86\x13\x80\x9e\x86\x13 \x9f\x86\x13\xc0\x9b\x86\x13`\x9f\x86\x13\xa0\x9e\x86\x13 \x91\x86\x13\x80\x9d\x86\x13@\x9f\x86\x13@\x96\x86\x13\xa0\x9f\x86\x13`\x9d\x86\x13\xe0\x9f\x86\x13\xc0A\xb1\x13@B\xb1\x13\xa0B\xb1\x13\x80@\xb1\x13\xe0@\xb1\x13`B\xb1\x13\x80B\xb1\x13\x00C\xb1\x13 C\xb1\x13 @\xb1\x13 B\xb1\x13@C\xb1\x13`C\xb1\x13\xc0C\xb1\x13\xa0C\xb1\x13`@\xb1\x13\xe0C\xb1\x13@D\xb1\x13`D\xb1\x13\x80D\xb1\x13\x00A\xb1\x13\xc0B\xb1\x13\xe0D\xb1\x13\xc0D\xb1\x13`A\xb1\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S'\x1ef&?\xe3s&?\xd2\x837?\x1f\xca{?Swc?\xc9rf?\xb4\xb7*?\xe6\xc1L?Z\x877?\x81\x06@?\x0bdU?\xb2B3?\x93\xe4\x1d?\xa6\x82&?\x08xw?\x82\xae\xca?\xc6(\x82?\x10/"?\x8b_\x15?~QU?\x08\xb7j?^\xb5j? \xf2L?\xcc\x8e\xa8?8t7?\xc4("?5]\x15?:\xb1\x8a?\x1b\xf0L?\xd3\xeb\x1d?\xb8\\U?\xa4\r@?V\'\xa2?\xf6\x16\x11?84\xe2?`93?\xcbb\x15?\xdd\xfc.?\xaa\\\x15?\xfb83?\xaeu&?j\xc9;?\xfc\xfb.?\x11\x807?\x9b^\x15?\x0e;3?\xdf\xcej?\xb3s&?\xf6\xa8\x19?\xaao&?i\x14\x91?\xe3KD?\xbaPD?"\xa1\x19?\xb8)"?(\x1e\x11?\xb8:s?j\x1eQ?q\xacH?\xbal7?B\xc2\x9b?=\xfb.?2\xdb\x1d?\xd7PD?Q_\x15??\xc5;?"n&?\x8483?\xe2\xe5\x1d?\xca\xa1\x19?Lc\x15?\x1d\x94H?\xc4\xa7Y?\xc6\x04\x80?\xa5\x95H?\xeb\xd6\x0c?\x08\xb0\x8a?\xedZU?\xa3\xe5.?"\xa1Y?M\xa7\x19?\x17\xf5.?c\xfd]?\xc8t&?\xf723?\x11q&?\x01\xe7\x1d?@MU?\xfe\xfe.?$~H?\xf7m&?\x92\x847?\x9bq&?\x15/"?<\xb9*?\x9a\xc3;?\x12RD?\xd6\xd3\x0c?<\xb7*?\xbb\x9f\x19?\xa6\xdb\x0c?\x83\xe5\x1d?\x83s&?\x85\x17\x11?\x80\x0c@?\xa5\x97\x08?\xc6\x847?\xd063?\x7f\xa8\x19?\xae\x07@?\x9f\xfc.?\xedo&?\x96u&?\xfa\xf4n?\xedG\x84?\x19\xc3;?\x8a\x04\x80?\t*"?\xa8\xd1*?i&"?g\xa6\x19?\xb6r&?\xc7~7?m\xad*?g\xbfY?t/b?H13?\xab\xf7.?Xs&?\xde\xf4.?uq&?\xff\x1e\x11?\xb0?3?5n&?Ym&?S\xf4.?\xc8As?\xad\xd8\x0c? \x1f\x11?\xc0\xc5;?\x10/"?\x83)"?pd\x15?9\x17\x11?\xafm&?\x90\xeb\x1d?U\xfb.?\xa6\xd3\x0c?\x1a`\x15?\xc7\xb3*?\xf7\xd9\x0c?W\x1e\x11?U\xe4\x1d?\x1e\x1e\x11?+\'\x82?\\\xd4\x0c?;/b?\x8b\xc9{?1\x1a\x11?\xbd\xa6\x19?\x9e\xc0\x19?\xacr&?\x0c\x95H?\xa3\xa3\x19?_\x1b\x11?, \x11?\xbf\x897?\xb7\x1e\x11?\x06/"?\x1b\xec]?bKD?\x85\x0c@?j\x04\x1e?\xf4\x7fH?\xe3:3?\xc1\xc1;?Z\x897?\xc4nf?9\xbc\xea?_\xf5.?ZAs?\x19\xe5\x1d?\x07\x827?\xed^U?f"@?\x13\x7fw?@(\x82?\xe6\x0f\x11?I`&?4PD?\xaey\x86?\x08\xfb.?\x1c\xe6\x1d?Ag&?,\x8b\xa8?LJ\x15?~w&?0[\x15? \xfb.?+PD?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S'\xb0\xec\xf6\x04\x00\xe2\xf6\x04\x10\xc1\xdf\x04\x88\xca\xdf\x04`\xce\xdf\x04\xa8\xc5\xdf\x04\x10\xc7\xdf\x04`\xc5\xdf\x04X\xc1\xdf\x04\xe8\xcd\xdf\x04\xf8\xcc\xdf\x04\xc8\xc0\xdf\x04\xa0\xca\xdf\x04h\xc0\xdf\x04\x08\xcf\xdf\x048\xc6\xdf\x04\x98\xcf\xdf\x04h\xc9\xdf\x04\x18\xc2\xdf\x04(\xc1\xdf\x04(\xc4\xdf\x04X\xca\xdf\x04X\xc4\xdf\x04\x80\xcf\xdf\x04\x90\xc8\xdf\x04\x90\xcb\xdf\x04\xa8\xc2\xdf\x04\x10\xcd\xdf\x04H\xcb\xdf\x04\xf8\xc0\xdf\x048\xc3\xdf\x04\xe8\xc1\xdf\x04\xe0\xc3\xdf\x04@\xca\xdf\x04\xb0\xcf\xdf\x04\xb0\xc3\xdf\x04P\xc9\xdf\x040\xc2\xdf\x04\x98\xc3\xdf\x04\xc0\xc5\xdf\x04\xa8\xcb\xdf\x04X\xcd\xdf\x04X\xc7\xdf\x04\x18\xc5\xdf\x04\x18\xce\xdf\x04\xc8\xcc\xdf\x04\xc0\xce\xdf\x04\x88\xc4\xdf\x04\xa0\xc7\xdf\x04P\xc3\xdf\x04 \xcc\xdf\x04\xf0\xce\xdf\x04\x10\xca\xdf\x04\xc0\xcb\xdf\x04(\xca\xdf\x04\x08\xc9\xdf\x04\xb0\xc9\xdf\x04@\xc7\xdf\x04h\xcc\xdf\x04p\xca\xdf\x04 \xcf\xdf\x04\xe0\xcc\xdf\x04\x88\xcd\xdf\x04\xd0\xcd\xdf\x04\xd8\xc8\xdf\x04\xa8\xc8\xdf\x04@\xc1\xdf\x04\xf8\xc9\xdf\x04\x80\xc3\xdf\x04`\xc2\xdf\x04x\xc8\xdf\x04@\xcd\xdf\x04\x00\xc2\xdf\x04 \xc0\xdf\x04\x00\xce\xdf\x04\xa0\xc1\xdf\x04(\xcd\xdf\x04\x90\xce\xdf\x04`\xcb\xdf\x04\xe8\xc4\xdf\x04\x98\xcc\xdf\x04\x00\xcb\xdf\x04\xa0\xcd\xdf\x04\xb8\xcd\xdf\x04H\xce\xdf\x04\x80\xc9\xdf\x040\xce\xdf\x04\xb0\xcc\xdf\x04\xe8\xc7\xdf\x04\xf0\xc8\xdf\x04@\xc4\xdf\x04\x98\xc9\xdf\x04\xf0\xc2\xdf\x04P\xcf\xdf\x04 \xc9\xdf\x04x\xcb\xdf\x04p\xcd\xdf\x04\xd8\xcb\xdf\x04x\xce\xdf\x040\xcb\xdf\x048\xcc\xdf\x04\xb0\xc0\xdf\x04\xd8\xce\xdf\x04\xe0\xcf\xdf\x04H\xc5\xdf\x04\xc8\xcf\xdf\x04\xc8\xc6\xdf\x04P\xc6\xdf\x04P\xcc\xdf\x04\xc0h\xef\x04\x10j\xef\x04\x90e\xef\x04\xe0c\xef\x04\x80f\xef\x04(j\xef\x04\x08f\xef\x04pa\xef\x04Pc\xef\x04xh\xef\x04Xa\xef\x04\xf8c\xef\x04\xd0d\xef\x04\x18k\xef\x04\xd8b\xef\x04\xd0a\xef\x04\x88a\xef\x04\x80o\xef\x04\xe8g\xef\x04\xf0e\xef\x04\xe8d\xef\x04\xf8f\xef\x04 f\xef\x04\xe0`\xef\x04\x18b\xef\x04hi\xef\x04hf\xef\x04\xc8l\xef\x04\xb0i\xef\x04\xe0f\xef\x040e\xef\x04hl\xef\x04\x18e\xef\x04@m\xef\x04\xb0c\xef\x048`\xef\x04\x80`\xef\x04\x80\xc6\xdf\x04\xe0\xc0\xdf\x040\xc5\xdf\x04\x10\xc4\xdf\x048\xc9\xdf\x04x\xc5\xdf\x04\x18\xcb\xdf\x04\xd0\xca\xdf\x04\x88\xc1\xdf\x04\xe0\xc6\xdf\x04\x08\xcc\xdf\x04\x08\xc3\xdf\x04 \xc3\xdf\x04\x80\xc0\xdf\x04\x98\xc6\xdf\x04\xd0\xc7\xdf\x04h\xc3\xdf\x04 \xc6\xdf\x04\x00\xc5\xdf\x04\x90\xc5\xdf\x04\xf0\xcb\xdf\x04\x18\xc8\xdf\x04\xb8\xc7\xdf\x04\xb8\xc1\xdf\x04\x08\xc6\xdf\x04p\xc4\xdf\x04p\xc1\xdf\x04h\xc6\xdf\x04\xb0\xc6\xdf\x04\xb8\xc4\xdf\x04\xc0\xc8\xdf\x04H\xc2\xdf\x04\x00\xc8\xdf\x04p\xc7\xdf\x04\xf0\xc5\xdf\x04(\xc7\xdf\x04\x98\xc0\xdf\x04\xe0\xc9\xdf\x04P\xc0\xdf\x048\xc0\xdf\x04\xc8\xc9\xdf\x04\xd0\xc1\xdf\x04`\xc8\xdf\x04\xc8\xc3\xdf\x04\xa0\xc4\xdf\x04\xf8\xc3\xdf\x04\xe8\xca\xdf\x04\xb8\xca\xdf\x04\x88\xc7\xdf\x04\xa8\xce\xdf\x04\x80\xcc\xdf\x040\xc8\xdf\x04\xd8\xc2\xdf\x04\xd0\xc4\xdf\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6527
sg6370
g6523
sg6384
g6534
sg6379
g6531
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6544
sg6370
g6540
sg6384
g6551
sg6379
g6548
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6561
sg6370
g6557
sg6384
g6568
sg6379
g6565
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6578
sg6370
g6574
sg6384
g6585
sg6379
g6582
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6561
sg6370
g6591
sg6384
g6568
sg6379
g6598
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6578
sg6370
g6619
sg6384
g6585
sg6379
g6626
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6452
sg6370
g6634
sg6384
g6446
sg6379
g6641
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6653
sg6370
g6649
sg6384
g6660
sg6379
g6657
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6670
sg6370
g6666
sg6384
g6677
sg6379
g6674
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6497
sg6370
g6683
sg6384
g6504
sg6379
g6690
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6702
sg6370
g6698
sg6384
g6709
sg6379
g6706
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6719
sg6370
g6715
sg6384
g6726
sg6379
g6723
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6452
sg6370
g6634
sg6384
g6446
sg6379
g6641
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6719
sg6370
g6715
sg6384
g6726
sg6379
g6723
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6480
sg6370
g6758
sg6384
g6487
sg6379
g6765
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6578
sg6370
g6574
sg6384
g6585
sg6379
g6582
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6463
sg6370
g6786
sg6384
g6470
sg6379
g6793
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6401
sg6370
g6801
sg6384
g6395
sg6379
g6808
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6544
sg6370
g6829
sg6384
g6551
sg6379
g6836
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6578
sg6370
g6574
sg6384
g6585
sg6379
g6582
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6527
sg6370
g6870
sg6384
g6534
sg6379
g6877
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6412
sg6370
g6885
sg6384
g6419
sg6379
g6892
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6527
sg6370
g6870
sg6384
g6534
sg6379
g6877
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6375
sg6370
g6913
sg6384
g6385
sg6379
g6920
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6719
sg6370
g6715
sg6384
g6726
sg6379
g6723
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6578
sg6370
g6619
sg6384
g6585
sg6379
g6626
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6670
sg6370
g6980
sg6384
g6677
sg6379
g6987
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6999
sg6370
g6995
sg6384
g7006
sg6379
g7003
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g7022
sg6370
g7012
sg6384
g7016
sg6379
g7020
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6452
sg6370
g6634
sg6384
g6446
sg6379
g6641
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g6653
sg6370
g6649
sg6384
g6660
sg6379
g6657
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6561
sg6370
g6557
sg6384
g6568
sg6379
g6565
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g6702
sg6370
g7068
sg6384
g6709
sg6379
g7075
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6561
sg6370
g6591
sg6384
g6568
sg6379
g6598
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6653
sg6370
g7096
sg6384
g6660
sg6379
g7103
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6999
sg6370
g7111
sg6384
g7006
sg6379
g7118
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6719
sg6370
g7126
sg6384
g6726
sg6379
g7133
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6435
sg6370
g7141
sg6384
g6429
sg6379
g7148
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g6999
sg6370
g7111
sg6384
g7006
sg6379
g7118
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6452
sg6370
g6634
sg6384
g6446
sg6379
g6641
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6463
sg6370
g6786
sg6384
g6470
sg6379
g6793
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g6719
sg6370
g6715
sg6384
g6726
sg6379
g6723
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6561
sg6370
g6557
sg6384
g6568
sg6379
g6565
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6578
sg6370
g6619
sg6384
g6585
sg6379
g6626
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g7264
sg6370
g7260
sg6384
g7271
sg6379
g7268
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g6527
sg6370
g6523
sg6384
g6534
sg6379
g6531
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6497
sg6370
g6683
sg6384
g6504
sg6379
g6690
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g6702
sg6370
g7068
sg6384
g6709
sg6379
g7075
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6452
sg6370
g6634
sg6384
g6446
sg6379
g6641
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6702
sg6370
g7068
sg6384
g6709
sg6379
g7075
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g6375
sg6370
g6913
sg6384
g6385
sg6379
g6920
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g7022
sg6370
g7012
sg6384
g7016
sg6379
g7020
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6653
sg6370
g7096
sg6384
g6660
sg6379
g7103
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6435
sg6370
g7141
sg6384
g6429
sg6379
g7148
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6999
sg6370
g7111
sg6384
g7006
sg6379
g7118
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g7264
sg6370
g7260
sg6384
g7271
sg6379
g7268
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6653
sg6370
g7096
sg6384
g6660
sg6379
g7103
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6702
sg6370
g7068
sg6384
g6709
sg6379
g7075
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g6527
sg6370
g6523
sg6384
g6534
sg6379
g6531
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g6544
sg6370
g6829
sg6384
g6551
sg6379
g6836
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g6702
sg6370
g6698
sg6384
g6709
sg6379
g6706
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g6999
sg6370
g6995
sg6384
g7006
sg6379
g7003
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g6670
sg6370
g6980
sg6384
g6677
sg6379
g6987
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6527
sg6370
g6523
sg6384
g6534
sg6379
g6531
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g7612
sg6370
g7602
sg6384
g7606
sg6379
g7610
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g6497
sg6370
g6683
sg6384
g6504
sg6379
g6690
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g7022
sg6370
g7012
sg6384
g7016
sg6379
g7020
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g7022
sg6370
g7658
sg6384
g7016
sg6379
g7665
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g7022
sg6370
g7012
sg6384
g7016
sg6379
g7020
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g6561
sg6370
g6557
sg6384
g6568
sg6379
g6565
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6463
sg6370
g6786
sg6384
g6470
sg6379
g6793
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g7612
sg6370
g7602
sg6384
g7606
sg6379
g7610
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6561
sg6370
g6557
sg6384
g6568
sg6379
g6565
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g7264
sg6370
g7260
sg6384
g7271
sg6379
g7268
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6578
sg6370
g6574
sg6384
g6585
sg6379
g6582
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6544
sg6370
g6540
sg6384
g6551
sg6379
g6548
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6719
sg6370
g6715
sg6384
g6726
sg6379
g6723
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g7264
sg6370
g7842
sg6384
g7271
sg6379
g7849
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g6544
sg6370
g6829
sg6384
g6551
sg6379
g6836
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6527
sg6370
g6523
sg6384
g6534
sg6379
g6531
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g6999
sg6370
g7111
sg6384
g7006
sg6379
g7118
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6702
sg6370
g6698
sg6384
g6709
sg6379
g6706
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g6544
sg6370
g6540
sg6384
g6551
sg6379
g6548
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6463
sg6370
g6786
sg6384
g6470
sg6379
g6793
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g6527
sg6370
g6870
sg6384
g6534
sg6379
g6877
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g7264
sg6370
g7260
sg6384
g7271
sg6379
g7268
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g6702
sg6370
g7068
sg6384
g6709
sg6379
g7075
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6480
sg6370
g6758
sg6384
g6487
sg6379
g6765
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g6435
sg6370
g7141
sg6384
g6429
sg6379
g7148
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g7022
sg6370
g7658
sg6384
g7016
sg6379
g7665
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g7264
sg6370
g7842
sg6384
g7271
sg6379
g7849
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g6401
sg6370
g6801
sg6384
g6395
sg6379
g6808
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g7612
sg6370
g8078
sg6384
g7606
sg6379
g8085
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g6375
sg6370
g6913
sg6384
g6385
sg6379
g6920
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g6670
sg6370
g6666
sg6384
g6677
sg6379
g6674
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6578
sg6370
g6619
sg6384
g6585
sg6379
g6626
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g6412
sg6370
g6885
sg6384
g6419
sg6379
g6892
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6719
sg6370
g7126
sg6384
g6726
sg6379
g7133
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g7022
sg6370
g7658
sg6384
g7016
sg6379
g7665
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g6653
sg6370
g6649
sg6384
g6660
sg6379
g6657
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g6999
sg6370
g6995
sg6384
g7006
sg6379
g7003
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6670
sg6370
g6980
sg6384
g6677
sg6379
g6987
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6578
sg6370
g6619
sg6384
g6585
sg6379
g6626
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g7264
sg6370
g7842
sg6384
g7271
sg6379
g7849
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g7022
sg6370
g7012
sg6384
g7016
sg6379
g7020
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g6653
sg6370
g6649
sg6384
g6660
sg6379
g6657
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6702
sg6370
g6698
sg6384
g6709
sg6379
g6706
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g6999
sg6370
g6995
sg6384
g7006
sg6379
g7003
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g6435
sg6370
g7141
sg6384
g6429
sg6379
g7148
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6653
sg6370
g6649
sg6384
g6660
sg6379
g6657
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g7612
sg6370
g7602
sg6384
g7606
sg6379
g7610
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6435
sg6370
g7141
sg6384
g6429
sg6379
g7148
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6527
sg6370
g6870
sg6384
g6534
sg6379
g6877
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6463
sg6370
g6786
sg6384
g6470
sg6379
g6793
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g7612
sg6370
g7602
sg6384
g7606
sg6379
g7610
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6480
sg6370
g6758
sg6384
g6487
sg6379
g6765
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6544
sg6370
g6540
sg6384
g6551
sg6379
g6548
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g7022
sg6370
g7658
sg6384
g7016
sg6379
g7665
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g6401
sg6370
g6801
sg6384
g6395
sg6379
g6808
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6670
sg6370
g6666
sg6384
g6677
sg6379
g6674
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6527
sg6370
g6870
sg6384
g6534
sg6379
g6877
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6412
sg6370
g6885
sg6384
g6419
sg6379
g6892
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g7612
sg6370
g8078
sg6384
g7606
sg6379
g8085
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g7264
sg6370
g7842
sg6384
g7271
sg6379
g7849
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g6999
sg6370
g6995
sg6384
g7006
sg6379
g7003
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6544
sg6370
g6829
sg6384
g6551
sg6379
g6836
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g6480
sg6370
g6758
sg6384
g6487
sg6379
g6765
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g7022
sg6370
g7658
sg6384
g7016
sg6379
g7665
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g6653
sg6370
g7096
sg6384
g6660
sg6379
g7103
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g7612
sg6370
g8078
sg6384
g7606
sg6379
g8085
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g6544
sg6370
g6829
sg6384
g6551
sg6379
g6836
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6561
sg6370
g6591
sg6384
g6568
sg6379
g6598
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g7612
sg6370
g7602
sg6384
g7606
sg6379
g7610
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g6670
sg6370
g6980
sg6384
g6677
sg6379
g6987
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6719
sg6370
g7126
sg6384
g6726
sg6379
g7133
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6702
sg6370
g6698
sg6384
g6709
sg6379
g6706
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6719
sg6370
g7126
sg6384
g6726
sg6379
g7133
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6561
sg6370
g6591
sg6384
g6568
sg6379
g6598
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6480
sg6370
g6758
sg6384
g6487
sg6379
g6765
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6670
sg6370
g6980
sg6384
g6677
sg6379
g6987
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g7612
sg6370
g8078
sg6384
g7606
sg6379
g8085
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6670
sg6370
g6666
sg6384
g6677
sg6379
g6674
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g6719
sg6370
g7126
sg6384
g6726
sg6379
g7133
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6653
sg6370
g7096
sg6384
g6660
sg6379
g7103
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6578
sg6370
g6574
sg6384
g6585
sg6379
g6582
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g7264
sg6370
g7842
sg6384
g7271
sg6379
g7849
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g6401
sg6370
g6801
sg6384
g6395
sg6379
g6808
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6412
sg6370
g6885
sg6384
g6419
sg6379
g6892
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6375
sg6370
g6913
sg6384
g6385
sg6379
g6920
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6497
sg6370
g6683
sg6384
g6504
sg6379
g6690
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6401
sg6370
g6801
sg6384
g6395
sg6379
g6808
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g7612
sg6370
g8078
sg6384
g7606
sg6379
g8085
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g6544
sg6370
g6540
sg6384
g6551
sg6379
g6548
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6999
sg6370
g7111
sg6384
g7006
sg6379
g7118
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g6375
sg6370
g6913
sg6384
g6385
sg6379
g6920
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g6670
sg6370
g6666
sg6384
g6677
sg6379
g6674
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g6497
sg6370
g6683
sg6384
g6504
sg6379
g6690
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g7264
sg6370
g7260
sg6384
g7271
sg6379
g7268
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6412
sg6370
g6885
sg6384
g6419
sg6379
g6892
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g6561
sg6370
g6591
sg6384
g6568
sg6379
g6598
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.