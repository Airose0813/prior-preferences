ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C33_infer_design1_no_eyetracking_2015_Oct_20_1823
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vr
sVcontacts
p57
Vn
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x15\\A\x19\xef\xfbM@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Oct_20_1823
p66
sVparticipant
p67
VC33
p68
sVglasses
p69
Vy
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vr
sg15
F0.63356196212771465
sg14
S'space'
p88
sg58
g62
sg57
Vn
sg55
g11
sg65
g66
sg67
g68
sg69
Vy
sa(dp89
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F17.86682976116208
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P3\x00'
tbsg69
Vy
sa(dp95
g63
g64
sg20
F10
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F0.69999999999999973
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'#\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p102
sg21
F1
sg69
Vy
sa(dp103
g63
g64
sg20
F10
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F2.4400000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'\x0c\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V18-mms.png
p109
sg21
F1.8
sg69
Vy
sa(dp110
g63
g64
sg20
F4.984
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F0.63999999999999968
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S'\r\x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p116
sg21
F1.1000000000000001
sg69
Vy
sa(dp117
g63
g64
sg20
F5.8170000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F0.21999999999999914
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'%\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p123
sg21
F1.3
sg69
Vy
sa(dp124
g63
g64
sg20
F6.1840000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F1.9600000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'\x0b\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p130
sg21
F1.2
sg69
Vy
sa(dp131
g63
g64
sg20
F4.5339999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'\x07\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p137
sg21
F1.8999999999999999
sg69
Vy
sa(dp138
g63
g64
sg20
F3.0169999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F0.039999999999998939
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'\x02\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p144
sg21
F1.3999999999999999
sg69
Vy
sa(dp145
g63
g64
sg20
F4.9169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'\x18\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p151
sg21
F1.3999999999999999
sg69
Vy
sa(dp152
g63
g64
sg20
F4.3840000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F0.1399999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x1f\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p158
sg21
F1.1000000000000001
sg69
Vy
sa(dp159
g63
g64
sg20
F12.1
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F0.3199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'\x03\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V4-corn.png
p165
sg21
F1
sg69
Vy
sa(dp166
g63
g64
sg20
F2.6509999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'\x15\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V29-beans.png
p172
sg21
F1.2
sg69
Vy
sa(dp173
g63
g64
sg20
F5.8339999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F0.61999999999999966
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S'\x01\x00\x00\x00'
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p179
sg21
F1.1000000000000001
sg69
Vy
sa(dp180
g63
g64
sg20
F8.2170000000000005
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F0.63999999999999924
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'\x16\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p186
sg21
F1.6000000000000001
sg69
Vy
sa(dp187
g63
g64
sg20
F4.3339999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F0.87999999999999945
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'\x05\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p193
sg21
F1.3999999999999999
sg69
Vy
sa(dp194
g63
g64
sg20
F4.5670000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F1.7000000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'&\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V50-polo.png
p200
sg21
F1.3
sg69
Vy
sa(dp201
g63
g64
sg20
F3.9169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F2.4200000000000008
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'\x1c\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p207
sg21
F1.5
sg69
Vy
sa(dp208
g63
g64
sg20
F9.8670000000000009
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F1.5200000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'\x0e\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p214
sg21
F1.3
sg69
Vy
sa(dp215
g63
g64
sg20
F5.6840000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F1.0999999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'\x1e\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p221
sg21
F1.7
sg69
Vy
sa(dp222
g63
g64
sg20
F4.734
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F0.31999999999999851
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x00\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p228
sg21
F1.8999999999999999
sg69
Vy
sa(dp229
g63
g64
sg20
F3.0840000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'\x13\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p235
sg21
F1.8
sg69
Vy
sa(dp236
g63
g64
sg20
F3.8839999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F2.0000000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'\x17\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p242
sg21
F1.6000000000000001
sg69
Vy
sa(dp243
g63
g64
sg20
F3.0510000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F0.31999999999999851
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'\x14\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p249
sg21
F1.8999999999999999
sg69
Vy
sa(dp250
g63
g64
sg20
F6.7839999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F0.59999999999999942
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S'\x04\x00\x00\x00'
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p256
sg21
F1.2
sg69
Vy
sa(dp257
g63
g64
sg20
F3.734
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F1.2199999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'\x08\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p263
sg21
F1.8
sg69
Vy
sa(dp264
g63
g64
sg20
F5.3170000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F0.53999999999999937
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'!\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V44-crunch.png
p270
sg21
F1.3
sg69
Vy
sa(dp271
g63
g64
sg20
F6.7009999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F1.9200000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'\x12\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p277
sg21
F1.8
sg69
Vy
sa(dp278
g63
g64
sg20
F2.6339999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'\x1d\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V40-sardines.png
p284
sg21
F1.8
sg69
Vy
sa(dp285
g63
g64
sg20
F2.851
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F0.039999999999998939
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S'\x0f\x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p291
sg21
F1.3999999999999999
sg69
Vy
sa(dp292
g63
g64
sg20
F3.9510000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F2.1200000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S'\x10\x00\x00\x00'
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V22-daim.png
p298
sg21
F1.3
sg69
Vy
sa(dp299
g63
g64
sg20
F6.2009999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F1.0399999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S"'\x00\x00\x00"
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V51-mars.png
p305
sg21
F1.2
sg69
Vy
sa(dp306
g63
g64
sg20
F2.2839999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F0.019999999999998939
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S'\x1b\x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p312
sg21
F1.3999999999999999
sg69
Vy
sa(dp313
g63
g64
sg20
F2.984
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S'\x06\x00\x00\x00'
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V7-olives.png
p319
sg21
F1.3
sg69
Vy
sa(dp320
g63
g64
sg20
F2.484
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'\x19\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p326
sg21
F1.6000000000000001
sg69
Vy
sa(dp327
g63
g64
sg20
F4.851
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F0.45999999999999952
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'\x11\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p333
sg21
F1.1000000000000001
sg69
Vy
sa(dp334
g63
g64
sg20
F4.2510000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F1.4799999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'\n\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p340
sg21
F1.8999999999999999
sg69
Vy
sa(dp341
g63
g64
sg20
F4.117
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F2.1200000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S'$\x00\x00\x00'
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V48-twix.png
p347
sg21
F1.7
sg69
Vy
sa(dp348
g63
g64
sg20
F3.0169999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S' \x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p354
sg21
F1.8999999999999999
sg69
Vy
sa(dp355
g63
g64
sg20
F11.266999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F1.4800000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S'"\x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p361
sg21
F1.2
sg69
Vy
sa(dp362
g63
g64
sg20
F5.1340000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F1.6000000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'\x1a\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V35-raisins.png
p368
sg21
F1.1000000000000001
sg69
Vy
sa(dp369
g63
g64
sg20
F3.351
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\t\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p375
sg21
F1.3
sg69
Vy
sa(dp376
g63
g64
sg55
g11
sg56
Vr
sg23
F3.3668377438771131
sg57
Vn
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vy
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'31-hobnobs.png'
p380
sg26
F2.7999999999999989
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'25-kitkat.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vr
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'left'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F3.4166287962798378
sg27
F4.7169999999999996
sg69
Vy
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p389
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'4-corn.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vr
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'left'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F1.4333759648397972
sg27
F1.2010000000000001
sg69
Vy
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'18-mms.png'
p398
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'43-mrporky_pork_crackles_redo.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vr
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'left'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F1.1333199147666164
sg27
F1.4339999999999999
sg69
Vy
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'50-polo.png'
p407
sg26
F2.9999999999999996
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'48-twix.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vr
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'right'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F2.1001779575526598
sg27
F2.9009999999999998
sg69
Vy
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'25-kitkat.png'
p416
sg26
F3.9000000000000008
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'31-hobnobs.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vr
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'right'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F4.7833624797494849
sg27
F3.5009999999999999
sg69
Vy
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'48-twix.png'
p425
sg26
F4.1000000000000005
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'50-polo.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vr
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'left'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F3.7499482548919332
sg27
F1.617
sg69
Vy
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'49-yorkie.png'
p434
sg26
F5.2000000000000002
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'35-raisins.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vr
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'right'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F1.5165992032125359
sg27
F2.5840000000000001
sg69
Vy
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p443
sg26
F4.4000000000000004
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'33-ambrosia_rice.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vr
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'left'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F2.283484216175566
sg27
F2.8010000000000002
sg69
Vy
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'22-daim.png'
p452
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'7-olives.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vr
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'left'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F1.1667238761365297
sg27
F1.034
sg69
Vy
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p461
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'20-fruit_pastilles.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vr
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'right'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F1.3667043184759677
sg27
F1.0669999999999999
sg69
Vy
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'44-crunch.png'
p470
sg26
F4.3000000000000007
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'26-walkers_smoky_bacon.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vr
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'left'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F1.816725957338349
sg27
F2.5339999999999998
sg69
Vy
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p479
sg26
F3.6000000000000005
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vr
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'left'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F4.4834190429974115
sg27
F3.9510000000000001
sg69
Vy
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p488
sg26
F5.1000000000000005
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'44-crunch.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vr
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'right'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F1.2500523152993992
sg27
F1.3680000000000001
sg69
Vy
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p497
sg26
F2.0999999999999992
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'45-chewy_nougat_redo.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vr
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'right'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F5.0833843181826524
sg27
F2.984
sg69
Vy
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'29-beans.png'
p506
sg26
F5.2000000000000002
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'46-pistachios.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vr
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'right'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F2.3501076811407984
sg27
F1.617
sg69
Vy
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p515
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'18-mms.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vr
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'right'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F1.4001875368121546
sg27
F1.867
sg69
Vy
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'38-maltesers.png'
p524
sg26
F5.9999999999999982
sg28
F3
sg58
g62
sg57
Vn
sg80
S'6-sour_patch_kids.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vr
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'left'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F1.1169693161500618
sg27
F1.9510000000000001
sg69
Vy
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p533
sg26
F4.3000000000000007
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'1-treacle_cookies.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vr
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'right'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F2.9834053583399509
sg27
F2.2509999999999999
sg69
Vy
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'4-corn.png'
p542
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'10-bounty_redo.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vr
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'right'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F1.083519739258918
sg27
F1.0509999999999999
sg69
Vy
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'35-raisins.png'
p551
sg26
F5.2000000000000011
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'49-yorkie.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vr
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'left'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F1.4335111008222157
sg27
F3.5840000000000001
sg69
Vy
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p560
sg26
F4.8000000000000016
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'19-caramello_redo.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vr
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'right'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F2.0000182462063094
sg27
F1.351
sg69
Vy
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'46-pistachios.png'
p569
sg26
F5.5999999999999988
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'29-beans.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vr
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'left'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F2.3503654088381154
sg27
F1.8009999999999999
sg69
Vy
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p578
sg26
F5.0000000000000009
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'21-nakd_banana_crunch.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vr
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'left'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F3.3001324560718786
sg27
F3.5670000000000002
sg69
Vy
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p587
sg26
F3.4999999999999996
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'23-crunchie_redo.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vr
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'right'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F2.3333091951171809
sg27
F2.5840000000000001
sg69
Vy
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p596
sg26
F4.7000000000000011
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'51-mars.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vr
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'right'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F1.6833535847254097
sg27
F3.0510000000000002
sg69
Vy
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'5-pineapple.png'
p605
sg26
F5.9999999999999973
sg28
F4
sg58
g62
sg57
Vn
sg80
S'40-sardines.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vr
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'left'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F2.1005317629424098
sg27
F0.98399999999999999
sg69
Vy
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p614
sg26
F3.6000000000000005
sg28
F3
sg58
g62
sg57
Vn
sg80
S'3-ellas_strawberries_apples.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vr
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'right'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F2.4999227387088467
sg27
F3.6669999999999998
sg69
Vy
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'51-mars.png'
p623
sg26
F3.7000000000000002
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'27-hartleys_raspberries_jelly.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vr
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'left'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F1.0167038338113343
sg27
F1.101
sg69
Vy
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'40-sardines.png'
p632
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'5-pineapple.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vr
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'right'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F1.6335063682126929
sg27
F1.8340000000000001
sg69
Vy
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p641
sg26
F5.9999999999999973
sg28
F4
sg58
g62
sg57
Vn
sg80
S'42-mrkipling_lemon_slices.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vr
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'left'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F1.2334114879267872
sg27
F1.101
sg69
Vy
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p650
sg26
F5.3999999999999995
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'13-mccoys_steak_crisps.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vr
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'left'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F1.4667428635948454
sg27
F2.3010000000000002
sg69
Vy
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p659
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'16-skips_prawn.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vr
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'right'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F1.033445015335019
sg27
F1.3340000000000001
sg69
Vy
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p668
sg26
F4.4000000000000012
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'41-peanuts_redo.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vr
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'right'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F3.0001274383648706
sg27
F3.101
sg69
Vy
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p677
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'2-steamed_puddings.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vr
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'left'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F1.1168438734639494
sg27
F0.85099999999999998
sg69
Vy
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p686
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'17-jacobs_mini_cheddars_redo.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vr
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'right'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F1.4166208135648048
sg27
F1.1339999999999999
sg69
Vy
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'7-olives.png'
p695
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'22-daim.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vr
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'right'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F1.2667042614593811
sg27
F1.1180000000000001
sg69
Vy
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p704
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'38-maltesers.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vr
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'right'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F1.2664508102170657
sg27
F1.4339999999999999
sg69
Vy
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p713
sg26
F4.9000000000000004
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'30-spaghetti_hoops.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vr
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'left'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F1.6000371196278138
sg27
F2.2509999999999999
sg69
Vy
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p722
sg26
F5.4000000000000004
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'8-liquorice_catherine_wheels.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vr
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'left'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F1.616689635982766
sg27
F2.5510000000000002
sg69
Vy
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p731
sg26
F2.0999999999999988
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'36-fig_rolls.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vr
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'right'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F4.9167163210622675
sg27
F4.468
sg69
Vy
sa(dp738
g63
g64
sg56
Vr
sg29
S'space'
p739
sg57
Vn
sg58
g62
sg30
F410.28759645544415
sg55
g11
sg65
g66
sg67
g68
sg69
Vy
sa(dp740
g63
g64
sg56
Vr
sg57
Vn
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F1.3834728693109355
sg65
g66
sg67
g68
sg69
Vy
sa(dp742
g63
g64
sg81
S'11-snickers.png'
p743
sg82
S'54-frubes_yogurt.png'
p744
sg56
Vr
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'54-frubes_yogurt.png'
p748
sg33
g748
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S"\x07\xdf\n\x14\x12'\x19\x05\xeb\xa0"
tRp753
sa(dp754
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p755
sg82
S'9-yu_mango_pieces.png'
p756
sg56
Vr
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'9-yu_mango_pieces.png'
p760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S"\x07\xdf\n\x14\x12'&\x07GH"
tRp764
sa(dp765
g63
g64
sg81
S'12-topic.png'
p766
sg82
S'39-mackerel.png'
p767
sg56
Vr
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'39-mackerel.png'
p771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S"\x07\xdf\n\x14\x12'.\x0b\xd7@"
tRp775
sa(dp776
g63
g64
sg81
S'52-aero_mousse.png'
p777
sg82
S'14-discos_salt_vinegar.png'
p778
sg56
Vr
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p781
I0
sg83
S'14-discos_salt_vinegar.png'
p782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p783
sS'practice_loop.thisIndex'
p784
g59
(g98
S'\x03\x00\x00\x00'
tRp785
sg34
g752
(S"\x07\xdf\n\x14\x12'9\x01\xd0\xd8"
tRp786
sa(dp787
g63
g64
sg81
S'32-hovis_crackers.png'
p788
sg82
S'32-hovis_crackers.png'
p789
sg56
Vr
sS'practice_loop.thisN'
p790
I4
sS'practice_loop.thisTrialN'
p791
I4
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p792
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p793
sg33
g788
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p794
sS'practice_loop.thisIndex'
p795
g59
(g98
S'\x04\x00\x00\x00'
tRp796
sg34
g752
(S'\x07\xdf\n\x14\x12(\x05\x07\x91\x80'
tRp797
sa(dp798
g63
g64
sg81
S'15-walnut_whip.png'
p799
sg82
S'28-maple_pecan.png'
p800
sg56
Vr
sS'practice_loop.thisN'
p801
I5
sS'practice_loop.thisTrialN'
p802
I5
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p803
I0
sg83
S'28-maple_pecan.png'
p804
sg33
g804
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p805
sS'practice_loop.thisIndex'
p806
g59
(g98
S'\x05\x00\x00\x00'
tRp807
sg34
g752
(S'\x07\xdf\n\x14\x12(\x10\x08AH'
tRp808
sa(dp809
g63
g64
sg81
g766
sg82
S'12-topic.png'
p810
sg56
Vr
sS'practice_loop.thisN'
p811
I6
sS'practice_loop.thisTrialN'
p812
I6
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p813
I0
sg83
g771
sg33
g771
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p814
sS'practice_loop.thisIndex'
p815
g59
(g98
S'\x06\x00\x00\x00'
tRp816
sg34
g752
(S'\x07\xdf\n\x14\x12(\x17\x03O\xa8'
tRp817
sa(dp818
g63
g64
sg81
S'53-cheestrings.png'
p819
sg82
S'53-cheestrings.png'
p820
sg56
Vr
sS'practice_loop.thisN'
p821
I7
sS'practice_loop.thisTrialN'
p822
I7
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p823
I0
sg83
S'47-picnic.png'
p824
sg33
g824
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p825
sS'practice_loop.thisIndex'
p826
g59
(g98
S'\x07\x00\x00\x00'
tRp827
sg34
g752
(S'\x07\xdf\n\x14\x12(\x1f\x03[`'
tRp828
sa(dp829
g63
g64
sg81
g755
sg82
S'37-nakd_cashew_cookie.png'
p830
sg56
Vr
sS'practice_loop.thisN'
p831
I8
sS'practice_loop.thisTrialN'
p832
I8
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p833
I0
sg83
g760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p834
sS'practice_loop.thisIndex'
p835
g59
(g98
S'\x08\x00\x00\x00'
tRp836
sg34
g752
(S'\x07\xdf\n\x14\x12(&\x04"\x98'
tRp837
sa(dp838
g63
g64
sg81
g743
sg82
S'11-snickers.png'
p839
sg56
Vr
sS'practice_loop.thisN'
p840
I9
sS'practice_loop.thisTrialN'
p841
I9
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p842
I0
sg83
g748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p843
sS'practice_loop.thisIndex'
p844
g59
(g98
S'\t\x00\x00\x00'
tRp845
sg34
g752
(S'\x07\xdf\n\x14\x12(.\n\xd9X'
tRp846
sa(dp847
g63
g64
sg81
g777
sg82
S'52-aero_mousse.png'
p848
sg56
Vr
sS'practice_loop.thisN'
p849
I10
sS'practice_loop.thisTrialN'
p850
I10
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p851
I0
sg83
g782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p852
sS'practice_loop.thisIndex'
p853
g59
(g98
S'\n\x00\x00\x00'
tRp854
sg34
g752
(S'\x07\xdf\n\x14\x12(6\x03\tX'
tRp855
sa(dp856
g63
g64
sg81
g799
sg82
S'15-walnut_whip.png'
p857
sg56
Vr
sS'practice_loop.thisN'
p858
I11
sS'practice_loop.thisTrialN'
p859
I11
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p860
I0
sg83
g804
sg33
g799
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\n\x14\x12)\x01\x03\xd0\x90'
tRp864
sa(dp865
g63
g64
sg81
g788
sg82
S'24-food_doctor_apple_walnut_bar.png'
p866
sg56
Vr
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g793
sg33
g788
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\n\x14\x12)\x07\x0c{P'
tRp873
sa(dp874
g63
g64
sg81
g819
sg82
S'47-picnic.png'
p875
sg56
Vr
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g824
sg33
g824
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\n\x14\x12)\x0e\x02Q\xc0'
tRp882
sa(dp883
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F48.599207202234538
sg65
g66
sg67
g68
sg69
Vy
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vr
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vy
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'30-spaghetti_hoops.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'right'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'30-spaghetti_hoops.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'19-caramello_redo.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
S'19-caramello_redo.png'
p907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
g899
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vy
sS'block_loop.thisTrialN'
p911
I0
sg39
F1.7500691360255587
sg34
g752
(S'\x07\xdf\n\x14\x12*\x11\x08\xa2\xf0'
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'44-crunch.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'right'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'26-walkers_smoky_bacon.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'26-walkers_smoky_bacon.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p925
I0
sg909
S'44-crunch.png'
p926
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vy
sS'block_loop.thisTrialN'
p928
I0
sg39
F1.2834360347769689
sg34
g752
(S'\x07\xdf\n\x14\x12*\x18\x05_\x00'
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'27-hartleys_raspberries_jelly.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'right'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
S'51-mars.png'
p936
sg63
g64
sS'trial_loop.thisIndex'
p937
g59
(g98
S'\x02\x00\x00\x00'
tRp938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p939
I0
sg903
S'51-mars.png'
p940
sS'block_loop.thisRepN'
p941
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p942
I0
sg909
S'27-hartleys_raspberries_jelly.png'
p943
sg55
g11
sS'block_loop.thisTrial'
p944
Nsg69
Vy
sS'block_loop.thisTrialN'
p945
I0
sg39
F1.7834374602643948
sg34
g752
(S'\x07\xdf\n\x14\x12*\x1e\n90'
tRp946
sa(dp947
S'trial_loop.thisTrialN'
p948
I3
sg894
S'21-nakd_banana_crunch.png'
p949
sS'block_loop.thisIndex'
p950
g888
sg38
S'right'
p951
sg58
g62
sS'trial_loop.thisN'
p952
I3
sg33
S'1-treacle_cookies.png'
p953
sg63
g64
sS'trial_loop.thisIndex'
p954
g59
(g98
S'\x03\x00\x00\x00'
tRp955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p956
I0
sg903
S'1-treacle_cookies.png'
p957
sS'block_loop.thisRepN'
p958
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p959
I0
sg909
S'21-nakd_banana_crunch.png'
p960
sg55
g11
sS'block_loop.thisTrial'
p961
Nsg69
Vy
sS'block_loop.thisTrialN'
p962
I0
sg39
F1.9001424914858944
sg34
g752
(S'\x07\xdf\n\x14\x12*%\x07nX'
tRp963
sa(dp964
S'trial_loop.thisTrialN'
p965
I4
sg894
S'5-pineapple.png'
p966
sS'block_loop.thisIndex'
p967
g888
sg38
S'left'
p968
sg58
g62
sS'trial_loop.thisN'
p969
I4
sg33
S'40-sardines.png'
p970
sg63
g64
sS'trial_loop.thisIndex'
p971
g59
(g98
S'\x04\x00\x00\x00'
tRp972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p973
I0
sg903
S'40-sardines.png'
p974
sS'block_loop.thisRepN'
p975
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p976
I0
sg909
S'5-pineapple.png'
p977
sg55
g11
sS'block_loop.thisTrial'
p978
Nsg69
Vy
sS'block_loop.thisTrialN'
p979
I0
sg39
F1.6168606941901089
sg34
g752
(S'\x07\xdf\n\x14\x12*,\x06MH'
tRp980
sa(dp981
S'trial_loop.thisTrialN'
p982
I5
sg894
S'17-jacobs_mini_cheddars_redo.png'
p983
sS'block_loop.thisIndex'
p984
g888
sg38
S'right'
p985
sg58
g62
sS'trial_loop.thisN'
p986
I5
sg33
S'17-jacobs_mini_cheddars_redo.png'
p987
sg63
g64
sS'trial_loop.thisIndex'
p988
g59
(g98
S'\x05\x00\x00\x00'
tRp989
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p990
I0
sg903
S'8-liquorice_catherine_wheels.png'
p991
sS'block_loop.thisRepN'
p992
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p993
I0
sg909
S'8-liquorice_catherine_wheels.png'
p994
sg55
g11
sS'block_loop.thisTrial'
p995
Nsg69
Vy
sS'block_loop.thisTrialN'
p996
I0
sg39
F1.4501359627647616
sg34
g752
(S'\x07\xdf\n\x14\x12*3\x01!\x10'
tRp997
sa(dp998
S'trial_loop.thisTrialN'
p999
I6
sg894
S'50-polo.png'
p1000
sS'block_loop.thisIndex'
p1001
g888
sg38
S'right'
p1002
sg58
g62
sS'trial_loop.thisN'
p1003
I6
sg33
S'48-twix.png'
p1004
sg63
g64
sS'trial_loop.thisIndex'
p1005
g59
(g98
S'\x06\x00\x00\x00'
tRp1006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1007
I0
sg903
S'48-twix.png'
p1008
sS'block_loop.thisRepN'
p1009
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1010
I0
sg909
S'50-polo.png'
p1011
sg55
g11
sS'block_loop.thisTrial'
p1012
Nsg69
Vy
sS'block_loop.thisTrialN'
p1013
I0
sg39
F1.4334626343334094
sg34
g752
(S'\x07\xdf\n\x14\x12*9\x08\\\xa0'
tRp1014
sa(dp1015
S'trial_loop.thisTrialN'
p1016
I7
sg894
S'2-steamed_puddings.png'
p1017
sS'block_loop.thisIndex'
p1018
g888
sg38
S'right'
p1019
sg58
g62
sS'trial_loop.thisN'
p1020
I7
sg33
S'2-steamed_puddings.png'
p1021
sg63
g64
sS'trial_loop.thisIndex'
p1022
g59
(g98
S'\x07\x00\x00\x00'
tRp1023
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1024
I0
sg903
S'20-fruit_pastilles.png'
p1025
sS'block_loop.thisRepN'
p1026
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1027
I0
sg909
S'20-fruit_pastilles.png'
p1028
sg55
g11
sS'block_loop.thisTrial'
p1029
Nsg69
Vy
sS'block_loop.thisTrialN'
p1030
I0
sg39
F2.4334771742796875
sg34
g752
(S'\x07\xdf\n\x14\x12+\x04\x00Y\xd8'
tRp1031
sa(dp1032
S'trial_loop.thisTrialN'
p1033
I8
sg894
S'25-kitkat.png'
p1034
sS'block_loop.thisIndex'
p1035
g888
sg38
S'right'
p1036
sg58
g62
sS'trial_loop.thisN'
p1037
I8
sg33
S'25-kitkat.png'
p1038
sg63
g64
sS'trial_loop.thisIndex'
p1039
g59
(g98
S'\x08\x00\x00\x00'
tRp1040
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1041
I0
sg903
S'31-hobnobs.png'
p1042
sS'block_loop.thisRepN'
p1043
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1044
I0
sg909
S'31-hobnobs.png'
p1045
sg55
g11
sS'block_loop.thisTrial'
p1046
Nsg69
Vy
sS'block_loop.thisTrialN'
p1047
I0
sg39
F1.8501276379320188
sg34
g752
(S'\x07\xdf\n\x14\x12+\x0b\x07O\x18'
tRp1048
sa(dp1049
S'trial_loop.thisTrialN'
p1050
I9
sg894
S'40-sardines.png'
p1051
sS'block_loop.thisIndex'
p1052
g888
sg38
S'left'
p1053
sg58
g62
sS'trial_loop.thisN'
p1054
I9
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1055
g59
(g98
S'\t\x00\x00\x00'
tRp1056
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1057
I0
sg903
S'5-pineapple.png'
p1058
sS'block_loop.thisRepN'
p1059
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1060
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p1061
Nsg69
Vy
sS'block_loop.thisTrialN'
p1062
I0
sg39
F3.1503456231039308
sg34
g752
(S'\x07\xdf\n\x14\x12+\x12\x05\xb8\xd8'
tRp1063
sa(dp1064
S'trial_loop.thisTrialN'
p1065
I10
sg894
S'3-ellas_strawberries_apples.png'
p1066
sS'block_loop.thisIndex'
p1067
g888
sg38
S'left'
p1068
sg58
g62
sS'trial_loop.thisN'
p1069
I10
sg33
S'13-mccoys_steak_crisps.png'
p1070
sg63
g64
sS'trial_loop.thisIndex'
p1071
g59
(g98
S'\n\x00\x00\x00'
tRp1072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1073
I0
sg903
S'13-mccoys_steak_crisps.png'
p1074
sS'block_loop.thisRepN'
p1075
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1076
I0
sg909
S'3-ellas_strawberries_apples.png'
p1077
sg55
g11
sS'block_loop.thisTrial'
p1078
Nsg69
Vy
sS'block_loop.thisTrialN'
p1079
I0
sg39
F1.6335140658302407
sg34
g752
(S'\x07\xdf\n\x14\x12+\x1a\x08`\x88'
tRp1080
sa(dp1081
S'trial_loop.thisTrialN'
p1082
I11
sg894
S'46-pistachios.png'
p1083
sS'block_loop.thisIndex'
p1084
g888
sg38
S'left'
p1085
sg58
g62
sS'trial_loop.thisN'
p1086
I11
sg33
S'46-pistachios.png'
p1087
sg63
g64
sS'trial_loop.thisIndex'
p1088
g59
(g98
S'\x0b\x00\x00\x00'
tRp1089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1090
I0
sg903
S'29-beans.png'
p1091
sS'block_loop.thisRepN'
p1092
I0
sg906
g1087
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1093
I0
sg909
S'29-beans.png'
p1094
sg55
g11
sS'block_loop.thisTrial'
p1095
Nsg69
Vy
sS'block_loop.thisTrialN'
p1096
I0
sg39
F1.4667842026610742
sg34
g752
(S'\x07\xdf\n\x14\x12+!\x034P'
tRp1097
sa(dp1098
S'trial_loop.thisTrialN'
p1099
I12
sg894
S'43-mrporky_pork_crackles_redo.png'
p1100
sS'block_loop.thisIndex'
p1101
g888
sg38
S'left'
p1102
sg58
g62
sS'trial_loop.thisN'
p1103
I12
sg33
S'18-mms.png'
p1104
sg63
g64
sS'trial_loop.thisIndex'
p1105
g59
(g98
S'\x0c\x00\x00\x00'
tRp1106
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1107
I0
sg903
S'18-mms.png'
p1108
sS'block_loop.thisRepN'
p1109
I0
sg906
g1104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1110
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p1111
sg55
g11
sS'block_loop.thisTrial'
p1112
Nsg69
Vy
sS'block_loop.thisTrialN'
p1113
I0
sg39
F1.4668985265634547
sg34
g752
(S"\x07\xdf\n\x14\x12+'\n\xe8\xf8"
tRp1114
sa(dp1115
S'trial_loop.thisTrialN'
p1116
I13
sg894
S'20-fruit_pastilles.png'
p1117
sS'block_loop.thisIndex'
p1118
g888
sg38
S'right'
p1119
sg58
g62
sS'trial_loop.thisN'
p1120
I13
sg33
g1028
sg63
g64
sS'trial_loop.thisIndex'
p1121
g59
(g98
S'\r\x00\x00\x00'
tRp1122
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1123
I0
sg903
S'2-steamed_puddings.png'
p1124
sS'block_loop.thisRepN'
p1125
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1126
I0
sg909
g1028
sg55
g11
sS'block_loop.thisTrial'
p1127
Nsg69
Vy
sS'block_loop.thisTrialN'
p1128
I0
sg39
F1.4502123687634594
sg34
g752
(S'\x07\xdf\n\x14\x12+.\x03_H'
tRp1129
sa(dp1130
S'trial_loop.thisTrialN'
p1131
I14
sg894
S'49-yorkie.png'
p1132
sS'block_loop.thisIndex'
p1133
g888
sg38
S'right'
p1134
sg58
g62
sS'trial_loop.thisN'
p1135
I14
sg33
S'49-yorkie.png'
p1136
sg63
g64
sS'trial_loop.thisIndex'
p1137
g59
(g98
S'\x0e\x00\x00\x00'
tRp1138
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1139
I0
sg903
S'35-raisins.png'
p1140
sS'block_loop.thisRepN'
p1141
I0
sg906
g1136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1142
I0
sg909
S'35-raisins.png'
p1143
sg55
g11
sS'block_loop.thisTrial'
p1144
Nsg69
Vy
sS'block_loop.thisTrialN'
p1145
I0
sg39
F1.3005010865053919
sg34
g752
(S'\x07\xdf\n\x14\x12+4\n\x9a\xd8'
tRp1146
sa(dp1147
S'trial_loop.thisTrialN'
p1148
I15
sg894
g1083
sS'block_loop.thisIndex'
p1149
g888
sg38
S'left'
p1150
sg58
g62
sS'trial_loop.thisN'
p1151
I15
sg33
g1087
sg63
g64
sS'trial_loop.thisIndex'
p1152
g59
(g98
S'\x0f\x00\x00\x00'
tRp1153
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1154
I0
sg903
g1091
sS'block_loop.thisRepN'
p1155
I0
sg906
g1087
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1156
I0
sg909
g1094
sg55
g11
sS'block_loop.thisTrial'
p1157
Nsg69
Vy
sS'block_loop.thisTrialN'
p1158
I0
sg39
F3.750096790434327
sg34
g752
(S'\x07\xdf\n\x14\x12+;\x00m`'
tRp1159
sa(dp1160
S'trial_loop.thisTrialN'
p1161
I16
sg894
g895
sS'block_loop.thisIndex'
p1162
g888
sg38
S'left'
p1163
sg58
g62
sS'trial_loop.thisN'
p1164
I16
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1165
g59
(g98
S'\x10\x00\x00\x00'
tRp1166
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1167
I0
sg903
g904
sS'block_loop.thisRepN'
p1168
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1169
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1170
Nsg69
Vy
sS'block_loop.thisTrialN'
p1171
I0
sg39
F1.183470759595366
sg34
g752
(S'\x07\xdf\n\x14\x12,\x07\x0c_\xf8'
tRp1172
sa(dp1173
S'trial_loop.thisTrialN'
p1174
I17
sg894
S'26-walkers_smoky_bacon.png'
p1175
sS'block_loop.thisIndex'
p1176
g888
sg38
S'right'
p1177
sg58
g62
sS'trial_loop.thisN'
p1178
I17
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1179
g59
(g98
S'\x11\x00\x00\x00'
tRp1180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1181
I0
sg903
S'44-crunch.png'
p1182
sS'block_loop.thisRepN'
p1183
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1184
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p1185
Nsg69
Vy
sS'block_loop.thisTrialN'
p1186
I0
sg39
F1.9668104315860546
sg34
g752
(S'\x07\xdf\n\x14\x12,\x0e\x00\x88\xb8'
tRp1187
sa(dp1188
S'trial_loop.thisTrialN'
p1189
I18
sg894
g1083
sS'block_loop.thisIndex'
p1190
g888
sg38
S'left'
p1191
sg58
g62
sS'trial_loop.thisN'
p1192
I18
sg33
g1087
sg63
g64
sS'trial_loop.thisIndex'
p1193
g59
(g98
S'\x12\x00\x00\x00'
tRp1194
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1195
I0
sg903
g1091
sS'block_loop.thisRepN'
p1196
I0
sg906
g1087
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1197
I0
sg909
g1094
sg55
g11
sS'block_loop.thisTrial'
p1198
Nsg69
Vy
sS'block_loop.thisTrialN'
p1199
I0
sg39
F1.4001099904271541
sg34
g752
(S'\x07\xdf\n\x14\x12,\x15\x00\x9c@'
tRp1200
sa(dp1201
S'trial_loop.thisTrialN'
p1202
I19
sg894
S'45-chewy_nougat_redo.png'
p1203
sS'block_loop.thisIndex'
p1204
g888
sg38
S'left'
p1205
sg58
g62
sS'trial_loop.thisN'
p1206
I19
sg33
S'41-peanuts_redo.png'
p1207
sg63
g64
sS'trial_loop.thisIndex'
p1208
g59
(g98
S'\x13\x00\x00\x00'
tRp1209
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1210
I0
sg903
S'41-peanuts_redo.png'
p1211
sS'block_loop.thisRepN'
p1212
I0
sg906
g1207
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1213
I0
sg909
S'45-chewy_nougat_redo.png'
p1214
sg55
g11
sS'block_loop.thisTrial'
p1215
Nsg69
Vy
sS'block_loop.thisTrialN'
p1216
I0
sg39
F1.5001932957711688
sg34
g752
(S'\x07\xdf\n\x14\x12,\x1b\x07 8'
tRp1217
sa(dp1218
S'trial_loop.thisTrialN'
p1219
I20
sg894
S'42-mrkipling_lemon_slices.png'
p1220
sS'block_loop.thisIndex'
p1221
g888
sg38
S'left'
p1222
sg58
g62
sS'trial_loop.thisN'
p1223
I20
sg33
S'42-mrkipling_lemon_slices.png'
p1224
sg63
g64
sS'trial_loop.thisIndex'
p1225
g59
(g98
S'\x14\x00\x00\x00'
tRp1226
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1227
I0
sg903
S'16-skips_prawn.png'
p1228
sS'block_loop.thisRepN'
p1229
I0
sg906
S'16-skips_prawn.png'
p1230
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1231
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p1232
Nsg69
Vy
sS'block_loop.thisTrialN'
p1233
I0
sg39
F2.1500300207153487
sg34
g752
(S'\x07\xdf\n\x14\x12,"\x00\x0b\xb8'
tRp1234
sa(dp1235
S'trial_loop.thisTrialN'
p1236
I21
sg894
g1175
sS'block_loop.thisIndex'
p1237
g888
sg38
S'left'
p1238
sg58
g62
sS'trial_loop.thisN'
p1239
I21
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p1240
g59
(g98
S'\x15\x00\x00\x00'
tRp1241
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1242
I0
sg903
g1182
sS'block_loop.thisRepN'
p1243
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1244
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p1245
Nsg69
Vy
sS'block_loop.thisTrialN'
p1246
I0
sg39
F1.866736819538346
sg34
g752
(S'\x07\xdf\n\x14\x12,)\x02\xbb8'
tRp1247
sa(dp1248
S'trial_loop.thisTrialN'
p1249
I22
sg894
S'31-hobnobs.png'
p1250
sS'block_loop.thisIndex'
p1251
g888
sg38
S'left'
p1252
sg58
g62
sS'trial_loop.thisN'
p1253
I22
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p1254
g59
(g98
S'\x16\x00\x00\x00'
tRp1255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1256
I0
sg903
S'25-kitkat.png'
p1257
sS'block_loop.thisRepN'
p1258
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1259
I0
sg909
g1045
sg55
g11
sS'block_loop.thisTrial'
p1260
Nsg69
Vy
sS'block_loop.thisTrialN'
p1261
I0
sg39
F3.2501121856730606
sg34
g752
(S'\x07\xdf\n\x14\x12,0\x01_\x90'
tRp1262
sa(dp1263
S'trial_loop.thisTrialN'
p1264
I23
sg894
S'13-mccoys_steak_crisps.png'
p1265
sS'block_loop.thisIndex'
p1266
g888
sg38
S'left'
p1267
sg58
g62
sS'trial_loop.thisN'
p1268
I23
sg33
g1070
sg63
g64
sS'trial_loop.thisIndex'
p1269
g59
(g98
S'\x17\x00\x00\x00'
tRp1270
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1271
I0
sg903
S'3-ellas_strawberries_apples.png'
p1272
sS'block_loop.thisRepN'
p1273
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1274
I0
sg909
g1077
sg55
g11
sS'block_loop.thisTrial'
p1275
Nsg69
Vy
sS'block_loop.thisTrialN'
p1276
I0
sg39
F1.6667503901553573
sg34
g752
(S'\x07\xdf\n\x14\x12,8\x05\xb4\xf0'
tRp1277
sa(dp1278
S'trial_loop.thisTrialN'
p1279
I24
sg894
S'23-crunchie_redo.png'
p1280
sS'block_loop.thisIndex'
p1281
g888
sg38
S'left'
p1282
sg58
g62
sS'trial_loop.thisN'
p1283
I24
sg33
S'23-crunchie_redo.png'
p1284
sg63
g64
sS'trial_loop.thisIndex'
p1285
g59
(g98
S'\x18\x00\x00\x00'
tRp1286
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1287
I0
sg903
S'33-ambrosia_rice.png'
p1288
sS'block_loop.thisRepN'
p1289
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1290
I0
sg909
S'33-ambrosia_rice.png'
p1291
sg55
g11
sS'block_loop.thisTrial'
p1292
Nsg69
Vy
sS'block_loop.thisTrialN'
p1293
I0
sg39
F1.2168664531491231
sg34
g752
(S'\x07\xdf\n\x14\x12-\x03\x01\x01\xd0'
tRp1294
sa(dp1295
S'trial_loop.thisTrialN'
p1296
I25
sg894
S'10-bounty_redo.png'
p1297
sS'block_loop.thisIndex'
p1298
g888
sg38
S'left'
p1299
sg58
g62
sS'trial_loop.thisN'
p1300
I25
sg33
S'10-bounty_redo.png'
p1301
sg63
g64
sS'trial_loop.thisIndex'
p1302
g59
(g98
S'\x19\x00\x00\x00'
tRp1303
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1304
I0
sg903
S'4-corn.png'
p1305
sS'block_loop.thisRepN'
p1306
I0
sg906
g1301
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1307
I0
sg909
S'4-corn.png'
p1308
sg55
g11
sS'block_loop.thisTrial'
p1309
Nsg69
Vy
sS'block_loop.thisTrialN'
p1310
I0
sg39
F1.53350431551371
sg34
g752
(S'\x07\xdf\n\x14\x12-\t\x04\xe9\xd0'
tRp1311
sa(dp1312
S'trial_loop.thisTrialN'
p1313
I26
sg894
S'16-skips_prawn.png'
p1314
sS'block_loop.thisIndex'
p1315
g888
sg38
S'right'
p1316
sg58
g62
sS'trial_loop.thisN'
p1317
I26
sg33
g1224
sg63
g64
sS'trial_loop.thisIndex'
p1318
g59
(g98
S'\x1a\x00\x00\x00'
tRp1319
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1320
I0
sg903
S'42-mrkipling_lemon_slices.png'
p1321
sS'block_loop.thisRepN'
p1322
I0
sg906
g1230
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1323
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p1324
Nsg69
Vy
sS'block_loop.thisTrialN'
p1325
I0
sg39
F3.7332563951531483
sg34
g752
(S'\x07\xdf\n\x14\x12-\x0f\r\x94\x90'
tRp1326
sa(dp1327
S'trial_loop.thisTrialN'
p1328
I27
sg894
g1034
sS'block_loop.thisIndex'
p1329
g888
sg38
S'left'
p1330
sg58
g62
sS'trial_loop.thisN'
p1331
I27
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p1332
g59
(g98
S'\x1b\x00\x00\x00'
tRp1333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1334
I0
sg903
g1042
sS'block_loop.thisRepN'
p1335
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1336
I0
sg909
g1045
sg55
g11
sS'block_loop.thisTrial'
p1337
Nsg69
Vy
sS'block_loop.thisTrialN'
p1338
I0
sg39
F1.4334021937647776
sg34
g752
(S'\x07\xdf\n\x14\x12-\x18\n\x06h'
tRp1339
sa(dp1340
S'trial_loop.thisTrialN'
p1341
I28
sg894
S'35-raisins.png'
p1342
sS'block_loop.thisIndex'
p1343
g888
sg38
S'right'
p1344
sg58
g62
sS'trial_loop.thisN'
p1345
I28
sg33
g1136
sg63
g64
sS'trial_loop.thisIndex'
p1346
g59
(g98
S'\x1c\x00\x00\x00'
tRp1347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1348
I0
sg903
S'49-yorkie.png'
p1349
sS'block_loop.thisRepN'
p1350
I0
sg906
g1136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1351
I0
sg909
g1143
sg55
g11
sS'block_loop.thisTrial'
p1352
Nsg69
Vy
sS'block_loop.thisTrialN'
p1353
I0
sg39
F1.9501000405398372
sg34
g752
(S'\x07\xdf\n\x14\x12-\x1f\x01\xc18'
tRp1354
sa(dp1355
S'trial_loop.thisTrialN'
p1356
I29
sg894
g1265
sS'block_loop.thisIndex'
p1357
g888
sg38
S'left'
p1358
sg58
g62
sS'trial_loop.thisN'
p1359
I29
sg33
g1070
sg63
g64
sS'trial_loop.thisIndex'
p1360
g59
(g98
S'\x1d\x00\x00\x00'
tRp1361
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1362
I0
sg903
g1272
sS'block_loop.thisRepN'
p1363
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1364
I0
sg909
g1077
sg55
g11
sS'block_loop.thisTrial'
p1365
Nsg69
Vy
sS'block_loop.thisTrialN'
p1366
I0
sg39
F2.3171604451854364
sg34
g752
(S'\x07\xdf\n\x14\x12-&\x01\x96@'
tRp1367
sa(dp1368
S'trial_loop.thisTrialN'
p1369
I30
sg894
g949
sS'block_loop.thisIndex'
p1370
g888
sg38
S'left'
p1371
sg58
g62
sS'trial_loop.thisN'
p1372
I30
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1373
g59
(g98
S'\x1e\x00\x00\x00'
tRp1374
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1375
I0
sg903
g957
sS'block_loop.thisRepN'
p1376
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1377
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p1378
Nsg69
Vy
sS'block_loop.thisTrialN'
p1379
I0
sg39
F1.9334928546159063
sg34
g752
(S'\x07\xdf\n\x14\x12--\x06\xe5\xa0'
tRp1380
sa(dp1381
S'trial_loop.thisTrialN'
p1382
I31
sg894
S'41-peanuts_redo.png'
p1383
sS'block_loop.thisIndex'
p1384
g888
sg38
S'left'
p1385
sg58
g62
sS'trial_loop.thisN'
p1386
I31
sg33
g1207
sg63
g64
sS'trial_loop.thisIndex'
p1387
g59
(g98
S'\x1f\x00\x00\x00'
tRp1388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1389
I0
sg903
S'45-chewy_nougat_redo.png'
p1390
sS'block_loop.thisRepN'
p1391
I0
sg906
g1207
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1392
I0
sg909
g1214
sg55
g11
sS'block_loop.thisTrial'
p1393
Nsg69
Vy
sS'block_loop.thisTrialN'
p1394
I0
sg39
F1.9168466103947139
sg34
g752
(S'\x07\xdf\n\x14\x12-4\x06=\xa8'
tRp1395
sa(dp1396
S'trial_loop.thisTrialN'
p1397
I32
sg894
S'48-twix.png'
p1398
sS'block_loop.thisIndex'
p1399
g888
sg38
S'right'
p1400
sg58
g62
sS'trial_loop.thisN'
p1401
I32
sg33
g1011
sg63
g64
sS'trial_loop.thisIndex'
p1402
g59
(g98
S' \x00\x00\x00'
tRp1403
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1404
I0
sg903
S'50-polo.png'
p1405
sS'block_loop.thisRepN'
p1406
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1407
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p1408
Nsg69
Vy
sS'block_loop.thisTrialN'
p1409
I0
sg39
F1.6001123852402088
sg34
g752
(S'\x07\xdf\n\x14\x12-;\x05\x99\x98'
tRp1410
sa(dp1411
S'trial_loop.thisTrialN'
p1412
I33
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p1413
sS'block_loop.thisIndex'
p1414
g888
sg38
S'left'
p1415
sg58
g62
sS'trial_loop.thisN'
p1416
I33
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p1417
sg63
g64
sS'trial_loop.thisIndex'
p1418
g59
(g98
S'!\x00\x00\x00'
tRp1419
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1420
I0
sg903
S'36-fig_rolls.png'
p1421
sS'block_loop.thisRepN'
p1422
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1423
I0
sg909
S'36-fig_rolls.png'
p1424
sg55
g11
sS'block_loop.thisTrial'
p1425
Nsg69
Vy
sS'block_loop.thisTrialN'
p1426
I0
sg39
F1.8834335259234649
sg34
g752
(S'\x07\xdf\n\x14\x12.\x05\x0f6\x88'
tRp1427
sa(dp1428
S'trial_loop.thisTrialN'
p1429
I34
sg894
g1220
sS'block_loop.thisIndex'
p1430
g888
sg38
S'left'
p1431
sg58
g62
sS'trial_loop.thisN'
p1432
I34
sg33
g1230
sg63
g64
sS'trial_loop.thisIndex'
p1433
g59
(g98
S'"\x00\x00\x00'
tRp1434
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1435
I0
sg903
g1228
sS'block_loop.thisRepN'
p1436
I0
sg906
g1230
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1437
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p1438
Nsg69
Vy
sS'block_loop.thisTrialN'
p1439
I0
sg39
F1.867034460818104
sg34
g752
(S'\x07\xdf\n\x14\x12.\x0c\x0e\x15x'
tRp1440
sa(dp1441
S'trial_loop.thisTrialN'
p1442
I35
sg894
S'36-fig_rolls.png'
p1443
sS'block_loop.thisIndex'
p1444
g888
sg38
S'left'
p1445
sg58
g62
sS'trial_loop.thisN'
p1446
I35
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p1447
g59
(g98
S'#\x00\x00\x00'
tRp1448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1449
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p1450
sS'block_loop.thisRepN'
p1451
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1452
I0
sg909
g1424
sg55
g11
sS'block_loop.thisTrial'
p1453
Nsg69
Vy
sS'block_loop.thisTrialN'
p1454
I0
sg39
F1.1001545795988932
sg34
g752
(S'\x07\xdf\n\x14\x12.\x13\x0c{P'
tRp1455
sa(dp1456
S'trial_loop.thisTrialN'
p1457
I36
sg894
g932
sS'block_loop.thisIndex'
p1458
g888
sg38
S'left'
p1459
sg58
g62
sS'trial_loop.thisN'
p1460
I36
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1461
g59
(g98
S'$\x00\x00\x00'
tRp1462
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1463
I0
sg903
g940
sS'block_loop.thisRepN'
p1464
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1465
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p1466
Nsg69
Vy
sS'block_loop.thisTrialN'
p1467
I0
sg39
F1.8836419318395201
sg34
g752
(S'\x07\xdf\n\x14\x12.\x19\x0e{\x08'
tRp1468
sa(dp1469
S'trial_loop.thisTrialN'
p1470
I37
sg894
S'19-caramello_redo.png'
p1471
sS'block_loop.thisIndex'
p1472
g888
sg38
S'left'
p1473
sg58
g62
sS'trial_loop.thisN'
p1474
I37
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1475
g59
(g98
S'%\x00\x00\x00'
tRp1476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1477
I0
sg903
S'30-spaghetti_hoops.png'
p1478
sS'block_loop.thisRepN'
p1479
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1480
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1481
Nsg69
Vy
sS'block_loop.thisTrialN'
p1482
I0
sg39
F1.1334239751777204
sg34
g752
(S'\x07\xdf\n\x14\x12. \r\x1f`'
tRp1483
sa(dp1484
S'trial_loop.thisTrialN'
p1485
I38
sg894
g1250
sS'block_loop.thisIndex'
p1486
g888
sg38
S'right'
p1487
sg58
g62
sS'trial_loop.thisN'
p1488
I38
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p1489
g59
(g98
S'&\x00\x00\x00'
tRp1490
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1491
I0
sg903
g1257
sS'block_loop.thisRepN'
p1492
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1493
I0
sg909
g1045
sg55
g11
sS'block_loop.thisTrial'
p1494
Nsg69
Vy
sS'block_loop.thisTrialN'
p1495
I0
sg39
F1.800069164535671
sg34
g752
(S"\x07\xdf\n\x14\x12.'\x00\x94p"
tRp1496
sa(dp1497
S'trial_loop.thisTrialN'
p1498
I39
sg894
g1280
sS'block_loop.thisIndex'
p1499
g888
sg38
S'left'
p1500
sg58
g62
sS'trial_loop.thisN'
p1501
I39
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p1502
g59
(g98
S"'\x00\x00\x00"
tRp1503
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1504
I0
sg903
g1288
sS'block_loop.thisRepN'
p1505
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1506
I0
sg909
g1291
sg55
g11
sS'block_loop.thisTrial'
p1507
Nsg69
Vy
sS'block_loop.thisTrialN'
p1508
I0
sg39
F1.6506395581200195
sg34
g752
(S'\x07\xdf\n\x14\x12.-\rJX'
tRp1509
sa(dp1510
S'trial_loop.thisTrialN'
p1511
I40
sg894
g932
sS'block_loop.thisIndex'
p1512
g888
sg38
S'left'
p1513
sg58
g62
sS'trial_loop.thisN'
p1514
I40
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1515
g59
(g98
S'(\x00\x00\x00'
tRp1516
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1517
I0
sg903
g940
sS'block_loop.thisRepN'
p1518
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1519
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p1520
Nsg69
Vy
sS'block_loop.thisTrialN'
p1521
I0
sg39
F1.4168326406434062
sg34
g752
(S'\x07\xdf\n\x14\x12.4\x08X\xb8'
tRp1522
sa(dp1523
S'trial_loop.thisTrialN'
p1524
I41
sg894
g1314
sS'block_loop.thisIndex'
p1525
g888
sg38
S'left'
p1526
sg58
g62
sS'trial_loop.thisN'
p1527
I41
sg33
g1230
sg63
g64
sS'trial_loop.thisIndex'
p1528
g59
(g98
S')\x00\x00\x00'
tRp1529
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1530
I0
sg903
g1321
sS'block_loop.thisRepN'
p1531
I0
sg906
g1230
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1532
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p1533
Nsg69
Vy
sS'block_loop.thisTrialN'
p1534
I0
sg39
F1.80009795933438
sg34
g752
(S'\x07\xdf\n\x14\x12.;\x00\x17p'
tRp1535
sa(dp1536
S'trial_loop.thisTrialN'
p1537
I42
sg894
g1066
sS'block_loop.thisIndex'
p1538
g888
sg38
S'left'
p1539
sg58
g62
sS'trial_loop.thisN'
p1540
I42
sg33
g1070
sg63
g64
sS'trial_loop.thisIndex'
p1541
g59
(g98
S'*\x00\x00\x00'
tRp1542
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1543
I0
sg903
g1074
sS'block_loop.thisRepN'
p1544
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1545
I0
sg909
g1077
sg55
g11
sS'block_loop.thisTrial'
p1546
Nsg69
Vy
sS'block_loop.thisTrialN'
p1547
I0
sg39
F1.5168349784362363
sg34
g752
(S'\x07\xdf\n\x14\x12/\x05\x0c\xcdX'
tRp1548
sa(dp1549
S'trial_loop.thisTrialN'
p1550
I43
sg894
g983
sS'block_loop.thisIndex'
p1551
g888
sg38
S'left'
p1552
sg58
g62
sS'trial_loop.thisN'
p1553
I43
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1554
g59
(g98
S'+\x00\x00\x00'
tRp1555
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1556
I0
sg903
g991
sS'block_loop.thisRepN'
p1557
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1558
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p1559
Nsg69
Vy
sS'block_loop.thisTrialN'
p1560
I0
sg39
F1.4999868855375098
sg34
g752
(S'\x07\xdf\n\x14\x12/\x0c\x05\xb8\xd8'
tRp1561
sa(dp1562
S'trial_loop.thisTrialN'
p1563
I44
sg894
S'51-mars.png'
p1564
sS'block_loop.thisIndex'
p1565
g888
sg38
S'right'
p1566
sg58
g62
sS'trial_loop.thisN'
p1567
I44
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1568
g59
(g98
S',\x00\x00\x00'
tRp1569
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1570
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p1571
sS'block_loop.thisRepN'
p1572
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1573
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p1574
Nsg69
Vy
sS'block_loop.thisTrialN'
p1575
I0
sg39
F1.7502624317967275
sg34
g752
(S'\x07\xdf\n\x14\x12/\x12\r\xe6\x98'
tRp1576
sa(dp1577
S'trial_loop.thisTrialN'
p1578
I45
sg894
g983
sS'block_loop.thisIndex'
p1579
g888
sg38
S'left'
p1580
sg58
g62
sS'trial_loop.thisN'
p1581
I45
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1582
g59
(g98
S'-\x00\x00\x00'
tRp1583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1584
I0
sg903
g991
sS'block_loop.thisRepN'
p1585
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1586
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p1587
Nsg69
Vy
sS'block_loop.thisTrialN'
p1588
I0
sg39
F0.98351683127111755
sg34
g752
(S'\x07\xdf\n\x14\x12/\x19\n\xa2\xa8'
tRp1589
sa(dp1590
S'trial_loop.thisTrialN'
p1591
I46
sg894
g1175
sS'block_loop.thisIndex'
p1592
g888
sg38
S'left'
p1593
sg58
g62
sS'trial_loop.thisN'
p1594
I46
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1595
g59
(g98
S'.\x00\x00\x00'
tRp1596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1597
I0
sg903
g1182
sS'block_loop.thisRepN'
p1598
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1599
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p1600
Nsg69
Vy
sS'block_loop.thisTrialN'
p1601
I0
sg39
F2.0167622787012078
sg34
g752
(S'\x07\xdf\n\x14\x12/\x1f\n\xf8\x98'
tRp1602
sa(dp1603
S'trial_loop.thisTrialN'
p1604
I47
sg894
g1471
sS'block_loop.thisIndex'
p1605
g888
sg38
S'left'
p1606
sg58
g62
sS'trial_loop.thisN'
p1607
I47
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1608
g59
(g98
S'/\x00\x00\x00'
tRp1609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1610
I0
sg903
g1478
sS'block_loop.thisRepN'
p1611
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1612
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1613
Nsg69
Vy
sS'block_loop.thisTrialN'
p1614
I0
sg39
F1.2334208961292461
sg34
g752
(S'\x07\xdf\n\x14\x12/&\x0b\xbf\xd0'
tRp1615
sa(dp1616
S'trial_loop.thisTrialN'
p1617
I48
sg894
g1398
sS'block_loop.thisIndex'
p1618
g888
sg38
S'left'
p1619
sg58
g62
sS'trial_loop.thisN'
p1620
I48
sg33
g1011
sg63
g64
sS'trial_loop.thisIndex'
p1621
g59
(g98
S'0\x00\x00\x00'
tRp1622
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1623
I0
sg903
g1405
sS'block_loop.thisRepN'
p1624
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1625
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p1626
Nsg69
Vy
sS'block_loop.thisTrialN'
p1627
I0
sg39
F2.8001335964581813
sg34
g752
(S'\x07\xdf\n\x14\x12/-\x00e\x90'
tRp1628
sa(dp1629
S'trial_loop.thisTrialN'
p1630
I49
sg894
g1471
sS'block_loop.thisIndex'
p1631
g888
sg38
S'left'
p1632
sg58
g62
sS'trial_loop.thisN'
p1633
I49
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1634
g59
(g98
S'1\x00\x00\x00'
tRp1635
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1636
I0
sg903
g1478
sS'block_loop.thisRepN'
p1637
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1638
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1639
Nsg69
Vy
sS'block_loop.thisTrialN'
p1640
I0
sg39
F0.80055639532656642
sg34
g752
(S'\x07\xdf\n\x14\x12/4\r\x13\xa8'
tRp1641
sa(dp1642
S'trial_loop.thisTrialN'
p1643
I50
sg894
g1175
sS'block_loop.thisIndex'
p1644
g888
sg38
S'right'
p1645
sg58
g62
sS'trial_loop.thisN'
p1646
I50
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1647
g59
(g98
S'2\x00\x00\x00'
tRp1648
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1649
I0
sg903
g1182
sS'block_loop.thisRepN'
p1650
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1651
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p1652
Nsg69
Vy
sS'block_loop.thisTrialN'
p1653
I0
sg39
F1.5668273093288008
sg34
g752
(S'\x07\xdf\n\x14\x12/:\n\x8b8'
tRp1654
sa(dp1655
S'trial_loop.thisTrialN'
p1656
I51
sg894
g1034
sS'block_loop.thisIndex'
p1657
g888
sg38
S'left'
p1658
sg58
g62
sS'trial_loop.thisN'
p1659
I51
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p1660
g59
(g98
S'3\x00\x00\x00'
tRp1661
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1662
I0
sg903
g1042
sS'block_loop.thisRepN'
p1663
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1664
I0
sg909
g1045
sg55
g11
sS'block_loop.thisTrial'
p1665
Nsg69
Vy
sS'block_loop.thisTrialN'
p1666
I0
sg39
F2.050095536007575
sg34
g752
(S'\x07\xdf\n\x14\x120\x05\x04l\xd0'
tRp1667
sa(dp1668
S'trial_loop.thisTrialN'
p1669
I52
sg894
g1100
sS'block_loop.thisIndex'
p1670
g888
sg38
S'right'
p1671
sg58
g62
sS'trial_loop.thisN'
p1672
I52
sg33
g1104
sg63
g64
sS'trial_loop.thisIndex'
p1673
g59
(g98
S'4\x00\x00\x00'
tRp1674
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1675
I0
sg903
g1108
sS'block_loop.thisRepN'
p1676
I0
sg906
g1104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1677
I0
sg909
g1111
sg55
g11
sS'block_loop.thisTrial'
p1678
Nsg69
Vy
sS'block_loop.thisTrialN'
p1679
I0
sg39
F1.6001987696326978
sg34
g752
(S'\x07\xdf\n\x14\x120\x0c\x05\xeb\xa0'
tRp1680
sa(dp1681
S'trial_loop.thisTrialN'
p1682
I53
sg894
g1051
sS'block_loop.thisIndex'
p1683
g888
sg38
S'right'
p1684
sg58
g62
sS'trial_loop.thisN'
p1685
I53
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1686
g59
(g98
S'5\x00\x00\x00'
tRp1687
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1688
I0
sg903
g1058
sS'block_loop.thisRepN'
p1689
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1690
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p1691
Nsg69
Vy
sS'block_loop.thisTrialN'
p1692
I0
sg39
F1.3835139232833171
sg34
g752
(S'\x07\xdf\n\x14\x120\x13\x00FP'
tRp1693
sa(dp1694
S'trial_loop.thisTrialN'
p1695
I54
sg894
g1342
sS'block_loop.thisIndex'
p1696
g888
sg38
S'left'
p1697
sg58
g62
sS'trial_loop.thisN'
p1698
I54
sg33
g1136
sg63
g64
sS'trial_loop.thisIndex'
p1699
g59
(g98
S'6\x00\x00\x00'
tRp1700
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1701
I0
sg903
g1349
sS'block_loop.thisRepN'
p1702
I0
sg906
g1136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1703
I0
sg909
g1143
sg55
g11
sS'block_loop.thisTrial'
p1704
Nsg69
Vy
sS'block_loop.thisTrialN'
p1705
I0
sg39
F1.467196738034545
sg34
g752
(S'\x07\xdf\n\x14\x120\x19\x06\x8f\xb0'
tRp1706
sa(dp1707
S'trial_loop.thisTrialN'
p1708
I55
sg894
g1220
sS'block_loop.thisIndex'
p1709
g888
sg38
S'right'
p1710
sg58
g62
sS'trial_loop.thisN'
p1711
I55
sg33
g1230
sg63
g64
sS'trial_loop.thisIndex'
p1712
g59
(g98
S'7\x00\x00\x00'
tRp1713
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1714
I0
sg903
g1228
sS'block_loop.thisRepN'
p1715
I0
sg906
g1230
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1716
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p1717
Nsg69
Vy
sS'block_loop.thisTrialN'
p1718
I0
sg39
F2.4166841051010124
sg34
g752
(S'\x07\xdf\n\x14\x120\x1f\x0eDX'
tRp1719
sa(dp1720
S'trial_loop.thisTrialN'
p1721
I56
sg894
g1443
sS'block_loop.thisIndex'
p1722
g888
sg38
S'left'
p1723
sg58
g62
sS'trial_loop.thisN'
p1724
I56
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p1725
g59
(g98
S'8\x00\x00\x00'
tRp1726
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1727
I0
sg903
g1450
sS'block_loop.thisRepN'
p1728
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1729
I0
sg909
g1424
sg55
g11
sS'block_loop.thisTrial'
p1730
Nsg69
Vy
sS'block_loop.thisTrialN'
p1731
I0
sg39
F1.2001794400566723
sg34
g752
(S"\x07\xdf\n\x14\x120'\x05\xbc\xc0"
tRp1732
sa(dp1733
S'trial_loop.thisTrialN'
p1734
I57
sg894
S'7-olives.png'
p1735
sS'block_loop.thisIndex'
p1736
g888
sg38
S'right'
p1737
sg58
g62
sS'trial_loop.thisN'
p1738
I57
sg33
S'22-daim.png'
p1739
sg63
g64
sS'trial_loop.thisIndex'
p1740
g59
(g98
S'9\x00\x00\x00'
tRp1741
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1742
I0
sg903
S'22-daim.png'
p1743
sS'block_loop.thisRepN'
p1744
I0
sg906
g1739
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1745
I0
sg909
S'7-olives.png'
p1746
sg55
g11
sS'block_loop.thisTrial'
p1747
Nsg69
Vy
sS'block_loop.thisTrialN'
p1748
I0
sg39
F4.2667544385330984
sg34
g752
(S'\x07\xdf\n\x14\x120-\tf@'
tRp1749
sa(dp1750
S'trial_loop.thisTrialN'
p1751
I58
sg894
S'1-treacle_cookies.png'
p1752
sS'block_loop.thisIndex'
p1753
g888
sg38
S'right'
p1754
sg58
g62
sS'trial_loop.thisN'
p1755
I58
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p1756
g59
(g98
S':\x00\x00\x00'
tRp1757
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1758
I0
sg903
S'21-nakd_banana_crunch.png'
p1759
sS'block_loop.thisRepN'
p1760
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1761
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p1762
Nsg69
Vy
sS'block_loop.thisTrialN'
p1763
I0
sg39
F2.0835111863525526
sg34
g752
(S'\x07\xdf\n\x14\x1206\r\xf2P'
tRp1764
sa(dp1765
S'trial_loop.thisTrialN'
p1766
I59
sg894
g1398
sS'block_loop.thisIndex'
p1767
g888
sg38
S'right'
p1768
sg58
g62
sS'trial_loop.thisN'
p1769
I59
sg33
g1011
sg63
g64
sS'trial_loop.thisIndex'
p1770
g59
(g98
S';\x00\x00\x00'
tRp1771
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1772
I0
sg903
g1405
sS'block_loop.thisRepN'
p1773
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1774
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p1775
Nsg69
Vy
sS'block_loop.thisTrialN'
p1776
I0
sg39
F1.2001503601641161
sg34
g752
(S'\x07\xdf\n\x14\x121\x02\x00m`'
tRp1777
sa(dp1778
S'trial_loop.thisTrialN'
p1779
I60
sg894
g1117
sS'block_loop.thisIndex'
p1780
g888
sg38
S'left'
p1781
sg58
g62
sS'trial_loop.thisN'
p1782
I60
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p1783
g59
(g98
S'<\x00\x00\x00'
tRp1784
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1785
I0
sg903
g1124
sS'block_loop.thisRepN'
p1786
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1787
I0
sg909
g1028
sg55
g11
sS'block_loop.thisTrial'
p1788
Nsg69
Vy
sS'block_loop.thisTrialN'
p1789
I0
sg39
F1.4168061266209406
sg34
g752
(S'\x07\xdf\n\x14\x121\x08\x04\x16\xe0'
tRp1790
sa(dp1791
S'trial_loop.thisTrialN'
p1792
I61
sg894
g1383
sS'block_loop.thisIndex'
p1793
g888
sg38
S'right'
p1794
sg58
g62
sS'trial_loop.thisN'
p1795
I61
sg33
g1207
sg63
g64
sS'trial_loop.thisIndex'
p1796
g59
(g98
S'=\x00\x00\x00'
tRp1797
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1798
I0
sg903
g1390
sS'block_loop.thisRepN'
p1799
I0
sg906
g1207
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1800
I0
sg909
g1214
sg55
g11
sS'block_loop.thisTrial'
p1801
Nsg69
Vy
sS'block_loop.thisTrialN'
p1802
I0
sg39
F2.6501380724839692
sg34
g752
(S'\x07\xdf\n\x14\x121\x0e\n\xd5p'
tRp1803
sa(dp1804
S'trial_loop.thisTrialN'
p1805
I62
sg894
g1132
sS'block_loop.thisIndex'
p1806
g888
sg38
S'left'
p1807
sg58
g62
sS'trial_loop.thisN'
p1808
I62
sg33
g1136
sg63
g64
sS'trial_loop.thisIndex'
p1809
g59
(g98
S'>\x00\x00\x00'
tRp1810
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1811
I0
sg903
g1140
sS'block_loop.thisRepN'
p1812
I0
sg906
g1136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1813
I0
sg909
g1143
sg55
g11
sS'block_loop.thisTrial'
p1814
Nsg69
Vy
sS'block_loop.thisTrialN'
p1815
I0
sg39
F2.166825085572782
sg34
g752
(S'\x07\xdf\n\x14\x121\x16\x06\x1eh'
tRp1816
sa(dp1817
S'trial_loop.thisTrialN'
p1818
I63
sg894
g1017
sS'block_loop.thisIndex'
p1819
g888
sg38
S'left'
p1820
sg58
g62
sS'trial_loop.thisN'
p1821
I63
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p1822
g59
(g98
S'?\x00\x00\x00'
tRp1823
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1824
I0
sg903
g1025
sS'block_loop.thisRepN'
p1825
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1826
I0
sg909
g1028
sg55
g11
sS'block_loop.thisTrial'
p1827
Nsg69
Vy
sS'block_loop.thisTrialN'
p1828
I0
sg39
F1.0672079138348636
sg34
g752
(S'\x07\xdf\n\x14\x121\x1d\t\x0ch'
tRp1829
sa(dp1830
S'trial_loop.thisTrialN'
p1831
I64
sg894
g1297
sS'block_loop.thisIndex'
p1832
g888
sg38
S'left'
p1833
sg58
g62
sS'trial_loop.thisN'
p1834
I64
sg33
g1301
sg63
g64
sS'trial_loop.thisIndex'
p1835
g59
(g98
S'@\x00\x00\x00'
tRp1836
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1837
I0
sg903
g1305
sS'block_loop.thisRepN'
p1838
I0
sg906
g1301
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1839
I0
sg909
g1308
sg55
g11
sS'block_loop.thisTrial'
p1840
Nsg69
Vy
sS'block_loop.thisTrialN'
p1841
I0
sg39
F1.1835018351703184
sg34
g752
(S'\x07\xdf\n\x14\x121#\n\x8f '
tRp1842
sa(dp1843
S'trial_loop.thisTrialN'
p1844
I65
sg894
g1443
sS'block_loop.thisIndex'
p1845
g888
sg38
S'right'
p1846
sg58
g62
sS'trial_loop.thisN'
p1847
I65
sg33
g1424
sg63
g64
sS'trial_loop.thisIndex'
p1848
g59
(g98
S'A\x00\x00\x00'
tRp1849
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1850
I0
sg903
g1450
sS'block_loop.thisRepN'
p1851
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1852
I0
sg909
g1424
sg55
g11
sS'block_loop.thisTrial'
p1853
Nsg69
Vy
sS'block_loop.thisTrialN'
p1854
I0
sg39
F1.5832688538939692
sg34
g752
(S'\x07\xdf\n\x14\x121)\r\xfe\x08'
tRp1855
sa(dp1856
S'trial_loop.thisTrialN'
p1857
I66
sg894
S'8-liquorice_catherine_wheels.png'
p1858
sS'block_loop.thisIndex'
p1859
g888
sg38
S'right'
p1860
sg58
g62
sS'trial_loop.thisN'
p1861
I66
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1862
g59
(g98
S'B\x00\x00\x00'
tRp1863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1864
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p1865
sS'block_loop.thisRepN'
p1866
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1867
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p1868
Nsg69
Vy
sS'block_loop.thisTrialN'
p1869
I0
sg39
F1.1335106446640566
sg34
g752
(S'\x07\xdf\n\x14\x1210\x08\x1a8'
tRp1870
sa(dp1871
S'trial_loop.thisTrialN'
p1872
I67
sg894
g1265
sS'block_loop.thisIndex'
p1873
g888
sg38
S'right'
p1874
sg58
g62
sS'trial_loop.thisN'
p1875
I67
sg33
g1070
sg63
g64
sS'trial_loop.thisIndex'
p1876
g59
(g98
S'C\x00\x00\x00'
tRp1877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1878
I0
sg903
g1272
sS'block_loop.thisRepN'
p1879
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1880
I0
sg909
g1077
sg55
g11
sS'block_loop.thisTrial'
p1881
Nsg69
Vy
sS'block_loop.thisTrialN'
p1882
I0
sg39
F1.9167741957535327
sg34
g752
(S'\x07\xdf\n\x14\x1216\n\x93\x08'
tRp1883
sa(dp1884
S'trial_loop.thisTrialN'
p1885
I68
sg894
g1000
sS'block_loop.thisIndex'
p1886
g888
sg38
S'right'
p1887
sg58
g62
sS'trial_loop.thisN'
p1888
I68
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p1889
g59
(g98
S'D\x00\x00\x00'
tRp1890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1891
I0
sg903
g1008
sS'block_loop.thisRepN'
p1892
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1893
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p1894
Nsg69
Vy
sS'block_loop.thisTrialN'
p1895
I0
sg39
F1.0505502657360921
sg34
g752
(S'\x07\xdf\n\x14\x122\x01\t\xee\xf8'
tRp1896
sa(dp1897
S'trial_loop.thisTrialN'
p1898
I69
sg894
S'29-beans.png'
p1899
sS'block_loop.thisIndex'
p1900
g888
sg38
S'right'
p1901
sg58
g62
sS'trial_loop.thisN'
p1902
I69
sg33
g1087
sg63
g64
sS'trial_loop.thisIndex'
p1903
g59
(g98
S'E\x00\x00\x00'
tRp1904
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1905
I0
sg903
S'46-pistachios.png'
p1906
sS'block_loop.thisRepN'
p1907
I0
sg906
g1087
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1908
I0
sg909
g1094
sg55
g11
sS'block_loop.thisTrial'
p1909
Nsg69
Vy
sS'block_loop.thisTrialN'
p1910
I0
sg39
F1.1668464678477903
sg34
g752
(S'\x07\xdf\n\x14\x122\x07\x0b7\x18'
tRp1911
sa(dp1912
S'trial_loop.thisTrialN'
p1913
I70
sg894
g1117
sS'block_loop.thisIndex'
p1914
g888
sg38
S'right'
p1915
sg58
g62
sS'trial_loop.thisN'
p1916
I70
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p1917
g59
(g98
S'F\x00\x00\x00'
tRp1918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1919
I0
sg903
g1124
sS'block_loop.thisRepN'
p1920
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1921
I0
sg909
g1028
sg55
g11
sS'block_loop.thisTrial'
p1922
Nsg69
Vy
sS'block_loop.thisTrialN'
p1923
I0
sg39
F1.2503841682228085
sg34
g752
(S'\x07\xdf\n\x14\x122\r\x0e)\x00'
tRp1924
sa(dp1925
S'trial_loop.thisTrialN'
p1926
I71
sg894
g1066
sS'block_loop.thisIndex'
p1927
g888
sg38
S'right'
p1928
sg58
g62
sS'trial_loop.thisN'
p1929
I71
sg33
g1070
sg63
g64
sS'trial_loop.thisIndex'
p1930
g59
(g98
S'G\x00\x00\x00'
tRp1931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1932
I0
sg903
g1074
sS'block_loop.thisRepN'
p1933
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1934
I0
sg909
g1077
sg55
g11
sS'block_loop.thisTrial'
p1935
Nsg69
Vy
sS'block_loop.thisTrialN'
p1936
I0
sg39
F0.75019742967924685
sg34
g752
(S'\x07\xdf\n\x14\x122\x14\x03G\xd8'
tRp1937
sa(dp1938
S'trial_loop.thisTrialN'
p1939
I72
sg894
g1858
sS'block_loop.thisIndex'
p1940
g888
sg38
S'right'
p1941
sg58
g62
sS'trial_loop.thisN'
p1942
I72
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1943
g59
(g98
S'H\x00\x00\x00'
tRp1944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1945
I0
sg903
g1865
sS'block_loop.thisRepN'
p1946
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1947
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p1948
Nsg69
Vy
sS'block_loop.thisTrialN'
p1949
I0
sg39
F1.1667831763115828
sg34
g752
(S'\x07\xdf\n\x14\x122\x1a\x00\x07\xd0'
tRp1950
sa(dp1951
S'trial_loop.thisTrialN'
p1952
I73
sg894
g1383
sS'block_loop.thisIndex'
p1953
g888
sg38
S'left'
p1954
sg58
g62
sS'trial_loop.thisN'
p1955
I73
sg33
g1207
sg63
g64
sS'trial_loop.thisIndex'
p1956
g59
(g98
S'I\x00\x00\x00'
tRp1957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1958
I0
sg903
g1390
sS'block_loop.thisRepN'
p1959
I0
sg906
g1207
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1960
I0
sg909
g1214
sg55
g11
sS'block_loop.thisTrial'
p1961
Nsg69
Vy
sS'block_loop.thisTrialN'
p1962
I0
sg39
F1.317019037069258
sg34
g752
(S'\x07\xdf\n\x14\x122 \x02\xfd\xa0'
tRp1963
sa(dp1964
S'trial_loop.thisTrialN'
p1965
I74
sg894
g1083
sS'block_loop.thisIndex'
p1966
g888
sg38
S'left'
p1967
sg58
g62
sS'trial_loop.thisN'
p1968
I74
sg33
g1087
sg63
g64
sS'trial_loop.thisIndex'
p1969
g59
(g98
S'J\x00\x00\x00'
tRp1970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1971
I0
sg903
g1091
sS'block_loop.thisRepN'
p1972
I0
sg906
g1087
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1973
I0
sg909
g1094
sg55
g11
sS'block_loop.thisTrial'
p1974
Nsg69
Vy
sS'block_loop.thisTrialN'
p1975
I0
sg39
F0.73352552673168248
sg34
g752
(S'\x07\xdf\n\x14\x122&\x08P\xe8'
tRp1976
sa(dp1977
S'trial_loop.thisTrialN'
p1978
I75
sg894
g1203
sS'block_loop.thisIndex'
p1979
g888
sg38
S'right'
p1980
sg58
g62
sS'trial_loop.thisN'
p1981
I75
sg33
g1207
sg63
g64
sS'trial_loop.thisIndex'
p1982
g59
(g98
S'K\x00\x00\x00'
tRp1983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1984
I0
sg903
g1211
sS'block_loop.thisRepN'
p1985
I0
sg906
g1207
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1986
I0
sg909
g1214
sg55
g11
sS'block_loop.thisTrial'
p1987
Nsg69
Vy
sS'block_loop.thisTrialN'
p1988
I0
sg39
F0.80011392476444598
sg34
g752
(S'\x07\xdf\n\x14\x122,\x04\xd6H'
tRp1989
sa(dp1990
S'trial_loop.thisTrialN'
p1991
I76
sg894
g1297
sS'block_loop.thisIndex'
p1992
g888
sg38
S'left'
p1993
sg58
g62
sS'trial_loop.thisN'
p1994
I76
sg33
g1301
sg63
g64
sS'trial_loop.thisIndex'
p1995
g59
(g98
S'L\x00\x00\x00'
tRp1996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1997
I0
sg903
g1305
sS'block_loop.thisRepN'
p1998
I0
sg906
g1301
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1999
I0
sg909
g1308
sg55
g11
sS'block_loop.thisTrial'
p2000
Nsg69
Vy
sS'block_loop.thisTrialN'
p2001
I0
sg39
F1.133530601458915
sg34
g752
(S'\x07\xdf\n\x14\x1222\x02M\xd8'
tRp2002
sa(dp2003
S'trial_loop.thisTrialN'
p2004
I77
sg894
g1066
sS'block_loop.thisIndex'
p2005
g888
sg38
S'right'
p2006
sg58
g62
sS'trial_loop.thisN'
p2007
I77
sg33
g1070
sg63
g64
sS'trial_loop.thisIndex'
p2008
g59
(g98
S'M\x00\x00\x00'
tRp2009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2010
I0
sg903
g1074
sS'block_loop.thisRepN'
p2011
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2012
I0
sg909
g1077
sg55
g11
sS'block_loop.thisTrial'
p2013
Nsg69
Vy
sS'block_loop.thisTrialN'
p2014
I0
sg39
F2.1833926430153952
sg34
g752
(S'\x07\xdf\n\x14\x1228\x04\xc6\xa8'
tRp2015
sa(dp2016
S'trial_loop.thisTrialN'
p2017
I78
sg894
g1735
sS'block_loop.thisIndex'
p2018
g888
sg38
S'left'
p2019
sg58
g62
sS'trial_loop.thisN'
p2020
I78
sg33
g1739
sg63
g64
sS'trial_loop.thisIndex'
p2021
g59
(g98
S'N\x00\x00\x00'
tRp2022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2023
I0
sg903
g1743
sS'block_loop.thisRepN'
p2024
I0
sg906
g1739
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2025
I0
sg909
g1746
sg55
g11
sS'block_loop.thisTrial'
p2026
Nsg69
Vy
sS'block_loop.thisTrialN'
p2027
I0
sg39
F2.5504852636186115
sg34
g752
(S'\x07\xdf\n\x14\x123\x03\x08-\xc0'
tRp2028
sa(dp2029
S'trial_loop.thisTrialN'
p2030
I79
sg894
g1100
sS'block_loop.thisIndex'
p2031
g888
sg38
S'right'
p2032
sg58
g62
sS'trial_loop.thisN'
p2033
I79
sg33
g1104
sg63
g64
sS'trial_loop.thisIndex'
p2034
g59
(g98
S'O\x00\x00\x00'
tRp2035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2036
I0
sg903
g1108
sS'block_loop.thisRepN'
p2037
I0
sg906
g1104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2038
I0
sg909
g1111
sg55
g11
sS'block_loop.thisTrial'
p2039
Nsg69
Vy
sS'block_loop.thisTrialN'
p2040
I0
sg39
F1.5168654838198563
sg34
g752
(S'\x07\xdf\n\x14\x123\x0b\x01\xcc\xf0'
tRp2041
sa(dp2042
S'trial_loop.thisTrialN'
p2043
I80
sg894
g1564
sS'block_loop.thisIndex'
p2044
g888
sg38
S'left'
p2045
sg58
g62
sS'trial_loop.thisN'
p2046
I80
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2047
g59
(g98
S'P\x00\x00\x00'
tRp2048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2049
I0
sg903
g1571
sS'block_loop.thisRepN'
p2050
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2051
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2052
Nsg69
Vy
sS'block_loop.thisTrialN'
p2053
I0
sg39
F1.3335501020956144
sg34
g752
(S'\x07\xdf\n\x14\x123\x11\n90'
tRp2054
sa(dp2055
S'trial_loop.thisTrialN'
p2056
I81
sg894
S'6-sour_patch_kids.png'
p2057
sS'block_loop.thisIndex'
p2058
g888
sg38
S'right'
p2059
sg58
g62
sS'trial_loop.thisN'
p2060
I81
sg33
S'6-sour_patch_kids.png'
p2061
sg63
g64
sS'trial_loop.thisIndex'
p2062
g59
(g98
S'Q\x00\x00\x00'
tRp2063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2064
I0
sg903
S'38-maltesers.png'
p2065
sS'block_loop.thisRepN'
p2066
I0
sg906
S'38-maltesers.png'
p2067
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2068
I0
sg909
g2061
sg55
g11
sS'block_loop.thisTrial'
p2069
Nsg69
Vy
sS'block_loop.thisTrialN'
p2070
I0
sg39
F1.3165566097195551
sg34
g752
(S'\x07\xdf\n\x14\x123\x18\x00\x88\xb8'
tRp2071
sa(dp2072
S'trial_loop.thisTrialN'
p2073
I82
sg894
g1752
sS'block_loop.thisIndex'
p2074
g888
sg38
S'right'
p2075
sg58
g62
sS'trial_loop.thisN'
p2076
I82
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2077
g59
(g98
S'R\x00\x00\x00'
tRp2078
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2079
I0
sg903
g1759
sS'block_loop.thisRepN'
p2080
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2081
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p2082
Nsg69
Vy
sS'block_loop.thisTrialN'
p2083
I0
sg39
F0.98352737985987915
sg34
g752
(S'\x07\xdf\n\x14\x123\x1e\x05\xdc\x00'
tRp2084
sa(dp2085
S'trial_loop.thisTrialN'
p2086
I83
sg894
S'18-mms.png'
p2087
sS'block_loop.thisIndex'
p2088
g888
sg38
S'left'
p2089
sg58
g62
sS'trial_loop.thisN'
p2090
I83
sg33
g1104
sg63
g64
sS'trial_loop.thisIndex'
p2091
g59
(g98
S'S\x00\x00\x00'
tRp2092
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2093
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p2094
sS'block_loop.thisRepN'
p2095
I0
sg906
g1104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2096
I0
sg909
g1111
sg55
g11
sS'block_loop.thisTrial'
p2097
Nsg69
Vy
sS'block_loop.thisTrialN'
p2098
I0
sg39
F0.80026645166435628
sg34
g752
(S'\x07\xdf\n\x14\x123$\x05\xf3p'
tRp2099
sa(dp2100
S'trial_loop.thisTrialN'
p2101
I84
sg894
g1564
sS'block_loop.thisIndex'
p2102
g888
sg38
S'left'
p2103
sg58
g62
sS'trial_loop.thisN'
p2104
I84
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2105
g59
(g98
S'T\x00\x00\x00'
tRp2106
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2107
I0
sg903
g1571
sS'block_loop.thisRepN'
p2108
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2109
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2110
Nsg69
Vy
sS'block_loop.thisTrialN'
p2111
I0
sg39
F1.0002106866922986
sg34
g752
(S'\x07\xdf\n\x14\x123*\x03k\x00'
tRp2112
sa(dp2113
S'trial_loop.thisTrialN'
p2114
I85
sg894
g1413
sS'block_loop.thisIndex'
p2115
g888
sg38
S'right'
p2116
sg58
g62
sS'trial_loop.thisN'
p2117
I85
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p2118
g59
(g98
S'U\x00\x00\x00'
tRp2119
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2120
I0
sg903
g1421
sS'block_loop.thisRepN'
p2121
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2122
I0
sg909
g1424
sg55
g11
sS'block_loop.thisTrial'
p2123
Nsg69
Vy
sS'block_loop.thisTrialN'
p2124
I0
sg39
F1.7668308445317962
sg34
g752
(S'\x07\xdf\n\x14\x1230\x03\xfb\x88'
tRp2125
sa(dp2126
S'trial_loop.thisTrialN'
p2127
I86
sg894
g1314
sS'block_loop.thisIndex'
p2128
g888
sg38
S'left'
p2129
sg58
g62
sS'trial_loop.thisN'
p2130
I86
sg33
g1230
sg63
g64
sS'trial_loop.thisIndex'
p2131
g59
(g98
S'V\x00\x00\x00'
tRp2132
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2133
I0
sg903
g1321
sS'block_loop.thisRepN'
p2134
I0
sg906
g1230
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2135
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p2136
Nsg69
Vy
sS'block_loop.thisTrialN'
p2137
I0
sg39
F1.4167325715934567
sg34
g752
(S'\x07\xdf\n\x14\x1237\x00\xf6\x18'
tRp2138
sa(dp2139
S'trial_loop.thisTrialN'
p2140
I87
sg894
g949
sS'block_loop.thisIndex'
p2141
g888
sg38
S'left'
p2142
sg58
g62
sS'trial_loop.thisN'
p2143
I87
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2144
g59
(g98
S'W\x00\x00\x00'
tRp2145
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2146
I0
sg903
g957
sS'block_loop.thisRepN'
p2147
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2148
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p2149
Nsg69
Vy
sS'block_loop.thisTrialN'
p2150
I0
sg39
F2.783500181605632
sg34
g752
(S'\x07\xdf\n\x14\x124\x01\x07\xb8\x90'
tRp2151
sa(dp2152
S'trial_loop.thisTrialN'
p2153
I88
sg894
g1297
sS'block_loop.thisIndex'
p2154
g888
sg38
S'left'
p2155
sg58
g62
sS'trial_loop.thisN'
p2156
I88
sg33
g1301
sg63
g64
sS'trial_loop.thisIndex'
p2157
g59
(g98
S'X\x00\x00\x00'
tRp2158
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2159
I0
sg903
g1305
sS'block_loop.thisRepN'
p2160
I0
sg906
g1301
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2161
I0
sg909
g1308
sg55
g11
sS'block_loop.thisTrial'
p2162
Nsg69
Vy
sS'block_loop.thisTrialN'
p2163
I0
sg39
F0.73380349631770514
sg34
g752
(S'\x07\xdf\n\x14\x124\t\x04\xe5\xe8'
tRp2164
sa(dp2165
S'trial_loop.thisTrialN'
p2166
I89
sg894
g2057
sS'block_loop.thisIndex'
p2167
g888
sg38
S'left'
p2168
sg58
g62
sS'trial_loop.thisN'
p2169
I89
sg33
g2067
sg63
g64
sS'trial_loop.thisIndex'
p2170
g59
(g98
S'Y\x00\x00\x00'
tRp2171
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2172
I0
sg903
g2065
sS'block_loop.thisRepN'
p2173
I0
sg906
g2067
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2174
I0
sg909
g2061
sg55
g11
sS'block_loop.thisTrial'
p2175
Nsg69
Vy
sS'block_loop.thisTrialN'
p2176
I0
sg39
F1.5831451217891299
sg34
g752
(S'\x07\xdf\n\x14\x124\x0f\x01kH'
tRp2177
sa(dp2178
S'trial_loop.thisTrialN'
p2179
I90
sg894
g1250
sS'block_loop.thisIndex'
p2180
g888
sg38
S'right'
p2181
sg58
g62
sS'trial_loop.thisN'
p2182
I90
sg33
g1045
sg63
g64
sS'trial_loop.thisIndex'
p2183
g59
(g98
S'Z\x00\x00\x00'
tRp2184
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2185
I0
sg903
g1257
sS'block_loop.thisRepN'
p2186
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2187
I0
sg909
g1045
sg55
g11
sS'block_loop.thisTrial'
p2188
Nsg69
Vy
sS'block_loop.thisTrialN'
p2189
I0
sg39
F1.0835140373201284
sg34
g752
(S'\x07\xdf\n\x14\x124\x15\n\xcd\xa0'
tRp2190
sa(dp2191
S'trial_loop.thisTrialN'
p2192
I91
sg894
S'33-ambrosia_rice.png'
p2193
sS'block_loop.thisIndex'
p2194
g888
sg38
S'right'
p2195
sg58
g62
sS'trial_loop.thisN'
p2196
I91
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p2197
g59
(g98
S'[\x00\x00\x00'
tRp2198
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2199
I0
sg903
S'23-crunchie_redo.png'
p2200
sS'block_loop.thisRepN'
p2201
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2202
I0
sg909
g1291
sg55
g11
sS'block_loop.thisTrial'
p2203
Nsg69
Vy
sS'block_loop.thisTrialN'
p2204
I0
sg39
F1.2835095898080908
sg34
g752
(S'\x07\xdf\n\x14\x124\x1b\x0c\x8e\xd8'
tRp2205
sa(dp2206
S'trial_loop.thisTrialN'
p2207
I92
sg894
g1051
sS'block_loop.thisIndex'
p2208
g888
sg38
S'right'
p2209
sg58
g62
sS'trial_loop.thisN'
p2210
I92
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p2211
g59
(g98
S'\\\x00\x00\x00'
tRp2212
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2213
I0
sg903
g1058
sS'block_loop.thisRepN'
p2214
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2215
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p2216
Nsg69
Vy
sS'block_loop.thisTrialN'
p2217
I0
sg39
F1.6667253016166796
sg34
g752
(S'\x07\xdf\n\x14\x124"\x02&\xc8'
tRp2218
sa(dp2219
S'trial_loop.thisTrialN'
p2220
I93
sg894
g915
sS'block_loop.thisIndex'
p2221
g888
sg38
S'right'
p2222
sg58
g62
sS'trial_loop.thisN'
p2223
I93
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2224
g59
(g98
S']\x00\x00\x00'
tRp2225
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2226
I0
sg903
g923
sS'block_loop.thisRepN'
p2227
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2228
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p2229
Nsg69
Vy
sS'block_loop.thisTrialN'
p2230
I0
sg39
F1.8835410074971151
sg34
g752
(S'\x07\xdf\n\x14\x124(\x0c\xf4h'
tRp2231
sa(dp2232
S'trial_loop.thisTrialN'
p2233
I94
sg894
g1117
sS'block_loop.thisIndex'
p2234
g888
sg38
S'right'
p2235
sg58
g62
sS'trial_loop.thisN'
p2236
I94
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p2237
g59
(g98
S'^\x00\x00\x00'
tRp2238
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2239
I0
sg903
g1124
sS'block_loop.thisRepN'
p2240
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2241
I0
sg909
g1028
sg55
g11
sS'block_loop.thisTrial'
p2242
Nsg69
Vy
sS'block_loop.thisTrialN'
p2243
I0
sg39
F1.2167986000604287
sg34
g752
(S'\x07\xdf\n\x14\x124/\x0b\x98\xc0'
tRp2244
sa(dp2245
S'trial_loop.thisTrialN'
p2246
I95
sg894
g895
sS'block_loop.thisIndex'
p2247
g888
sg38
S'right'
p2248
sg58
g62
sS'trial_loop.thisN'
p2249
I95
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p2250
g59
(g98
S'_\x00\x00\x00'
tRp2251
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2252
I0
sg903
g904
sS'block_loop.thisRepN'
p2253
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2254
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p2255
Nsg69
Vy
sS'block_loop.thisTrialN'
p2256
I0
sg39
F0.91677020439965418
sg34
g752
(S'\x07\xdf\n\x14\x1246\x00>\x80'
tRp2257
sa(dp2258
S'trial_loop.thisTrialN'
p2259
I96
sg894
g2057
sS'block_loop.thisIndex'
p2260
g888
sg38
S'left'
p2261
sg58
g62
sS'trial_loop.thisN'
p2262
I96
sg33
g2061
sg63
g64
sS'trial_loop.thisIndex'
p2263
g59
(g98
S'`\x00\x00\x00'
tRp2264
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2265
I0
sg903
g2065
sS'block_loop.thisRepN'
p2266
I0
sg906
g2067
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2267
I0
sg909
g2061
sg55
g11
sS'block_loop.thisTrial'
p2268
Nsg69
Vy
sS'block_loop.thisTrialN'
p2269
I0
sg39
F2.6832024833092873
sg34
g752
(S'\x07\xdf\n\x14\x124;\x0e\xa2\x18'
tRp2270
sa(dp2271
S'trial_loop.thisTrialN'
p2272
I97
sg894
g1203
sS'block_loop.thisIndex'
p2273
g888
sg38
S'right'
p2274
sg58
g62
sS'trial_loop.thisN'
p2275
I97
sg33
g1207
sg63
g64
sS'trial_loop.thisIndex'
p2276
g59
(g98
S'a\x00\x00\x00'
tRp2277
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2278
I0
sg903
g1211
sS'block_loop.thisRepN'
p2279
I0
sg906
g1207
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2280
I0
sg909
g1214
sg55
g11
sS'block_loop.thisTrial'
p2281
Nsg69
Vy
sS'block_loop.thisTrialN'
p2282
I0
sg39
F0.96683894128364045
sg34
g752
(S'\x07\xdf\n\x14\x125\x07\nd('
tRp2283
sa(dp2284
S'trial_loop.thisTrialN'
p2285
I98
sg894
g1280
sS'block_loop.thisIndex'
p2286
g888
sg38
S'left'
p2287
sg58
g62
sS'trial_loop.thisN'
p2288
I98
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p2289
g59
(g98
S'b\x00\x00\x00'
tRp2290
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2291
I0
sg903
g1288
sS'block_loop.thisRepN'
p2292
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2293
I0
sg909
g1291
sg55
g11
sS'block_loop.thisTrial'
p2294
Nsg69
Vy
sS'block_loop.thisTrialN'
p2295
I0
sg39
F0.8502128819382051
sg34
g752
(S'\x07\xdf\n\x14\x125\r\nA\x00'
tRp2296
sa(dp2297
S'trial_loop.thisTrialN'
p2298
I99
sg894
g895
sS'block_loop.thisIndex'
p2299
g888
sg38
S'right'
p2300
sg58
g62
sS'trial_loop.thisN'
p2301
I99
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2302
g59
(g98
S'c\x00\x00\x00'
tRp2303
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2304
I0
sg903
g904
sS'block_loop.thisRepN'
p2305
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2306
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p2307
Nsg69
Vy
sS'block_loop.thisTrialN'
p2308
I0
sg39
F0.76686020952183753
sg34
g752
(S'\x07\xdf\n\x14\x125\x13\x08\xaa\xc0'
tRp2309
sa(dp2310
S'trial_loop.thisTrialN'
p2311
I100
sg894
g1265
sS'block_loop.thisIndex'
p2312
g888
sg38
S'left'
p2313
sg58
g62
sS'trial_loop.thisN'
p2314
I100
sg33
g1070
sg63
g64
sS'trial_loop.thisIndex'
p2315
g59
(g98
S'd\x00\x00\x00'
tRp2316
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2317
I0
sg903
g1272
sS'block_loop.thisRepN'
p2318
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2319
I0
sg909
g1077
sg55
g11
sS'block_loop.thisTrial'
p2320
Nsg69
Vy
sS'block_loop.thisTrialN'
p2321
I0
sg39
F1.5001790409223759
sg34
g752
(S'\x07\xdf\n\x14\x125\x19\x05n\xa0'
tRp2322
sa(dp2323
S'trial_loop.thisTrialN'
p2324
I101
sg894
S'4-corn.png'
p2325
sS'block_loop.thisIndex'
p2326
g888
sg38
S'right'
p2327
sg58
g62
sS'trial_loop.thisN'
p2328
I101
sg33
g1301
sg63
g64
sS'trial_loop.thisIndex'
p2329
g59
(g98
S'e\x00\x00\x00'
tRp2330
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2331
I0
sg903
S'10-bounty_redo.png'
p2332
sS'block_loop.thisRepN'
p2333
I0
sg906
g1301
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2334
I0
sg909
g1308
sg55
g11
sS'block_loop.thisTrial'
p2335
Nsg69
Vy
sS'block_loop.thisTrialN'
p2336
I0
sg39
F0.65019081542777712
sg34
g752
(S'\x07\xdf\n\x14\x125\x1f\r\x9c`'
tRp2337
sa(dp2338
S'trial_loop.thisTrialN'
p2339
I102
sg894
g1100
sS'block_loop.thisIndex'
p2340
g888
sg38
S'right'
p2341
sg58
g62
sS'trial_loop.thisN'
p2342
I102
sg33
g1104
sg63
g64
sS'trial_loop.thisIndex'
p2343
g59
(g98
S'f\x00\x00\x00'
tRp2344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2345
I0
sg903
g1108
sS'block_loop.thisRepN'
p2346
I0
sg906
g1104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2347
I0
sg909
g1111
sg55
g11
sS'block_loop.thisTrial'
p2348
Nsg69
Vy
sS'block_loop.thisTrialN'
p2349
I0
sg39
F0.7835671794055088
sg34
g752
(S'\x07\xdf\n\x14\x125%\x08\xb6x'
tRp2350
sa(dp2351
S'trial_loop.thisTrialN'
p2352
I103
sg894
g1342
sS'block_loop.thisIndex'
p2353
g888
sg38
S'right'
p2354
sg58
g62
sS'trial_loop.thisN'
p2355
I103
sg33
g1136
sg63
g64
sS'trial_loop.thisIndex'
p2356
g59
(g98
S'g\x00\x00\x00'
tRp2357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2358
I0
sg903
g1349
sS'block_loop.thisRepN'
p2359
I0
sg906
g1136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2360
I0
sg909
g1143
sg55
g11
sS'block_loop.thisTrial'
p2361
Nsg69
Vy
sS'block_loop.thisTrialN'
p2362
I0
sg39
F1.133530601458915
sg34
g752
(S'\x07\xdf\n\x14\x125+\x05\xf3p'
tRp2363
sa(dp2364
S'trial_loop.thisTrialN'
p2365
I104
sg894
g1203
sS'block_loop.thisIndex'
p2366
g888
sg38
S'right'
p2367
sg58
g62
sS'trial_loop.thisN'
p2368
I104
sg33
g1207
sg63
g64
sS'trial_loop.thisIndex'
p2369
g59
(g98
S'h\x00\x00\x00'
tRp2370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2371
I0
sg903
g1211
sS'block_loop.thisRepN'
p2372
I0
sg906
g1207
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2373
I0
sg909
g1214
sg55
g11
sS'block_loop.thisTrial'
p2374
Nsg69
Vy
sS'block_loop.thisTrialN'
p2375
I0
sg39
F0.95009661937729106
sg34
g752
(S'\x07\xdf\n\x14\x1251\x08\xa6\xd8'
tRp2376
sa(dp2377
S'trial_loop.thisTrialN'
p2378
I105
sg894
g1752
sS'block_loop.thisIndex'
p2379
g888
sg38
S'right'
p2380
sg58
g62
sS'trial_loop.thisN'
p2381
I105
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2382
g59
(g98
S'i\x00\x00\x00'
tRp2383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2384
I0
sg903
g1759
sS'block_loop.thisRepN'
p2385
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2386
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p2387
Nsg69
Vy
sS'block_loop.thisTrialN'
p2388
I0
sg39
F0.90020378734334372
sg34
g752
(S'\x07\xdf\n\x14\x1257\x08E0'
tRp2389
sa(dp2390
S'trial_loop.thisTrialN'
p2391
I106
sg894
g1899
sS'block_loop.thisIndex'
p2392
g888
sg38
S'right'
p2393
sg58
g62
sS'trial_loop.thisN'
p2394
I106
sg33
g1087
sg63
g64
sS'trial_loop.thisIndex'
p2395
g59
(g98
S'j\x00\x00\x00'
tRp2396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2397
I0
sg903
g1906
sS'block_loop.thisRepN'
p2398
I0
sg906
g1087
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2399
I0
sg909
g1094
sg55
g11
sS'block_loop.thisTrial'
p2400
Nsg69
Vy
sS'block_loop.thisTrialN'
p2401
I0
sg39
F0.63344222138402984
sg34
g752
(S'\x07\xdf\n\x14\x126\x01\x07jp'
tRp2402
sa(dp2403
S'trial_loop.thisTrialN'
p2404
I107
sg894
g1066
sS'block_loop.thisIndex'
p2405
g888
sg38
S'right'
p2406
sg58
g62
sS'trial_loop.thisN'
p2407
I107
sg33
g1077
sg63
g64
sS'trial_loop.thisIndex'
p2408
g59
(g98
S'k\x00\x00\x00'
tRp2409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2410
I0
sg903
g1074
sS'block_loop.thisRepN'
p2411
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2412
I0
sg909
g1077
sg55
g11
sS'block_loop.thisTrial'
p2413
Nsg69
Vy
sS'block_loop.thisTrialN'
p2414
I0
sg39
F0.93343669050227618
sg34
g752
(S'\x07\xdf\n\x14\x126\x07\x02B '
tRp2415
sa(dp2416
S'trial_loop.thisTrialN'
p2417
I108
sg894
g932
sS'block_loop.thisIndex'
p2418
g888
sg38
S'right'
p2419
sg58
g62
sS'trial_loop.thisN'
p2420
I108
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2421
g59
(g98
S'l\x00\x00\x00'
tRp2422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2423
I0
sg903
g940
sS'block_loop.thisRepN'
p2424
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2425
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2426
Nsg69
Vy
sS'block_loop.thisTrialN'
p2427
I0
sg39
F0.75019115754548693
sg34
g752
(S'\x07\xdf\n\x14\x126\r\x01\xa5\xe0'
tRp2428
sa(dp2429
S'trial_loop.thisTrialN'
p2430
I109
sg894
g1398
sS'block_loop.thisIndex'
p2431
g888
sg38
S'right'
p2432
sg58
g62
sS'trial_loop.thisN'
p2433
I109
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2434
g59
(g98
S'm\x00\x00\x00'
tRp2435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2436
I0
sg903
g1405
sS'block_loop.thisRepN'
p2437
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2438
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p2439
Nsg69
Vy
sS'block_loop.thisTrialN'
p2440
I0
sg39
F4.2834631189980428
sg34
g752
(S'\x07\xdf\n\x14\x126\x12\r\xa8\x18'
tRp2441
sa(dp2442
S'trial_loop.thisTrialN'
p2443
I110
sg894
g1051
sS'block_loop.thisIndex'
p2444
g888
sg38
S'right'
p2445
sg58
g62
sS'trial_loop.thisN'
p2446
I110
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2447
g59
(g98
S'n\x00\x00\x00'
tRp2448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2449
I0
sg903
g1058
sS'block_loop.thisRepN'
p2450
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2451
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p2452
Nsg69
Vy
sS'block_loop.thisTrialN'
p2453
I0
sg39
F1.0500958211050602
sg34
g752
(S'\x07\xdf\n\x14\x126\x1c\x030h'
tRp2454
sa(dp2455
S'trial_loop.thisTrialN'
p2456
I111
sg894
g1175
sS'block_loop.thisIndex'
p2457
g888
sg38
S'left'
p2458
sg58
g62
sS'trial_loop.thisN'
p2459
I111
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2460
g59
(g98
S'o\x00\x00\x00'
tRp2461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2462
I0
sg903
g1182
sS'block_loop.thisRepN'
p2463
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2464
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p2465
Nsg69
Vy
sS'block_loop.thisTrialN'
p2466
I0
sg39
F1.5001530970912427
sg34
g752
(S'\x07\xdf\n\x14\x126"\x04x\x88'
tRp2467
sa(dp2468
S'trial_loop.thisTrialN'
p2469
I112
sg894
S'22-daim.png'
p2470
sS'block_loop.thisIndex'
p2471
g888
sg38
S'right'
p2472
sg58
g62
sS'trial_loop.thisN'
p2473
I112
sg33
g1739
sg63
g64
sS'trial_loop.thisIndex'
p2474
g59
(g98
S'p\x00\x00\x00'
tRp2475
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2476
I0
sg903
S'7-olives.png'
p2477
sS'block_loop.thisRepN'
p2478
I0
sg906
g1739
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2479
I0
sg909
g1746
sg55
g11
sS'block_loop.thisTrial'
p2480
Nsg69
Vy
sS'block_loop.thisTrialN'
p2481
I0
sg39
F1.6334949643314758
sg34
g752
(S'\x07\xdf\n\x14\x126(\x0c\xa6H'
tRp2482
sa(dp2483
S'trial_loop.thisTrialN'
p2484
I113
sg894
g895
sS'block_loop.thisIndex'
p2485
g888
sg38
S'right'
p2486
sg58
g62
sS'trial_loop.thisN'
p2487
I113
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p2488
g59
(g98
S'q\x00\x00\x00'
tRp2489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2490
I0
sg903
g904
sS'block_loop.thisRepN'
p2491
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2492
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p2493
Nsg69
Vy
sS'block_loop.thisTrialN'
p2494
I0
sg39
F0.73349188528300147
sg34
g752
(S'\x07\xdf\n\x14\x126/\x07z\x10'
tRp2495
sa(dp2496
S'trial_loop.thisTrialN'
p2497
I114
sg894
g1017
sS'block_loop.thisIndex'
p2498
g888
sg38
S'left'
p2499
sg58
g62
sS'trial_loop.thisN'
p2500
I114
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p2501
g59
(g98
S'r\x00\x00\x00'
tRp2502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2503
I0
sg903
g1025
sS'block_loop.thisRepN'
p2504
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2505
I0
sg909
g1028
sg55
g11
sS'block_loop.thisTrial'
p2506
Nsg69
Vy
sS'block_loop.thisTrialN'
p2507
I0
sg39
F0.91703762539327727
sg34
g752
(S'\x07\xdf\n\x14\x1265\x03\xffp'
tRp2508
sa(dp2509
S'trial_loop.thisTrialN'
p2510
I115
sg894
g2470
sS'block_loop.thisIndex'
p2511
g888
sg38
S'right'
p2512
sg58
g62
sS'trial_loop.thisN'
p2513
I115
sg33
g1739
sg63
g64
sS'trial_loop.thisIndex'
p2514
g59
(g98
S's\x00\x00\x00'
tRp2515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2516
I0
sg903
g2477
sS'block_loop.thisRepN'
p2517
I0
sg906
g1739
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2518
I0
sg909
g1746
sg55
g11
sS'block_loop.thisTrial'
p2519
Nsg69
Vy
sS'block_loop.thisTrialN'
p2520
I0
sg39
F1.0001781856299203
sg34
g752
(S'\x07\xdf\n\x14\x126;\x03$\xb0'
tRp2521
sa(dp2522
S'trial_loop.thisTrialN'
p2523
I116
sg894
g1265
sS'block_loop.thisIndex'
p2524
g888
sg38
S'left'
p2525
sg58
g62
sS'trial_loop.thisN'
p2526
I116
sg33
g1077
sg63
g64
sS'trial_loop.thisIndex'
p2527
g59
(g98
S't\x00\x00\x00'
tRp2528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2529
I0
sg903
g1272
sS'block_loop.thisRepN'
p2530
I0
sg906
g1070
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2531
I0
sg909
g1077
sg55
g11
sS'block_loop.thisTrial'
p2532
Nsg69
Vy
sS'block_loop.thisTrialN'
p2533
I0
sg39
F0.86686055163954734
sg34
g752
(S'\x07\xdf\n\x14\x127\x05\x03\xb58'
tRp2534
sa(dp2535
S'trial_loop.thisTrialN'
p2536
I117
sg894
g1413
sS'block_loop.thisIndex'
p2537
g888
sg38
S'left'
p2538
sg58
g62
sS'trial_loop.thisN'
p2539
I117
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p2540
g59
(g98
S'u\x00\x00\x00'
tRp2541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2542
I0
sg903
g1421
sS'block_loop.thisRepN'
p2543
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2544
I0
sg909
g1424
sg55
g11
sS'block_loop.thisTrial'
p2545
Nsg69
Vy
sS'block_loop.thisTrialN'
p2546
I0
sg39
F1.3333767631120281
sg34
g752
(S'\x07\xdf\n\x14\x127\x0b\x02"\xe0'
tRp2547
sa(dp2548
S'trial_loop.thisTrialN'
p2549
I118
sg894
g2087
sS'block_loop.thisIndex'
p2550
g888
sg38
S'left'
p2551
sg58
g62
sS'trial_loop.thisN'
p2552
I118
sg33
g1104
sg63
g64
sS'trial_loop.thisIndex'
p2553
g59
(g98
S'v\x00\x00\x00'
tRp2554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2555
I0
sg903
g2094
sS'block_loop.thisRepN'
p2556
I0
sg906
g1104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2557
I0
sg909
g1111
sg55
g11
sS'block_loop.thisTrial'
p2558
Nsg69
Vy
sS'block_loop.thisTrialN'
p2559
I0
sg39
F1.0002135376598744
sg34
g752
(S'\x07\xdf\n\x14\x127\x11\x07\xb4\xa8'
tRp2560
sa(dp2561
S'trial_loop.thisTrialN'
p2562
I119
sg894
g1250
sS'block_loop.thisIndex'
p2563
g888
sg38
S'right'
p2564
sg58
g62
sS'trial_loop.thisN'
p2565
I119
sg33
g1045
sg63
g64
sS'trial_loop.thisIndex'
p2566
g59
(g98
S'w\x00\x00\x00'
tRp2567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2568
I0
sg903
g1257
sS'block_loop.thisRepN'
p2569
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2570
I0
sg909
g1045
sg55
g11
sS'block_loop.thisTrial'
p2571
Nsg69
Vy
sS'block_loop.thisTrialN'
p2572
I0
sg39
F1.3001874797955679
sg34
g752
(S'\x07\xdf\n\x14\x127\x17\x08E0'
tRp2573
sa(dp2574
S'trial_loop.thisTrialN'
p2575
I120
sg894
g1100
sS'block_loop.thisIndex'
p2576
g888
sg38
S'right'
p2577
sg58
g62
sS'trial_loop.thisN'
p2578
I120
sg33
g1104
sg63
g64
sS'trial_loop.thisIndex'
p2579
g59
(g98
S'x\x00\x00\x00'
tRp2580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2581
I0
sg903
g1108
sS'block_loop.thisRepN'
p2582
I0
sg906
g1104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2583
I0
sg909
g1111
sg55
g11
sS'block_loop.thisTrial'
p2584
Nsg69
Vy
sS'block_loop.thisTrialN'
p2585
I0
sg39
F0.90011882843464264
sg34
g752
(S'\x07\xdf\n\x14\x127\x1d\rY\xf8'
tRp2586
sa(dp2587
S'trial_loop.thisTrialN'
p2588
I121
sg894
g949
sS'block_loop.thisIndex'
p2589
g888
sg38
S'right'
p2590
sg58
g62
sS'trial_loop.thisN'
p2591
I121
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2592
g59
(g98
S'y\x00\x00\x00'
tRp2593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2594
I0
sg903
g957
sS'block_loop.thisRepN'
p2595
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2596
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p2597
Nsg69
Vy
sS'block_loop.thisTrialN'
p2598
I0
sg39
F2.0668344367550162
sg34
g752
(S'\x07\xdf\n\x14\x127#\x0c@\xb8'
tRp2599
sa(dp2600
S'trial_loop.thisTrialN'
p2601
I122
sg894
g1017
sS'block_loop.thisIndex'
p2602
g888
sg38
S'left'
p2603
sg58
g62
sS'trial_loop.thisN'
p2604
I122
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p2605
g59
(g98
S'z\x00\x00\x00'
tRp2606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2607
I0
sg903
g1025
sS'block_loop.thisRepN'
p2608
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2609
I0
sg909
g1028
sg55
g11
sS'block_loop.thisTrial'
p2610
Nsg69
Vy
sS'block_loop.thisTrialN'
p2611
I0
sg39
F0.93342043997472501
sg34
g752
(S'\x07\xdf\n\x14\x127*\r\xfe\x08'
tRp2612
sa(dp2613
S'trial_loop.thisTrialN'
p2614
I123
sg894
S'38-maltesers.png'
p2615
sS'block_loop.thisIndex'
p2616
g888
sg38
S'right'
p2617
sg58
g62
sS'trial_loop.thisN'
p2618
I123
sg33
g2067
sg63
g64
sS'trial_loop.thisIndex'
p2619
g59
(g98
S'{\x00\x00\x00'
tRp2620
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2621
I0
sg903
S'6-sour_patch_kids.png'
p2622
sS'block_loop.thisRepN'
p2623
I0
sg906
g2067
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2624
I0
sg909
g2061
sg55
g11
sS'block_loop.thisTrial'
p2625
Nsg69
Vy
sS'block_loop.thisTrialN'
p2626
I0
sg39
F1.2498561685570166
sg34
g752
(S'\x07\xdf\n\x14\x1270\r]\xe0'
tRp2627
sa(dp2628
S'trial_loop.thisTrialN'
p2629
I124
sg894
g2193
sS'block_loop.thisIndex'
p2630
g888
sg38
S'right'
p2631
sg58
g62
sS'trial_loop.thisN'
p2632
I124
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p2633
g59
(g98
S'|\x00\x00\x00'
tRp2634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2635
I0
sg903
g2200
sS'block_loop.thisRepN'
p2636
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2637
I0
sg909
g1291
sg55
g11
sS'block_loop.thisTrial'
p2638
Nsg69
Vy
sS'block_loop.thisTrialN'
p2639
I0
sg39
F1.0839385467697866
sg34
g752
(S'\x07\xdf\n\x14\x1277\x02|\xb8'
tRp2640
sa(dp2641
S'trial_loop.thisTrialN'
p2642
I125
sg894
g2325
sS'block_loop.thisIndex'
p2643
g888
sg38
S'right'
p2644
sg58
g62
sS'trial_loop.thisN'
p2645
I125
sg33
g1301
sg63
g64
sS'trial_loop.thisIndex'
p2646
g59
(g98
S'}\x00\x00\x00'
tRp2647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2648
I0
sg903
g2332
sS'block_loop.thisRepN'
p2649
I0
sg906
g1301
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2650
I0
sg909
g1308
sg55
g11
sS'block_loop.thisTrial'
p2651
Nsg69
Vy
sS'block_loop.thisTrialN'
p2652
I0
sg39
F0.98353365199727705
sg34
g752
(S'\x07\xdf\n\x14\x128\x01\x04=\xf0'
tRp2653
sa(dp2654
S'trial_loop.thisTrialN'
p2655
I126
sg894
g1858
sS'block_loop.thisIndex'
p2656
g888
sg38
S'right'
p2657
sg58
g62
sS'trial_loop.thisN'
p2658
I126
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2659
g59
(g98
S'~\x00\x00\x00'
tRp2660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2661
I0
sg903
g1865
sS'block_loop.thisRepN'
p2662
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2663
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p2664
Nsg69
Vy
sS'block_loop.thisTrialN'
p2665
I0
sg39
F1.0501736525911838
sg34
g752
(S'\x07\xdf\n\x14\x128\x07\x04\x93\xe0'
tRp2666
sa(dp2667
S'trial_loop.thisTrialN'
p2668
I127
sg894
g1000
sS'block_loop.thisIndex'
p2669
g888
sg38
S'left'
p2670
sg58
g62
sS'trial_loop.thisN'
p2671
I127
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2672
g59
(g98
S'\x7f\x00\x00\x00'
tRp2673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2674
I0
sg903
g1008
sS'block_loop.thisRepN'
p2675
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2676
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p2677
Nsg69
Vy
sS'block_loop.thisTrialN'
p2678
I0
sg39
F1.1501987981428101
sg34
g752
(S'\x07\xdf\n\x14\x128\r\x05\xdc\x00'
tRp2679
sa(dp2680
S'trial_loop.thisTrialN'
p2681
I128
sg894
g932
sS'block_loop.thisIndex'
p2682
g888
sg38
S'right'
p2683
sg58
g62
sS'trial_loop.thisN'
p2684
I128
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2685
g59
(g98
S'\x80\x00\x00\x00'
tRp2686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2687
I0
sg903
g940
sS'block_loop.thisRepN'
p2688
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2689
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2690
Nsg69
Vy
sS'block_loop.thisTrialN'
p2691
I0
sg39
F0.88341699029842857
sg34
g752
(S'\x07\xdf\n\x14\x128\x13\x08\x93P'
tRp2692
sa(dp2693
S'trial_loop.thisTrialN'
p2694
I129
sg894
g2193
sS'block_loop.thisIndex'
p2695
g888
sg38
S'right'
p2696
sg58
g62
sS'trial_loop.thisN'
p2697
I129
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p2698
g59
(g98
S'\x81\x00\x00\x00'
tRp2699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2700
I0
sg903
g2200
sS'block_loop.thisRepN'
p2701
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2702
I0
sg909
g1291
sg55
g11
sS'block_loop.thisTrial'
p2703
Nsg69
Vy
sS'block_loop.thisTrialN'
p2704
I0
sg39
F0.80015241285946104
sg34
g752
(S'\x07\xdf\n\x14\x128\x19\x07;\x90'
tRp2705
sa(dp2706
S'trial_loop.thisTrialN'
p2707
I130
sg894
g1220
sS'block_loop.thisIndex'
p2708
g888
sg38
S'right'
p2709
sg58
g62
sS'trial_loop.thisN'
p2710
I130
sg33
g1230
sg63
g64
sS'trial_loop.thisIndex'
p2711
g59
(g98
S'\x82\x00\x00\x00'
tRp2712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2713
I0
sg903
g1228
sS'block_loop.thisRepN'
p2714
I0
sg906
g1230
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2715
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p2716
Nsg69
Vy
sS'block_loop.thisTrialN'
p2717
I0
sg39
F3.8499143853696296
sg34
g752
(S'\x07\xdf\n\x14\x128\x1f\x04\xb3 '
tRp2718
sa(dp2719
S'trial_loop.thisTrialN'
p2720
I131
sg894
g1564
sS'block_loop.thisIndex'
p2721
g888
sg38
S'left'
p2722
sg58
g62
sS'trial_loop.thisN'
p2723
I131
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2724
g59
(g98
S'\x83\x00\x00\x00'
tRp2725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2726
I0
sg903
g1571
sS'block_loop.thisRepN'
p2727
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2728
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2729
Nsg69
Vy
sS'block_loop.thisTrialN'
p2730
I0
sg39
F0.63353202694270294
sg34
g752
(S'\x07\xdf\n\x14\x128(\x03\r@'
tRp2731
sa(dp2732
S'trial_loop.thisTrialN'
p2733
I132
sg894
g1471
sS'block_loop.thisIndex'
p2734
g888
sg38
S'left'
p2735
sg58
g62
sS'trial_loop.thisN'
p2736
I132
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p2737
g59
(g98
S'\x84\x00\x00\x00'
tRp2738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2739
I0
sg903
g1478
sS'block_loop.thisRepN'
p2740
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2741
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p2742
Nsg69
Vy
sS'block_loop.thisTrialN'
p2743
I0
sg39
F1.0335151491999568
sg34
g752
(S'\x07\xdf\n\x14\x128-\r+\x18'
tRp2744
sa(dp2745
S'trial_loop.thisTrialN'
p2746
I133
sg894
g915
sS'block_loop.thisIndex'
p2747
g888
sg38
S'right'
p2748
sg58
g62
sS'trial_loop.thisN'
p2749
I133
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2750
g59
(g98
S'\x85\x00\x00\x00'
tRp2751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2752
I0
sg903
g923
sS'block_loop.thisRepN'
p2753
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2754
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p2755
Nsg69
Vy
sS'block_loop.thisTrialN'
p2756
I0
sg39
F1.6000773183077399
sg34
g752
(S'\x07\xdf\n\x14\x1283\x0e8\xa0'
tRp2757
sa(dp2758
S'trial_loop.thisTrialN'
p2759
I134
sg894
g1899
sS'block_loop.thisIndex'
p2760
g888
sg38
S'right'
p2761
sg58
g62
sS'trial_loop.thisN'
p2762
I134
sg33
g1087
sg63
g64
sS'trial_loop.thisIndex'
p2763
g59
(g98
S'\x86\x00\x00\x00'
tRp2764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2765
I0
sg903
g1906
sS'block_loop.thisRepN'
p2766
I0
sg906
g1087
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2767
I0
sg909
g1094
sg55
g11
sS'block_loop.thisTrial'
p2768
Nsg69
Vy
sS'block_loop.thisTrialN'
p2769
I0
sg39
F1.1671746145075304
sg34
g752
(S'\x07\xdf\n\x14\x128:\x08\x93P'
tRp2770
sa(dp2771
S'trial_loop.thisTrialN'
p2772
I135
sg894
g2325
sS'block_loop.thisIndex'
p2773
g888
sg38
S'right'
p2774
sg58
g62
sS'trial_loop.thisN'
p2775
I135
sg33
g1308
sg63
g64
sS'trial_loop.thisIndex'
p2776
g59
(g98
S'\x87\x00\x00\x00'
tRp2777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2778
I0
sg903
g2332
sS'block_loop.thisRepN'
p2779
I0
sg906
g1301
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2780
I0
sg909
g1308
sg55
g11
sS'block_loop.thisTrial'
p2781
Nsg69
Vy
sS'block_loop.thisTrialN'
p2782
I0
sg39
F0.88351135740958853
sg34
g752
(S'\x07\xdf\n\x14\x129\x04\x0b\x858'
tRp2783
sa(dp2784
S'trial_loop.thisTrialN'
p2785
I136
sg894
g1443
sS'block_loop.thisIndex'
p2786
g888
sg38
S'right'
p2787
sg58
g62
sS'trial_loop.thisN'
p2788
I136
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p2789
g59
(g98
S'\x88\x00\x00\x00'
tRp2790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2791
I0
sg903
g1450
sS'block_loop.thisRepN'
p2792
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2793
I0
sg909
g1424
sg55
g11
sS'block_loop.thisTrial'
p2794
Nsg69
Vy
sS'block_loop.thisTrialN'
p2795
I0
sg39
F1.0834293635089125
sg34
g752
(S'\x07\xdf\n\x14\x129\n\nk\xf8'
tRp2796
sa(dp2797
S'trial_loop.thisTrialN'
p2798
I137
sg894
g2325
sS'block_loop.thisIndex'
p2799
g888
sg38
S'right'
p2800
sg58
g62
sS'trial_loop.thisN'
p2801
I137
sg33
g1301
sg63
g64
sS'trial_loop.thisIndex'
p2802
g59
(g98
S'\x89\x00\x00\x00'
tRp2803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2804
I0
sg903
g2332
sS'block_loop.thisRepN'
p2805
I0
sg906
g1301
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2806
I0
sg909
g1308
sg55
g11
sS'block_loop.thisTrial'
p2807
Nsg69
Vy
sS'block_loop.thisTrialN'
p2808
I0
sg39
F0.61676262081891764
sg34
g752
(S'\x07\xdf\n\x14\x129\x10\x0c-0'
tRp2809
sa(dp2810
S'trial_loop.thisTrialN'
p2811
I138
sg894
g2470
sS'block_loop.thisIndex'
p2812
g888
sg38
S'left'
p2813
sg58
g62
sS'trial_loop.thisN'
p2814
I138
sg33
g1739
sg63
g64
sS'trial_loop.thisIndex'
p2815
g59
(g98
S'\x8a\x00\x00\x00'
tRp2816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2817
I0
sg903
g2477
sS'block_loop.thisRepN'
p2818
I0
sg906
g1739
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2819
I0
sg909
g1746
sg55
g11
sS'block_loop.thisTrial'
p2820
Nsg69
Vy
sS'block_loop.thisTrialN'
p2821
I0
sg39
F1.8168351494969102
sg34
g752
(S'\x07\xdf\n\x14\x129\x16\x06\xcaH'
tRp2822
sa(dp2823
S'trial_loop.thisTrialN'
p2824
I139
sg894
g1383
sS'block_loop.thisIndex'
p2825
g888
sg38
S'left'
p2826
sg58
g62
sS'trial_loop.thisN'
p2827
I139
sg33
g1214
sg63
g64
sS'trial_loop.thisIndex'
p2828
g59
(g98
S'\x8b\x00\x00\x00'
tRp2829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2830
I0
sg903
g1390
sS'block_loop.thisRepN'
p2831
I0
sg906
g1207
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2832
I0
sg909
g1214
sg55
g11
sS'block_loop.thisTrial'
p2833
Nsg69
Vy
sS'block_loop.thisTrialN'
p2834
I0
sg39
F1.050572503303556
sg34
g752
(S'\x07\xdf\n\x14\x129\x1d\x04|p'
tRp2835
sa(dp2836
S'trial_loop.thisTrialN'
p2837
I140
sg894
g1858
sS'block_loop.thisIndex'
p2838
g888
sg38
S'right'
p2839
sg58
g62
sS'trial_loop.thisN'
p2840
I140
sg33
g994
sg63
g64
sS'trial_loop.thisIndex'
p2841
g59
(g98
S'\x8c\x00\x00\x00'
tRp2842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2843
I0
sg903
g1865
sS'block_loop.thisRepN'
p2844
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2845
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p2846
Nsg69
Vy
sS'block_loop.thisTrialN'
p2847
I0
sg39
F0.81688361598935444
sg34
g752
(S'\x07\xdf\n\x14\x129#\x05\xc4\x90'
tRp2848
sa(dp2849
S'trial_loop.thisTrialN'
p2850
I141
sg894
g966
sS'block_loop.thisIndex'
p2851
g888
sg38
S'left'
p2852
sg58
g62
sS'trial_loop.thisN'
p2853
I141
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2854
g59
(g98
S'\x8d\x00\x00\x00'
tRp2855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2856
I0
sg903
g974
sS'block_loop.thisRepN'
p2857
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2858
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p2859
Nsg69
Vy
sS'block_loop.thisTrialN'
p2860
I0
sg39
F1.3000971040419245
sg34
g752
(S'\x07\xdf\n\x14\x129)\x03z\xa0'
tRp2861
sa(dp2862
S'trial_loop.thisTrialN'
p2863
I142
sg894
g1132
sS'block_loop.thisIndex'
p2864
g888
sg38
S'left'
p2865
sg58
g62
sS'trial_loop.thisN'
p2866
I142
sg33
g1136
sg63
g64
sS'trial_loop.thisIndex'
p2867
g59
(g98
S'\x8e\x00\x00\x00'
tRp2868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2869
I0
sg903
g1140
sS'block_loop.thisRepN'
p2870
I0
sg906
g1136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2871
I0
sg909
g1143
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vy
sS'block_loop.thisTrialN'
p2873
I0
sg39
F1.5168332678586012
sg34
g752
(S'\x07\xdf\n\x14\x129/\x08\x8fh'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g1314
sS'block_loop.thisIndex'
p2877
g888
sg38
S'left'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g1230
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g1321
sS'block_loop.thisRepN'
p2883
I0
sg906
g1230
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2884
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vy
sS'block_loop.thisTrialN'
p2886
I0
sg39
F1.5000125442675198
sg34
g752
(S'\x07\xdf\n\x14\x1296\x01\xb9h'
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g2193
sS'block_loop.thisIndex'
p2890
g888
sg38
S'right'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g2200
sS'block_loop.thisRepN'
p2896
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2897
I0
sg909
g1291
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vy
sS'block_loop.thisTrialN'
p2899
I0
sg39
F1.0838732595548208
sg34
g752
(S'\x07\xdf\n\x14\x12:\x00\t\xeb\x10'
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g949
sS'block_loop.thisIndex'
p2903
g888
sg38
S'right'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g957
sS'block_loop.thisRepN'
p2909
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2910
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vy
sS'block_loop.thisTrialN'
p2912
I0
sg39
F1.7834961902481155
sg34
g752
(S'\x07\xdf\n\x14\x12:\x06\x0b\xacH'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g2615
sS'block_loop.thisIndex'
p2916
g888
sg38
S'right'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g2067
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g2622
sS'block_loop.thisRepN'
p2922
I0
sg906
g2067
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2923
I0
sg909
g2061
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vy
sS'block_loop.thisTrialN'
p2925
I0
sg39
F1.0167283521550416
sg34
g752
(S'\x07\xdf\n\x14\x12:\r\x08\xe1p'
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g1735
sS'block_loop.thisIndex'
p2929
g888
sg38
S'right'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g1739
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g1743
sS'block_loop.thisRepN'
p2935
I0
sg906
g1739
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2936
I0
sg909
g1746
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vy
sS'block_loop.thisTrialN'
p2938
I0
sg39
F1.6167329707277531
sg34
g752
(S'\x07\xdf\n\x14\x12:\x13\tq\xf8'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g1314
sS'block_loop.thisIndex'
p2942
g888
sg38
S'left'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g1230
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g1321
sS'block_loop.thisRepN'
p2948
I0
sg906
g1230
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2949
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vy
sS'block_loop.thisTrialN'
p2951
I0
sg39
F0.96674001262363163
sg34
g752
(S'\x07\xdf\n\x14\x12:\x1a\x04I\xa8'
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g2615
sS'block_loop.thisIndex'
p2955
g888
sg38
S'right'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g2061
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g2622
sS'block_loop.thisRepN'
p2961
I0
sg906
g2067
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2962
I0
sg909
g2061
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vy
sS'block_loop.thisTrialN'
p2964
I0
sg39
F1.3002727237981162
sg34
g752
(S'\x07\xdf\n\x14\x12: \x04"\x98'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g1034
sS'block_loop.thisIndex'
p2968
g888
sg38
S'left'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g1042
sS'block_loop.thisRepN'
p2974
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2975
I0
sg909
g1045
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vy
sS'block_loop.thisTrialN'
p2977
I0
sg39
F1.4000971610585111
sg34
g752
(S'\x07\xdf\n\x14\x12:&\t;H'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g2057
sS'block_loop.thisIndex'
p2981
g888
sg38
S'left'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g2067
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g2065
sS'block_loop.thisRepN'
p2987
I0
sg906
g2067
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2988
I0
sg909
g2061
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vy
sS'block_loop.thisTrialN'
p2990
I0
sg39
F1.5332055338476493
sg34
g752
(S'\x07\xdf\n\x14\x12:-\x00\xb7\x98'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g915
sS'block_loop.thisIndex'
p2994
g888
sg38
S'right'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g923
sS'block_loop.thisRepN'
p3000
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3001
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vy
sS'block_loop.thisTrialN'
p3003
I0
sg39
F1.1168547071501962
sg34
g752
(S'\x07\xdf\n\x14\x12:3\tbX'
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g1132
sS'block_loop.thisIndex'
p3007
g888
sg38
S'left'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g1136
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g1140
sS'block_loop.thisRepN'
p3013
I0
sg906
g1136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3014
I0
sg909
g1143
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vy
sS'block_loop.thisTrialN'
p3016
I0
sg39
F0.95021008798721596
sg34
g752
(S'\x07\xdf\n\x14\x12:9\x0b\x9c\xa8'
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g1017
sS'block_loop.thisIndex'
p3020
g888
sg38
S'left'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g1025
sS'block_loop.thisRepN'
p3026
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3027
I0
sg909
g1028
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vy
sS'block_loop.thisTrialN'
p3029
I0
sg39
F0.90034576565449242
sg34
g752
(S'\x07\xdf\n\x14\x12;\x03\x0b;\x00'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g1342
sS'block_loop.thisIndex'
p3033
g888
sg38
S'right'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g1136
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g1349
sS'block_loop.thisRepN'
p3039
I0
sg906
g1136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3040
I0
sg909
g1143
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vy
sS'block_loop.thisTrialN'
p3042
I0
sg39
F1.1500907463778276
sg34
g752
(S'\x07\xdf\n\x14\x12;\t\n`@'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g1083
sS'block_loop.thisIndex'
p3046
g888
sg38
S'left'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g1087
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g1091
sS'block_loop.thisRepN'
p3052
I0
sg906
g1087
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3053
I0
sg909
g1094
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vy
sS'block_loop.thisTrialN'
p3055
I0
sg39
F0.63355084334398271
sg34
g752
(S'\x07\xdf\n\x14\x12;\x0f\r\x13\xa8'
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g2087
sS'block_loop.thisIndex'
p3059
g888
sg38
S'left'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1104
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g2094
sS'block_loop.thisRepN'
p3065
I0
sg906
g1104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3066
I0
sg909
g1111
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vy
sS'block_loop.thisTrialN'
p3068
I0
sg39
F0.85020489922317211
sg34
g752
(S'\x07\xdf\n\x14\x12;\x15\x07\xef@'
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1735
sS'block_loop.thisIndex'
p3072
g888
sg38
S'left'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g1739
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1743
sS'block_loop.thisRepN'
p3078
I0
sg906
g1739
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3079
I0
sg909
g1746
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vy
sS'block_loop.thisTrialN'
p3081
I0
sg39
F0.78352954659931129
sg34
g752
(S'\x07\xdf\n\x14\x12;\x1b\x06\x1eh'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g1383
sS'block_loop.thisIndex'
p3085
g888
sg38
S'left'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g1207
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g1390
sS'block_loop.thisRepN'
p3091
I0
sg906
g1207
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3092
I0
sg909
g1214
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vy
sS'block_loop.thisTrialN'
p3094
I0
sg39
F1.0001556629686092
sg34
g752
(S'\x07\xdf\n\x14\x12;!\x03[`'
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g983
sS'block_loop.thisIndex'
p3098
g888
sg38
S'left'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g991
sS'block_loop.thisRepN'
p3104
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3105
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vy
sS'block_loop.thisTrialN'
p3107
I0
sg39
F0.78389618135406636
sg34
g752
(S"\x07\xdf\n\x14\x12;'\x03\xeb\xe8"
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g1000
sS'block_loop.thisIndex'
p3111
g888
sg38
S'right'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g1008
sS'block_loop.thisRepN'
p3117
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3118
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vy
sS'block_loop.thisTrialN'
p3120
I0
sg39
F1.2167658139042032
sg34
g752
(S'\x07\xdf\n\x14\x12;-\x01(\xe0'
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g1203
sS'block_loop.thisIndex'
p3124
g888
sg38
S'right'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g1207
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g1211
sS'block_loop.thisRepN'
p3130
I0
sg906
g1207
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3131
I0
sg909
g1214
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vy
sS'block_loop.thisTrialN'
p3133
I0
sg39
F1.2168487771341461
sg34
g752
(S'\x07\xdf\n\x14\x12;3\x05\x10\xe0'
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g1735
sS'block_loop.thisIndex'
p3137
g888
sg38
S'right'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g1739
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g1743
sS'block_loop.thisRepN'
p3143
I0
sg906
g1739
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3144
I0
sg909
g1746
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vy
sS'block_loop.thisTrialN'
p3146
I0
sg39
F1.1167486510639719
sg34
g752
(S'\x07\xdf\n\x14\x12;9\x08\xba`'
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g1752
sS'block_loop.thisIndex'
p3150
g888
sg38
S'left'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g1759
sS'block_loop.thisRepN'
p3156
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3157
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vy
sS'block_loop.thisTrialN'
p3159
I0
sg39
F1.2168100039416458
sg34
g752
(S'\x07\xdf\n\x14\x13\x00\x03\n\xf4\xb0'
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g1899
sS'block_loop.thisIndex'
p3163
g888
sg38
S'right'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g1087
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g1906
sS'block_loop.thisRepN'
p3169
I0
sg906
g1087
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3170
I0
sg909
g1094
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vy
sS'block_loop.thisTrialN'
p3172
I0
sg39
F1.150549182370014
sg34
g752
(S'\x07\xdf\n\x14\x13\x00\t\x0e\xdc\xb0'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g1564
sS'block_loop.thisIndex'
p3176
g888
sg38
S'left'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g1571
sS'block_loop.thisRepN'
p3182
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3183
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vy
sS'block_loop.thisTrialN'
p3185
I0
sg39
F0.9501730253759888
sg34
g752
(S'\x07\xdf\n\x14\x13\x00\x10\x02Q\xc0'
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g915
sS'block_loop.thisIndex'
p3189
g888
sg38
S'right'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g923
sS'block_loop.thisRepN'
p3195
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3196
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vy
sS'block_loop.thisTrialN'
p3198
I0
sg39
F1.016864913621248
sg34
g752
(S'\x07\xdf\n\x14\x13\x00\x16\x02*\xb0'
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g1117
sS'block_loop.thisIndex'
p3202
g888
sg38
S'right'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g1124
sS'block_loop.thisRepN'
p3208
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3209
I0
sg909
g1028
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vy
sS'block_loop.thisTrialN'
p3211
I0
sg39
F0.83345972633833298
sg34
g752
(S'\x07\xdf\n\x14\x13\x00\x1c\x02\xf9\xb8'
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g1413
sS'block_loop.thisIndex'
p3215
g888
sg38
S'left'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g1421
sS'block_loop.thisRepN'
p3221
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3222
I0
sg909
g1424
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vy
sS'block_loop.thisTrialN'
p3224
I0
sg39
F0.9501182867497846
sg34
g752
(S'\x07\xdf\n\x14\x13\x00"\x00\xea`'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g1051
sS'block_loop.thisIndex'
p3228
g888
sg38
S'left'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g1058
sS'block_loop.thisRepN'
p3234
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3235
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vy
sS'block_loop.thisTrialN'
p3237
I0
sg39
F0.90020777870086022
sg34
g752
(S'\x07\xdf\n\x14\x13\x00(\x00\x88\xb8'
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g1752
sS'block_loop.thisIndex'
p3241
g888
sg38
S'left'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g1759
sS'block_loop.thisRepN'
p3247
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3248
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vy
sS'block_loop.thisTrialN'
p3250
I0
sg39
F1.0338775074997102
sg34
g752
(S'\x07\xdf\n\x14\x13\x00-\x0e\xf08'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g2615
sS'block_loop.thisIndex'
p3254
g888
sg38
S'right'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g2067
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g2622
sS'block_loop.thisRepN'
p3260
I0
sg906
g2067
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3261
I0
sg909
g2061
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vy
sS'block_loop.thisTrialN'
p3263
I0
sg39
F0.98327734978374792
sg34
g752
(S'\x07\xdf\n\x14\x13\x004\x00\xb7\x98'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g1132
sS'block_loop.thisIndex'
p3267
g888
sg38
S'left'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g1136
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g1140
sS'block_loop.thisRepN'
p3273
I0
sg906
g1136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3274
I0
sg909
g1143
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vy
sS'block_loop.thisTrialN'
p3276
I0
sg39
F1.1335240442276699
sg34
g752
(S'\x07\xdf\n\x14\x13\x00:\x00\xcf\x08'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g1398
sS'block_loop.thisIndex'
p3280
g888
sg38
S'left'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g1405
sS'block_loop.thisRepN'
p3286
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3287
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vy
sS'block_loop.thisTrialN'
p3289
I0
sg39
F1.6334755777352257
sg34
g752
(S'\x07\xdf\n\x14\x13\x01\x04\x03\x86X'
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g1034
sS'block_loop.thisIndex'
p3293
g888
sg38
S'left'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g1042
sS'block_loop.thisRepN'
p3299
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3300
I0
sg909
g1045
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vy
sS'block_loop.thisTrialN'
p3302
I0
sg39
F1.4334458136072499
sg34
g752
(S'\x07\xdf\n\x14\x13\x01\n\r\x9c`'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g2470
sS'block_loop.thisIndex'
p3306
g888
sg38
S'left'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g1739
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g2477
sS'block_loop.thisRepN'
p3312
I0
sg906
g1739
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3313
I0
sg909
g1746
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vy
sS'block_loop.thisTrialN'
p3315
I0
sg39
F0.90014562755459337
sg34
g752
(S'\x07\xdf\n\x14\x13\x01\x11\x05W0'
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g1413
sS'block_loop.thisIndex'
p3319
g888
sg38
S'left'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g1421
sS'block_loop.thisRepN'
p3325
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3326
I0
sg909
g1424
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vy
sS'block_loop.thisTrialN'
p3328
I0
sg39
F0.98353849864361109
sg34
g752
(S'\x07\xdf\n\x14\x13\x01\x17\x04|p'
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1280
sS'block_loop.thisIndex'
p3332
g888
sg38
S'left'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1288
sS'block_loop.thisRepN'
p3338
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3339
I0
sg909
g1291
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vy
sS'block_loop.thisTrialN'
p3341
I0
sg39
F0.9168651417021465
sg34
g752
(S'\x07\xdf\n\x14\x13\x01\x1d\x04\x93\xe0'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1297
sS'block_loop.thisIndex'
p3345
g888
sg38
S'left'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g1301
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1305
sS'block_loop.thisRepN'
p3351
I0
sg906
g1301
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3352
I0
sg909
g1308
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vy
sS'block_loop.thisTrialN'
p3354
I0
sg39
F0.80020344522563391
sg34
g752
(S'\x07\xdf\n\x14\x13\x01#\x03\xf3\xb8'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g1220
sS'block_loop.thisIndex'
p3358
g888
sg38
S'right'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1224
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g1228
sS'block_loop.thisRepN'
p3364
I0
sg906
g1230
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3365
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vy
sS'block_loop.thisTrialN'
p3367
I0
sg39
F1.0167477387549297
sg34
g752
(S'\x07\xdf\n\x14\x13\x01)\x01o0'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g2057
sS'block_loop.thisIndex'
p3371
g888
sg38
S'left'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g2067
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g2065
sS'block_loop.thisRepN'
p3377
I0
sg906
g2067
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3378
I0
sg909
g2061
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vy
sS'block_loop.thisTrialN'
p3380
I0
sg39
F1.116588711640361
sg34
g752
(S'\x07\xdf\n\x14\x13\x01/\x02:P'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g966
sS'block_loop.thisIndex'
p3384
g888
sg38
S'right'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g974
sS'block_loop.thisRepN'
p3390
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3391
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vy
sS'block_loop.thisTrialN'
p3393
I0
sg39
F1.0833823225038941
sg34
g752
(S'\x07\xdf\n\x14\x13\x015\x04x\x88'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g2615
sS'block_loop.thisIndex'
p3397
g888
sg38
S'left'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g2067
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g2622
sS'block_loop.thisRepN'
p3403
I0
sg906
g2067
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3404
I0
sg909
g2061
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vy
sS'block_loop.thisTrialN'
p3406
I0
sg39
F1.8331552427334827
sg34
g752
(S'\x07\xdf\n\x14\x13\x01;\x069\xc0'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g983
sS'block_loop.thisIndex'
p3410
g888
sg38
S'left'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g994
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g991
sS'block_loop.thisRepN'
p3416
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3417
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vy
sS'block_loop.thisTrialN'
p3419
I0
sg39
F1.1334647440489789
sg34
g752
(S'\x07\xdf\n\x14\x13\x02\x06\x04&\x80'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g2087
sS'block_loop.thisIndex'
p3423
g888
sg38
S'left'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g1104
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g2094
sS'block_loop.thisRepN'
p3429
I0
sg906
g1104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3430
I0
sg909
g1111
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vy
sS'block_loop.thisTrialN'
p3432
I0
sg39
F0.76688729373927345
sg34
g752
(S'\x07\xdf\n\x14\x13\x02\x0c\x06\x9fP'
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g1280
sS'block_loop.thisIndex'
p3436
g888
sg38
S'left'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g1288
sS'block_loop.thisRepN'
p3442
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3443
I0
sg909
g1291
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vy
sS'block_loop.thisTrialN'
p3445
I0
sg39
F0.9668472090997966
sg34
g752
(S'\x07\xdf\n\x14\x13\x02\x12\x03\x9d\xc8'
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g1250
sS'block_loop.thisIndex'
p3449
g888
sg38
S'right'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g1045
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g1257
sS'block_loop.thisRepN'
p3455
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3456
I0
sg909
g1045
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vy
sS'block_loop.thisTrialN'
p3458
I0
sg39
F1.0501830607900047
sg34
g752
(S'\x07\xdf\n\x14\x13\x02\x18\x03\xb58'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g966
sS'block_loop.thisIndex'
p3462
g888
sg38
S'right'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g974
sS'block_loop.thisRepN'
p3468
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3469
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vy
sS'block_loop.thisTrialN'
p3471
I0
sg39
F0.93352022392718936
sg34
g752
(S'\x07\xdf\n\x14\x13\x02\x1e\x04\xfdX'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g1000
sS'block_loop.thisIndex'
p3475
g888
sg38
S'right'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g1008
sS'block_loop.thisRepN'
p3481
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3482
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vy
sS'block_loop.thisTrialN'
p3484
I0
sg39
F1.4500604120548815
sg34
g752
(S'\x07\xdf\n\x14\x13\x02$\x04a\x18'
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g1443
sS'block_loop.thisIndex'
p3488
g888
sg38
S'right'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g1450
sS'block_loop.thisRepN'
p3494
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3495
I0
sg909
g1424
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vy
sS'block_loop.thisTrialN'
p3497
I0
sg39
F1.0001830322835303
sg34
g752
(S'\x07\xdf\n\x14\x13\x02*\x0b\xd7@'
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g2087
sS'block_loop.thisIndex'
p3501
g888
sg38
S'left'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g1104
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g2094
sS'block_loop.thisRepN'
p3507
I0
sg906
g1104
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3508
I0
sg909
g1111
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vy
sS'block_loop.thisTrialN'
p3510
I0
sg39
F0.68365350678141112
sg34
g752
(S'\x07\xdf\n\x14\x13\x020\x0cg\xc8'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g2325
sS'block_loop.thisIndex'
p3514
g888
sg38
S'right'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g1301
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g2332
sS'block_loop.thisRepN'
p3520
I0
sg906
g1301
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3521
I0
sg909
g1308
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vy
sS'block_loop.thisTrialN'
p3523
I0
sg39
F0.80017208455683431
sg34
g752
(S'\x07\xdf\n\x14\x13\x026\x07\xfa\xf8'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g966
sS'block_loop.thisIndex'
p3527
g888
sg38
S'right'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g974
sS'block_loop.thisRepN'
p3533
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3534
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vy
sS'block_loop.thisTrialN'
p3536
I0
sg39
F0.91675395386846503
sg34
g752
(S'\x07\xdf\n\x14\x13\x03\x00\x05r\x88'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g1858
sS'block_loop.thisIndex'
p3540
g888
sg38
S'right'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g994
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g1865
sS'block_loop.thisRepN'
p3546
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3547
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vy
sS'block_loop.thisTrialN'
p3549
I0
sg39
F0.90004555850100587
sg34
g752
(S'\x07\xdf\n\x14\x13\x03\x06\x04\x97\xc8'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g1471
sS'block_loop.thisIndex'
p3553
g888
sg38
S'left'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g1478
sS'block_loop.thisRepN'
p3559
I0
sg906
g907
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3560
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vy
sS'block_loop.thisTrialN'
p3562
I0
sg39
F1.0335188554599881
sg34
g752
(S'\x07\xdf\n\x14\x13\x03\x0c\x03\xbd\x08'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g2193
sS'block_loop.thisIndex'
p3566
g888
sg38
S'right'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g1291
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g2200
sS'block_loop.thisRepN'
p3572
I0
sg906
g1284
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3573
I0
sg909
g1291
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vy
sS'block_loop.thisTrialN'
p3575
I0
sg39
F0.80020886207057629
sg34
g752
(S'\x07\xdf\n\x14\x13\x03\x12\x04\xc6\xa8'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g2470
sS'block_loop.thisIndex'
p3579
g888
sg38
S'left'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g1739
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g2477
sS'block_loop.thisRepN'
p3585
I0
sg906
g1739
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3586
I0
sg909
g1746
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vy
sS'block_loop.thisTrialN'
p3588
I0
sg39
F1.0504772809035785
sg34
g752
(S'\x07\xdf\n\x14\x13\x03\x18\x02\x03\xa0'
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g1342
sS'block_loop.thisIndex'
p3592
g888
sg38
S'right'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g1136
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g1349
sS'block_loop.thisRepN'
p3598
I0
sg906
g1136
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3599
I0
sg909
g1143
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vy
sS'block_loop.thisTrialN'
p3601
I0
sg39
F0.93356926061096601
sg34
g752
(S'\x07\xdf\n\x14\x13\x03\x1e\x03K\xc0'
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g1899
sS'block_loop.thisIndex'
p3605
g888
sg38
S'right'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g1094
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g1906
sS'block_loop.thisRepN'
p3611
I0
sg906
g1087
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3612
I0
sg909
g1094
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vy
sS'block_loop.thisTrialN'
p3614
I0
sg39
F0.85017296835576417
sg34
g752
(S'\x07\xdf\n\x14\x13\x03$\x02\xea\x18'
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F18.350076890663331
sg56
Vr
sS'block_loop.thisIndex'
p3618
g888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vy
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vr
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vy
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'10-bounty_redo.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'left'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'10-bounty_redo.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'4-corn.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3645
I1
sS'img_wrong'
p3646
S'4-corn.png'
p3647
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vy
sS'block_loop.thisTrialN'
p3649
I0
sg39
F0.90009259950966225
sg34
g752
(S'\x07\xdf\n\x14\x13\x04\x05\x06\xf5@'
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'35-raisins.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'right'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'49-yorkie.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'49-yorkie.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3663
I1
sg3646
S'35-raisins.png'
p3664
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vy
sS'block_loop.thisTrialN'
p3666
I0
sg39
F1.5335191405574733
sg34
g752
(S'\x07\xdf\n\x14\x13\x04\x0b\x05\xdc\x00'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'48-twix.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'left'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
S'48-twix.png'
p3674
sg63
g64
sS'trial_loop.thisIndex'
p3675
g59
(g98
S'\x02\x00\x00\x00'
tRp3676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3677
I0
sg3641
S'50-polo.png'
p3678
sS'block_loop.thisRepN'
p3679
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3680
I1
sg3646
S'50-polo.png'
p3681
sg55
g11
sS'block_loop.thisTrial'
p3682
Nsg69
Vy
sS'block_loop.thisTrialN'
p3683
I0
sg39
F1.466873438024777
sg34
g752
(S'\x07\xdf\n\x14\x13\x04\x11\x0e\x86\xc0'
tRp3684
sa(dp3685
S'trial_loop.thisTrialN'
p3686
I3
sg3632
S'1-treacle_cookies.png'
p3687
sS'block_loop.thisIndex'
p3688
g3626
sg38
S'left'
p3689
sg58
g62
sS'trial_loop.thisN'
p3690
I3
sg33
S'1-treacle_cookies.png'
p3691
sg63
g64
sS'trial_loop.thisIndex'
p3692
g59
(g98
S'\x03\x00\x00\x00'
tRp3693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3694
I0
sg3641
S'21-nakd_banana_crunch.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3697
I1
sg3646
S'21-nakd_banana_crunch.png'
p3698
sg55
g11
sS'block_loop.thisTrial'
p3699
Nsg69
Vy
sS'block_loop.thisTrialN'
p3700
I0
sg39
F1.4001775584183633
sg34
g752
(S'\x07\xdf\n\x14\x13\x04\x18\x06\xf9('
tRp3701
sa(dp3702
S'trial_loop.thisTrialN'
p3703
I4
sg3632
S'41-peanuts_redo.png'
p3704
sS'block_loop.thisIndex'
p3705
g3626
sg38
S'left'
p3706
sg58
g62
sS'trial_loop.thisN'
p3707
I4
sg33
S'45-chewy_nougat_redo.png'
p3708
sg63
g64
sS'trial_loop.thisIndex'
p3709
g59
(g98
S'\x04\x00\x00\x00'
tRp3710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3711
I0
sg3641
S'45-chewy_nougat_redo.png'
p3712
sS'block_loop.thisRepN'
p3713
I1
sg3644
S'41-peanuts_redo.png'
p3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3715
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p3716
Nsg69
Vy
sS'block_loop.thisTrialN'
p3717
I0
sg39
F1.1672036944037245
sg34
g752
(S'\x07\xdf\n\x14\x13\x04\x1e\r} '
tRp3718
sa(dp3719
S'trial_loop.thisTrialN'
p3720
I5
sg3632
S'38-maltesers.png'
p3721
sS'block_loop.thisIndex'
p3722
g3626
sg38
S'left'
p3723
sg58
g62
sS'trial_loop.thisN'
p3724
I5
sg33
S'6-sour_patch_kids.png'
p3725
sg63
g64
sS'trial_loop.thisIndex'
p3726
g59
(g98
S'\x05\x00\x00\x00'
tRp3727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3728
I0
sg3641
S'6-sour_patch_kids.png'
p3729
sS'block_loop.thisRepN'
p3730
I1
sg3644
S'38-maltesers.png'
p3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3732
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p3733
Nsg69
Vy
sS'block_loop.thisTrialN'
p3734
I0
sg39
F1.183155442300631
sg34
g752
(S'\x07\xdf\n\x14\x13\x04%\x01kH'
tRp3735
sa(dp3736
S'trial_loop.thisTrialN'
p3737
I6
sg3632
S'43-mrporky_pork_crackles_redo.png'
p3738
sS'block_loop.thisIndex'
p3739
g3626
sg38
S'right'
p3740
sg58
g62
sS'trial_loop.thisN'
p3741
I6
sg33
S'18-mms.png'
p3742
sg63
g64
sS'trial_loop.thisIndex'
p3743
g59
(g98
S'\x06\x00\x00\x00'
tRp3744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3745
I0
sg3641
S'18-mms.png'
p3746
sS'block_loop.thisRepN'
p3747
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3748
I1
sg3646
S'43-mrporky_pork_crackles_redo.png'
p3749
sg55
g11
sS'block_loop.thisTrial'
p3750
Nsg69
Vy
sS'block_loop.thisTrialN'
p3751
I0
sg39
F0.71687842722167261
sg34
g752
(S'\x07\xdf\n\x14\x13\x04+\x04\x9b\xb0'
tRp3752
sa(dp3753
S'trial_loop.thisTrialN'
p3754
I7
sg3632
S'46-pistachios.png'
p3755
sS'block_loop.thisIndex'
p3756
g3626
sg38
S'left'
p3757
sg58
g62
sS'trial_loop.thisN'
p3758
I7
sg33
S'46-pistachios.png'
p3759
sg63
g64
sS'trial_loop.thisIndex'
p3760
g59
(g98
S'\x07\x00\x00\x00'
tRp3761
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3762
I0
sg3641
S'29-beans.png'
p3763
sS'block_loop.thisRepN'
p3764
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3765
I1
sg3646
S'29-beans.png'
p3766
sg55
g11
sS'block_loop.thisTrial'
p3767
Nsg69
Vy
sS'block_loop.thisTrialN'
p3768
I0
sg39
F0.68352663860787288
sg34
g752
(S'\x07\xdf\n\x14\x13\x041\x00\xe2\x90'
tRp3769
sa(dp3770
S'trial_loop.thisTrialN'
p3771
I8
sg3632
S'22-daim.png'
p3772
sS'block_loop.thisIndex'
p3773
g3626
sg38
S'left'
p3774
sg58
g62
sS'trial_loop.thisN'
p3775
I8
sg33
S'7-olives.png'
p3776
sg63
g64
sS'trial_loop.thisIndex'
p3777
g59
(g98
S'\x08\x00\x00\x00'
tRp3778
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3779
I0
sg3641
S'7-olives.png'
p3780
sS'block_loop.thisRepN'
p3781
I1
sg3644
S'22-daim.png'
p3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3783
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p3784
Nsg69
Vy
sS'block_loop.thisTrialN'
p3785
I0
sg39
F1.9000860422784172
sg34
g752
(S'\x07\xdf\n\x14\x13\x046\x0b\xb8\x00'
tRp3786
sa(dp3787
S'trial_loop.thisTrialN'
p3788
I9
sg3632
S'13-mccoys_steak_crisps.png'
p3789
sS'block_loop.thisIndex'
p3790
g3626
sg38
S'left'
p3791
sg58
g62
sS'trial_loop.thisN'
p3792
I9
sg33
S'13-mccoys_steak_crisps.png'
p3793
sg63
g64
sS'trial_loop.thisIndex'
p3794
g59
(g98
S'\t\x00\x00\x00'
tRp3795
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3796
I0
sg3641
S'3-ellas_strawberries_apples.png'
p3797
sS'block_loop.thisRepN'
p3798
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3799
I1
sg3646
S'3-ellas_strawberries_apples.png'
p3800
sg55
g11
sS'block_loop.thisTrial'
p3801
Nsg69
Vy
sS'block_loop.thisTrialN'
p3802
I0
sg39
F0.96721726501709782
sg34
g752
(S'\x07\xdf\n\x14\x13\x05\x01\n\xd5p'
tRp3803
sa(dp3804
S'trial_loop.thisTrialN'
p3805
I10
sg3632
S'20-fruit_pastilles.png'
p3806
sS'block_loop.thisIndex'
p3807
g3626
sg38
S'right'
p3808
sg58
g62
sS'trial_loop.thisN'
p3809
I10
sg33
S'20-fruit_pastilles.png'
p3810
sg63
g64
sS'trial_loop.thisIndex'
p3811
g59
(g98
S'\n\x00\x00\x00'
tRp3812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3813
I0
sg3641
S'2-steamed_puddings.png'
p3814
sS'block_loop.thisRepN'
p3815
I1
sg3644
S'2-steamed_puddings.png'
p3816
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3817
I1
sg3646
g3810
sg55
g11
sS'block_loop.thisTrial'
p3818
Nsg69
Vy
sS'block_loop.thisTrialN'
p3819
I0
sg39
F0.85025564648822183
sg34
g752
(S'\x07\xdf\n\x14\x13\x05\x07\n\xae`'
tRp3820
sa(dp3821
S'trial_loop.thisTrialN'
p3822
I11
sg3632
S'51-mars.png'
p3823
sS'block_loop.thisIndex'
p3824
g3626
sg38
S'left'
p3825
sg58
g62
sS'trial_loop.thisN'
p3826
I11
sg33
S'51-mars.png'
p3827
sg63
g64
sS'trial_loop.thisIndex'
p3828
g59
(g98
S'\x0b\x00\x00\x00'
tRp3829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3830
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p3831
sS'block_loop.thisRepN'
p3832
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3833
I1
sg3646
S'27-hartleys_raspberries_jelly.png'
p3834
sg55
g11
sS'block_loop.thisTrial'
p3835
Nsg69
Vy
sS'block_loop.thisTrialN'
p3836
I0
sg39
F1.0500693070825946
sg34
g752
(S'\x07\xdf\n\x14\x13\x05\r\x08\xe1p'
tRp3837
sa(dp3838
S'trial_loop.thisTrialN'
p3839
I12
sg3632
g3806
sS'block_loop.thisIndex'
p3840
g3626
sg38
S'right'
p3841
sg58
g62
sS'trial_loop.thisN'
p3842
I12
sg33
g3816
sg63
g64
sS'trial_loop.thisIndex'
p3843
g59
(g98
S'\x0c\x00\x00\x00'
tRp3844
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3845
I0
sg3641
g3814
sS'block_loop.thisRepN'
p3846
I1
sg3644
g3816
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3847
I1
sg3646
g3810
sg55
g11
sS'block_loop.thisTrial'
p3848
Nsg69
Vy
sS'block_loop.thisTrialN'
p3849
I0
sg39
F0.8168516851219465
sg34
g752
(S'\x07\xdf\n\x14\x13\x05\x13\n)\x90'
tRp3850
sa(dp3851
S'trial_loop.thisTrialN'
p3852
I13
sg3632
S'7-olives.png'
p3853
sS'block_loop.thisIndex'
p3854
g3626
sg38
S'right'
p3855
sg58
g62
sS'trial_loop.thisN'
p3856
I13
sg33
g3782
sg63
g64
sS'trial_loop.thisIndex'
p3857
g59
(g98
S'\r\x00\x00\x00'
tRp3858
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3859
I0
sg3641
S'22-daim.png'
p3860
sS'block_loop.thisRepN'
p3861
I1
sg3644
g3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3862
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p3863
Nsg69
Vy
sS'block_loop.thisTrialN'
p3864
I0
sg39
F1.3501666962220042
sg34
g752
(S'\x07\xdf\n\x14\x13\x05\x19\x07\xdf\xa0'
tRp3865
sa(dp3866
S'trial_loop.thisTrialN'
p3867
I14
sg3632
g3687
sS'block_loop.thisIndex'
p3868
g3626
sg38
S'left'
p3869
sg58
g62
sS'trial_loop.thisN'
p3870
I14
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p3871
g59
(g98
S'\x0e\x00\x00\x00'
tRp3872
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3873
I0
sg3641
g3695
sS'block_loop.thisRepN'
p3874
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3875
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p3876
Nsg69
Vy
sS'block_loop.thisTrialN'
p3877
I0
sg39
F1.0839362659935432
sg34
g752
(S'\x07\xdf\n\x14\x13\x05\x1f\r\xea\x80'
tRp3878
sa(dp3879
S'trial_loop.thisTrialN'
p3880
I15
sg3632
S'40-sardines.png'
p3881
sS'block_loop.thisIndex'
p3882
g3626
sg38
S'left'
p3883
sg58
g62
sS'trial_loop.thisN'
p3884
I15
sg33
S'40-sardines.png'
p3885
sg63
g64
sS'trial_loop.thisIndex'
p3886
g59
(g98
S'\x0f\x00\x00\x00'
tRp3887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3888
I0
sg3641
S'5-pineapple.png'
p3889
sS'block_loop.thisRepN'
p3890
I1
sg3644
g3885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3891
I1
sg3646
S'5-pineapple.png'
p3892
sg55
g11
sS'block_loop.thisTrial'
p3893
Nsg69
Vy
sS'block_loop.thisTrialN'
p3894
I0
sg39
F0.85014132258584141
sg34
g752
(S'\x07\xdf\n\x14\x13\x05&\x00ix'
tRp3895
sa(dp3896
S'trial_loop.thisTrialN'
p3897
I16
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p3898
sS'block_loop.thisIndex'
p3899
g3626
sg38
S'left'
p3900
sg58
g62
sS'trial_loop.thisN'
p3901
I16
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3902
sg63
g64
sS'trial_loop.thisIndex'
p3903
g59
(g98
S'\x10\x00\x00\x00'
tRp3904
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3905
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p3906
sS'block_loop.thisRepN'
p3907
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3908
I1
sg3646
S'8-liquorice_catherine_wheels.png'
p3909
sg55
g11
sS'block_loop.thisTrial'
p3910
Nsg69
Vy
sS'block_loop.thisTrialN'
p3911
I0
sg39
F0.93344410302233882
sg34
g752
(S'\x07\xdf\n\x14\x13\x05+\r\xda\xe0'
tRp3912
sa(dp3913
S'trial_loop.thisTrialN'
p3914
I17
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p3915
sS'block_loop.thisIndex'
p3916
g3626
sg38
S'left'
p3917
sg58
g62
sS'trial_loop.thisN'
p3918
I17
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p3919
sg63
g64
sS'trial_loop.thisIndex'
p3920
g59
(g98
S'\x11\x00\x00\x00'
tRp3921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3922
I0
sg3641
S'36-fig_rolls.png'
p3923
sS'block_loop.thisRepN'
p3924
I1
sg3644
g3919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3925
I1
sg3646
S'36-fig_rolls.png'
p3926
sg55
g11
sS'block_loop.thisTrial'
p3927
Nsg69
Vy
sS'block_loop.thisTrialN'
p3928
I0
sg39
F1.1667774743691552
sg34
g752
(S'\x07\xdf\n\x14\x13\x051\r:\xb8'
tRp3929
sa(dp3930
S'trial_loop.thisTrialN'
p3931
I18
sg3632
S'26-walkers_smoky_bacon.png'
p3932
sS'block_loop.thisIndex'
p3933
g3626
sg38
S'left'
p3934
sg58
g62
sS'trial_loop.thisN'
p3935
I18
sg33
S'26-walkers_smoky_bacon.png'
p3936
sg63
g64
sS'trial_loop.thisIndex'
p3937
g59
(g98
S'\x12\x00\x00\x00'
tRp3938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3939
I0
sg3641
S'44-crunch.png'
p3940
sS'block_loop.thisRepN'
p3941
I1
sg3644
g3936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3942
I1
sg3646
S'44-crunch.png'
p3943
sg55
g11
sS'block_loop.thisTrial'
p3944
Nsg69
Vy
sS'block_loop.thisTrialN'
p3945
I0
sg39
F1.466839796576096
sg34
g752
(S'\x07\xdf\n\x14\x13\x058\x01(\xe0'
tRp3946
sa(dp3947
S'trial_loop.thisTrialN'
p3948
I19
sg3632
S'49-yorkie.png'
p3949
sS'block_loop.thisIndex'
p3950
g3626
sg38
S'left'
p3951
sg58
g62
sS'trial_loop.thisN'
p3952
I19
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p3953
g59
(g98
S'\x13\x00\x00\x00'
tRp3954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3955
I0
sg3641
S'35-raisins.png'
p3956
sS'block_loop.thisRepN'
p3957
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3958
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p3959
Nsg69
Vy
sS'block_loop.thisTrialN'
p3960
I0
sg39
F0.91722122786813998
sg34
g752
(S'\x07\xdf\n\x14\x13\x06\x02\x08\xa2\xf0'
tRp3961
sa(dp3962
S'trial_loop.thisTrialN'
p3963
I20
sg3632
S'45-chewy_nougat_redo.png'
p3964
sS'block_loop.thisIndex'
p3965
g3626
sg38
S'right'
p3966
sg58
g62
sS'trial_loop.thisN'
p3967
I20
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p3968
g59
(g98
S'\x14\x00\x00\x00'
tRp3969
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3970
I0
sg3641
S'41-peanuts_redo.png'
p3971
sS'block_loop.thisRepN'
p3972
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3973
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p3974
Nsg69
Vy
sS'block_loop.thisTrialN'
p3975
I0
sg39
F1.0335311146336608
sg34
g752
(S'\x07\xdf\n\x14\x13\x06\x08\x08\x02\xc8'
tRp3976
sa(dp3977
S'trial_loop.thisTrialN'
p3978
I21
sg3632
g3721
sS'block_loop.thisIndex'
p3979
g3626
sg38
S'left'
p3980
sg58
g62
sS'trial_loop.thisN'
p3981
I21
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p3982
g59
(g98
S'\x15\x00\x00\x00'
tRp3983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3984
I0
sg3641
g3729
sS'block_loop.thisRepN'
p3985
I1
sg3644
g3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3986
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p3987
Nsg69
Vy
sS'block_loop.thisTrialN'
p3988
I0
sg39
F1.6665505371493055
sg34
g752
(S'\x07\xdf\n\x14\x13\x06\x0e\t\x0ch'
tRp3989
sa(dp3990
S'trial_loop.thisTrialN'
p3991
I22
sg3632
S'44-crunch.png'
p3992
sS'block_loop.thisIndex'
p3993
g3626
sg38
S'right'
p3994
sg58
g62
sS'trial_loop.thisN'
p3995
I22
sg33
g3936
sg63
g64
sS'trial_loop.thisIndex'
p3996
g59
(g98
S'\x16\x00\x00\x00'
tRp3997
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3998
I0
sg3641
S'26-walkers_smoky_bacon.png'
p3999
sS'block_loop.thisRepN'
p4000
I1
sg3644
g3936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4001
I1
sg3646
g3943
sg55
g11
sS'block_loop.thisTrial'
p4002
Nsg69
Vy
sS'block_loop.thisTrialN'
p4003
I0
sg39
F0.93353961052343948
sg34
g752
(S'\x07\xdf\n\x14\x13\x06\x15\x04]0'
tRp4004
sa(dp4005
S'trial_loop.thisTrialN'
p4006
I23
sg3632
g3806
sS'block_loop.thisIndex'
p4007
g3626
sg38
S'right'
p4008
sg58
g62
sS'trial_loop.thisN'
p4009
I23
sg33
g3816
sg63
g64
sS'trial_loop.thisIndex'
p4010
g59
(g98
S'\x17\x00\x00\x00'
tRp4011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4012
I0
sg3641
g3814
sS'block_loop.thisRepN'
p4013
I1
sg3644
g3816
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4014
I1
sg3646
g3810
sg55
g11
sS'block_loop.thisTrial'
p4015
Nsg69
Vy
sS'block_loop.thisTrialN'
p4016
I0
sg39
F0.88351734444950125
sg34
g752
(S'\x07\xdf\n\x14\x13\x06\x1b\x03\xfb\x88'
tRp4017
sa(dp4018
S'trial_loop.thisTrialN'
p4019
I24
sg3632
g3738
sS'block_loop.thisIndex'
p4020
g3626
sg38
S'right'
p4021
sg58
g62
sS'trial_loop.thisN'
p4022
I24
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4023
g59
(g98
S'\x18\x00\x00\x00'
tRp4024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4025
I0
sg3641
g3746
sS'block_loop.thisRepN'
p4026
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4027
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4028
Nsg69
Vy
sS'block_loop.thisTrialN'
p4029
I0
sg39
F0.7172108503364143
sg34
g752
(S'\x07\xdf\n\x14\x13\x06!\x02\xa3\xc8'
tRp4030
sa(dp4031
S'trial_loop.thisTrialN'
p4032
I25
sg3632
S'30-spaghetti_hoops.png'
p4033
sS'block_loop.thisIndex'
p4034
g3626
sg38
S'right'
p4035
sg58
g62
sS'trial_loop.thisN'
p4036
I25
sg33
S'19-caramello_redo.png'
p4037
sg63
g64
sS'trial_loop.thisIndex'
p4038
g59
(g98
S'\x19\x00\x00\x00'
tRp4039
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4040
I0
sg3641
S'19-caramello_redo.png'
p4041
sS'block_loop.thisRepN'
p4042
I1
sg3644
g4037
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4043
I1
sg3646
S'30-spaghetti_hoops.png'
p4044
sg55
g11
sS'block_loop.thisTrial'
p4045
Nsg69
Vy
sS'block_loop.thisTrialN'
p4046
I0
sg39
F0.90010058222469524
sg34
g752
(S'\x07\xdf\n\x14\x13\x06&\r\xf2P'
tRp4047
sa(dp4048
S'trial_loop.thisTrialN'
p4049
I26
sg3632
S'16-skips_prawn.png'
p4050
sS'block_loop.thisIndex'
p4051
g3626
sg38
S'left'
p4052
sg58
g62
sS'trial_loop.thisN'
p4053
I26
sg33
S'16-skips_prawn.png'
p4054
sg63
g64
sS'trial_loop.thisIndex'
p4055
g59
(g98
S'\x1a\x00\x00\x00'
tRp4056
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4057
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p4058
sS'block_loop.thisRepN'
p4059
I1
sg3644
g4054
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4060
I1
sg3646
S'42-mrkipling_lemon_slices.png'
p4061
sg55
g11
sS'block_loop.thisTrial'
p4062
Nsg69
Vy
sS'block_loop.thisTrialN'
p4063
I0
sg39
F1.3334916572057409
sg34
g752
(S'\x07\xdf\n\x14\x13\x06,\r\x13\xa8'
tRp4064
sa(dp4065
S'trial_loop.thisTrialN'
p4066
I27
sg3632
g3687
sS'block_loop.thisIndex'
p4067
g3626
sg38
S'left'
p4068
sg58
g62
sS'trial_loop.thisN'
p4069
I27
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4070
g59
(g98
S'\x1b\x00\x00\x00'
tRp4071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4072
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4073
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4074
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4075
Nsg69
Vy
sS'block_loop.thisTrialN'
p4076
I0
sg39
F0.75010049669799628
sg34
g752
(S'\x07\xdf\n\x14\x13\x063\x03c0'
tRp4077
sa(dp4078
S'trial_loop.thisTrialN'
p4079
I28
sg3632
S'33-ambrosia_rice.png'
p4080
sS'block_loop.thisIndex'
p4081
g3626
sg38
S'right'
p4082
sg58
g62
sS'trial_loop.thisN'
p4083
I28
sg33
S'23-crunchie_redo.png'
p4084
sg63
g64
sS'trial_loop.thisIndex'
p4085
g59
(g98
S'\x1c\x00\x00\x00'
tRp4086
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4087
I0
sg3641
S'23-crunchie_redo.png'
p4088
sS'block_loop.thisRepN'
p4089
I1
sg3644
g4084
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4090
I1
sg3646
S'33-ambrosia_rice.png'
p4091
sg55
g11
sS'block_loop.thisTrial'
p4092
Nsg69
Vy
sS'block_loop.thisTrialN'
p4093
I0
sg39
F0.8334736960932787
sg34
g752
(S"\x07\xdf\n\x14\x13\x069\x00'\x10"
tRp4094
sa(dp4095
S'trial_loop.thisTrialN'
p4096
I29
sg3632
g3721
sS'block_loop.thisIndex'
p4097
g3626
sg38
S'left'
p4098
sg58
g62
sS'trial_loop.thisN'
p4099
I29
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4100
g59
(g98
S'\x1d\x00\x00\x00'
tRp4101
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4102
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4103
I1
sg3644
g3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4104
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p4105
Nsg69
Vy
sS'block_loop.thisTrialN'
p4106
I0
sg39
F1.016493717317644
sg34
g752
(S'\x07\xdf\n\x14\x13\x07\x02\rY\xf8'
tRp4107
sa(dp4108
S'trial_loop.thisTrialN'
p4109
I30
sg3632
S'3-ellas_strawberries_apples.png'
p4110
sS'block_loop.thisIndex'
p4111
g3626
sg38
S'right'
p4112
sg58
g62
sS'trial_loop.thisN'
p4113
I30
sg33
g3800
sg63
g64
sS'trial_loop.thisIndex'
p4114
g59
(g98
S'\x1e\x00\x00\x00'
tRp4115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4116
I0
sg3641
S'13-mccoys_steak_crisps.png'
p4117
sS'block_loop.thisRepN'
p4118
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4119
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p4120
Nsg69
Vy
sS'block_loop.thisTrialN'
p4121
I0
sg39
F0.73354234745420399
sg34
g752
(S'\x07\xdf\n\x14\x13\x07\x08\r\xeeh'
tRp4122
sa(dp4123
S'trial_loop.thisTrialN'
p4124
I31
sg3632
S'29-beans.png'
p4125
sS'block_loop.thisIndex'
p4126
g3626
sg38
S'right'
p4127
sg58
g62
sS'trial_loop.thisN'
p4128
I31
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4129
g59
(g98
S'\x1f\x00\x00\x00'
tRp4130
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4131
I0
sg3641
S'46-pistachios.png'
p4132
sS'block_loop.thisRepN'
p4133
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4134
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4135
Nsg69
Vy
sS'block_loop.thisTrialN'
p4136
I0
sg39
F0.63353288223515847
sg34
g752
(S'\x07\xdf\n\x14\x13\x07\x0e\ns\xc8'
tRp4137
sa(dp4138
S'trial_loop.thisTrialN'
p4139
I32
sg3632
g3964
sS'block_loop.thisIndex'
p4140
g3626
sg38
S'right'
p4141
sg58
g62
sS'trial_loop.thisN'
p4142
I32
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p4143
g59
(g98
S' \x00\x00\x00'
tRp4144
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4145
I0
sg3641
g3971
sS'block_loop.thisRepN'
p4146
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4147
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p4148
Nsg69
Vy
sS'block_loop.thisTrialN'
p4149
I0
sg39
F0.93353333838967956
sg34
g752
(S'\x07\xdf\n\x14\x13\x07\x14\x05Kx'
tRp4150
sa(dp4151
S'trial_loop.thisTrialN'
p4152
I33
sg3632
S'6-sour_patch_kids.png'
p4153
sS'block_loop.thisIndex'
p4154
g3626
sg38
S'left'
p4155
sg58
g62
sS'trial_loop.thisN'
p4156
I33
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p4157
g59
(g98
S'!\x00\x00\x00'
tRp4158
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4159
I0
sg3641
S'38-maltesers.png'
p4160
sS'block_loop.thisRepN'
p4161
I1
sg3644
g3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4162
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p4163
Nsg69
Vy
sS'block_loop.thisTrialN'
p4164
I0
sg39
F0.89992040091237868
sg34
g752
(S'\x07\xdf\n\x14\x13\x07\x1a\x04\xe9\xd0'
tRp4165
sa(dp4166
S'trial_loop.thisTrialN'
p4167
I34
sg3632
g3949
sS'block_loop.thisIndex'
p4168
g3626
sg38
S'left'
p4169
sg58
g62
sS'trial_loop.thisN'
p4170
I34
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4171
g59
(g98
S'"\x00\x00\x00'
tRp4172
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4173
I0
sg3641
g3956
sS'block_loop.thisRepN'
p4174
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4175
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4176
Nsg69
Vy
sS'block_loop.thisTrialN'
p4177
I0
sg39
F0.96687457841107971
sg34
g752
(S'\x07\xdf\n\x14\x13\x07 \x03\xd0\x90'
tRp4178
sa(dp4179
S'trial_loop.thisTrialN'
p4180
I35
sg3632
g3633
sS'block_loop.thisIndex'
p4181
g3626
sg38
S'left'
p4182
sg58
g62
sS'trial_loop.thisN'
p4183
I35
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4184
g59
(g98
S'#\x00\x00\x00'
tRp4185
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4186
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4187
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4188
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4189
Nsg69
Vy
sS'block_loop.thisTrialN'
p4190
I0
sg39
F0.75055864758905955
sg34
g752
(S'\x07\xdf\n\x14\x13\x07&\x03\xe8\x00'
tRp4191
sa(dp4192
S'trial_loop.thisTrialN'
p4193
I36
sg3632
g3992
sS'block_loop.thisIndex'
p4194
g3626
sg38
S'right'
p4195
sg58
g62
sS'trial_loop.thisN'
p4196
I36
sg33
g3936
sg63
g64
sS'trial_loop.thisIndex'
p4197
g59
(g98
S'$\x00\x00\x00'
tRp4198
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4199
I0
sg3641
g3999
sS'block_loop.thisRepN'
p4200
I1
sg3644
g3936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4201
I1
sg3646
g3943
sg55
g11
sS'block_loop.thisTrial'
p4202
Nsg69
Vy
sS'block_loop.thisTrialN'
p4203
I0
sg39
F0.93352678115843446
sg34
g752
(S'\x07\xdf\n\x14\x13\x07,\x00\xab\xe0'
tRp4204
sa(dp4205
S'trial_loop.thisTrialN'
p4206
I37
sg3632
S'50-polo.png'
p4207
sS'block_loop.thisIndex'
p4208
g3626
sg38
S'right'
p4209
sg58
g62
sS'trial_loop.thisN'
p4210
I37
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p4211
g59
(g98
S'%\x00\x00\x00'
tRp4212
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4213
I0
sg3641
S'48-twix.png'
p4214
sS'block_loop.thisRepN'
p4215
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4216
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4217
Nsg69
Vy
sS'block_loop.thisTrialN'
p4218
I0
sg39
F1.0000746954174247
sg34
g752
(S'\x07\xdf\n\x14\x13\x072\x00\x0b\xb8'
tRp4219
sa(dp4220
S'trial_loop.thisTrialN'
p4221
I38
sg3632
S'8-liquorice_catherine_wheels.png'
p4222
sS'block_loop.thisIndex'
p4223
g3626
sg38
S'right'
p4224
sg58
g62
sS'trial_loop.thisN'
p4225
I38
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p4226
g59
(g98
S'&\x00\x00\x00'
tRp4227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4228
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p4229
sS'block_loop.thisRepN'
p4230
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4231
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p4232
Nsg69
Vy
sS'block_loop.thisTrialN'
p4233
I0
sg39
F0.90017071608963306
sg34
g752
(S'\x07\xdf\n\x14\x13\x078\x00\x9c@'
tRp4234
sa(dp4235
S'trial_loop.thisTrialN'
p4236
I39
sg3632
g3932
sS'block_loop.thisIndex'
p4237
g3626
sg38
S'left'
p4238
sg58
g62
sS'trial_loop.thisN'
p4239
I39
sg33
g3936
sg63
g64
sS'trial_loop.thisIndex'
p4240
g59
(g98
S"'\x00\x00\x00"
tRp4241
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4242
I0
sg3641
g3940
sS'block_loop.thisRepN'
p4243
I1
sg3644
g3936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4244
I1
sg3646
g3943
sg55
g11
sS'block_loop.thisTrial'
p4245
Nsg69
Vy
sS'block_loop.thisTrialN'
p4246
I0
sg39
F1.3500455299945315
sg34
g752
(S'\x07\xdf\n\x14\x13\x08\x01\x0e\xc5@'
tRp4247
sa(dp4248
S'trial_loop.thisTrialN'
p4249
I40
sg3632
S'27-hartleys_raspberries_jelly.png'
p4250
sS'block_loop.thisIndex'
p4251
g3626
sg38
S'right'
p4252
sg58
g62
sS'trial_loop.thisN'
p4253
I40
sg33
g3827
sg63
g64
sS'trial_loop.thisIndex'
p4254
g59
(g98
S'(\x00\x00\x00'
tRp4255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4256
I0
sg3641
S'51-mars.png'
p4257
sS'block_loop.thisRepN'
p4258
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4259
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p4260
Nsg69
Vy
sS'block_loop.thisTrialN'
p4261
I0
sg39
F0.76692492654547095
sg34
g752
(S'\x07\xdf\n\x14\x13\x08\x08\x05SH'
tRp4262
sa(dp4263
S'trial_loop.thisTrialN'
p4264
I41
sg3632
S'19-caramello_redo.png'
p4265
sS'block_loop.thisIndex'
p4266
g3626
sg38
S'left'
p4267
sg58
g62
sS'trial_loop.thisN'
p4268
I41
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p4269
g59
(g98
S')\x00\x00\x00'
tRp4270
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4271
I0
sg3641
S'30-spaghetti_hoops.png'
p4272
sS'block_loop.thisRepN'
p4273
I1
sg3644
g4037
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4274
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p4275
Nsg69
Vy
sS'block_loop.thisTrialN'
p4276
I0
sg39
F0.75019600419545895
sg34
g752
(S'\x07\xdf\n\x14\x13\x08\x0e\x02Q\xc0'
tRp4277
sa(dp4278
S'trial_loop.thisTrialN'
p4279
I42
sg3632
S'2-steamed_puddings.png'
p4280
sS'block_loop.thisIndex'
p4281
g3626
sg38
S'left'
p4282
sg58
g62
sS'trial_loop.thisN'
p4283
I42
sg33
g3816
sg63
g64
sS'trial_loop.thisIndex'
p4284
g59
(g98
S'*\x00\x00\x00'
tRp4285
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4286
I0
sg3641
S'20-fruit_pastilles.png'
p4287
sS'block_loop.thisRepN'
p4288
I1
sg3644
g3816
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4289
I1
sg3646
g3810
sg55
g11
sS'block_loop.thisTrial'
p4290
Nsg69
Vy
sS'block_loop.thisTrialN'
p4291
I0
sg39
F0.91684604020338156
sg34
g752
(S'\x07\xdf\n\x14\x13\x08\x13\x0eW\xe0'
tRp4292
sa(dp4293
S'trial_loop.thisTrialN'
p4294
I43
sg3632
S'4-corn.png'
p4295
sS'block_loop.thisIndex'
p4296
g3626
sg38
S'right'
p4297
sg58
g62
sS'trial_loop.thisN'
p4298
I43
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4299
g59
(g98
S'+\x00\x00\x00'
tRp4300
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4301
I0
sg3641
S'10-bounty_redo.png'
p4302
sS'block_loop.thisRepN'
p4303
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4304
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4305
Nsg69
Vy
sS'block_loop.thisTrialN'
p4306
I0
sg39
F0.81676615601827507
sg34
g752
(S'\x07\xdf\n\x14\x13\x08\x19\ry8'
tRp4307
sa(dp4308
S'trial_loop.thisTrialN'
p4309
I44
sg3632
g4153
sS'block_loop.thisIndex'
p4310
g3626
sg38
S'left'
p4311
sg58
g62
sS'trial_loop.thisN'
p4312
I44
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p4313
g59
(g98
S',\x00\x00\x00'
tRp4314
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4315
I0
sg3641
g4160
sS'block_loop.thisRepN'
p4316
I1
sg3644
g3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4317
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p4318
Nsg69
Vy
sS'block_loop.thisTrialN'
p4319
I0
sg39
F1.7165713777430938
sg34
g752
(S'\x07\xdf\n\x14\x13\x08\x1f\x0b/H'
tRp4320
sa(dp4321
S'trial_loop.thisTrialN'
p4322
I45
sg3632
g4033
sS'block_loop.thisIndex'
p4323
g3626
sg38
S'right'
p4324
sg58
g62
sS'trial_loop.thisN'
p4325
I45
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p4326
g59
(g98
S'-\x00\x00\x00'
tRp4327
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4328
I0
sg3641
g4041
sS'block_loop.thisRepN'
p4329
I1
sg3644
g4037
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4330
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p4331
Nsg69
Vy
sS'block_loop.thisTrialN'
p4332
I0
sg39
F0.73367463246540865
sg34
g752
(S'\x07\xdf\n\x14\x13\x08&\x07r@'
tRp4333
sa(dp4334
S'trial_loop.thisTrialN'
p4335
I46
sg3632
g4250
sS'block_loop.thisIndex'
p4336
g3626
sg38
S'right'
p4337
sg58
g62
sS'trial_loop.thisN'
p4338
I46
sg33
g3827
sg63
g64
sS'trial_loop.thisIndex'
p4339
g59
(g98
S'.\x00\x00\x00'
tRp4340
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4341
I0
sg3641
g4257
sS'block_loop.thisRepN'
p4342
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4343
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p4344
Nsg69
Vy
sS'block_loop.thisTrialN'
p4345
I0
sg39
F0.78343204341945238
sg34
g752
(S'\x07\xdf\n\x14\x13\x08,\x03\xf7\xa0'
tRp4346
sa(dp4347
S'trial_loop.thisTrialN'
p4348
I47
sg3632
S'31-hobnobs.png'
p4349
sS'block_loop.thisIndex'
p4350
g3626
sg38
S'right'
p4351
sg58
g62
sS'trial_loop.thisN'
p4352
I47
sg33
S'25-kitkat.png'
p4353
sg63
g64
sS'trial_loop.thisIndex'
p4354
g59
(g98
S'/\x00\x00\x00'
tRp4355
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4356
I0
sg3641
S'25-kitkat.png'
p4357
sS'block_loop.thisRepN'
p4358
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4359
I1
sg3646
S'31-hobnobs.png'
p4360
sg55
g11
sS'block_loop.thisTrial'
p4361
Nsg69
Vy
sS'block_loop.thisTrialN'
p4362
I0
sg39
F0.76686192010674858
sg34
g752
(S'\x07\xdf\n\x14\x13\x082\x00\xf6\x18'
tRp4363
sa(dp4364
S'trial_loop.thisTrialN'
p4365
I48
sg3632
g4222
sS'block_loop.thisIndex'
p4366
g3626
sg38
S'right'
p4367
sg58
g62
sS'trial_loop.thisN'
p4368
I48
sg33
g3909
sg63
g64
sS'trial_loop.thisIndex'
p4369
g59
(g98
S'0\x00\x00\x00'
tRp4370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4371
I0
sg3641
g4229
sS'block_loop.thisRepN'
p4372
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4373
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p4374
Nsg69
Vy
sS'block_loop.thisTrialN'
p4375
I0
sg39
F1.0001918702910189
sg34
g752
(S'\x07\xdf\n\x14\x13\x087\r6\xd0'
tRp4376
sa(dp4377
S'trial_loop.thisTrialN'
p4378
I49
sg3632
g4349
sS'block_loop.thisIndex'
p4379
g3626
sg38
S'right'
p4380
sg58
g62
sS'trial_loop.thisN'
p4381
I49
sg33
g4353
sg63
g64
sS'trial_loop.thisIndex'
p4382
g59
(g98
S'1\x00\x00\x00'
tRp4383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4384
I0
sg3641
g4357
sS'block_loop.thisRepN'
p4385
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4386
I1
sg3646
g4360
sg55
g11
sS'block_loop.thisTrial'
p4387
Nsg69
Vy
sS'block_loop.thisTrialN'
p4388
I0
sg39
F0.90013051741334493
sg34
g752
(S'\x07\xdf\n\x14\x13\t\x01\r\xcb@'
tRp4389
sa(dp4390
S'trial_loop.thisTrialN'
p4391
I50
sg3632
g3823
sS'block_loop.thisIndex'
p4392
g3626
sg38
S'left'
p4393
sg58
g62
sS'trial_loop.thisN'
p4394
I50
sg33
g3827
sg63
g64
sS'trial_loop.thisIndex'
p4395
g59
(g98
S'2\x00\x00\x00'
tRp4396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4397
I0
sg3641
g3831
sS'block_loop.thisRepN'
p4398
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4399
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p4400
Nsg69
Vy
sS'block_loop.thisTrialN'
p4401
I0
sg39
F0.8001866245031124
sg34
g752
(S'\x07\xdf\n\x14\x13\t\x07\x0c\xb2\x00'
tRp4402
sa(dp4403
S'trial_loop.thisTrialN'
p4404
I51
sg3632
S'42-mrkipling_lemon_slices.png'
p4405
sS'block_loop.thisIndex'
p4406
g3626
sg38
S'right'
p4407
sg58
g62
sS'trial_loop.thisN'
p4408
I51
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p4409
g59
(g98
S'3\x00\x00\x00'
tRp4410
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4411
I0
sg3641
S'16-skips_prawn.png'
p4412
sS'block_loop.thisRepN'
p4413
I1
sg3644
g4054
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4414
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p4415
Nsg69
Vy
sS'block_loop.thisTrialN'
p4416
I0
sg39
F0.71668199538180488
sg34
g752
(S'\x07\xdf\n\x14\x13\t\r\n)\x90'
tRp4417
sa(dp4418
S'trial_loop.thisTrialN'
p4419
I52
sg3632
g4280
sS'block_loop.thisIndex'
p4420
g3626
sg38
S'left'
p4421
sg58
g62
sS'trial_loop.thisN'
p4422
I52
sg33
g3810
sg63
g64
sS'trial_loop.thisIndex'
p4423
g59
(g98
S'4\x00\x00\x00'
tRp4424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4425
I0
sg3641
g4287
sS'block_loop.thisRepN'
p4426
I1
sg3644
g3816
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4427
I1
sg3646
g3810
sg55
g11
sS'block_loop.thisTrial'
p4428
Nsg69
Vy
sS'block_loop.thisTrialN'
p4429
I0
sg39
F0.85013362496829359
sg34
g752
(S'\x07\xdf\n\x14\x13\t\x13\x06pp'
tRp4430
sa(dp4431
S'trial_loop.thisTrialN'
p4432
I53
sg3632
g3772
sS'block_loop.thisIndex'
p4433
g3626
sg38
S'left'
p4434
sg58
g62
sS'trial_loop.thisN'
p4435
I53
sg33
g3782
sg63
g64
sS'trial_loop.thisIndex'
p4436
g59
(g98
S'5\x00\x00\x00'
tRp4437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4438
I0
sg3641
g3780
sS'block_loop.thisRepN'
p4439
I1
sg3644
g3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4440
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p4441
Nsg69
Vy
sS'block_loop.thisTrialN'
p4442
I0
sg39
F1.5334931967299781
sg34
g752
(S'\x07\xdf\n\x14\x13\t\x19\x04\xa3\x80'
tRp4443
sa(dp4444
S'trial_loop.thisTrialN'
p4445
I54
sg3632
S'23-crunchie_redo.png'
p4446
sS'block_loop.thisIndex'
p4447
g3626
sg38
S'left'
p4448
sg58
g62
sS'trial_loop.thisN'
p4449
I54
sg33
g4084
sg63
g64
sS'trial_loop.thisIndex'
p4450
g59
(g98
S'6\x00\x00\x00'
tRp4451
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4452
I0
sg3641
S'33-ambrosia_rice.png'
p4453
sS'block_loop.thisRepN'
p4454
I1
sg3644
g4084
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4455
I1
sg3646
g4091
sg55
g11
sS'block_loop.thisTrial'
p4456
Nsg69
Vy
sS'block_loop.thisTrialN'
p4457
I0
sg39
F0.86676818020714563
sg34
g752
(S'\x07\xdf\n\x14\x13\t\x1f\rJX'
tRp4458
sa(dp4459
S'trial_loop.thisTrialN'
p4460
I55
sg3632
S'25-kitkat.png'
p4461
sS'block_loop.thisIndex'
p4462
g3626
sg38
S'left'
p4463
sg58
g62
sS'trial_loop.thisN'
p4464
I55
sg33
g4353
sg63
g64
sS'trial_loop.thisIndex'
p4465
g59
(g98
S'7\x00\x00\x00'
tRp4466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4467
I0
sg3641
S'31-hobnobs.png'
p4468
sS'block_loop.thisRepN'
p4469
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4470
I1
sg3646
g4360
sg55
g11
sS'block_loop.thisTrial'
p4471
Nsg69
Vy
sS'block_loop.thisTrialN'
p4472
I0
sg39
F0.81687591836816864
sg34
g752
(S'\x07\xdf\n\x14\x13\t%\x0b\xb8\x00'
tRp4473
sa(dp4474
S'trial_loop.thisTrialN'
p4475
I56
sg3632
g3932
sS'block_loop.thisIndex'
p4476
g3626
sg38
S'left'
p4477
sg58
g62
sS'trial_loop.thisN'
p4478
I56
sg33
g3936
sg63
g64
sS'trial_loop.thisIndex'
p4479
g59
(g98
S'8\x00\x00\x00'
tRp4480
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4481
I0
sg3641
g3940
sS'block_loop.thisRepN'
p4482
I1
sg3644
g3936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4483
I1
sg3646
g3943
sg55
g11
sS'block_loop.thisTrial'
p4484
Nsg69
Vy
sS'block_loop.thisTrialN'
p4485
I0
sg39
F0.85054958150794846
sg34
g752
(S'\x07\xdf\n\x14\x13\t+\tn\x10'
tRp4486
sa(dp4487
S'trial_loop.thisTrialN'
p4488
I57
sg3632
g3653
sS'block_loop.thisIndex'
p4489
g3626
sg38
S'right'
p4490
sg58
g62
sS'trial_loop.thisN'
p4491
I57
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4492
g59
(g98
S'9\x00\x00\x00'
tRp4493
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4494
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4495
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4496
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4497
Nsg69
Vy
sS'block_loop.thisTrialN'
p4498
I0
sg39
F1.0501987411262235
sg34
g752
(S'\x07\xdf\n\x14\x13\t1\x07\x9d8'
tRp4499
sa(dp4500
S'trial_loop.thisTrialN'
p4501
I58
sg3632
S'36-fig_rolls.png'
p4502
sS'block_loop.thisIndex'
p4503
g3626
sg38
S'right'
p4504
sg58
g62
sS'trial_loop.thisN'
p4505
I58
sg33
g3919
sg63
g64
sS'trial_loop.thisIndex'
p4506
g59
(g98
S':\x00\x00\x00'
tRp4507
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4508
I0
sg3641
S'34-hula_hoops_bbq_beef_redo.png'
p4509
sS'block_loop.thisRepN'
p4510
I1
sg3644
g3919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4511
I1
sg3646
g3926
sg55
g11
sS'block_loop.thisTrial'
p4512
Nsg69
Vy
sS'block_loop.thisTrialN'
p4513
I0
sg39
F1.1167765905702254
sg34
g752
(S'\x07\xdf\n\x14\x13\t7\x08\xe5X'
tRp4514
sa(dp4515
S'trial_loop.thisTrialN'
p4516
I59
sg3632
g4349
sS'block_loop.thisIndex'
p4517
g3626
sg38
S'right'
p4518
sg58
g62
sS'trial_loop.thisN'
p4519
I59
sg33
g4360
sg63
g64
sS'trial_loop.thisIndex'
p4520
g59
(g98
S';\x00\x00\x00'
tRp4521
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4522
I0
sg3641
g4357
sS'block_loop.thisRepN'
p4523
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4524
I1
sg3646
g4360
sg55
g11
sS'block_loop.thisTrial'
p4525
Nsg69
Vy
sS'block_loop.thisTrialN'
p4526
I0
sg39
F0.85005037664086558
sg34
g752
(S'\x07\xdf\n\x14\x13\n\x01\x0b#\x90'
tRp4527
sa(dp4528
S'trial_loop.thisTrialN'
p4529
I60
sg3632
g4080
sS'block_loop.thisIndex'
p4530
g3626
sg38
S'right'
p4531
sg58
g62
sS'trial_loop.thisN'
p4532
I60
sg33
g4084
sg63
g64
sS'trial_loop.thisIndex'
p4533
g59
(g98
S'<\x00\x00\x00'
tRp4534
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4535
I0
sg3641
g4088
sS'block_loop.thisRepN'
p4536
I1
sg3644
g4084
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4537
I1
sg3646
g4091
sg55
g11
sS'block_loop.thisTrial'
p4538
Nsg69
Vy
sS'block_loop.thisTrialN'
p4539
I0
sg39
F0.71683993912665755
sg34
g752
(S'\x07\xdf\n\x14\x13\n\x07\tR\xb8'
tRp4540
sa(dp4541
S'trial_loop.thisTrialN'
p4542
I61
sg3632
g3704
sS'block_loop.thisIndex'
p4543
g3626
sg38
S'left'
p4544
sg58
g62
sS'trial_loop.thisN'
p4545
I61
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p4546
g59
(g98
S'=\x00\x00\x00'
tRp4547
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4548
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4549
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4550
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p4551
Nsg69
Vy
sS'block_loop.thisTrialN'
p4552
I0
sg39
F0.93352136431349209
sg34
g752
(S'\x07\xdf\n\x14\x13\n\r\x05\x99\x98'
tRp4553
sa(dp4554
S'trial_loop.thisTrialN'
p4555
I62
sg3632
g4446
sS'block_loop.thisIndex'
p4556
g3626
sg38
S'left'
p4557
sg58
g62
sS'trial_loop.thisN'
p4558
I62
sg33
g4084
sg63
g64
sS'trial_loop.thisIndex'
p4559
g59
(g98
S'>\x00\x00\x00'
tRp4560
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4561
I0
sg3641
g4453
sS'block_loop.thisRepN'
p4562
I1
sg3644
g4084
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4563
I1
sg3646
g4091
sg55
g11
sS'block_loop.thisTrial'
p4564
Nsg69
Vy
sS'block_loop.thisTrialN'
p4565
I0
sg39
F0.78347452287562191
sg34
g752
(S'\x07\xdf\n\x14\x13\n\x13\x057\xf0'
tRp4566
sa(dp4567
S'trial_loop.thisTrialN'
p4568
I63
sg3632
g4280
sS'block_loop.thisIndex'
p4569
g3626
sg38
S'left'
p4570
sg58
g62
sS'trial_loop.thisN'
p4571
I63
sg33
g3810
sg63
g64
sS'trial_loop.thisIndex'
p4572
g59
(g98
S'?\x00\x00\x00'
tRp4573
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4574
I0
sg3641
g4287
sS'block_loop.thisRepN'
p4575
I1
sg3644
g3816
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4576
I1
sg3646
g3810
sg55
g11
sS'block_loop.thisTrial'
p4577
Nsg69
Vy
sS'block_loop.thisTrialN'
p4578
I0
sg39
F0.83347825764576555
sg34
g752
(S'\x07\xdf\n\x14\x13\n\x19\x026h'
tRp4579
sa(dp4580
S'trial_loop.thisTrialN'
p4581
I64
sg3632
g3755
sS'block_loop.thisIndex'
p4582
g3626
sg38
S'left'
p4583
sg58
g62
sS'trial_loop.thisN'
p4584
I64
sg33
g3766
sg63
g64
sS'trial_loop.thisIndex'
p4585
g59
(g98
S'@\x00\x00\x00'
tRp4586
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4587
I0
sg3641
g3763
sS'block_loop.thisRepN'
p4588
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4589
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4590
Nsg69
Vy
sS'block_loop.thisTrialN'
p4591
I0
sg39
F0.66686699483034317
sg34
g752
(S'\x07\xdf\n\x14\x13\n\x1f\x00*\xf8'
tRp4592
sa(dp4593
S'trial_loop.thisTrialN'
p4594
I65
sg3632
g3806
sS'block_loop.thisIndex'
p4595
g3626
sg38
S'right'
p4596
sg58
g62
sS'trial_loop.thisN'
p4597
I65
sg33
g3816
sg63
g64
sS'trial_loop.thisIndex'
p4598
g59
(g98
S'A\x00\x00\x00'
tRp4599
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4600
I0
sg3641
g3814
sS'block_loop.thisRepN'
p4601
I1
sg3644
g3816
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4602
I1
sg3646
g3810
sg55
g11
sS'block_loop.thisTrial'
p4603
Nsg69
Vy
sS'block_loop.thisTrialN'
p4604
I0
sg39
F0.83341867237322731
sg34
g752
(S'\x07\xdf\n\x14\x13\n$\x0b\x00h'
tRp4605
sa(dp4606
S'trial_loop.thisTrialN'
p4607
I66
sg3632
S'5-pineapple.png'
p4608
sS'block_loop.thisIndex'
p4609
g3626
sg38
S'right'
p4610
sg58
g62
sS'trial_loop.thisN'
p4611
I66
sg33
g3885
sg63
g64
sS'trial_loop.thisIndex'
p4612
g59
(g98
S'B\x00\x00\x00'
tRp4613
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4614
I0
sg3641
S'40-sardines.png'
p4615
sS'block_loop.thisRepN'
p4616
I1
sg3644
g3885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4617
I1
sg3646
g3892
sg55
g11
sS'block_loop.thisTrial'
p4618
Nsg69
Vy
sS'block_loop.thisTrialN'
p4619
I0
sg39
F0.81684883415437071
sg34
g752
(S'\x07\xdf\n\x14\x13\n*\x08\xf1\x10'
tRp4620
sa(dp4621
S'trial_loop.thisTrialN'
p4622
I67
sg3632
g3949
sS'block_loop.thisIndex'
p4623
g3626
sg38
S'left'
p4624
sg58
g62
sS'trial_loop.thisN'
p4625
I67
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4626
g59
(g98
S'C\x00\x00\x00'
tRp4627
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4628
I0
sg3641
g3956
sS'block_loop.thisRepN'
p4629
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4630
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4631
Nsg69
Vy
sS'block_loop.thisTrialN'
p4632
I0
sg39
F0.90018753681215458
sg34
g752
(S'\x07\xdf\n\x14\x13\n0\x06\xa7 '
tRp4633
sa(dp4634
S'trial_loop.thisTrialN'
p4635
I68
sg3632
g3823
sS'block_loop.thisIndex'
p4636
g3626
sg38
S'left'
p4637
sg58
g62
sS'trial_loop.thisN'
p4638
I68
sg33
g3827
sg63
g64
sS'trial_loop.thisIndex'
p4639
g59
(g98
S'D\x00\x00\x00'
tRp4640
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4641
I0
sg3641
g3831
sS'block_loop.thisRepN'
p4642
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4643
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p4644
Nsg69
Vy
sS'block_loop.thisTrialN'
p4645
I0
sg39
F0.8506168644016725
sg34
g752
(S'\x07\xdf\n\x14\x13\n6\x05\x8d\xe0'
tRp4646
sa(dp4647
S'trial_loop.thisTrialN'
p4648
I69
sg3632
g4050
sS'block_loop.thisIndex'
p4649
g3626
sg38
S'left'
p4650
sg58
g62
sS'trial_loop.thisN'
p4651
I69
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p4652
g59
(g98
S'E\x00\x00\x00'
tRp4653
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4654
I0
sg3641
g4058
sS'block_loop.thisRepN'
p4655
I1
sg3644
g4054
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4656
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p4657
Nsg69
Vy
sS'block_loop.thisTrialN'
p4658
I0
sg39
F0.78339868707189453
sg34
g752
(S'\x07\xdf\n\x14\x13\x0b\x00\x03\xbd\x08'
tRp4659
sa(dp4660
S'trial_loop.thisTrialN'
p4661
I70
sg3632
g4280
sS'block_loop.thisIndex'
p4662
g3626
sg38
S'left'
p4663
sg58
g62
sS'trial_loop.thisN'
p4664
I70
sg33
g3810
sg63
g64
sS'trial_loop.thisIndex'
p4665
g59
(g98
S'F\x00\x00\x00'
tRp4666
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4667
I0
sg3641
g4287
sS'block_loop.thisRepN'
p4668
I1
sg3644
g3816
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4669
I1
sg3646
g3810
sg55
g11
sS'block_loop.thisTrial'
p4670
Nsg69
Vy
sS'block_loop.thisTrialN'
p4671
I0
sg39
F0.75010705392924137
sg34
g752
(S'\x07\xdf\n\x14\x13\x0b\x06\x00\xfa\x00'
tRp4672
sa(dp4673
S'trial_loop.thisTrialN'
p4674
I71
sg3632
S'21-nakd_banana_crunch.png'
p4675
sS'block_loop.thisIndex'
p4676
g3626
sg38
S'right'
p4677
sg58
g62
sS'trial_loop.thisN'
p4678
I71
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4679
g59
(g98
S'G\x00\x00\x00'
tRp4680
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4681
I0
sg3641
S'1-treacle_cookies.png'
p4682
sS'block_loop.thisRepN'
p4683
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4684
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4685
Nsg69
Vy
sS'block_loop.thisTrialN'
p4686
I0
sg39
F1.0501890478299174
sg34
g752
(S'\x07\xdf\n\x14\x13\x0b\x0b\r\x00 '
tRp4687
sa(dp4688
S'trial_loop.thisTrialN'
p4689
I72
sg3632
g3721
sS'block_loop.thisIndex'
p4690
g3626
sg38
S'right'
p4691
sg58
g62
sS'trial_loop.thisN'
p4692
I72
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p4693
g59
(g98
S'H\x00\x00\x00'
tRp4694
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4695
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4696
I1
sg3644
g3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4697
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p4698
Nsg69
Vy
sS'block_loop.thisTrialN'
p4699
I0
sg39
F2.0666023677877092
sg34
g752
(S'\x07\xdf\n\x14\x13\x0b\x11\x0eH@'
tRp4700
sa(dp4701
S'trial_loop.thisTrialN'
p4702
I73
sg3632
g3755
sS'block_loop.thisIndex'
p4703
g3626
sg38
S'left'
p4704
sg58
g62
sS'trial_loop.thisN'
p4705
I73
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4706
g59
(g98
S'I\x00\x00\x00'
tRp4707
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4708
I0
sg3641
g3763
sS'block_loop.thisRepN'
p4709
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4710
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4711
Nsg69
Vy
sS'block_loop.thisTrialN'
p4712
I0
sg39
F0.66706627764142468
sg34
g752
(S'\x07\xdf\n\x14\x13\x0b\x19\x00\x84\xd0'
tRp4713
sa(dp4714
S'trial_loop.thisTrialN'
p4715
I74
sg3632
g4502
sS'block_loop.thisIndex'
p4716
g3626
sg38
S'right'
p4717
sg58
g62
sS'trial_loop.thisN'
p4718
I74
sg33
g3919
sg63
g64
sS'trial_loop.thisIndex'
p4719
g59
(g98
S'J\x00\x00\x00'
tRp4720
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4721
I0
sg3641
g4509
sS'block_loop.thisRepN'
p4722
I1
sg3644
g3919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4723
I1
sg3646
g3926
sg55
g11
sS'block_loop.thisTrial'
p4724
Nsg69
Vy
sS'block_loop.thisTrialN'
p4725
I0
sg39
F0.85017638951831032
sg34
g752
(S'\x07\xdf\n\x14\x13\x0b\x1e\x0b\x1b\xc0'
tRp4726
sa(dp4727
S'trial_loop.thisTrialN'
p4728
I75
sg3632
g3653
sS'block_loop.thisIndex'
p4729
g3626
sg38
S'right'
p4730
sg58
g62
sS'trial_loop.thisN'
p4731
I75
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4732
g59
(g98
S'K\x00\x00\x00'
tRp4733
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4734
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4735
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4736
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4737
Nsg69
Vy
sS'block_loop.thisTrialN'
p4738
I0
sg39
F0.93356042260711547
sg34
g752
(S'\x07\xdf\n\x14\x13\x0b$\t\x89h'
tRp4739
sa(dp4740
S'trial_loop.thisTrialN'
p4741
I76
sg3632
g3992
sS'block_loop.thisIndex'
p4742
g3626
sg38
S'right'
p4743
sg58
g62
sS'trial_loop.thisN'
p4744
I76
sg33
g3936
sg63
g64
sS'trial_loop.thisIndex'
p4745
g59
(g98
S'L\x00\x00\x00'
tRp4746
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4747
I0
sg3641
g3999
sS'block_loop.thisRepN'
p4748
I1
sg3644
g3936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4749
I1
sg3646
g3943
sg55
g11
sS'block_loop.thisTrial'
p4750
Nsg69
Vy
sS'block_loop.thisTrialN'
p4751
I0
sg39
F0.61687323845762876
sg34
g752
(S'\x07\xdf\n\x14\x13\x0b*\x08\xe9@'
tRp4752
sa(dp4753
S'trial_loop.thisTrialN'
p4754
I77
sg3632
g4295
sS'block_loop.thisIndex'
p4755
g3626
sg38
S'right'
p4756
sg58
g62
sS'trial_loop.thisN'
p4757
I77
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4758
g59
(g98
S'M\x00\x00\x00'
tRp4759
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4760
I0
sg3641
g4302
sS'block_loop.thisRepN'
p4761
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4762
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4763
Nsg69
Vy
sS'block_loop.thisTrialN'
p4764
I0
sg39
F0.66689578962905216
sg34
g752
(S'\x07\xdf\n\x14\x13\x0b0\x03\x86X'
tRp4765
sa(dp4766
S'trial_loop.thisTrialN'
p4767
I78
sg3632
g4461
sS'block_loop.thisIndex'
p4768
g3626
sg38
S'left'
p4769
sg58
g62
sS'trial_loop.thisN'
p4770
I78
sg33
g4353
sg63
g64
sS'trial_loop.thisIndex'
p4771
g59
(g98
S'N\x00\x00\x00'
tRp4772
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4773
I0
sg3641
g4468
sS'block_loop.thisRepN'
p4774
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4775
I1
sg3646
g4360
sg55
g11
sS'block_loop.thisTrial'
p4776
Nsg69
Vy
sS'block_loop.thisTrialN'
p4777
I0
sg39
F1.0168657689137035
sg34
g752
(S'\x07\xdf\n\x14\x13\x0b5\x0e[\xc8'
tRp4778
sa(dp4779
S'trial_loop.thisTrialN'
p4780
I79
sg3632
g3704
sS'block_loop.thisIndex'
p4781
g3626
sg38
S'left'
p4782
sg58
g62
sS'trial_loop.thisN'
p4783
I79
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p4784
g59
(g98
S'O\x00\x00\x00'
tRp4785
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4786
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4787
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4788
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p4789
Nsg69
Vy
sS'block_loop.thisTrialN'
p4790
I0
sg39
F0.86721663780554081
sg34
g752
(S'\x07\xdf\n\x14\x13\x0b;\x0e\xecP'
tRp4791
sa(dp4792
S'trial_loop.thisTrialN'
p4793
I80
sg3632
g4050
sS'block_loop.thisIndex'
p4794
g3626
sg38
S'left'
p4795
sg58
g62
sS'trial_loop.thisN'
p4796
I80
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p4797
g59
(g98
S'P\x00\x00\x00'
tRp4798
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4799
I0
sg3641
g4058
sS'block_loop.thisRepN'
p4800
I1
sg3644
g4054
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4801
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p4802
Nsg69
Vy
sS'block_loop.thisTrialN'
p4803
I0
sg39
F1.0334441600462014
sg34
g752
(S'\x07\xdf\n\x14\x13\x0c\x05\r\x94\x90'
tRp4804
sa(dp4805
S'trial_loop.thisTrialN'
p4806
I81
sg3632
g3633
sS'block_loop.thisIndex'
p4807
g3626
sg38
S'left'
p4808
sg58
g62
sS'trial_loop.thisN'
p4809
I81
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4810
g59
(g98
S'Q\x00\x00\x00'
tRp4811
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4812
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4813
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4814
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4815
Nsg69
Vy
sS'block_loop.thisTrialN'
p4816
I0
sg39
F0.63353373752397601
sg34
g752
(S'\x07\xdf\n\x14\x13\x0c\x0b\x0ec\x98'
tRp4817
sa(dp4818
S'trial_loop.thisTrialN'
p4819
I82
sg3632
g3670
sS'block_loop.thisIndex'
p4820
g3626
sg38
S'left'
p4821
sg58
g62
sS'trial_loop.thisN'
p4822
I82
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4823
g59
(g98
S'R\x00\x00\x00'
tRp4824
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4825
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4826
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4827
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4828
Nsg69
Vy
sS'block_loop.thisTrialN'
p4829
I0
sg39
F0.88352589735586662
sg34
g752
(S'\x07\xdf\n\x14\x13\x0c\x11\t}\xb0'
tRp4830
sa(dp4831
S'trial_loop.thisTrialN'
p4832
I83
sg3632
g4110
sS'block_loop.thisIndex'
p4833
g3626
sg38
S'right'
p4834
sg58
g62
sS'trial_loop.thisN'
p4835
I83
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p4836
g59
(g98
S'S\x00\x00\x00'
tRp4837
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4838
I0
sg3641
g4117
sS'block_loop.thisRepN'
p4839
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4840
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p4841
Nsg69
Vy
sS'block_loop.thisTrialN'
p4842
I0
sg39
F0.61688635292011895
sg34
g752
(S'\x07\xdf\n\x14\x13\x0c\x17\x08%\xf0'
tRp4843
sa(dp4844
S'trial_loop.thisTrialN'
p4845
I84
sg3632
g4207
sS'block_loop.thisIndex'
p4846
g3626
sg38
S'right'
p4847
sg58
g62
sS'trial_loop.thisN'
p4848
I84
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4849
g59
(g98
S'T\x00\x00\x00'
tRp4850
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4851
I0
sg3641
g4214
sS'block_loop.thisRepN'
p4852
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4853
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4854
Nsg69
Vy
sS'block_loop.thisTrialN'
p4855
I0
sg39
F0.8668505732457561
sg34
g752
(S'\x07\xdf\n\x14\x13\x0c\x1d\x02\xc3\x08'
tRp4856
sa(dp4857
S'trial_loop.thisTrialN'
p4858
I85
sg3632
g3704
sS'block_loop.thisIndex'
p4859
g3626
sg38
S'left'
p4860
sg58
g62
sS'trial_loop.thisN'
p4861
I85
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p4862
g59
(g98
S'U\x00\x00\x00'
tRp4863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4864
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4865
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4866
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p4867
Nsg69
Vy
sS'block_loop.thisTrialN'
p4868
I0
sg39
F0.83348994662446785
sg34
g752
(S'\x07\xdf\n\x14\x13\x0c#\x010\xb0'
tRp4869
sa(dp4870
S'trial_loop.thisTrialN'
p4871
I86
sg3632
g3898
sS'block_loop.thisIndex'
p4872
g3626
sg38
S'left'
p4873
sg58
g62
sS'trial_loop.thisN'
p4874
I86
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p4875
g59
(g98
S'V\x00\x00\x00'
tRp4876
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4877
I0
sg3641
g3906
sS'block_loop.thisRepN'
p4878
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4879
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p4880
Nsg69
Vy
sS'block_loop.thisTrialN'
p4881
I0
sg39
F0.90017014589466271
sg34
g752
(S'\x07\xdf\n\x14\x13\x0c(\x0eg\x80'
tRp4882
sa(dp4883
S'trial_loop.thisTrialN'
p4884
I87
sg3632
g3653
sS'block_loop.thisIndex'
p4885
g3626
sg38
S'right'
p4886
sg58
g62
sS'trial_loop.thisN'
p4887
I87
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p4888
g59
(g98
S'W\x00\x00\x00'
tRp4889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4890
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4891
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4892
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4893
Nsg69
Vy
sS'block_loop.thisTrialN'
p4894
I0
sg39
F1.3001629614518606
sg34
g752
(S'\x07\xdf\n\x14\x13\x0c.\r\x88\xd8'
tRp4895
sa(dp4896
S'trial_loop.thisTrialN'
p4897
I88
sg3632
g3881
sS'block_loop.thisIndex'
p4898
g3626
sg38
S'left'
p4899
sg58
g62
sS'trial_loop.thisN'
p4900
I88
sg33
g3885
sg63
g64
sS'trial_loop.thisIndex'
p4901
g59
(g98
S'X\x00\x00\x00'
tRp4902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4903
I0
sg3641
g3889
sS'block_loop.thisRepN'
p4904
I1
sg3644
g3885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4905
I1
sg3646
g3892
sg55
g11
sS'block_loop.thisTrial'
p4906
Nsg69
Vy
sS'block_loop.thisTrialN'
p4907
I0
sg39
F0.76691865441171103
sg34
g752
(S'\x07\xdf\n\x14\x13\x0c5\x03_H'
tRp4908
sa(dp4909
S'trial_loop.thisTrialN'
p4910
I89
sg3632
g4349
sS'block_loop.thisIndex'
p4911
g3626
sg38
S'right'
p4912
sg58
g62
sS'trial_loop.thisN'
p4913
I89
sg33
g4353
sg63
g64
sS'trial_loop.thisIndex'
p4914
g59
(g98
S'Y\x00\x00\x00'
tRp4915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4916
I0
sg3641
g4357
sS'block_loop.thisRepN'
p4917
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4918
I1
sg3646
g4360
sg55
g11
sS'block_loop.thisTrial'
p4919
Nsg69
Vy
sS'block_loop.thisTrialN'
p4920
I0
sg39
F1.0001325701086898
sg34
g752
(S'\x07\xdf\n\x14\x13\x0c;\x00]\xc0'
tRp4921
sa(dp4922
S'trial_loop.thisTrialN'
p4923
I90
sg3632
g3992
sS'block_loop.thisIndex'
p4924
g3626
sg38
S'right'
p4925
sg58
g62
sS'trial_loop.thisN'
p4926
I90
sg33
g3936
sg63
g64
sS'trial_loop.thisIndex'
p4927
g59
(g98
S'Z\x00\x00\x00'
tRp4928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4929
I0
sg3641
g3999
sS'block_loop.thisRepN'
p4930
I1
sg3644
g3936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4931
I1
sg3646
g3943
sg55
g11
sS'block_loop.thisTrial'
p4932
Nsg69
Vy
sS'block_loop.thisTrialN'
p4933
I0
sg39
F0.85028985812823521
sg34
g752
(S'\x07\xdf\n\x14\x13\r\x05\x00\xb3\xb0'
tRp4934
sa(dp4935
S'trial_loop.thisTrialN'
p4936
I91
sg3632
g4080
sS'block_loop.thisIndex'
p4937
g3626
sg38
S'right'
p4938
sg58
g62
sS'trial_loop.thisN'
p4939
I91
sg33
g4084
sg63
g64
sS'trial_loop.thisIndex'
p4940
g59
(g98
S'[\x00\x00\x00'
tRp4941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4942
I0
sg3641
g4088
sS'block_loop.thisRepN'
p4943
I1
sg3644
g4084
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4944
I1
sg3646
g4091
sg55
g11
sS'block_loop.thisTrial'
p4945
Nsg69
Vy
sS'block_loop.thisTrialN'
p4946
I0
sg39
F2.333485385071981
sg34
g752
(S'\x07\xdf\n\x14\x13\r\n\x0e%\x18'
tRp4947
sa(dp4948
S'trial_loop.thisTrialN'
p4949
I92
sg3632
g3915
sS'block_loop.thisIndex'
p4950
g3626
sg38
S'left'
p4951
sg58
g62
sS'trial_loop.thisN'
p4952
I92
sg33
g3919
sg63
g64
sS'trial_loop.thisIndex'
p4953
g59
(g98
S'\\\x00\x00\x00'
tRp4954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4955
I0
sg3641
g3923
sS'block_loop.thisRepN'
p4956
I1
sg3644
g3919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4957
I1
sg3646
g3926
sg55
g11
sS'block_loop.thisTrial'
p4958
Nsg69
Vy
sS'block_loop.thisTrialN'
p4959
I0
sg39
F1.1001055429151165
sg34
g752
(S'\x07\xdf\n\x14\x13\r\x12\x04\xabP'
tRp4960
sa(dp4961
S'trial_loop.thisTrialN'
p4962
I93
sg3632
g4110
sS'block_loop.thisIndex'
p4963
g3626
sg38
S'right'
p4964
sg58
g62
sS'trial_loop.thisN'
p4965
I93
sg33
g3800
sg63
g64
sS'trial_loop.thisIndex'
p4966
g59
(g98
S']\x00\x00\x00'
tRp4967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4968
I0
sg3641
g4117
sS'block_loop.thisRepN'
p4969
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4970
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p4971
Nsg69
Vy
sS'block_loop.thisTrialN'
p4972
I0
sg39
F0.7502019912317337
sg34
g752
(S'\x07\xdf\n\x14\x13\r\x18\x06\xab\x08'
tRp4973
sa(dp4974
S'trial_loop.thisTrialN'
p4975
I94
sg3632
g3932
sS'block_loop.thisIndex'
p4976
g3626
sg38
S'left'
p4977
sg58
g62
sS'trial_loop.thisN'
p4978
I94
sg33
g3943
sg63
g64
sS'trial_loop.thisIndex'
p4979
g59
(g98
S'^\x00\x00\x00'
tRp4980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4981
I0
sg3641
g3940
sS'block_loop.thisRepN'
p4982
I1
sg3644
g3936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4983
I1
sg3646
g3943
sg55
g11
sS'block_loop.thisTrial'
p4984
Nsg69
Vy
sS'block_loop.thisTrialN'
p4985
I0
sg39
F0.76685935422938201
sg34
g752
(S'\x07\xdf\n\x14\x13\r\x1e\x03k\x00'
tRp4986
sa(dp4987
S'trial_loop.thisTrialN'
p4988
I95
sg3632
g4608
sS'block_loop.thisIndex'
p4989
g3626
sg38
S'right'
p4990
sg58
g62
sS'trial_loop.thisN'
p4991
I95
sg33
g3885
sg63
g64
sS'trial_loop.thisIndex'
p4992
g59
(g98
S'_\x00\x00\x00'
tRp4993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4994
I0
sg3641
g4615
sS'block_loop.thisRepN'
p4995
I1
sg3644
g3885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4996
I1
sg3646
g3892
sg55
g11
sS'block_loop.thisTrial'
p4997
Nsg69
Vy
sS'block_loop.thisTrialN'
p4998
I0
sg39
F0.98353878374109627
sg34
g752
(S'\x07\xdf\n\x14\x13\r$\x00.\xe0'
tRp4999
sa(dp5000
S'trial_loop.thisTrialN'
p5001
I96
sg3632
g4250
sS'block_loop.thisIndex'
p5002
g3626
sg38
S'right'
p5003
sg58
g62
sS'trial_loop.thisN'
p5004
I96
sg33
g3827
sg63
g64
sS'trial_loop.thisIndex'
p5005
g59
(g98
S'`\x00\x00\x00'
tRp5006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5007
I0
sg3641
g4257
sS'block_loop.thisRepN'
p5008
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5009
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p5010
Nsg69
Vy
sS'block_loop.thisTrialN'
p5011
I0
sg39
F0.90018896229958045
sg34
g752
(S'\x07\xdf\n\x14\x13\r*\x00\x80\xe8'
tRp5012
sa(dp5013
S'trial_loop.thisTrialN'
p5014
I97
sg3632
g3964
sS'block_loop.thisIndex'
p5015
g3626
sg38
S'right'
p5016
sg58
g62
sS'trial_loop.thisN'
p5017
I97
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p5018
g59
(g98
S'a\x00\x00\x00'
tRp5019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5020
I0
sg3641
g3971
sS'block_loop.thisRepN'
p5021
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5022
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p5023
Nsg69
Vy
sS'block_loop.thisTrialN'
p5024
I0
sg39
F0.93351480708224699
sg34
g752
(S'\x07\xdf\n\x14\x13\r/\x0e\xa9\xe8'
tRp5025
sa(dp5026
S'trial_loop.thisTrialN'
p5027
I98
sg3632
g4675
sS'block_loop.thisIndex'
p5028
g3626
sg38
S'right'
p5029
sg58
g62
sS'trial_loop.thisN'
p5030
I98
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p5031
g59
(g98
S'b\x00\x00\x00'
tRp5032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5033
I0
sg3641
g4682
sS'block_loop.thisRepN'
p5034
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5035
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5036
Nsg69
Vy
sS'block_loop.thisTrialN'
p5037
I0
sg39
F1.3501712577744911
sg34
g752
(S'\x07\xdf\n\x14\x13\r5\x0eH@'
tRp5038
sa(dp5039
S'trial_loop.thisTrialN'
p5040
I99
sg3632
g3738
sS'block_loop.thisIndex'
p5041
g3626
sg38
S'right'
p5042
sg58
g62
sS'trial_loop.thisN'
p5043
I99
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5044
g59
(g98
S'c\x00\x00\x00'
tRp5045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5046
I0
sg3641
g3746
sS'block_loop.thisRepN'
p5047
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5048
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5049
Nsg69
Vy
sS'block_loop.thisTrialN'
p5050
I0
sg39
F0.8168151927056897
sg34
g752
(S'\x07\xdf\n\x14\x13\x0e\x00\x04\xd6H'
tRp5051
sa(dp5052
S'trial_loop.thisTrialN'
p5053
I100
sg3632
g4153
sS'block_loop.thisIndex'
p5054
g3626
sg38
S'right'
p5055
sg58
g62
sS'trial_loop.thisN'
p5056
I100
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5057
g59
(g98
S'd\x00\x00\x00'
tRp5058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5059
I0
sg3641
g4160
sS'block_loop.thisRepN'
p5060
I1
sg3644
g3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5061
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5062
Nsg69
Vy
sS'block_loop.thisTrialN'
p5063
I0
sg39
F1.9335467379496549
sg34
g752
(S'\x07\xdf\n\x14\x13\x0e\x06\x02\x8cX'
tRp5064
sa(dp5065
S'trial_loop.thisTrialN'
p5066
I101
sg3632
g3881
sS'block_loop.thisIndex'
p5067
g3626
sg38
S'left'
p5068
sg58
g62
sS'trial_loop.thisN'
p5069
I101
sg33
g3885
sg63
g64
sS'trial_loop.thisIndex'
p5070
g59
(g98
S'e\x00\x00\x00'
tRp5071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5072
I0
sg3641
g3889
sS'block_loop.thisRepN'
p5073
I1
sg3644
g3885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5074
I1
sg3646
g3892
sg55
g11
sS'block_loop.thisTrial'
p5075
Nsg69
Vy
sS'block_loop.thisTrialN'
p5076
I0
sg39
F1.1001856551738456
sg34
g752
(S'\x07\xdf\n\x14\x13\x0e\r\x02"\xe0'
tRp5077
sa(dp5078
S'trial_loop.thisTrialN'
p5079
I102
sg3632
g4405
sS'block_loop.thisIndex'
p5080
g3626
sg38
S'right'
p5081
sg58
g62
sS'trial_loop.thisN'
p5082
I102
sg33
g4061
sg63
g64
sS'trial_loop.thisIndex'
p5083
g59
(g98
S'f\x00\x00\x00'
tRp5084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5085
I0
sg3641
g4412
sS'block_loop.thisRepN'
p5086
I1
sg3644
g4054
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5087
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p5088
Nsg69
Vy
sS'block_loop.thisTrialN'
p5089
I0
sg39
F0.75005374078682507
sg34
g752
(S'\x07\xdf\n\x14\x13\x0e\x13\x04"\x98'
tRp5090
sa(dp5091
S'trial_loop.thisTrialN'
p5092
I103
sg3632
g4222
sS'block_loop.thisIndex'
p5093
g3626
sg38
S'right'
p5094
sg58
g62
sS'trial_loop.thisN'
p5095
I103
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p5096
g59
(g98
S'g\x00\x00\x00'
tRp5097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5098
I0
sg3641
g4229
sS'block_loop.thisRepN'
p5099
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5100
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p5101
Nsg69
Vy
sS'block_loop.thisTrialN'
p5102
I0
sg39
F1.0000977882773441
sg34
g752
(S'\x07\xdf\n\x14\x13\x0e\x19\x00\xa7\xf8'
tRp5103
sa(dp5104
S'trial_loop.thisTrialN'
p5105
I104
sg3632
g4461
sS'block_loop.thisIndex'
p5106
g3626
sg38
S'left'
p5107
sg58
g62
sS'trial_loop.thisN'
p5108
I104
sg33
g4353
sg63
g64
sS'trial_loop.thisIndex'
p5109
g59
(g98
S'h\x00\x00\x00'
tRp5110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5111
I0
sg3641
g4468
sS'block_loop.thisRepN'
p5112
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5113
I1
sg3646
g4360
sg55
g11
sS'block_loop.thisTrial'
p5114
Nsg69
Vy
sS'block_loop.thisTrialN'
p5115
I0
sg39
F0.88351791464083362
sg34
g752
(S'\x07\xdf\n\x14\x13\x0e\x1f\x018\x80'
tRp5116
sa(dp5117
S'trial_loop.thisTrialN'
p5118
I105
sg3632
g3687
sS'block_loop.thisIndex'
p5119
g3626
sg38
S'left'
p5120
sg58
g62
sS'trial_loop.thisN'
p5121
I105
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5122
g59
(g98
S'i\x00\x00\x00'
tRp5123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5124
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5125
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5126
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5127
Nsg69
Vy
sS'block_loop.thisTrialN'
p5128
I0
sg39
F0.7834668252580741
sg34
g752
(S'\x07\xdf\n\x14\x13\x0e$\x0f#\x00'
tRp5129
sa(dp5130
S'trial_loop.thisTrialN'
p5131
I106
sg3632
S'18-mms.png'
p5132
sS'block_loop.thisIndex'
p5133
g3626
sg38
S'left'
p5134
sg58
g62
sS'trial_loop.thisN'
p5135
I106
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5136
g59
(g98
S'j\x00\x00\x00'
tRp5137
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5138
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p5139
sS'block_loop.thisRepN'
p5140
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5141
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5142
Nsg69
Vy
sS'block_loop.thisTrialN'
p5143
I0
sg39
F0.70052440744257183
sg34
g752
(S'\x07\xdf\n\x14\x13\x0e*\x0c_\xf8'
tRp5144
sa(dp5145
S'trial_loop.thisTrialN'
p5146
I107
sg3632
g4207
sS'block_loop.thisIndex'
p5147
g3626
sg38
S'right'
p5148
sg58
g62
sS'trial_loop.thisN'
p5149
I107
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5150
g59
(g98
S'k\x00\x00\x00'
tRp5151
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5152
I0
sg3641
g4214
sS'block_loop.thisRepN'
p5153
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5154
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5155
Nsg69
Vy
sS'block_loop.thisTrialN'
p5156
I0
sg39
F1.5168369741186325
sg34
g752
(S'\x07\xdf\n\x14\x13\x0e0\x08l@'
tRp5157
sa(dp5158
S'trial_loop.thisTrialN'
p5159
I108
sg3632
g4675
sS'block_loop.thisIndex'
p5160
g3626
sg38
S'right'
p5161
sg58
g62
sS'trial_loop.thisN'
p5162
I108
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5163
g59
(g98
S'l\x00\x00\x00'
tRp5164
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5165
I0
sg3641
g4682
sS'block_loop.thisRepN'
p5166
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5167
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5168
Nsg69
Vy
sS'block_loop.thisTrialN'
p5169
I0
sg39
F0.80013445174699882
sg34
g752
(S'\x07\xdf\n\x14\x13\x0e7\x01\x96@'
tRp5170
sa(dp5171
S'trial_loop.thisTrialN'
p5172
I109
sg3632
g3898
sS'block_loop.thisIndex'
p5173
g3626
sg38
S'left'
p5174
sg58
g62
sS'trial_loop.thisN'
p5175
I109
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p5176
g59
(g98
S'm\x00\x00\x00'
tRp5177
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5178
I0
sg3641
g3906
sS'block_loop.thisRepN'
p5179
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5180
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p5181
Nsg69
Vy
sS'block_loop.thisTrialN'
p5182
I0
sg39
F0.80019546251060092
sg34
g752
(S'\x07\xdf\n\x14\x13\x0f\x00\x0eP\x10'
tRp5183
sa(dp5184
S'trial_loop.thisTrialN'
p5185
I110
sg3632
g3670
sS'block_loop.thisIndex'
p5186
g3626
sg38
S'left'
p5187
sg58
g62
sS'trial_loop.thisN'
p5188
I110
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p5189
g59
(g98
S'n\x00\x00\x00'
tRp5190
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5191
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5192
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5193
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5194
Nsg69
Vy
sS'block_loop.thisTrialN'
p5195
I0
sg39
F0.76677924197065295
sg34
g752
(S'\x07\xdf\n\x14\x13\x0f\x06\x0b\xcb\x88'
tRp5196
sa(dp5197
S'trial_loop.thisTrialN'
p5198
I111
sg3632
g3964
sS'block_loop.thisIndex'
p5199
g3626
sg38
S'right'
p5200
sg58
g62
sS'trial_loop.thisN'
p5201
I111
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5202
g59
(g98
S'o\x00\x00\x00'
tRp5203
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5204
I0
sg3641
g3971
sS'block_loop.thisRepN'
p5205
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5206
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p5207
Nsg69
Vy
sS'block_loop.thisTrialN'
p5208
I0
sg39
F1.6505386337812524
sg34
g752
(S'\x07\xdf\n\x14\x13\x0f\x0c\x08\x8b\x80'
tRp5209
sa(dp5210
S'trial_loop.thisTrialN'
p5211
I112
sg3632
g3853
sS'block_loop.thisIndex'
p5212
g3626
sg38
S'right'
p5213
sg58
g62
sS'trial_loop.thisN'
p5214
I112
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5215
g59
(g98
S'p\x00\x00\x00'
tRp5216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5217
I0
sg3641
g3860
sS'block_loop.thisRepN'
p5218
I1
sg3644
g3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5219
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p5220
Nsg69
Vy
sS'block_loop.thisTrialN'
p5221
I0
sg39
F1.3834594697545981
sg34
g752
(S'\x07\xdf\n\x14\x13\x0f\x13\x03\xdcH'
tRp5222
sa(dp5223
S'trial_loop.thisTrialN'
p5224
I113
sg3632
g4405
sS'block_loop.thisIndex'
p5225
g3626
sg38
S'right'
p5226
sg58
g62
sS'trial_loop.thisN'
p5227
I113
sg33
g4061
sg63
g64
sS'trial_loop.thisIndex'
p5228
g59
(g98
S'q\x00\x00\x00'
tRp5229
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5230
I0
sg3641
g4412
sS'block_loop.thisRepN'
p5231
I1
sg3644
g4054
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5232
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p5233
Nsg69
Vy
sS'block_loop.thisTrialN'
p5234
I0
sg39
F0.66676065364663373
sg34
g752
(S'\x07\xdf\n\x14\x13\x0f\x19\n!\xc0'
tRp5235
sa(dp5236
S'trial_loop.thisTrialN'
p5237
I114
sg3632
g5132
sS'block_loop.thisIndex'
p5238
g3626
sg38
S'left'
p5239
sg58
g62
sS'trial_loop.thisN'
p5240
I114
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5241
g59
(g98
S'r\x00\x00\x00'
tRp5242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5243
I0
sg3641
g5139
sS'block_loop.thisRepN'
p5244
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5245
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5246
Nsg69
Vy
sS'block_loop.thisTrialN'
p5247
I0
sg39
F0.75014098047176958
sg34
g752
(S'\x07\xdf\n\x14\x13\x0f\x1f\x05vp'
tRp5248
sa(dp5249
S'trial_loop.thisTrialN'
p5250
I115
sg3632
g3772
sS'block_loop.thisIndex'
p5251
g3626
sg38
S'left'
p5252
sg58
g62
sS'trial_loop.thisN'
p5253
I115
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5254
g59
(g98
S's\x00\x00\x00'
tRp5255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5256
I0
sg3641
g3780
sS'block_loop.thisRepN'
p5257
I1
sg3644
g3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5258
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p5259
Nsg69
Vy
sS'block_loop.thisTrialN'
p5260
I0
sg39
F1.0167828056837607
sg34
g752
(S'\x07\xdf\n\x14\x13\x0f%\x02:P'
tRp5261
sa(dp5262
S'trial_loop.thisTrialN'
p5263
I116
sg3632
g5132
sS'block_loop.thisIndex'
p5264
g3626
sg38
S'left'
p5265
sg58
g62
sS'trial_loop.thisN'
p5266
I116
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5267
g59
(g98
S't\x00\x00\x00'
tRp5268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5269
I0
sg3641
g5139
sS'block_loop.thisRepN'
p5270
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5271
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5272
Nsg69
Vy
sS'block_loop.thisTrialN'
p5273
I0
sg39
F0.63350750859899563
sg34
g752
(S'\x07\xdf\n\x14\x13\x0f+\x03\tX'
tRp5274
sa(dp5275
S'trial_loop.thisTrialN'
p5276
I117
sg3632
g3789
sS'block_loop.thisIndex'
p5277
g3626
sg38
S'left'
p5278
sg58
g62
sS'trial_loop.thisN'
p5279
I117
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p5280
g59
(g98
S'u\x00\x00\x00'
tRp5281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5282
I0
sg3641
g3797
sS'block_loop.thisRepN'
p5283
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5284
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5285
Nsg69
Vy
sS'block_loop.thisTrialN'
p5286
I0
sg39
F0.75017547720926814
sg34
g752
(S"\x07\xdf\n\x14\x13\x0f0\r'0"
tRp5287
sa(dp5288
S'trial_loop.thisTrialN'
p5289
I118
sg3632
g4125
sS'block_loop.thisIndex'
p5290
g3626
sg38
S'right'
p5291
sg58
g62
sS'trial_loop.thisN'
p5292
I118
sg33
g3766
sg63
g64
sS'trial_loop.thisIndex'
p5293
g59
(g98
S'v\x00\x00\x00'
tRp5294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5295
I0
sg3641
g4132
sS'block_loop.thisRepN'
p5296
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5297
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5298
Nsg69
Vy
sS'block_loop.thisTrialN'
p5299
I0
sg39
F1.0501249010012543
sg34
g752
(S'\x07\xdf\n\x14\x13\x0f6\t\xe7('
tRp5300
sa(dp5301
S'trial_loop.thisTrialN'
p5302
I119
sg3632
g3789
sS'block_loop.thisIndex'
p5303
g3626
sg38
S'left'
p5304
sg58
g62
sS'trial_loop.thisN'
p5305
I119
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p5306
g59
(g98
S'w\x00\x00\x00'
tRp5307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5308
I0
sg3641
g3797
sS'block_loop.thisRepN'
p5309
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5310
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5311
Nsg69
Vy
sS'block_loop.thisTrialN'
p5312
I0
sg39
F0.8001281796132389
sg34
g752
(S'\x07\xdf\n\x14\x13\x10\x00\x0b/H'
tRp5313
sa(dp5314
S'trial_loop.thisTrialN'
p5315
I120
sg3632
g4280
sS'block_loop.thisIndex'
p5316
g3626
sg38
S'left'
p5317
sg58
g62
sS'trial_loop.thisN'
p5318
I120
sg33
g3816
sg63
g64
sS'trial_loop.thisIndex'
p5319
g59
(g98
S'x\x00\x00\x00'
tRp5320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5321
I0
sg3641
g4287
sS'block_loop.thisRepN'
p5322
I1
sg3644
g3816
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5323
I1
sg3646
g3810
sg55
g11
sS'block_loop.thisTrial'
p5324
Nsg69
Vy
sS'block_loop.thisTrialN'
p5325
I0
sg39
F0.86678870719333645
sg34
g752
(S'\x07\xdf\n\x14\x13\x10\x06\x08\xaa\xc0'
tRp5326
sa(dp5327
S'trial_loop.thisTrialN'
p5328
I121
sg3632
g3949
sS'block_loop.thisIndex'
p5329
g3626
sg38
S'left'
p5330
sg58
g62
sS'trial_loop.thisN'
p5331
I121
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p5332
g59
(g98
S'y\x00\x00\x00'
tRp5333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5334
I0
sg3641
g3956
sS'block_loop.thisRepN'
p5335
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5336
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5337
Nsg69
Vy
sS'block_loop.thisTrialN'
p5338
I0
sg39
F0.83355238286821987
sg34
g752
(S'\x07\xdf\n\x14\x13\x10\x0c\x07\x14\x80'
tRp5339
sa(dp5340
S'trial_loop.thisTrialN'
p5341
I122
sg3632
g3633
sS'block_loop.thisIndex'
p5342
g3626
sg38
S'left'
p5343
sg58
g62
sS'trial_loop.thisN'
p5344
I122
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5345
g59
(g98
S'z\x00\x00\x00'
tRp5346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5347
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5348
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5349
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5350
Nsg69
Vy
sS'block_loop.thisTrialN'
p5351
I0
sg39
F0.75009308417429565
sg34
g752
(S'\x07\xdf\n\x14\x13\x10\x12\x05\t\x10'
tRp5352
sa(dp5353
S'trial_loop.thisTrialN'
p5354
I123
sg3632
g4265
sS'block_loop.thisIndex'
p5355
g3626
sg38
S'left'
p5356
sg58
g62
sS'trial_loop.thisN'
p5357
I123
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p5358
g59
(g98
S'{\x00\x00\x00'
tRp5359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5360
I0
sg3641
g4272
sS'block_loop.thisRepN'
p5361
I1
sg3644
g4037
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5362
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p5363
Nsg69
Vy
sS'block_loop.thisTrialN'
p5364
I0
sg39
F0.9835721400922921
sg34
g752
(S'\x07\xdf\n\x14\x13\x10\x18\x01\xcc\xf0'
tRp5365
sa(dp5366
S'trial_loop.thisTrialN'
p5367
I124
sg3632
g3755
sS'block_loop.thisIndex'
p5368
g3626
sg38
S'left'
p5369
sg58
g62
sS'trial_loop.thisN'
p5370
I124
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5371
g59
(g98
S'|\x00\x00\x00'
tRp5372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5373
I0
sg3641
g3763
sS'block_loop.thisRepN'
p5374
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5375
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5376
Nsg69
Vy
sS'block_loop.thisTrialN'
p5377
I0
sg39
F0.66696848936771858
sg34
g752
(S'\x07\xdf\n\x14\x13\x10\x1e\x02\x1e\xf8'
tRp5378
sa(dp5379
S'trial_loop.thisTrialN'
p5380
I125
sg3632
g5132
sS'block_loop.thisIndex'
p5381
g3626
sg38
S'left'
p5382
sg58
g62
sS'trial_loop.thisN'
p5383
I125
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5384
g59
(g98
S'}\x00\x00\x00'
tRp5385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5386
I0
sg3641
g5139
sS'block_loop.thisRepN'
p5387
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5388
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5389
Nsg69
Vy
sS'block_loop.thisTrialN'
p5390
I0
sg39
F0.75011788761185016
sg34
g752
(S'\x07\xdf\n\x14\x13\x10#\x0c\xb5\xe8'
tRp5391
sa(dp5392
S'trial_loop.thisTrialN'
p5393
I126
sg3632
g3853
sS'block_loop.thisIndex'
p5394
g3626
sg38
S'right'
p5395
sg58
g62
sS'trial_loop.thisN'
p5396
I126
sg33
g3782
sg63
g64
sS'trial_loop.thisIndex'
p5397
g59
(g98
S'~\x00\x00\x00'
tRp5398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5399
I0
sg3641
g3860
sS'block_loop.thisRepN'
p5400
I1
sg3644
g3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5401
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p5402
Nsg69
Vy
sS'block_loop.thisTrialN'
p5403
I0
sg39
F1.0002366305161559
sg34
g752
(S'\x07\xdf\n\x14\x13\x10)\ty\xc8'
tRp5404
sa(dp5405
S'trial_loop.thisTrialN'
p5406
I127
sg3632
g3881
sS'block_loop.thisIndex'
p5407
g3626
sg38
S'left'
p5408
sg58
g62
sS'trial_loop.thisN'
p5409
I127
sg33
g3885
sg63
g64
sS'trial_loop.thisIndex'
p5410
g59
(g98
S'\x7f\x00\x00\x00'
tRp5411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5412
I0
sg3641
g3889
sS'block_loop.thisRepN'
p5413
I1
sg3644
g3885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5414
I1
sg3646
g3892
sg55
g11
sS'block_loop.thisTrial'
p5415
Nsg69
Vy
sS'block_loop.thisTrialN'
p5416
I0
sg39
F0.91679443764223834
sg34
g752
(S'\x07\xdf\n\x14\x13\x10/\t\xcb\xd0'
tRp5417
sa(dp5418
S'trial_loop.thisTrialN'
p5419
I128
sg3632
g4207
sS'block_loop.thisIndex'
p5420
g3626
sg38
S'right'
p5421
sg58
g62
sS'trial_loop.thisN'
p5422
I128
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5423
g59
(g98
S'\x80\x00\x00\x00'
tRp5424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5425
I0
sg3641
g4214
sS'block_loop.thisRepN'
p5426
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5427
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5428
Nsg69
Vy
sS'block_loop.thisTrialN'
p5429
I0
sg39
F2.9671762110483542
sg34
g752
(S'\x07\xdf\n\x14\x13\x105\t/\x90'
tRp5430
sa(dp5431
S'trial_loop.thisTrialN'
p5432
I129
sg3632
g3853
sS'block_loop.thisIndex'
p5433
g3626
sg38
S'right'
p5434
sg58
g62
sS'trial_loop.thisN'
p5435
I129
sg33
g3782
sg63
g64
sS'trial_loop.thisIndex'
p5436
g59
(g98
S'\x81\x00\x00\x00'
tRp5437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5438
I0
sg3641
g3860
sS'block_loop.thisRepN'
p5439
I1
sg3644
g3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5440
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p5441
Nsg69
Vy
sS'block_loop.thisTrialN'
p5442
I0
sg39
F1.7834297626468469
sg34
g752
(S'\x07\xdf\n\x14\x13\x11\x01\t7`'
tRp5443
sa(dp5444
S'trial_loop.thisTrialN'
p5445
I130
sg3632
g4110
sS'block_loop.thisIndex'
p5446
g3626
sg38
S'right'
p5447
sg58
g62
sS'trial_loop.thisN'
p5448
I130
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p5449
g59
(g98
S'\x82\x00\x00\x00'
tRp5450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5451
I0
sg3641
g4117
sS'block_loop.thisRepN'
p5452
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5453
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5454
Nsg69
Vy
sS'block_loop.thisTrialN'
p5455
I0
sg39
F0.7002709561966185
sg34
g752
(S'\x07\xdf\n\x14\x13\x11\x08\x06pp'
tRp5456
sa(dp5457
S'trial_loop.thisTrialN'
p5458
I131
sg3632
g4050
sS'block_loop.thisIndex'
p5459
g3626
sg38
S'left'
p5460
sg58
g62
sS'trial_loop.thisN'
p5461
I131
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p5462
g59
(g98
S'\x83\x00\x00\x00'
tRp5463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5464
I0
sg3641
g4058
sS'block_loop.thisRepN'
p5465
I1
sg3644
g4054
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5466
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p5467
Nsg69
Vy
sS'block_loop.thisTrialN'
p5468
I0
sg39
F0.65011612001035246
sg34
g752
(S'\x07\xdf\n\x14\x13\x11\x0e\x02>8'
tRp5469
sa(dp5470
S'trial_loop.thisTrialN'
p5471
I132
sg3632
g4295
sS'block_loop.thisIndex'
p5472
g3626
sg38
S'right'
p5473
sg58
g62
sS'trial_loop.thisN'
p5474
I132
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5475
g59
(g98
S'\x84\x00\x00\x00'
tRp5476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5477
I0
sg3641
g4302
sS'block_loop.thisRepN'
p5478
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5479
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5480
Nsg69
Vy
sS'block_loop.thisTrialN'
p5481
I0
sg39
F0.73354776429550839
sg34
g752
(S'\x07\xdf\n\x14\x13\x11\x13\x0c\x96\xa8'
tRp5482
sa(dp5483
S'trial_loop.thisTrialN'
p5484
I133
sg3632
g4405
sS'block_loop.thisIndex'
p5485
g3626
sg38
S'right'
p5486
sg58
g62
sS'trial_loop.thisN'
p5487
I133
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p5488
g59
(g98
S'\x85\x00\x00\x00'
tRp5489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5490
I0
sg3641
g4412
sS'block_loop.thisRepN'
p5491
I1
sg3644
g4054
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5492
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p5493
Nsg69
Vy
sS'block_loop.thisTrialN'
p5494
I0
sg39
F0.6334165626540198
sg34
g752
(S'\x07\xdf\n\x14\x13\x11\x19\t\x1c\x08'
tRp5495
sa(dp5496
S'trial_loop.thisTrialN'
p5497
I134
sg3632
g3915
sS'block_loop.thisIndex'
p5498
g3626
sg38
S'left'
p5499
sg58
g62
sS'trial_loop.thisN'
p5500
I134
sg33
g3919
sg63
g64
sS'trial_loop.thisIndex'
p5501
g59
(g98
S'\x86\x00\x00\x00'
tRp5502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5503
I0
sg3641
g3923
sS'block_loop.thisRepN'
p5504
I1
sg3644
g3919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5505
I1
sg3646
g3926
sg55
g11
sS'block_loop.thisTrial'
p5506
Nsg69
Vy
sS'block_loop.thisTrialN'
p5507
I0
sg39
F1.0838835230460973
sg34
g752
(S'\x07\xdf\n\x14\x13\x11\x1f\x03\xf7\xa0'
tRp5508
sa(dp5509
S'trial_loop.thisTrialN'
p5510
I135
sg3632
g5132
sS'block_loop.thisIndex'
p5511
g3626
sg38
S'left'
p5512
sg58
g62
sS'trial_loop.thisN'
p5513
I135
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5514
g59
(g98
S'\x87\x00\x00\x00'
tRp5515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5516
I0
sg3641
g5139
sS'block_loop.thisRepN'
p5517
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5518
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5519
Nsg69
Vy
sS'block_loop.thisTrialN'
p5520
I0
sg39
F1.0835191690675856
sg34
g752
(S'\x07\xdf\n\x14\x13\x11%\x05\xb8\xd8'
tRp5521
sa(dp5522
S'trial_loop.thisTrialN'
p5523
I136
sg3632
g4250
sS'block_loop.thisIndex'
p5524
g3626
sg38
S'right'
p5525
sg58
g62
sS'trial_loop.thisN'
p5526
I136
sg33
g3827
sg63
g64
sS'trial_loop.thisIndex'
p5527
g59
(g98
S'\x88\x00\x00\x00'
tRp5528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5529
I0
sg3641
g4257
sS'block_loop.thisRepN'
p5530
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5531
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p5532
Nsg69
Vy
sS'block_loop.thisTrialN'
p5533
I0
sg39
F0.61686696632386884
sg34
g752
(S'\x07\xdf\n\x14\x13\x11+\x07}\xf8'
tRp5534
sa(dp5535
S'trial_loop.thisTrialN'
p5536
I137
sg3632
g3653
sS'block_loop.thisIndex'
p5537
g3626
sg38
S'right'
p5538
sg58
g62
sS'trial_loop.thisN'
p5539
I137
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p5540
g59
(g98
S'\x89\x00\x00\x00'
tRp5541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5542
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5543
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5544
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vy
sS'block_loop.thisTrialN'
p5546
I0
sg39
F1.066829305007559
sg34
g752
(S'\x07\xdf\n\x14\x13\x111\x02U\xa8'
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g3721
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'left'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5556
I1
sg3644
g3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5557
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vy
sS'block_loop.thisTrialN'
p5559
I0
sg39
F2.1832079001542297
sg34
g752
(S'\x07\xdf\n\x14\x13\x117\x03\xdcH'
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g4675
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'right'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g4682
sS'block_loop.thisRepN'
p5569
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5570
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vy
sS'block_loop.thisTrialN'
p5572
I0
sg39
F0.71721484169393079
sg34
g752
(S'\x07\xdf\n\x14\x13\x12\x02\x07\x04\xe0'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g4295
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'right'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g4302
sS'block_loop.thisRepN'
p5582
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5583
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vy
sS'block_loop.thisTrialN'
p5585
I0
sg39
F0.71683879874035483
sg34
g752
(S'\x07\xdf\n\x14\x13\x12\x08\x03O\xa8'
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g4033
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'right'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g4041
sS'block_loop.thisRepN'
p5595
I1
sg3644
g4037
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5596
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vy
sS'block_loop.thisTrialN'
p5598
I0
sg39
F0.55013145823249943
sg34
g752
(S'\x07\xdf\n\x14\x13\x12\r\x0e\x9aH'
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g4405
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'right'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g4412
sS'block_loop.thisRepN'
p5608
I1
sg3644
g4054
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5609
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vy
sS'block_loop.thisTrialN'
p5611
I0
sg39
F0.61674608519024332
sg34
g752
(S'\x07\xdf\n\x14\x13\x12\x13\x08E0'
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g3949
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'left'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g3956
sS'block_loop.thisRepN'
p5621
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5622
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vy
sS'block_loop.thisTrialN'
p5624
I0
sg39
F1.0501844862737926
sg34
g752
(S'\x07\xdf\n\x14\x13\x12\x19\x02\xe2H'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g3772
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'left'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g3780
sS'block_loop.thisRepN'
p5634
I1
sg3644
g3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5635
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vy
sS'block_loop.thisTrialN'
p5637
I0
sg39
F0.7667273543193005
sg34
g752
(S'\x07\xdf\n\x14\x13\x12\x1f\x04*h'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g3915
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'left'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g3919
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g3923
sS'block_loop.thisRepN'
p5647
I1
sg3644
g3919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5648
I1
sg3646
g3926
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vy
sS'block_loop.thisTrialN'
p5650
I0
sg39
F0.81721090735663893
sg34
g752
(S'\x07\xdf\n\x14\x13\x12%\x01,\xc8'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g3772
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'left'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g3782
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g3780
sS'block_loop.thisRepN'
p5660
I1
sg3644
g3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5661
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vy
sS'block_loop.thisTrialN'
p5663
I0
sg39
F0.68345137299911585
sg34
g752
(S'\x07\xdf\n\x14\x13\x12*\x0e%\x18'
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g3789
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'left'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g3797
sS'block_loop.thisRepN'
p5673
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5674
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vy
sS'block_loop.thisTrialN'
p5676
I0
sg39
F0.66692715030148975
sg34
g752
(S'\x07\xdf\n\x14\x13\x120\t\xf2\xe0'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g4461
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'left'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g4353
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g4468
sS'block_loop.thisRepN'
p5686
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5687
I1
sg3646
g4360
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vy
sS'block_loop.thisTrialN'
p5689
I0
sg39
F0.68352350254281191
sg34
g752
(S'\x07\xdf\n\x14\x13\x126\x05G\x90'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g3806
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'right'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g3816
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g3814
sS'block_loop.thisRepN'
p5699
I1
sg3644
g3816
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5700
I1
sg3646
g3810
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vy
sS'block_loop.thisTrialN'
p5702
I0
sg39
F0.86680296204576734
sg34
g752
(S'\x07\xdf\n\x14\x13\x13\x00\x01\x15X'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g4125
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'right'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g4132
sS'block_loop.thisRepN'
p5712
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5713
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vy
sS'block_loop.thisTrialN'
p5715
I0
sg39
F0.93353305329219438
sg34
g752
(S'\x07\xdf\n\x14\x13\x13\x05\x0e\xc5@'
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g4080
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'right'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g4084
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g4088
sS'block_loop.thisRepN'
p5725
I1
sg3644
g4084
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5726
I1
sg3646
g4091
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vy
sS'block_loop.thisTrialN'
p5728
I0
sg39
F0.75055408604021068
sg34
g752
(S'\x07\xdf\n\x14\x13\x13\x0b\x0e%\x18'
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g3881
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'left'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g3885
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g3889
sS'block_loop.thisRepN'
p5738
I1
sg3644
g3885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5739
I1
sg3646
g3892
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vy
sS'block_loop.thisTrialN'
p5741
I0
sg39
F1.1335123552526056
sg34
g752
(S'\x07\xdf\n\x14\x13\x13\x11\n\xe8\xf8'
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g4502
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'right'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g3926
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g4509
sS'block_loop.thisRepN'
p5751
I1
sg3644
g3919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5752
I1
sg3646
g3926
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vy
sS'block_loop.thisTrialN'
p5754
I0
sg39
F0.88343210044331499
sg34
g752
(S'\x07\xdf\n\x14\x13\x13\x17\ra\xc8'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g3789
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'left'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g3797
sS'block_loop.thisRepN'
p5764
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5765
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vy
sS'block_loop.thisTrialN'
p5767
I0
sg39
F0.73344284859922482
sg34
g752
(S'\x07\xdf\n\x14\x13\x13\x1d\x0c\n\x08'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g3915
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'left'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g3919
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g3923
sS'block_loop.thisRepN'
p5777
I1
sg3644
g3919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5778
I1
sg3646
g3926
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vy
sS'block_loop.thisTrialN'
p5780
I0
sg39
F0.85010397487712908
sg34
g752
(S'\x07\xdf\n\x14\x13\x13#\x08\x8fh'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g4033
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'right'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g4044
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g4041
sS'block_loop.thisRepN'
p5790
I1
sg3644
g4037
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5791
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vy
sS'block_loop.thisTrialN'
p5793
I0
sg39
F0.76682742336925003
sg34
g752
(S'\x07\xdf\n\x14\x13\x13)\x06\xbe\x90'
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g3738
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'right'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g3749
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g3746
sS'block_loop.thisRepN'
p5803
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5804
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vy
sS'block_loop.thisTrialN'
p5806
I0
sg39
F0.68392748500627931
sg34
g752
(S'\x07\xdf\n\x14\x13\x13/\x03\xc0\xf0'
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g3932
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'left'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g3943
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g3940
sS'block_loop.thisRepN'
p5816
I1
sg3644
g3936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5817
I1
sg3646
g3943
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vy
sS'block_loop.thisTrialN'
p5819
I0
sg39
F0.83352672413820983
sg34
g752
(S'\x07\xdf\n\x14\x13\x134\x0e\x92x'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g4222
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'right'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g4229
sS'block_loop.thisRepN'
p5829
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5830
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vy
sS'block_loop.thisTrialN'
p5832
I0
sg39
F0.83352330297566368
sg34
g752
(S'\x07\xdf\n\x14\x13\x13:\x0c\xc1\xa0'
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g4033
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'right'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g4041
sS'block_loop.thisRepN'
p5842
I1
sg3644
g4037
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5843
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vy
sS'block_loop.thisTrialN'
p5845
I0
sg39
F0.78343574968312168
sg34
g752
(S'\x07\xdf\n\x14\x13\x14\x04\n\xb60'
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g3992
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'right'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g3936
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g3999
sS'block_loop.thisRepN'
p5855
I1
sg3644
g3936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5856
I1
sg3646
g3943
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vy
sS'block_loop.thisTrialN'
p5858
I0
sg39
F0.76686192010674858
sg34
g752
(S'\x07\xdf\n\x14\x13\x14\n\x07\xb4\xa8'
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g3687
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'left'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5868
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5869
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vy
sS'block_loop.thisTrialN'
p5871
I0
sg39
F0.73347278378423653
sg34
g752
(S'\x07\xdf\n\x14\x13\x14\x10\x04\xb3 '
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g4080
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'right'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g4084
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g4088
sS'block_loop.thisRepN'
p5881
I1
sg3644
g4084
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5882
I1
sg3646
g4091
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vy
sS'block_loop.thisTrialN'
p5884
I0
sg39
F0.90051710895568249
sg34
g752
(S'\x07\xdf\n\x14\x13\x14\x16\x018\x80'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g4153
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'right'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g4160
sS'block_loop.thisRepN'
p5894
I1
sg3644
g3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5895
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vy
sS'block_loop.thisTrialN'
p5897
I0
sg39
F0.94986711628371268
sg34
g752
(S'\x07\xdf\n\x14\x13\x14\x1c\x00\x1f@'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g4125
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'right'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g3766
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g4132
sS'block_loop.thisRepN'
p5907
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5908
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vy
sS'block_loop.thisTrialN'
p5910
I0
sg39
F0.56687577582124504
sg34
g752
(S'\x07\xdf\n\x14\x13\x14!\x0f>X'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g4502
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'right'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g3926
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g4509
sS'block_loop.thisRepN'
p5920
I1
sg3644
g3919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5921
I1
sg3646
g3926
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vy
sS'block_loop.thisTrialN'
p5923
I0
sg39
F0.81690984491069685
sg34
g752
(S"\x07\xdf\n\x14\x13\x14'\t#\xd8"
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g4110
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'right'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g4117
sS'block_loop.thisRepN'
p5933
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5934
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vy
sS'block_loop.thisTrialN'
p5936
I0
sg39
F0.63353829908010084
sg34
g752
(S'\x07\xdf\n\x14\x13\x14-\x06\xd9\xe8'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g3670
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'left'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5946
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5947
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vy
sS'block_loop.thisTrialN'
p5949
I0
sg39
F0.98356244679234806
sg34
g752
(S'\x07\xdf\n\x14\x13\x143\x01\xb5\x80'
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g4446
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'left'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g4084
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g4453
sS'block_loop.thisRepN'
p5959
I1
sg3644
g4084
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5960
I1
sg3646
g4091
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vy
sS'block_loop.thisTrialN'
p5962
I0
sg39
F0.66723362958873622
sg34
g752
(S'\x07\xdf\n\x14\x13\x149\x02\x0bp'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g4153
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'right'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g4160
sS'block_loop.thisRepN'
p5972
I1
sg3644
g3731
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5973
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vy
sS'block_loop.thisTrialN'
p5975
I0
sg39
F1.0332374647114193
sg34
g752
(S'\x07\xdf\n\x14\x13\x15\x02\x0c\xa2`'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g4608
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'right'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g3885
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g4615
sS'block_loop.thisRepN'
p5985
I1
sg3644
g3885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5986
I1
sg3646
g3892
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vy
sS'block_loop.thisTrialN'
p5988
I0
sg39
F0.85011765953458962
sg34
g752
(S'\x07\xdf\n\x14\x13\x15\x08\r\xac\x00'
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g4050
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'left'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g4058
sS'block_loop.thisRepN'
p5998
I1
sg3644
g4054
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5999
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vy
sS'block_loop.thisTrialN'
p6001
I0
sg39
F0.63334756917538471
sg34
g752
(S'\x07\xdf\n\x14\x13\x15\x0e\x0b\xdb('
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g4265
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'left'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g4272
sS'block_loop.thisRepN'
p6011
I1
sg3644
g4037
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6012
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vy
sS'block_loop.thisTrialN'
p6014
I0
sg39
F0.91678445924844709
sg34
g752
(S'\x07\xdf\n\x14\x13\x15\x14\x06\xb6\xc0'
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g3898
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'left'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g3906
sS'block_loop.thisRepN'
p6024
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6025
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vy
sS'block_loop.thisTrialN'
p6027
I0
sg39
F1.1834522282915714
sg34
g752
(S'\x07\xdf\n\x14\x13\x15\x1a\x06\x16\x98'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g4675
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'right'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g4682
sS'block_loop.thisRepN'
p6037
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6038
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vy
sS'block_loop.thisTrialN'
p6040
I0
sg39
F0.70046368177645491
sg34
g752
(S'\x07\xdf\n\x14\x13\x15 \tG\x00'
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g4446
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'left'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g4084
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g4453
sS'block_loop.thisRepN'
p6050
I1
sg3644
g4084
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6051
I1
sg3646
g4091
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vy
sS'block_loop.thisTrialN'
p6053
I0
sg39
F0.68363668605525163
sg34
g752
(S'\x07\xdf\n\x14\x13\x15&\x05SH'
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g4295
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'right'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g4302
sS'block_loop.thisRepN'
p6063
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6064
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vy
sS'block_loop.thisTrialN'
p6066
I0
sg39
F0.86686653867582208
sg34
g752
(S'\x07\xdf\n\x14\x13\x15,\x00\xe6x'
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g4608
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'right'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g3885
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g4615
sS'block_loop.thisRepN'
p6076
I1
sg3644
g3885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6077
I1
sg3646
g3892
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vy
sS'block_loop.thisTrialN'
p6079
I0
sg39
F1.3834985280445835
sg34
g752
(S'\x07\xdf\n\x14\x13\x151\x0e\x92x'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g3853
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'right'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g3782
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g3860
sS'block_loop.thisRepN'
p6089
I1
sg3644
g3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6090
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vy
sS'block_loop.thisTrialN'
p6092
I0
sg39
F1.0667868255550275
sg34
g752
(S'\x07\xdf\n\x14\x13\x158\x05\xd8\x18'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g3633
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'left'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g3642
sS'block_loop.thisRepN'
p6102
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6103
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vy
sS'block_loop.thisTrialN'
p6105
I0
sg39
F0.73352039498422528
sg34
g752
(S'\x07\xdf\n\x14\x13\x16\x02\x07Z\xd0'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g4265
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'left'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g4272
sS'block_loop.thisRepN'
p6115
I1
sg3644
g4037
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6116
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vy
sS'block_loop.thisTrialN'
p6118
I0
sg39
F0.76677411022683373
sg34
g752
(S'\x07\xdf\n\x14\x13\x16\x08\x03\xa5\x98'
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g4207
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'right'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g4214
sS'block_loop.thisRepN'
p6128
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6129
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vy
sS'block_loop.thisTrialN'
p6131
I0
sg39
F0.95018328886726522
sg34
g752
(S'\x07\xdf\n\x14\x13\x16\x0e\x00\xa4\x10'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g3704
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'left'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g3712
sS'block_loop.thisRepN'
p6141
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6142
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vy
sS'block_loop.thisTrialN'
p6144
I0
sg39
F0.90012652605219046
sg34
g752
(S'\x07\xdf\n\x14\x13\x16\x14\x00}\x00'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g3898
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'left'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g3906
sS'block_loop.thisRepN'
p6154
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6155
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vy
sS'block_loop.thisTrialN'
p6157
I0
sg39
F0.81686137842189055
sg34
g752
(S'\x07\xdf\n\x14\x13\x16\x19\x0e\xa6\x00'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g3964
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'right'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g3971
sS'block_loop.thisRepN'
p6167
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6168
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vy
sS'block_loop.thisTrialN'
p6170
I0
sg39
F1.0002004232010222
sg34
g752
(S'\x07\xdf\n\x14\x13\x16\x1f\x0c\\\x10'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g4222
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'right'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g4229
sS'block_loop.thisRepN'
p6180
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6181
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vy
sS'block_loop.thisTrialN'
p6183
I0
sg39
F0.8172180347792164
sg34
g752
(S'\x07\xdf\n\x14\x13\x16%\x0c\xec\x98'
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g3670
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'left'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g3678
sS'block_loop.thisRepN'
p6193
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6194
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vy
sS'block_loop.thisTrialN'
p6196
I0
sg39
F0.76687075811423711
sg34
g752
(S'\x07\xdf\n\x14\x13\x16+\n\xa2\xa8'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g3738
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'right'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g3746
sS'block_loop.thisRepN'
p6206
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6207
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vy
sS'block_loop.thisTrialN'
p6209
I0
sg39
F0.78355235435810755
sg34
g752
(S'\x07\xdf\n\x14\x13\x161\x07\xa5\x08'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g4250
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'right'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g3827
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g4257
sS'block_loop.thisRepN'
p6219
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6220
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vy
sS'block_loop.thisTrialN'
p6222
I0
sg39
F0.70021621757405228
sg34
g752
(S'\x07\xdf\n\x14\x13\x167\x04\xa3\x80'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g4461
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'left'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g4353
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g4468
sS'block_loop.thisRepN'
p6232
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6233
I1
sg3646
g4360
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vy
sS'block_loop.thisTrialN'
p6235
I0
sg39
F0.83351731593575096
sg34
g752
(S'\x07\xdf\n\x14\x13\x17\x01\x00\xaf\xc8'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g4446
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'left'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g4084
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g4453
sS'block_loop.thisRepN'
p6245
I1
sg3644
g4084
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6246
I1
sg3646
g4091
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vy
sS'block_loop.thisTrialN'
p6248
I0
sg39
F0.76680147954175482
sg34
g752
(S'\x07\xdf\n\x14\x13\x17\x06\r\xe2\xb0'
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g4125
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'right'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g4132
sS'block_loop.thisRepN'
p6258
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6259
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vy
sS'block_loop.thisTrialN'
p6261
I0
sg39
F0.70039326281766989
sg34
g752
(S'\x07\xdf\n\x14\x13\x17\x0c\n\xe5\x10'
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g3823
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'left'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g3827
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g3831
sS'block_loop.thisRepN'
p6271
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6272
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vy
sS'block_loop.thisTrialN'
p6274
I0
sg39
F0.6501871091677458
sg34
g752
(S'\x07\xdf\n\x14\x13\x17\x12\x06\xb2\xd8'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g4265
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'left'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g4272
sS'block_loop.thisRepN'
p6284
I1
sg3644
g4037
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6285
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vy
sS'block_loop.thisTrialN'
p6287
I0
sg39
F0.60021473506640177
sg34
g752
(S'\x07\xdf\n\x14\x13\x17\x18\x02\x07\x88'
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g3823
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'left'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g3827
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g3831
sS'block_loop.thisRepN'
p6297
I1
sg3644
g3827
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6298
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vy
sS'block_loop.thisTrialN'
p6300
I0
sg39
F0.60019249749893788
sg34
g752
(S'\x07\xdf\n\x14\x13\x17\x1d\x0b\xa8`'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g4608
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'right'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g3885
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g4615
sS'block_loop.thisRepN'
p6310
I1
sg3644
g3885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6311
I1
sg3646
g3892
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vy
sS'block_loop.thisTrialN'
p6313
I0
sg39
F0.83353812801942695
sg34
g752
(S'\x07\xdf\n\x14\x13\x17#\x06\n\xe0'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g4349
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'right'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g4360
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g4357
sS'block_loop.thisRepN'
p6323
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6324
I1
sg3646
g4360
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vy
sS'block_loop.thisTrialN'
p6326
I0
sg39
F0.91685402291841456
sg34
g752
(S'\x07\xdf\n\x14\x13\x17)\x03\xffp'
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g4502
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'right'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g3926
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g4509
sS'block_loop.thisRepN'
p6336
I1
sg3644
g3919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6337
I1
sg3646
g3926
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vy
sS'block_loop.thisTrialN'
p6339
I0
sg39
F1.2835939785254595
sg34
g752
(S'\x07\xdf\n\x14\x13\x17/\x03 \xc8'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g3755
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'left'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g3763
sS'block_loop.thisRepN'
p6349
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6350
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vy
sS'block_loop.thisTrialN'
p6352
I0
sg39
F1.0001337104949926
sg34
g752
(S'\x07\xdf\n\x14\x13\x175\x07\xfa\xf8'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F8.5500222660739382
sg56
Vr
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vy
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vr
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vy
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'33-ambrosia_rice.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'right'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'23-crunchie_redo.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'23-crunchie_redo.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6383
I2
sS'img_wrong'
p6384
S'33-ambrosia_rice.png'
p6385
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vy
sS'block_loop.thisTrialN'
p6387
I0
sg39
F0.91687939655093942
sg34
g752
(S'\x07\xdf\n\x14\x13\x18\r\x02B '
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'45-chewy_nougat_redo.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'right'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'41-peanuts_redo.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'41-peanuts_redo.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6401
I2
sg6384
S'45-chewy_nougat_redo.png'
p6402
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vy
sS'block_loop.thisTrialN'
p6404
I0
sg39
F0.85055157718670671
sg34
g752
(S'\x07\xdf\n\x14\x13\x18\x13\x01g`'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'48-twix.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'left'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'48-twix.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'50-polo.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6418
I2
sg6384
S'50-polo.png'
p6419
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vy
sS'block_loop.thisTrialN'
p6421
I0
sg39
F0.86686083673703251
sg34
g752
(S'\x07\xdf\n\x14\x13\x18\x18\x0e\xd8\xc8'
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
S'31-hobnobs.png'
p6425
sS'block_loop.thisIndex'
p6426
g6364
sg38
S'right'
p6427
sg58
g62
sS'trial_loop.thisN'
p6428
I3
sg33
S'25-kitkat.png'
p6429
sg63
g64
sS'trial_loop.thisIndex'
p6430
g59
(g98
S'\x03\x00\x00\x00'
tRp6431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6432
I0
sg6379
S'25-kitkat.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6435
I2
sg6384
S'31-hobnobs.png'
p6436
sg55
g11
sS'block_loop.thisTrial'
p6437
Nsg69
Vy
sS'block_loop.thisTrialN'
p6438
I0
sg39
F0.8667436618670763
sg34
g752
(S'\x07\xdf\n\x14\x13\x18\x1e\rFp'
tRp6439
sa(dp6440
S'trial_loop.thisTrialN'
p6441
I4
sg6370
g6408
sS'block_loop.thisIndex'
p6442
g6364
sg38
S'left'
p6443
sg58
g62
sS'trial_loop.thisN'
p6444
I4
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6445
g59
(g98
S'\x04\x00\x00\x00'
tRp6446
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6447
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6448
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6449
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6450
Nsg69
Vy
sS'block_loop.thisTrialN'
p6451
I0
sg39
F0.7001144379391917
sg34
g752
(S'\x07\xdf\n\x14\x13\x18$\x0b\xee\xb0'
tRp6452
sa(dp6453
S'trial_loop.thisTrialN'
p6454
I5
sg6370
S'5-pineapple.png'
p6455
sS'block_loop.thisIndex'
p6456
g6364
sg38
S'right'
p6457
sg58
g62
sS'trial_loop.thisN'
p6458
I5
sg33
S'40-sardines.png'
p6459
sg63
g64
sS'trial_loop.thisIndex'
p6460
g59
(g98
S'\x05\x00\x00\x00'
tRp6461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6462
I0
sg6379
S'40-sardines.png'
p6463
sS'block_loop.thisRepN'
p6464
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6465
I2
sg6384
S'5-pineapple.png'
p6466
sg55
g11
sS'block_loop.thisTrial'
p6467
Nsg69
Vy
sS'block_loop.thisTrialN'
p6468
I0
sg39
F1.0168004816987377
sg34
g752
(S'\x07\xdf\n\x14\x13\x18*\x07\xbcx'
tRp6469
sa(dp6470
S'trial_loop.thisTrialN'
p6471
I6
sg6370
S'21-nakd_banana_crunch.png'
p6472
sS'block_loop.thisIndex'
p6473
g6364
sg38
S'right'
p6474
sg58
g62
sS'trial_loop.thisN'
p6475
I6
sg33
S'1-treacle_cookies.png'
p6476
sg63
g64
sS'trial_loop.thisIndex'
p6477
g59
(g98
S'\x06\x00\x00\x00'
tRp6478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6479
I0
sg6379
S'1-treacle_cookies.png'
p6480
sS'block_loop.thisRepN'
p6481
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6482
I2
sg6384
S'21-nakd_banana_crunch.png'
p6483
sg55
g11
sS'block_loop.thisTrial'
p6484
Nsg69
Vy
sS'block_loop.thisTrialN'
p6485
I0
sg39
F0.70017886986533995
sg34
g752
(S'\x07\xdf\n\x14\x13\x180\x08\x8b\x80'
tRp6486
sa(dp6487
S'trial_loop.thisTrialN'
p6488
I7
sg6370
S'16-skips_prawn.png'
p6489
sS'block_loop.thisIndex'
p6490
g6364
sg38
S'left'
p6491
sg58
g62
sS'trial_loop.thisN'
p6492
I7
sg33
S'42-mrkipling_lemon_slices.png'
p6493
sg63
g64
sS'trial_loop.thisIndex'
p6494
g59
(g98
S'\x07\x00\x00\x00'
tRp6495
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6496
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p6497
sS'block_loop.thisRepN'
p6498
I2
sg6382
S'16-skips_prawn.png'
p6499
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6500
I2
sg6384
g6493
sg55
g11
sS'block_loop.thisTrial'
p6501
Nsg69
Vy
sS'block_loop.thisTrialN'
p6502
I0
sg39
F0.66711189316265518
sg34
g752
(S'\x07\xdf\n\x14\x13\x186\x04\x97\xc8'
tRp6503
sa(dp6504
S'trial_loop.thisTrialN'
p6505
I8
sg6370
S'29-beans.png'
p6506
sS'block_loop.thisIndex'
p6507
g6364
sg38
S'right'
p6508
sg58
g62
sS'trial_loop.thisN'
p6509
I8
sg33
S'46-pistachios.png'
p6510
sg63
g64
sS'trial_loop.thisIndex'
p6511
g59
(g98
S'\x08\x00\x00\x00'
tRp6512
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6513
I0
sg6379
S'46-pistachios.png'
p6514
sS'block_loop.thisRepN'
p6515
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6516
I2
sg6384
S'29-beans.png'
p6517
sg55
g11
sS'block_loop.thisTrial'
p6518
Nsg69
Vy
sS'block_loop.thisTrialN'
p6519
I0
sg39
F0.66682850673532812
sg34
g752
(S'\x07\xdf\n\x14\x13\x18;\x0f.\xb8'
tRp6520
sa(dp6521
S'trial_loop.thisTrialN'
p6522
I9
sg6370
S'43-mrporky_pork_crackles_redo.png'
p6523
sS'block_loop.thisIndex'
p6524
g6364
sg38
S'right'
p6525
sg58
g62
sS'trial_loop.thisN'
p6526
I9
sg33
S'18-mms.png'
p6527
sg63
g64
sS'trial_loop.thisIndex'
p6528
g59
(g98
S'\t\x00\x00\x00'
tRp6529
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6530
I0
sg6379
S'18-mms.png'
p6531
sS'block_loop.thisRepN'
p6532
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6533
I2
sg6384
S'43-mrporky_pork_crackles_redo.png'
p6534
sg55
g11
sS'block_loop.thisTrial'
p6535
Nsg69
Vy
sS'block_loop.thisTrialN'
p6536
I0
sg39
F0.6668692756065866
sg34
g752
(S'\x07\xdf\n\x14\x13\x19\x05\n\x83h'
tRp6537
sa(dp6538
S'trial_loop.thisTrialN'
p6539
I10
sg6370
S'17-jacobs_mini_cheddars_redo.png'
p6540
sS'block_loop.thisIndex'
p6541
g6364
sg38
S'left'
p6542
sg58
g62
sS'trial_loop.thisN'
p6543
I10
sg33
S'8-liquorice_catherine_wheels.png'
p6544
sg63
g64
sS'trial_loop.thisIndex'
p6545
g59
(g98
S'\n\x00\x00\x00'
tRp6546
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6547
I0
sg6379
S'8-liquorice_catherine_wheels.png'
p6548
sS'block_loop.thisRepN'
p6549
I2
sg6382
S'17-jacobs_mini_cheddars_redo.png'
p6550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6551
I2
sg6384
g6544
sg55
g11
sS'block_loop.thisTrial'
p6552
Nsg69
Vy
sS'block_loop.thisTrialN'
p6553
I0
sg39
F0.80021912556185271
sg34
g752
(S'\x07\xdf\n\x14\x13\x19\x0b\x06\x16\x98'
tRp6554
sa(dp6555
S'trial_loop.thisTrialN'
p6556
I11
sg6370
S'36-fig_rolls.png'
p6557
sS'block_loop.thisIndex'
p6558
g6364
sg38
S'right'
p6559
sg58
g62
sS'trial_loop.thisN'
p6560
I11
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p6561
sg63
g64
sS'trial_loop.thisIndex'
p6562
g59
(g98
S'\x0b\x00\x00\x00'
tRp6563
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6564
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p6565
sS'block_loop.thisRepN'
p6566
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6567
I2
sg6384
S'36-fig_rolls.png'
p6568
sg55
g11
sS'block_loop.thisTrial'
p6569
Nsg69
Vy
sS'block_loop.thisTrialN'
p6570
I0
sg39
F0.6668769732277724
sg34
g752
(S'\x07\xdf\n\x14\x13\x19\x11\x03\x8e('
tRp6571
sa(dp6572
S'trial_loop.thisTrialN'
p6573
I12
sg6370
S'6-sour_patch_kids.png'
p6574
sS'block_loop.thisIndex'
p6575
g6364
sg38
S'right'
p6576
sg58
g62
sS'trial_loop.thisN'
p6577
I12
sg33
S'6-sour_patch_kids.png'
p6578
sg63
g64
sS'trial_loop.thisIndex'
p6579
g59
(g98
S'\x0c\x00\x00\x00'
tRp6580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6581
I0
sg6379
S'38-maltesers.png'
p6582
sS'block_loop.thisRepN'
p6583
I2
sg6382
S'38-maltesers.png'
p6584
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6585
I2
sg6384
g6578
sg55
g11
sS'block_loop.thisTrial'
p6586
Nsg69
Vy
sS'block_loop.thisTrialN'
p6587
I0
sg39
F1.1164914935616252
sg34
g752
(S'\x07\xdf\n\x14\x13\x19\x16\x0e%\x18'
tRp6588
sa(dp6589
S'trial_loop.thisTrialN'
p6590
I13
sg6370
S'22-daim.png'
p6591
sS'block_loop.thisIndex'
p6592
g6364
sg38
S'left'
p6593
sg58
g62
sS'trial_loop.thisN'
p6594
I13
sg33
S'22-daim.png'
p6595
sg63
g64
sS'trial_loop.thisIndex'
p6596
g59
(g98
S'\r\x00\x00\x00'
tRp6597
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6598
I0
sg6379
S'7-olives.png'
p6599
sS'block_loop.thisRepN'
p6600
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6601
I2
sg6384
S'7-olives.png'
p6602
sg55
g11
sS'block_loop.thisTrial'
p6603
Nsg69
Vy
sS'block_loop.thisTrialN'
p6604
I0
sg39
F1.1668932237553236
sg34
g752
(S'\x07\xdf\n\x14\x13\x19\x1d\x01\x1d('
tRp6605
sa(dp6606
S'trial_loop.thisTrialN'
p6607
I14
sg6370
g6506
sS'block_loop.thisIndex'
p6608
g6364
sg38
S'right'
p6609
sg58
g62
sS'trial_loop.thisN'
p6610
I14
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p6611
g59
(g98
S'\x0e\x00\x00\x00'
tRp6612
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6613
I0
sg6379
g6514
sS'block_loop.thisRepN'
p6614
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6615
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p6616
Nsg69
Vy
sS'block_loop.thisTrialN'
p6617
I0
sg39
F0.76685222681044252
sg34
g752
(S'\x07\xdf\n\x14\x13\x19#\x04M\x90'
tRp6618
sa(dp6619
S'trial_loop.thisTrialN'
p6620
I15
sg6370
g6489
sS'block_loop.thisIndex'
p6621
g6364
sg38
S'left'
p6622
sg58
g62
sS'trial_loop.thisN'
p6623
I15
sg33
g6499
sg63
g64
sS'trial_loop.thisIndex'
p6624
g59
(g98
S'\x0f\x00\x00\x00'
tRp6625
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6626
I0
sg6379
g6497
sS'block_loop.thisRepN'
p6627
I2
sg6382
g6499
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6628
I2
sg6384
g6493
sg55
g11
sS'block_loop.thisTrial'
p6629
Nsg69
Vy
sS'block_loop.thisTrialN'
p6630
I0
sg39
F0.78338956396692083
sg34
g752
(S'\x07\xdf\n\x14\x13\x19)\x01\x11p'
tRp6631
sa(dp6632
S'trial_loop.thisTrialN'
p6633
I16
sg6370
S'44-crunch.png'
p6634
sS'block_loop.thisIndex'
p6635
g6364
sg38
S'right'
p6636
sg58
g62
sS'trial_loop.thisN'
p6637
I16
sg33
S'26-walkers_smoky_bacon.png'
p6638
sg63
g64
sS'trial_loop.thisIndex'
p6639
g59
(g98
S'\x10\x00\x00\x00'
tRp6640
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6641
I0
sg6379
S'26-walkers_smoky_bacon.png'
p6642
sS'block_loop.thisRepN'
p6643
I2
sg6382
g6638
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6644
I2
sg6384
S'44-crunch.png'
p6645
sg55
g11
sS'block_loop.thisTrial'
p6646
Nsg69
Vy
sS'block_loop.thisTrialN'
p6647
I0
sg39
F0.71674642730795313
sg34
g752
(S'\x07\xdf\n\x14\x13\x19.\r\x90\xa8'
tRp6648
sa(dp6649
S'trial_loop.thisTrialN'
p6650
I17
sg6370
S'38-maltesers.png'
p6651
sS'block_loop.thisIndex'
p6652
g6364
sg38
S'left'
p6653
sg58
g62
sS'trial_loop.thisN'
p6654
I17
sg33
g6584
sg63
g64
sS'trial_loop.thisIndex'
p6655
g59
(g98
S'\x11\x00\x00\x00'
tRp6656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6657
I0
sg6379
S'6-sour_patch_kids.png'
p6658
sS'block_loop.thisRepN'
p6659
I2
sg6382
g6584
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6660
I2
sg6384
g6578
sg55
g11
sS'block_loop.thisTrial'
p6661
Nsg69
Vy
sS'block_loop.thisTrialN'
p6662
I0
sg39
F1.749895226847002
sg34
g752
(S'\x07\xdf\n\x14\x13\x194\t\xd7\x88'
tRp6663
sa(dp6664
S'trial_loop.thisTrialN'
p6665
I18
sg6370
S'3-ellas_strawberries_apples.png'
p6666
sS'block_loop.thisIndex'
p6667
g6364
sg38
S'right'
p6668
sg58
g62
sS'trial_loop.thisN'
p6669
I18
sg33
S'13-mccoys_steak_crisps.png'
p6670
sg63
g64
sS'trial_loop.thisIndex'
p6671
g59
(g98
S'\x12\x00\x00\x00'
tRp6672
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6673
I0
sg6379
S'13-mccoys_steak_crisps.png'
p6674
sS'block_loop.thisRepN'
p6675
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6676
I2
sg6384
S'3-ellas_strawberries_apples.png'
p6677
sg55
g11
sS'block_loop.thisTrial'
p6678
Nsg69
Vy
sS'block_loop.thisTrialN'
p6679
I0
sg39
F0.68353262564414763
sg34
g752
(S'\x07\xdf\n\x14\x13\x19;\x06\x93\x98'
tRp6680
sa(dp6681
S'trial_loop.thisTrialN'
p6682
I19
sg6370
g6574
sS'block_loop.thisIndex'
p6683
g6364
sg38
S'right'
p6684
sg58
g62
sS'trial_loop.thisN'
p6685
I19
sg33
g6584
sg63
g64
sS'trial_loop.thisIndex'
p6686
g59
(g98
S'\x13\x00\x00\x00'
tRp6687
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6688
I0
sg6379
g6582
sS'block_loop.thisRepN'
p6689
I2
sg6382
g6584
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6690
I2
sg6384
g6578
sg55
g11
sS'block_loop.thisTrial'
p6691
Nsg69
Vy
sS'block_loop.thisTrialN'
p6692
I0
sg39
F0.93359834050716017
sg34
g752
(S'\x07\xdf\n\x14\x13\x1a\x05\x02&\xc8'
tRp6693
sa(dp6694
S'trial_loop.thisTrialN'
p6695
I20
sg6370
S'41-peanuts_redo.png'
p6696
sS'block_loop.thisIndex'
p6697
g6364
sg38
S'left'
p6698
sg58
g62
sS'trial_loop.thisN'
p6699
I20
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6700
g59
(g98
S'\x14\x00\x00\x00'
tRp6701
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6702
I0
sg6379
S'45-chewy_nougat_redo.png'
p6703
sS'block_loop.thisRepN'
p6704
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6705
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6706
Nsg69
Vy
sS'block_loop.thisTrialN'
p6707
I0
sg39
F0.86685627518454567
sg34
g752
(S'\x07\xdf\n\x14\x13\x1a\x0b\x01\xc18'
tRp6708
sa(dp6709
S'trial_loop.thisTrialN'
p6710
I21
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p6711
sS'block_loop.thisIndex'
p6712
g6364
sg38
S'left'
p6713
sg58
g62
sS'trial_loop.thisN'
p6714
I21
sg33
g6568
sg63
g64
sS'trial_loop.thisIndex'
p6715
g59
(g98
S'\x15\x00\x00\x00'
tRp6716
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6717
I0
sg6379
S'36-fig_rolls.png'
p6718
sS'block_loop.thisRepN'
p6719
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6720
I2
sg6384
g6568
sg55
g11
sS'block_loop.thisTrial'
p6721
Nsg69
Vy
sS'block_loop.thisTrialN'
p6722
I0
sg39
F0.90021661670834874
sg34
g752
(S'\x07\xdf\n\x14\x13\x1a\x11\x00.\xe0'
tRp6723
sa(dp6724
S'trial_loop.thisTrialN'
p6725
I22
sg6370
g6651
sS'block_loop.thisIndex'
p6726
g6364
sg38
S'left'
p6727
sg58
g62
sS'trial_loop.thisN'
p6728
I22
sg33
g6584
sg63
g64
sS'trial_loop.thisIndex'
p6729
g59
(g98
S'\x16\x00\x00\x00'
tRp6730
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6731
I0
sg6379
g6658
sS'block_loop.thisRepN'
p6732
I2
sg6382
g6584
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6733
I2
sg6384
g6578
sg55
g11
sS'block_loop.thisTrial'
p6734
Nsg69
Vy
sS'block_loop.thisTrialN'
p6735
I0
sg39
F0.81648305468843319
sg34
g752
(S'\x07\xdf\n\x14\x13\x1a\x16\x0eW\xe0'
tRp6736
sa(dp6737
S'trial_loop.thisTrialN'
p6738
I23
sg6370
S'1-treacle_cookies.png'
p6739
sS'block_loop.thisIndex'
p6740
g6364
sg38
S'left'
p6741
sg58
g62
sS'trial_loop.thisN'
p6742
I23
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p6743
g59
(g98
S'\x17\x00\x00\x00'
tRp6744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6745
I0
sg6379
S'21-nakd_banana_crunch.png'
p6746
sS'block_loop.thisRepN'
p6747
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6748
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p6749
Nsg69
Vy
sS'block_loop.thisTrialN'
p6750
I0
sg39
F0.71681941214046674
sg34
g752
(S'\x07\xdf\n\x14\x13\x1a\x1c\x0c\r\xf0'
tRp6751
sa(dp6752
S'trial_loop.thisTrialN'
p6753
I24
sg6370
S'13-mccoys_steak_crisps.png'
p6754
sS'block_loop.thisIndex'
p6755
g6364
sg38
S'left'
p6756
sg58
g62
sS'trial_loop.thisN'
p6757
I24
sg33
g6670
sg63
g64
sS'trial_loop.thisIndex'
p6758
g59
(g98
S'\x18\x00\x00\x00'
tRp6759
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6760
I0
sg6379
S'3-ellas_strawberries_apples.png'
p6761
sS'block_loop.thisRepN'
p6762
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6763
I2
sg6384
g6677
sg55
g11
sS'block_loop.thisTrial'
p6764
Nsg69
Vy
sS'block_loop.thisTrialN'
p6765
I0
sg39
F0.70012641201174119
sg34
g752
(S'\x07\xdf\n\x14\x13\x1a"\x08X\xb8'
tRp6766
sa(dp6767
S'trial_loop.thisTrialN'
p6768
I25
sg6370
S'40-sardines.png'
p6769
sS'block_loop.thisIndex'
p6770
g6364
sg38
S'left'
p6771
sg58
g62
sS'trial_loop.thisN'
p6772
I25
sg33
g6459
sg63
g64
sS'trial_loop.thisIndex'
p6773
g59
(g98
S'\x19\x00\x00\x00'
tRp6774
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6775
I0
sg6379
S'5-pineapple.png'
p6776
sS'block_loop.thisRepN'
p6777
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6778
I2
sg6384
g6466
sg55
g11
sS'block_loop.thisTrial'
p6779
Nsg69
Vy
sS'block_loop.thisTrialN'
p6780
I0
sg39
F0.93381444404076319
sg34
g752
(S'\x07\xdf\n\x14\x13\x1a(\x04&\x80'
tRp6781
sa(dp6782
S'trial_loop.thisTrialN'
p6783
I26
sg6370
g6391
sS'block_loop.thisIndex'
p6784
g6364
sg38
S'right'
p6785
sg58
g62
sS'trial_loop.thisN'
p6786
I26
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6787
g59
(g98
S'\x1a\x00\x00\x00'
tRp6788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6789
I0
sg6379
g6399
sS'block_loop.thisRepN'
p6790
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6791
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6792
Nsg69
Vy
sS'block_loop.thisTrialN'
p6793
I0
sg39
F0.95017074459974538
sg34
g752
(S'\x07\xdf\n\x14\x13\x1a.\x03\xc4\xd8'
tRp6794
sa(dp6795
S'trial_loop.thisTrialN'
p6796
I27
sg6370
S'25-kitkat.png'
p6797
sS'block_loop.thisIndex'
p6798
g6364
sg38
S'left'
p6799
sg58
g62
sS'trial_loop.thisN'
p6800
I27
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6801
g59
(g98
S'\x1b\x00\x00\x00'
tRp6802
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6803
I0
sg6379
S'31-hobnobs.png'
p6804
sS'block_loop.thisRepN'
p6805
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6806
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p6807
Nsg69
Vy
sS'block_loop.thisTrialN'
p6808
I0
sg39
F0.75023335190417129
sg34
g752
(S'\x07\xdf\n\x14\x13\x1a4\x03c0'
tRp6809
sa(dp6810
S'trial_loop.thisTrialN'
p6811
I28
sg6370
g6591
sS'block_loop.thisIndex'
p6812
g6364
sg38
S'left'
p6813
sg58
g62
sS'trial_loop.thisN'
p6814
I28
sg33
g6595
sg63
g64
sS'trial_loop.thisIndex'
p6815
g59
(g98
S'\x1c\x00\x00\x00'
tRp6816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6817
I0
sg6379
g6599
sS'block_loop.thisRepN'
p6818
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6819
I2
sg6384
g6602
sg55
g11
sS'block_loop.thisTrial'
p6820
Nsg69
Vy
sS'block_loop.thisTrialN'
p6821
I0
sg39
F1.3335144649645372
sg34
g752
(S'\x07\xdf\n\x14\x13\x1a:\x00#('
tRp6822
sa(dp6823
S'trial_loop.thisTrialN'
p6824
I29
sg6370
g6425
sS'block_loop.thisIndex'
p6825
g6364
sg38
S'right'
p6826
sg58
g62
sS'trial_loop.thisN'
p6827
I29
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p6828
g59
(g98
S'\x1d\x00\x00\x00'
tRp6829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6830
I0
sg6379
g6433
sS'block_loop.thisRepN'
p6831
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6832
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p6833
Nsg69
Vy
sS'block_loop.thisTrialN'
p6834
I0
sg39
F0.85031238079318427
sg34
g752
(S'\x07\xdf\n\x14\x13\x1b\x04\x05\xb4\xf0'
tRp6835
sa(dp6836
S'trial_loop.thisTrialN'
p6837
I30
sg6370
g6408
sS'block_loop.thisIndex'
p6838
g6364
sg38
S'left'
p6839
sg58
g62
sS'trial_loop.thisN'
p6840
I30
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6841
g59
(g98
S'\x1e\x00\x00\x00'
tRp6842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6843
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6844
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6845
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6846
Nsg69
Vy
sS'block_loop.thisTrialN'
p6847
I0
sg39
F0.76686391578550683
sg34
g752
(S'\x07\xdf\n\x14\x13\x1b\n\x03\xe4\x18'
tRp6848
sa(dp6849
S'trial_loop.thisTrialN'
p6850
I31
sg6370
S'4-corn.png'
p6851
sS'block_loop.thisIndex'
p6852
g6364
sg38
S'right'
p6853
sg58
g62
sS'trial_loop.thisN'
p6854
I31
sg33
S'10-bounty_redo.png'
p6855
sg63
g64
sS'trial_loop.thisIndex'
p6856
g59
(g98
S'\x1f\x00\x00\x00'
tRp6857
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6858
I0
sg6379
S'10-bounty_redo.png'
p6859
sS'block_loop.thisRepN'
p6860
I2
sg6382
g6855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6861
I2
sg6384
S'4-corn.png'
p6862
sg55
g11
sS'block_loop.thisTrial'
p6863
Nsg69
Vy
sS'block_loop.thisTrialN'
p6864
I0
sg39
F0.60023640244253329
sg34
g752
(S'\x07\xdf\n\x14\x13\x1b\x10\x00\xe2\x90'
tRp6865
sa(dp6866
S'trial_loop.thisTrialN'
p6867
I32
sg6370
g6739
sS'block_loop.thisIndex'
p6868
g6364
sg38
S'left'
p6869
sg58
g62
sS'trial_loop.thisN'
p6870
I32
sg33
g6483
sg63
g64
sS'trial_loop.thisIndex'
p6871
g59
(g98
S' \x00\x00\x00'
tRp6872
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6873
I0
sg6379
g6746
sS'block_loop.thisRepN'
p6874
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6875
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p6876
Nsg69
Vy
sS'block_loop.thisTrialN'
p6877
I0
sg39
F0.63353345242649084
sg34
g752
(S'\x07\xdf\n\x14\x13\x1b\x15\n\x87P'
tRp6878
sa(dp6879
S'trial_loop.thisTrialN'
p6880
I33
sg6370
S'19-caramello_redo.png'
p6881
sS'block_loop.thisIndex'
p6882
g6364
sg38
S'left'
p6883
sg58
g62
sS'trial_loop.thisN'
p6884
I33
sg33
S'19-caramello_redo.png'
p6885
sg63
g64
sS'trial_loop.thisIndex'
p6886
g59
(g98
S'!\x00\x00\x00'
tRp6887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6888
I0
sg6379
S'30-spaghetti_hoops.png'
p6889
sS'block_loop.thisRepN'
p6890
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6891
I2
sg6384
S'30-spaghetti_hoops.png'
p6892
sg55
g11
sS'block_loop.thisTrial'
p6893
Nsg69
Vy
sS'block_loop.thisTrialN'
p6894
I0
sg39
F0.93350967533842777
sg34
g752
(S'\x07\xdf\n\x14\x13\x1b\x1b\x05b\xe8'
tRp6895
sa(dp6896
S'trial_loop.thisTrialN'
p6897
I34
sg6370
S'50-polo.png'
p6898
sS'block_loop.thisIndex'
p6899
g6364
sg38
S'right'
p6900
sg58
g62
sS'trial_loop.thisN'
p6901
I34
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6902
g59
(g98
S'"\x00\x00\x00'
tRp6903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6904
I0
sg6379
S'48-twix.png'
p6905
sS'block_loop.thisRepN'
p6906
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6907
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6908
Nsg69
Vy
sS'block_loop.thisTrialN'
p6909
I0
sg39
F0.9668563322047703
sg34
g752
(S'\x07\xdf\n\x14\x13\x1b!\x05\x01@'
tRp6910
sa(dp6911
S'trial_loop.thisTrialN'
p6912
I35
sg6370
S'20-fruit_pastilles.png'
p6913
sS'block_loop.thisIndex'
p6914
g6364
sg38
S'right'
p6915
sg58
g62
sS'trial_loop.thisN'
p6916
I35
sg33
S'2-steamed_puddings.png'
p6917
sg63
g64
sS'trial_loop.thisIndex'
p6918
g59
(g98
S'#\x00\x00\x00'
tRp6919
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6920
I0
sg6379
S'2-steamed_puddings.png'
p6921
sS'block_loop.thisRepN'
p6922
I2
sg6382
g6917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6923
I2
sg6384
S'20-fruit_pastilles.png'
p6924
sg55
g11
sS'block_loop.thisTrial'
p6925
Nsg69
Vy
sS'block_loop.thisTrialN'
p6926
I0
sg39
F0.98352110772611923
sg34
g752
(S"\x07\xdf\n\x14\x13\x1b'\x04\xda0"
tRp6927
sa(dp6928
S'trial_loop.thisTrialN'
p6929
I36
sg6370
S'35-raisins.png'
p6930
sS'block_loop.thisIndex'
p6931
g6364
sg38
S'right'
p6932
sg58
g62
sS'trial_loop.thisN'
p6933
I36
sg33
S'49-yorkie.png'
p6934
sg63
g64
sS'trial_loop.thisIndex'
p6935
g59
(g98
S'$\x00\x00\x00'
tRp6936
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6937
I0
sg6379
S'49-yorkie.png'
p6938
sS'block_loop.thisRepN'
p6939
I2
sg6382
g6934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6940
I2
sg6384
S'35-raisins.png'
p6941
sg55
g11
sS'block_loop.thisTrial'
p6942
Nsg69
Vy
sS'block_loop.thisTrialN'
p6943
I0
sg39
F1.3338805295279599
sg34
g752
(S'\x07\xdf\n\x14\x13\x1b-\x050 '
tRp6944
sa(dp6945
S'trial_loop.thisTrialN'
p6946
I37
sg6370
g6634
sS'block_loop.thisIndex'
p6947
g6364
sg38
S'right'
p6948
sg58
g62
sS'trial_loop.thisN'
p6949
I37
sg33
g6645
sg63
g64
sS'trial_loop.thisIndex'
p6950
g59
(g98
S'%\x00\x00\x00'
tRp6951
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6952
I0
sg6379
g6642
sS'block_loop.thisRepN'
p6953
I2
sg6382
g6638
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6954
I2
sg6384
g6645
sg55
g11
sS'block_loop.thisTrial'
p6955
Nsg69
Vy
sS'block_loop.thisTrialN'
p6956
I0
sg39
F0.73358283123161527
sg34
g752
(S'\x07\xdf\n\x14\x13\x1b3\n\xbe\x00'
tRp6957
sa(dp6958
S'trial_loop.thisTrialN'
p6959
I38
sg6370
g6797
sS'block_loop.thisIndex'
p6960
g6364
sg38
S'left'
p6961
sg58
g62
sS'trial_loop.thisN'
p6962
I38
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p6963
g59
(g98
S'&\x00\x00\x00'
tRp6964
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6965
I0
sg6379
g6804
sS'block_loop.thisRepN'
p6966
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6967
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p6968
Nsg69
Vy
sS'block_loop.thisTrialN'
p6969
I0
sg39
F0.78345599157182733
sg34
g752
(S'\x07\xdf\n\x14\x13\x1b9\x07C`'
tRp6970
sa(dp6971
S'trial_loop.thisTrialN'
p6972
I39
sg6370
g6523
sS'block_loop.thisIndex'
p6973
g6364
sg38
S'right'
p6974
sg58
g62
sS'trial_loop.thisN'
p6975
I39
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p6976
g59
(g98
S"'\x00\x00\x00"
tRp6977
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6978
I0
sg6379
g6531
sS'block_loop.thisRepN'
p6979
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6980
I2
sg6384
g6534
sg55
g11
sS'block_loop.thisTrial'
p6981
Nsg69
Vy
sS'block_loop.thisTrialN'
p6982
I0
sg39
F0.66688495594280539
sg34
g752
(S'\x07\xdf\n\x14\x13\x1c\x03\x04\x80X'
tRp6983
sa(dp6984
S'trial_loop.thisTrialN'
p6985
I40
sg6370
g6711
sS'block_loop.thisIndex'
p6986
g6364
sg38
S'left'
p6987
sg58
g62
sS'trial_loop.thisN'
p6988
I40
sg33
g6568
sg63
g64
sS'trial_loop.thisIndex'
p6989
g59
(g98
S'(\x00\x00\x00'
tRp6990
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6991
I0
sg6379
g6718
sS'block_loop.thisRepN'
p6992
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6993
I2
sg6384
g6568
sg55
g11
sS'block_loop.thisTrial'
p6994
Nsg69
Vy
sS'block_loop.thisTrialN'
p6995
I0
sg39
F0.9334401116684603
sg34
g752
(S'\x07\xdf\n\x14\x13\x1c\x08\x0f\x17H'
tRp6996
sa(dp6997
S'trial_loop.thisTrialN'
p6998
I41
sg6370
g6754
sS'block_loop.thisIndex'
p6999
g6364
sg38
S'left'
p7000
sg58
g62
sS'trial_loop.thisN'
p7001
I41
sg33
g6670
sg63
g64
sS'trial_loop.thisIndex'
p7002
g59
(g98
S')\x00\x00\x00'
tRp7003
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7004
I0
sg6379
g6761
sS'block_loop.thisRepN'
p7005
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7006
I2
sg6384
g6677
sg55
g11
sS'block_loop.thisTrial'
p7007
Nsg69
Vy
sS'block_loop.thisTrialN'
p7008
I0
sg39
F1.0001941510636243
sg34
g752
(S'\x07\xdf\n\x14\x13\x1c\x0e\x0e\xb5\xa0'
tRp7009
sa(dp7010
S'trial_loop.thisTrialN'
p7011
I42
sg6370
S'2-steamed_puddings.png'
p7012
sS'block_loop.thisIndex'
p7013
g6364
sg38
S'left'
p7014
sg58
g62
sS'trial_loop.thisN'
p7015
I42
sg33
g6917
sg63
g64
sS'trial_loop.thisIndex'
p7016
g59
(g98
S'*\x00\x00\x00'
tRp7017
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7018
I0
sg6379
S'20-fruit_pastilles.png'
p7019
sS'block_loop.thisRepN'
p7020
I2
sg6382
g6917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7021
I2
sg6384
g6924
sg55
g11
sS'block_loop.thisTrial'
p7022
Nsg69
Vy
sS'block_loop.thisTrialN'
p7023
I0
sg39
F0.73388959561270894
sg34
g752
(S'\x07\xdf\n\x14\x13\x1c\x14\x0f\x0b\x90'
tRp7024
sa(dp7025
S'trial_loop.thisTrialN'
p7026
I43
sg6370
g6769
sS'block_loop.thisIndex'
p7027
g6364
sg38
S'left'
p7028
sg58
g62
sS'trial_loop.thisN'
p7029
I43
sg33
g6459
sg63
g64
sS'trial_loop.thisIndex'
p7030
g59
(g98
S'+\x00\x00\x00'
tRp7031
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7032
I0
sg6379
g6776
sS'block_loop.thisRepN'
p7033
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7034
I2
sg6384
g6466
sg55
g11
sS'block_loop.thisTrial'
p7035
Nsg69
Vy
sS'block_loop.thisTrialN'
p7036
I0
sg39
F0.90020521282713162
sg34
g752
(S'\x07\xdf\n\x14\x13\x1c\x1a\x0b\x90\xf0'
tRp7037
sa(dp7038
S'trial_loop.thisTrialN'
p7039
I44
sg6370
S'46-pistachios.png'
p7040
sS'block_loop.thisIndex'
p7041
g6364
sg38
S'left'
p7042
sg58
g62
sS'trial_loop.thisN'
p7043
I44
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p7044
g59
(g98
S',\x00\x00\x00'
tRp7045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7046
I0
sg6379
S'29-beans.png'
p7047
sS'block_loop.thisRepN'
p7048
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7049
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p7050
Nsg69
Vy
sS'block_loop.thisTrialN'
p7051
I0
sg39
F0.61682733783891308
sg34
g752
(S'\x07\xdf\n\x14\x13\x1c \nw\xb0'
tRp7052
sa(dp7053
S'trial_loop.thisTrialN'
p7054
I45
sg6370
g6711
sS'block_loop.thisIndex'
p7055
g6364
sg38
S'left'
p7056
sg58
g62
sS'trial_loop.thisN'
p7057
I45
sg33
g6561
sg63
g64
sS'trial_loop.thisIndex'
p7058
g59
(g98
S'-\x00\x00\x00'
tRp7059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7060
I0
sg6379
g6718
sS'block_loop.thisRepN'
p7061
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7062
I2
sg6384
g6568
sg55
g11
sS'block_loop.thisTrial'
p7063
Nsg69
Vy
sS'block_loop.thisTrialN'
p7064
I0
sg39
F1.4667913300872897
sg34
g752
(S'\x07\xdf\n\x14\x13\x1c&\x05SH'
tRp7065
sa(dp7066
S'trial_loop.thisTrialN'
p7067
I46
sg6370
g7040
sS'block_loop.thisIndex'
p7068
g6364
sg38
S'left'
p7069
sg58
g62
sS'trial_loop.thisN'
p7070
I46
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p7071
g59
(g98
S'.\x00\x00\x00'
tRp7072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7073
I0
sg6379
g7047
sS'block_loop.thisRepN'
p7074
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7075
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p7076
Nsg69
Vy
sS'block_loop.thisTrialN'
p7077
I0
sg39
F0.63354599669401068
sg34
g752
(S'\x07\xdf\n\x14\x13\x1c,\x0c\xc9p'
tRp7078
sa(dp7079
S'trial_loop.thisTrialN'
p7080
I47
sg6370
S'49-yorkie.png'
p7081
sS'block_loop.thisIndex'
p7082
g6364
sg38
S'left'
p7083
sg58
g62
sS'trial_loop.thisN'
p7084
I47
sg33
g6934
sg63
g64
sS'trial_loop.thisIndex'
p7085
g59
(g98
S'/\x00\x00\x00'
tRp7086
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7087
I0
sg6379
S'35-raisins.png'
p7088
sS'block_loop.thisRepN'
p7089
I2
sg6382
g6934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7090
I2
sg6384
g6941
sg55
g11
sS'block_loop.thisTrial'
p7091
Nsg69
Vy
sS'block_loop.thisTrialN'
p7092
I0
sg39
F1.10013348242137
sg34
g752
(S'\x07\xdf\n\x14\x13\x1c2\x07\xa5\x08'
tRp7093
sa(dp7094
S'trial_loop.thisTrialN'
p7095
I48
sg6370
S'30-spaghetti_hoops.png'
p7096
sS'block_loop.thisIndex'
p7097
g6364
sg38
S'right'
p7098
sg58
g62
sS'trial_loop.thisN'
p7099
I48
sg33
g6885
sg63
g64
sS'trial_loop.thisIndex'
p7100
g59
(g98
S'0\x00\x00\x00'
tRp7101
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7102
I0
sg6379
S'19-caramello_redo.png'
p7103
sS'block_loop.thisRepN'
p7104
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7105
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p7106
Nsg69
Vy
sS'block_loop.thisTrialN'
p7107
I0
sg39
F0.83344775226942147
sg34
g752
(S'\x07\xdf\n\x14\x13\x1c8\t\xdfX'
tRp7108
sa(dp7109
S'trial_loop.thisTrialN'
p7110
I49
sg6370
g6425
sS'block_loop.thisIndex'
p7111
g6364
sg38
S'right'
p7112
sg58
g62
sS'trial_loop.thisN'
p7113
I49
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7114
g59
(g98
S'1\x00\x00\x00'
tRp7115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7116
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7117
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7118
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7119
Nsg69
Vy
sS'block_loop.thisTrialN'
p7120
I0
sg39
F0.70011101677664556
sg34
g752
(S'\x07\xdf\n\x14\x13\x1d\x02\x07\xd3\xe8'
tRp7121
sa(dp7122
S'trial_loop.thisTrialN'
p7123
I50
sg6370
g6506
sS'block_loop.thisIndex'
p7124
g6364
sg38
S'right'
p7125
sg58
g62
sS'trial_loop.thisN'
p7126
I50
sg33
g6517
sg63
g64
sS'trial_loop.thisIndex'
p7127
g59
(g98
S'2\x00\x00\x00'
tRp7128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7129
I0
sg6379
g6514
sS'block_loop.thisRepN'
p7130
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7131
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p7132
Nsg69
Vy
sS'block_loop.thisTrialN'
p7133
I0
sg39
F0.88351876993328915
sg34
g752
(S'\x07\xdf\n\x14\x13\x1d\x08\x03\xa1\xb0'
tRp7134
sa(dp7135
S'trial_loop.thisTrialN'
p7136
I51
sg6370
g7096
sS'block_loop.thisIndex'
p7137
g6364
sg38
S'right'
p7138
sg58
g62
sS'trial_loop.thisN'
p7139
I51
sg33
g6885
sg63
g64
sS'trial_loop.thisIndex'
p7140
g59
(g98
S'3\x00\x00\x00'
tRp7141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7142
I0
sg6379
g7103
sS'block_loop.thisRepN'
p7143
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7144
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p7145
Nsg69
Vy
sS'block_loop.thisTrialN'
p7146
I0
sg39
F0.75023791345302016
sg34
g752
(S'\x07\xdf\n\x14\x13\x1d\x0e\x02M\xd8'
tRp7147
sa(dp7148
S'trial_loop.thisTrialN'
p7149
I52
sg6370
g6651
sS'block_loop.thisIndex'
p7150
g6364
sg38
S'left'
p7151
sg58
g62
sS'trial_loop.thisN'
p7152
I52
sg33
g6578
sg63
g64
sS'trial_loop.thisIndex'
p7153
g59
(g98
S'4\x00\x00\x00'
tRp7154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7155
I0
sg6379
g6658
sS'block_loop.thisRepN'
p7156
I2
sg6382
g6584
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7157
I2
sg6384
g6578
sg55
g11
sS'block_loop.thisTrial'
p7158
Nsg69
Vy
sS'block_loop.thisTrialN'
p7159
I0
sg39
F0.89992068600986386
sg34
g752
(S'\x07\xdf\n\x14\x13\x1d\x13\x0eP\x10'
tRp7160
sa(dp7161
S'trial_loop.thisTrialN'
p7162
I53
sg6370
g6913
sS'block_loop.thisIndex'
p7163
g6364
sg38
S'right'
p7164
sg58
g62
sS'trial_loop.thisN'
p7165
I53
sg33
g6924
sg63
g64
sS'trial_loop.thisIndex'
p7166
g59
(g98
S'5\x00\x00\x00'
tRp7167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7168
I0
sg6379
g6921
sS'block_loop.thisRepN'
p7169
I2
sg6382
g6917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7170
I2
sg6384
g6924
sg55
g11
sS'block_loop.thisTrial'
p7171
Nsg69
Vy
sS'block_loop.thisTrialN'
p7172
I0
sg39
F0.63391462713116198
sg34
g752
(S'\x07\xdf\n\x14\x13\x1d\x19\r6\xd0'
tRp7173
sa(dp7174
S'trial_loop.thisTrialN'
p7175
I54
sg6370
g6425
sS'block_loop.thisIndex'
p7176
g6364
sg38
S'right'
p7177
sg58
g62
sS'trial_loop.thisN'
p7178
I54
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7179
g59
(g98
S'6\x00\x00\x00'
tRp7180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7181
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7182
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7183
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7184
Nsg69
Vy
sS'block_loop.thisTrialN'
p7185
I0
sg39
F0.80018035236935248
sg34
g752
(S'\x07\xdf\n\x14\x13\x1d\x1f\x08P\xe8'
tRp7186
sa(dp7187
S'trial_loop.thisTrialN'
p7188
I55
sg6370
g6455
sS'block_loop.thisIndex'
p7189
g6364
sg38
S'right'
p7190
sg58
g62
sS'trial_loop.thisN'
p7191
I55
sg33
g6459
sg63
g64
sS'trial_loop.thisIndex'
p7192
g59
(g98
S'7\x00\x00\x00'
tRp7193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7194
I0
sg6379
g6463
sS'block_loop.thisRepN'
p7195
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7196
I2
sg6384
g6466
sg55
g11
sS'block_loop.thisTrial'
p7197
Nsg69
Vy
sS'block_loop.thisTrialN'
p7198
I0
sg39
F0.73353978158047539
sg34
g752
(S'\x07\xdf\n\x14\x13\x1d%\x05\xc8x'
tRp7199
sa(dp7200
S'trial_loop.thisTrialN'
p7201
I56
sg6370
S'51-mars.png'
p7202
sS'block_loop.thisIndex'
p7203
g6364
sg38
S'left'
p7204
sg58
g62
sS'trial_loop.thisN'
p7205
I56
sg33
S'51-mars.png'
p7206
sg63
g64
sS'trial_loop.thisIndex'
p7207
g59
(g98
S'8\x00\x00\x00'
tRp7208
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7209
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p7210
sS'block_loop.thisRepN'
p7211
I2
sg6382
g7206
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7212
I2
sg6384
S'27-hartleys_raspberries_jelly.png'
p7213
sg55
g11
sS'block_loop.thisTrial'
p7214
Nsg69
Vy
sS'block_loop.thisTrialN'
p7215
I0
sg39
F1.0000823930349725
sg34
g752
(S'\x07\xdf\n\x14\x13\x1d+\x02\x0fX'
tRp7216
sa(dp7217
S'trial_loop.thisTrialN'
p7218
I57
sg6370
g6574
sS'block_loop.thisIndex'
p7219
g6364
sg38
S'right'
p7220
sg58
g62
sS'trial_loop.thisN'
p7221
I57
sg33
g6584
sg63
g64
sS'trial_loop.thisIndex'
p7222
g59
(g98
S'9\x00\x00\x00'
tRp7223
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7224
I0
sg6379
g6582
sS'block_loop.thisRepN'
p7225
I2
sg6382
g6584
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7226
I2
sg6384
g6578
sg55
g11
sS'block_loop.thisTrial'
p7227
Nsg69
Vy
sS'block_loop.thisTrialN'
p7228
I0
sg39
F0.91658118507984909
sg34
g752
(S'\x07\xdf\n\x14\x13\x1d1\x02\xa3\xc8'
tRp7229
sa(dp7230
S'trial_loop.thisTrialN'
p7231
I58
sg6370
S'42-mrkipling_lemon_slices.png'
p7232
sS'block_loop.thisIndex'
p7233
g6364
sg38
S'right'
p7234
sg58
g62
sS'trial_loop.thisN'
p7235
I58
sg33
g6499
sg63
g64
sS'trial_loop.thisIndex'
p7236
g59
(g98
S':\x00\x00\x00'
tRp7237
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7238
I0
sg6379
S'16-skips_prawn.png'
p7239
sS'block_loop.thisRepN'
p7240
I2
sg6382
g6499
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7241
I2
sg6384
g6493
sg55
g11
sS'block_loop.thisTrial'
p7242
Nsg69
Vy
sS'block_loop.thisTrialN'
p7243
I0
sg39
F0.55002682762642507
sg34
g752
(S'\x07\xdf\n\x14\x13\x1d7\x01\xc5 '
tRp7244
sa(dp7245
S'trial_loop.thisTrialN'
p7246
I59
sg6370
g6455
sS'block_loop.thisIndex'
p7247
g6364
sg38
S'right'
p7248
sg58
g62
sS'trial_loop.thisN'
p7249
I59
sg33
g6459
sg63
g64
sS'trial_loop.thisIndex'
p7250
g59
(g98
S';\x00\x00\x00'
tRp7251
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7252
I0
sg6379
g6463
sS'block_loop.thisRepN'
p7253
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7254
I2
sg6384
g6466
sg55
g11
sS'block_loop.thisTrial'
p7255
Nsg69
Vy
sS'block_loop.thisTrialN'
p7256
I0
sg39
F0.93386804228066467
sg34
g752
(S'\x07\xdf\n\x14\x13\x1e\x00\n\xb2H'
tRp7257
sa(dp7258
S'trial_loop.thisTrialN'
p7259
I60
sg6370
g6472
sS'block_loop.thisIndex'
p7260
g6364
sg38
S'right'
p7261
sg58
g62
sS'trial_loop.thisN'
p7262
I60
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p7263
g59
(g98
S'<\x00\x00\x00'
tRp7264
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7265
I0
sg6379
g6480
sS'block_loop.thisRepN'
p7266
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7267
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p7268
Nsg69
Vy
sS'block_loop.thisTrialN'
p7269
I0
sg39
F0.68352150686405366
sg34
g752
(S'\x07\xdf\n\x14\x13\x1e\x06\nP\xa0'
tRp7270
sa(dp7271
S'trial_loop.thisTrialN'
p7272
I61
sg6370
g6455
sS'block_loop.thisIndex'
p7273
g6364
sg38
S'right'
p7274
sg58
g62
sS'trial_loop.thisN'
p7275
I61
sg33
g6459
sg63
g64
sS'trial_loop.thisIndex'
p7276
g59
(g98
S'=\x00\x00\x00'
tRp7277
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7278
I0
sg6379
g6463
sS'block_loop.thisRepN'
p7279
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7280
I2
sg6384
g6466
sg55
g11
sS'block_loop.thisTrial'
p7281
Nsg69
Vy
sS'block_loop.thisTrialN'
p7282
I0
sg39
F0.88344350432089414
sg34
g752
(S'\x07\xdf\n\x14\x13\x1e\x0c\x05\xdf\xe8'
tRp7283
sa(dp7284
S'trial_loop.thisTrialN'
p7285
I62
sg6370
g7040
sS'block_loop.thisIndex'
p7286
g6364
sg38
S'left'
p7287
sg58
g62
sS'trial_loop.thisN'
p7288
I62
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p7289
g59
(g98
S'>\x00\x00\x00'
tRp7290
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7291
I0
sg6379
g7047
sS'block_loop.thisRepN'
p7292
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7293
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p7294
Nsg69
Vy
sS'block_loop.thisTrialN'
p7295
I0
sg39
F0.5835362748875923
sg34
g752
(S'\x07\xdf\n\x14\x13\x1e\x12\x04\xc6\xa8'
tRp7296
sa(dp7297
S'trial_loop.thisTrialN'
p7298
I63
sg6370
g6898
sS'block_loop.thisIndex'
p7299
g6364
sg38
S'right'
p7300
sg58
g62
sS'trial_loop.thisN'
p7301
I63
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7302
g59
(g98
S'?\x00\x00\x00'
tRp7303
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7304
I0
sg6379
g6905
sS'block_loop.thisRepN'
p7305
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7306
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7307
Nsg69
Vy
sS'block_loop.thisTrialN'
p7308
I0
sg39
F0.78344059632945573
sg34
g752
(S'\x07\xdf\n\x14\x13\x1e\x17\x0e,\xe8'
tRp7309
sa(dp7310
S'trial_loop.thisTrialN'
p7311
I64
sg6370
g7040
sS'block_loop.thisIndex'
p7312
g6364
sg38
S'left'
p7313
sg58
g62
sS'trial_loop.thisN'
p7314
I64
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p7315
g59
(g98
S'@\x00\x00\x00'
tRp7316
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7317
I0
sg6379
g7047
sS'block_loop.thisRepN'
p7318
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7319
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p7320
Nsg69
Vy
sS'block_loop.thisTrialN'
p7321
I0
sg39
F0.65010614161656122
sg34
g752
(S'\x07\xdf\n\x14\x13\x1e\x1d\x0b/H'
tRp7322
sa(dp7323
S'trial_loop.thisTrialN'
p7324
I65
sg6370
S'26-walkers_smoky_bacon.png'
p7325
sS'block_loop.thisIndex'
p7326
g6364
sg38
S'left'
p7327
sg58
g62
sS'trial_loop.thisN'
p7328
I65
sg33
g6645
sg63
g64
sS'trial_loop.thisIndex'
p7329
g59
(g98
S'A\x00\x00\x00'
tRp7330
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7331
I0
sg6379
S'44-crunch.png'
p7332
sS'block_loop.thisRepN'
p7333
I2
sg6382
g6638
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7334
I2
sg6384
g6645
sg55
g11
sS'block_loop.thisTrial'
p7335
Nsg69
Vy
sS'block_loop.thisTrialN'
p7336
I0
sg39
F0.8172647906903876
sg34
g752
(S'\x07\xdf\n\x14\x13\x1e#\x06\x83\xf8'
tRp7337
sa(dp7338
S'trial_loop.thisTrialN'
p7339
I66
sg6370
g7232
sS'block_loop.thisIndex'
p7340
g6364
sg38
S'right'
p7341
sg58
g62
sS'trial_loop.thisN'
p7342
I66
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p7343
g59
(g98
S'B\x00\x00\x00'
tRp7344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7345
I0
sg6379
g7239
sS'block_loop.thisRepN'
p7346
I2
sg6382
g6499
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7347
I2
sg6384
g6493
sg55
g11
sS'block_loop.thisTrial'
p7348
Nsg69
Vy
sS'block_loop.thisTrialN'
p7349
I0
sg39
F0.71674528691801243
sg34
g752
(S'\x07\xdf\n\x14\x13\x1e)\x04:\x08'
tRp7350
sa(dp7351
S'trial_loop.thisTrialN'
p7352
I67
sg6370
g7081
sS'block_loop.thisIndex'
p7353
g6364
sg38
S'left'
p7354
sg58
g62
sS'trial_loop.thisN'
p7355
I67
sg33
g6934
sg63
g64
sS'trial_loop.thisIndex'
p7356
g59
(g98
S'C\x00\x00\x00'
tRp7357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7358
I0
sg6379
g7088
sS'block_loop.thisRepN'
p7359
I2
sg6382
g6934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7360
I2
sg6384
g6941
sg55
g11
sS'block_loop.thisTrial'
p7361
Nsg69
Vy
sS'block_loop.thisTrialN'
p7362
I0
sg39
F0.8835247569695639
sg34
g752
(S'\x07\xdf\n\x14\x13\x1e/\x00FP'
tRp7363
sa(dp7364
S'trial_loop.thisTrialN'
p7365
I68
sg6370
g6591
sS'block_loop.thisIndex'
p7366
g6364
sg38
S'left'
p7367
sg58
g62
sS'trial_loop.thisN'
p7368
I68
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p7369
g59
(g98
S'D\x00\x00\x00'
tRp7370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7371
I0
sg6379
g6599
sS'block_loop.thisRepN'
p7372
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7373
I2
sg6384
g6602
sg55
g11
sS'block_loop.thisTrial'
p7374
Nsg69
Vy
sS'block_loop.thisTrialN'
p7375
I0
sg39
F0.85022485601075459
sg34
g752
(S'\x07\xdf\n\x14\x13\x1e4\x0eoP'
tRp7376
sa(dp7377
S'trial_loop.thisTrialN'
p7378
I69
sg6370
g6574
sS'block_loop.thisIndex'
p7379
g6364
sg38
S'right'
p7380
sg58
g62
sS'trial_loop.thisN'
p7381
I69
sg33
g6584
sg63
g64
sS'trial_loop.thisIndex'
p7382
g59
(g98
S'E\x00\x00\x00'
tRp7383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7384
I0
sg6379
g6582
sS'block_loop.thisRepN'
p7385
I2
sg6382
g6584
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7386
I2
sg6384
g6578
sg55
g11
sS'block_loop.thisTrial'
p7387
Nsg69
Vy
sS'block_loop.thisTrialN'
p7388
I0
sg39
F1.049901955138921
sg34
g752
(S'\x07\xdf\n\x14\x13\x1e:\x0c\x9ex'
tRp7389
sa(dp7390
S'trial_loop.thisTrialN'
p7391
I70
sg6370
g7325
sS'block_loop.thisIndex'
p7392
g6364
sg38
S'left'
p7393
sg58
g62
sS'trial_loop.thisN'
p7394
I70
sg33
g6638
sg63
g64
sS'trial_loop.thisIndex'
p7395
g59
(g98
S'F\x00\x00\x00'
tRp7396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7397
I0
sg6379
g7332
sS'block_loop.thisRepN'
p7398
I2
sg6382
g6638
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7399
I2
sg6384
g6645
sg55
g11
sS'block_loop.thisTrial'
p7400
Nsg69
Vy
sS'block_loop.thisTrialN'
p7401
I0
sg39
F0.73349302567294217
sg34
g752
(S'\x07\xdf\n\x14\x13\x1f\x04\r\xe6\x98'
tRp7402
sa(dp7403
S'trial_loop.thisTrialN'
p7404
I71
sg6370
g6574
sS'block_loop.thisIndex'
p7405
g6364
sg38
S'right'
p7406
sg58
g62
sS'trial_loop.thisN'
p7407
I71
sg33
g6584
sg63
g64
sS'trial_loop.thisIndex'
p7408
g59
(g98
S'G\x00\x00\x00'
tRp7409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7410
I0
sg6379
g6582
sS'block_loop.thisRepN'
p7411
I2
sg6382
g6584
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7412
I2
sg6384
g6578
sg55
g11
sS'block_loop.thisTrial'
p7413
Nsg69
Vy
sS'block_loop.thisTrialN'
p7414
I0
sg39
F0.8669745904408046
sg34
g752
(S'\x07\xdf\n\x14\x13\x1f\n\n-x'
tRp7415
sa(dp7416
S'trial_loop.thisTrialN'
p7417
I72
sg6370
g6540
sS'block_loop.thisIndex'
p7418
g6364
sg38
S'left'
p7419
sg58
g62
sS'trial_loop.thisN'
p7420
I72
sg33
g6550
sg63
g64
sS'trial_loop.thisIndex'
p7421
g59
(g98
S'H\x00\x00\x00'
tRp7422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7423
I0
sg6379
g6548
sS'block_loop.thisRepN'
p7424
I2
sg6382
g6550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7425
I2
sg6384
g6544
sg55
g11
sS'block_loop.thisTrial'
p7426
Nsg69
Vy
sS'block_loop.thisTrialN'
p7427
I0
sg39
F1.0335205660412612
sg34
g752
(S'\x07\xdf\n\x14\x13\x1f\x10\x08\xd9\xa0'
tRp7428
sa(dp7429
S'trial_loop.thisTrialN'
p7430
I73
sg6370
g6523
sS'block_loop.thisIndex'
p7431
g6364
sg38
S'right'
p7432
sg58
g62
sS'trial_loop.thisN'
p7433
I73
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p7434
g59
(g98
S'I\x00\x00\x00'
tRp7435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7436
I0
sg6379
g6531
sS'block_loop.thisRepN'
p7437
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7438
I2
sg6384
g6534
sg55
g11
sS'block_loop.thisTrial'
p7439
Nsg69
Vy
sS'block_loop.thisTrialN'
p7440
I0
sg39
F0.61683931191146257
sg34
g752
(S'\x07\xdf\n\x14\x13\x1f\x16\t\xa4\xc0'
tRp7441
sa(dp7442
S'trial_loop.thisTrialN'
p7443
I74
sg6370
g6696
sS'block_loop.thisIndex'
p7444
g6364
sg38
S'left'
p7445
sg58
g62
sS'trial_loop.thisN'
p7446
I74
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7447
g59
(g98
S'J\x00\x00\x00'
tRp7448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7449
I0
sg6379
g6703
sS'block_loop.thisRepN'
p7450
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7451
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7452
Nsg69
Vy
sS'block_loop.thisTrialN'
p7453
I0
sg39
F1.2833972615881066
sg34
g752
(S'\x07\xdf\n\x14\x13\x1f\x1c\x04\x80X'
tRp7454
sa(dp7455
S'trial_loop.thisTrialN'
p7456
I75
sg6370
g6739
sS'block_loop.thisIndex'
p7457
g6364
sg38
S'left'
p7458
sg58
g62
sS'trial_loop.thisN'
p7459
I75
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p7460
g59
(g98
S'K\x00\x00\x00'
tRp7461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7462
I0
sg6379
g6746
sS'block_loop.thisRepN'
p7463
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7464
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p7465
Nsg69
Vy
sS'block_loop.thisTrialN'
p7466
I0
sg39
F0.71662640146314516
sg34
g752
(S'\x07\xdf\n\x14\x13\x1f"\tZ\x88'
tRp7467
sa(dp7468
S'trial_loop.thisTrialN'
p7469
I76
sg6370
g6930
sS'block_loop.thisIndex'
p7470
g6364
sg38
S'right'
p7471
sg58
g62
sS'trial_loop.thisN'
p7472
I76
sg33
g6941
sg63
g64
sS'trial_loop.thisIndex'
p7473
g59
(g98
S'L\x00\x00\x00'
tRp7474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7475
I0
sg6379
g6938
sS'block_loop.thisRepN'
p7476
I2
sg6382
g6934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7477
I2
sg6384
g6941
sg55
g11
sS'block_loop.thisTrial'
p7478
Nsg69
Vy
sS'block_loop.thisTrialN'
p7479
I0
sg39
F0.91677961259847507
sg34
g752
(S'\x07\xdf\n\x14\x13\x1f(\x05f\xd0'
tRp7480
sa(dp7481
S'trial_loop.thisTrialN'
p7482
I77
sg6370
g6425
sS'block_loop.thisIndex'
p7483
g6364
sg38
S'right'
p7484
sg58
g62
sS'trial_loop.thisN'
p7485
I77
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p7486
g59
(g98
S'M\x00\x00\x00'
tRp7487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7488
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7489
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7490
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7491
Nsg69
Vy
sS'block_loop.thisTrialN'
p7492
I0
sg39
F0.78387422888408764
sg34
g752
(S'\x07\xdf\n\x14\x13\x1f.\x04\xc6\xa8'
tRp7493
sa(dp7494
S'trial_loop.thisTrialN'
p7495
I78
sg6370
S'8-liquorice_catherine_wheels.png'
p7496
sS'block_loop.thisIndex'
p7497
g6364
sg38
S'right'
p7498
sg58
g62
sS'trial_loop.thisN'
p7499
I78
sg33
g6550
sg63
g64
sS'trial_loop.thisIndex'
p7500
g59
(g98
S'N\x00\x00\x00'
tRp7501
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7502
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p7503
sS'block_loop.thisRepN'
p7504
I2
sg6382
g6550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7505
I2
sg6384
g6544
sg55
g11
sS'block_loop.thisTrial'
p7506
Nsg69
Vy
sS'block_loop.thisTrialN'
p7507
I0
sg39
F0.90021576141589321
sg34
g752
(S'\x07\xdf\n\x14\x13\x1f4\x01\xc5 '
tRp7508
sa(dp7509
S'trial_loop.thisTrialN'
p7510
I79
sg6370
S'18-mms.png'
p7511
sS'block_loop.thisIndex'
p7512
g6364
sg38
S'left'
p7513
sg58
g62
sS'trial_loop.thisN'
p7514
I79
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p7515
g59
(g98
S'O\x00\x00\x00'
tRp7516
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7517
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p7518
sS'block_loop.thisRepN'
p7519
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7520
I2
sg6384
g6534
sg55
g11
sS'block_loop.thisTrial'
p7521
Nsg69
Vy
sS'block_loop.thisTrialN'
p7522
I0
sg39
F0.65012410272902343
sg34
g752
(S'\x07\xdf\n\x14\x13\x1f:\x00\xea`'
tRp7523
sa(dp7524
S'trial_loop.thisTrialN'
p7525
I80
sg6370
g6540
sS'block_loop.thisIndex'
p7526
g6364
sg38
S'left'
p7527
sg58
g62
sS'trial_loop.thisN'
p7528
I80
sg33
g6550
sg63
g64
sS'trial_loop.thisIndex'
p7529
g59
(g98
S'P\x00\x00\x00'
tRp7530
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7531
I0
sg6379
g6548
sS'block_loop.thisRepN'
p7532
I2
sg6382
g6550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7533
I2
sg6384
g6544
sg55
g11
sS'block_loop.thisTrial'
p7534
Nsg69
Vy
sS'block_loop.thisTrialN'
p7535
I0
sg39
F0.71681085923046339
sg34
g752
(S'\x07\xdf\n\x14\x13 \x03\x0bB\xd0'
tRp7536
sa(dp7537
S'trial_loop.thisTrialN'
p7538
I81
sg6370
g6851
sS'block_loop.thisIndex'
p7539
g6364
sg38
S'right'
p7540
sg58
g62
sS'trial_loop.thisN'
p7541
I81
sg33
g6855
sg63
g64
sS'trial_loop.thisIndex'
p7542
g59
(g98
S'Q\x00\x00\x00'
tRp7543
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7544
I0
sg6379
g6859
sS'block_loop.thisRepN'
p7545
I2
sg6382
g6855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7546
I2
sg6384
g6862
sg55
g11
sS'block_loop.thisTrial'
p7547
Nsg69
Vy
sS'block_loop.thisTrialN'
p7548
I0
sg39
F0.83392671524416073
sg34
g752
(S'\x07\xdf\n\x14\x13 \t\x07\x8d\x98'
tRp7549
sa(dp7550
S'trial_loop.thisTrialN'
p7551
I82
sg6370
g6489
sS'block_loop.thisIndex'
p7552
g6364
sg38
S'left'
p7553
sg58
g62
sS'trial_loop.thisN'
p7554
I82
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p7555
g59
(g98
S'R\x00\x00\x00'
tRp7556
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7557
I0
sg6379
g6497
sS'block_loop.thisRepN'
p7558
I2
sg6382
g6499
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7559
I2
sg6384
g6493
sg55
g11
sS'block_loop.thisTrial'
p7560
Nsg69
Vy
sS'block_loop.thisTrialN'
p7561
I0
sg39
F0.56665568092648755
sg34
g752
(S'\x07\xdf\n\x14\x13 \x0f\x05~@'
tRp7562
sa(dp7563
S'trial_loop.thisTrialN'
p7564
I83
sg6370
g7081
sS'block_loop.thisIndex'
p7565
g6364
sg38
S'left'
p7566
sg58
g62
sS'trial_loop.thisN'
p7567
I83
sg33
g6934
sg63
g64
sS'trial_loop.thisIndex'
p7568
g59
(g98
S'S\x00\x00\x00'
tRp7569
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7570
I0
sg6379
g7088
sS'block_loop.thisRepN'
p7571
I2
sg6382
g6934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7572
I2
sg6384
g6941
sg55
g11
sS'block_loop.thisTrial'
p7573
Nsg69
Vy
sS'block_loop.thisTrialN'
p7574
I0
sg39
F0.88390308069938328
sg34
g752
(S'\x07\xdf\n\x14\x13 \x14\x0e\xa9\xe8'
tRp7575
sa(dp7576
S'trial_loop.thisTrialN'
p7577
I84
sg6370
g6851
sS'block_loop.thisIndex'
p7578
g6364
sg38
S'right'
p7579
sg58
g62
sS'trial_loop.thisN'
p7580
I84
sg33
g6855
sg63
g64
sS'trial_loop.thisIndex'
p7581
g59
(g98
S'T\x00\x00\x00'
tRp7582
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7583
I0
sg6379
g6859
sS'block_loop.thisRepN'
p7584
I2
sg6382
g6855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7585
I2
sg6384
g6862
sg55
g11
sS'block_loop.thisTrial'
p7586
Nsg69
Vy
sS'block_loop.thisTrialN'
p7587
I0
sg39
F0.88350765114591923
sg34
g752
(S'\x07\xdf\n\x14\x13 \x1a\rR('
tRp7588
sa(dp7589
S'trial_loop.thisTrialN'
p7590
I85
sg6370
g6489
sS'block_loop.thisIndex'
p7591
g6364
sg38
S'left'
p7592
sg58
g62
sS'trial_loop.thisN'
p7593
I85
sg33
g6499
sg63
g64
sS'trial_loop.thisIndex'
p7594
g59
(g98
S'U\x00\x00\x00'
tRp7595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7596
I0
sg6379
g6497
sS'block_loop.thisRepN'
p7597
I2
sg6382
g6499
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7598
I2
sg6384
g6493
sg55
g11
sS'block_loop.thisTrial'
p7599
Nsg69
Vy
sS'block_loop.thisTrialN'
p7600
I0
sg39
F0.7500950798530539
sg34
g752
(S'\x07\xdf\n\x14\x13  \x0b\xfeP'
tRp7601
sa(dp7602
S'trial_loop.thisTrialN'
p7603
I86
sg6370
g6540
sS'block_loop.thisIndex'
p7604
g6364
sg38
S'left'
p7605
sg58
g62
sS'trial_loop.thisN'
p7606
I86
sg33
g6550
sg63
g64
sS'trial_loop.thisIndex'
p7607
g59
(g98
S'V\x00\x00\x00'
tRp7608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7609
I0
sg6379
g6548
sS'block_loop.thisRepN'
p7610
I2
sg6382
g6550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7611
I2
sg6384
g6544
sg55
g11
sS'block_loop.thisTrial'
p7612
Nsg69
Vy
sS'block_loop.thisTrialN'
p7613
I0
sg39
F1.0334909159537347
sg34
g752
(S'\x07\xdf\n\x14\x13 &\x08\xbeH'
tRp7614
sa(dp7615
S'trial_loop.thisTrialN'
p7616
I87
sg6370
g7096
sS'block_loop.thisIndex'
p7617
g6364
sg38
S'right'
p7618
sg58
g62
sS'trial_loop.thisN'
p7619
I87
sg33
g6885
sg63
g64
sS'trial_loop.thisIndex'
p7620
g59
(g98
S'W\x00\x00\x00'
tRp7621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7622
I0
sg6379
g7103
sS'block_loop.thisRepN'
p7623
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7624
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p7625
Nsg69
Vy
sS'block_loop.thisTrialN'
p7626
I0
sg39
F0.63355055824649753
sg34
g752
(S'\x07\xdf\n\x14\x13 ,\t\xcb\xd0'
tRp7627
sa(dp7628
S'trial_loop.thisTrialN'
p7629
I88
sg6370
g6696
sS'block_loop.thisIndex'
p7630
g6364
sg38
S'left'
p7631
sg58
g62
sS'trial_loop.thisN'
p7632
I88
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7633
g59
(g98
S'X\x00\x00\x00'
tRp7634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7635
I0
sg6379
g6703
sS'block_loop.thisRepN'
p7636
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7637
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7638
Nsg69
Vy
sS'block_loop.thisTrialN'
p7639
I0
sg39
F1.0835308580462879
sg34
g752
(S'\x07\xdf\n\x14\x13 2\x04\xa7h'
tRp7640
sa(dp7641
S'trial_loop.thisTrialN'
p7642
I89
sg6370
g6898
sS'block_loop.thisIndex'
p7643
g6364
sg38
S'right'
p7644
sg58
g62
sS'trial_loop.thisN'
p7645
I89
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p7646
g59
(g98
S'Y\x00\x00\x00'
tRp7647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7648
I0
sg6379
g6905
sS'block_loop.thisRepN'
p7649
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7650
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7651
Nsg69
Vy
sS'block_loop.thisTrialN'
p7652
I0
sg39
F0.76694687901544967
sg34
g752
(S'\x07\xdf\n\x14\x13 8\x06h\xa0'
tRp7653
sa(dp7654
S'trial_loop.thisTrialN'
p7655
I90
sg6370
g6666
sS'block_loop.thisIndex'
p7656
g6364
sg38
S'right'
p7657
sg58
g62
sS'trial_loop.thisN'
p7658
I90
sg33
g6670
sg63
g64
sS'trial_loop.thisIndex'
p7659
g59
(g98
S'Z\x00\x00\x00'
tRp7660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7661
I0
sg6379
g6674
sS'block_loop.thisRepN'
p7662
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7663
I2
sg6384
g6677
sg55
g11
sS'block_loop.thisTrial'
p7664
Nsg69
Vy
sS'block_loop.thisTrialN'
p7665
I0
sg39
F0.73355061526672216
sg34
g752
(S'\x07\xdf\n\x14\x13!\x02\x03g\x18'
tRp7666
sa(dp7667
S'trial_loop.thisTrialN'
p7668
I91
sg6370
S'27-hartleys_raspberries_jelly.png'
p7669
sS'block_loop.thisIndex'
p7670
g6364
sg38
S'right'
p7671
sg58
g62
sS'trial_loop.thisN'
p7672
I91
sg33
g7206
sg63
g64
sS'trial_loop.thisIndex'
p7673
g59
(g98
S'[\x00\x00\x00'
tRp7674
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7675
I0
sg6379
S'51-mars.png'
p7676
sS'block_loop.thisRepN'
p7677
I2
sg6382
g7206
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7678
I2
sg6384
g7213
sg55
g11
sS'block_loop.thisTrial'
p7679
Nsg69
Vy
sS'block_loop.thisTrialN'
p7680
I0
sg39
F2.1168321844888851
sg34
g752
(S'\x07\xdf\n\x14\x13!\x07\x0f.\xb8'
tRp7681
sa(dp7682
S'trial_loop.thisTrialN'
p7683
I92
sg6370
S'23-crunchie_redo.png'
p7684
sS'block_loop.thisIndex'
p7685
g6364
sg38
S'left'
p7686
sg58
g62
sS'trial_loop.thisN'
p7687
I92
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7688
g59
(g98
S'\\\x00\x00\x00'
tRp7689
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7690
I0
sg6379
S'33-ambrosia_rice.png'
p7691
sS'block_loop.thisRepN'
p7692
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7693
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7694
Nsg69
Vy
sS'block_loop.thisTrialN'
p7695
I0
sg39
F0.71685818533296697
sg34
g752
(S'\x07\xdf\n\x14\x13!\x0f\x02"\xe0'
tRp7696
sa(dp7697
S'trial_loop.thisTrialN'
p7698
I93
sg6370
g7496
sS'block_loop.thisIndex'
p7699
g6364
sg38
S'right'
p7700
sg58
g62
sS'trial_loop.thisN'
p7701
I93
sg33
g6550
sg63
g64
sS'trial_loop.thisIndex'
p7702
g59
(g98
S']\x00\x00\x00'
tRp7703
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7704
I0
sg6379
g7503
sS'block_loop.thisRepN'
p7705
I2
sg6382
g6550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7706
I2
sg6384
g6544
sg55
g11
sS'block_loop.thisTrial'
p7707
Nsg69
Vy
sS'block_loop.thisTrialN'
p7708
I0
sg39
F1.0001858832474682
sg34
g752
(S'\x07\xdf\n\x14\x13!\x14\r\xac\x00'
tRp7709
sa(dp7710
S'trial_loop.thisTrialN'
p7711
I94
sg6370
g6913
sS'block_loop.thisIndex'
p7712
g6364
sg38
S'right'
p7713
sg58
g62
sS'trial_loop.thisN'
p7714
I94
sg33
g6924
sg63
g64
sS'trial_loop.thisIndex'
p7715
g59
(g98
S'^\x00\x00\x00'
tRp7716
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7717
I0
sg6379
g6921
sS'block_loop.thisRepN'
p7718
I2
sg6382
g6917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7719
I2
sg6384
g6924
sg55
g11
sS'block_loop.thisTrial'
p7720
Nsg69
Vy
sS'block_loop.thisTrialN'
p7721
I0
sg39
F1.0672273004347517
sg34
g752
(S'\x07\xdf\n\x14\x13!\x1a\x0e\x01\xf0'
tRp7722
sa(dp7723
S'trial_loop.thisTrialN'
p7724
I95
sg6370
g7232
sS'block_loop.thisIndex'
p7725
g6364
sg38
S'right'
p7726
sg58
g62
sS'trial_loop.thisN'
p7727
I95
sg33
g6499
sg63
g64
sS'trial_loop.thisIndex'
p7728
g59
(g98
S'_\x00\x00\x00'
tRp7729
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7730
I0
sg6379
g7239
sS'block_loop.thisRepN'
p7731
I2
sg6382
g6499
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7732
I2
sg6384
g6493
sg55
g11
sS'block_loop.thisTrial'
p7733
Nsg69
Vy
sS'block_loop.thisTrialN'
p7734
I0
sg39
F0.60008957748141256
sg34
g752
(S'\x07\xdf\n\x14\x13!!\x00Bh'
tRp7735
sa(dp7736
S'trial_loop.thisTrialN'
p7737
I96
sg6370
g6851
sS'block_loop.thisIndex'
p7738
g6364
sg38
S'right'
p7739
sg58
g62
sS'trial_loop.thisN'
p7740
I96
sg33
g6855
sg63
g64
sS'trial_loop.thisIndex'
p7741
g59
(g98
S'`\x00\x00\x00'
tRp7742
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7743
I0
sg6379
g6859
sS'block_loop.thisRepN'
p7744
I2
sg6382
g6855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7745
I2
sg6384
g6862
sg55
g11
sS'block_loop.thisTrial'
p7746
Nsg69
Vy
sS'block_loop.thisTrialN'
p7747
I0
sg39
F0.78353981009058771
sg34
g752
(S'\x07\xdf\n\x14\x13!&\t\xe7('
tRp7748
sa(dp7749
S'trial_loop.thisTrialN'
p7750
I97
sg6370
g6591
sS'block_loop.thisIndex'
p7751
g6364
sg38
S'left'
p7752
sg58
g62
sS'trial_loop.thisN'
p7753
I97
sg33
g6595
sg63
g64
sS'trial_loop.thisIndex'
p7754
g59
(g98
S'a\x00\x00\x00'
tRp7755
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7756
I0
sg6379
g6599
sS'block_loop.thisRepN'
p7757
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7758
I2
sg6384
g6602
sg55
g11
sS'block_loop.thisTrial'
p7759
Nsg69
Vy
sS'block_loop.thisTrialN'
p7760
I0
sg39
F0.81684883415073273
sg34
g752
(S'\x07\xdf\n\x14\x13!,\x07$ '
tRp7761
sa(dp7762
S'trial_loop.thisTrialN'
p7763
I98
sg6370
g6769
sS'block_loop.thisIndex'
p7764
g6364
sg38
S'left'
p7765
sg58
g62
sS'trial_loop.thisN'
p7766
I98
sg33
g6459
sg63
g64
sS'trial_loop.thisIndex'
p7767
g59
(g98
S'b\x00\x00\x00'
tRp7768
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7769
I0
sg6379
g6776
sS'block_loop.thisRepN'
p7770
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7771
I2
sg6384
g6466
sg55
g11
sS'block_loop.thisTrial'
p7772
Nsg69
Vy
sS'block_loop.thisTrialN'
p7773
I0
sg39
F1.1000493788014865
sg34
g752
(S'\x07\xdf\n\x14\x13!2\x04\xda0'
tRp7774
sa(dp7775
S'trial_loop.thisTrialN'
p7776
I99
sg6370
S'10-bounty_redo.png'
p7777
sS'block_loop.thisIndex'
p7778
g6364
sg38
S'left'
p7779
sg58
g62
sS'trial_loop.thisN'
p7780
I99
sg33
g6855
sg63
g64
sS'trial_loop.thisIndex'
p7781
g59
(g98
S'c\x00\x00\x00'
tRp7782
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7783
I0
sg6379
S'4-corn.png'
p7784
sS'block_loop.thisRepN'
p7785
I2
sg6382
g6855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7786
I2
sg6384
g6862
sg55
g11
sS'block_loop.thisTrial'
p7787
Nsg69
Vy
sS'block_loop.thisTrialN'
p7788
I0
sg39
F0.65020820634890697
sg34
g752
(S'\x07\xdf\n\x14\x13!8\x06\xd9\xe8'
tRp7789
sa(dp7790
S'trial_loop.thisTrialN'
p7791
I100
sg6370
g6696
sS'block_loop.thisIndex'
p7792
g6364
sg38
S'left'
p7793
sg58
g62
sS'trial_loop.thisN'
p7794
I100
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7795
g59
(g98
S'd\x00\x00\x00'
tRp7796
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7797
I0
sg6379
g6703
sS'block_loop.thisRepN'
p7798
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7799
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7800
Nsg69
Vy
sS'block_loop.thisTrialN'
p7801
I0
sg39
F1.100605603067379
sg34
g752
(S'\x07\xdf\n\x14\x13"\x02\x02.\x98'
tRp7802
sa(dp7803
S'trial_loop.thisTrialN'
p7804
I101
sg6370
S'7-olives.png'
p7805
sS'block_loop.thisIndex'
p7806
g6364
sg38
S'right'
p7807
sg58
g62
sS'trial_loop.thisN'
p7808
I101
sg33
g6595
sg63
g64
sS'trial_loop.thisIndex'
p7809
g59
(g98
S'e\x00\x00\x00'
tRp7810
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7811
I0
sg6379
S'22-daim.png'
p7812
sS'block_loop.thisRepN'
p7813
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7814
I2
sg6384
g6602
sg55
g11
sS'block_loop.thisTrial'
p7815
Nsg69
Vy
sS'block_loop.thisTrialN'
p7816
I0
sg39
F1.1501283791840251
sg34
g752
(S'\x07\xdf\n\x14\x13"\x08\x04*h'
tRp7817
sa(dp7818
S'trial_loop.thisTrialN'
p7819
I102
sg6370
g7511
sS'block_loop.thisIndex'
p7820
g6364
sg38
S'left'
p7821
sg58
g62
sS'trial_loop.thisN'
p7822
I102
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p7823
g59
(g98
S'f\x00\x00\x00'
tRp7824
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7825
I0
sg6379
g7518
sS'block_loop.thisRepN'
p7826
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7827
I2
sg6384
g6534
sg55
g11
sS'block_loop.thisTrial'
p7828
Nsg69
Vy
sS'block_loop.thisTrialN'
p7829
I0
sg39
F0.61681992531885044
sg34
g752
(S'\x07\xdf\n\x14\x13"\x0e\x06\xe1\xb8'
tRp7830
sa(dp7831
S'trial_loop.thisTrialN'
p7832
I103
sg6370
g6371
sS'block_loop.thisIndex'
p7833
g6364
sg38
S'right'
p7834
sg58
g62
sS'trial_loop.thisN'
p7835
I103
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p7836
g59
(g98
S'g\x00\x00\x00'
tRp7837
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7838
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7839
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7840
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7841
Nsg69
Vy
sS'block_loop.thisTrialN'
p7842
I0
sg39
F0.76693661552417325
sg34
g752
(S'\x07\xdf\n\x14\x13"\x14\x01~\xd0'
tRp7843
sa(dp7844
S'trial_loop.thisTrialN'
p7845
I104
sg6370
g6797
sS'block_loop.thisIndex'
p7846
g6364
sg38
S'left'
p7847
sg58
g62
sS'trial_loop.thisN'
p7848
I104
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7849
g59
(g98
S'h\x00\x00\x00'
tRp7850
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7851
I0
sg6379
g6804
sS'block_loop.thisRepN'
p7852
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7853
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7854
Nsg69
Vy
sS'block_loop.thisTrialN'
p7855
I0
sg39
F0.90014790832719882
sg34
g752
(S'\x07\xdf\n\x14\x13"\x19\r\xc3p'
tRp7856
sa(dp7857
S'trial_loop.thisTrialN'
p7858
I105
sg6370
g7202
sS'block_loop.thisIndex'
p7859
g6364
sg38
S'left'
p7860
sg58
g62
sS'trial_loop.thisN'
p7861
I105
sg33
g7213
sg63
g64
sS'trial_loop.thisIndex'
p7862
g59
(g98
S'i\x00\x00\x00'
tRp7863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7864
I0
sg6379
g7210
sS'block_loop.thisRepN'
p7865
I2
sg6382
g7206
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7866
I2
sg6384
g7213
sg55
g11
sS'block_loop.thisTrial'
p7867
Nsg69
Vy
sS'block_loop.thisTrialN'
p7868
I0
sg39
F0.70017231263409485
sg34
g752
(S'\x07\xdf\n\x14\x13"\x1f\x0c\xe4\xc8'
tRp7869
sa(dp7870
S'trial_loop.thisTrialN'
p7871
I106
sg6370
g6634
sS'block_loop.thisIndex'
p7872
g6364
sg38
S'right'
p7873
sg58
g62
sS'trial_loop.thisN'
p7874
I106
sg33
g6638
sg63
g64
sS'trial_loop.thisIndex'
p7875
g59
(g98
S'j\x00\x00\x00'
tRp7876
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7877
I0
sg6379
g6642
sS'block_loop.thisRepN'
p7878
I2
sg6382
g6638
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7879
I2
sg6384
g6645
sg55
g11
sS'block_loop.thisTrial'
p7880
Nsg69
Vy
sS'block_loop.thisTrialN'
p7881
I0
sg39
F0.7003787228713918
sg34
g752
(S'\x07\xdf\n\x14\x13"%\x08\xb2\x90'
tRp7882
sa(dp7883
S'trial_loop.thisTrialN'
p7884
I107
sg6370
g7777
sS'block_loop.thisIndex'
p7885
g6364
sg38
S'left'
p7886
sg58
g62
sS'trial_loop.thisN'
p7887
I107
sg33
g6862
sg63
g64
sS'trial_loop.thisIndex'
p7888
g59
(g98
S'k\x00\x00\x00'
tRp7889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7890
I0
sg6379
g7784
sS'block_loop.thisRepN'
p7891
I2
sg6382
g6855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7892
I2
sg6384
g6862
sg55
g11
sS'block_loop.thisTrial'
p7893
Nsg69
Vy
sS'block_loop.thisTrialN'
p7894
I0
sg39
F0.73351070168428123
sg34
g752
(S'\x07\xdf\n\x14\x13"+\x04\xbe\xd8'
tRp7895
sa(dp7896
S'trial_loop.thisTrialN'
p7897
I108
sg6370
g6651
sS'block_loop.thisIndex'
p7898
g6364
sg38
S'left'
p7899
sg58
g62
sS'trial_loop.thisN'
p7900
I108
sg33
g6584
sg63
g64
sS'trial_loop.thisIndex'
p7901
g59
(g98
S'l\x00\x00\x00'
tRp7902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7903
I0
sg6379
g6658
sS'block_loop.thisRepN'
p7904
I2
sg6382
g6584
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7905
I2
sg6384
g6578
sg55
g11
sS'block_loop.thisTrial'
p7906
Nsg69
Vy
sS'block_loop.thisTrialN'
p7907
I0
sg39
F0.61659355829033302
sg34
g752
(S'\x07\xdf\n\x14\x13"1\x01\t\xa0'
tRp7908
sa(dp7909
S'trial_loop.thisTrialN'
p7910
I109
sg6370
g6913
sS'block_loop.thisIndex'
p7911
g6364
sg38
S'right'
p7912
sg58
g62
sS'trial_loop.thisN'
p7913
I109
sg33
g6924
sg63
g64
sS'trial_loop.thisIndex'
p7914
g59
(g98
S'm\x00\x00\x00'
tRp7915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7916
I0
sg6379
g6921
sS'block_loop.thisRepN'
p7917
I2
sg6382
g6917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7918
I2
sg6384
g6924
sg55
g11
sS'block_loop.thisTrial'
p7919
Nsg69
Vy
sS'block_loop.thisTrialN'
p7920
I0
sg39
F1.1335174869964249
sg34
g752
(S'\x07\xdf\n\x14\x13"6\n\xe8\xf8'
tRp7921
sa(dp7922
S'trial_loop.thisTrialN'
p7923
I110
sg6370
g7202
sS'block_loop.thisIndex'
p7924
g6364
sg38
S'left'
p7925
sg58
g62
sS'trial_loop.thisN'
p7926
I110
sg33
g7206
sg63
g64
sS'trial_loop.thisIndex'
p7927
g59
(g98
S'n\x00\x00\x00'
tRp7928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7929
I0
sg6379
g7210
sS'block_loop.thisRepN'
p7930
I2
sg6382
g7206
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7931
I2
sg6384
g7213
sg55
g11
sS'block_loop.thisTrial'
p7932
Nsg69
Vy
sS'block_loop.thisTrialN'
p7933
I0
sg39
F0.91690049373210059
sg34
g752
(S'\x07\xdf\n\x14\x13#\x00\r\x9c`'
tRp7934
sa(dp7935
S'trial_loop.thisTrialN'
p7936
I111
sg6370
g7232
sS'block_loop.thisIndex'
p7937
g6364
sg38
S'right'
p7938
sg58
g62
sS'trial_loop.thisN'
p7939
I111
sg33
g6499
sg63
g64
sS'trial_loop.thisIndex'
p7940
g59
(g98
S'o\x00\x00\x00'
tRp7941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7942
I0
sg6379
g7239
sS'block_loop.thisRepN'
p7943
I2
sg6382
g6499
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7944
I2
sg6384
g6493
sg55
g11
sS'block_loop.thisTrial'
p7945
Nsg69
Vy
sS'block_loop.thisTrialN'
p7946
I0
sg39
F2.2004682433289418
sg34
g752
(S'\x07\xdf\n\x14\x13#\x06\x0c\xc1\xa0'
tRp7947
sa(dp7948
S'trial_loop.thisTrialN'
p7949
I112
sg6370
g6408
sS'block_loop.thisIndex'
p7950
g6364
sg38
S'left'
p7951
sg58
g62
sS'trial_loop.thisN'
p7952
I112
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7953
g59
(g98
S'p\x00\x00\x00'
tRp7954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7955
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7956
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7957
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7958
Nsg69
Vy
sS'block_loop.thisTrialN'
p7959
I0
sg39
F0.86685114343708847
sg34
g752
(S'\x07\xdf\n\x14\x13#\x0e\x01!\x10'
tRp7960
sa(dp7961
S'trial_loop.thisTrialN'
p7962
I113
sg6370
g7777
sS'block_loop.thisIndex'
p7963
g6364
sg38
S'left'
p7964
sg58
g62
sS'trial_loop.thisN'
p7965
I113
sg33
g6855
sg63
g64
sS'trial_loop.thisIndex'
p7966
g59
(g98
S'q\x00\x00\x00'
tRp7967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7968
I0
sg6379
g7784
sS'block_loop.thisRepN'
p7969
I2
sg6382
g6855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7970
I2
sg6384
g6862
sg55
g11
sS'block_loop.thisTrial'
p7971
Nsg69
Vy
sS'block_loop.thisTrialN'
p7972
I0
sg39
F0.61684700953264837
sg34
g752
(S'\x07\xdf\n\x14\x13#\x13\x0e\xd0\xf8'
tRp7973
sa(dp7974
S'trial_loop.thisTrialN'
p7975
I114
sg6370
g7012
sS'block_loop.thisIndex'
p7976
g6364
sg38
S'left'
p7977
sg58
g62
sS'trial_loop.thisN'
p7978
I114
sg33
g6917
sg63
g64
sS'trial_loop.thisIndex'
p7979
g59
(g98
S'r\x00\x00\x00'
tRp7980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7981
I0
sg6379
g7019
sS'block_loop.thisRepN'
p7982
I2
sg6382
g6917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7983
I2
sg6384
g6924
sg55
g11
sS'block_loop.thisTrial'
p7984
Nsg69
Vy
sS'block_loop.thisTrialN'
p7985
I0
sg39
F0.75010961979933199
sg34
g752
(S'\x07\xdf\n\x14\x13#\x19\tn\x10'
tRp7986
sa(dp7987
S'trial_loop.thisTrialN'
p7988
I115
sg6370
g7232
sS'block_loop.thisIndex'
p7989
g6364
sg38
S'right'
p7990
sg58
g62
sS'trial_loop.thisN'
p7991
I115
sg33
g6499
sg63
g64
sS'trial_loop.thisIndex'
p7992
g59
(g98
S's\x00\x00\x00'
tRp7993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7994
I0
sg6379
g7239
sS'block_loop.thisRepN'
p7995
I2
sg6382
g6499
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7996
I2
sg6384
g6493
sg55
g11
sS'block_loop.thisTrial'
p7997
Nsg69
Vy
sS'block_loop.thisTrialN'
p7998
I0
sg39
F0.78342947754572378
sg34
g752
(S'\x07\xdf\n\x14\x13#\x1f\x061\xf0'
tRp7999
sa(dp8000
S'trial_loop.thisTrialN'
p8001
I116
sg6370
g7325
sS'block_loop.thisIndex'
p8002
g6364
sg38
S'left'
p8003
sg58
g62
sS'trial_loop.thisN'
p8004
I116
sg33
g6638
sg63
g64
sS'trial_loop.thisIndex'
p8005
g59
(g98
S't\x00\x00\x00'
tRp8006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8007
I0
sg6379
g7332
sS'block_loop.thisRepN'
p8008
I2
sg6382
g6638
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8009
I2
sg6384
g6645
sg55
g11
sS'block_loop.thisTrial'
p8010
Nsg69
Vy
sS'block_loop.thisTrialN'
p8011
I0
sg39
F0.70012270575170987
sg34
g752
(S'\x07\xdf\n\x14\x13#%\x03n\xe8'
tRp8012
sa(dp8013
S'trial_loop.thisTrialN'
p8014
I117
sg6370
g6711
sS'block_loop.thisIndex'
p8015
g6364
sg38
S'left'
p8016
sg58
g62
sS'trial_loop.thisN'
p8017
I117
sg33
g6561
sg63
g64
sS'trial_loop.thisIndex'
p8018
g59
(g98
S'u\x00\x00\x00'
tRp8019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8020
I0
sg6379
g6718
sS'block_loop.thisRepN'
p8021
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8022
I2
sg6384
g6568
sg55
g11
sS'block_loop.thisTrial'
p8023
Nsg69
Vy
sS'block_loop.thisTrialN'
p8024
I0
sg39
F0.81686052312943502
sg34
g752
(S'\x07\xdf\n\x14\x13#*\x0e~\xf0'
tRp8025
sa(dp8026
S'trial_loop.thisTrialN'
p8027
I118
sg6370
g6739
sS'block_loop.thisIndex'
p8028
g6364
sg38
S'left'
p8029
sg58
g62
sS'trial_loop.thisN'
p8030
I118
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p8031
g59
(g98
S'v\x00\x00\x00'
tRp8032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8033
I0
sg6379
g6746
sS'block_loop.thisRepN'
p8034
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8035
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8036
Nsg69
Vy
sS'block_loop.thisTrialN'
p8037
I0
sg39
F0.66674411802159739
sg34
g752
(S'\x07\xdf\n\x14\x13#0\x0c5\x00'
tRp8038
sa(dp8039
S'trial_loop.thisTrialN'
p8040
I119
sg6370
g7081
sS'block_loop.thisIndex'
p8041
g6364
sg38
S'left'
p8042
sg58
g62
sS'trial_loop.thisN'
p8043
I119
sg33
g6934
sg63
g64
sS'trial_loop.thisIndex'
p8044
g59
(g98
S'w\x00\x00\x00'
tRp8045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8046
I0
sg6379
g7088
sS'block_loop.thisRepN'
p8047
I2
sg6382
g6934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8048
I2
sg6384
g6941
sg55
g11
sS'block_loop.thisTrial'
p8049
Nsg69
Vy
sS'block_loop.thisTrialN'
p8050
I0
sg39
F0.61675064673909219
sg34
g752
(S'\x07\xdf\n\x14\x13#6\x07\xc80'
tRp8051
sa(dp8052
S'trial_loop.thisTrialN'
p8053
I120
sg6370
g7012
sS'block_loop.thisIndex'
p8054
g6364
sg38
S'left'
p8055
sg58
g62
sS'trial_loop.thisN'
p8056
I120
sg33
g6917
sg63
g64
sS'trial_loop.thisIndex'
p8057
g59
(g98
S'x\x00\x00\x00'
tRp8058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8059
I0
sg6379
g7019
sS'block_loop.thisRepN'
p8060
I2
sg6382
g6917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8061
I2
sg6384
g6924
sg55
g11
sS'block_loop.thisTrial'
p8062
Nsg69
Vy
sS'block_loop.thisTrialN'
p8063
I0
sg39
F0.83353527705185115
sg34
g752
(S'\x07\xdf\n\x14\x13$\x00\x02eH'
tRp8064
sa(dp8065
S'trial_loop.thisTrialN'
p8066
I121
sg6370
g6881
sS'block_loop.thisIndex'
p8067
g6364
sg38
S'left'
p8068
sg58
g62
sS'trial_loop.thisN'
p8069
I121
sg33
g6892
sg63
g64
sS'trial_loop.thisIndex'
p8070
g59
(g98
S'y\x00\x00\x00'
tRp8071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8072
I0
sg6379
g6889
sS'block_loop.thisRepN'
p8073
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8074
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p8075
Nsg69
Vy
sS'block_loop.thisTrialN'
p8076
I0
sg39
F1.1835451699116675
sg34
g752
(S'\x07\xdf\n\x14\x13$\x06\x00U\xf0'
tRp8077
sa(dp8078
S'trial_loop.thisTrialN'
p8079
I122
sg6370
g6769
sS'block_loop.thisIndex'
p8080
g6364
sg38
S'left'
p8081
sg58
g62
sS'trial_loop.thisN'
p8082
I122
sg33
g6459
sg63
g64
sS'trial_loop.thisIndex'
p8083
g59
(g98
S'z\x00\x00\x00'
tRp8084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8085
I0
sg6379
g6776
sS'block_loop.thisRepN'
p8086
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8087
I2
sg6384
g6466
sg55
g11
sS'block_loop.thisTrial'
p8088
Nsg69
Vy
sS'block_loop.thisTrialN'
p8089
I0
sg39
F0.73344085292046657
sg34
g752
(S'\x07\xdf\n\x14\x13$\x0c\x03\x86X'
tRp8090
sa(dp8091
S'trial_loop.thisTrialN'
p8092
I123
sg6370
g7684
sS'block_loop.thisIndex'
p8093
g6364
sg38
S'left'
p8094
sg58
g62
sS'trial_loop.thisN'
p8095
I123
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8096
g59
(g98
S'{\x00\x00\x00'
tRp8097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8098
I0
sg6379
g7691
sS'block_loop.thisRepN'
p8099
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8100
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8101
Nsg69
Vy
sS'block_loop.thisTrialN'
p8102
I0
sg39
F0.63387756451993482
sg34
g752
(S'\x07\xdf\n\x14\x13$\x12\x00\x0b\xb8'
tRp8103
sa(dp8104
S'trial_loop.thisTrialN'
p8105
I124
sg6370
g7511
sS'block_loop.thisIndex'
p8106
g6364
sg38
S'left'
p8107
sg58
g62
sS'trial_loop.thisN'
p8108
I124
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p8109
g59
(g98
S'|\x00\x00\x00'
tRp8110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8111
I0
sg6379
g7518
sS'block_loop.thisRepN'
p8112
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8113
I2
sg6384
g6534
sg55
g11
sS'block_loop.thisTrial'
p8114
Nsg69
Vy
sS'block_loop.thisTrialN'
p8115
I0
sg39
F0.53354109302745201
sg34
g752
(S'\x07\xdf\n\x14\x13$\x17\n)\x90'
tRp8116
sa(dp8117
S'trial_loop.thisTrialN'
p8118
I125
sg6370
g6371
sS'block_loop.thisIndex'
p8119
g6364
sg38
S'right'
p8120
sg58
g62
sS'trial_loop.thisN'
p8121
I125
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8122
g59
(g98
S'}\x00\x00\x00'
tRp8123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8124
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8125
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8126
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8127
Nsg69
Vy
sS'block_loop.thisTrialN'
p8128
I0
sg39
F1.0668136246713402
sg34
g752
(S'\x07\xdf\n\x14\x13$\x1d\x03\x95\xf8'
tRp8129
sa(dp8130
S'trial_loop.thisTrialN'
p8131
I126
sg6370
g6472
sS'block_loop.thisIndex'
p8132
g6364
sg38
S'right'
p8133
sg58
g62
sS'trial_loop.thisN'
p8134
I126
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p8135
g59
(g98
S'~\x00\x00\x00'
tRp8136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8137
I0
sg6379
g6480
sS'block_loop.thisRepN'
p8138
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8139
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8140
Nsg69
Vy
sS'block_loop.thisTrialN'
p8141
I0
sg39
F0.83347027493073256
sg34
g752
(S'\x07\xdf\n\x14\x13$#\x05\x1c\x98'
tRp8142
sa(dp8143
S'trial_loop.thisTrialN'
p8144
I127
sg6370
g6754
sS'block_loop.thisIndex'
p8145
g6364
sg38
S'left'
p8146
sg58
g62
sS'trial_loop.thisN'
p8147
I127
sg33
g6670
sg63
g64
sS'trial_loop.thisIndex'
p8148
g59
(g98
S'\x7f\x00\x00\x00'
tRp8149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8150
I0
sg6379
g6761
sS'block_loop.thisRepN'
p8151
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8152
I2
sg6384
g6677
sg55
g11
sS'block_loop.thisTrial'
p8153
Nsg69
Vy
sS'block_loop.thisTrialN'
p8154
I0
sg39
F2.2334867535391822
sg34
g752
(S'\x07\xdf\n\x14\x13$)\x03\x11('
tRp8155
sa(dp8156
S'trial_loop.thisTrialN'
p8157
I128
sg6370
g6634
sS'block_loop.thisIndex'
p8158
g6364
sg38
S'right'
p8159
sg58
g62
sS'trial_loop.thisN'
p8160
I128
sg33
g6638
sg63
g64
sS'trial_loop.thisIndex'
p8161
g59
(g98
S'\x80\x00\x00\x00'
tRp8162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8163
I0
sg6379
g6642
sS'block_loop.thisRepN'
p8164
I2
sg6382
g6638
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8165
I2
sg6384
g6645
sg55
g11
sS'block_loop.thisTrial'
p8166
Nsg69
Vy
sS'block_loop.thisTrialN'
p8167
I0
sg39
F0.70047879191770335
sg34
g752
(S'\x07\xdf\n\x14\x13$0\x07+\xf0'
tRp8168
sa(dp8169
S'trial_loop.thisTrialN'
p8170
I129
sg6370
g6591
sS'block_loop.thisIndex'
p8171
g6364
sg38
S'left'
p8172
sg58
g62
sS'trial_loop.thisN'
p8173
I129
sg33
g6595
sg63
g64
sS'trial_loop.thisIndex'
p8174
g59
(g98
S'\x81\x00\x00\x00'
tRp8175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8176
I0
sg6379
g6599
sS'block_loop.thisRepN'
p8177
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8178
I2
sg6384
g6602
sg55
g11
sS'block_loop.thisTrial'
p8179
Nsg69
Vy
sS'block_loop.thisTrialN'
p8180
I0
sg39
F0.98343956998360227
sg34
g752
(S'\x07\xdf\n\x14\x13$6\x0388'
tRp8181
sa(dp8182
S'trial_loop.thisTrialN'
p8183
I130
sg6370
g6557
sS'block_loop.thisIndex'
p8184
g6364
sg38
S'right'
p8185
sg58
g62
sS'trial_loop.thisN'
p8186
I130
sg33
g6561
sg63
g64
sS'trial_loop.thisIndex'
p8187
g59
(g98
S'\x82\x00\x00\x00'
tRp8188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8189
I0
sg6379
g6565
sS'block_loop.thisRepN'
p8190
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8191
I2
sg6384
g6568
sg55
g11
sS'block_loop.thisTrial'
p8192
Nsg69
Vy
sS'block_loop.thisTrialN'
p8193
I0
sg39
F0.93343155875481898
sg34
g752
(S'\x07\xdf\n\x14\x13%\x00\x03O\xa8'
tRp8194
sa(dp8195
S'trial_loop.thisTrialN'
p8196
I131
sg6370
g7202
sS'block_loop.thisIndex'
p8197
g6364
sg38
S'left'
p8198
sg58
g62
sS'trial_loop.thisN'
p8199
I131
sg33
g7206
sg63
g64
sS'trial_loop.thisIndex'
p8200
g59
(g98
S'\x83\x00\x00\x00'
tRp8201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8202
I0
sg6379
g7210
sS'block_loop.thisRepN'
p8203
I2
sg6382
g7206
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8204
I2
sg6384
g7213
sg55
g11
sS'block_loop.thisTrial'
p8205
Nsg69
Vy
sS'block_loop.thisTrialN'
p8206
I0
sg39
F0.60023982360507944
sg34
g752
(S'\x07\xdf\n\x14\x13%\x06\x02\xee\x00'
tRp8207
sa(dp8208
S'trial_loop.thisTrialN'
p8209
I132
sg6370
g7496
sS'block_loop.thisIndex'
p8210
g6364
sg38
S'right'
p8211
sg58
g62
sS'trial_loop.thisN'
p8212
I132
sg33
g6550
sg63
g64
sS'trial_loop.thisIndex'
p8213
g59
(g98
S'\x84\x00\x00\x00'
tRp8214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8215
I0
sg6379
g7503
sS'block_loop.thisRepN'
p8216
I2
sg6382
g6550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8217
I2
sg6384
g6544
sg55
g11
sS'block_loop.thisTrial'
p8218
Nsg69
Vy
sS'block_loop.thisTrialN'
p8219
I0
sg39
F0.88343210043967701
sg34
g752
(S'\x07\xdf\n\x14\x13%\x0b\x0c\x8e\xd8'
tRp8220
sa(dp8221
S'trial_loop.thisTrialN'
p8222
I133
sg6370
g7805
sS'block_loop.thisIndex'
p8223
g6364
sg38
S'right'
p8224
sg58
g62
sS'trial_loop.thisN'
p8225
I133
sg33
g6595
sg63
g64
sS'trial_loop.thisIndex'
p8226
g59
(g98
S'\x85\x00\x00\x00'
tRp8227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8228
I0
sg6379
g7812
sS'block_loop.thisRepN'
p8229
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8230
I2
sg6384
g6602
sg55
g11
sS'block_loop.thisTrial'
p8231
Nsg69
Vy
sS'block_loop.thisTrialN'
p8232
I0
sg39
F0.71675868647798779
sg34
g752
(S'\x07\xdf\n\x14\x13%\x11\x0b;\x00'
tRp8233
sa(dp8234
S'trial_loop.thisTrialN'
p8235
I134
sg6370
g6666
sS'block_loop.thisIndex'
p8236
g6364
sg38
S'right'
p8237
sg58
g62
sS'trial_loop.thisN'
p8238
I134
sg33
g6670
sg63
g64
sS'trial_loop.thisIndex'
p8239
g59
(g98
S'\x86\x00\x00\x00'
tRp8240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8241
I0
sg6379
g6674
sS'block_loop.thisRepN'
p8242
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8243
I2
sg6384
g6677
sg55
g11
sS'block_loop.thisTrial'
p8244
Nsg69
Vy
sS'block_loop.thisTrialN'
p8245
I0
sg39
F0.93385293213941623
sg34
g752
(S'\x07\xdf\n\x14\x13%\x17\x07\x81\xe0'
tRp8246
sa(dp8247
S'trial_loop.thisTrialN'
p8248
I135
sg6370
g7805
sS'block_loop.thisIndex'
p8249
g6364
sg38
S'right'
p8250
sg58
g62
sS'trial_loop.thisN'
p8251
I135
sg33
g6595
sg63
g64
sS'trial_loop.thisIndex'
p8252
g59
(g98
S'\x87\x00\x00\x00'
tRp8253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8254
I0
sg6379
g7812
sS'block_loop.thisRepN'
p8255
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8256
I2
sg6384
g6602
sg55
g11
sS'block_loop.thisTrial'
p8257
Nsg69
Vy
sS'block_loop.thisTrialN'
p8258
I0
sg39
F0.78354551203301526
sg34
g752
(S'\x07\xdf\n\x14\x13%\x1d\x06\xe1\xb8'
tRp8259
sa(dp8260
S'trial_loop.thisTrialN'
p8261
I136
sg6370
g7669
sS'block_loop.thisIndex'
p8262
g6364
sg38
S'right'
p8263
sg58
g62
sS'trial_loop.thisN'
p8264
I136
sg33
g7206
sg63
g64
sS'trial_loop.thisIndex'
p8265
g59
(g98
S'\x88\x00\x00\x00'
tRp8266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8267
I0
sg6379
g7676
sS'block_loop.thisRepN'
p8268
I2
sg6382
g7206
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8269
I2
sg6384
g7213
sg55
g11
sS'block_loop.thisTrial'
p8270
Nsg69
Vy
sS'block_loop.thisTrialN'
p8271
I0
sg39
F0.66685929721279535
sg34
g752
(S'\x07\xdf\n\x14\x13%#\x04\x1e\xb0'
tRp8272
sa(dp8273
S'trial_loop.thisTrialN'
p8274
I137
sg6370
g7096
sS'block_loop.thisIndex'
p8275
g6364
sg38
S'right'
p8276
sg58
g62
sS'trial_loop.thisN'
p8277
I137
sg33
g6892
sg63
g64
sS'trial_loop.thisIndex'
p8278
g59
(g98
S'\x89\x00\x00\x00'
tRp8279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8280
I0
sg6379
g7103
sS'block_loop.thisRepN'
p8281
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8282
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p8283
Nsg69
Vy
sS'block_loop.thisTrialN'
p8284
I0
sg39
F0.68350554143398767
sg34
g752
(S'\x07\xdf\n\x14\x13%(\x0e\xb5\xa0'
tRp8285
sa(dp8286
S'trial_loop.thisTrialN'
p8287
I138
sg6370
g7511
sS'block_loop.thisIndex'
p8288
g6364
sg38
S'left'
p8289
sg58
g62
sS'trial_loop.thisN'
p8290
I138
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p8291
g59
(g98
S'\x8a\x00\x00\x00'
tRp8292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8293
I0
sg6379
g7518
sS'block_loop.thisRepN'
p8294
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8295
I2
sg6384
g6534
sg55
g11
sS'block_loop.thisTrial'
p8296
Nsg69
Vy
sS'block_loop.thisTrialN'
p8297
I0
sg39
F0.81688019482680829
sg34
g752
(S'\x07\xdf\n\x14\x13%.\n\x83h'
tRp8298
sa(dp8299
S'trial_loop.thisTrialN'
p8300
I139
sg6370
g7325
sS'block_loop.thisIndex'
p8301
g6364
sg38
S'left'
p8302
sg58
g62
sS'trial_loop.thisN'
p8303
I139
sg33
g6638
sg63
g64
sS'trial_loop.thisIndex'
p8304
g59
(g98
S'\x8b\x00\x00\x00'
tRp8305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8306
I0
sg6379
g7332
sS'block_loop.thisRepN'
p8307
I2
sg6382
g6638
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8308
I2
sg6384
g6645
sg55
g11
sS'block_loop.thisTrial'
p8309
Nsg69
Vy
sS'block_loop.thisTrialN'
p8310
I0
sg39
F0.76687845573178492
sg34
g752
(S'\x07\xdf\n\x14\x13%4\x089x'
tRp8311
sa(dp8312
S'trial_loop.thisTrialN'
p8313
I140
sg6370
g7805
sS'block_loop.thisIndex'
p8314
g6364
sg38
S'right'
p8315
sg58
g62
sS'trial_loop.thisN'
p8316
I140
sg33
g6595
sg63
g64
sS'trial_loop.thisIndex'
p8317
g59
(g98
S'\x8c\x00\x00\x00'
tRp8318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8319
I0
sg6379
g7812
sS'block_loop.thisRepN'
p8320
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8321
I2
sg6384
g6602
sg55
g11
sS'block_loop.thisTrial'
p8322
Nsg69
Vy
sS'block_loop.thisTrialN'
p8323
I0
sg39
F0.8004759979667142
sg34
g752
(S'\x07\xdf\n\x14\x13%:\x05;\xd8'
tRp8324
sa(dp8325
S'trial_loop.thisTrialN'
p8326
I141
sg6370
g6391
sS'block_loop.thisIndex'
p8327
g6364
sg38
S'right'
p8328
sg58
g62
sS'trial_loop.thisN'
p8329
I141
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8330
g59
(g98
S'\x8d\x00\x00\x00'
tRp8331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8332
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8333
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8334
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8335
Nsg69
Vy
sS'block_loop.thisTrialN'
p8336
I0
sg39
F0.91688053694088012
sg34
g752
(S'\x07\xdf\n\x14\x13&\x04\x02\xb3h'
tRp8337
sa(dp8338
S'trial_loop.thisTrialN'
p8339
I142
sg6370
g7777
sS'block_loop.thisIndex'
p8340
g6364
sg38
S'left'
p8341
sg58
g62
sS'trial_loop.thisN'
p8342
I142
sg33
g6855
sg63
g64
sS'trial_loop.thisIndex'
p8343
g59
(g98
S'\x8e\x00\x00\x00'
tRp8344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8345
I0
sg6379
g7784
sS'block_loop.thisRepN'
p8346
I2
sg6382
g6855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8347
I2
sg6384
g6862
sg55
g11
sS'block_loop.thisTrial'
p8348
Nsg69
Vy
sS'block_loop.thisTrialN'
p8349
I0
sg39
F0.75008966300811153
sg34
g752
(S'\x07\xdf\n\x14\x13&\n\x01\xd8\xa8'
tRp8350
sa(dp8351
S'trial_loop.thisTrialN'
p8352
I143
sg6370
g7081
sS'block_loop.thisIndex'
p8353
g6364
sg38
S'left'
p8354
sg58
g62
sS'trial_loop.thisN'
p8355
I143
sg33
g6934
sg63
g64
sS'trial_loop.thisIndex'
p8356
g59
(g98
S'\x8f\x00\x00\x00'
tRp8357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8358
I0
sg6379
g7088
sS'block_loop.thisRepN'
p8359
I2
sg6382
g6934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8360
I2
sg6384
g6941
sg55
g11
sS'block_loop.thisTrial'
p8361
Nsg69
Vy
sS'block_loop.thisTrialN'
p8362
I0
sg39
F0.60010468761902303
sg34
g752
(S'\x07\xdf\n\x14\x13&\x0f\r\xda\xe0'
tRp8363
sa(dp8364
S'trial_loop.thisTrialN'
p8365
I144
sg6370
g7684
sS'block_loop.thisIndex'
p8366
g6364
sg38
S'left'
p8367
sg58
g62
sS'trial_loop.thisN'
p8368
I144
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p8369
g59
(g98
S'\x90\x00\x00\x00'
tRp8370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8371
I0
sg6379
g7691
sS'block_loop.thisRepN'
p8372
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8373
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8374
Nsg69
Vy
sS'block_loop.thisTrialN'
p8375
I0
sg39
F0.6001585709527717
sg34
g752
(S'\x07\xdf\n\x14\x13&\x15\x08=`'
tRp8376
sa(dp8377
S'trial_loop.thisTrialN'
p8378
I145
sg6370
g6634
sS'block_loop.thisIndex'
p8379
g6364
sg38
S'right'
p8380
sg58
g62
sS'trial_loop.thisN'
p8381
I145
sg33
g6645
sg63
g64
sS'trial_loop.thisIndex'
p8382
g59
(g98
S'\x91\x00\x00\x00'
tRp8383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8384
I0
sg6379
g6642
sS'block_loop.thisRepN'
p8385
I2
sg6382
g6638
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8386
I2
sg6384
g6645
sg55
g11
sS'block_loop.thisTrial'
p8387
Nsg69
Vy
sS'block_loop.thisTrialN'
p8388
I0
sg39
F0.6335323120438261
sg34
g752
(S'\x07\xdf\n\x14\x13&\x1b\x02\x9f\xe0'
tRp8389
sa(dp8390
S'trial_loop.thisTrialN'
p8391
I146
sg6370
g7496
sS'block_loop.thisIndex'
p8392
g6364
sg38
S'right'
p8393
sg58
g62
sS'trial_loop.thisN'
p8394
I146
sg33
g6550
sg63
g64
sS'trial_loop.thisIndex'
p8395
g59
(g98
S'\x92\x00\x00\x00'
tRp8396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8397
I0
sg6379
g7503
sS'block_loop.thisRepN'
p8398
I2
sg6382
g6550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8399
I2
sg6384
g6544
sg55
g11
sS'block_loop.thisTrial'
p8400
Nsg69
Vy
sS'block_loop.thisTrialN'
p8401
I0
sg39
F0.78354437164671253
sg34
g752
(S'\x07\xdf\n\x14\x13& \x0c\xb9\xd0'
tRp8402
sa(dp8403
S'trial_loop.thisTrialN'
p8404
I147
sg6370
g7040
sS'block_loop.thisIndex'
p8405
g6364
sg38
S'left'
p8406
sg58
g62
sS'trial_loop.thisN'
p8407
I147
sg33
g6517
sg63
g64
sS'trial_loop.thisIndex'
p8408
g59
(g98
S'\x93\x00\x00\x00'
tRp8409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8410
I0
sg6379
g7047
sS'block_loop.thisRepN'
p8411
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8412
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p8413
Nsg69
Vy
sS'block_loop.thisTrialN'
p8414
I0
sg39
F0.70019312471413286
sg34
g752
(S'\x07\xdf\n\x14\x13&&\t\xf6\xc8'
tRp8415
sa(dp8416
S'trial_loop.thisTrialN'
p8417
I148
sg6370
g7012
sS'block_loop.thisIndex'
p8418
g6364
sg38
S'left'
p8419
sg58
g62
sS'trial_loop.thisN'
p8420
I148
sg33
g6917
sg63
g64
sS'trial_loop.thisIndex'
p8421
g59
(g98
S'\x94\x00\x00\x00'
tRp8422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8423
I0
sg6379
g7019
sS'block_loop.thisRepN'
p8424
I2
sg6382
g6917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8425
I2
sg6384
g6924
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vy
sS'block_loop.thisTrialN'
p8427
I0
sg39
F0.65005083279538667
sg34
g752
(S'\x07\xdf\n\x14\x13&,\x05\xc4\x90'
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g6881
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'left'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g6892
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g6889
sS'block_loop.thisRepN'
p8437
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8438
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vy
sS'block_loop.thisTrialN'
p8440
I0
sg39
F0.73345596306171501
sg34
g752
(S'\x07\xdf\n\x14\x13&2\x01\x19@'
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g6506
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'right'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6510
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g6514
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8451
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vy
sS'block_loop.thisTrialN'
p8453
I0
sg39
F0.7999753676194814
sg34
g752
(S'\x07\xdf\n\x14\x13&7\x0c\xa6H'
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g6881
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'left'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g6885
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g6889
sS'block_loop.thisRepN'
p8463
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8464
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vy
sS'block_loop.thisTrialN'
p8466
I0
sg39
F0.76675073226942914
sg34
g752
(S"\x07\xdf\n\x14\x13'\x01\n\x1d\xd8"
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g6797
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'left'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g6804
sS'block_loop.thisRepN'
p8476
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8477
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vy
sS'block_loop.thisTrialN'
p8479
I0
sg39
F0.80056665882148081
sg34
g752
(S"\x07\xdf\n\x14\x13'\x07\x07\x1cP"
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g6557
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'right'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6568
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g6565
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8490
I2
sg6384
g6568
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vy
sS'block_loop.thisTrialN'
p8492
I0
sg39
F0.78346539977064822
sg34
g752
(S"\x07\xdf\n\x14\x13'\r\x04\x97\xc8"
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g6540
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'left'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6550
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g6548
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8503
I2
sg6384
g6544
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vy
sS'block_loop.thisTrialN'
p8505
I0
sg39
F1.2001135826430982
sg34
g752
(S"\x07\xdf\n\x14\x13'\x13\x01\xd4\xc0"
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g6881
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'left'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6885
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g6889
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8516
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vy
sS'block_loop.thisTrialN'
p8518
I0
sg39
F0.68355685888673179
sg34
g752
(S"\x07\xdf\n\x14\x13'\x19\x05~@"
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g6898
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'right'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g6905
sS'block_loop.thisRepN'
p8528
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8529
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vy
sS'block_loop.thisTrialN'
p8531
I0
sg39
F0.88351991031959187
sg34
g752
(S"\x07\xdf\n\x14\x13'\x1f\x01\r\x88"
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g6391
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'right'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8542
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vy
sS'block_loop.thisTrialN'
p8544
I0
sg39
F0.8168673654581653
sg34
g752
(S"\x07\xdf\n\x14\x13'$\x0e\xfb\xf0"
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g7669
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'right'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g7206
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g7676
sS'block_loop.thisRepN'
p8554
I2
sg6382
g7206
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8555
I2
sg6384
g7213
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vy
sS'block_loop.thisTrialN'
p8557
I0
sg39
F0.70055633830634179
sg34
g752
(S"\x07\xdf\n\x14\x13'*\x0c\xb2\x00"
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g7012
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'left'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6917
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g7019
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8568
I2
sg6384
g6924
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vy
sS'block_loop.thisTrialN'
p8570
I0
sg39
F0.78351928311167285
sg34
g752
(S"\x07\xdf\n\x14\x13'0\x08\xba`"
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g6711
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'left'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6561
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g6718
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8581
I2
sg6384
g6568
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vy
sS'block_loop.thisTrialN'
p8583
I0
sg39
F0.98347691768867662
sg34
g752
(S"\x07\xdf\n\x14\x13'6\x05\xf7X"
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g6754
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'left'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g6670
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g6761
sS'block_loop.thisRepN'
p8593
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8594
I2
sg6384
g6677
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vy
sS'block_loop.thisTrialN'
p8596
I0
sg39
F0.73352467143558897
sg34
g752
(S'\x07\xdf\n\x14\x13(\x00\x06\x0e\xc8'
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g6851
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'right'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g6855
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g6859
sS'block_loop.thisRepN'
p8606
I2
sg6382
g6855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8607
I2
sg6384
g6862
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vy
sS'block_loop.thisTrialN'
p8609
I0
sg39
F0.81685824236046756
sg34
g752
(S'\x07\xdf\n\x14\x13(\x06\x02\x94('
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g6930
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'right'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g6934
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g6938
sS'block_loop.thisRepN'
p8619
I2
sg6382
g6934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8620
I2
sg6384
g6941
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vy
sS'block_loop.thisTrialN'
p8622
I0
sg39
F0.83350163559953216
sg34
g752
(S'\x07\xdf\n\x14\x13(\x0c\x00J8'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g6769
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'left'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g6459
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g6776
sS'block_loop.thisRepN'
p8632
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8633
I2
sg6384
g6466
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vy
sS'block_loop.thisTrialN'
p8635
I0
sg39
F0.63354599669401068
sg34
g752
(S'\x07\xdf\n\x14\x13(\x11\r\x81\x08'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g6371
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'right'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8645
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8646
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vy
sS'block_loop.thisTrialN'
p8648
I0
sg39
F0.66679857155395439
sg34
g752
(S'\x07\xdf\n\x14\x13(\x17\x08\\\xa0'
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g6472
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'right'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6483
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g6480
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8659
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vy
sS'block_loop.thisTrialN'
p8661
I0
sg39
F0.73353065847913967
sg34
g752
(S'\x07\xdf\n\x14\x13(\x1d\x03\xeb\xe8'
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g7805
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'right'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g7812
sS'block_loop.thisRepN'
p8671
I2
sg6382
g6595
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8672
I2
sg6384
g6602
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vy
sS'block_loop.thisTrialN'
p8674
I0
sg39
F0.73354263255168917
sg34
g752
(S'\x07\xdf\n\x14\x13(#\x006\xb0'
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g7669
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'right'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g7206
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g7676
sS'block_loop.thisRepN'
p8684
I2
sg6382
g7206
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8685
I2
sg6384
g7213
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vy
sS'block_loop.thisTrialN'
p8687
I0
sg39
F0.63346959069895092
sg34
g752
(S'\x07\xdf\n\x14\x13((\x0b\xfeP'
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g7684
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'left'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g7691
sS'block_loop.thisRepN'
p8697
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8698
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vy
sS'block_loop.thisTrialN'
p8700
I0
sg39
F0.61676176553010009
sg34
g752
(S'\x07\xdf\n\x14\x13(.\x06\xd9\xe8'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g6557
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'right'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6561
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g6565
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8711
I2
sg6384
g6568
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vy
sS'block_loop.thisTrialN'
p8713
I0
sg39
F0.61687409375008428
sg34
g752
(S'\x07\xdf\n\x14\x13(4\x01w\x00'
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g6913
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'right'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6917
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g6921
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6917
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8724
I2
sg6384
g6924
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vy
sS'block_loop.thisTrialN'
p8726
I0
sg39
F0.71685875552793732
sg34
g752
(S'\x07\xdf\n\x14\x13(9\x0b\x94\xd8'
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g6754
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'left'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6670
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g6761
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8737
I2
sg6384
g6677
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vy
sS'block_loop.thisTrialN'
p8739
I0
sg39
F0.61681137241248507
sg34
g752
(S'\x07\xdf\n\x14\x13)\x03\x07\x9d8'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g6930
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'right'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g6934
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g6938
sS'block_loop.thisRepN'
p8749
I2
sg6382
g6934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8750
I2
sg6384
g6941
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vy
sS'block_loop.thisTrialN'
p8752
I0
sg39
F0.61682420176657615
sg34
g752
(S'\x07\xdf\n\x14\x13)\t\x02>8'
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g7777
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'left'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6855
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g7784
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8763
I2
sg6384
g6862
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vy
sS'block_loop.thisTrialN'
p8765
I0
sg39
F0.70020509879395831
sg34
g752
(S'\x07\xdf\n\x14\x13)\x0e\x0c\x1d\x90'
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g6797
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'left'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g6804
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8776
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vy
sS'block_loop.thisTrialN'
p8778
I0
sg39
F0.63348299025528831
sg34
g752
(S'\x07\xdf\n\x14\x13)\x14\x08)\xd8'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g6455
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'right'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6459
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g6463
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6459
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8789
I2
sg6384
g6466
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vy
sS'block_loop.thisTrialN'
p8791
I0
sg39
F1.2502059825856122
sg34
g752
(S'\x07\xdf\n\x14\x13)\x1a\x03\x01\x88'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g6898
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'right'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g6905
sS'block_loop.thisRepN'
p8801
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8802
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vy
sS'block_loop.thisTrialN'
p8804
I0
sg39
F1.2833952659057104
sg34
g752
(S'\x07\xdf\n\x14\x13) \x07b\xa0'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g6666
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'right'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6670
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g6674
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8815
I2
sg6384
g6677
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vy
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.55020871952001471
sg34
g752
(S'\x07\xdf\n\x14\x13)&\x0c<\xd0'
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g7511
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'left'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g6534
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g7518
sS'block_loop.thisRepN'
p8827
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8828
I2
sg6384
g6534
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vy
sS'block_loop.thisTrialN'
p8830
I0
sg39
F0.58350833538133884
sg34
g752
(S'\x07\xdf\n\x14\x13),\x05\xe7\xb8'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g6666
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'right'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6677
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g6674
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6670
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8841
I2
sg6384
g6677
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vy
sS'block_loop.thisTrialN'
p8843
I0
sg39
F0.71689610323664965
sg34
g752
(S'\x07\xdf\n\x14\x13)2\x00\x0b\xb8'
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g6391
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'right'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8854
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vy
sS'block_loop.thisTrialN'
p8856
I0
sg39
F0.86684971795330057
sg34
g752
(S'\x07\xdf\n\x14\x13)7\x0bZ@'
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g7496
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'right'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6550
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g7503
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6550
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8867
I2
sg6384
g6544
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vy
sS'block_loop.thisTrialN'
p8869
I0
sg39
F1.4334788848573226
sg34
g752
(S'\x07\xdf\n\x14\x13*\x01\n\x02\x80'
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g6651
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'left'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g6584
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g6658
sS'block_loop.thisRepN'
p8879
I2
sg6382
g6584
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8880
I2
sg6384
g6578
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vy
sS'block_loop.thisTrialN'
p8882
I0
sg39
F1.0832622966627241
sg34
g752
(S'\x07\xdf\n\x14\x13*\x08\x01\xc18'
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g6506
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'right'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g6517
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g6514
sS'block_loop.thisRepN'
p8892
I2
sg6382
g6510
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8893
I2
sg6384
g6517
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vy
sS'block_loop.thisTrialN'
p8895
I0
sg39
F0.75020911865431117
sg34
g752
(S'\x07\xdf\n\x14\x13*\x0e\x03\x82p'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g6472
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'right'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g6480
sS'block_loop.thisRepN'
p8905
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8906
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vy
sS'block_loop.thisTrialN'
p8908
I0
sg39
F0.75020598258561222
sg34
g752
(S'\x07\xdf\n\x14\x13*\x14\x00FP'
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g7684
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'left'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g7691
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8919
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vy
sS'block_loop.thisTrialN'
p8921
I0
sg39
F0.85015272646705853
sg34
g752
(S'\x07\xdf\n\x14\x13*\x19\x0cH\x88'
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g6557
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'right'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6568
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g6565
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6561
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8932
I2
sg6384
g6568
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vy
sS'block_loop.thisTrialN'
p8934
I0
sg39
F0.93353248309722403
sg34
g752
(S'\x07\xdf\n\x14\x13*\x1f\nw\xb0'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g6408
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'left'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8945
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vy
sS'block_loop.thisTrialN'
p8947
I0
sg39
F1.0335302593448432
sg34
g752
(S'\x07\xdf\n\x14\x13*%\t\xdbp'
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g7325
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'left'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6638
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g7332
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6638
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8958
I2
sg6384
g6645
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vy
sS'block_loop.thisTrialN'
p8960
I0
sg39
F0.81680949076690013
sg34
g752
(S'\x07\xdf\n\x14\x13*+\n\xe5\x10'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g6489
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'left'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g6497
sS'block_loop.thisRepN'
p8970
I2
sg6382
g6499
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8971
I2
sg6384
g6493
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vy
sS'block_loop.thisTrialN'
p8973
I0
sg39
F0.71675070375931682
sg34
g752
(S'\x07\xdf\n\x14\x13*1\x08\x9b '
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g7669
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'right'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g7206
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g7676
sS'block_loop.thisRepN'
p8983
I2
sg6382
g7206
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8984
I2
sg6384
g7213
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vy
sS'block_loop.thisTrialN'
p8986
I0
sg39
F0.76690382936067181
sg34
g752
(S'\x07\xdf\n\x14\x13*7\x04\xe2\x00'
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g7096
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'right'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6892
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g7103
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6885
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8997
I2
sg6384
g6892
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vy
sS'block_loop.thisTrialN'
p8999
I0
sg39
F0.98356558286468498
sg34
g752
(S'\x07\xdf\n\x14\x13+\x01\x01\xe4`'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g6523
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'right'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g6531
sS'block_loop.thisRepN'
p9009
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9010
I2
sg6384
g6534
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vy
sS'block_loop.thisTrialN'
p9012
I0
sg39
F1.2168499175240868
sg34
g752
(S'\x07\xdf\n\x14\x13+\x07\x01\xfb\xd0'
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g6696
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'right'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g6703
sS'block_loop.thisRepN'
p9022
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9023
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vy
sS'block_loop.thisTrialN'
p9025
I0
sg39
F0.51725122007337632
sg34
g752
(S'\x07\xdf\n\x14\x13+\r\x05\xdf\xe8'
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g6739
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'left'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g6483
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g6746
sS'block_loop.thisRepN'
p9035
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9036
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vy
sS'block_loop.thisTrialN'
p9038
I0
sg39
F0.93348686757963151
sg34
g752
(S'\x07\xdf\n\x14\x13+\x12\x0eS\xf8'
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g7202
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'left'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g7206
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g7210
sS'block_loop.thisRepN'
p9048
I2
sg6382
g7206
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9049
I2
sg6384
g7213
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vy
sS'block_loop.thisTrialN'
p9051
I0
sg39
F0.83353328136581695
sg34
g752
(S'\x07\xdf\n\x14\x13+\x18\r\xb3\xd0'
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g6371
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'right'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g6380
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9062
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vy
sS'block_loop.thisTrialN'
p9064
I0
sg39
F0.78353353795682779
sg34
g752
(S'\x07\xdf\n\x14\x13+\x1e\x0b\xa8`'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g6523
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'right'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g6527
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g6531
sS'block_loop.thisRepN'
p9074
I2
sg6382
g6527
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9075
I2
sg6384
g6534
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vy
sS'block_loop.thisTrialN'
p9077
I0
sg39
F0.85020119295950281
sg34
g752
(S'\x07\xdf\n\x14\x13+$\x08\xe1p'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g6930
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'right'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g6934
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g6938
sS'block_loop.thisRepN'
p9087
I2
sg6382
g6934
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9088
I2
sg6384
g6941
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vy
sS'block_loop.thisTrialN'
p9090
I0
sg39
F0.95009319821110694
sg34
g752
(S'\x07\xdf\n\x14\x13+*\x07\x14\x80'
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vr
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vy
sa(dp9098
g63
g64
sg43
I55
sg56
Vr
sg57
Vn
sg42
I545
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vy
sa(dp9099
g63
g64
sg43
I55
sg55
g11
sg56
Vr
sg45
F0.23000000000000001
sg42
I545
sg49
F0.01
sg57
Vn
sg58
g62
sg44
I01
sg48
I25
sg47
g398
sg51
F30.219999999999999
sg46
F2.4400000000000004
sg65
g66
sg67
g68
sg50
I0
sg69
Vy
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I79606608
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'\n\xd7\xa3>R\xb8\x1e?\n\xd7#=\n\xd7\xa3>\x9a\x99\x19?\xaeGa?\x00\x00\x00\x00\x00\x00\x00\x00\xf6(\x9c?\x00\x00\x00\x00\xa4p\xbd?H\xe1\xfa?\xf6(\x1c@\n\xd7#?\\\x8f\xc2?\n\xd7#=\x14\xae\x07@\x1f\x85\xeb>\x8f\xc2\xf5?\x00\x00\x00\x00\n\xd7\xa3>\x00\x00\x00\x00\n\xd7#?\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\xcd\xcc\xcc?\n\xd7\xa3<H\xe1\x1a@\x00\x00\x00\x00\xcd\xcc\x8c?)\\\x0f>\x00\x00\x00\x00q=\n?\xa4p\xbd?333?\x14\xae\x07@\xaeGa>\x9a\x99\xd9?\xb8\x1e\x85?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S'\xee|\x97@!\xb0\xba@\x87\x16A@\x9a\x99AA\x87\x16\xd9@!\xb0\x8a@\xdb\xf9>@\x87\x16\x91@\xdb\xf9n@\xc9vV@1\x08\x88@T\xe3\xc5@\x00\x00 A\xee|\x9f@;\xdf\x1dA\xc9v6@/\xdd|@d;\x9b@\x98n\xd6@B`E@\x96CC@\xfc\xa9)@\xd5x\x03Au\x93x@\x10X\x9d@\xdb\xf9\x1e@\xbaI\xa4@\x0e-\x12@!\xb0z@u\x93(@T\xe3\xb5@\xbaI\x8c@\x87\x16A@\xdd$\xaa@\xa2E4A\x00\x00 Aw\xbe\x83@\xdd$\xba@\xdd$\x92@\x98n\xc6@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x90A\x00\x000A\x00\x00\xc0@\x00\x00\x10A\x00\x00\xb0A\x00\x00PA\x00\x00\xf8A\x00\x00\xa0@\x00\x00\xb8A\x00\x00\x1cB\x00\x00\x08B\x00\x00\x80@\x00\x00\x80?\x00\x00\x00@\x00\x00\x80A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\x04B\x00\x00\xc8A\x00\x00\x98A\x00\x00\xa8A\x00\x00 A\x00\x00@A\x00\x00\xa0A\x00\x00\xe0@\x00\x00\x00B\x00\x00\x18B\x00\x00\xf0A\x00\x00pA\x00\x00\xd0A\x00\x00\x88A\x00\x00\x00A\x00\x00\x10B\x00\x00\xc0A\x00\x00\x14B\x00\x00\x00\x00\x00\x00\x0cB\x00\x00@@\x00\x00`A\x00\x00\xe8A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'33\xf3?\xcd\xcc\x8c?33\xb3?\x00\x00\x80?\x9a\x99\x99?33\xb3?ff\xa6?33\xf3?ff\xe6?ff\xa6?33\xf3?\x9a\x99\x99?ff\xe6?\xcd\xcc\x8c?ff\xa6?33\xb3?ff\xa6?\xcd\xcc\x8c?ff\xe6?ff\xe6?33\xf3?\x9a\x99\x99?\xcd\xcc\xcc?\xcd\xcc\xcc?33\xb3?\xcd\xcc\xcc?\xcd\xcc\x8c?33\xb3?\x00\x00\xc0?ff\xe6?\x9a\x99\xd9?\xcd\xcc\x8c?33\xf3?ff\xa6?\x9a\x99\x99?\x00\x00\x80?\x9a\x99\xd9?ff\xa6?ff\xa6?\x9a\x99\x99?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'#\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00%\x00\x00\x00\x0b\x00\x00\x00\x07\x00\x00\x00\x02\x00\x00\x00\x18\x00\x00\x00\x1f\x00\x00\x00\x03\x00\x00\x00\x15\x00\x00\x00\x01\x00\x00\x00\x16\x00\x00\x00\x05\x00\x00\x00&\x00\x00\x00\x1c\x00\x00\x00\x0e\x00\x00\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x17\x00\x00\x00\x14\x00\x00\x00\x04\x00\x00\x00\x08\x00\x00\x00!\x00\x00\x00\x12\x00\x00\x00\x1d\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\'\x00\x00\x00\x1b\x00\x00\x00\x06\x00\x00\x00\x19\x00\x00\x00\x11\x00\x00\x00\n\x00\x00\x00$\x00\x00\x00 \x00\x00\x00"\x00\x00\x00\x1a\x00\x00\x00\t\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g228
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g179
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g144
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g165
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g256
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g193
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g319
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g137
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g263
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g375
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g340
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g130
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g109
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g116
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g214
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g291
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g298
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g333
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g277
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g235
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g249
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g172
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g186
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g242
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g151
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g326
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g368
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g312
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g207
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g284
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g221
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g158
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g354
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g270
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g361
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g102
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g347
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g123
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g200
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g305
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I79606608
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'333@\x00\x00\xc0@\x00\x00\xc0@\x00\x00@@\x9a\x99y@33\x83@ff\xa6@\xcd\xcc\x8c@\x00\x00\xc0@\x00\x00\xc0@\x9a\x99\x89@fff@33\xa3@ff\x06@ff\xa6@\x00\x00\xc0@\x00\x00\xc0@\x9a\x99\x89@\x00\x00\xc0@ff\xa6@\x9a\x99\x99@33\xb3@\x00\x00\xa0@\x00\x00`@ff\x96@\x00\x00\xc0@fff@\xcd\xccl@\x00\x00\xc0@\x00\x00\xc0@\xcd\xcc\xac@\x00\x00\xc0@\xcd\xcc\x8c@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\xcd\xcc\x9c@\xcd\xcc\xac@ff\x06@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S"\x0c\xaaZ@\xddx\xb7?\xa1\x10\x91?Qi\x06@N\x11\x99@'\xffo@\xec\x1f\xc2?\x9b$\x12@5W\x95?+\xf0\xae?z\x8a\xe8?+x\x8f@\xb7\x01\xa0?\x16\xab\xa2@*h\x16@X9\xb3?\xda\xf8\x8e?\x1d\xf0>@\xc6\xb0\x8a?K}\xb7?M\x00\x00@cl\x16@_5S@\xf0T\x15@!x\xd7?\x1do\x06@\xbc\xfe\x1f@Z#\x82?\xbd\x16\xd1?m\xe0\x9d?;\xbe\xbb?\xedG\x84?\x17\x02@@\xbd\xf4\x8e?\xd5S\xb5?^#\xa2?\x0f\x1b\xa2?\x04\xce\xcc?\xb0\xef\xce?\xbdU\x9d@"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'ff\x86@\x9a\x99Y@\x9a\x99Y@\xcd\xccl@333@fff@\x9a\x99Y@33S@ff\x86@\xcd\xccl@\xcd\xccL@333@\x00\x00`@\x9a\x999@ff\x86@\x9a\x99Y@\x00\x00@@33S@33\x83@\x9a\x999@\x9a\x999@\x00\x00`@fff@\x9a\x99y@ffF@\x00\x00\x80@\x00\x00@@\xcd\xccl@ffF@\x00\x00\x80@ff\x86@\xcd\xccL@\x9a\x999@\x9a\x99y@\x9a\x99y@ff\x86@ff\x86@33\x83@333@\xcd\xccl@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\xa0\xc9\x87\x04\x80\x02s\r\xc0-q\r\xa0,q\r\x00\x06s\r\xc0\x03s\r`\xb0\x0c\x03\x80/q\r\xc0\xb0\x0c\x03 {\x86\x04`,q\r@r\x86\x04\x80\x00s\r\xa0/q\r\xc0\x06s\r\xa0\x05s\r\x80\xcb\x87\x04@R\x88\x04\x80P\x88\x04\xe0P\x88\x04\x00Q\x88\x04\x00R\x88\x04`Q\x88\x04 P\x88\x04\xa0R\x88\x04@Q\x88\x04\xa0P\x88\x04\xc0R\x88\x04\x00S\x88\x04\x80U\x88\x04\xc0P\x88\x04\xc0Q\x88\x04@P\x88\x04\xc0\xb1\x0c\x03 Q\x88\x04\xe0Q\x88\x04 S\x88\x04`P\x88\x04\xa0Q\x88\x04\xe0R\x88\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S'\xaa\xf1\x96@^\xba\x99?P\x8d\xb7?\xfc\xa99@b\x10`@\xdb\xf9\xce?B`%@\x96C3@\x1dZ\x84?u\x93\x88?\x0e-"@/\xdd|@\xa0\x1a\xaf?\xdb\xf9>@\xdb\xf9\xce?\xdb\xf9\xee?^\xba\xf9?b\x10\x10@+\x87\x86?B`e@\x91\xed\xac?+\x87\xe6?\xbaId@B`%@\x96CC@m\xe7{?!\xb0j@\x91\xed\x8c?\x83\xc0\xea?\x91\xed\x8c?\x96C\x13@\x83\xc0\xaa?\xc9vF@#\xdbY?\xe9&\x91?\xa0\x1a\x8f?P\x8d\xb7?b\x10\x10@\x96C#@\xdb\xf9\x8e@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I79606608
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'0u\x88\x04\x90u\x88\x04\xd8\x11\xab\r\x00\x12\xab\r`u\x88\x04\xc8\x12\xab\r\xa0\x12\xab\r\xf0\x12\xab\r\x90u\x88\x04\xb0\x11\xab\r\x00\x12\xab\r(\x12\xab\r`u\x88\x04\xf0\x12\xab\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S'\xb8\xa1W\x02x\x9e\xa9\x03\x98y\xd6\x04\xc0r\xd6\x04Hr\xd6\x04\xc8|\xd6\x04H{\xd6\x04Pv\xd6\x04\xe8w\xd6\x04\x18x\xd6\x048s\xd6\x04H.\xe2\x04X!\xe2\x04\x80 \xe2\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g777
sg82
g778
sg83
g782
sg84
g783
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g788
sg82
g789
sg83
g793
sg84
g794
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g799
sg82
g800
sg83
g804
sg84
g805
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g766
sg82
g810
sg83
g771
sg84
g814
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g819
sg82
g820
sg83
g824
sg84
g825
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g755
sg82
g830
sg83
g760
sg84
g834
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g743
sg82
g839
sg83
g748
sg84
g843
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g777
sg82
g848
sg83
g782
sg84
g852
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g799
sg82
g857
sg83
g804
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g788
sg82
g866
sg83
g793
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g819
sg82
g875
sg83
g824
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I79606608
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I79606608
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S'\x00"\xad\r\x10!\xad\r\x80\xf2\x85\x04@!\xad\rx\x12\xad\r@\xe6\xac\r\x80\xf5\x85\x04p!\xad\r\xa0\x12\xad\rx\x12\xad\r\xa0!\xad\r\xc8\x12\xad\r\xc0\xfd\x85\x04`"\xad\r\xf0\x12\xad\r\xc8\x12\xad\r\xe0 \xad\r\x10!\xad\r\xc8\x12\xad\r\x18\x13\xad\r\x90\xe7\xac\r\xe0\x13\xad\r\xa0\x12\xad\r\xa0!\xad\r\xd0!\xad\rh\x13\xad\r\x90\xe7\xac\r\xa0\x12\xad\r\xf0\x12\xad\r\xa0!\xad\r@!\xad\r\x18\x13\xad\r@\xf6\x85\x04x\xe6\xac\r@\x13\xad\rx\xe6\xac\r\x80\xf2\x85\x04\xe0 \xad\r\xa0\x12\xad\r\xd0!\xad\r\x80\xf2\x85\x04@\x13\xad\r\xa0!\xad\r@\xe6\xac\r\x80\xf2\x85\x04@\xe6\xac\r\x10!\xad\r\xe0 \xad\r@\xf6\x85\x04\xe0 \xad\r\x10!\xad\r\xa0\x12\xad\r\xc0\xfd\x85\x04x\x12\xad\r\xf0\x12\xad\r@\x13\xad\rx\xe6\xac\r\xc0\xf3\x85\x040"\xad\r@\xf6\x85\x04p!\xad\r\x18\x13\xad\r\xf0\x12\xad\rp!\xad\rh\x13\xad\r\xa8\x14\xad\r@\xe6\xac\r\xa0!\xad\r\x80\xf5\x85\x04\xc8\x12\xad\rp!\xad\r\xa0!\xad\r@\xe6\xac\r\x18\x13\xad\r\xc8\x12\xad\r\x18\x13\xad\rh\x13\xad\r\xa0!\xad\r\xc0\xf3\x85\x04\xc0\xfd\x85\x04\x80\xf2\x85\x04\xf0"\xad\r@!\xad\r\xc0\xfd\x85\x04\x80\xf2\x85\x04x\xe6\xac\r@\x13\xad\r@!\xad\rh\x13\xad\r\x90\x13\xad\r0\x14\xad\r\xd0!\xad\r\x08\x14\xad\r\x10!\xad\rp!\xad\r\xe0 \xad\r\xf0"\xad\r\x18\x13\xad\r\xd0!\xad\r\x00"\xad\r\xa0!\xad\rh\x13\xad\r\xc0\xfd\x85\x04\xf0\x12\xad\r\x18\x13\xad\r@!\xad\r\xc8\x12\xad\r \xe7\xac\r\x80\xf2\x85\x04\x80\xf5\x85\x04x\x12\xad\r\x10!\xad\r\xc0\xf3\x85\x04\xe0 \xad\rp!\xad\r\xc0\xf3\x85\x04 \xe7\xac\rx\xe6\xac\r\xc0\xfd\x85\x040\x14\xad\r\xc0\xfd\x85\x04@!\xad\rp!\xad\r\x90\x13\xad\r\xd0!\xad\rh\x13\xad\r@\xe6\xac\r\x80\xf5\x85\x04\x80\xf2\x85\x04\xd0!\xad\r@\x13\xad\r\x80\xf2\x85\x04\xe0 \xad\r\x10!\xad\r\xc8\x12\xad\r\x80\xf8\x85\x04x\xe6\xac\rh\x13\xad\r\xc0\xf3\x85\x04\x90"\xad\r\xe8\xe6\xac\rx\x12\xad\r\xf0\x12\xad\r@\x13\xad\r\xd0!\xad\r@!\xad\r\x90\x13\xad\r\xc0\xf3\x85\x04@\x13\xad\r\xf0"\xad\r\xa0\x12\xad\r\x90\x13\xad\r\xe0\x13\xad\r\xf0\x12\xad\rp!\xad\r\xf0\x12\xad\r\xc8\x12\xad\r\xc0\xfd\x85\x04\xc0\xf3\x85\x04\x18\x13\xad\r@\xe6\xac\r\x80\xf5\x85\x04\x18\x13\xad\r\xc0\xf3\x85\x04@!\xad\r\xc8\x12\xad\r\x80\xf2\x85\x04\x10!\xad\rp!\xad\rx\xe6\xac\rx\x12\xad\r@!\xad\r\x90\x13\xad\r\xf0\x12\xad\r\x80\xf5\x85\x04\xa0\x12\xad\r\xc0\xf3\x85\x04x\xe6\xac\r\xd0!\xad\rh\x13\xad\r\x90\xe7\xac\r\x90\x13\xad\rx\x12\xad\r\x90\x13\xad\r\xe8\xe6\xac\r\xc0\xfd\x85\x04\xd0!\xad\r0\x14\xad\rx\x12\xad\r\x80\xf5\x85\x04x\xe6\xac\r\xc0\xfd\x85\x04h\x13\xad\rx\x12\xad\r\xe8\xe6\xac\r\xe0 \xad\r\xc0"\xad\r\xc0\xf3\x85\x04\xf0\x12\xad\rX\x14\xad\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S'\xc0Ps\r\x80\xc7m\r\xc0\xcds\r\x00\xc2s\r@S\x88\x04`R\x88\x04\xa0\xc2s\r@\xc7m\r\xa0\xc6m\r\xc0\xc2m\r@\xcbm\r\x00\xc3m\r`\xc6m\r\xc0\xcbm\r\xa0\xc2m\r\x80\xcbm\r@\xc0m\r\xe0\xcfm\r\x80\xccm\r\xe0\xc2m\r`\xc2m\r \xcdm\r@\xc3m\r`\xc7m\r@\xcdm\r\x00\xcbm\r\xa0\xc3m\r`\xcdm\r\x00\xccm\r \xcbm\r`\xccm\r\xc0\xc7m\r\xa0\xc7m\r\xa0G\r\x03`\xf6\x85\x04`J\r\x03 \xc0m\r\xe0\xcbm\r\xe0\xc7m\r@\xc6m\r\xe0\xc6m\r\x80\xc6m\r\x80\xc2m\r \xc7m\r \xc6m\r\x80\xc3m\r\x00\xc7m\r\xa0\xccm\r\x80@\r\x03\xa0\x8b\x0e\x03\xe0\x8a\x0e\x03\xc0\x83\x0e\x03`\x8d\x0e\x03\x80\x8a\x0e\x03\xe0\x84\x0e\x03`\x88\x0e\x03\xc0\x8b\x0e\x03\x80\x84\x0e\x03`\x8a\x0e\x03\x80\x8c\x0e\x03@\x84\x0e\x03\x00\x85\x0e\x03 \x88\x0e\x03@\x85\x0e\x03\x80\xb0\x0c\x03\x80Q\x88\x04\xe0\xee\x0b\x03`\xef\x0b\x03\x00\xee\x0b\x03 \xef\x0b\x03\x80\xef\x0b\x03\x00\x86\x0e\x03\xe0J\x0f\x03\xc0B\x0f\x03 L\x0f\x03\xa0D\x0f\x03 C\x0f\x03\x00K\x0f\x03\xe0C\x0f\x03`A\x0f\x03\x00C\x0f\x03\x80I\x0f\x03@B\x0f\x03\xc0K\x0f\x03\xa0J\x0f\x03\x80C\x0f\x03\xa0\xc6s\r\xc0J\x0f\x03\xa0\xb2p\r\xc0\xb0p\r\xe0\xb0p\r\x80\xb0p\r\x00\xbbp\r@\xb1p\r\xa0\xb0p\r\x80\xea\x0b\x03\xc0\xbap\r@\xb3p\r\xe0\xb2p\r \xa4\x95\x04\xe0\xa2\x95\x04@\xa4\x95\x04\x00\xa3\x95\x04 \xae\x95\x04\x00\xa1\x95\x04\xa0\xa2\x95\x04\xc0\xa2\x95\x04\xe0\xa4\x95\x04 \xa1\x95\x04\xa0\xa0\x95\x04\x80\xa2\x95\x04\xa0\xa4\x95\x04`\xa4\x95\x04\x00\xa5\x95\x04\xa0\xa5\x95\x04\x80\xa1\x95\x04@\xa3\x95\x04\xe0\xa5\x95\x04`\xa5\x95\x04\xe0\xa3\x95\x04\xc0\xa5\x95\x04@\xa2\x95\x04\x80\xa3\x95\x04\xe0\xa6\x95\x04\xe0\xa1\x95\x04`\xa3\x95\x04 \xa8\x95\x04 \xa7\x95\x04@\xa5\x95\x04\xc0\xa3\x95\x04\xe0\xa0\x95\x04\xc0\xa6\x95\x04\xc0\xa0\x95\x04@\xa7\x95\x04\xc0\xa7\x95\x04\x00\xa4\x95\x04 \xa6\x95\x04\xe0\xa7\x95\x04 \xa9\x95\x04`\xa2\x95\x04\xc0\xa8\x95\x04\xa0\xa8\x95\x04\x80\xa6\x95\x04\x00\xa6\x95\x04@\xa9\x95\x04\x00\xa7\x95\x04\xc0\xa9\x95\x04\x00\xa2\x95\x04@\xa6\x95\x04\xe0\xaa\x95\x04\xa0\xaa\x95\x04@\xa8\x95\x04\xa0\xa7\x95\x04\xc0\xa1\x95\x04`\xab\x95\x04`\xa9\x95\x04\x80\xac\x95\x04\x80\xaa\x95\x04\xc0\xaa\x95\x04\x80\xa9\x95\x04\xc0\xa4\x95\x04\xe0\xab\x95\x04\x00\xa8\x95\x04`\xa8\x95\x04\x80\xa8\x95\x04 \xa2\x95\x04`\xa1\x95\x04 \xa3\x95\x04`\xa6\x95\x04 \xac\x95\x04\xa0\xac\x95\x04\xe0\xa9\x95\x04\xe0\xac\x95\x04\xe0\xa8\x95\x04 \xad\x95\x04\x80\xad\x95\x04\xc0\xab\x95\x04\x80\xab\x95\x04 \xa5\x95\x04\x00\xa9\x95\x04\xe0\xad\x95\x04\x80\xa7\x95\x04\xc0\xac\x95\x04\xc0\xae\x95\x04`\xae\x95\x04\xa0\xad\x95\x04@\xae\x95\x04@\xad\x95\x04\xa0\xa9\x95\x04@\xa1\x95\x04`\xac\x95\x04\x00\xac\x95\x04\x00\xab\x95\x04 \xab\x95\x04\xa0\xa3\x95\x04@\xaf\x95\x04\x80\xae\x95\x04\xe0\xae\x95\x04\x00\xaf\x95\x04@\xaa\x95\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S'D\x02\xe0?\xa2G\xa4?\xaeG\xe4?\xdf7\xf3?K\xf5\xce?\x0e\x9e\xb9?\xb4{\xb7?\x17\xbe\x1b@\xfc\xd0\xec?C\x9fI@\xfd\x16\xd1?\x96\xbf\xbb?U\xc3\xbb?\x8f\xa0\xb9?\xd2v\xa6?\x96\x01p@\xf8{\x97?r\xc0\xfb?\xce6\xb3?U\x06\xc0?\x18\x9a\t@;\xf1\xee?\xd7\x01P@\x14X\xd5?H\xc2\x9b?\xdfI\xc4?\xac\xedn@\xb9y\xb7?\xe1\x9c\xf9?[L\x14@\xb2|\xf7?;[\xf5?|\xd0\xcc?Z\x14\xf1?\xfc\xfa\xee?\xde\xd1\x8c?.\x1b\xf1?\t\x14\x91?\xabh\xe6?(H\xd3?\xc6Z\xb5?\x9ci\xe6?\xa6\'\xc2?\x92\xff\xbf?\x99\x08\xe0?\xc2\xc7{?\xa2\x12\x01@\xbc\xe0\x9d?d53@D\xf1L?\xcc\x8d\xc8?\xc44\x03@P\xd3\xcc?\xfc\x16\xb1?\x1a\xcd\xbb?\xf4\xaa\x1a@{\x9f\x99?A\x89\x88@?X\x05@\x87\x9e\x99?\xe7Y\xb5?\xdd\x9b)@C\xad\n@E\x9a\x88?\xfd|\x97?\x8e\xa8\xca?\xe0\x16\x91?\xdbX\xf5?nx\x86?:[\x95?\x97\x0c\xa0?\xf0\x0c@?\'Y\x95?\x14\x94\xa8?T\xc8;?D\xd4L?\x88\x17\x91?\xb4\xbc\x0b@\';#@\xa6(\xc2?\xc5\xb1\xaa?\xed\x84\xa8?s\xc8{?C\xdeL?\xe7\x06\x80?\x83\'\xe2?~W\xb5?\xde$2@\x8c\xda;?\x80\xa4\xca?\x97\xb0\x8a?\x0bJ\xa4?AW\xd5?\xdf\x17\xf1?\x0e\xc0\x9b?t\xb1j?\x97\xb9+@\xc2\x82w?\x8d\xa7Y?\xf3PD?\xde\x05\xc0?\xe8r&?\xdc\x97H?\x88\x17\x91?\x889s?\xc1sf?E)"?\xb5\xf5n?\x87\x0c@?!\x12\x89@\x8ai\x86?\x04\x05\xc0?]\x16\xd1? \xc6;?\xfa\xc2j?\xd7\x05\x80?\x93\xea]?\x17\xac\xaa?\xff\x06\x80?\x8bl\xa6?0nf?\x04G\x04@\xa4\xf4n?I\xfb\x9f?\x80\xbe\x8a?\xdd\xc8{?\x17l\x86?\xb79\x93?\x9e\'b?\xca\xd6L?\xffdv@(/"?9J\x84?U\xcf\xcc?\xfae\x95?\xcd-b?\xd0\xad\x8a?(\xe4\x1d?\x0e\x8e\xe8?)y\x86?I\x1fQ?\x95i\xa6?\x98\'\xc2?i\x00\xc0?\\\xbc\x8a?\x9aI\xe4?($\x82?\x1b\xf1\xce?F|w?Vo\xa6?b6\xb3?\x14@\xc4?\x18\xf5\x8e?\xf8@s?\x0f}f?,6\x93?c0"?\x07\xa7Y?d\x95H?\x1a\x05\x80?l\xadH?\xfb\xbe\x9b?\xb3\xc1\x9b?\x9f\xf1\x8e?n\xc0\x9b?2E\x93?\x8a>s?\xa1(\x82?\x9e]U?\xf4:s?\x04tf?\x19V\x84?\x10\xb8{?Q\x17\x91?\xba\x15\xd1?\'{\xb7?\xf2of?.\xc9{?\xad\xb7j?"\xdaL?\xca$\x82?a\xec\x8e?F\xac\x8a?\xd5\xa4\xea?_\x15\x91?\xbaRD?L\x83w?fl\x86?.\xfbn?\x94\x9b\xb9?\xff\x05\x80?\xeb\x03/?\x14\xd8L?c\xb0j?cif?YJ\x84?}\xdaL?\nv\x86?e\xfen?\xf0\xa4Y?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S'\x00"\xe2\x04\xe0,\xe2\x04\xa8\x18\xd7\x04x\x18\xd7\x04p\x11\xd7\x04\xd8\x1b\xd7\x04\x18\x1b\xd7\x04\xb8\x17\xd7\x04\x00\x12\xd7\x04\x18\x1e\xd7\x04\x10\x1a\xd7\x048\x1f\xd7\x04\xc0\x1b\xd7\x04\xa0\x17\xd7\x04\x80\x1f\xd7\x04x\x1b\xd7\x04\xe8\x1d\xd7\x04\xf0\x1b\xd7\x04\x98\x16\xd7\x04@\x1a\xd7\x04\x98\x1c\xd7\x04h\x10\xd7\x04H\x1e\xd7\x04\xb0\x1c\xd7\x04\x08\x1c\xd7\x04p\x14\xd7\x04\xf0\x18\xd7\x04\xc0\x15\xd7\x04`\x18\xd7\x04\x00\x1b\xd7\x04\xd0\x1a\xd7\x04h\x13\xd7\x04P\x19\xd7\x04\xa0\x14\xd7\x04H\x18\xd7\x04@\x14\xd7\x04\xc8\x1c\xd7\x04\x90\x1b\xd7\x04\x80\x19\xd7\x04\x98\x19\xd7\x04\x90\x1e\xd7\x04 \x16\xd7\x04\xc8\x16\xd7\x04x\x1e\xd7\x04\xd8\x18\xd7\x04\xc8\x1f\xd7\x04\xe0\x16\xd7\x04\x80\x16\xd7\x04P\x10\xd7\x04\xf0\x1e\xd7\x04\xe8\x1a\xd7\x04p\x1a\xd7\x04\x98\x1f\xd7\x04\x18\x18\xd7\x04\xd8\x1e\xd7\x040\xf8\xda\x04\xf8\xf0\xda\x04X\xf7\xda\x048\xf3\xda\x04X\xf1\xda\x04\xb0\xf3\xda\x04(\xf4\xda\x04\x10\xf4\xda\x04\xc8\xf3\xda\x048\xf0\xda\x048\xfc\xda\x04\xd0\xf7\xda\x04\x08\xf3\xda\x04\xa0\xf1\xda\x04@\xf7\xda\x04\xf0\xf8\xda\x04p\xf1\xda\x04p\xf4\xda\x04\xa0\xf4\xda\x04H\xf2\xda\x04P\xf3\xda\x04\xf0\xf2\xda\x04\xb0\xf6\xda\x04\xd0\xfd\xda\x04h\xf6\xda\x04`\xfb\xda\x048\xf6\xda\x04\xf8\xfc\xda\x04\x10\xfa\xda\x04\xc8\xf9\xda\x04\x10\xf1\xda\x04\x00\xf5\xda\x04\x98\xf0\xda\x04P\xfc\xda\x040\xfe\xda\x04\xb8\xf1\xda\x04\xe8\xf1\xda\x04\xb8\xfd\xda\x04`\xf2\xda\x04\xe8\xfa\xda\x04p\xfa\xda\x04\xa0\xf7\xda\x04P\xf6\xda\x04\x08\xf9\xda\x04h\xf3\xda\x04\xb0\xf9\xda\x04\xf8\xf9\xda\x04\xd8\xf2\xda\x04H\xf5\xda\x04@\xfa\xda\x04\x88\xf7\xda\x04X\xfa\xda\x04P\xf0\xda\x04H\xf8\xda\x040\xf5\xda\x04\xd8\xf8\xda\x04\xe8\xfd\xda\x04\x80\xf3\xda\x04p\xf7\xda\x04\x90\xf8\xda\x04@\xf4\xda\x04\xa8\xf2\xda\x04\x00\xf2\xda\x04\x00\xfe\xda\x04P\xff\xda\x04\xe0\xf3\xda\x04\x10\xfd\xda\x04\xc0\xfb\xda\x04\x90\xfb\xda\x04\x80\xfc\xda\x04\xe0\xfc\xda\x04\x08\xfc\xda\x04\xe0\xf9\xda\x04\xf8\xf3\xda\x04\xb8\xf4\xda\x04(\xfd\xda\x04\x98\xff\xda\x04\xd8\xfe\xda\x04\x18\xfe\xda\x040\xfb\xda\x04\x80\xf0\xda\x04x\xf2\xda\x04\xa8\xf8\xda\x040\xf2\xda\x04\x00\xf8\xda\x04h\xfc\xda\x04\x88\xfd\xda\x04\x80\xf6\xda\x04`\xf8\xda\x04\x90\xfe\xda\x04P\xf9\xda\x04\x18\xfb\xda\x04h\xff\xda\x048\xf9\xda\x04\xb0\xff\xda\x04\xb0\xfc\xda\x04\xa0\xfd\xda\x04h\xf0\xda\x04\x98\xf9\xda\x04\x80\xf9\xda\x04\x00\xfb\xda\x04\xf8\xf6\xda\x04 \xfc\xda\x04\x88\xf1\xda\x04@\xfd\xda\x04\x98\xf6\xda\x04\x18\xf5\xda\x04\x18\xf2\xda\x04\xe0\xf0\xda\x04\x08\xff\xda\x04h\xf9\xda\x04X\xfd\xda\x04\x10\xf7\xda\x04\xa8\xfb\xda\x04\xc8\xf6\xda\x04\xb8\xf7\xda\x04x\xfe\xda\x04 \xf3\xda\x04\xe8\xf4\xda\x04\x90\xf2\xda\x04H\xfb\xda\x04\xb8\xfa\xda\x04\xc8\xfc\xda\x04\x88\xfa\xda\x04\xe0\xf6\xda\x04\xa8\xfe\xda\x048\xff\xda\x04`\xfe\xda\x04\x18\xf8\xda\x04\xc0\xf8\xda\x04\xf0\xfe\xda\x04x\xf8\xda\x04\xd0\xf4\xda\x04\xc0\xfe\xda\x04@\xf1\xda\x04\xa0\xfa\xda\x04\x98\xfc\xda\x04\xd0\xf1\xda\x04X\xf4\xda\x04\xd8\xfb\xda\x04\x80\xff\xda\x04p\xfd\xda\x04\xe0\xff\xda\x04\xc8\x13\xd7\x04P\x1f\xd7\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g1004
sg894
g1000
sg909
g1011
sg903
g1008
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g1021
sg894
g1017
sg909
g1028
sg903
g1025
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g1038
sg894
g1034
sg909
g1045
sg903
g1042
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g970
sg894
g1051
sg909
g977
sg903
g1058
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g1070
sg894
g1066
sg909
g1077
sg903
g1074
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g1087
sg894
g1083
sg909
g1094
sg903
g1091
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g1104
sg894
g1100
sg909
g1111
sg903
g1108
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g1021
sg894
g1117
sg909
g1028
sg903
g1124
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g1136
sg894
g1132
sg909
g1143
sg903
g1140
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g1087
sg894
g1083
sg909
g1094
sg903
g1091
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g919
sg894
g1175
sg909
g926
sg903
g1182
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g1087
sg894
g1083
sg909
g1094
sg903
g1091
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g1207
sg894
g1203
sg909
g1214
sg903
g1211
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g1230
sg894
g1220
sg909
g1224
sg903
g1228
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g919
sg894
g1175
sg909
g926
sg903
g1182
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g1038
sg894
g1250
sg909
g1045
sg903
g1257
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g1070
sg894
g1265
sg909
g1077
sg903
g1272
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g1284
sg894
g1280
sg909
g1291
sg903
g1288
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g1301
sg894
g1297
sg909
g1308
sg903
g1305
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g1230
sg894
g1314
sg909
g1224
sg903
g1321
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g1038
sg894
g1034
sg909
g1045
sg903
g1042
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g1136
sg894
g1342
sg909
g1143
sg903
g1349
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g1070
sg894
g1265
sg909
g1077
sg903
g1272
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g1207
sg894
g1383
sg909
g1214
sg903
g1390
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g1004
sg894
g1398
sg909
g1011
sg903
g1405
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g1417
sg894
g1413
sg909
g1424
sg903
g1421
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g1230
sg894
g1220
sg909
g1224
sg903
g1228
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g1417
sg894
g1443
sg909
g1424
sg903
g1450
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g907
sg894
g1471
sg909
g899
sg903
g1478
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g1038
sg894
g1250
sg909
g1045
sg903
g1257
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g1284
sg894
g1280
sg909
g1291
sg903
g1288
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g1230
sg894
g1314
sg909
g1224
sg903
g1321
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g1070
sg894
g1066
sg909
g1077
sg903
g1074
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g936
sg894
g1564
sg909
g943
sg903
g1571
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g919
sg894
g1175
sg909
g926
sg903
g1182
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g907
sg894
g1471
sg909
g899
sg903
g1478
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g1004
sg894
g1398
sg909
g1011
sg903
g1405
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g907
sg894
g1471
sg909
g899
sg903
g1478
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g919
sg894
g1175
sg909
g926
sg903
g1182
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g1038
sg894
g1034
sg909
g1045
sg903
g1042
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g1104
sg894
g1100
sg909
g1111
sg903
g1108
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g970
sg894
g1051
sg909
g977
sg903
g1058
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g1136
sg894
g1342
sg909
g1143
sg903
g1349
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g1230
sg894
g1220
sg909
g1224
sg903
g1228
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g1417
sg894
g1443
sg909
g1424
sg903
g1450
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g1739
sg894
g1735
sg909
g1746
sg903
g1743
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g953
sg894
g1752
sg909
g960
sg903
g1759
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g1004
sg894
g1398
sg909
g1011
sg903
g1405
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g1021
sg894
g1117
sg909
g1028
sg903
g1124
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g1207
sg894
g1383
sg909
g1214
sg903
g1390
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g1136
sg894
g1132
sg909
g1143
sg903
g1140
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g1021
sg894
g1017
sg909
g1028
sg903
g1025
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g1301
sg894
g1297
sg909
g1308
sg903
g1305
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g1417
sg894
g1443
sg909
g1424
sg903
g1450
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g987
sg894
g1858
sg909
g994
sg903
g1865
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g1070
sg894
g1265
sg909
g1077
sg903
g1272
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g1004
sg894
g1000
sg909
g1011
sg903
g1008
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g1087
sg894
g1899
sg909
g1094
sg903
g1906
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g1021
sg894
g1117
sg909
g1028
sg903
g1124
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g1070
sg894
g1066
sg909
g1077
sg903
g1074
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g987
sg894
g1858
sg909
g994
sg903
g1865
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g1207
sg894
g1383
sg909
g1214
sg903
g1390
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g1087
sg894
g1083
sg909
g1094
sg903
g1091
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g1207
sg894
g1203
sg909
g1214
sg903
g1211
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g1301
sg894
g1297
sg909
g1308
sg903
g1305
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g1070
sg894
g1066
sg909
g1077
sg903
g1074
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g1739
sg894
g1735
sg909
g1746
sg903
g1743
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g1104
sg894
g1100
sg909
g1111
sg903
g1108
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g936
sg894
g1564
sg909
g943
sg903
g1571
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g2067
sg894
g2057
sg909
g2061
sg903
g2065
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g953
sg894
g1752
sg909
g960
sg903
g1759
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g1104
sg894
g2087
sg909
g1111
sg903
g2094
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g936
sg894
g1564
sg909
g943
sg903
g1571
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g1417
sg894
g1413
sg909
g1424
sg903
g1421
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g1230
sg894
g1314
sg909
g1224
sg903
g1321
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g1301
sg894
g1297
sg909
g1308
sg903
g1305
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g2067
sg894
g2057
sg909
g2061
sg903
g2065
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g1038
sg894
g1250
sg909
g1045
sg903
g1257
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g1284
sg894
g2193
sg909
g1291
sg903
g2200
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g970
sg894
g1051
sg909
g977
sg903
g1058
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g1021
sg894
g1117
sg909
g1028
sg903
g1124
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g2067
sg894
g2057
sg909
g2061
sg903
g2065
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g1207
sg894
g1203
sg909
g1214
sg903
g1211
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g1284
sg894
g1280
sg909
g1291
sg903
g1288
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g1070
sg894
g1265
sg909
g1077
sg903
g1272
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g1301
sg894
g2325
sg909
g1308
sg903
g2332
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g1104
sg894
g1100
sg909
g1111
sg903
g1108
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g1136
sg894
g1342
sg909
g1143
sg903
g1349
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g1207
sg894
g1203
sg909
g1214
sg903
g1211
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g953
sg894
g1752
sg909
g960
sg903
g1759
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g1087
sg894
g1899
sg909
g1094
sg903
g1906
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g1070
sg894
g1066
sg909
g1077
sg903
g1074
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g1004
sg894
g1398
sg909
g1011
sg903
g1405
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g970
sg894
g1051
sg909
g977
sg903
g1058
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g919
sg894
g1175
sg909
g926
sg903
g1182
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g1739
sg894
g2470
sg909
g1746
sg903
g2477
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g1021
sg894
g1017
sg909
g1028
sg903
g1025
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g1739
sg894
g2470
sg909
g1746
sg903
g2477
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g1070
sg894
g1265
sg909
g1077
sg903
g1272
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g1417
sg894
g1413
sg909
g1424
sg903
g1421
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g1104
sg894
g2087
sg909
g1111
sg903
g2094
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g1038
sg894
g1250
sg909
g1045
sg903
g1257
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g1104
sg894
g1100
sg909
g1111
sg903
g1108
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1021
sg894
g1017
sg909
g1028
sg903
g1025
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g2067
sg894
g2615
sg909
g2061
sg903
g2622
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g1284
sg894
g2193
sg909
g1291
sg903
g2200
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g1301
sg894
g2325
sg909
g1308
sg903
g2332
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g987
sg894
g1858
sg909
g994
sg903
g1865
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g1004
sg894
g1000
sg909
g1011
sg903
g1008
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g1284
sg894
g2193
sg909
g1291
sg903
g2200
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g1230
sg894
g1220
sg909
g1224
sg903
g1228
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g936
sg894
g1564
sg909
g943
sg903
g1571
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g907
sg894
g1471
sg909
g899
sg903
g1478
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g1087
sg894
g1899
sg909
g1094
sg903
g1906
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g1301
sg894
g2325
sg909
g1308
sg903
g2332
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g1417
sg894
g1443
sg909
g1424
sg903
g1450
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g1301
sg894
g2325
sg909
g1308
sg903
g2332
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g1739
sg894
g2470
sg909
g1746
sg903
g2477
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g1207
sg894
g1383
sg909
g1214
sg903
g1390
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g987
sg894
g1858
sg909
g994
sg903
g1865
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g1136
sg894
g1132
sg909
g1143
sg903
g1140
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g1230
sg894
g1314
sg909
g1224
sg903
g1321
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g1284
sg894
g2193
sg909
g1291
sg903
g2200
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g2067
sg894
g2615
sg909
g2061
sg903
g2622
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g1739
sg894
g1735
sg909
g1746
sg903
g1743
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g1230
sg894
g1314
sg909
g1224
sg903
g1321
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g2067
sg894
g2615
sg909
g2061
sg903
g2622
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g1038
sg894
g1034
sg909
g1045
sg903
g1042
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g2067
sg894
g2057
sg909
g2061
sg903
g2065
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g1136
sg894
g1132
sg909
g1143
sg903
g1140
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g1021
sg894
g1017
sg909
g1028
sg903
g1025
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g1136
sg894
g1342
sg909
g1143
sg903
g1349
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g1087
sg894
g1083
sg909
g1094
sg903
g1091
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1104
sg894
g2087
sg909
g1111
sg903
g2094
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g1739
sg894
g1735
sg909
g1746
sg903
g1743
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g1207
sg894
g1383
sg909
g1214
sg903
g1390
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g1004
sg894
g1000
sg909
g1011
sg903
g1008
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g1207
sg894
g1203
sg909
g1214
sg903
g1211
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g1739
sg894
g1735
sg909
g1746
sg903
g1743
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g953
sg894
g1752
sg909
g960
sg903
g1759
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g1087
sg894
g1899
sg909
g1094
sg903
g1906
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g936
sg894
g1564
sg909
g943
sg903
g1571
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1021
sg894
g1117
sg909
g1028
sg903
g1124
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g1417
sg894
g1413
sg909
g1424
sg903
g1421
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g970
sg894
g1051
sg909
g977
sg903
g1058
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g953
sg894
g1752
sg909
g960
sg903
g1759
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g2067
sg894
g2615
sg909
g2061
sg903
g2622
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g1136
sg894
g1132
sg909
g1143
sg903
g1140
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g1004
sg894
g1398
sg909
g1011
sg903
g1405
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g1038
sg894
g1034
sg909
g1045
sg903
g1042
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g1739
sg894
g2470
sg909
g1746
sg903
g2477
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g1417
sg894
g1413
sg909
g1424
sg903
g1421
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1284
sg894
g1280
sg909
g1291
sg903
g1288
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g1301
sg894
g1297
sg909
g1308
sg903
g1305
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1230
sg894
g1220
sg909
g1224
sg903
g1228
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g2067
sg894
g2057
sg909
g2061
sg903
g2065
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g2067
sg894
g2615
sg909
g2061
sg903
g2622
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g1104
sg894
g2087
sg909
g1111
sg903
g2094
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g1284
sg894
g1280
sg909
g1291
sg903
g1288
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g1038
sg894
g1250
sg909
g1045
sg903
g1257
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g1004
sg894
g1000
sg909
g1011
sg903
g1008
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g1417
sg894
g1443
sg909
g1424
sg903
g1450
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g1104
sg894
g2087
sg909
g1111
sg903
g2094
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g1301
sg894
g2325
sg909
g1308
sg903
g2332
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g987
sg894
g1858
sg909
g994
sg903
g1865
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g907
sg894
g1471
sg909
g899
sg903
g1478
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g1284
sg894
g2193
sg909
g1291
sg903
g2200
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g1739
sg894
g2470
sg909
g1746
sg903
g2477
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g1136
sg894
g1342
sg909
g1143
sg903
g1349
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g1087
sg894
g1899
sg909
g1094
sg903
g1906
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I79606608
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'\x98U\xf8\r\xc0U\xf8\r`\xa7\x95\x04p\x07\xf8\r\xc0\x08\xf8\r\xf0\x08\xf8\r\xc0\xaf\x95\x048V\xf8\rPW\xf8\r\xa0\x07\xf8\r \t\xf8\r\xa0\xaf\x95\x04\xd0\x07\xf8\r\xe0\xaf\x95\x04\x90\x08\xf8\r`V\xf8\r\x90\xce\xf7\r\xc8\xce\xf7\r\x00\x08\xf8\r\x00W\xf8\r\xe8U\xf8\r\xf0\x08\xf8\r\x00\x08\xf8\r\xd0\x07\xf8\r\xc0\xaf\x95\x040\x08\xf8\r\x88V\xf8\rp\x07\xf8\r`\x08\xf8\r\xf0\x08\xf8\r8\xcf\xf7\r8V\xf8\r\xe8U\xf8\r\x10V\xf8\r\xc0U\xf8\r\x98U\xf8\r\x00\x08\xf8\r@`\xf8\r\x90\xce\xf7\r\x00\x08\xf8\r\xa0\xaf\x95\x040\x08\xf8\r\xd0\x07\xf8\r\x98U\xf8\r\x10V\xf8\r0\x08\xf8\r\xa0\xaf\x95\x04\xb0V\xf8\r\xa8\xcf\xf7\r\xb0V\xf8\r\xa0\xaf\x95\x04\x88V\xf8\r \t\xf8\r\xe0\xaf\x95\x04`\x08\xf8\r\xb0V\xf8\r\x00\x08\xf8\r\xc0U\xf8\r\xc8\xce\xf7\r\xf0W\xf8\r`\x08\xf8\r\xe8U\xf8\r`\x08\xf8\r \t\xf8\r(W\xf8\r\xd0\x07\xf8\r`V\xf8\r\xc0U\xf8\r\xa0\xaf\x95\x04\x88V\xf8\r \t\xf8\rp\x07\xf8\r\x10V\xf8\r8V\xf8\r\xc8\xce\xf7\r\xc0U\xf8\r\x00\x08\xf8\r\x98U\xf8\r\xb0V\xf8\r\xe8U\xf8\r\x88V\xf8\r\x98U\xf8\r`\xa7\x95\x04\xa0\x07\xf8\r`\xa7\x95\x04\xe8U\xf8\r\x90\xce\xf7\r\x00W\xf8\r`V\xf8\r\xb0V\xf8\r\x00\x08\xf8\r`\x08\xf8\r\xc8\xce\xf7\r8\xcf\xf7\r\xc8W\xf8\r`V\xf8\r\xa0\xaf\x95\x04\xe8U\xf8\r\x90\x08\xf8\r\xc0\xaf\x95\x04\xf0\x08\xf8\r`V\xf8\r p\xf8\r\x90\xce\xf7\r\xb0V\xf8\rp\x07\xf8\r\xc0\xaf\x95\x04`\xa7\x95\x04p\x07\xf8\r\x90\xce\xf7\r@`\xf8\r\xc0\x08\xf8\rPW\xf8\r p\xf8\r\xc0\xaf\x95\x04PW\xf8\r\xc0\xaf\x95\x04\xa0\x07\xf8\r(W\xf8\r\xa0\x07\xf8\r\xd0\x07\xf8\r\x00W\xf8\r\x98U\xf8\r0\x08\xf8\r8V\xf8\r\xc0\xaf\x95\x04\xe0\xaf\x95\x04`V\xf8\r`\xa7\x95\x04\xe0\xaf\x95\x04\xa0\x07\xf8\r\x88V\xf8\r\x98U\xf8\r\x88V\xf8\r\xc8\xce\xf7\r\xc0\xaf\x95\x04\xa0\xaf\x95\x04\x00W\xf8\r\x10V\xf8\rp\x07\xf8\r\x98U\xf8\r0\x08\xf8\r\x88V\xf8\r\xc0U\xf8\rPW\xf8\r\xc8\xce\xf7\r\xe0\xaf\x95\x04\xa0\x07\xf8\r\xb0V\xf8\r\xd0\x07\xf8\r8V\xf8\r`\x08\xf8\r`V\xf8\r\xa0W\xf8\r\xa0\x07\xf8\r\xc8\xce\xf7\rP\t\xf8\r\x00\xcf\xf7\r\xc8W\xf8\r\x90\xce\xf7\r0\x08\xf8\r\x00\x08\xf8\r\x90\x08\xf8\r`\x08\xf8\r\x10V\xf8\r(W\xf8\r\xa0W\xf8\r\xa0\x07\xf8\r`\xa7\x95\x04`\x08\xf8\r\x10V\xf8\r`V\xf8\r\x88V\xf8\r0\x08\xf8\r\x90\xce\xf7\rp\x07\xf8\r`\x08\xf8\r\x98U\xf8\r`V\xf8\r\xe0\xaf\x95\x04 `\xf8\r0\x08\xf8\r`\xa7\x95\x04\xe8U\xf8\r\x90\xce\xf7\r\xe8U\xf8\r\x90\xce\xf7\r`\xa7\x95\x04\xc0\xaf\x95\x04\xa0\xaf\x95\x04\xb0V\xf8\r`\x08\xf8\r8V\xf8\r\xa0\xaf\x95\x040\x08\xf8\r\xa0\xaf\x95\x04`V\xf8\r\xf0W\xf8\r\xa0W\xf8\r8V\xf8\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S'\xe0p\x86\x04 q\x86\x04\x80p\x86\x04@b\xf8\r\xc0a\xf8\r\xa0b\xf8\r`b\xf8\r\xa0`\xf8\r\xc0b\xf8\r\xe0b\xf8\r@c\xf8\r c\xf8\r\x00a\xf8\r`c\xf8\r\x80c\xf8\r\xa0c\xf8\r\xc0c\xf8\r\xe0c\xf8\r\x00d\xf8\r d\xf8\r\x80d\xf8\r\xa0d\xf8\r\xc0`\xf8\r\x00b\xf8\r\xc0d\xf8\r\xe0d\xf8\r@e\xf8\r`e\xf8\r a\xf8\r\xa0e\xf8\r\x80e\xf8\r b\xf8\r\x00f\xf8\r f\xf8\r@d\xf8\r`f\xf8\r@f\xf8\r\xa0a\xf8\r\x80f\xf8\r\xe0f\xf8\r\xc0f\xf8\r\x80`\xf8\r\x00g\xf8\r g\xf8\r\x80g\xf8\r`g\xf8\r\xc0g\xf8\r\xa0g\xf8\r\xc0e\xf8\r h\xf8\r\x00h\xf8\r@a\xf8\r@h\xf8\r`h\xf8\r\x80h\xf8\r\xe0h\xf8\r\x00i\xf8\r\x00e\xf8\r@g\xf8\r`i\xf8\r@i\xf8\r\xa0i\xf8\r\xc0i\xf8\r\xe0i\xf8\r\xa0\xcf\x87\x04\xc0\xc3\x87\x04`\xc4\x87\x04 \xc6\x87\x04\x80\xc5\x87\x04\x80\xcc\x87\x04\xe0\xca\x87\x04\x00\xcd\x87\x04\x00\xc5\x87\x04\xe0\xcf\x87\x04 \xcf\x87\x04\xe0\xcb\x87\x04@\xcf\x87\x04\xe0\xcd\x87\x04\xa0\xcd\x87\x04\x00\xce\x87\x04@\xc5\x87\x04\xe0\xc9\x87\x04\xa0\xca\x87\x04\xe0\xc4\x87\x04`\xc6\x87\x04`\xcf\x87\x04\x80\xce\x87\x04\x80\xc6\x87\x04 \xcd\x87\x04 \xcc\x87\x04 \xca\x87\x04\x80\xcf\x87\x04\xc0\xcb\x87\x04\xc0\xc5\x87\x04 \xcb\x87\x04`\xc8\x87\x04 \xc3\x87\x04\xe0\xc8\x87\x04`\xcd\x87\x04 \xc8\x87\x04\xc0\xcf\x87\x04\xa0\xce\x87\x04\xa0\xcb\x87\x04\xe0\xcc\x87\x04\xc0\xc8\x87\x04\xc0\xcd\x87\x04\x00\xca\x87\x04@\xcc\x87\x04`\xcb\x87\x04\xe0\x0b\x87\x04`\x0f\x87\x04\x00\t\x87\x04\xc0\x0e\x87\x04`\r\x87\x04 \r\x87\x04\x00\x02\x87\x04\x80\x0f\x87\x04\x00\x0e\x87\x04\xc0\r\x87\x04\x80\r\x87\x04\xc0\t\x87\x04\xe0\x0e\x87\x04@\x0f\x87\x04\xe0\t\x87\x04\xa0\x0b\x87\x04\x00\x0f\x87\x04\x80\x0b\x87\x04@\x0b\x87\x04\xa0\t\x87\x04\xc0\x0b\x87\x04\x00\x0c\x87\x04@\x0c\x87\x04\xa0\xc4\x87\x04@\r\x87\x04\xa0\x0c\x87\x04\xe0\r\x87\x04\x00\x0b\x87\x04 \xc4\x87\x04\x80\x0e\x87\x04\xe0\x0c\x87\x04 \x0c\x87\x04\xa0\x0f\x87\x04\x00\xc6m\r@\xcd\x87\x04@B\r\x03\xa0\r\x87\x04 \x0f\x87\x04\x00\r\x87\x04 \x0e\x87\x04\x80\n\x87\x04\x80\x0c\x87\x04`\x0c\x87\x04 \x0b\x87\x04@\x0e\x87\x04\x80\xcdm\r`\x0e\x87\x04\xc0\x0c\x87\x04`\x0b\x87\x04@\x8b\x0e\x03\xc0\x85\x0e\x03\xa0\x84\x0e\x03\x00\x8a\x0e\x03 \x85\x0e\x03\x00\x82\x0e\x03\x00\x8b\x0e\x03\xc0\x89\x0e\x03\x00\xcb\x87\x04`N\x0f\x03\xe0K\x0f\x03\xc0D\x0f\x03\x00E\x0f\x03\x00L\x0f\x03\xe0D\x0f\x03\xa0K\x0f\x03\x00A\x0f\x03\xa0A\x0f\x03\x80D\x0f\x03\xe0O\x0f\x03\xe0F\x0f\x03 A\x0f\x03\xe0A\x0f\x03`C\x0f\x03\x00B\x0f\x03\xa0\xab\x95\x04\xa0\xbap\r`\xb1p\r\xc0\xb2p\r\x00\xb3p\r\x00\xb7p\r@\xb0p\r\xc0\x0f\x87\x04\xe0\xff\x92\x04@\x00s\r\xa0\x06s\r\x00\x07s\r`\x00s\r\xe0\x06s\r\xc0\x04s\r\xa0\x00s\r \xb3p\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'xlf?[J\xc4?\x82\xc2\xbb?\x059\xb3?\xeef\x95?\xa3q\x97?X\x857?\x9a\xfb.?\x056\xf3?\x8d\x9bw?[\xaaY?\xach\x86?1\x1dQ?C\xd2\xac?l\xbe\x8a?\xdd\xa2Y?1\xf6n?\xf7X\x95?h\xc1\xbb?\x03\xcfj?\xbfJ\x84?\x87Q\xd5?t\xfcn?1.b?!\x9b7?\xfelf?\xdb\xaf\xaa?\x96\x06@?\x88^U?w\x1c\x82?n\xc9;?6/"?\n\xfcn?/af?\x18\x85w?\x9d$@?\x9c\xfbn?s\x02\x80?\x97qf?K\xce\xac?1UD?\xd8\x0c@?l\xb6j?\x96\x17Q?\x9c\xb8\xdb?\x1a\xd2;?\x01\x8fH?\x10QD?J\x06\x80?\xf4nf?\x08\xd9L?yx7?[\xa2Y?\x81I\xc4?\x85\xe4]?\xc8\x1eQ?\x9e\xbdY?\xeal\x86?\x89\xf2\x8e?\xe7\x9cY?\xd2\x827?B\xfbn?\xc9\x91H?\xd5^U?\xcc\xb7*?\xedZU?\x01\x1dQ?\xb1rf?\x07\xc2Y?\xd1\x8cH?\x04\x07@?\x98l\x86?7C\x04@\xdb\xc4*?)\xa5Y?\xd1\xfdn?h\xeb\x1d?\xaf\xb9*?\xa8(\x82?\xe9\x01^?\xe6G\x84?D/"?\xc1.b?D\xec\x1d?\xeb\xe9]?\x99_U?\x8dqf?\xbdk\xa6?\xc8TD?X\x04\x80?\x99\xacY?\xd3W\x15@B\xd0\x8c?=\r@?\xe5PD?3\xc9{?\xc9rf?\xd4\xfan?i\xd2\xac?\xcd\x1aQ?v~\xf7?\xe2\xd2\x8c?\x86\x03@?4\x03\x80?;.b?H\x91H?\x91U3?\xb7\'\xc2?\x9d\xd5L?\x9c\xd9L?\xa5KD?\xdaD\xd3?3\x15\xb1?\xd4\xb0*?=\t@?\xf0%\x82?\x8c-"?\x80\x0b@?~j\x86?3\xd5L?\xdd\xe5]?\xb0cU?\x1a\x06@?b\xcb{?r\xbe*?\xba\x07@?\xc1\x07\x80?\n\xb3j?7\xe6=@mG\xe4?\xf5D3?\x03n&?\xc9\xc9;?\x96\'"?\xb2\xbc\x8a?\xc2\xb0\x8a?\xfe\xea\x1d?\xdd\x8d\x88?\xae\xb9\x0b@d\x9b7?\xbf\x827?j\xd5\x0c?\x12\xe3\x1d?rl\x86?>HD?\xbc4Q?\xab\xf6.?\xbd\xbb*?e\xfb.?\xcd\xe6]?\x06\xfcn?P$@?\xef\x16\x91?\x9b(b?\xe9\xc2;?j\xa0Y?\xcdND?\xdf\x15/?\x02bU?\xc8aU??\x8fH?\x10QD?\xdf\xc4;?J\x88f?~*s?\xc5\x1e\x11?\x01!Q?\x91/"?\xc0\xca{?\xd3\xcf*? A\x84?P\xa1Y?\x11#"?c\xb2j?]{\x97?\x96Q3?\xd0\x02/?\xf7\xea]?{\x16\xb1?x\x8c\x88?\xfe\xc7;?OKD?6?s?\xb1nf?\xd4\x1dQ?\x91\x06\x80?35Q?\xa4QD?\xe3\x96H?_A3?daU?\x1aMD?\xf9L3?\xaar&?\xac\xa7\x19?7\xa6\x19?\xc1bU?\xf2\xb6j?\xcfL\xa4?b\x04\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'\xc8\x10\xd7\x04 \x10\xd7\x040\x82\xd7\x04\xf0\x88\xd7\x04\xe0\x8c\xd7\x04X\x8d\xd7\x04\xe0\x89\xd7\x04\xe0\x80\xd7\x04\xd0\x87\xd7\x04x\x82\xd7\x04X\x84\xd7\x04H\x85\xd7\x04\xb0\x80\xd7\x04\x80\x80\xd7\x04x\x88\xd7\x04\xd0\x81\xd7\x04\xa8\x82\xd7\x04P\x83\xd7\x04H\x88\xd7\x04x\x8b\xd7\x04P\x80\xd7\x04p\x8a\xd7\x04\xd8\x82\xd7\x04\x88\x84\xd7\x04\x18\x85\xd7\x04`\x88\xd7\x04\xc0\x82\xd7\x04\xb0\x8c\xd7\x04P\x86\xd7\x04\x90\x82\xd7\x04@\x84\xd7\x04\xc8\x83\xd7\x04 \x83\xd7\x04\x98\x83\xd7\x04\x08\x89\xd7\x04\xa0\x8d\xd7\x04\xc8\x8c\xd7\x04\x00\x82\xd7\x04\x80\x89\xd7\x04\x90\x85\xd7\x04\x18\x82\xd7\x04(\x84\xd7\x04 \x86\xd7\x04\xa8\x85\xd7\x04\xa0\x87\xd7\x04\xf8\x83\xd7\x04\x10\x8a\xd7\x04\x88\x87\xd7\x04\xe0\x8f\xd7\x04\xc8\x80\xd7\x048\x8c\xd7\x04\xf0\x85\xd7\x04`\x8e\xd7\x04\xe8\x87\xd7\x04\x80\x8c\xd7\x04\xd0\x84\xd7\x04\xa0\x84\xd7\x04h\x83\xd7\x04\xf8\x89\xd7\x04\xa8\x8b\xd7\x04\x08\x83\xd7\x04(\x8a\xd7\x04\x10\x84\xd7\x04@\x8d\xd7\x04P\x8c\xd7\x04(\x8d\xd7\x04p\x84\xd7\x04\xa0\x81\xd7\x048\x83\xd7\x04H\x82\xd7\x048\x80\xd7\x04\xf8\x80\xd7\x04\x00\x8e\xd7\x04X\x81\xd7\x04\x10\x81\xd7\x04\xa0\x8a\xd7\x04\x90\x88\xd7\x04\x80\x83\xd7\x04\xb0\x89\xd7\x048\x8f\xd7\x04\xc0\x8b\xd7\x04@\x8a\xd7\x048\x89\xd7\x04\x98\x8c\xd7\x040\x88\xd7\x04\xd0\x8d\xd7\x04\x08\x86\xd7\x04\xf0\x8e\xd7\x04@\x81\xd7\x04h\x8f\xd7\x04\xb8\x8d\xd7\x04\xe8\x8a\xd7\x040\x85\xd7\x04\xc0\x85\xd7\x04H\x8e\xd7\x04h\x8c\xd7\x04(\x81\xd7\x04\x88\x8d\xd7\x04p\x81\xd7\x04\xf8\x8c\xd7\x04\xd8\x8b\xd7\x04H\x8b\xd7\x04\xb8\x8a\xd7\x040\x8b\xd7\x04\xe8\x84\xd7\x04\xc0\x8e\xd7\x04 \x89\xd7\x04\x98\x86\xd7\x04\xe8\x81\xd7\x04p\x87\xd7\x04\xe8\x8d\xd7\x04\x80\x86\xd7\x04\xf0\x82\xd7\x04 \x8c\xd7\x04\x08\x8c\xd7\x04\x90\x8b\xd7\x04\x00\x8b\xd7\x04`\x8b\xd7\x04p\x8d\xd7\x04X\x8a\xd7\x04\x08\x8f\xd7\x04\x00\x85\xd7\x04x\x85\xd7\x04`\x82\xd7\x04\xd0\x8a\xd7\x04\x98\x8f\xd7\x04x\x8e\xd7\x04\x18\x8e\xd7\x04\xb0\x8f\xd7\x040\x8e\xd7\x04\xb0\x86\xd7\x04h\x89\xd7\x04\xd8\x88\xd7\x04\x98\x80\xd7\x04\x00\x88\xd7\x04\x90\x8e\xd7\x04 \x8f\xd7\x04\xd8\x8e\xd7\x04\x10\x8d\xd7\x04\xb8\x84\xd7\x04\xd8\x85\xd7\x04\x98\x89\xd7\x04\x18\x8b\xd7\x04\xc8\x86\xd7\x04h\x80\xd7\x04\x88\x8a\xd7\x04h\x86\xd7\x04X\x87\xd7\x04\x18\x88\xd7\x04P\x8f\xd7\x04\x00%\xe2\x04p-\xe2\x04\x98/\xe2\x04`.\xe2\x04\x98,\xe2\x040+\xe2\x04H"\xe2\x04\x08)\xe2\x04\xa0-\xe2\x04h&\xe2\x04H(\xe2\x04H%\xe2\x04\xb0&\xe2\x04\x80,\xe2\x04\x80#\xe2\x04\x90(\xe2\x04X*\xe2\x04\x18"\xe2\x04 ,\xe2\x04\xd8(\xe2\x04@-\xe2\x04 #\xe2\x04\xc0.\xe2\x04\xf0%\xe2\x04h)\xe2\x04x%\xe2\x04\x90.\xe2\x04\x08,\xe2\x04\xd0!\xe2\x048,\xe2\x04 /\xe2\x04\xc0"\xe2\x04\x88!\xe2\x04H+\xe2\x04\xe8-\xe2\x04\xc0(\xe2\x04\x80)\xe2\x04\xb0#\xe2\x048&\xe2\x04\xa0\'\xe2\x04\x10*\xe2\x04`+\xe2\x04\xe8*\xe2\x04\xa8\x88\xd7\x048\x86\xd7\x04P\x89\xd7\x04\xb8\x81\xd7\x04\xc8\x8f\xd7\x04\x80\x8f\xd7\x04 \x80\xd7\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3782
sg3632
g3772
sg3646
g3776
sg3641
g3780
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3816
sg3632
g3806
sg3646
g3810
sg3641
g3814
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3827
sg3632
g3823
sg3646
g3834
sg3641
g3831
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3816
sg3632
g3806
sg3646
g3810
sg3641
g3814
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3782
sg3632
g3853
sg3646
g3776
sg3641
g3860
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3885
sg3632
g3881
sg3646
g3892
sg3641
g3889
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3919
sg3632
g3915
sg3646
g3926
sg3641
g3923
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3936
sg3632
g3932
sg3646
g3943
sg3641
g3940
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3657
sg3632
g3949
sg3646
g3664
sg3641
g3956
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3714
sg3632
g3964
sg3646
g3708
sg3641
g3971
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3936
sg3632
g3992
sg3646
g3943
sg3641
g3999
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g3816
sg3632
g3806
sg3646
g3810
sg3641
g3814
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g4037
sg3632
g4033
sg3646
g4044
sg3641
g4041
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g4054
sg3632
g4050
sg3646
g4061
sg3641
g4058
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g4084
sg3632
g4080
sg3646
g4091
sg3641
g4088
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g3793
sg3632
g4110
sg3646
g3800
sg3641
g4117
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g3759
sg3632
g4125
sg3646
g3766
sg3641
g4132
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g3714
sg3632
g3964
sg3646
g3708
sg3641
g3971
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g3731
sg3632
g4153
sg3646
g3725
sg3641
g4160
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3657
sg3632
g3949
sg3646
g3664
sg3641
g3956
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g3936
sg3632
g3992
sg3646
g3943
sg3641
g3999
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g3674
sg3632
g4207
sg3646
g3681
sg3641
g4214
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g3902
sg3632
g4222
sg3646
g3909
sg3641
g4229
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g3936
sg3632
g3932
sg3646
g3943
sg3641
g3940
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g3827
sg3632
g4250
sg3646
g3834
sg3641
g4257
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g4037
sg3632
g4265
sg3646
g4044
sg3641
g4272
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g3816
sg3632
g4280
sg3646
g3810
sg3641
g4287
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g3637
sg3632
g4295
sg3646
g3647
sg3641
g4302
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g3731
sg3632
g4153
sg3646
g3725
sg3641
g4160
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g4037
sg3632
g4033
sg3646
g4044
sg3641
g4041
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g3827
sg3632
g4250
sg3646
g3834
sg3641
g4257
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g4353
sg3632
g4349
sg3646
g4360
sg3641
g4357
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g3902
sg3632
g4222
sg3646
g3909
sg3641
g4229
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g4353
sg3632
g4349
sg3646
g4360
sg3641
g4357
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g3827
sg3632
g3823
sg3646
g3834
sg3641
g3831
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g4054
sg3632
g4405
sg3646
g4061
sg3641
g4412
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g3816
sg3632
g4280
sg3646
g3810
sg3641
g4287
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g3782
sg3632
g3772
sg3646
g3776
sg3641
g3780
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g4084
sg3632
g4446
sg3646
g4091
sg3641
g4453
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g4353
sg3632
g4461
sg3646
g4360
sg3641
g4468
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g3936
sg3632
g3932
sg3646
g3943
sg3641
g3940
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g3919
sg3632
g4502
sg3646
g3926
sg3641
g4509
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g4353
sg3632
g4349
sg3646
g4360
sg3641
g4357
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g4084
sg3632
g4080
sg3646
g4091
sg3641
g4088
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g4084
sg3632
g4446
sg3646
g4091
sg3641
g4453
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g3816
sg3632
g4280
sg3646
g3810
sg3641
g4287
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g3816
sg3632
g3806
sg3646
g3810
sg3641
g3814
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g3885
sg3632
g4608
sg3646
g3892
sg3641
g4615
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g3657
sg3632
g3949
sg3646
g3664
sg3641
g3956
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g3827
sg3632
g3823
sg3646
g3834
sg3641
g3831
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g4054
sg3632
g4050
sg3646
g4061
sg3641
g4058
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g3816
sg3632
g4280
sg3646
g3810
sg3641
g4287
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g3691
sg3632
g4675
sg3646
g3698
sg3641
g4682
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g3919
sg3632
g4502
sg3646
g3926
sg3641
g4509
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g3936
sg3632
g3992
sg3646
g3943
sg3641
g3999
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g3637
sg3632
g4295
sg3646
g3647
sg3641
g4302
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g4353
sg3632
g4461
sg3646
g4360
sg3641
g4468
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g4054
sg3632
g4050
sg3646
g4061
sg3641
g4058
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g3793
sg3632
g4110
sg3646
g3800
sg3641
g4117
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g3674
sg3632
g4207
sg3646
g3681
sg3641
g4214
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g3885
sg3632
g3881
sg3646
g3892
sg3641
g3889
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g4353
sg3632
g4349
sg3646
g4360
sg3641
g4357
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g3936
sg3632
g3992
sg3646
g3943
sg3641
g3999
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g4084
sg3632
g4080
sg3646
g4091
sg3641
g4088
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g3919
sg3632
g3915
sg3646
g3926
sg3641
g3923
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g3793
sg3632
g4110
sg3646
g3800
sg3641
g4117
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g3936
sg3632
g3932
sg3646
g3943
sg3641
g3940
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g3885
sg3632
g4608
sg3646
g3892
sg3641
g4615
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g3827
sg3632
g4250
sg3646
g3834
sg3641
g4257
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g3714
sg3632
g3964
sg3646
g3708
sg3641
g3971
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g3691
sg3632
g4675
sg3646
g3698
sg3641
g4682
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g3731
sg3632
g4153
sg3646
g3725
sg3641
g4160
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g3885
sg3632
g3881
sg3646
g3892
sg3641
g3889
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g4054
sg3632
g4405
sg3646
g4061
sg3641
g4412
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g3902
sg3632
g4222
sg3646
g3909
sg3641
g4229
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g4353
sg3632
g4461
sg3646
g4360
sg3641
g4468
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g3742
sg3632
g5132
sg3646
g3749
sg3641
g5139
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g3674
sg3632
g4207
sg3646
g3681
sg3641
g4214
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g3691
sg3632
g4675
sg3646
g3698
sg3641
g4682
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g3714
sg3632
g3964
sg3646
g3708
sg3641
g3971
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g3782
sg3632
g3853
sg3646
g3776
sg3641
g3860
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g4054
sg3632
g4405
sg3646
g4061
sg3641
g4412
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g3742
sg3632
g5132
sg3646
g3749
sg3641
g5139
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g3782
sg3632
g3772
sg3646
g3776
sg3641
g3780
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g3742
sg3632
g5132
sg3646
g3749
sg3641
g5139
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g3759
sg3632
g4125
sg3646
g3766
sg3641
g4132
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g3816
sg3632
g4280
sg3646
g3810
sg3641
g4287
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g3657
sg3632
g3949
sg3646
g3664
sg3641
g3956
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g4037
sg3632
g4265
sg3646
g4044
sg3641
g4272
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g3742
sg3632
g5132
sg3646
g3749
sg3641
g5139
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g3782
sg3632
g3853
sg3646
g3776
sg3641
g3860
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g3885
sg3632
g3881
sg3646
g3892
sg3641
g3889
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g3674
sg3632
g4207
sg3646
g3681
sg3641
g4214
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g3782
sg3632
g3853
sg3646
g3776
sg3641
g3860
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g3793
sg3632
g4110
sg3646
g3800
sg3641
g4117
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g4054
sg3632
g4050
sg3646
g4061
sg3641
g4058
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g3637
sg3632
g4295
sg3646
g3647
sg3641
g4302
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g4054
sg3632
g4405
sg3646
g4061
sg3641
g4412
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g3919
sg3632
g3915
sg3646
g3926
sg3641
g3923
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g3742
sg3632
g5132
sg3646
g3749
sg3641
g5139
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g3827
sg3632
g4250
sg3646
g3834
sg3641
g4257
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g3691
sg3632
g4675
sg3646
g3698
sg3641
g4682
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g3637
sg3632
g4295
sg3646
g3647
sg3641
g4302
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g4037
sg3632
g4033
sg3646
g4044
sg3641
g4041
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g4054
sg3632
g4405
sg3646
g4061
sg3641
g4412
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g3657
sg3632
g3949
sg3646
g3664
sg3641
g3956
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g3782
sg3632
g3772
sg3646
g3776
sg3641
g3780
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g3919
sg3632
g3915
sg3646
g3926
sg3641
g3923
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g3782
sg3632
g3772
sg3646
g3776
sg3641
g3780
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g4353
sg3632
g4461
sg3646
g4360
sg3641
g4468
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g3816
sg3632
g3806
sg3646
g3810
sg3641
g3814
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g3759
sg3632
g4125
sg3646
g3766
sg3641
g4132
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g4084
sg3632
g4080
sg3646
g4091
sg3641
g4088
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g3885
sg3632
g3881
sg3646
g3892
sg3641
g3889
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g3919
sg3632
g4502
sg3646
g3926
sg3641
g4509
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g3919
sg3632
g3915
sg3646
g3926
sg3641
g3923
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g4037
sg3632
g4033
sg3646
g4044
sg3641
g4041
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g3936
sg3632
g3932
sg3646
g3943
sg3641
g3940
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g3902
sg3632
g4222
sg3646
g3909
sg3641
g4229
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g4037
sg3632
g4033
sg3646
g4044
sg3641
g4041
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g3936
sg3632
g3992
sg3646
g3943
sg3641
g3999
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g4084
sg3632
g4080
sg3646
g4091
sg3641
g4088
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g3731
sg3632
g4153
sg3646
g3725
sg3641
g4160
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g3759
sg3632
g4125
sg3646
g3766
sg3641
g4132
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g3919
sg3632
g4502
sg3646
g3926
sg3641
g4509
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g3793
sg3632
g4110
sg3646
g3800
sg3641
g4117
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g4084
sg3632
g4446
sg3646
g4091
sg3641
g4453
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g3731
sg3632
g4153
sg3646
g3725
sg3641
g4160
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g3885
sg3632
g4608
sg3646
g3892
sg3641
g4615
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g4054
sg3632
g4050
sg3646
g4061
sg3641
g4058
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g4037
sg3632
g4265
sg3646
g4044
sg3641
g4272
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g3691
sg3632
g4675
sg3646
g3698
sg3641
g4682
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g4084
sg3632
g4446
sg3646
g4091
sg3641
g4453
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g3637
sg3632
g4295
sg3646
g3647
sg3641
g4302
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g3885
sg3632
g4608
sg3646
g3892
sg3641
g4615
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g3782
sg3632
g3853
sg3646
g3776
sg3641
g3860
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g4037
sg3632
g4265
sg3646
g4044
sg3641
g4272
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g3674
sg3632
g4207
sg3646
g3681
sg3641
g4214
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g3714
sg3632
g3964
sg3646
g3708
sg3641
g3971
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g3902
sg3632
g4222
sg3646
g3909
sg3641
g4229
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g3827
sg3632
g4250
sg3646
g3834
sg3641
g4257
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g4353
sg3632
g4461
sg3646
g4360
sg3641
g4468
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g4084
sg3632
g4446
sg3646
g4091
sg3641
g4453
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g3759
sg3632
g4125
sg3646
g3766
sg3641
g4132
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g3827
sg3632
g3823
sg3646
g3834
sg3641
g3831
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g4037
sg3632
g4265
sg3646
g4044
sg3641
g4272
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g3827
sg3632
g3823
sg3646
g3834
sg3641
g3831
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g3885
sg3632
g4608
sg3646
g3892
sg3641
g4615
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g4353
sg3632
g4349
sg3646
g4360
sg3641
g4357
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g3919
sg3632
g4502
sg3646
g3926
sg3641
g4509
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I79606608
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S' \x1c\n\x13\x90\xcd\n\x13\x00\xc7s\r\xb8\xcd\n\x13\x00\xc7s\r\xe0\xcd\n\x13P\x1c\n\x13@\x06\x0b\x130\xce\n\x13@\xc2s\r\xb0\x06\x0b\x13\x08\x06\x0b\x13\xd0\x1d\n\x13`\xccs\r0\xce\n\x13\x08\xce\n\x13\x80\x1c\n\x13X\xce\n\x13\xb0\x1c\n\x13X\xce\n\x13\x90\xcd\n\x13p\xcf\n\x13X\xce\n\x13P\x1c\n\x13\xb0\x1c\n\x13\xe0\xcd\n\x13\x90\xcd\n\x13\xb8\xcd\n\x13`\xccs\r\xf8\xce\n\x13\x00\xc7s\r\x80\xce\n\x13\xa0\x1d\n\x13\xe0\x1c\n\x13\x00\xc7s\r\x10\x1d\n\x13\xa8\xce\n\x13\xc0\xcf\n\x13\xf8\xce\n\x13@\xc2s\rp\xcf\n\x13\xb0\x1c\n\x13\x10\x1d\n\x13\xe0\xcd\n\x130\xce\n\x13\x08\x06\x0b\x130\xce\n\x13\xa8\xce\n\x13\xe0\x1c\n\x13\xb8\xcd\n\x13H\xcf\n\x13\xe0\x1c\n\x13\xd0\x1d\n\x130\x1e\n\x13\xb8\xcd\n\x13\xe0\xcd\n\x13\x80q\x86\x04X\xce\n\x13\x08\xce\n\x13\xe0\xcd\n\x13P\x1c\n\x13\xe0\xcd\n\x130\xce\n\x13\x00\xc7s\r0\xce\n\x13\xc0\xcf\n\x13@\x06\x0b\x13\xa8\xce\n\x13\x98\xcf\n\x13X\xce\n\x13\x80\x1c\n\x13X\xce\n\x13\xd0\x05\x0b\x13@\xc2s\r\x90\xcd\n\x13P\x1c\n\x13  \x0b\x13\xf8\xce\n\x13\xd0\x05\x0b\x13@\xc2s\r\xd0\x05\x0b\x13\x80\xce\n\x13@\x06\x0b\x13\xa8\xce\n\x13\x80\xce\n\x13\x08\xce\n\x13\xd0\x05\x0b\x13\xe0\x1c\n\x13\x90\xcd\n\x13\xc0q\x86\x04\xb0\x1c\n\x13\x80q\x86\x04 \x1c\n\x13\xd0\x05\x0b\x130\x1e\n\x13\x08\xce\n\x13\x80\xce\n\x13`\xccs\r\xe0\xcd\n\x13\x80\xce\n\x13\x90\xcd\n\x13`\xccs\r@\xc2s\r@\x1d\n\x13\xb8\xcd\n\x13 \x07\x0b\x13\x80\x1c\n\x13\xe0\xff\x85\x04X\xce\n\x130\x1e\n\x13\x80q\x86\x04\x08\xce\n\x13\x00\xc7s\r\x80\xce\n\x13\x10\x1d\n\x13\x08\xce\n\x13\x80\x1c\n\x13\x08\x06\x0b\x13P\x1c\n\x13\xa8\xce\n\x13\x10\x1d\n\x13\x00\x1e\n\x13\xe0\xcd\n\x13 \x1c\n\x13@\xc2s\r \x1c\n\x13P\x1c\n\x13\xb0\x1c\n\x13\x80\x1c\n\x13`\xccs\r\x08\x06\x0b\x13\x80q\x86\x04\xd0\x05\x0b\x13`\xccs\r\xb0\x1c\n\x13`\xccs\r\x80q\x86\x04\x00\x1e\n\x13@\xc2s\r\x80\x1c\n\x13`\xccs\r\x90\xcd\n\x13\x80\xce\n\x13\xa8\xce\n\x13@\x1d\n\x13\xc0\xcf\n\x13\xd0\x05\x0b\x13H\xcf\n\x13\x10\x1d\n\x13\x00\x1e\n\x130\xce\n\x13\xe0\x1c\n\x13\xf8\xce\n\x13p\xcf\n\x13\xd0\x05\x0b\x13\xe0\x1c\n\x13\x00\xc7s\r\x90\xcd\n\x13\x80q\x86\x04\x10\x1d\n\x13\x08\x06\x0b\x13\xb0\x1c\n\x13\x80\xce\n\x13\xa8\xce\n\x13\xe0\xcd\n\x13 \x1c\n\x13\xa0\x1d\n\x13\x98\xcf\n\x13\x80q\x86\x04 \x1c\n\x13\x08\x06\x0b\x13\x10\x1d\n\x13\xb0\x1c\n\x13\xa8\xce\n\x13\x80\xce\n\x13\xb8\xcd\n\x13\xe0\xcd\n\x13\x00\xc7s\r\xb0\x1c\n\x13x\x06\x0b\x13\xe8\x06\x0b\x13\x90\xcd\n\x13\xd0\x05\x0b\x13X\xce\n\x13H\xcf\n\x13P\x1c\n\x13 \x1c\n\x13p\xcf\n\x13\xc0q\x86\x04\x80\x1c\n\x13@\x06\x0b\x13\x80q\x86\x04\x00\x1e\n\x13@\xc2s\r\x90\xcd\n\x13\xa0\x1d\n\x13\x80q\x86\x04 \x1c\n\x13@\xc2s\r\xa8\xce\n\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x80\xfb\x0b\x13\xc0\xfb\x0b\x13`\xfa\x0b\x13@\xfb\x0b\x13`\xfc\x0b\x13\x00\xfb\x0b\x13\x80\xfa\x0b\x13\xe0\xfb\x0b\x13\xe0\xfc\x0b\x13`\xfb\x0b\x13 \xfc\x0b\x13`\xfd\x0b\x13\x00\xfc\x0b\x13\xa0\xfb\x0b\x13\xc0\xfd\x0b\x13 \xfa\x0b\x13\x80\xfc\x0b\x13@\xfc\x0b\x13@\xfe\x0b\x13\x00\xfe\x0b\x13\xa0\xfc\x0b\x13\xe0\xfd\x0b\x13\x80\xfe\x0b\x13\xe0\xfe\x0b\x13 \xfe\x0b\x13 \xff\x0b\x13@\xff\x0b\x13\xa0\xfe\x0b\x13\x80\xff\x0b\x13\xc0\xff\x0b\x13\x00\xff\x0b\x13 \xfd\x0b\x13\xe0\xff\x0b\x13\xa0\xff\x0b\x13\x80\xfd\x0b\x13\xc0\xfc\x0b\x13\xe0\xfa\x0b\x13`\xff\x0b\x13\x00\xfd\x0b\x13\x00\xfa\x0b\x13@\xfa\x0b\x13 \xfb\x0b\x13\xc0\xfa\x0b\x13\xe0\xf9\x0b\x13\xa0\xfd\x0b\x13\xa0\xfa\x0b\x13@\xfd\x0b\x13\xc0\xfe\x0b\x13\xc0q\x1e\x13@r\x1e\x13\xa0q\x1e\x13`r\x1e\x13\x80r\x1e\x13`q\x1e\x13`p\x1e\x13\xc0r\x1e\x13\xe0r\x1e\x13\x00s\x1e\x13 s\x1e\x13@s\x1e\x13`s\x1e\x13\xc0s\x1e\x13\xa0s\x1e\x13\xe0p\x1e\x13\xe0s\x1e\x13\x00t\x1e\x13 t\x1e\x13@t\x1e\x13\xa0t\x1e\x13\x80t\x1e\x13\x00r\x1e\x13\xc0t\x1e\x13\xe0t\x1e\x13\x00u\x1e\x13 u\x1e\x13\xc0G\x0f\x03`u\x1e\x13\xc0u\x1e\x13\x80p\x1e\x13\xa0p\x1e\x13 v\x1e\x13@v\x1e\x13\x80s\x1e\x13\xa0r\x1e\x13\x00v\x1e\x13\x00q\x1e\x13\xe0v\x1e\x13\x00w\x1e\x13@p\x1e\x13\xa0u\x1e\x13\xe0q\x1e\x13\xc0p\x1e\x13@w\x1e\x13\x80u\x1e\x13\xe0w\x1e\x13\x00x\x1e\x13\xa0v\x1e\x13 x\x1e\x13`t\x1e\x13\x80w\x1e\x13`x\x1e\x13\xa0w\x1e\x13 p\x1e\x13\x80v\x1e\x13 q\x1e\x13\xc0x\x1e\x13\xc0v\x1e\x13\x80x\x1e\x13`y\x1e\x13\xc0y\x1e\x13`v\x1e\x13@u\x1e\x13\x80y\x1e\x13\xe0u\x1e\x13 z\x1e\x13@z\x1e\x13\xa0z\x1e\x13\xc0w\x1e\x13`w\x1e\x13@q\x1e\x13@x\x1e\x13`z\x1e\x13`{\x1e\x13 w\x1e\x13\x80{\x1e\x13 {\x1e\x13\x00y\x1e\x13 y\x1e\x13\x00z\x1e\x13\xa0{\x1e\x13`|\x1e\x13\x00|\x1e\x13\xe0z\x1e\x13 |\x1e\x13@y\x1e\x13\x00}\x1e\x13\xc0|\x1e\x13@{\x1e\x13\xa0y\x1e\x13@}\x1e\x13\xc0{\x1e\x13\xe0y\x1e\x13\xe0x\x1e\x13\xe0|\x1e\x13\x80q\x1e\x13 ~\x1e\x13\xe0}\x1e\x13 r\x1e\x13@|\x1e\x13\xa0|\x1e\x13\xc0\x00s\r\xc0}\x1e\x13\x80}\x1e\x13\x80|\x1e\x13\xa0~\x1e\x13`~\x1e\x13\x80~\x1e\x13@\x7f\x1e\x13\x00\x7f\x1e\x13\xe0{\x1e\x13@~\x1e\x13\xc0z\x1e\x13\xa0x\x1e\x13\x80\x7f\x1e\x13\xa0\x7f\x1e\x13\xa0}\x1e\x13 \x7f\x1e\x13\x00~\x1e\x13`}\x1e\x13 }\x1e\x13\x00{\x1e\x13\x80z\x1e\x13\xe0~\x1e\x13\xe0\x7f\x1e\x13\xc0\x7f\x1e\x13\xc01I\x13@2I\x13\xa01I\x13\xc00I\x13\xa02I\x13\xc02I\x13\x802I\x13\x003I\x13 3I\x13\xa00I\x13`3I\x13\x803I\x13\xa03I\x13\xc03I\x13\xe00I\x13 1I\x13 4I\x13\x004I\x13`4I\x13@4I\x13\xa04I\x13\x804I\x13\xe02I\x13\x005I\x13\xe04I\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S'\x9c\xb8j?\xc0\xbdY?\x97\xea]?\xea\xe2]?\xb3:3?\x85&\x82?\xec>3?\xd8\xc7*?F\xb5*?\xf2\xb7*?)\xdbL?s\xb8*?1\xe9\x8e?\xc2\\\x95?mPD?8\x8cH?\xb2|7?\x91\xfc\xdf?\xff\xfb.?M\x00o?K\xea]?\x99tf?\t\x05Q?z\x817?|;3?w\x0eo?d>s?K\x0f@?\x9a\xb0\xaa?\x12\xaeY?2QD?\x18\xa9\x19?@/"?}\xfan?\xe6\x83w?\n\xc8{?\x99\xbc\xaa?\x16\xcc;?\x92\x90H?\xf9\xb8*?\xee\xf5n?]\x06\x80?0\xe0;?\xd9sf?e\xe8\x1d?\xd1\xbf\xbb?\x120"?-\xd1\x8c?\xd5\\U?z:3?I.b?\x98\x0f@?4af?;H"?\x9f\xd8L?C\xc9;?\xb3\x02\x80?\x11\xa5j?\x8f\xce\x0c?\xfa\x11o?D\xfb.?Z)b?\xa2b\x15?\x90\x8fH?[m&?D8Q?\x9e|7?\xae.b?V\xa8Y?0c\x86?3\xc6;?\x0c\xf2]?gJ\x84?.\xe9\x1d?]F\xa4?\xd4t7?\x12\xb2j?\xfb\xabH?\x8atf?\x88n&?\xeb\x807?9|U?Y\x10\x11?yGb?\x8f-b?;\x06@?nI\x84?_0"?$\xb1\x8a?\xa1VD?\xf9\xc9;?.z\x07@\x05\x847?\x17\x06\x80?\xe7\x9a\x88?x\x9f\x19?\x11\x96H?\x01\x1dQ?k\xce\x8c?\x0ct&?\xa5\xe0\x8c?h7\x93?\xe9\xe7\x1d?\xf5UD?\x18pf?~>3?\x05L3?[\xc7;?\x13\xd9\x1d?\x1a\x17\x91?\xfe\xb9j?y\xd4\x0c@\xf5\xe9]?\xb0\xe9\x1d?/\x07@?\xd6\x8eH?>;3?\xc5\x1dQ?\xbe\xaf*?_\xe3\x1d?\x91bU?h~\x97?\xc8\xc2;?\xcdE"?&\x96\x08?Y\x8d\x88?O^U?r\xf1\x0e@\x94R3?\xb2\xc2{?_\xf5n?Q\xa9\x19?\x9b(b?\x7f}7?\xfc\x10o?p\x96H?J\xb7*?8\xfa.?\x0f\x1fQ?%RD?\xff\xebL?\xaf\xb8j?\xe0\x05@?v\xa0\x19?\xfe\xa3\x19?,/"?]\x96H?\xdb?3?\xbbi&?\xc5\xc3;?0\xcbL?\xc7ID?\xf0\xf1L?0\x91H?R\x9d\x99?\x95\xfd.?\\.b?8\x1eQ?\xa9W3?\xb8\x94H?%\xc5{?F\xc8;?\x9f\x1dQ?]`U?\x120"?P\xb3*?\xaa\xc8;?s\xc9;?\x10+"?\x19\xe4\x1d?v\xeb\x1d?\x0e\x847?Z\xe7\x1d?1\xe8\x1d?\xa4@3?\xf1+"?\xc0\x06\xa0?LF\xa4?{\xda\x0c?\xcd`\x15?\x81\x867?\xdd\xe9]?<|\xb7?W\xa8\x8a?\xb4\r@?\x80\r@?\x9c\xa3Y?\xfc\xfbn?\xb8J\x84?m\x1aQ?\xf9|7?\xcfSD?\xf4\xca{?\xbd\xc1\x9b?\x93j\x04?\xff\xf8n?pbU?\xa7\x95H?\xc9\xa6Y?O9s?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S'\x90+\xe2\x04\x80&\xe2\x04\x00\xdb\xca\x04\xe0\xd6\xca\x04\x08\xd9\xca\x04\xe0\xdc\xca\x04\x18\xdb\xca\x04X\xd7\xca\x04\xf8\xd6\xca\x04\x90\xdb\xca\x040\xde\xca\x04\x88\xda\xca\x04\x88\xd1\xca\x04h\xd3\xca\x04\x08\xdc\xca\x04\xf0\xdb\xca\x04\xf8\xd9\xca\x04\xd0\xda\xca\x04\x00\xd5\xca\x040\xd8\xca\x04\x90\xd8\xca\x04\x80\xd3\xca\x04\x98\xd6\xca\x04P\xd9\xca\x04h\xd9\xca\x04\xb0\xd6\xca\x04x\xd5\xca\x04\xd8\xd8\xca\x04\xf8\xd3\xca\x048\xd9\xca\x04\xc8\xdc\xca\x04x\xdb\xca\x04\xc8\xd0\xca\x04\xe8\xd1\xca\x04X\xdd\xca\x048\xd0\xca\x04\xa8\xd8\xca\x04\xe0\xdf\xca\x04\xb8\xdd\xca\x04 \xd6\xca\x04@\xd7\xca\x04\xb8\xda\xca\x04`\xd5\xca\x04\xb8\xd4\xca\x04\x18\xd5\xca\x048\xd6\xca\x04h\xdc\xca\x04H\xd2\xca\x04\xb0\xdf\xca\x04\xd0\xd7\xca\x04\xc8\xdf\xca\x04 \xdc\xca\x04\x98\xd9\xca\x04\xa0\xd7\xca\x04X\xda\xca\x04\xb8\xd1\xca\x04P\xd3\xca\x04h\xdf\xca\x048\xdc\xca\x04\x00\xd2\xca\x04\x80\xdf\xca\x04\x88\xd7\xca\x048\xdf\xca\x04p\xdd\xca\x04\x10\xdd\xca\x04\xe8\xda\xca\x04\xb0\xd0\xca\x04\x00\xde\xca\x04\x18\xde\xca\x04 \xd9\xca\x04\xf8\xd0\xca\x04`\xd2\xca\x04\x10\xda\xca\x04\xa0\xdd\xca\x04\xa8\xde\xca\x04`\xdb\xca\x04(\xdd\xca\x04@\xdd\xca\x04\xa8\xdb\xca\x04 \xdf\xca\x04`\xde\xca\x04\x18\xd2\xca\x04\xd8\xde\xca\x04\xe0\xd3\xca\x040\xd5\xca\x04\x88\xdd\xca\x04\xd8\xdb\xca\x04X\xd4\xca\x04(\xda\xca\x04h\xd6\xca\x04\xf8\xdc\xca\x04\x90\xde\xca\x04\xe8\xd4\xca\x04\xc0\xde\xca\x04\x00\xd8\xca\x04\xb0\xd3\xca\x04\xf0\xd2\xca\x04P\xdf\xca\x04\xb0\xdc\xca\x04@\xda\xca\x04H\xde\xca\x04\xc8\xd6\xca\x04P\xdc\xca\x04\xd0\xdd\xca\x04\x10\xd7\xca\x04x\xde\xca\x04\xe8\xd7\xca\x04\x98\xdc\xca\x04\x10\x17\xd7\x04\x88\x1a\xd7\x04H\x1b\xd7\x04\xa8\x1b\xd7\x04X\x11\xd7\x04\xb8\x1a\xd7\x04\xa0\x11\xd7\x04\xf0\x15\xd7\x04\xf8\x16\xd7\x04\xf8\x10\xd7\x04\x80\x10\xd7\x04\x08\x13\xd7\x04@\x1d\xd7\x04(\x14\xd7\x04`\x12\xd7\x048\x10\xd7\x048\x1c\xd7\x040\x12\xd7\x04\x90\x15\xd7\x04\xf8\x13\xd7\x04\x00\x15\xd7\x040\x15\xd7\x04X\x1d\xd7\x04\xe8\x11\xd7\x04\xe0\x13\xd7\x04@\x11\xd7\x040\x1b\xd7\x04\xd8\x12\xd7\x048\x19\xd7\x04\x00\x1e\xd7\x04\xc0\x12\xd7\x04H\x15\xd7\x040\x1e\xd7\x04 \x13\xd7\x04\xc8\x19\xd7\x040\x18\xd7\x04\xb0\x10\xd7\x04\xd8\xd2\xca\x04\xe0\xd0\xca\x04\xd0\xd4\xca\x04\x98\xd3\xca\x04\xc0\xd8\xca\x04(\xd7\xca\x04\xd8\xd5\xca\x04 \xd3\xca\x04\x08\xd3\xca\x04\xa0\xda\xca\x04\x10\xd1\xca\x04\xc0\xd5\xca\x04\x08\xd6\xca\x04\x98\xd0\xca\x04(\xd1\xca\x04\xa8\xd5\xca\x04\x80\xd0\xca\x04\x98\xdf\xca\x04\x80\xdc\xca\x04\xe0\xd9\xca\x04\xf0\xd8\xca\x04\xc8\xd3\xca\x04P\xd6\xca\x04\x80\xd9\xca\x04p\xd7\xca\x04H\xdb\xca\x04\xa0\xd4\xca\x04P\xd0\xca\x048\xd3\xca\x04(\xd4\xca\x040\xd2\xca\x04`\xd8\xca\x04\xb8\xd7\xca\x04\xc8\xd9\xca\x04\x10\xd4\xca\x04 \xd0\xca\x04h\xd0\xca\x04\xf0\xd5\xca\x04\xa0\xd1\xca\x04\x88\xd4\xca\x04@\xd1\xca\x04x\xd8\xca\x04\x90\xd5\xca\x04\x18\xd8\xca\x04p\xd1\xca\x04X\xd1\xca\x04\xa8\xd2\xca\x04H\xd5\xca\x04p\xda\xca\x040\xdb\xca\x04\xf0\xde\xca\x04p\xd4\xca\x04\xd0\xd1\xca\x04H\xd8\xca\x04@\xd4\xca\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6459
sg6370
g6455
sg6384
g6466
sg6379
g6463
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6499
sg6370
g6489
sg6384
g6493
sg6379
g6497
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6510
sg6370
g6506
sg6384
g6517
sg6379
g6514
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6527
sg6370
g6523
sg6384
g6534
sg6379
g6531
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6550
sg6370
g6540
sg6384
g6544
sg6379
g6548
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6561
sg6370
g6557
sg6384
g6568
sg6379
g6565
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6584
sg6370
g6574
sg6384
g6578
sg6379
g6582
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6595
sg6370
g6591
sg6384
g6602
sg6379
g6599
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6510
sg6370
g6506
sg6384
g6517
sg6379
g6514
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6499
sg6370
g6489
sg6384
g6493
sg6379
g6497
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6638
sg6370
g6634
sg6384
g6645
sg6379
g6642
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6584
sg6370
g6651
sg6384
g6578
sg6379
g6658
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6670
sg6370
g6666
sg6384
g6677
sg6379
g6674
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6584
sg6370
g6574
sg6384
g6578
sg6379
g6582
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6395
sg6370
g6696
sg6384
g6402
sg6379
g6703
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6561
sg6370
g6711
sg6384
g6568
sg6379
g6718
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6584
sg6370
g6651
sg6384
g6578
sg6379
g6658
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6476
sg6370
g6739
sg6384
g6483
sg6379
g6746
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6670
sg6370
g6754
sg6384
g6677
sg6379
g6761
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6459
sg6370
g6769
sg6384
g6466
sg6379
g6776
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6429
sg6370
g6797
sg6384
g6436
sg6379
g6804
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6595
sg6370
g6591
sg6384
g6602
sg6379
g6599
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6855
sg6370
g6851
sg6384
g6862
sg6379
g6859
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6476
sg6370
g6739
sg6384
g6483
sg6379
g6746
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6885
sg6370
g6881
sg6384
g6892
sg6379
g6889
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6412
sg6370
g6898
sg6384
g6419
sg6379
g6905
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6917
sg6370
g6913
sg6384
g6924
sg6379
g6921
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6934
sg6370
g6930
sg6384
g6941
sg6379
g6938
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6638
sg6370
g6634
sg6384
g6645
sg6379
g6642
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6429
sg6370
g6797
sg6384
g6436
sg6379
g6804
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6527
sg6370
g6523
sg6384
g6534
sg6379
g6531
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6561
sg6370
g6711
sg6384
g6568
sg6379
g6718
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6670
sg6370
g6754
sg6384
g6677
sg6379
g6761
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g6917
sg6370
g7012
sg6384
g6924
sg6379
g7019
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6459
sg6370
g6769
sg6384
g6466
sg6379
g6776
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g6510
sg6370
g7040
sg6384
g6517
sg6379
g7047
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6561
sg6370
g6711
sg6384
g6568
sg6379
g6718
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g6510
sg6370
g7040
sg6384
g6517
sg6379
g7047
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6934
sg6370
g7081
sg6384
g6941
sg6379
g7088
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6885
sg6370
g7096
sg6384
g6892
sg6379
g7103
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6510
sg6370
g6506
sg6384
g6517
sg6379
g6514
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6885
sg6370
g7096
sg6384
g6892
sg6379
g7103
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g6584
sg6370
g6651
sg6384
g6578
sg6379
g6658
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6917
sg6370
g6913
sg6384
g6924
sg6379
g6921
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6459
sg6370
g6455
sg6384
g6466
sg6379
g6463
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g7206
sg6370
g7202
sg6384
g7213
sg6379
g7210
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6584
sg6370
g6574
sg6384
g6578
sg6379
g6582
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6499
sg6370
g7232
sg6384
g6493
sg6379
g7239
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6459
sg6370
g6455
sg6384
g6466
sg6379
g6463
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g6459
sg6370
g6455
sg6384
g6466
sg6379
g6463
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6510
sg6370
g7040
sg6384
g6517
sg6379
g7047
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g6412
sg6370
g6898
sg6384
g6419
sg6379
g6905
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g6510
sg6370
g7040
sg6384
g6517
sg6379
g7047
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6638
sg6370
g7325
sg6384
g6645
sg6379
g7332
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6499
sg6370
g7232
sg6384
g6493
sg6379
g7239
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g6934
sg6370
g7081
sg6384
g6941
sg6379
g7088
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6595
sg6370
g6591
sg6384
g6602
sg6379
g6599
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g6584
sg6370
g6574
sg6384
g6578
sg6379
g6582
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6638
sg6370
g7325
sg6384
g6645
sg6379
g7332
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6584
sg6370
g6574
sg6384
g6578
sg6379
g6582
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6550
sg6370
g6540
sg6384
g6544
sg6379
g6548
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g6527
sg6370
g6523
sg6384
g6534
sg6379
g6531
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6395
sg6370
g6696
sg6384
g6402
sg6379
g6703
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6476
sg6370
g6739
sg6384
g6483
sg6379
g6746
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6934
sg6370
g6930
sg6384
g6941
sg6379
g6938
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6550
sg6370
g7496
sg6384
g6544
sg6379
g7503
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g6527
sg6370
g7511
sg6384
g6534
sg6379
g7518
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g6550
sg6370
g6540
sg6384
g6544
sg6379
g6548
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g6855
sg6370
g6851
sg6384
g6862
sg6379
g6859
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g6499
sg6370
g6489
sg6384
g6493
sg6379
g6497
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g6934
sg6370
g7081
sg6384
g6941
sg6379
g7088
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g6855
sg6370
g6851
sg6384
g6862
sg6379
g6859
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6499
sg6370
g6489
sg6384
g6493
sg6379
g6497
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g6550
sg6370
g6540
sg6384
g6544
sg6379
g6548
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g6885
sg6370
g7096
sg6384
g6892
sg6379
g7103
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g6395
sg6370
g6696
sg6384
g6402
sg6379
g6703
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6412
sg6370
g6898
sg6384
g6419
sg6379
g6905
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g6670
sg6370
g6666
sg6384
g6677
sg6379
g6674
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g7206
sg6370
g7669
sg6384
g7213
sg6379
g7676
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g6375
sg6370
g7684
sg6384
g6385
sg6379
g7691
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g6550
sg6370
g7496
sg6384
g6544
sg6379
g7503
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6917
sg6370
g6913
sg6384
g6924
sg6379
g6921
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g6499
sg6370
g7232
sg6384
g6493
sg6379
g7239
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g6855
sg6370
g6851
sg6384
g6862
sg6379
g6859
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6595
sg6370
g6591
sg6384
g6602
sg6379
g6599
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g6459
sg6370
g6769
sg6384
g6466
sg6379
g6776
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6855
sg6370
g7777
sg6384
g6862
sg6379
g7784
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6395
sg6370
g6696
sg6384
g6402
sg6379
g6703
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g6595
sg6370
g7805
sg6384
g6602
sg6379
g7812
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6527
sg6370
g7511
sg6384
g6534
sg6379
g7518
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g6429
sg6370
g6797
sg6384
g6436
sg6379
g6804
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g7206
sg6370
g7202
sg6384
g7213
sg6379
g7210
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6638
sg6370
g6634
sg6384
g6645
sg6379
g6642
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g6855
sg6370
g7777
sg6384
g6862
sg6379
g7784
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g6584
sg6370
g6651
sg6384
g6578
sg6379
g6658
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6917
sg6370
g6913
sg6384
g6924
sg6379
g6921
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g7206
sg6370
g7202
sg6384
g7213
sg6379
g7210
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6499
sg6370
g7232
sg6384
g6493
sg6379
g7239
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g6855
sg6370
g7777
sg6384
g6862
sg6379
g7784
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6917
sg6370
g7012
sg6384
g6924
sg6379
g7019
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g6499
sg6370
g7232
sg6384
g6493
sg6379
g7239
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g6638
sg6370
g7325
sg6384
g6645
sg6379
g7332
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6561
sg6370
g6711
sg6384
g6568
sg6379
g6718
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g6476
sg6370
g6739
sg6384
g6483
sg6379
g6746
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g6934
sg6370
g7081
sg6384
g6941
sg6379
g7088
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g6917
sg6370
g7012
sg6384
g6924
sg6379
g7019
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g6885
sg6370
g6881
sg6384
g6892
sg6379
g6889
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6459
sg6370
g6769
sg6384
g6466
sg6379
g6776
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g6375
sg6370
g7684
sg6384
g6385
sg6379
g7691
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g6527
sg6370
g7511
sg6384
g6534
sg6379
g7518
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g6670
sg6370
g6754
sg6384
g6677
sg6379
g6761
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g6638
sg6370
g6634
sg6384
g6645
sg6379
g6642
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6595
sg6370
g6591
sg6384
g6602
sg6379
g6599
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6561
sg6370
g6557
sg6384
g6568
sg6379
g6565
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g7206
sg6370
g7202
sg6384
g7213
sg6379
g7210
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g6550
sg6370
g7496
sg6384
g6544
sg6379
g7503
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6595
sg6370
g7805
sg6384
g6602
sg6379
g7812
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6670
sg6370
g6666
sg6384
g6677
sg6379
g6674
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6595
sg6370
g7805
sg6384
g6602
sg6379
g7812
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g7206
sg6370
g7669
sg6384
g7213
sg6379
g7676
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g6885
sg6370
g7096
sg6384
g6892
sg6379
g7103
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g6527
sg6370
g7511
sg6384
g6534
sg6379
g7518
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6638
sg6370
g7325
sg6384
g6645
sg6379
g7332
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g6595
sg6370
g7805
sg6384
g6602
sg6379
g7812
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6855
sg6370
g7777
sg6384
g6862
sg6379
g7784
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g6934
sg6370
g7081
sg6384
g6941
sg6379
g7088
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g6375
sg6370
g7684
sg6384
g6385
sg6379
g7691
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6638
sg6370
g6634
sg6384
g6645
sg6379
g6642
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6550
sg6370
g7496
sg6384
g6544
sg6379
g7503
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6510
sg6370
g7040
sg6384
g6517
sg6379
g7047
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6917
sg6370
g7012
sg6384
g6924
sg6379
g7019
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6885
sg6370
g6881
sg6384
g6892
sg6379
g6889
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6510
sg6370
g6506
sg6384
g6517
sg6379
g6514
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g6885
sg6370
g6881
sg6384
g6892
sg6379
g6889
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g6429
sg6370
g6797
sg6384
g6436
sg6379
g6804
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6561
sg6370
g6557
sg6384
g6568
sg6379
g6565
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6550
sg6370
g6540
sg6384
g6544
sg6379
g6548
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6885
sg6370
g6881
sg6384
g6892
sg6379
g6889
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g6412
sg6370
g6898
sg6384
g6419
sg6379
g6905
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g7206
sg6370
g7669
sg6384
g7213
sg6379
g7676
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6917
sg6370
g7012
sg6384
g6924
sg6379
g7019
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6561
sg6370
g6711
sg6384
g6568
sg6379
g6718
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g6670
sg6370
g6754
sg6384
g6677
sg6379
g6761
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g6855
sg6370
g6851
sg6384
g6862
sg6379
g6859
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g6934
sg6370
g6930
sg6384
g6941
sg6379
g6938
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g6459
sg6370
g6769
sg6384
g6466
sg6379
g6776
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g6595
sg6370
g7805
sg6384
g6602
sg6379
g7812
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g7206
sg6370
g7669
sg6384
g7213
sg6379
g7676
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g6375
sg6370
g7684
sg6384
g6385
sg6379
g7691
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6561
sg6370
g6557
sg6384
g6568
sg6379
g6565
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6917
sg6370
g6913
sg6384
g6924
sg6379
g6921
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6670
sg6370
g6754
sg6384
g6677
sg6379
g6761
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g6934
sg6370
g6930
sg6384
g6941
sg6379
g6938
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6855
sg6370
g7777
sg6384
g6862
sg6379
g7784
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6429
sg6370
g6797
sg6384
g6436
sg6379
g6804
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6459
sg6370
g6455
sg6384
g6466
sg6379
g6463
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g6412
sg6370
g6898
sg6384
g6419
sg6379
g6905
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6670
sg6370
g6666
sg6384
g6677
sg6379
g6674
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g6527
sg6370
g7511
sg6384
g6534
sg6379
g7518
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6670
sg6370
g6666
sg6384
g6677
sg6379
g6674
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6550
sg6370
g7496
sg6384
g6544
sg6379
g7503
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g6584
sg6370
g6651
sg6384
g6578
sg6379
g6658
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g6510
sg6370
g6506
sg6384
g6517
sg6379
g6514
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6375
sg6370
g7684
sg6384
g6385
sg6379
g7691
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6561
sg6370
g6557
sg6384
g6568
sg6379
g6565
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6638
sg6370
g7325
sg6384
g6645
sg6379
g7332
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g6499
sg6370
g6489
sg6384
g6493
sg6379
g6497
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g7206
sg6370
g7669
sg6384
g7213
sg6379
g7676
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6885
sg6370
g7096
sg6384
g6892
sg6379
g7103
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g6527
sg6370
g6523
sg6384
g6534
sg6379
g6531
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g6395
sg6370
g6696
sg6384
g6402
sg6379
g6703
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g6476
sg6370
g6739
sg6384
g6483
sg6379
g6746
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g7206
sg6370
g7202
sg6384
g7213
sg6379
g7210
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g6527
sg6370
g6523
sg6384
g6534
sg6379
g6531
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g6934
sg6370
g6930
sg6384
g6941
sg6379
g6938
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.