ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C34_infer_design1_no_eyetracking_2015_Oct_21_1615
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vr
sVcontacts
p57
Vn
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS':Vd\xe1&\x01N@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Oct_21_1615
p66
sVparticipant
p67
VC34
p68
sVglasses
p69
Vn
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vr
sg15
F0.40019666047817282
sg14
S'space'
p88
sg58
g62
sg57
Vn
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp89
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F12.199907172148869
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P3\x00'
tbsg69
Vn
sa(dp95
g63
g64
sg20
F20.433
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F1.3999999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x05\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p102
sg21
F1.8
sg69
Vn
sa(dp103
g63
g64
sg20
F9.9000000000000004
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F0.25999999999999868
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'&\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V50-polo.png
p109
sg21
F1.7
sg69
Vn
sa(dp110
g63
g64
sg20
F2.9340000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S'\x07\x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p116
sg21
F1.6000000000000001
sg69
Vn
sa(dp117
g63
g64
sg20
F9.7170000000000005
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F0.93999999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'\x11\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p123
sg21
F1.1000000000000001
sg69
Vn
sa(dp124
g63
g64
sg20
F4.0670000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F0.17999999999999849
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'\x18\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p130
sg21
F2
sg69
Vn
sa(dp131
g63
g64
sg20
F2.6669999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'\x06\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V7-olives.png
p137
sg21
F1.5
sg69
Vn
sa(dp138
g63
g64
sg20
F5.3010000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F0.49999999999999889
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'\x00\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p144
sg21
F1.8
sg69
Vn
sa(dp145
g63
g64
sg20
F10.467000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F0.75999999999999979
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'\x17\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p151
sg21
F1.1000000000000001
sg69
Vn
sa(dp152
g63
g64
sg20
F2.5670000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F0.45999999999999952
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x1f\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p158
sg21
F1.1000000000000001
sg69
Vn
sa(dp159
g63
g64
sg20
F3.101
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'\x0f\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p165
sg21
F1.8
sg69
Vn
sa(dp166
g63
g64
sg20
F3.5840000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F0.51999999999999891
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'\x0e\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p172
sg21
F1.7
sg69
Vn
sa(dp173
g63
g64
sg20
F1.9510000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S' \x00\x00\x00'
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p179
sg21
F1.1000000000000001
sg69
Vn
sa(dp180
g63
g64
sg20
F8.1669999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F0.85999999999999988
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'\x14\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p186
sg21
F1
sg69
Vn
sa(dp187
g63
g64
sg20
F2.6339999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F0.7399999999999991
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'\r\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p193
sg21
F1.7
sg69
Vn
sa(dp194
g63
g64
sg20
F2.5339999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F0.37999999999999945
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'\x10\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V22-daim.png
p200
sg21
F1.1000000000000001
sg69
Vn
sa(dp201
g63
g64
sg20
F2.617
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'#\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p207
sg21
F1.6000000000000001
sg69
Vn
sa(dp208
g63
g64
sg20
F2.3010000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'\x02\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p214
sg21
F1.3999999999999999
sg69
Vn
sa(dp215
g63
g64
sg20
F2.0009999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'"\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p221
sg21
F1.2
sg69
Vn
sa(dp222
g63
g64
sg20
F2.601
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x01\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p228
sg21
F1.8999999999999999
sg69
Vn
sa(dp229
g63
g64
sg20
F2.9169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F0.47999999999999865
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'\x15\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V29-beans.png
p235
sg21
F2
sg69
Vn
sa(dp236
g63
g64
sg20
F3.367
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F0.99999999999999978
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'\x0b\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p242
sg21
F1.2
sg69
Vn
sa(dp243
g63
g64
sg20
F2.5510000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F0.71999999999999931
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'$\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V48-twix.png
p249
sg21
F1.3999999999999999
sg69
Vn
sa(dp250
g63
g64
sg20
F2.5510000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F0.27999999999999892
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S'\x04\x00\x00\x00'
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p256
sg21
F1.5
sg69
Vn
sa(dp257
g63
g64
sg20
F2.0009999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'\x13\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p263
sg21
F1.2
sg69
Vn
sa(dp264
g63
g64
sg20
F1.7509999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F0.79999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S"'\x00\x00\x00"
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V51-mars.png
p270
sg21
F1.3999999999999999
sg69
Vn
sa(dp271
g63
g64
sg20
F2.8340000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F0.61999999999999877
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'\x1b\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p277
sg21
F2
sg69
Vn
sa(dp278
g63
g64
sg20
F4.1509999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F0.67999999999999949
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'\x19\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p284
sg21
F1.2
sg69
Vn
sa(dp285
g63
g64
sg20
F2.4180000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S'\t\x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p291
sg21
F1.8
sg69
Vn
sa(dp292
g63
g64
sg20
F2.9009999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S'\x1e\x00\x00\x00'
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p298
sg21
F2
sg69
Vn
sa(dp299
g63
g64
sg20
F2.234
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S'\x0c\x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V18-mms.png
p305
sg21
F1.5
sg69
Vn
sa(dp306
g63
g64
sg20
F3.2839999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F0.19999999999999871
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S'\x1d\x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V40-sardines.png
p312
sg21
F1.7
sg69
Vn
sa(dp313
g63
g64
sg20
F2.5009999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F0.63999999999999924
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S'\x12\x00\x00\x00'
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p319
sg21
F1.6000000000000001
sg69
Vn
sa(dp320
g63
g64
sg20
F1.851
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'%\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p326
sg21
F1.3
sg69
Vn
sa(dp327
g63
g64
sg20
F3.2509999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F0.67999999999999949
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'\n\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p333
sg21
F1.3
sg69
Vn
sa(dp334
g63
g64
sg20
F5.367
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F0.65999999999999903
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'\x08\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p340
sg21
F1.8
sg69
Vn
sa(dp341
g63
g64
sg20
F2.4340000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S'\x16\x00\x00\x00'
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p347
sg21
F1.8999999999999999
sg69
Vn
sa(dp348
g63
g64
sg20
F3.851
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F0.49999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S'\x03\x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V4-corn.png
p354
sg21
F1
sg69
Vn
sa(dp355
g63
g64
sg20
F1.9339999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F0.51999999999999957
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S'\x1a\x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V35-raisins.png
p361
sg21
F1
sg69
Vn
sa(dp362
g63
g64
sg20
F2.6840000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F0.17999999999999849
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'!\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V44-crunch.png
p368
sg21
F2
sg69
Vn
sa(dp369
g63
g64
sg20
F3.0169999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F0.53999999999999959
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\x1c\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p375
sg21
F1.1000000000000001
sg69
Vn
sa(dp376
g63
g64
sg55
g11
sg56
Vr
sg23
F6.9667738444413772
sg57
Vn
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vn
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p380
sg26
F5.9999999999999973
sg28
F4
sg58
g62
sg57
Vn
sg80
S'2-steamed_puddings.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vr
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'left'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F1.9000238911976339
sg27
F4.5510000000000002
sg69
Vn
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'18-mms.png'
p389
sg26
F2.2999999999999989
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'43-mrporky_pork_crackles_redo.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vr
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'right'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F4.15011483740318
sg27
F4.234
sg69
Vn
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'22-daim.png'
p398
sg26
F3.8999999999999999
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'7-olives.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vr
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'left'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F1.2000508614514729
sg27
F1.1339999999999999
sg69
Vn
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p407
sg26
F2.1999999999999988
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'45-chewy_nougat_redo.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vr
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'right'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F2.0834743617228924
sg27
F4.367
sg69
Vn
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p416
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'17-jacobs_mini_cheddars_redo.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vr
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'right'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F1.350047953453668
sg27
F0.91700000000000004
sg69
Vn
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'4-corn.png'
p425
sg26
F2.9999999999999996
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'10-bounty_redo.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vr
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'right'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F5.5665760435722405
sg27
F6.9509999999999996
sg69
Vn
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'48-twix.png'
p434
sg26
F5
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'50-polo.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vr
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'left'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F1.2833849550456762
sg27
F5.1840000000000002
sg69
Vn
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p443
sg26
F2.9999999999999996
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'4-corn.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vr
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'left'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F4.0000362074235909
sg27
F2.7839999999999998
sg69
Vn
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p452
sg26
F4.0000000000000009
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'21-nakd_banana_crunch.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vr
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'left'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F2.8505169393722554
sg27
F1.3839999999999999
sg69
Vn
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'44-crunch.png'
p461
sg26
F4.7000000000000011
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'26-walkers_smoky_bacon.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vr
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'left'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F1.933388889395701
sg27
F3.6509999999999998
sg69
Vn
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'35-raisins.png'
p470
sg26
F5.0000000000000009
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'49-yorkie.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vr
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'left'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F1.7500724148469544
sg27
F1.9510000000000001
sg69
Vn
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'7-olives.png'
p479
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'22-daim.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vr
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'right'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F1.3500562212905152
sg27
F1.284
sg69
Vn
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'25-kitkat.png'
p488
sg26
F1.7999999999999989
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'31-hobnobs.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vr
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'right'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F4.9500371767560409
sg27
F3.8340000000000001
sg69
Vn
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p497
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'33-ambrosia_rice.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vr
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'left'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F1.4500206410823466
sg27
F0.86699999999999999
sg69
Vn
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'50-polo.png'
p506
sg26
F3.8999999999999999
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'48-twix.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vr
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'right'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F2.0168204864453401
sg27
F2.9169999999999998
sg69
Vn
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'49-yorkie.png'
p515
sg26
F5.0000000000000009
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'35-raisins.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vr
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'right'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F1.3335085734615859
sg27
F1.7509999999999999
sg69
Vn
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'31-hobnobs.png'
p524
sg26
F3.7000000000000006
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'25-kitkat.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vr
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'left'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F0.88351444647696553
sg27
F3.9169999999999998
sg69
Vn
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p533
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'20-fruit_pastilles.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vr
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'right'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F1.3670985138421656
sg27
F1.101
sg69
Vn
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p542
sg26
F5.1000000000000014
sg28
F3
sg58
g62
sg57
Vn
sg80
S'1-treacle_cookies.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vr
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'right'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F1.2833744064264465
sg27
F1.7509999999999999
sg69
Vn
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p551
sg26
F1.9999999999999996
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'41-peanuts_redo.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vr
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'left'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F1.150034154719151
sg27
F0.96699999999999997
sg69
Vn
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'40-sardines.png'
p560
sg26
F3.8999999999999999
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'5-pineapple.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vr
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'right'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F1.8001655277960253
sg27
F2.9670000000000001
sg69
Vn
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p569
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'23-crunchie_redo.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vr
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'right'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F1.1001029773335631
sg27
F1.0840000000000001
sg69
Vn
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p578
sg26
F2.399999999999999
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vr
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'right'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F3.4334151183954873
sg27
F4.2510000000000003
sg69
Vn
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p587
sg26
F4.8000000000000016
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'42-mrkipling_lemon_slices.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vr
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'left'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F1.4999193173161984
sg27
F2.7010000000000001
sg69
Vn
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'46-pistachios.png'
p596
sg26
F4.0000000000000009
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'29-beans.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vr
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'right'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F1.250045615651743
sg27
F1.5669999999999999
sg69
Vn
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p605
sg26
F5.9999999999999982
sg28
F3
sg58
g62
sg57
Vn
sg80
S'38-maltesers.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vr
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'left'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F1.6664463810823236
sg27
F1.2669999999999999
sg69
Vn
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p614
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'51-mars.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vr
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'right'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F2.7333864945740061
sg27
F1.117
sg69
Vn
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p623
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'19-caramello_redo.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vr
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'right'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F1.2167019997903026
sg27
F0.88400000000000001
sg69
Vn
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p632
sg26
F2.899999999999999
sg28
F4
sg58
g62
sg57
Vn
sg80
S'3-ellas_strawberries_apples.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vr
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'right'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F3.1666627703298218
sg27
F1.6339999999999999
sg69
Vn
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'5-pineapple.png'
p641
sg26
F4.1000000000000014
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'40-sardines.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vr
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'left'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F1.0333701299589393
sg27
F3.2170000000000001
sg69
Vn
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p650
sg26
F4.5000000000000018
sg28
F3
sg58
g62
sg57
Vn
sg80
S'16-skips_prawn.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vr
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'right'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F1.416730908709269
sg27
F3.851
sg69
Vn
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'29-beans.png'
p659
sg26
F4.9000000000000012
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'46-pistachios.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vr
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'left'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F1.9167434530136234
sg27
F1.1839999999999999
sg69
Vn
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p668
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'30-spaghetti_hoops.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vr
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'left'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F1.1171238875483596
sg27
F0.90100000000000002
sg69
Vn
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p677
sg26
F3.2000000000000002
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'13-mccoys_steak_crisps.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vr
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'left'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F0.96677869110430947
sg27
F1.7509999999999999
sg69
Vn
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p686
sg26
F1.4999999999999989
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'18-mms.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vr
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'left'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F1.9335072049921109
sg27
F0.91700000000000004
sg69
Vn
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p695
sg26
F5.0000000000000009
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'36-fig_rolls.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vr
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'left'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F1.450046584984193
sg27
F0.91700000000000004
sg69
Vn
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'51-mars.png'
p704
sg26
F2.899999999999999
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'27-hartleys_raspberries_jelly.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vr
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'left'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F0.88338187598924378
sg27
F1.0509999999999999
sg69
Vn
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p713
sg26
F5.9999999999999982
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'8-liquorice_catherine_wheels.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vr
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'left'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F1.1833803364609139
sg27
F1.2010000000000001
sg69
Vn
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p722
sg26
F2.0999999999999988
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'44-crunch.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vr
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'right'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F3.3337178352635419
sg27
F2.351
sg69
Vn
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'38-maltesers.png'
p731
sg26
F4.5999999999999996
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'6-sour_patch_kids.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vr
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'right'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F0.99980043152390863
sg27
F1.4339999999999999
sg69
Vn
sa(dp738
g63
g64
sg56
Vr
sg29
S'space'
p739
sg57
Vn
sg58
g62
sg30
F263.05935879218896
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp740
g63
g64
sg56
Vr
sg57
Vn
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F16.099819875195408
sg65
g66
sg67
g68
sg69
Vn
sa(dp742
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p743
sg82
S'9-yu_mango_pieces.png'
p744
sg56
Vr
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'9-yu_mango_pieces.png'
p748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S'\x07\xdf\n\x15\x10\x1c6\n\xd5p'
tRp753
sa(dp754
g63
g64
sg81
S'53-cheestrings.png'
p755
sg82
S'53-cheestrings.png'
p756
sg56
Vr
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'47-picnic.png'
p760
sg33
g760
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S'\x07\xdf\n\x15\x10\x1d\x04\x0b\x89 '
tRp764
sa(dp765
g63
g64
sg81
S'11-snickers.png'
p766
sg82
S'54-frubes_yogurt.png'
p767
sg56
Vr
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'54-frubes_yogurt.png'
p771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S'\x07\xdf\n\x15\x10\x1d\x0c\x04\xed\xb8'
tRp775
sa(dp776
g63
g64
sg81
S'52-aero_mousse.png'
p777
sg82
S'52-aero_mousse.png'
p778
sg56
Vr
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p781
I0
sg83
S'14-discos_salt_vinegar.png'
p782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p783
sS'practice_loop.thisIndex'
p784
g59
(g98
S'\x03\x00\x00\x00'
tRp785
sg34
g752
(S'\x07\xdf\n\x15\x10\x1d\x13\r\xcb@'
tRp786
sa(dp787
g63
g64
sg81
S'32-hovis_crackers.png'
p788
sg82
S'24-food_doctor_apple_walnut_bar.png'
p789
sg56
Vr
sS'practice_loop.thisN'
p790
I4
sS'practice_loop.thisTrialN'
p791
I4
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p792
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p793
sg33
g788
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p794
sS'practice_loop.thisIndex'
p795
g59
(g98
S'\x04\x00\x00\x00'
tRp796
sg34
g752
(S'\x07\xdf\n\x15\x10\x1d\x1a\x00\xc78'
tRp797
sa(dp798
g63
g64
sg81
S'15-walnut_whip.png'
p799
sg82
S'28-maple_pecan.png'
p800
sg56
Vr
sS'practice_loop.thisN'
p801
I5
sS'practice_loop.thisTrialN'
p802
I5
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p803
I0
sg83
S'28-maple_pecan.png'
p804
sg33
g799
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p805
sS'practice_loop.thisIndex'
p806
g59
(g98
S'\x05\x00\x00\x00'
tRp807
sg34
g752
(S'\x07\xdf\n\x15\x10\x1d\x1f\r\x81\x08'
tRp808
sa(dp809
g63
g64
sg81
S'12-topic.png'
p810
sg82
S'12-topic.png'
p811
sg56
Vr
sS'practice_loop.thisN'
p812
I6
sS'practice_loop.thisTrialN'
p813
I6
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p814
I0
sg83
S'39-mackerel.png'
p815
sg33
g815
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p816
sS'practice_loop.thisIndex'
p817
g59
(g98
S'\x06\x00\x00\x00'
tRp818
sg34
g752
(S'\x07\xdf\n\x15\x10\x1d&\n{\x98'
tRp819
sa(dp820
g63
g64
sg81
g799
sg82
S'15-walnut_whip.png'
p821
sg56
Vr
sS'practice_loop.thisN'
p822
I7
sS'practice_loop.thisTrialN'
p823
I7
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p824
I0
sg83
g804
sg33
g799
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p825
sS'practice_loop.thisIndex'
p826
g59
(g98
S'\x07\x00\x00\x00'
tRp827
sg34
g752
(S'\x07\xdf\n\x15\x10\x1d.\x04U`'
tRp828
sa(dp829
g63
g64
sg81
g766
sg82
S'11-snickers.png'
p830
sg56
Vr
sS'practice_loop.thisN'
p831
I8
sS'practice_loop.thisTrialN'
p832
I8
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p833
I0
sg83
g771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p834
sS'practice_loop.thisIndex'
p835
g59
(g98
S'\x08\x00\x00\x00'
tRp836
sg34
g752
(S'\x07\xdf\n\x15\x10\x1d4\x06U\x18'
tRp837
sa(dp838
g63
g64
sg81
g743
sg82
S'37-nakd_cashew_cookie.png'
p839
sg56
Vr
sS'practice_loop.thisN'
p840
I9
sS'practice_loop.thisTrialN'
p841
I9
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p842
I0
sg83
g748
sg33
g748
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p843
sS'practice_loop.thisIndex'
p844
g59
(g98
S'\t\x00\x00\x00'
tRp845
sg34
g752
(S'\x07\xdf\n\x15\x10\x1d;\x0b\xdf\x10'
tRp846
sa(dp847
g63
g64
sg81
g810
sg82
S'39-mackerel.png'
p848
sg56
Vr
sS'practice_loop.thisN'
p849
I10
sS'practice_loop.thisTrialN'
p850
I10
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p851
I0
sg83
g815
sg33
g810
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p852
sS'practice_loop.thisIndex'
p853
g59
(g98
S'\n\x00\x00\x00'
tRp854
sg34
g752
(S'\x07\xdf\n\x15\x10\x1e\x06\x0eP\x10'
tRp855
sa(dp856
g63
g64
sg81
g755
sg82
S'47-picnic.png'
p857
sg56
Vr
sS'practice_loop.thisN'
p858
I11
sS'practice_loop.thisTrialN'
p859
I11
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p860
I0
sg83
g760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\n\x15\x10\x1e\x10\x0b7\x18'
tRp864
sa(dp865
g63
g64
sg81
g788
sg82
S'32-hovis_crackers.png'
p866
sg56
Vr
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g793
sg33
g793
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\n\x15\x10\x1e\x17\x0cwh'
tRp873
sa(dp874
g63
g64
sg81
g777
sg82
S'14-discos_salt_vinegar.png'
p875
sg56
Vr
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\n\x15\x10\x1e\x1e\x03\xf7\xa0'
tRp882
sa(dp883
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F116.28066398142528
sg65
g66
sg67
g68
sg69
Vn
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vr
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vn
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'45-chewy_nougat_redo.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'left'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'41-peanuts_redo.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'41-peanuts_redo.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p907
I0
sS'img_wrong'
p908
S'45-chewy_nougat_redo.png'
p909
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vn
sS'block_loop.thisTrialN'
p911
I0
sg39
F1.0835040118965935
sg34
g752
(S'\x07\xdf\n\x15\x10 (\t^p'
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'42-mrkipling_lemon_slices.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'right'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'16-skips_prawn.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'16-skips_prawn.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p925
I0
sg908
S'42-mrkipling_lemon_slices.png'
p926
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vn
sS'block_loop.thisTrialN'
p928
I0
sg39
F1.0833665947461668
sg34
g752
(S'\x07\xdf\n\x15\x10 .\x0b\x1f\xa8'
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'17-jacobs_mini_cheddars_redo.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'left'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
S'17-jacobs_mini_cheddars_redo.png'
p936
sg63
g64
sS'trial_loop.thisIndex'
p937
g59
(g98
S'\x02\x00\x00\x00'
tRp938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p939
I0
sg903
S'8-liquorice_catherine_wheels.png'
p940
sS'block_loop.thisRepN'
p941
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p942
I0
sg908
S'8-liquorice_catherine_wheels.png'
p943
sg55
g11
sS'block_loop.thisTrial'
p944
Nsg69
Vn
sS'block_loop.thisTrialN'
p945
I0
sg39
F1.1168379344319419
sg34
g752
(S'\x07\xdf\n\x15\x10 4\x0c\xe0\xe0'
tRp946
sa(dp947
S'trial_loop.thisTrialN'
p948
I3
sg894
S'46-pistachios.png'
p949
sS'block_loop.thisIndex'
p950
g888
sg38
S'right'
p951
sg58
g62
sS'trial_loop.thisN'
p952
I3
sg33
S'29-beans.png'
p953
sg63
g64
sS'trial_loop.thisIndex'
p954
g59
(g98
S'\x03\x00\x00\x00'
tRp955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p956
I0
sg903
S'29-beans.png'
p957
sS'block_loop.thisRepN'
p958
I0
sg906
S'46-pistachios.png'
p959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p960
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p961
Nsg69
Vn
sS'block_loop.thisTrialN'
p962
I0
sg39
F1.1835228853724402
sg34
g752
(S'\x07\xdf\n\x15\x10 :\x0f\x1f\x18'
tRp963
sa(dp964
S'trial_loop.thisTrialN'
p965
I4
sg894
S'22-daim.png'
p966
sS'block_loop.thisIndex'
p967
g888
sg38
S'left'
p968
sg58
g62
sS'trial_loop.thisN'
p969
I4
sg33
S'22-daim.png'
p970
sg63
g64
sS'trial_loop.thisIndex'
p971
g59
(g98
S'\x04\x00\x00\x00'
tRp972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p973
I0
sg903
S'7-olives.png'
p974
sS'block_loop.thisRepN'
p975
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p976
I0
sg908
S'7-olives.png'
p977
sg55
g11
sS'block_loop.thisTrial'
p978
Nsg69
Vn
sS'block_loop.thisTrialN'
p979
I0
sg39
F1.2168707777009331
sg34
g752
(S'\x07\xdf\n\x15\x10!\x05\x03G\xd8'
tRp980
sa(dp981
S'trial_loop.thisTrialN'
p982
I5
sg894
S'29-beans.png'
p983
sS'block_loop.thisIndex'
p984
g888
sg38
S'left'
p985
sg58
g62
sS'trial_loop.thisN'
p986
I5
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p987
g59
(g98
S'\x05\x00\x00\x00'
tRp988
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p989
I0
sg903
S'46-pistachios.png'
p990
sS'block_loop.thisRepN'
p991
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p992
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p993
Nsg69
Vn
sS'block_loop.thisTrialN'
p994
I0
sg39
F0.93352003439395048
sg34
g752
(S'\x07\xdf\n\x15\x10!\x0b\x06\xf1X'
tRp995
sa(dp996
S'trial_loop.thisTrialN'
p997
I6
sg894
S'18-mms.png'
p998
sS'block_loop.thisIndex'
p999
g888
sg38
S'right'
p1000
sg58
g62
sS'trial_loop.thisN'
p1001
I6
sg33
S'43-mrporky_pork_crackles_redo.png'
p1002
sg63
g64
sS'trial_loop.thisIndex'
p1003
g59
(g98
S'\x06\x00\x00\x00'
tRp1004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1005
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p1006
sS'block_loop.thisRepN'
p1007
I0
sg906
S'18-mms.png'
p1008
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1009
I0
sg908
g1002
sg55
g11
sS'block_loop.thisTrial'
p1010
Nsg69
Vn
sS'block_loop.thisTrialN'
p1011
I0
sg39
F1.6001830898217122
sg34
g752
(S'\x07\xdf\n\x15\x10!\x11\x06\x8f\xb0'
tRp1012
sa(dp1013
S'trial_loop.thisTrialN'
p1014
I7
sg894
S'35-raisins.png'
p1015
sS'block_loop.thisIndex'
p1016
g888
sg38
S'left'
p1017
sg58
g62
sS'trial_loop.thisN'
p1018
I7
sg33
S'49-yorkie.png'
p1019
sg63
g64
sS'trial_loop.thisIndex'
p1020
g59
(g98
S'\x07\x00\x00\x00'
tRp1021
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1022
I0
sg903
S'49-yorkie.png'
p1023
sS'block_loop.thisRepN'
p1024
I0
sg906
g1019
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1025
I0
sg908
S'35-raisins.png'
p1026
sg55
g11
sS'block_loop.thisTrial'
p1027
Nsg69
Vn
sS'block_loop.thisTrialN'
p1028
I0
sg39
F1.0501398689921189
sg34
g752
(S'\x07\xdf\n\x15\x10!\x18\x00\xea`'
tRp1029
sa(dp1030
S'trial_loop.thisTrialN'
p1031
I8
sg894
S'7-olives.png'
p1032
sS'block_loop.thisIndex'
p1033
g888
sg38
S'right'
p1034
sg58
g62
sS'trial_loop.thisN'
p1035
I8
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p1036
g59
(g98
S'\x08\x00\x00\x00'
tRp1037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1038
I0
sg903
S'22-daim.png'
p1039
sS'block_loop.thisRepN'
p1040
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1041
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1042
Nsg69
Vn
sS'block_loop.thisTrialN'
p1043
I0
sg39
F1.0168452899556542
sg34
g752
(S'\x07\xdf\n\x15\x10!\x1e\x022\x80'
tRp1044
sa(dp1045
S'trial_loop.thisTrialN'
p1046
I9
sg894
S'44-crunch.png'
p1047
sS'block_loop.thisIndex'
p1048
g888
sg38
S'left'
p1049
sg58
g62
sS'trial_loop.thisN'
p1050
I9
sg33
S'44-crunch.png'
p1051
sg63
g64
sS'trial_loop.thisIndex'
p1052
g59
(g98
S'\t\x00\x00\x00'
tRp1053
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1054
I0
sg903
S'26-walkers_smoky_bacon.png'
p1055
sS'block_loop.thisRepN'
p1056
I0
sg906
S'26-walkers_smoky_bacon.png'
p1057
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1058
I0
sg908
g1051
sg55
g11
sS'block_loop.thisTrial'
p1059
Nsg69
Vn
sS'block_loop.thisTrialN'
p1060
I0
sg39
F1.2501873092692222
sg34
g752
(S'\x07\xdf\n\x15\x10!$\x03\x01\x88'
tRp1061
sa(dp1062
S'trial_loop.thisTrialN'
p1063
I10
sg894
S'41-peanuts_redo.png'
p1064
sS'block_loop.thisIndex'
p1065
g888
sg38
S'left'
p1066
sg58
g62
sS'trial_loop.thisN'
p1067
I10
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1068
g59
(g98
S'\n\x00\x00\x00'
tRp1069
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1070
I0
sg903
S'45-chewy_nougat_redo.png'
p1071
sS'block_loop.thisRepN'
p1072
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1073
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1074
Nsg69
Vn
sS'block_loop.thisTrialN'
p1075
I0
sg39
F2.0501193419486299
sg34
g752
(S'\x07\xdf\n\x15\x10!*\x07b\xa0'
tRp1076
sa(dp1077
S'trial_loop.thisTrialN'
p1078
I11
sg894
S'3-ellas_strawberries_apples.png'
p1079
sS'block_loop.thisIndex'
p1080
g888
sg38
S'left'
p1081
sg58
g62
sS'trial_loop.thisN'
p1082
I11
sg33
S'13-mccoys_steak_crisps.png'
p1083
sg63
g64
sS'trial_loop.thisIndex'
p1084
g59
(g98
S'\x0b\x00\x00\x00'
tRp1085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1086
I0
sg903
S'13-mccoys_steak_crisps.png'
p1087
sS'block_loop.thisRepN'
p1088
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1089
I0
sg908
S'3-ellas_strawberries_apples.png'
p1090
sg55
g11
sS'block_loop.thisTrial'
p1091
Nsg69
Vn
sS'block_loop.thisTrialN'
p1092
I0
sg39
F0.98351564388758561
sg34
g752
(S'\x07\xdf\n\x15\x10!1\x08\xa2\xf0'
tRp1093
sa(dp1094
S'trial_loop.thisTrialN'
p1095
I12
sg894
S'4-corn.png'
p1096
sS'block_loop.thisIndex'
p1097
g888
sg38
S'right'
p1098
sg58
g62
sS'trial_loop.thisN'
p1099
I12
sg33
S'10-bounty_redo.png'
p1100
sg63
g64
sS'trial_loop.thisIndex'
p1101
g59
(g98
S'\x0c\x00\x00\x00'
tRp1102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1103
I0
sg903
S'10-bounty_redo.png'
p1104
sS'block_loop.thisRepN'
p1105
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1106
I0
sg908
S'4-corn.png'
p1107
sg55
g11
sS'block_loop.thisTrial'
p1108
Nsg69
Vn
sS'block_loop.thisTrialN'
p1109
I0
sg39
F0.91684950940361887
sg34
g752
(S'\x07\xdf\n\x15\x10!7\x08\xba`'
tRp1110
sa(dp1111
S'trial_loop.thisTrialN'
p1112
I13
sg894
g998
sS'block_loop.thisIndex'
p1113
g888
sg38
S'left'
p1114
sg58
g62
sS'trial_loop.thisN'
p1115
I13
sg33
g1008
sg63
g64
sS'trial_loop.thisIndex'
p1116
g59
(g98
S'\r\x00\x00\x00'
tRp1117
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1118
I0
sg903
g1006
sS'block_loop.thisRepN'
p1119
I0
sg906
g1008
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1120
I0
sg908
g1002
sg55
g11
sS'block_loop.thisTrial'
p1121
Nsg69
Vn
sS'block_loop.thisTrialN'
p1122
I0
sg39
F1.4335588076983186
sg34
g752
(S'\x07\xdf\n\x15\x10"\x01\x08\x1a8'
tRp1123
sa(dp1124
S'trial_loop.thisTrialN'
p1125
I14
sg894
S'1-treacle_cookies.png'
p1126
sS'block_loop.thisIndex'
p1127
g888
sg38
S'left'
p1128
sg58
g62
sS'trial_loop.thisN'
p1129
I14
sg33
S'1-treacle_cookies.png'
p1130
sg63
g64
sS'trial_loop.thisIndex'
p1131
g59
(g98
S'\x0e\x00\x00\x00'
tRp1132
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1133
I0
sg903
S'21-nakd_banana_crunch.png'
p1134
sS'block_loop.thisRepN'
p1135
I0
sg906
g1130
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1136
I0
sg908
S'21-nakd_banana_crunch.png'
p1137
sg55
g11
sS'block_loop.thisTrial'
p1138
Nsg69
Vn
sS'block_loop.thisTrialN'
p1139
I0
sg39
F0.96720662293637361
sg34
g752
(S'\x07\xdf\n\x15\x10"\x07\x0f\x1b0'
tRp1140
sa(dp1141
S'trial_loop.thisTrialN'
p1142
I15
sg894
S'38-maltesers.png'
p1143
sS'block_loop.thisIndex'
p1144
g888
sg38
S'right'
p1145
sg58
g62
sS'trial_loop.thisN'
p1146
I15
sg33
S'6-sour_patch_kids.png'
p1147
sg63
g64
sS'trial_loop.thisIndex'
p1148
g59
(g98
S'\x0f\x00\x00\x00'
tRp1149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1150
I0
sg903
S'6-sour_patch_kids.png'
p1151
sS'block_loop.thisRepN'
p1152
I0
sg906
S'38-maltesers.png'
p1153
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1154
I0
sg908
g1147
sg55
g11
sS'block_loop.thisTrial'
p1155
Nsg69
Vn
sS'block_loop.thisTrialN'
p1156
I0
sg39
F0.88325358196880188
sg34
g752
(S'\x07\xdf\n\x15\x10"\r\x0f2\xa0'
tRp1157
sa(dp1158
S'trial_loop.thisTrialN'
p1159
I16
sg894
g895
sS'block_loop.thisIndex'
p1160
g888
sg38
S'right'
p1161
sg58
g62
sS'trial_loop.thisN'
p1162
I16
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1163
g59
(g98
S'\x10\x00\x00\x00'
tRp1164
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1165
I0
sg903
g904
sS'block_loop.thisRepN'
p1166
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1167
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1168
Nsg69
Vn
sS'block_loop.thisTrialN'
p1169
I0
sg39
F1.1001326275072643
sg34
g752
(S'\x07\xdf\n\x15\x10"\x13\r\xda\xe0'
tRp1170
sa(dp1171
S'trial_loop.thisTrialN'
p1172
I17
sg894
S'48-twix.png'
p1173
sS'block_loop.thisIndex'
p1174
g888
sg38
S'left'
p1175
sg58
g62
sS'trial_loop.thisN'
p1176
I17
sg33
S'48-twix.png'
p1177
sg63
g64
sS'trial_loop.thisIndex'
p1178
g59
(g98
S'\x11\x00\x00\x00'
tRp1179
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1180
I0
sg903
S'50-polo.png'
p1181
sS'block_loop.thisRepN'
p1182
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1183
I0
sg908
S'50-polo.png'
p1184
sg55
g11
sS'block_loop.thisTrial'
p1185
Nsg69
Vn
sS'block_loop.thisTrialN'
p1186
I0
sg39
F1.1501479087505686
sg34
g752
(S'\x07\xdf\n\x15\x10"\x1a\x00\x98X'
tRp1187
sa(dp1188
S'trial_loop.thisTrialN'
p1189
I18
sg894
S'43-mrporky_pork_crackles_redo.png'
p1190
sS'block_loop.thisIndex'
p1191
g888
sg38
S'right'
p1192
sg58
g62
sS'trial_loop.thisN'
p1193
I18
sg33
g1008
sg63
g64
sS'trial_loop.thisIndex'
p1194
g59
(g98
S'\x12\x00\x00\x00'
tRp1195
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1196
I0
sg903
S'18-mms.png'
p1197
sS'block_loop.thisRepN'
p1198
I0
sg906
g1008
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1199
I0
sg908
g1002
sg55
g11
sS'block_loop.thisTrial'
p1200
Nsg69
Vn
sS'block_loop.thisTrialN'
p1201
I0
sg39
F1.0668101088845106
sg34
g752
(S'\x07\xdf\n\x15\x10" \x03\x8a@'
tRp1202
sa(dp1203
S'trial_loop.thisTrialN'
p1204
I19
sg894
S'27-hartleys_raspberries_jelly.png'
p1205
sS'block_loop.thisIndex'
p1206
g888
sg38
S'right'
p1207
sg58
g62
sS'trial_loop.thisN'
p1208
I19
sg33
S'51-mars.png'
p1209
sg63
g64
sS'trial_loop.thisIndex'
p1210
g59
(g98
S'\x13\x00\x00\x00'
tRp1211
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1212
I0
sg903
S'51-mars.png'
p1213
sS'block_loop.thisRepN'
p1214
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1215
I0
sg908
S'27-hartleys_raspberries_jelly.png'
p1216
sg55
g11
sS'block_loop.thisTrial'
p1217
Nsg69
Vn
sS'block_loop.thisTrialN'
p1218
I0
sg39
F1.2004842101423492
sg34
g752
(S'\x07\xdf\n\x15\x10"&\x05\x10\xe0'
tRp1219
sa(dp1220
S'trial_loop.thisTrialN'
p1221
I20
sg894
g949
sS'block_loop.thisIndex'
p1222
g888
sg38
S'right'
p1223
sg58
g62
sS'trial_loop.thisN'
p1224
I20
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p1225
g59
(g98
S'\x14\x00\x00\x00'
tRp1226
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1227
I0
sg903
g957
sS'block_loop.thisRepN'
p1228
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1229
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p1230
Nsg69
Vn
sS'block_loop.thisTrialN'
p1231
I0
sg39
F1.066752804222233
sg34
g752
(S'\x07\xdf\n\x15\x10",\x08{\xe0'
tRp1232
sa(dp1233
S'trial_loop.thisTrialN'
p1234
I21
sg894
S'36-fig_rolls.png'
p1235
sS'block_loop.thisIndex'
p1236
g888
sg38
S'right'
p1237
sg58
g62
sS'trial_loop.thisN'
p1238
I21
sg33
S'36-fig_rolls.png'
p1239
sg63
g64
sS'trial_loop.thisIndex'
p1240
g59
(g98
S'\x15\x00\x00\x00'
tRp1241
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1242
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p1243
sS'block_loop.thisRepN'
p1244
I0
sg906
S'34-hula_hoops_bbq_beef_redo.png'
p1245
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1246
I0
sg908
g1239
sg55
g11
sS'block_loop.thisTrial'
p1247
Nsg69
Vn
sS'block_loop.thisTrialN'
p1248
I0
sg39
F1.266848711129569
sg34
g752
(S'\x07\xdf\n\x15\x10"2\n\x02\x80'
tRp1249
sa(dp1250
S'trial_loop.thisTrialN'
p1251
I22
sg894
g1173
sS'block_loop.thisIndex'
p1252
g888
sg38
S'left'
p1253
sg58
g62
sS'trial_loop.thisN'
p1254
I22
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p1255
g59
(g98
S'\x16\x00\x00\x00'
tRp1256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1257
I0
sg903
g1181
sS'block_loop.thisRepN'
p1258
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1259
I0
sg908
g1184
sg55
g11
sS'block_loop.thisTrial'
p1260
Nsg69
Vn
sS'block_loop.thisTrialN'
p1261
I0
sg39
F0.95020481427627601
sg34
g752
(S'\x07\xdf\n\x15\x10"8\x0e\x9e0'
tRp1262
sa(dp1263
S'trial_loop.thisTrialN'
p1264
I23
sg894
g932
sS'block_loop.thisIndex'
p1265
g888
sg38
S'left'
p1266
sg58
g62
sS'trial_loop.thisN'
p1267
I23
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1268
g59
(g98
S'\x17\x00\x00\x00'
tRp1269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1270
I0
sg903
g940
sS'block_loop.thisRepN'
p1271
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1272
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1273
Nsg69
Vn
sS'block_loop.thisTrialN'
p1274
I0
sg39
F1.0668149555476703
sg34
g752
(S'\x07\xdf\n\x15\x10#\x02\x0e{\x08'
tRp1275
sa(dp1276
S'trial_loop.thisTrialN'
p1277
I24
sg894
g1047
sS'block_loop.thisIndex'
p1278
g888
sg38
S'left'
p1279
sg58
g62
sS'trial_loop.thisN'
p1280
I24
sg33
g1057
sg63
g64
sS'trial_loop.thisIndex'
p1281
g59
(g98
S'\x18\x00\x00\x00'
tRp1282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1283
I0
sg903
g1055
sS'block_loop.thisRepN'
p1284
I0
sg906
g1057
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1285
I0
sg908
g1051
sg55
g11
sS'block_loop.thisTrial'
p1286
Nsg69
Vn
sS'block_loop.thisTrialN'
p1287
I0
sg39
F0.93388838078089975
sg34
g752
(S'\x07\xdf\n\x15\x10#\t\x00\xbb\x80'
tRp1288
sa(dp1289
S'trial_loop.thisTrialN'
p1290
I25
sg894
S'30-spaghetti_hoops.png'
p1291
sS'block_loop.thisIndex'
p1292
g888
sg38
S'right'
p1293
sg58
g62
sS'trial_loop.thisN'
p1294
I25
sg33
S'19-caramello_redo.png'
p1295
sg63
g64
sS'trial_loop.thisIndex'
p1296
g59
(g98
S'\x19\x00\x00\x00'
tRp1297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1298
I0
sg903
S'19-caramello_redo.png'
p1299
sS'block_loop.thisRepN'
p1300
I0
sg906
g1295
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1301
I0
sg908
S'30-spaghetti_hoops.png'
p1302
sg55
g11
sS'block_loop.thisTrial'
p1303
Nsg69
Vn
sS'block_loop.thisTrialN'
p1304
I0
sg39
F1.1334833708137921
sg34
g752
(S'\x07\xdf\n\x15\x10#\x0f\x00\x1f@'
tRp1305
sa(dp1306
S'trial_loop.thisTrialN'
p1307
I26
sg894
S'21-nakd_banana_crunch.png'
p1308
sS'block_loop.thisIndex'
p1309
g888
sg38
S'right'
p1310
sg58
g62
sS'trial_loop.thisN'
p1311
I26
sg33
g1130
sg63
g64
sS'trial_loop.thisIndex'
p1312
g59
(g98
S'\x1a\x00\x00\x00'
tRp1313
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1314
I0
sg903
S'1-treacle_cookies.png'
p1315
sS'block_loop.thisRepN'
p1316
I0
sg906
g1130
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1317
I0
sg908
g1137
sg55
g11
sS'block_loop.thisTrial'
p1318
Nsg69
Vn
sS'block_loop.thisTrialN'
p1319
I0
sg39
F1.1168473426605487
sg34
g752
(S'\x07\xdf\n\x15\x10#\x15\x02\xd2\xa8'
tRp1320
sa(dp1321
S'trial_loop.thisTrialN'
p1322
I27
sg894
g1096
sS'block_loop.thisIndex'
p1323
g888
sg38
S'left'
p1324
sg58
g62
sS'trial_loop.thisN'
p1325
I27
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p1326
g59
(g98
S'\x1b\x00\x00\x00'
tRp1327
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1328
I0
sg903
g1104
sS'block_loop.thisRepN'
p1329
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1330
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p1331
Nsg69
Vn
sS'block_loop.thisTrialN'
p1332
I0
sg39
F1.5501983140457014
sg34
g752
(S'\x07\xdf\n\x15\x10#\x1b\x05\x10\xe0'
tRp1333
sa(dp1334
S'trial_loop.thisTrialN'
p1335
I28
sg894
g1079
sS'block_loop.thisIndex'
p1336
g888
sg38
S'right'
p1337
sg58
g62
sS'trial_loop.thisN'
p1338
I28
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p1339
g59
(g98
S'\x1c\x00\x00\x00'
tRp1340
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1341
I0
sg903
g1087
sS'block_loop.thisRepN'
p1342
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1343
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p1344
Nsg69
Vn
sS'block_loop.thisTrialN'
p1345
I0
sg39
F1.3168434653298391
sg34
g752
(S'\x07\xdf\n\x15\x10#!\r\xf68'
tRp1346
sa(dp1347
S'trial_loop.thisTrialN'
p1348
I29
sg894
g1015
sS'block_loop.thisIndex'
p1349
g888
sg38
S'right'
p1350
sg58
g62
sS'trial_loop.thisN'
p1351
I29
sg33
g1026
sg63
g64
sS'trial_loop.thisIndex'
p1352
g59
(g98
S'\x1d\x00\x00\x00'
tRp1353
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1354
I0
sg903
g1023
sS'block_loop.thisRepN'
p1355
I0
sg906
g1019
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1356
I0
sg908
g1026
sg55
g11
sS'block_loop.thisTrial'
p1357
Nsg69
Vn
sS'block_loop.thisTrialN'
p1358
I0
sg39
F1.1502280212384903
sg34
g752
(S'\x07\xdf\n\x15\x10#(\x04\x07@'
tRp1359
sa(dp1360
S'trial_loop.thisTrialN'
p1361
I30
sg894
g998
sS'block_loop.thisIndex'
p1362
g888
sg38
S'left'
p1363
sg58
g62
sS'trial_loop.thisN'
p1364
I30
sg33
g1008
sg63
g64
sS'trial_loop.thisIndex'
p1365
g59
(g98
S'\x1e\x00\x00\x00'
tRp1366
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1367
I0
sg903
g1006
sS'block_loop.thisRepN'
p1368
I0
sg906
g1008
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1369
I0
sg908
g1002
sg55
g11
sS'block_loop.thisTrial'
p1370
Nsg69
Vn
sS'block_loop.thisTrialN'
p1371
I0
sg39
F0.86685817637771834
sg34
g752
(S'\x07\xdf\n\x15\x10#.\x06\xbe\x90'
tRp1372
sa(dp1373
S'trial_loop.thisTrialN'
p1374
I31
sg894
S'26-walkers_smoky_bacon.png'
p1375
sS'block_loop.thisIndex'
p1376
g888
sg38
S'left'
p1377
sg58
g62
sS'trial_loop.thisN'
p1378
I31
sg33
g1057
sg63
g64
sS'trial_loop.thisIndex'
p1379
g59
(g98
S'\x1f\x00\x00\x00'
tRp1380
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1381
I0
sg903
S'44-crunch.png'
p1382
sS'block_loop.thisRepN'
p1383
I0
sg906
g1057
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1384
I0
sg908
g1051
sg55
g11
sS'block_loop.thisTrial'
p1385
Nsg69
Vn
sS'block_loop.thisTrialN'
p1386
I0
sg39
F2.9000754939033868
sg34
g752
(S'\x07\xdf\n\x15\x10#4\x05(P'
tRp1387
sa(dp1388
S'trial_loop.thisTrialN'
p1389
I32
sg894
S'16-skips_prawn.png'
p1390
sS'block_loop.thisIndex'
p1391
g888
sg38
S'left'
p1392
sg58
g62
sS'trial_loop.thisN'
p1393
I32
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1394
g59
(g98
S' \x00\x00\x00'
tRp1395
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1396
I0
sg903
S'42-mrkipling_lemon_slices.png'
p1397
sS'block_loop.thisRepN'
p1398
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1399
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1400
Nsg69
Vn
sS'block_loop.thisTrialN'
p1401
I0
sg39
F1.1000961349859608
sg34
g752
(S'\x07\xdf\n\x15\x10$\x00\x04A\xd8'
tRp1402
sa(dp1403
S'trial_loop.thisTrialN'
p1404
I33
sg894
g998
sS'block_loop.thisIndex'
p1405
g888
sg38
S'left'
p1406
sg58
g62
sS'trial_loop.thisN'
p1407
I33
sg33
g1008
sg63
g64
sS'trial_loop.thisIndex'
p1408
g59
(g98
S'!\x00\x00\x00'
tRp1409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1410
I0
sg903
g1006
sS'block_loop.thisRepN'
p1411
I0
sg906
g1008
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1412
I0
sg908
g1002
sg55
g11
sS'block_loop.thisTrial'
p1413
Nsg69
Vn
sS'block_loop.thisTrialN'
p1414
I0
sg39
F0.88352670568337999
sg34
g752
(S'\x07\xdf\n\x15\x10$\x06\x06A\x90'
tRp1415
sa(dp1416
S'trial_loop.thisTrialN'
p1417
I34
sg894
g1047
sS'block_loop.thisIndex'
p1418
g888
sg38
S'right'
p1419
sg58
g62
sS'trial_loop.thisN'
p1420
I34
sg33
g1057
sg63
g64
sS'trial_loop.thisIndex'
p1421
g59
(g98
S'"\x00\x00\x00'
tRp1422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1423
I0
sg903
g1055
sS'block_loop.thisRepN'
p1424
I0
sg906
g1057
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1425
I0
sg908
g1051
sg55
g11
sS'block_loop.thisTrial'
p1426
Nsg69
Vn
sS'block_loop.thisTrialN'
p1427
I0
sg39
F1.5502034458063463
sg34
g752
(S'\x07\xdf\n\x15\x10$\x0c\x04\xe9\xd0'
tRp1428
sa(dp1429
S'trial_loop.thisTrialN'
p1430
I35
sg894
g1235
sS'block_loop.thisIndex'
p1431
g888
sg38
S'left'
p1432
sg58
g62
sS'trial_loop.thisN'
p1433
I35
sg33
g1245
sg63
g64
sS'trial_loop.thisIndex'
p1434
g59
(g98
S'#\x00\x00\x00'
tRp1435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1436
I0
sg903
g1243
sS'block_loop.thisRepN'
p1437
I0
sg906
g1245
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1438
I0
sg908
g1239
sg55
g11
sS'block_loop.thisTrial'
p1439
Nsg69
Vn
sS'block_loop.thisTrialN'
p1440
I0
sg39
F0.96684739967986388
sg34
g752
(S'\x07\xdf\n\x15\x10$\x12\r\xcf('
tRp1441
sa(dp1442
S'trial_loop.thisTrialN'
p1443
I36
sg894
S'5-pineapple.png'
p1444
sS'block_loop.thisIndex'
p1445
g888
sg38
S'left'
p1446
sg58
g62
sS'trial_loop.thisN'
p1447
I36
sg33
S'40-sardines.png'
p1448
sg63
g64
sS'trial_loop.thisIndex'
p1449
g59
(g98
S'$\x00\x00\x00'
tRp1450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1451
I0
sg903
S'40-sardines.png'
p1452
sS'block_loop.thisRepN'
p1453
I0
sg906
g1448
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1454
I0
sg908
S'5-pineapple.png'
p1455
sg55
g11
sS'block_loop.thisTrial'
p1456
Nsg69
Vn
sS'block_loop.thisTrialN'
p1457
I0
sg39
F1.9168418117624242
sg34
g752
(S'\x07\xdf\n\x15\x10$\x18\r\xe6\x98'
tRp1458
sa(dp1459
S'trial_loop.thisTrialN'
p1460
I37
sg894
S'23-crunchie_redo.png'
p1461
sS'block_loop.thisIndex'
p1462
g888
sg38
S'left'
p1463
sg58
g62
sS'trial_loop.thisN'
p1464
I37
sg33
S'23-crunchie_redo.png'
p1465
sg63
g64
sS'trial_loop.thisIndex'
p1466
g59
(g98
S'%\x00\x00\x00'
tRp1467
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1468
I0
sg903
S'33-ambrosia_rice.png'
p1469
sS'block_loop.thisRepN'
p1470
I0
sg906
g1465
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1471
I0
sg908
S'33-ambrosia_rice.png'
p1472
sg55
g11
sS'block_loop.thisTrial'
p1473
Nsg69
Vn
sS'block_loop.thisTrialN'
p1474
I0
sg39
F0.96685509732105857
sg34
g752
(S'\x07\xdf\n\x15\x10$\x1f\rB\x88'
tRp1475
sa(dp1476
S'trial_loop.thisTrialN'
p1477
I38
sg894
g915
sS'block_loop.thisIndex'
p1478
g888
sg38
S'right'
p1479
sg58
g62
sS'trial_loop.thisN'
p1480
I38
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1481
g59
(g98
S'&\x00\x00\x00'
tRp1482
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1483
I0
sg903
g923
sS'block_loop.thisRepN'
p1484
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1485
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1486
Nsg69
Vn
sS'block_loop.thisTrialN'
p1487
I0
sg39
F1.2833923675889309
sg34
g752
(S'\x07\xdf\n\x15\x10$%\r\x1bx'
tRp1488
sa(dp1489
S'trial_loop.thisTrialN'
p1490
I39
sg894
g1143
sS'block_loop.thisIndex'
p1491
g888
sg38
S'right'
p1492
sg58
g62
sS'trial_loop.thisN'
p1493
I39
sg33
g1153
sg63
g64
sS'trial_loop.thisIndex'
p1494
g59
(g98
S"'\x00\x00\x00"
tRp1495
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1496
I0
sg903
g1151
sS'block_loop.thisRepN'
p1497
I0
sg906
g1153
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1498
I0
sg908
g1147
sg55
g11
sS'block_loop.thisTrial'
p1499
Nsg69
Vn
sS'block_loop.thisTrialN'
p1500
I0
sg39
F1.3665870483478102
sg34
g752
(S'\x07\xdf\n\x15\x10$,\x02\xb3h'
tRp1501
sa(dp1502
S'trial_loop.thisTrialN'
p1503
I40
sg894
g1291
sS'block_loop.thisIndex'
p1504
g888
sg38
S'right'
p1505
sg58
g62
sS'trial_loop.thisN'
p1506
I40
sg33
g1295
sg63
g64
sS'trial_loop.thisIndex'
p1507
g59
(g98
S'(\x00\x00\x00'
tRp1508
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1509
I0
sg903
g1299
sS'block_loop.thisRepN'
p1510
I0
sg906
g1295
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1511
I0
sg908
g1302
sg55
g11
sS'block_loop.thisTrial'
p1512
Nsg69
Vn
sS'block_loop.thisTrialN'
p1513
I0
sg39
F1.2834220177628595
sg34
g752
(S'\x07\xdf\n\x15\x10$2\x08\xbeH'
tRp1514
sa(dp1515
S'trial_loop.thisTrialN'
p1516
I41
sg894
S'49-yorkie.png'
p1517
sS'block_loop.thisIndex'
p1518
g888
sg38
S'right'
p1519
sg58
g62
sS'trial_loop.thisN'
p1520
I41
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p1521
g59
(g98
S')\x00\x00\x00'
tRp1522
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1523
I0
sg903
S'35-raisins.png'
p1524
sS'block_loop.thisRepN'
p1525
I0
sg906
g1019
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1526
I0
sg908
g1026
sg55
g11
sS'block_loop.thisTrial'
p1527
Nsg69
Vn
sS'block_loop.thisTrialN'
p1528
I0
sg39
F1.3168580053188634
sg34
g752
(S'\x07\xdf\n\x15\x10$8\r\x98x'
tRp1529
sa(dp1530
S'trial_loop.thisTrialN'
p1531
I42
sg894
g1096
sS'block_loop.thisIndex'
p1532
g888
sg38
S'right'
p1533
sg58
g62
sS'trial_loop.thisN'
p1534
I42
sg33
g1107
sg63
g64
sS'trial_loop.thisIndex'
p1535
g59
(g98
S'*\x00\x00\x00'
tRp1536
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1537
I0
sg903
g1104
sS'block_loop.thisRepN'
p1538
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1539
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p1540
Nsg69
Vn
sS'block_loop.thisTrialN'
p1541
I0
sg39
F1.0335155298489553
sg34
g752
(S'\x07\xdf\n\x15\x10%\x03\x03\xadh'
tRp1542
sa(dp1543
S'trial_loop.thisTrialN'
p1544
I43
sg894
S'50-polo.png'
p1545
sS'block_loop.thisIndex'
p1546
g888
sg38
S'right'
p1547
sg58
g62
sS'trial_loop.thisN'
p1548
I43
sg33
g1184
sg63
g64
sS'trial_loop.thisIndex'
p1549
g59
(g98
S'+\x00\x00\x00'
tRp1550
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1551
I0
sg903
S'48-twix.png'
p1552
sS'block_loop.thisRepN'
p1553
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1554
I0
sg908
g1184
sg55
g11
sS'block_loop.thisTrial'
p1555
Nsg69
Vn
sS'block_loop.thisTrialN'
p1556
I0
sg39
F1.2002076652538562
sg34
g752
(S'\x07\xdf\n\x15\x10%\t\x04\xb7\x08'
tRp1557
sa(dp1558
S'trial_loop.thisTrialN'
p1559
I44
sg894
g1190
sS'block_loop.thisIndex'
p1560
g888
sg38
S'right'
p1561
sg58
g62
sS'trial_loop.thisN'
p1562
I44
sg33
g1008
sg63
g64
sS'trial_loop.thisIndex'
p1563
g59
(g98
S',\x00\x00\x00'
tRp1564
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1565
I0
sg903
g1197
sS'block_loop.thisRepN'
p1566
I0
sg906
g1008
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1567
I0
sg908
g1002
sg55
g11
sS'block_loop.thisTrial'
p1568
Nsg69
Vn
sS'block_loop.thisTrialN'
p1569
I0
sg39
F0.71722429900137286
sg34
g752
(S'\x07\xdf\n\x15\x10%\x0f\x08`\x88'
tRp1570
sa(dp1571
S'trial_loop.thisTrialN'
p1572
I45
sg894
g983
sS'block_loop.thisIndex'
p1573
g888
sg38
S'left'
p1574
sg58
g62
sS'trial_loop.thisN'
p1575
I45
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p1576
g59
(g98
S'-\x00\x00\x00'
tRp1577
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1578
I0
sg903
g990
sS'block_loop.thisRepN'
p1579
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1580
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p1581
Nsg69
Vn
sS'block_loop.thisTrialN'
p1582
I0
sg39
F1.8167547999069029
sg34
g752
(S'\x07\xdf\n\x15\x10%\x15\x04l\xd0'
tRp1583
sa(dp1584
S'trial_loop.thisTrialN'
p1585
I46
sg894
S'10-bounty_redo.png'
p1586
sS'block_loop.thisIndex'
p1587
g888
sg38
S'left'
p1588
sg58
g62
sS'trial_loop.thisN'
p1589
I46
sg33
g1107
sg63
g64
sS'trial_loop.thisIndex'
p1590
g59
(g98
S'.\x00\x00\x00'
tRp1591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1592
I0
sg903
S'4-corn.png'
p1593
sS'block_loop.thisRepN'
p1594
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1595
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p1596
Nsg69
Vn
sS'block_loop.thisTrialN'
p1597
I0
sg39
F1.1168587465731434
sg34
g752
(S'\x07\xdf\n\x15\x10%\x1c\x02\x1b\x10'
tRp1598
sa(dp1599
S'trial_loop.thisTrialN'
p1600
I47
sg894
S'19-caramello_redo.png'
p1601
sS'block_loop.thisIndex'
p1602
g888
sg38
S'left'
p1603
sg58
g62
sS'trial_loop.thisN'
p1604
I47
sg33
g1295
sg63
g64
sS'trial_loop.thisIndex'
p1605
g59
(g98
S'/\x00\x00\x00'
tRp1606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1607
I0
sg903
S'30-spaghetti_hoops.png'
p1608
sS'block_loop.thisRepN'
p1609
I0
sg906
g1295
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1610
I0
sg908
g1302
sg55
g11
sS'block_loop.thisTrial'
p1611
Nsg69
Vn
sS'block_loop.thisTrialN'
p1612
I0
sg39
F1.3001652426983128
sg34
g752
(S'\x07\xdf\n\x15\x10%"\x04\x93\xe0'
tRp1613
sa(dp1614
S'trial_loop.thisTrialN'
p1615
I48
sg894
g1064
sS'block_loop.thisIndex'
p1616
g888
sg38
S'left'
p1617
sg58
g62
sS'trial_loop.thisN'
p1618
I48
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1619
g59
(g98
S'0\x00\x00\x00'
tRp1620
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1621
I0
sg903
g1071
sS'block_loop.thisRepN'
p1622
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1623
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1624
Nsg69
Vn
sS'block_loop.thisTrialN'
p1625
I0
sg39
F1.5334887306530618
sg34
g752
(S'\x07\xdf\n\x15\x10%(\t\xac\x90'
tRp1626
sa(dp1627
S'trial_loop.thisTrialN'
p1628
I49
sg894
g1143
sS'block_loop.thisIndex'
p1629
g888
sg38
S'right'
p1630
sg58
g62
sS'trial_loop.thisN'
p1631
I49
sg33
g1153
sg63
g64
sS'trial_loop.thisIndex'
p1632
g59
(g98
S'1\x00\x00\x00'
tRp1633
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1634
I0
sg903
g1151
sS'block_loop.thisRepN'
p1635
I0
sg906
g1153
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1636
I0
sg908
g1147
sg55
g11
sS'block_loop.thisTrial'
p1637
Nsg69
Vn
sS'block_loop.thisTrialN'
p1638
I0
sg39
F1.883550083704904
sg34
g752
(S'\x07\xdf\n\x15\x10%/\x03\x11('
tRp1639
sa(dp1640
S'trial_loop.thisTrialN'
p1641
I50
sg894
S'25-kitkat.png'
p1642
sS'block_loop.thisIndex'
p1643
g888
sg38
S'left'
p1644
sg58
g62
sS'trial_loop.thisN'
p1645
I50
sg33
S'25-kitkat.png'
p1646
sg63
g64
sS'trial_loop.thisIndex'
p1647
g59
(g98
S'2\x00\x00\x00'
tRp1648
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1649
I0
sg903
S'31-hobnobs.png'
p1650
sS'block_loop.thisRepN'
p1651
I0
sg906
g1646
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1652
I0
sg908
S'31-hobnobs.png'
p1653
sg55
g11
sS'block_loop.thisTrial'
p1654
Nsg69
Vn
sS'block_loop.thisTrialN'
p1655
I0
sg39
F1.2668324605542693
sg34
g752
(S'\x07\xdf\n\x15\x10%6\x01\xb5\x80'
tRp1656
sa(dp1657
S'trial_loop.thisTrialN'
p1658
I51
sg894
g1143
sS'block_loop.thisIndex'
p1659
g888
sg38
S'left'
p1660
sg58
g62
sS'trial_loop.thisN'
p1661
I51
sg33
g1153
sg63
g64
sS'trial_loop.thisIndex'
p1662
g59
(g98
S'3\x00\x00\x00'
tRp1663
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1664
I0
sg903
g1151
sS'block_loop.thisRepN'
p1665
I0
sg906
g1153
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1666
I0
sg908
g1147
sg55
g11
sS'block_loop.thisTrial'
p1667
Nsg69
Vn
sS'block_loop.thisTrialN'
p1668
I0
sg39
F1.133269832545011
sg34
g752
(S'\x07\xdf\n\x15\x10&\x00\x06U\x18'
tRp1669
sa(dp1670
S'trial_loop.thisTrialN'
p1671
I52
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p1672
sS'block_loop.thisIndex'
p1673
g888
sg38
S'right'
p1674
sg58
g62
sS'trial_loop.thisN'
p1675
I52
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p1676
g59
(g98
S'4\x00\x00\x00'
tRp1677
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1678
I0
sg903
S'36-fig_rolls.png'
p1679
sS'block_loop.thisRepN'
p1680
I0
sg906
g1245
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1681
I0
sg908
g1239
sg55
g11
sS'block_loop.thisTrial'
p1682
Nsg69
Vn
sS'block_loop.thisTrialN'
p1683
I0
sg39
F1.2668635362165332
sg34
g752
(S'\x07\xdf\n\x15\x10&\x06\x08\xcd\xe8'
tRp1684
sa(dp1685
S'trial_loop.thisTrialN'
p1686
I53
sg894
g949
sS'block_loop.thisIndex'
p1687
g888
sg38
S'left'
p1688
sg58
g62
sS'trial_loop.thisN'
p1689
I53
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p1690
g59
(g98
S'5\x00\x00\x00'
tRp1691
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1692
I0
sg903
g957
sS'block_loop.thisRepN'
p1693
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1694
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p1695
Nsg69
Vn
sS'block_loop.thisTrialN'
p1696
I0
sg39
F0.88352271431358531
sg34
g752
(S'\x07\xdf\n\x15\x10&\x0c\ri\x98'
tRp1697
sa(dp1698
S'trial_loop.thisTrialN'
p1699
I54
sg894
g1390
sS'block_loop.thisIndex'
p1700
g888
sg38
S'left'
p1701
sg58
g62
sS'trial_loop.thisN'
p1702
I54
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1703
g59
(g98
S'6\x00\x00\x00'
tRp1704
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1705
I0
sg903
g1397
sS'block_loop.thisRepN'
p1706
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1707
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1708
Nsg69
Vn
sS'block_loop.thisTrialN'
p1709
I0
sg39
F1.9003563152591596
sg34
g752
(S'\x07\xdf\n\x15\x10&\x12\x0c\x11\xd8'
tRp1710
sa(dp1711
S'trial_loop.thisTrialN'
p1712
I55
sg894
S'6-sour_patch_kids.png'
p1713
sS'block_loop.thisIndex'
p1714
g888
sg38
S'right'
p1715
sg58
g62
sS'trial_loop.thisN'
p1716
I55
sg33
g1153
sg63
g64
sS'trial_loop.thisIndex'
p1717
g59
(g98
S'7\x00\x00\x00'
tRp1718
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1719
I0
sg903
S'38-maltesers.png'
p1720
sS'block_loop.thisRepN'
p1721
I0
sg906
g1153
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1722
I0
sg908
g1147
sg55
g11
sS'block_loop.thisTrial'
p1723
Nsg69
Vn
sS'block_loop.thisTrialN'
p1724
I0
sg39
F1.0332395551563422
sg34
g752
(S'\x07\xdf\n\x15\x10&\x19\x0b/H'
tRp1725
sa(dp1726
S'trial_loop.thisTrialN'
p1727
I56
sg894
g1308
sS'block_loop.thisIndex'
p1728
g888
sg38
S'right'
p1729
sg58
g62
sS'trial_loop.thisN'
p1730
I56
sg33
g1130
sg63
g64
sS'trial_loop.thisIndex'
p1731
g59
(g98
S'8\x00\x00\x00'
tRp1732
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1733
I0
sg903
g1315
sS'block_loop.thisRepN'
p1734
I0
sg906
g1130
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1735
I0
sg908
g1137
sg55
g11
sS'block_loop.thisTrial'
p1736
Nsg69
Vn
sS'block_loop.thisTrialN'
p1737
I0
sg39
F1.1835613735784136
sg34
g752
(S'\x07\xdf\n\x15\x10&\x1f\x0b\xfeP'
tRp1738
sa(dp1739
S'trial_loop.thisTrialN'
p1740
I57
sg894
g1190
sS'block_loop.thisIndex'
p1741
g888
sg38
S'right'
p1742
sg58
g62
sS'trial_loop.thisN'
p1743
I57
sg33
g1008
sg63
g64
sS'trial_loop.thisIndex'
p1744
g59
(g98
S'9\x00\x00\x00'
tRp1745
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1746
I0
sg903
g1197
sS'block_loop.thisRepN'
p1747
I0
sg906
g1008
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1748
I0
sg908
g1002
sg55
g11
sS'block_loop.thisTrial'
p1749
Nsg69
Vn
sS'block_loop.thisTrialN'
p1750
I0
sg39
F1.0502616057624437
sg34
g752
(S'\x07\xdf\n\x15\x10&&\x00*\xf8'
tRp1751
sa(dp1752
S'trial_loop.thisTrialN'
p1753
I58
sg894
S'13-mccoys_steak_crisps.png'
p1754
sS'block_loop.thisIndex'
p1755
g888
sg38
S'left'
p1756
sg58
g62
sS'trial_loop.thisN'
p1757
I58
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p1758
g59
(g98
S':\x00\x00\x00'
tRp1759
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1760
I0
sg903
S'3-ellas_strawberries_apples.png'
p1761
sS'block_loop.thisRepN'
p1762
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1763
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p1764
Nsg69
Vn
sS'block_loop.thisTrialN'
p1765
I0
sg39
F1.400140781304799
sg34
g752
(S'\x07\xdf\n\x15\x10&,\x01s\x18'
tRp1766
sa(dp1767
S'trial_loop.thisTrialN'
p1768
I59
sg894
S'33-ambrosia_rice.png'
p1769
sS'block_loop.thisIndex'
p1770
g888
sg38
S'left'
p1771
sg58
g62
sS'trial_loop.thisN'
p1772
I59
sg33
g1465
sg63
g64
sS'trial_loop.thisIndex'
p1773
g59
(g98
S';\x00\x00\x00'
tRp1774
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1775
I0
sg903
S'23-crunchie_redo.png'
p1776
sS'block_loop.thisRepN'
p1777
I0
sg906
g1465
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1778
I0
sg908
g1472
sg55
g11
sS'block_loop.thisTrial'
p1779
Nsg69
Vn
sS'block_loop.thisTrialN'
p1780
I0
sg39
F1.467268489163871
sg34
g752
(S'\x07\xdf\n\x15\x10&2\x07\xf7\x10'
tRp1781
sa(dp1782
S'trial_loop.thisTrialN'
p1783
I60
sg894
S'20-fruit_pastilles.png'
p1784
sS'block_loop.thisIndex'
p1785
g888
sg38
S'left'
p1786
sg58
g62
sS'trial_loop.thisN'
p1787
I60
sg33
S'2-steamed_puddings.png'
p1788
sg63
g64
sS'trial_loop.thisIndex'
p1789
g59
(g98
S'<\x00\x00\x00'
tRp1790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1791
I0
sg903
S'2-steamed_puddings.png'
p1792
sS'block_loop.thisRepN'
p1793
I0
sg906
g1788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1794
I0
sg908
S'20-fruit_pastilles.png'
p1795
sg55
g11
sS'block_loop.thisTrial'
p1796
Nsg69
Vn
sS'block_loop.thisTrialN'
p1797
I0
sg39
F1.6001220788880346
sg34
g752
(S'\x07\xdf\n\x15\x10&9\x00ix'
tRp1798
sa(dp1799
S'trial_loop.thisTrialN'
p1800
I61
sg894
g1586
sS'block_loop.thisIndex'
p1801
g888
sg38
S'left'
p1802
sg58
g62
sS'trial_loop.thisN'
p1803
I61
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p1804
g59
(g98
S'=\x00\x00\x00'
tRp1805
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1806
I0
sg903
g1593
sS'block_loop.thisRepN'
p1807
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1808
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p1809
Nsg69
Vn
sS'block_loop.thisTrialN'
p1810
I0
sg39
F1.0834350182235539
sg34
g752
(S"\x07\xdf\n\x15\x10'\x03\n\x06h"
tRp1811
sa(dp1812
S'trial_loop.thisTrialN'
p1813
I62
sg894
S'31-hobnobs.png'
p1814
sS'block_loop.thisIndex'
p1815
g888
sg38
S'right'
p1816
sg58
g62
sS'trial_loop.thisN'
p1817
I62
sg33
g1646
sg63
g64
sS'trial_loop.thisIndex'
p1818
g59
(g98
S'>\x00\x00\x00'
tRp1819
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1820
I0
sg903
S'25-kitkat.png'
p1821
sS'block_loop.thisRepN'
p1822
I0
sg906
g1646
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1823
I0
sg908
g1653
sg55
g11
sS'block_loop.thisTrial'
p1824
Nsg69
Vn
sS'block_loop.thisTrialN'
p1825
I0
sg39
F1.4501312590377893
sg34
g752
(S"\x07\xdf\n\x15\x10'\t\x0b\xc7\xa0"
tRp1826
sa(dp1827
S'trial_loop.thisTrialN'
p1828
I63
sg894
g1308
sS'block_loop.thisIndex'
p1829
g888
sg38
S'right'
p1830
sg58
g62
sS'trial_loop.thisN'
p1831
I63
sg33
g1137
sg63
g64
sS'trial_loop.thisIndex'
p1832
g59
(g98
S'?\x00\x00\x00'
tRp1833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1834
I0
sg903
g1315
sS'block_loop.thisRepN'
p1835
I0
sg906
g1130
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1836
I0
sg908
g1137
sg55
g11
sS'block_loop.thisTrial'
p1837
Nsg69
Vn
sS'block_loop.thisTrialN'
p1838
I0
sg39
F1.0335186659244755
sg34
g752
(S"\x07\xdf\n\x15\x10'\x10\x03\xffp"
tRp1839
sa(dp1840
S'trial_loop.thisTrialN'
p1841
I64
sg894
g1096
sS'block_loop.thisIndex'
p1842
g888
sg38
S'right'
p1843
sg58
g62
sS'trial_loop.thisN'
p1844
I64
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p1845
g59
(g98
S'@\x00\x00\x00'
tRp1846
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1847
I0
sg903
g1104
sS'block_loop.thisRepN'
p1848
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1849
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p1850
Nsg69
Vn
sS'block_loop.thisTrialN'
p1851
I0
sg39
F1.1005793757954052
sg34
g752
(S"\x07\xdf\n\x15\x10'\x16\x05\t\x10"
tRp1852
sa(dp1853
S'trial_loop.thisTrialN'
p1854
I65
sg894
g1461
sS'block_loop.thisIndex'
p1855
g888
sg38
S'left'
p1856
sg58
g62
sS'trial_loop.thisN'
p1857
I65
sg33
g1465
sg63
g64
sS'trial_loop.thisIndex'
p1858
g59
(g98
S'A\x00\x00\x00'
tRp1859
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1860
I0
sg903
g1469
sS'block_loop.thisRepN'
p1861
I0
sg906
g1465
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1862
I0
sg908
g1472
sg55
g11
sS'block_loop.thisTrial'
p1863
Nsg69
Vn
sS'block_loop.thisTrialN'
p1864
I0
sg39
F1.2167841079631216
sg34
g752
(S"\x07\xdf\n\x15\x10'\x1c\x07\x08\xc8"
tRp1865
sa(dp1866
S'trial_loop.thisTrialN'
p1867
I66
sg894
g1047
sS'block_loop.thisIndex'
p1868
g888
sg38
S'right'
p1869
sg58
g62
sS'trial_loop.thisN'
p1870
I66
sg33
g1057
sg63
g64
sS'trial_loop.thisIndex'
p1871
g59
(g98
S'B\x00\x00\x00'
tRp1872
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1873
I0
sg903
g1055
sS'block_loop.thisRepN'
p1874
I0
sg906
g1057
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1875
I0
sg908
g1051
sg55
g11
sS'block_loop.thisTrial'
p1876
Nsg69
Vn
sS'block_loop.thisTrialN'
p1877
I0
sg39
F1.3667606729222825
sg34
g752
(S'\x07\xdf\n\x15\x10\'"\n\xf0\xc8'
tRp1878
sa(dp1879
S'trial_loop.thisTrialN'
p1880
I67
sg894
g1173
sS'block_loop.thisIndex'
p1881
g888
sg38
S'left'
p1882
sg58
g62
sS'trial_loop.thisN'
p1883
I67
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p1884
g59
(g98
S'C\x00\x00\x00'
tRp1885
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1886
I0
sg903
g1181
sS'block_loop.thisRepN'
p1887
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1888
I0
sg908
g1184
sg55
g11
sS'block_loop.thisTrial'
p1889
Nsg69
Vn
sS'block_loop.thisTrialN'
p1890
I0
sg39
F1.4501141531682151
sg34
g752
(S"\x07\xdf\n\x15\x10')\x01\xb9h"
tRp1891
sa(dp1892
S'trial_loop.thisTrialN'
p1893
I68
sg894
S'40-sardines.png'
p1894
sS'block_loop.thisIndex'
p1895
g888
sg38
S'left'
p1896
sg58
g62
sS'trial_loop.thisN'
p1897
I68
sg33
g1448
sg63
g64
sS'trial_loop.thisIndex'
p1898
g59
(g98
S'D\x00\x00\x00'
tRp1899
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1900
I0
sg903
S'5-pineapple.png'
p1901
sS'block_loop.thisRepN'
p1902
I0
sg906
g1448
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1903
I0
sg908
g1455
sg55
g11
sS'block_loop.thisTrial'
p1904
Nsg69
Vn
sS'block_loop.thisTrialN'
p1905
I0
sg39
F3.2834693440013325
sg34
g752
(S"\x07\xdf\n\x15\x10'/\x08\xf4\xf8"
tRp1906
sa(dp1907
S'trial_loop.thisTrialN'
p1908
I69
sg894
g1672
sS'block_loop.thisIndex'
p1909
g888
sg38
S'right'
p1910
sg58
g62
sS'trial_loop.thisN'
p1911
I69
sg33
g1245
sg63
g64
sS'trial_loop.thisIndex'
p1912
g59
(g98
S'E\x00\x00\x00'
tRp1913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1914
I0
sg903
g1679
sS'block_loop.thisRepN'
p1915
I0
sg906
g1245
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1916
I0
sg908
g1239
sg55
g11
sS'block_loop.thisTrial'
p1917
Nsg69
Vn
sS'block_loop.thisTrialN'
p1918
I0
sg39
F1.3505599891436759
sg34
g752
(S"\x07\xdf\n\x15\x10'7\r\xc3p"
tRp1919
sa(dp1920
S'trial_loop.thisTrialN'
p1921
I70
sg894
g1291
sS'block_loop.thisIndex'
p1922
g888
sg38
S'right'
p1923
sg58
g62
sS'trial_loop.thisN'
p1924
I70
sg33
g1295
sg63
g64
sS'trial_loop.thisIndex'
p1925
g59
(g98
S'F\x00\x00\x00'
tRp1926
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1927
I0
sg903
g1299
sS'block_loop.thisRepN'
p1928
I0
sg906
g1295
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1929
I0
sg908
g1302
sg55
g11
sS'block_loop.thisTrial'
p1930
Nsg69
Vn
sS'block_loop.thisTrialN'
p1931
I0
sg39
F1.4335143324378805
sg34
g752
(S'\x07\xdf\n\x15\x10(\x02\x04\x8c\x10'
tRp1932
sa(dp1933
S'trial_loop.thisTrialN'
p1934
I71
sg894
S'8-liquorice_catherine_wheels.png'
p1935
sS'block_loop.thisIndex'
p1936
g888
sg38
S'right'
p1937
sg58
g62
sS'trial_loop.thisN'
p1938
I71
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p1939
g59
(g98
S'G\x00\x00\x00'
tRp1940
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1941
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p1942
sS'block_loop.thisRepN'
p1943
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1944
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1945
Nsg69
Vn
sS'block_loop.thisTrialN'
p1946
I0
sg39
F2.7832404104497073
sg34
g752
(S'\x07\xdf\n\x15\x10(\x08\x0b\x89 '
tRp1947
sa(dp1948
S'trial_loop.thisTrialN'
p1949
I72
sg894
g1126
sS'block_loop.thisIndex'
p1950
g888
sg38
S'left'
p1951
sg58
g62
sS'trial_loop.thisN'
p1952
I72
sg33
g1137
sg63
g64
sS'trial_loop.thisIndex'
p1953
g59
(g98
S'H\x00\x00\x00'
tRp1954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1955
I0
sg903
g1134
sS'block_loop.thisRepN'
p1956
I0
sg906
g1130
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1957
I0
sg908
g1137
sg55
g11
sS'block_loop.thisTrial'
p1958
Nsg69
Vn
sS'block_loop.thisTrialN'
p1959
I0
sg39
F1.1001910725603921
sg34
g752
(S'\x07\xdf\n\x15\x10(\x10\x08\xba`'
tRp1960
sa(dp1961
S'trial_loop.thisTrialN'
p1962
I73
sg894
g949
sS'block_loop.thisIndex'
p1963
g888
sg38
S'left'
p1964
sg58
g62
sS'trial_loop.thisN'
p1965
I73
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p1966
g59
(g98
S'I\x00\x00\x00'
tRp1967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1968
I0
sg903
g957
sS'block_loop.thisRepN'
p1969
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1970
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p1971
Nsg69
Vn
sS'block_loop.thisTrialN'
p1972
I0
sg39
F1.1168467724642142
sg34
g752
(S'\x07\xdf\n\x15\x10(\x16\n\xb60'
tRp1973
sa(dp1974
S'trial_loop.thisTrialN'
p1975
I74
sg894
S'2-steamed_puddings.png'
p1976
sS'block_loop.thisIndex'
p1977
g888
sg38
S'right'
p1978
sg58
g62
sS'trial_loop.thisN'
p1979
I74
sg33
g1788
sg63
g64
sS'trial_loop.thisIndex'
p1980
g59
(g98
S'J\x00\x00\x00'
tRp1981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1982
I0
sg903
S'20-fruit_pastilles.png'
p1983
sS'block_loop.thisRepN'
p1984
I0
sg906
g1788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1985
I0
sg908
g1795
sg55
g11
sS'block_loop.thisTrial'
p1986
Nsg69
Vn
sS'block_loop.thisTrialN'
p1987
I0
sg39
F1.2666522787299073
sg34
g752
(S'\x07\xdf\n\x15\x10(\x1c\r/\x00'
tRp1988
sa(dp1989
S'trial_loop.thisTrialN'
p1990
I75
sg894
g932
sS'block_loop.thisIndex'
p1991
g888
sg38
S'left'
p1992
sg58
g62
sS'trial_loop.thisN'
p1993
I75
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1994
g59
(g98
S'K\x00\x00\x00'
tRp1995
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1996
I0
sg903
g940
sS'block_loop.thisRepN'
p1997
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1998
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1999
Nsg69
Vn
sS'block_loop.thisTrialN'
p2000
I0
sg39
F3.4833921965305308
sg34
g752
(S'\x07\xdf\n\x15\x10(#\x02M\xd8'
tRp2001
sa(dp2002
S'trial_loop.thisTrialN'
p2003
I76
sg894
g1015
sS'block_loop.thisIndex'
p2004
g888
sg38
S'right'
p2005
sg58
g62
sS'trial_loop.thisN'
p2006
I76
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p2007
g59
(g98
S'L\x00\x00\x00'
tRp2008
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2009
I0
sg903
g1023
sS'block_loop.thisRepN'
p2010
I0
sg906
g1019
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2011
I0
sg908
g1026
sg55
g11
sS'block_loop.thisTrial'
p2012
Nsg69
Vn
sS'block_loop.thisTrialN'
p2013
I0
sg39
F1.2168451188967992
sg34
g752
(S'\x07\xdf\n\x15\x10(+\n5H'
tRp2014
sa(dp2015
S'trial_loop.thisTrialN'
p2016
I77
sg894
g1672
sS'block_loop.thisIndex'
p2017
g888
sg38
S'right'
p2018
sg58
g62
sS'trial_loop.thisN'
p2019
I77
sg33
g1245
sg63
g64
sS'trial_loop.thisIndex'
p2020
g59
(g98
S'M\x00\x00\x00'
tRp2021
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2022
I0
sg903
g1679
sS'block_loop.thisRepN'
p2023
I0
sg906
g1245
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2024
I0
sg908
g1239
sg55
g11
sS'block_loop.thisTrial'
p2025
Nsg69
Vn
sS'block_loop.thisTrialN'
p2026
I0
sg39
F1.0668505927751539
sg34
g752
(S'\x07\xdf\n\x15\x10(1\x0e\x1dH'
tRp2027
sa(dp2028
S'trial_loop.thisTrialN'
p2029
I78
sg894
g1126
sS'block_loop.thisIndex'
p2030
g888
sg38
S'left'
p2031
sg58
g62
sS'trial_loop.thisN'
p2032
I78
sg33
g1130
sg63
g64
sS'trial_loop.thisIndex'
p2033
g59
(g98
S'N\x00\x00\x00'
tRp2034
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2035
I0
sg903
g1134
sS'block_loop.thisRepN'
p2036
I0
sg906
g1130
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2037
I0
sg908
g1137
sg55
g11
sS'block_loop.thisTrial'
p2038
Nsg69
Vn
sS'block_loop.thisTrialN'
p2039
I0
sg39
F1.0834566856578931
sg34
g752
(S'\x07\xdf\n\x15\x10(8\x00]\xc0'
tRp2040
sa(dp2041
S'trial_loop.thisTrialN'
p2042
I79
sg894
g1769
sS'block_loop.thisIndex'
p2043
g888
sg38
S'right'
p2044
sg58
g62
sS'trial_loop.thisN'
p2045
I79
sg33
g1465
sg63
g64
sS'trial_loop.thisIndex'
p2046
g59
(g98
S'O\x00\x00\x00'
tRp2047
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2048
I0
sg903
g1776
sS'block_loop.thisRepN'
p2049
I0
sg906
g1465
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2050
I0
sg908
g1472
sg55
g11
sS'block_loop.thisTrial'
p2051
Nsg69
Vn
sS'block_loop.thisTrialN'
p2052
I0
sg39
F0.90055445824555136
sg34
g752
(S'\x07\xdf\n\x15\x10)\x02\x02\x1e\xf8'
tRp2053
sa(dp2054
S'trial_loop.thisTrialN'
p2055
I80
sg894
g1064
sS'block_loop.thisIndex'
p2056
g888
sg38
S'left'
p2057
sg58
g62
sS'trial_loop.thisN'
p2058
I80
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2059
g59
(g98
S'P\x00\x00\x00'
tRp2060
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2061
I0
sg903
g1071
sS'block_loop.thisRepN'
p2062
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2063
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2064
Nsg69
Vn
sS'block_loop.thisTrialN'
p2065
I0
sg39
F1.483275021324971
sg34
g752
(S'\x07\xdf\n\x15\x10)\x08\x01D8'
tRp2066
sa(dp2067
S'trial_loop.thisTrialN'
p2068
I81
sg894
g1814
sS'block_loop.thisIndex'
p2069
g888
sg38
S'right'
p2070
sg58
g62
sS'trial_loop.thisN'
p2071
I81
sg33
g1646
sg63
g64
sS'trial_loop.thisIndex'
p2072
g59
(g98
S'Q\x00\x00\x00'
tRp2073
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2074
I0
sg903
g1821
sS'block_loop.thisRepN'
p2075
I0
sg906
g1646
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2076
I0
sg908
g1653
sg55
g11
sS'block_loop.thisTrial'
p2077
Nsg69
Vn
sS'block_loop.thisTrialN'
p2078
I0
sg39
F2.2001500754940935
sg34
g752
(S'\x07\xdf\n\x15\x10)\x0e\x08\xf8\xe0'
tRp2079
sa(dp2080
S'trial_loop.thisTrialN'
p2081
I82
sg894
g1205
sS'block_loop.thisIndex'
p2082
g888
sg38
S'right'
p2083
sg58
g62
sS'trial_loop.thisN'
p2084
I82
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p2085
g59
(g98
S'R\x00\x00\x00'
tRp2086
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2087
I0
sg903
g1213
sS'block_loop.thisRepN'
p2088
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2089
I0
sg908
g1216
sg55
g11
sS'block_loop.thisTrial'
p2090
Nsg69
Vn
sS'block_loop.thisTrialN'
p2091
I0
sg39
F1.4168483690123139
sg34
g752
(S'\x07\xdf\n\x15\x10)\x15\x0c\x9ex'
tRp2092
sa(dp2093
S'trial_loop.thisTrialN'
p2094
I83
sg894
g983
sS'block_loop.thisIndex'
p2095
g888
sg38
S'right'
p2096
sg58
g62
sS'trial_loop.thisN'
p2097
I83
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p2098
g59
(g98
S'S\x00\x00\x00'
tRp2099
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2100
I0
sg903
g990
sS'block_loop.thisRepN'
p2101
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2102
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p2103
Nsg69
Vn
sS'block_loop.thisTrialN'
p2104
I0
sg39
F1.1168413556060841
sg34
g752
(S'\x07\xdf\n\x15\x10)\x1c\x04\x1a\xc8'
tRp2105
sa(dp2106
S'trial_loop.thisTrialN'
p2107
I84
sg894
g1444
sS'block_loop.thisIndex'
p2108
g888
sg38
S'left'
p2109
sg58
g62
sS'trial_loop.thisN'
p2110
I84
sg33
g1455
sg63
g64
sS'trial_loop.thisIndex'
p2111
g59
(g98
S'T\x00\x00\x00'
tRp2112
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2113
I0
sg903
g1452
sS'block_loop.thisRepN'
p2114
I0
sg906
g1448
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2115
I0
sg908
g1455
sg55
g11
sS'block_loop.thisTrial'
p2116
Nsg69
Vn
sS'block_loop.thisTrialN'
p2117
I0
sg39
F1.3336551137426795
sg34
g752
(S'\x07\xdf\n\x15\x10)"\x06\x93\x98'
tRp2118
sa(dp2119
S'trial_loop.thisTrialN'
p2120
I85
sg894
g1754
sS'block_loop.thisIndex'
p2121
g888
sg38
S'left'
p2122
sg58
g62
sS'trial_loop.thisN'
p2123
I85
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2124
g59
(g98
S'U\x00\x00\x00'
tRp2125
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2126
I0
sg903
g1761
sS'block_loop.thisRepN'
p2127
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2128
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p2129
Nsg69
Vn
sS'block_loop.thisTrialN'
p2130
I0
sg39
F1.2001703174391878
sg34
g752
(S'\x07\xdf\n\x15\x10)(\x0c%`'
tRp2131
sa(dp2132
S'trial_loop.thisTrialN'
p2133
I86
sg894
g1032
sS'block_loop.thisIndex'
p2134
g888
sg38
S'right'
p2135
sg58
g62
sS'trial_loop.thisN'
p2136
I86
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2137
g59
(g98
S'V\x00\x00\x00'
tRp2138
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2139
I0
sg903
g1039
sS'block_loop.thisRepN'
p2140
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2141
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2142
Nsg69
Vn
sS'block_loop.thisTrialN'
p2143
I0
sg39
F1.4501255570812646
sg34
g752
(S'\x07\xdf\n\x15\x10)/\x00R\x08'
tRp2144
sa(dp2145
S'trial_loop.thisTrialN'
p2146
I87
sg894
g1205
sS'block_loop.thisIndex'
p2147
g888
sg38
S'right'
p2148
sg58
g62
sS'trial_loop.thisN'
p2149
I87
sg33
g1216
sg63
g64
sS'trial_loop.thisIndex'
p2150
g59
(g98
S'W\x00\x00\x00'
tRp2151
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2152
I0
sg903
g1213
sS'block_loop.thisRepN'
p2153
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2154
I0
sg908
g1216
sg55
g11
sS'block_loop.thisTrial'
p2155
Nsg69
Vn
sS'block_loop.thisTrialN'
p2156
I0
sg39
F1.0001354214659841
sg34
g752
(S'\x07\xdf\n\x15\x10)5\x07\xc80'
tRp2157
sa(dp2158
S'trial_loop.thisTrialN'
p2159
I88
sg894
g1545
sS'block_loop.thisIndex'
p2160
g888
sg38
S'right'
p2161
sg58
g62
sS'trial_loop.thisN'
p2162
I88
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p2163
g59
(g98
S'X\x00\x00\x00'
tRp2164
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2165
I0
sg903
g1552
sS'block_loop.thisRepN'
p2166
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2167
I0
sg908
g1184
sg55
g11
sS'block_loop.thisTrial'
p2168
Nsg69
Vn
sS'block_loop.thisTrialN'
p2169
I0
sg39
F1.0334790373271971
sg34
g752
(S'\x07\xdf\n\x15\x10);\x08X\xb8'
tRp2170
sa(dp2171
S'trial_loop.thisTrialN'
p2172
I89
sg894
g1079
sS'block_loop.thisIndex'
p2173
g888
sg38
S'right'
p2174
sg58
g62
sS'trial_loop.thisN'
p2175
I89
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2176
g59
(g98
S'Y\x00\x00\x00'
tRp2177
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2178
I0
sg903
g1087
sS'block_loop.thisRepN'
p2179
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2180
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p2181
Nsg69
Vn
sS'block_loop.thisTrialN'
p2182
I0
sg39
F1.4504659638814701
sg34
g752
(S"\x07\xdf\n\x15\x10*\x05\t'\xc0"
tRp2183
sa(dp2184
S'trial_loop.thisTrialN'
p2185
I90
sg894
g1769
sS'block_loop.thisIndex'
p2186
g888
sg38
S'right'
p2187
sg58
g62
sS'trial_loop.thisN'
p2188
I90
sg33
g1472
sg63
g64
sS'trial_loop.thisIndex'
p2189
g59
(g98
S'Z\x00\x00\x00'
tRp2190
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2191
I0
sg903
g1776
sS'block_loop.thisRepN'
p2192
I0
sg906
g1465
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2193
I0
sg908
g1472
sg55
g11
sS'block_loop.thisTrial'
p2194
Nsg69
Vn
sS'block_loop.thisTrialN'
p2195
I0
sg39
F6.8999412128287076
sg34
g752
(S'\x07\xdf\n\x15\x10*\x0c\x01_\x90'
tRp2196
sa(dp2197
S'trial_loop.thisTrialN'
p2198
I91
sg894
g1713
sS'block_loop.thisIndex'
p2199
g888
sg38
S'right'
p2200
sg58
g62
sS'trial_loop.thisN'
p2201
I91
sg33
g1153
sg63
g64
sS'trial_loop.thisIndex'
p2202
g59
(g98
S'[\x00\x00\x00'
tRp2203
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2204
I0
sg903
g1720
sS'block_loop.thisRepN'
p2205
I0
sg906
g1153
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2206
I0
sg908
g1147
sg55
g11
sS'block_loop.thisTrial'
p2207
Nsg69
Vn
sS'block_loop.thisTrialN'
p2208
I0
sg39
F1.1831910315067944
sg34
g752
(S'\x07\xdf\n\x15\x10*\x18\x00]\xc0'
tRp2209
sa(dp2210
S'trial_loop.thisTrialN'
p2211
I92
sg894
g1461
sS'block_loop.thisIndex'
p2212
g888
sg38
S'left'
p2213
sg58
g62
sS'trial_loop.thisN'
p2214
I92
sg33
g1465
sg63
g64
sS'trial_loop.thisIndex'
p2215
g59
(g98
S'\\\x00\x00\x00'
tRp2216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2217
I0
sg903
g1469
sS'block_loop.thisRepN'
p2218
I0
sg906
g1465
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2219
I0
sg908
g1472
sg55
g11
sS'block_loop.thisTrial'
p2220
Nsg69
Vn
sS'block_loop.thisTrialN'
p2221
I0
sg39
F0.75019871318272635
sg34
g752
(S'\x07\xdf\n\x15\x10*\x1e\x03\xc8\xc0'
tRp2222
sa(dp2223
S'trial_loop.thisTrialN'
p2224
I93
sg894
S'51-mars.png'
p2225
sS'block_loop.thisIndex'
p2226
g888
sg38
S'right'
p2227
sg58
g62
sS'trial_loop.thisN'
p2228
I93
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p2229
g59
(g98
S']\x00\x00\x00'
tRp2230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2231
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p2232
sS'block_loop.thisRepN'
p2233
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2234
I0
sg908
g1216
sg55
g11
sS'block_loop.thisTrial'
p2235
Nsg69
Vn
sS'block_loop.thisTrialN'
p2236
I0
sg39
F1.3501896470716019
sg34
g752
(S'\x07\xdf\n\x15\x10*$\x00N '
tRp2237
sa(dp2238
S'trial_loop.thisTrialN'
p2239
I94
sg894
g915
sS'block_loop.thisIndex'
p2240
g888
sg38
S'right'
p2241
sg58
g62
sS'trial_loop.thisN'
p2242
I94
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p2243
g59
(g98
S'^\x00\x00\x00'
tRp2244
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2245
I0
sg903
g923
sS'block_loop.thisRepN'
p2246
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2247
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2248
Nsg69
Vn
sS'block_loop.thisTrialN'
p2249
I0
sg39
F1.2167313648660638
sg34
g752
(S'\x07\xdf\n\x15\x10**\x06\x1eh'
tRp2250
sa(dp2251
S'trial_loop.thisTrialN'
p2252
I95
sg894
g1894
sS'block_loop.thisIndex'
p2253
g888
sg38
S'left'
p2254
sg58
g62
sS'trial_loop.thisN'
p2255
I95
sg33
g1455
sg63
g64
sS'trial_loop.thisIndex'
p2256
g59
(g98
S'_\x00\x00\x00'
tRp2257
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2258
I0
sg903
g1901
sS'block_loop.thisRepN'
p2259
I0
sg906
g1448
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2260
I0
sg908
g1455
sg55
g11
sS'block_loop.thisTrial'
p2261
Nsg69
Vn
sS'block_loop.thisTrialN'
p2262
I0
sg39
F1.6668623388059132
sg34
g752
(S'\x07\xdf\n\x15\x10*0\n\x02\x80'
tRp2263
sa(dp2264
S'trial_loop.thisTrialN'
p2265
I96
sg894
g966
sS'block_loop.thisIndex'
p2266
g888
sg38
S'left'
p2267
sg58
g62
sS'trial_loop.thisN'
p2268
I96
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2269
g59
(g98
S'`\x00\x00\x00'
tRp2270
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2271
I0
sg903
g974
sS'block_loop.thisRepN'
p2272
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2273
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2274
Nsg69
Vn
sS'block_loop.thisTrialN'
p2275
I0
sg39
F1.1001528694528133
sg34
g752
(S'\x07\xdf\n\x15\x10*7\x05\x8d\xe0'
tRp2276
sa(dp2277
S'trial_loop.thisTrialN'
p2278
I97
sg894
g1235
sS'block_loop.thisIndex'
p2279
g888
sg38
S'right'
p2280
sg58
g62
sS'trial_loop.thisN'
p2281
I97
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p2282
g59
(g98
S'a\x00\x00\x00'
tRp2283
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2284
I0
sg903
g1243
sS'block_loop.thisRepN'
p2285
I0
sg906
g1245
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2286
I0
sg908
g1239
sg55
g11
sS'block_loop.thisTrial'
p2287
Nsg69
Vn
sS'block_loop.thisTrialN'
p2288
I0
sg39
F1.3335308110922597
sg34
g752
(S'\x07\xdf\n\x15\x10+\x01\x07\x8d\x98'
tRp2289
sa(dp2290
S'trial_loop.thisTrialN'
p2291
I98
sg894
g1173
sS'block_loop.thisIndex'
p2292
g888
sg38
S'left'
p2293
sg58
g62
sS'trial_loop.thisN'
p2294
I98
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p2295
g59
(g98
S'b\x00\x00\x00'
tRp2296
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2297
I0
sg903
g1181
sS'block_loop.thisRepN'
p2298
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2299
I0
sg908
g1184
sg55
g11
sS'block_loop.thisTrial'
p2300
Nsg69
Vn
sS'block_loop.thisTrialN'
p2301
I0
sg39
F1.0002277931603203
sg34
g752
(S'\x07\xdf\n\x15\x10+\x07\r\x1f`'
tRp2302
sa(dp2303
S'trial_loop.thisTrialN'
p2304
I99
sg894
g1126
sS'block_loop.thisIndex'
p2305
g888
sg38
S'left'
p2306
sg58
g62
sS'trial_loop.thisN'
p2307
I99
sg33
g1137
sg63
g64
sS'trial_loop.thisIndex'
p2308
g59
(g98
S'c\x00\x00\x00'
tRp2309
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2310
I0
sg903
g1134
sS'block_loop.thisRepN'
p2311
I0
sg906
g1130
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2312
I0
sg908
g1137
sg55
g11
sS'block_loop.thisTrial'
p2313
Nsg69
Vn
sS'block_loop.thisTrialN'
p2314
I0
sg39
F1.0001932963236868
sg34
g752
(S'\x07\xdf\n\x15\x10+\r\r\xaf\xe8'
tRp2315
sa(dp2316
S'trial_loop.thisTrialN'
p2317
I100
sg894
g1545
sS'block_loop.thisIndex'
p2318
g888
sg38
S'right'
p2319
sg58
g62
sS'trial_loop.thisN'
p2320
I100
sg33
g1184
sg63
g64
sS'trial_loop.thisIndex'
p2321
g59
(g98
S'd\x00\x00\x00'
tRp2322
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2323
I0
sg903
g1552
sS'block_loop.thisRepN'
p2324
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2325
I0
sg908
g1184
sg55
g11
sS'block_loop.thisTrial'
p2326
Nsg69
Vn
sS'block_loop.thisTrialN'
p2327
I0
sg39
F0.85018508550638217
sg34
g752
(S'\x07\xdf\n\x15\x10+\x13\x0e\x05\xd8'
tRp2328
sa(dp2329
S'trial_loop.thisTrialN'
p2330
I101
sg894
g1784
sS'block_loop.thisIndex'
p2331
g888
sg38
S'left'
p2332
sg58
g62
sS'trial_loop.thisN'
p2333
I101
sg33
g1788
sg63
g64
sS'trial_loop.thisIndex'
p2334
g59
(g98
S'e\x00\x00\x00'
tRp2335
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2336
I0
sg903
g1792
sS'block_loop.thisRepN'
p2337
I0
sg906
g1788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2338
I0
sg908
g1795
sg55
g11
sS'block_loop.thisTrial'
p2339
Nsg69
Vn
sS'block_loop.thisTrialN'
p2340
I0
sg39
F1.133508174324561
sg34
g752
(S'\x07\xdf\n\x15\x10+\x19\x0c5\x00'
tRp2341
sa(dp2342
S'trial_loop.thisTrialN'
p2343
I102
sg894
g1205
sS'block_loop.thisIndex'
p2344
g888
sg38
S'right'
p2345
sg58
g62
sS'trial_loop.thisN'
p2346
I102
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p2347
g59
(g98
S'f\x00\x00\x00'
tRp2348
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2349
I0
sg903
g1213
sS'block_loop.thisRepN'
p2350
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2351
I0
sg908
g1216
sg55
g11
sS'block_loop.thisTrial'
p2352
Nsg69
Vn
sS'block_loop.thisTrialN'
p2353
I0
sg39
F1.7334469353127133
sg34
g752
(S'\x07\xdf\n\x15\x10+\x1f\x0e\xecP'
tRp2354
sa(dp2355
S'trial_loop.thisTrialN'
p2356
I103
sg894
g1517
sS'block_loop.thisIndex'
p2357
g888
sg38
S'left'
p2358
sg58
g62
sS'trial_loop.thisN'
p2359
I103
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p2360
g59
(g98
S'g\x00\x00\x00'
tRp2361
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2362
I0
sg903
g1524
sS'block_loop.thisRepN'
p2363
I0
sg906
g1019
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2364
I0
sg908
g1026
sg55
g11
sS'block_loop.thisTrial'
p2365
Nsg69
Vn
sS'block_loop.thisTrialN'
p2366
I0
sg39
F1.5338861570185145
sg34
g752
(S'\x07\xdf\n\x15\x10+&\x0bi\xe0'
tRp2367
sa(dp2368
S'trial_loop.thisTrialN'
p2369
I104
sg894
g1375
sS'block_loop.thisIndex'
p2370
g888
sg38
S'left'
p2371
sg58
g62
sS'trial_loop.thisN'
p2372
I104
sg33
g1057
sg63
g64
sS'trial_loop.thisIndex'
p2373
g59
(g98
S'h\x00\x00\x00'
tRp2374
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2375
I0
sg903
g1382
sS'block_loop.thisRepN'
p2376
I0
sg906
g1057
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2377
I0
sg908
g1051
sg55
g11
sS'block_loop.thisTrial'
p2378
Nsg69
Vn
sS'block_loop.thisTrialN'
p2379
I0
sg39
F0.91684722862146373
sg34
g752
(S'\x07\xdf\n\x15\x10+-\x04\x93\xe0'
tRp2380
sa(dp2381
S'trial_loop.thisTrialN'
p2382
I105
sg894
g1517
sS'block_loop.thisIndex'
p2383
g888
sg38
S'left'
p2384
sg58
g62
sS'trial_loop.thisN'
p2385
I105
sg33
g1026
sg63
g64
sS'trial_loop.thisIndex'
p2386
g59
(g98
S'i\x00\x00\x00'
tRp2387
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2388
I0
sg903
g1524
sS'block_loop.thisRepN'
p2389
I0
sg906
g1019
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2390
I0
sg908
g1026
sg55
g11
sS'block_loop.thisTrial'
p2391
Nsg69
Vn
sS'block_loop.thisTrialN'
p2392
I0
sg39
F1.316845746112449
sg34
g752
(S'\x07\xdf\n\x15\x10+3\x03\xf3\xb8'
tRp2393
sa(dp2394
S'trial_loop.thisTrialN'
p2395
I106
sg894
g1814
sS'block_loop.thisIndex'
p2396
g888
sg38
S'right'
p2397
sg58
g62
sS'trial_loop.thisN'
p2398
I106
sg33
g1646
sg63
g64
sS'trial_loop.thisIndex'
p2399
g59
(g98
S'j\x00\x00\x00'
tRp2400
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2401
I0
sg903
g1821
sS'block_loop.thisRepN'
p2402
I0
sg906
g1646
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2403
I0
sg908
g1653
sg55
g11
sS'block_loop.thisTrial'
p2404
Nsg69
Vn
sS'block_loop.thisTrialN'
p2405
I0
sg39
F1.7834171711001545
sg34
g752
(S'\x07\xdf\n\x15\x10+9\tG\x00'
tRp2406
sa(dp2407
S'trial_loop.thisTrialN'
p2408
I107
sg894
g1976
sS'block_loop.thisIndex'
p2409
g888
sg38
S'left'
p2410
sg58
g62
sS'trial_loop.thisN'
p2411
I107
sg33
g1788
sg63
g64
sS'trial_loop.thisIndex'
p2412
g59
(g98
S'k\x00\x00\x00'
tRp2413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2414
I0
sg903
g1983
sS'block_loop.thisRepN'
p2415
I0
sg906
g1788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2416
I0
sg908
g1795
sg55
g11
sS'block_loop.thisTrial'
p2417
Nsg69
Vn
sS'block_loop.thisTrialN'
p2418
I0
sg39
F0.96691468276594605
sg34
g752
(S'\x07\xdf\n\x15\x10,\x04\x06\x80\x10'
tRp2419
sa(dp2420
S'trial_loop.thisTrialN'
p2421
I108
sg894
g895
sS'block_loop.thisIndex'
p2422
g888
sg38
S'right'
p2423
sg58
g62
sS'trial_loop.thisN'
p2424
I108
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2425
g59
(g98
S'l\x00\x00\x00'
tRp2426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2427
I0
sg903
g904
sS'block_loop.thisRepN'
p2428
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2429
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2430
Nsg69
Vn
sS'block_loop.thisTrialN'
p2431
I0
sg39
F1.1172715682205308
sg34
g752
(S'\x07\xdf\n\x15\x10,\n\x06Y\x00'
tRp2432
sa(dp2433
S'trial_loop.thisTrialN'
p2434
I109
sg894
g1291
sS'block_loop.thisIndex'
p2435
g888
sg38
S'right'
p2436
sg58
g62
sS'trial_loop.thisN'
p2437
I109
sg33
g1295
sg63
g64
sS'trial_loop.thisIndex'
p2438
g59
(g98
S'm\x00\x00\x00'
tRp2439
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2440
I0
sg903
g1299
sS'block_loop.thisRepN'
p2441
I0
sg906
g1295
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2442
I0
sg908
g1302
sg55
g11
sS'block_loop.thisTrial'
p2443
Nsg69
Vn
sS'block_loop.thisTrialN'
p2444
I0
sg39
F1.1835069198946258
sg34
g752
(S'\x07\xdf\n\x15\x10,\x10\x08\xd1\xd0'
tRp2445
sa(dp2446
S'trial_loop.thisTrialN'
p2447
I110
sg894
g966
sS'block_loop.thisIndex'
p2448
g888
sg38
S'left'
p2449
sg58
g62
sS'trial_loop.thisN'
p2450
I110
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2451
g59
(g98
S'n\x00\x00\x00'
tRp2452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2453
I0
sg903
g974
sS'block_loop.thisRepN'
p2454
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2455
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2456
Nsg69
Vn
sS'block_loop.thisTrialN'
p2457
I0
sg39
F1.1501935244023116
sg34
g752
(S'\x07\xdf\n\x15\x10,\x16\x0c\x028'
tRp2458
sa(dp2459
S'trial_loop.thisTrialN'
p2460
I111
sg894
g1126
sS'block_loop.thisIndex'
p2461
g888
sg38
S'left'
p2462
sg58
g62
sS'trial_loop.thisN'
p2463
I111
sg33
g1130
sg63
g64
sS'trial_loop.thisIndex'
p2464
g59
(g98
S'o\x00\x00\x00'
tRp2465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2466
I0
sg903
g1134
sS'block_loop.thisRepN'
p2467
I0
sg906
g1130
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2468
I0
sg908
g1137
sg55
g11
sS'block_loop.thisTrial'
p2469
Nsg69
Vn
sS'block_loop.thisTrialN'
p2470
I0
sg39
F1.7168029244194258
sg34
g752
(S'\x07\xdf\n\x15\x10,\x1c\x0e\xf4 '
tRp2471
sa(dp2472
S'trial_loop.thisTrialN'
p2473
I112
sg894
g1032
sS'block_loop.thisIndex'
p2474
g888
sg38
S'right'
p2475
sg58
g62
sS'trial_loop.thisN'
p2476
I112
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2477
g59
(g98
S'p\x00\x00\x00'
tRp2478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2479
I0
sg903
g1039
sS'block_loop.thisRepN'
p2480
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2481
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2482
Nsg69
Vn
sS'block_loop.thisTrialN'
p2483
I0
sg39
F0.93339630193941048
sg34
g752
(S'\x07\xdf\n\x15\x10,#\n\xf8\x98'
tRp2484
sa(dp2485
S'trial_loop.thisTrialN'
p2486
I113
sg894
g1517
sS'block_loop.thisIndex'
p2487
g888
sg38
S'right'
p2488
sg58
g62
sS'trial_loop.thisN'
p2489
I113
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p2490
g59
(g98
S'q\x00\x00\x00'
tRp2491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2492
I0
sg903
g1524
sS'block_loop.thisRepN'
p2493
I0
sg906
g1019
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2494
I0
sg908
g1026
sg55
g11
sS'block_loop.thisTrial'
p2495
Nsg69
Vn
sS'block_loop.thisTrialN'
p2496
I0
sg39
F2.0004963553092239
sg34
g752
(S'\x07\xdf\n\x15\x10,)\n\x96\xf0'
tRp2497
sa(dp2498
S'trial_loop.thisTrialN'
p2499
I114
sg894
g1976
sS'block_loop.thisIndex'
p2500
g888
sg38
S'left'
p2501
sg58
g62
sS'trial_loop.thisN'
p2502
I114
sg33
g1788
sg63
g64
sS'trial_loop.thisIndex'
p2503
g59
(g98
S'r\x00\x00\x00'
tRp2504
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2505
I0
sg903
g1983
sS'block_loop.thisRepN'
p2506
I0
sg906
g1788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2507
I0
sg908
g1795
sg55
g11
sS'block_loop.thisTrial'
p2508
Nsg69
Vn
sS'block_loop.thisTrialN'
p2509
I0
sg39
F0.90020948988012606
sg34
g752
(S'\x07\xdf\n\x15\x10,0\x0b#\x90'
tRp2510
sa(dp2511
S'trial_loop.thisTrialN'
p2512
I115
sg894
g1601
sS'block_loop.thisIndex'
p2513
g888
sg38
S'left'
p2514
sg58
g62
sS'trial_loop.thisN'
p2515
I115
sg33
g1295
sg63
g64
sS'trial_loop.thisIndex'
p2516
g59
(g98
S's\x00\x00\x00'
tRp2517
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2518
I0
sg903
g1608
sS'block_loop.thisRepN'
p2519
I0
sg906
g1295
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2520
I0
sg908
g1302
sg55
g11
sS'block_loop.thisTrial'
p2521
Nsg69
Vn
sS'block_loop.thisTrialN'
p2522
I0
sg39
F0.78344824676241842
sg34
g752
(S'\x07\xdf\n\x15\x10,6\n\nP'
tRp2523
sa(dp2524
S'trial_loop.thisTrialN'
p2525
I116
sg894
g1390
sS'block_loop.thisIndex'
p2526
g888
sg38
S'left'
p2527
sg58
g62
sS'trial_loop.thisN'
p2528
I116
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2529
g59
(g98
S't\x00\x00\x00'
tRp2530
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2531
I0
sg903
g1397
sS'block_loop.thisRepN'
p2532
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2533
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2534
Nsg69
Vn
sS'block_loop.thisTrialN'
p2535
I0
sg39
F0.95013382491788434
sg34
g752
(S'\x07\xdf\n\x15\x10-\x00\x07GH'
tRp2536
sa(dp2537
S'trial_loop.thisTrialN'
p2538
I117
sg894
g1601
sS'block_loop.thisIndex'
p2539
g888
sg38
S'left'
p2540
sg58
g62
sS'trial_loop.thisN'
p2541
I117
sg33
g1295
sg63
g64
sS'trial_loop.thisIndex'
p2542
g59
(g98
S'u\x00\x00\x00'
tRp2543
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2544
I0
sg903
g1608
sS'block_loop.thisRepN'
p2545
I0
sg906
g1295
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2546
I0
sg908
g1302
sg55
g11
sS'block_loop.thisTrial'
p2547
Nsg69
Vn
sS'block_loop.thisTrialN'
p2548
I0
sg39
F0.80019346738254171
sg34
g752
(S'\x07\xdf\n\x15\x10-\x06\x06\xe1\xb8'
tRp2549
sa(dp2550
S'trial_loop.thisTrialN'
p2551
I118
sg894
g949
sS'block_loop.thisIndex'
p2552
g888
sg38
S'left'
p2553
sg58
g62
sS'trial_loop.thisN'
p2554
I118
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p2555
g59
(g98
S'v\x00\x00\x00'
tRp2556
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2557
I0
sg903
g957
sS'block_loop.thisRepN'
p2558
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2559
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p2560
Nsg69
Vn
sS'block_loop.thisTrialN'
p2561
I0
sg39
F0.83354221500485437
sg34
g752
(S'\x07\xdf\n\x15\x10-\x0c\x04]0'
tRp2562
sa(dp2563
S'trial_loop.thisTrialN'
p2564
I119
sg894
g1935
sS'block_loop.thisIndex'
p2565
g888
sg38
S'right'
p2566
sg58
g62
sS'trial_loop.thisN'
p2567
I119
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2568
g59
(g98
S'w\x00\x00\x00'
tRp2569
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2570
I0
sg903
g1942
sS'block_loop.thisRepN'
p2571
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2572
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2573
Nsg69
Vn
sS'block_loop.thisTrialN'
p2574
I0
sg39
F2.8004951008788339
sg34
g752
(S'\x07\xdf\n\x15\x10-\x12\x02M\xd8'
tRp2575
sa(dp2576
S'trial_loop.thisTrialN'
p2577
I120
sg894
g1754
sS'block_loop.thisIndex'
p2578
g888
sg38
S'left'
p2579
sg58
g62
sS'trial_loop.thisN'
p2580
I120
sg33
g1090
sg63
g64
sS'trial_loop.thisIndex'
p2581
g59
(g98
S'x\x00\x00\x00'
tRp2582
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2583
I0
sg903
g1761
sS'block_loop.thisRepN'
p2584
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2585
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p2586
Nsg69
Vn
sS'block_loop.thisTrialN'
p2587
I0
sg39
F0.91686775566449796
sg34
g752
(S'\x07\xdf\n\x15\x10-\x19\x0e\xff\xd8'
tRp2588
sa(dp2589
S'trial_loop.thisTrialN'
p2590
I121
sg894
g1390
sS'block_loop.thisIndex'
p2591
g888
sg38
S'left'
p2592
sg58
g62
sS'trial_loop.thisN'
p2593
I121
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2594
g59
(g98
S'y\x00\x00\x00'
tRp2595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2596
I0
sg903
g1397
sS'block_loop.thisRepN'
p2597
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2598
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2599
Nsg69
Vn
sS'block_loop.thisTrialN'
p2600
I0
sg39
F1.0167380931743537
sg34
g752
(S'\x07\xdf\n\x15\x10-\x1f\x0e_\xb0'
tRp2601
sa(dp2602
S'trial_loop.thisTrialN'
p2603
I122
sg894
g1586
sS'block_loop.thisIndex'
p2604
g888
sg38
S'left'
p2605
sg58
g62
sS'trial_loop.thisN'
p2606
I122
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p2607
g59
(g98
S'z\x00\x00\x00'
tRp2608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2609
I0
sg903
g1593
sS'block_loop.thisRepN'
p2610
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2611
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p2612
Nsg69
Vn
sS'block_loop.thisTrialN'
p2613
I0
sg39
F0.83355932087397377
sg34
g752
(S'\x07\xdf\n\x15\x10-%\x0f.\xb8'
tRp2614
sa(dp2615
S'trial_loop.thisTrialN'
p2616
I123
sg894
g932
sS'block_loop.thisIndex'
p2617
g888
sg38
S'left'
p2618
sg58
g62
sS'trial_loop.thisN'
p2619
I123
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2620
g59
(g98
S'{\x00\x00\x00'
tRp2621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2622
I0
sg903
g940
sS'block_loop.thisRepN'
p2623
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2624
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2625
Nsg69
Vn
sS'block_loop.thisTrialN'
p2626
I0
sg39
F0.90020065184762643
sg34
g752
(S'\x07\xdf\n\x15\x10-+\r\x1f`'
tRp2627
sa(dp2628
S'trial_loop.thisTrialN'
p2629
I124
sg894
g895
sS'block_loop.thisIndex'
p2630
g888
sg38
S'right'
p2631
sg58
g62
sS'trial_loop.thisN'
p2632
I124
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2633
g59
(g98
S'|\x00\x00\x00'
tRp2634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2635
I0
sg903
g904
sS'block_loop.thisRepN'
p2636
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2637
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2638
Nsg69
Vn
sS'block_loop.thisTrialN'
p2639
I0
sg39
F0.93352088968777025
sg34
g752
(S'\x07\xdf\n\x15\x10-1\x0c\x06 '
tRp2640
sa(dp2641
S'trial_loop.thisTrialN'
p2642
I125
sg894
g1784
sS'block_loop.thisIndex'
p2643
g888
sg38
S'right'
p2644
sg58
g62
sS'trial_loop.thisN'
p2645
I125
sg33
g1795
sg63
g64
sS'trial_loop.thisIndex'
p2646
g59
(g98
S'}\x00\x00\x00'
tRp2647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2648
I0
sg903
g1792
sS'block_loop.thisRepN'
p2649
I0
sg906
g1788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2650
I0
sg908
g1795
sg55
g11
sS'block_loop.thisTrial'
p2651
Nsg69
Vn
sS'block_loop.thisTrialN'
p2652
I0
sg39
F1.3172123819122135
sg34
g752
(S'\x07\xdf\n\x15\x10-7\x0b\xa4x'
tRp2653
sa(dp2654
S'trial_loop.thisTrialN'
p2655
I126
sg894
g1642
sS'block_loop.thisIndex'
p2656
g888
sg38
S'left'
p2657
sg58
g62
sS'trial_loop.thisN'
p2658
I126
sg33
g1646
sg63
g64
sS'trial_loop.thisIndex'
p2659
g59
(g98
S'~\x00\x00\x00'
tRp2660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2661
I0
sg903
g1650
sS'block_loop.thisRepN'
p2662
I0
sg906
g1646
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2663
I0
sg908
g1653
sg55
g11
sS'block_loop.thisTrial'
p2664
Nsg69
Vn
sS'block_loop.thisTrialN'
p2665
I0
sg39
F1.3667857615305365
sg34
g752
(S'\x07\xdf\n\x15\x10.\x02\x01\xb5\x80'
tRp2666
sa(dp2667
S'trial_loop.thisTrialN'
p2668
I127
sg894
g1894
sS'block_loop.thisIndex'
p2669
g888
sg38
S'left'
p2670
sg58
g62
sS'trial_loop.thisN'
p2671
I127
sg33
g1455
sg63
g64
sS'trial_loop.thisIndex'
p2672
g59
(g98
S'\x7f\x00\x00\x00'
tRp2673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2674
I0
sg903
g1901
sS'block_loop.thisRepN'
p2675
I0
sg906
g1448
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2676
I0
sg908
g1455
sg55
g11
sS'block_loop.thisTrial'
p2677
Nsg69
Vn
sS'block_loop.thisTrialN'
p2678
I0
sg39
F1.5501720850456877
sg34
g752
(S'\x07\xdf\n\x15\x10.\x08\x07\xc0`'
tRp2679
sa(dp2680
S'trial_loop.thisTrialN'
p2681
I128
sg894
g1642
sS'block_loop.thisIndex'
p2682
g888
sg38
S'left'
p2683
sg58
g62
sS'trial_loop.thisN'
p2684
I128
sg33
g1646
sg63
g64
sS'trial_loop.thisIndex'
p2685
g59
(g98
S'\x80\x00\x00\x00'
tRp2686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2687
I0
sg903
g1650
sS'block_loop.thisRepN'
p2688
I0
sg906
g1646
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2689
I0
sg908
g1653
sg55
g11
sS'block_loop.thisTrial'
p2690
Nsg69
Vn
sS'block_loop.thisTrialN'
p2691
I0
sg39
F1.5668312061234246
sg34
g752
(S'\x07\xdf\n\x15\x10.\x0f\x01cx'
tRp2692
sa(dp2693
S'trial_loop.thisTrialN'
p2694
I129
sg894
g932
sS'block_loop.thisIndex'
p2695
g888
sg38
S'left'
p2696
sg58
g62
sS'trial_loop.thisN'
p2697
I129
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2698
g59
(g98
S'\x81\x00\x00\x00'
tRp2699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2700
I0
sg903
g940
sS'block_loop.thisRepN'
p2701
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2702
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2703
Nsg69
Vn
sS'block_loop.thisTrialN'
p2704
I0
sg39
F1.4001627338375329
sg34
g752
(S'\x07\xdf\n\x15\x10.\x15\n\x87P'
tRp2705
sa(dp2706
S'trial_loop.thisTrialN'
p2707
I130
sg894
g1517
sS'block_loop.thisIndex'
p2708
g888
sg38
S'left'
p2709
sg58
g62
sS'trial_loop.thisN'
p2710
I130
sg33
g1026
sg63
g64
sS'trial_loop.thisIndex'
p2711
g59
(g98
S'\x82\x00\x00\x00'
tRp2712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2713
I0
sg903
g1524
sS'block_loop.thisRepN'
p2714
I0
sg906
g1019
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2715
I0
sg908
g1026
sg55
g11
sS'block_loop.thisTrial'
p2716
Nsg69
Vn
sS'block_loop.thisTrialN'
p2717
I0
sg39
F1.3338985872833291
sg34
g752
(S'\x07\xdf\n\x15\x10.\x1c\x01\xcc\xf0'
tRp2718
sa(dp2719
S'trial_loop.thisTrialN'
p2720
I131
sg894
g1047
sS'block_loop.thisIndex'
p2721
g888
sg38
S'left'
p2722
sg58
g62
sS'trial_loop.thisN'
p2723
I131
sg33
g1057
sg63
g64
sS'trial_loop.thisIndex'
p2724
g59
(g98
S'\x83\x00\x00\x00'
tRp2725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2726
I0
sg903
g1055
sS'block_loop.thisRepN'
p2727
I0
sg906
g1057
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2728
I0
sg908
g1051
sg55
g11
sS'block_loop.thisTrial'
p2729
Nsg69
Vn
sS'block_loop.thisTrialN'
p2730
I0
sg39
F0.90016273383707812
sg34
g752
(S'\x07\xdf\n\x15\x10."\x07Z\xd0'
tRp2731
sa(dp2732
S'trial_loop.thisTrialN'
p2733
I132
sg894
g1308
sS'block_loop.thisIndex'
p2734
g888
sg38
S'right'
p2735
sg58
g62
sS'trial_loop.thisN'
p2736
I132
sg33
g1130
sg63
g64
sS'trial_loop.thisIndex'
p2737
g59
(g98
S'\x84\x00\x00\x00'
tRp2738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2739
I0
sg903
g1315
sS'block_loop.thisRepN'
p2740
I0
sg906
g1130
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2741
I0
sg908
g1137
sg55
g11
sS'block_loop.thisTrial'
p2742
Nsg69
Vn
sS'block_loop.thisTrialN'
p2743
I0
sg39
F1.0335081173047911
sg34
g752
(S'\x07\xdf\n\x15\x10.(\x06\x80\x10'
tRp2744
sa(dp2745
S'trial_loop.thisTrialN'
p2746
I133
sg894
g1894
sS'block_loop.thisIndex'
p2747
g888
sg38
S'left'
p2748
sg58
g62
sS'trial_loop.thisN'
p2749
I133
sg33
g1455
sg63
g64
sS'trial_loop.thisIndex'
p2750
g59
(g98
S'\x85\x00\x00\x00'
tRp2751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2752
I0
sg903
g1901
sS'block_loop.thisRepN'
p2753
I0
sg906
g1448
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2754
I0
sg908
g1455
sg55
g11
sS'block_loop.thisTrial'
p2755
Nsg69
Vn
sS'block_loop.thisTrialN'
p2756
I0
sg39
F1.15023486358632
sg34
g752
(S'\x07\xdf\n\x15\x10..\x07\x89\xb0'
tRp2757
sa(dp2758
S'trial_loop.thisTrialN'
p2759
I134
sg894
g2225
sS'block_loop.thisIndex'
p2760
g888
sg38
S'left'
p2761
sg58
g62
sS'trial_loop.thisN'
p2762
I134
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p2763
g59
(g98
S'\x86\x00\x00\x00'
tRp2764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2765
I0
sg903
g2232
sS'block_loop.thisRepN'
p2766
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2767
I0
sg908
g1216
sg55
g11
sS'block_loop.thisTrial'
p2768
Nsg69
Vn
sS'block_loop.thisTrialN'
p2769
I0
sg39
F0.96689016435311714
sg34
g752
(S'\x07\xdf\n\x15\x10.4\nA\x00'
tRp2770
sa(dp2771
S'trial_loop.thisTrialN'
p2772
I135
sg894
g915
sS'block_loop.thisIndex'
p2773
g888
sg38
S'right'
p2774
sg58
g62
sS'trial_loop.thisN'
p2775
I135
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2776
g59
(g98
S'\x87\x00\x00\x00'
tRp2777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2778
I0
sg903
g923
sS'block_loop.thisRepN'
p2779
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2780
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2781
Nsg69
Vn
sS'block_loop.thisTrialN'
p2782
I0
sg39
F1.0333698448612267
sg34
g752
(S'\x07\xdf\n\x15\x10.:\nXp'
tRp2783
sa(dp2784
S'trial_loop.thisTrialN'
p2785
I136
sg894
g1064
sS'block_loop.thisIndex'
p2786
g888
sg38
S'left'
p2787
sg58
g62
sS'trial_loop.thisN'
p2788
I136
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2789
g59
(g98
S'\x88\x00\x00\x00'
tRp2790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2791
I0
sg903
g1071
sS'block_loop.thisRepN'
p2792
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2793
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2794
Nsg69
Vn
sS'block_loop.thisTrialN'
p2795
I0
sg39
F0.90012766680501954
sg34
g752
(S"\x07\xdf\n\x15\x10/\x04\x0b'x"
tRp2796
sa(dp2797
S'trial_loop.thisTrialN'
p2798
I137
sg894
g1444
sS'block_loop.thisIndex'
p2799
g888
sg38
S'left'
p2800
sg58
g62
sS'trial_loop.thisN'
p2801
I137
sg33
g1448
sg63
g64
sS'trial_loop.thisIndex'
p2802
g59
(g98
S'\x89\x00\x00\x00'
tRp2803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2804
I0
sg903
g1452
sS'block_loop.thisRepN'
p2805
I0
sg906
g1448
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2806
I0
sg908
g1455
sg55
g11
sS'block_loop.thisTrial'
p2807
Nsg69
Vn
sS'block_loop.thisTrialN'
p2808
I0
sg39
F1.0334411193171036
sg34
g752
(S'\x07\xdf\n\x15\x10/\n\nH\xd0'
tRp2809
sa(dp2810
S'trial_loop.thisTrialN'
p2811
I138
sg894
g1976
sS'block_loop.thisIndex'
p2812
g888
sg38
S'left'
p2813
sg58
g62
sS'trial_loop.thisN'
p2814
I138
sg33
g1788
sg63
g64
sS'trial_loop.thisIndex'
p2815
g59
(g98
S'\x8a\x00\x00\x00'
tRp2816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2817
I0
sg903
g1983
sS'block_loop.thisRepN'
p2818
I0
sg906
g1788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2819
I0
sg908
g1795
sg55
g11
sS'block_loop.thisTrial'
p2820
Nsg69
Vn
sS'block_loop.thisTrialN'
p2821
I0
sg39
F0.88352242921564539
sg34
g752
(S'\x07\xdf\n\x15\x10/\x10\x0bVX'
tRp2822
sa(dp2823
S'trial_loop.thisTrialN'
p2824
I139
sg894
g1672
sS'block_loop.thisIndex'
p2825
g888
sg38
S'right'
p2826
sg58
g62
sS'trial_loop.thisN'
p2827
I139
sg33
g1245
sg63
g64
sS'trial_loop.thisIndex'
p2828
g59
(g98
S'\x8b\x00\x00\x00'
tRp2829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2830
I0
sg903
g1679
sS'block_loop.thisRepN'
p2831
I0
sg906
g1245
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2832
I0
sg908
g1239
sg55
g11
sS'block_loop.thisTrial'
p2833
Nsg69
Vn
sS'block_loop.thisTrialN'
p2834
I0
sg39
F1.4668354255713894
sg34
g752
(S'\x07\xdf\n\x15\x10/\x16\t\xfe\x98'
tRp2835
sa(dp2836
S'trial_loop.thisTrialN'
p2837
I140
sg894
g1642
sS'block_loop.thisIndex'
p2838
g888
sg38
S'left'
p2839
sg58
g62
sS'trial_loop.thisN'
p2840
I140
sg33
g1653
sg63
g64
sS'trial_loop.thisIndex'
p2841
g59
(g98
S'\x8c\x00\x00\x00'
tRp2842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2843
I0
sg903
g1650
sS'block_loop.thisRepN'
p2844
I0
sg906
g1646
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2845
I0
sg908
g1653
sg55
g11
sS'block_loop.thisTrial'
p2846
Nsg69
Vn
sS'block_loop.thisTrialN'
p2847
I0
sg39
F0.75067254576379128
sg34
g752
(S'\x07\xdf\n\x15\x10/\x1d\x02q\x00'
tRp2848
sa(dp2849
S'trial_loop.thisTrialN'
p2850
I141
sg894
g966
sS'block_loop.thisIndex'
p2851
g888
sg38
S'left'
p2852
sg58
g62
sS'trial_loop.thisN'
p2853
I141
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2854
g59
(g98
S'\x8d\x00\x00\x00'
tRp2855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2856
I0
sg903
g974
sS'block_loop.thisRepN'
p2857
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2858
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2859
Nsg69
Vn
sS'block_loop.thisTrialN'
p2860
I0
sg39
F0.85021159960388104
sg34
g752
(S'\x07\xdf\n\x15\x10/"\x0e8\xa0'
tRp2861
sa(dp2862
S'trial_loop.thisTrialN'
p2863
I142
sg894
g1235
sS'block_loop.thisIndex'
p2864
g888
sg38
S'right'
p2865
sg58
g62
sS'trial_loop.thisN'
p2866
I142
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p2867
g59
(g98
S'\x8e\x00\x00\x00'
tRp2868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2869
I0
sg903
g1243
sS'block_loop.thisRepN'
p2870
I0
sg906
g1245
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2871
I0
sg908
g1239
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vn
sS'block_loop.thisTrialN'
p2873
I0
sg39
F1.7835200914137204
sg34
g752
(S'\x07\xdf\n\x15\x10/(\x0c\xa6H'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g1291
sS'block_loop.thisIndex'
p2877
g888
sg38
S'right'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g1295
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g1299
sS'block_loop.thisRepN'
p2883
I0
sg906
g1295
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2884
I0
sg908
g1302
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vn
sS'block_loop.thisTrialN'
p2886
I0
sg39
F0.88349591511860126
sg34
g752
(S'\x07\xdf\n\x15\x10//\t\xa0\xd8'
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g1713
sS'block_loop.thisIndex'
p2890
g888
sg38
S'left'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g1153
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g1720
sS'block_loop.thisRepN'
p2896
I0
sg906
g1153
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2897
I0
sg908
g1147
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vn
sS'block_loop.thisTrialN'
p2899
I0
sg39
F2.9665312261945473
sg34
g752
(S'\x07\xdf\n\x15\x10/5\x08\x87\x98'
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g1586
sS'block_loop.thisIndex'
p2903
g888
sg38
S'left'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g1593
sS'block_loop.thisRepN'
p2909
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2910
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vn
sS'block_loop.thisTrialN'
p2912
I0
sg39
F2.200164900580603
sg34
g752
(S'\x07\xdf\n\x15\x100\x01\x08\x93P'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g1235
sS'block_loop.thisIndex'
p2916
g888
sg38
S'left'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g1245
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g1243
sS'block_loop.thisRepN'
p2922
I0
sg906
g1245
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2923
I0
sg908
g1239
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vn
sS'block_loop.thisTrialN'
p2925
I0
sg39
F1.2668008146956709
sg34
g752
(S'\x07\xdf\n\x15\x100\x08\x0b\xf6\x80'
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g1461
sS'block_loop.thisIndex'
p2929
g888
sg38
S'left'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g1472
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g1469
sS'block_loop.thisRepN'
p2935
I0
sg906
g1465
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2936
I0
sg908
g1472
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vn
sS'block_loop.thisTrialN'
p2938
I0
sg39
F0.90006095391436247
sg34
g752
(S'\x07\xdf\n\x15\x100\x0f\x01S\xd8'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g1375
sS'block_loop.thisIndex'
p2942
g888
sg38
S'left'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g1057
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g1382
sS'block_loop.thisRepN'
p2948
I0
sg906
g1057
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2949
I0
sg908
g1051
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vn
sS'block_loop.thisTrialN'
p2951
I0
sg39
F0.93344248778612382
sg34
g752
(S'\x07\xdf\n\x15\x100\x15\x00:\x98'
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g1079
sS'block_loop.thisIndex'
p2955
g888
sg38
S'right'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g1087
sS'block_loop.thisRepN'
p2961
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2962
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vn
sS'block_loop.thisTrialN'
p2964
I0
sg39
F0.93356422455644861
sg34
g752
(S'\x07\xdf\n\x15\x100\x1a\x0f\x1b0'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g1375
sS'block_loop.thisIndex'
p2968
g888
sg38
S'left'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g1057
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g1382
sS'block_loop.thisRepN'
p2974
I0
sg906
g1057
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2975
I0
sg908
g1051
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vn
sS'block_loop.thisTrialN'
p2977
I0
sg39
F0.86722652276466761
sg34
g752
(S'\x07\xdf\n\x15\x100 \x0e{\x08'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g1935
sS'block_loop.thisIndex'
p2981
g888
sg38
S'right'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g1942
sS'block_loop.thisRepN'
p2987
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2988
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vn
sS'block_loop.thisTrialN'
p2990
I0
sg39
F1.9335417018287444
sg34
g752
(S'\x07\xdf\n\x15\x100&\r#H'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g1814
sS'block_loop.thisIndex'
p2994
g888
sg38
S'right'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g1646
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g1821
sS'block_loop.thisRepN'
p3000
I0
sg906
g1646
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3001
I0
sg908
g1653
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vn
sS'block_loop.thisTrialN'
p3003
I0
sg39
F1.7168454039947392
sg34
g752
(S'\x07\xdf\n\x15\x100-\x0c\x7f8'
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g1894
sS'block_loop.thisIndex'
p3007
g888
sg38
S'right'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g1448
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g1901
sS'block_loop.thisRepN'
p3013
I0
sg906
g1448
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3014
I0
sg908
g1455
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vn
sS'block_loop.thisTrialN'
p3016
I0
sg39
F1.3668239646390248
sg34
g752
(S'\x07\xdf\n\x15\x1004\x08\xc20'
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g1190
sS'block_loop.thisIndex'
p3020
g888
sg38
S'right'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g1002
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g1197
sS'block_loop.thisRepN'
p3026
I0
sg906
g1008
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3027
I0
sg908
g1002
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vn
sS'block_loop.thisTrialN'
p3029
I0
sg39
F1.2335361709310746
sg34
g752
(S'\x07\xdf\n\x15\x100:\x0e\xcd\x10'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g1444
sS'block_loop.thisIndex'
p3033
g888
sg38
S'right'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g1448
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g1452
sS'block_loop.thisRepN'
p3039
I0
sg906
g1448
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3040
I0
sg908
g1455
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vn
sS'block_loop.thisTrialN'
p3042
I0
sg39
F1.1002720403421336
sg34
g752
(S'\x07\xdf\n\x15\x101\x05\x03\xadh'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g1032
sS'block_loop.thisIndex'
p3046
g888
sg38
S'right'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g1039
sS'block_loop.thisRepN'
p3052
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3053
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vn
sS'block_loop.thisTrialN'
p3055
I0
sg39
F1.8334977397444163
sg34
g752
(S'\x07\xdf\n\x15\x101\x0b\x05\xad '
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g1769
sS'block_loop.thisIndex'
p3059
g888
sg38
S'right'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1465
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g1776
sS'block_loop.thisRepN'
p3065
I0
sg906
g1465
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3066
I0
sg908
g1472
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vn
sS'block_loop.thisTrialN'
p3068
I0
sg39
F1.0502402234255896
sg34
g752
(S'\x07\xdf\n\x15\x101\x12\x03\x99\xe0'
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1814
sS'block_loop.thisIndex'
p3072
g888
sg38
S'right'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g1646
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1821
sS'block_loop.thisRepN'
p3078
I0
sg906
g1646
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3079
I0
sg908
g1653
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vn
sS'block_loop.thisTrialN'
p3081
I0
sg39
F1.9668665012336533
sg34
g752
(S'\x07\xdf\n\x15\x101\x18\x04\xe2\x00'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g1935
sS'block_loop.thisIndex'
p3085
g888
sg38
S'right'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g1942
sS'block_loop.thisRepN'
p3091
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3092
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vn
sS'block_loop.thisTrialN'
p3094
I0
sg39
F1.1835114814593908
sg34
g752
(S'\x07\xdf\n\x15\x101\x1f\x04\xf1\xa0'
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g983
sS'block_loop.thisIndex'
p3098
g888
sg38
S'right'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g990
sS'block_loop.thisRepN'
p3104
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3105
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vn
sS'block_loop.thisTrialN'
p3107
I0
sg39
F1.1502819047273078
sg34
g752
(S'\x07\xdf\n\x15\x101%\x08"\x08'
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g1586
sS'block_loop.thisIndex'
p3111
g888
sg38
S'left'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g1593
sS'block_loop.thisRepN'
p3117
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3118
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vn
sS'block_loop.thisTrialN'
p3120
I0
sg39
F0.81687083472070299
sg34
g752
(S'\x07\xdf\n\x15\x101+\x0b\x13\xf0'
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g1461
sS'block_loop.thisIndex'
p3124
g888
sg38
S'left'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g1465
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g1469
sS'block_loop.thisRepN'
p3130
I0
sg906
g1465
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3131
I0
sg908
g1472
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vn
sS'block_loop.thisTrialN'
p3133
I0
sg39
F0.85018765138693198
sg34
g752
(S'\x07\xdf\n\x15\x1011\x08\xca\x00'
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g998
sS'block_loop.thisIndex'
p3137
g888
sg38
S'left'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g1008
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g1006
sS'block_loop.thisRepN'
p3143
I0
sg906
g1008
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3144
I0
sg908
g1002
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vn
sS'block_loop.thisTrialN'
p3146
I0
sg39
F1.0168718040536078
sg34
g752
(S'\x07\xdf\n\x15\x1017\x06\xf9('
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g1545
sS'block_loop.thisIndex'
p3150
g888
sg38
S'right'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g1184
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g1552
sS'block_loop.thisRepN'
p3156
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3157
I0
sg908
g1184
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vn
sS'block_loop.thisTrialN'
p3159
I0
sg39
F1.0334163158063348
sg34
g752
(S'\x07\xdf\n\x15\x102\x01\x07\xc80'
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g1976
sS'block_loop.thisIndex'
p3163
g888
sg38
S'left'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g1788
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g1983
sS'block_loop.thisRepN'
p3169
I0
sg906
g1788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3170
I0
sg908
g1795
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vn
sS'block_loop.thisTrialN'
p3172
I0
sg39
F0.91682955255646448
sg34
g752
(S'\x07\xdf\n\x15\x102\x07\x08\x978'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g1375
sS'block_loop.thisIndex'
p3176
g888
sg38
S'left'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g1057
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g1382
sS'block_loop.thisRepN'
p3182
I0
sg906
g1057
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3183
I0
sg908
g1051
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vn
sS'block_loop.thisTrialN'
p3185
I0
sg39
F0.81724174698820207
sg34
g752
(S'\x07\xdf\n\x15\x102\r\x07\xf7\x10'
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g1015
sS'block_loop.thisIndex'
p3189
g888
sg38
S'left'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g1023
sS'block_loop.thisRepN'
p3195
I0
sg906
g1019
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3196
I0
sg908
g1026
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vn
sS'block_loop.thisTrialN'
p3198
I0
sg39
F0.88352385470489025
sg34
g752
(S'\x07\xdf\n\x15\x102\x13\x05\xad '
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g1308
sS'block_loop.thisIndex'
p3202
g888
sg38
S'right'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1130
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g1315
sS'block_loop.thisRepN'
p3208
I0
sg906
g1130
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3209
I0
sg908
g1137
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vn
sS'block_loop.thisTrialN'
p3211
I0
sg39
F0.98355156621346396
sg34
g752
(S'\x07\xdf\n\x15\x102\x19\x04YH'
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g2225
sS'block_loop.thisIndex'
p3215
g888
sg38
S'left'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g2232
sS'block_loop.thisRepN'
p3221
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3222
I0
sg908
g1216
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vn
sS'block_loop.thisTrialN'
p3224
I0
sg39
F0.75008296346641146
sg34
g752
(S'\x07\xdf\n\x15\x102\x1f\x04\xabP'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g1143
sS'block_loop.thisIndex'
p3228
g888
sg38
S'left'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g1153
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g1151
sS'block_loop.thisRepN'
p3234
I0
sg906
g1153
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3235
I0
sg908
g1147
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vn
sS'block_loop.thisTrialN'
p3237
I0
sg39
F1.3165994215937644
sg34
g752
(S'\x07\xdf\n\x15\x102%\x01o0'
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g1784
sS'block_loop.thisIndex'
p3241
g888
sg38
S'right'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g1788
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g1792
sS'block_loop.thisRepN'
p3247
I0
sg906
g1788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3248
I0
sg908
g1795
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vn
sS'block_loop.thisTrialN'
p3250
I0
sg39
F1.2335638254198784
sg34
g752
(S'\x07\xdf\n\x15\x102+\x06\xc2x'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g1754
sS'block_loop.thisIndex'
p3254
g888
sg38
S'left'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g1761
sS'block_loop.thisRepN'
p3260
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3261
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vn
sS'block_loop.thisTrialN'
p3263
I0
sg39
F1.0335215169025105
sg34
g752
(S'\x07\xdf\n\x15\x1021\n\xaax'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g1190
sS'block_loop.thisIndex'
p3267
g888
sg38
S'right'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g1008
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g1197
sS'block_loop.thisRepN'
p3273
I0
sg906
g1008
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3274
I0
sg908
g1002
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vn
sS'block_loop.thisTrialN'
p3276
I0
sg39
F0.76686524680326329
sg34
g752
(S'\x07\xdf\n\x15\x1027\x0b\xb4\x18'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g2225
sS'block_loop.thisIndex'
p3280
g888
sg38
S'left'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g2232
sS'block_loop.thisRepN'
p3286
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3287
I0
sg908
g1216
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vn
sS'block_loop.thisTrialN'
p3289
I0
sg39
F1.3167875861563516
sg34
g752
(S'\x07\xdf\n\x15\x103\x01\x08\xb2\x90'
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g1079
sS'block_loop.thisIndex'
p3293
g888
sg38
S'right'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g1087
sS'block_loop.thisRepN'
p3299
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3300
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vn
sS'block_loop.thisTrialN'
p3302
I0
sg39
F0.78354261414187931
sg34
g752
(S'\x07\xdf\n\x15\x103\x07\x0e\t\xc0'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g1672
sS'block_loop.thisIndex'
p3306
g888
sg38
S'left'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g1245
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g1679
sS'block_loop.thisRepN'
p3312
I0
sg906
g1245
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3313
I0
sg908
g1239
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vn
sS'block_loop.thisTrialN'
p3315
I0
sg39
F2.41681729335005
sg34
g752
(S'\x07\xdf\n\x15\x103\r\x0bB\xd0'
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g1545
sS'block_loop.thisIndex'
p3319
g888
sg38
S'right'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g1552
sS'block_loop.thisRepN'
p3325
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3326
I0
sg908
g1184
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vn
sS'block_loop.thisTrialN'
p3328
I0
sg39
F0.76687522522706786
sg34
g752
(S'\x07\xdf\n\x15\x103\x15\x02\xbf '
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1444
sS'block_loop.thisIndex'
p3332
g888
sg38
S'right'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1448
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1452
sS'block_loop.thisRepN'
p3338
I0
sg906
g1448
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3339
I0
sg908
g1455
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vn
sS'block_loop.thisTrialN'
p3341
I0
sg39
F1.5501809230786421
sg34
g752
(S'\x07\xdf\n\x15\x103\x1a\x0e\xff\xd8'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1015
sS'block_loop.thisIndex'
p3345
g888
sg38
S'right'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g1026
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1023
sS'block_loop.thisRepN'
p3351
I0
sg906
g1019
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3352
I0
sg908
g1026
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vn
sS'block_loop.thisTrialN'
p3354
I0
sg39
F1.7334851384207468
sg34
g752
(S'\x07\xdf\n\x15\x103!\x08\xa2\xf0'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g1096
sS'block_loop.thisIndex'
p3358
g888
sg38
S'right'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g1104
sS'block_loop.thisRepN'
p3364
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3365
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vn
sS'block_loop.thisTrialN'
p3367
I0
sg39
F1.7334925509640016
sg34
g752
(S'\x07\xdf\n\x15\x103(\x05 \x80'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g1205
sS'block_loop.thisIndex'
p3371
g888
sg38
S'right'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g1213
sS'block_loop.thisRepN'
p3377
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3378
I0
sg908
g1216
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vn
sS'block_loop.thisTrialN'
p3380
I0
sg39
F1.5172298869188126
sg34
g752
(S'\x07\xdf\n\x15\x103/\x01\xa1\xf8'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g1173
sS'block_loop.thisIndex'
p3384
g888
sg38
S'left'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g1177
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g1181
sS'block_loop.thisRepN'
p3390
I0
sg906
g1177
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3391
I0
sg908
g1184
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vn
sS'block_loop.thisTrialN'
p3393
I0
sg39
F1.1502186130105656
sg34
g752
(S'\x07\xdf\n\x15\x1035\n\x0e8'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g1642
sS'block_loop.thisIndex'
p3397
g888
sg38
S'left'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g1646
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g1650
sS'block_loop.thisRepN'
p3403
I0
sg906
g1646
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3404
I0
sg908
g1653
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vn
sS'block_loop.thisTrialN'
p3406
I0
sg39
F1.0832822057905105
sg34
g752
(S'\x07\xdf\n\x15\x103;\x0c\xc5\x88'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g1769
sS'block_loop.thisIndex'
p3410
g888
sg38
S'right'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g1472
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g1776
sS'block_loop.thisRepN'
p3416
I0
sg906
g1465
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3417
I0
sg908
g1472
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vn
sS'block_loop.thisTrialN'
p3419
I0
sg39
F1.2835152447510154
sg34
g752
(S'\x07\xdf\n\x15\x104\x05\x0e\x86\xc0'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g983
sS'block_loop.thisIndex'
p3423
g888
sg38
S'right'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g990
sS'block_loop.thisRepN'
p3429
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3430
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vn
sS'block_loop.thisTrialN'
p3432
I0
sg39
F1.3335219730593053
sg34
g752
(S'\x07\xdf\n\x15\x104\x0c\x04\x1e\xb0'
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g1601
sS'block_loop.thisIndex'
p3436
g888
sg38
S'left'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g1295
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g1608
sS'block_loop.thisRepN'
p3442
I0
sg906
g1295
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3443
I0
sg908
g1302
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vn
sS'block_loop.thisTrialN'
p3445
I0
sg39
F1.2001971166346266
sg34
g752
(S'\x07\xdf\n\x15\x104\x12\t\xb0x'
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g966
sS'block_loop.thisIndex'
p3449
g888
sg38
S'left'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g974
sS'block_loop.thisRepN'
p3455
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3456
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vn
sS'block_loop.thisTrialN'
p3458
I0
sg39
F1.5501709446548375
sg34
g752
(S'\x07\xdf\n\x15\x104\x18\rY\xf8'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g1064
sS'block_loop.thisIndex'
p3462
g888
sg38
S'left'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g1071
sS'block_loop.thisRepN'
p3468
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3469
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vn
sS'block_loop.thisTrialN'
p3471
I0
sg39
F1.2334614753012829
sg34
g752
(S'\x07\xdf\n\x15\x104\x1f\x06\xfd\x10'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g1784
sS'block_loop.thisIndex'
p3475
g888
sg38
S'right'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g1788
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g1792
sS'block_loop.thisRepN'
p3481
I0
sg906
g1788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3482
I0
sg908
g1795
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vn
sS'block_loop.thisTrialN'
p3484
I0
sg39
F2.0001593696829332
sg34
g752
(S'\x07\xdf\n\x15\x104%\n\xe1('
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g1713
sS'block_loop.thisIndex'
p3488
g888
sg38
S'right'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g1153
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g1720
sS'block_loop.thisRepN'
p3494
I0
sg906
g1153
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3495
I0
sg908
g1147
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vn
sS'block_loop.thisTrialN'
p3497
I0
sg39
F1.4999096239903338
sg34
g752
(S'\x07\xdf\n\x15\x104,\x0bm\xc8'
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g1754
sS'block_loop.thisIndex'
p3501
g888
sg38
S'left'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g1761
sS'block_loop.thisRepN'
p3507
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3508
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vn
sS'block_loop.thisTrialN'
p3510
I0
sg39
F1.9005975080171993
sg34
g752
(S'\x07\xdf\n\x15\x1043\x04YH'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g1935
sS'block_loop.thisIndex'
p3514
g888
sg38
S'right'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g1942
sS'block_loop.thisRepN'
p3520
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3521
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vn
sS'block_loop.thisTrialN'
p3523
I0
sg39
F1.6001408953443388
sg34
g752
(S'\x07\xdf\n\x15\x104:\x03< '
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g1601
sS'block_loop.thisIndex'
p3527
g888
sg38
S'left'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g1302
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g1608
sS'block_loop.thisRepN'
p3533
I0
sg906
g1295
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3534
I0
sg908
g1302
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vn
sS'block_loop.thisTrialN'
p3536
I0
sg39
F1.6835123367532105
sg34
g752
(S'\x07\xdf\n\x15\x105\x04\r\x13\xa8'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g1713
sS'block_loop.thisIndex'
p3540
g888
sg38
S'right'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g1153
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g1720
sS'block_loop.thisRepN'
p3546
I0
sg906
g1153
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3547
I0
sg908
g1147
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vn
sS'block_loop.thisTrialN'
p3549
I0
sg39
F1.3498603590865059
sg34
g752
(S'\x07\xdf\n\x15\x105\x0b\x08\x9f\x08'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g2225
sS'block_loop.thisIndex'
p3553
g888
sg38
S'left'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g1216
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g2232
sS'block_loop.thisRepN'
p3559
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3560
I0
sg908
g1216
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vn
sS'block_loop.thisTrialN'
p3562
I0
sg39
F1.3001124996008002
sg34
g752
(S'\x07\xdf\n\x15\x105\x11\x0eoP'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g895
sS'block_loop.thisIndex'
p3566
g888
sg38
S'right'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g904
sS'block_loop.thisRepN'
p3572
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3573
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vn
sS'block_loop.thisTrialN'
p3575
I0
sg39
F1.2005492124458215
sg34
g752
(S'\x07\xdf\n\x15\x105\x18\x04A\xd8'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g1390
sS'block_loop.thisIndex'
p3579
g888
sg38
S'left'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g1397
sS'block_loop.thisRepN'
p3585
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3586
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vn
sS'block_loop.thisTrialN'
p3588
I0
sg39
F1.1500806256644864
sg34
g752
(S'\x07\xdf\n\x15\x105\x1e\x07\xebX'
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g1032
sS'block_loop.thisIndex'
p3592
g888
sg38
S'right'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g1039
sS'block_loop.thisRepN'
p3598
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3599
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vn
sS'block_loop.thisTrialN'
p3601
I0
sg39
F1.3168420398405942
sg34
g752
(S'\x07\xdf\n\x15\x105$\n\xa2\xa8'
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g915
sS'block_loop.thisIndex'
p3605
g888
sg38
S'right'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g923
sS'block_loop.thisRepN'
p3611
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3612
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vn
sS'block_loop.thisTrialN'
p3614
I0
sg39
F1.2833162464703491
sg34
g752
(S'\x07\xdf\n\x15\x105+\x00\xb3\xb0'
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F10.383351940718057
sg56
Vr
sS'block_loop.thisIndex'
p3618
g888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vn
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vr
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vn
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'48-twix.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'left'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'48-twix.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'50-polo.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3645
I1
sS'img_wrong'
p3646
S'50-polo.png'
p3647
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vn
sS'block_loop.thisTrialN'
p3649
I0
sg39
F1.3501272106486795
sg34
g752
(S'\x07\xdf\n\x15\x106\x04\x0b\xdb('
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'31-hobnobs.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'right'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'25-kitkat.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'25-kitkat.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3663
I1
sg3646
S'31-hobnobs.png'
p3664
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vn
sS'block_loop.thisTrialN'
p3666
I0
sg39
F0.91687060664253295
sg34
g752
(S'\x07\xdf\n\x15\x106\x0b\x02i0'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'42-mrkipling_lemon_slices.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'right'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
S'16-skips_prawn.png'
p3674
sg63
g64
sS'trial_loop.thisIndex'
p3675
g59
(g98
S'\x02\x00\x00\x00'
tRp3676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3677
I0
sg3641
S'16-skips_prawn.png'
p3678
sS'block_loop.thisRepN'
p3679
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3680
I1
sg3646
S'42-mrkipling_lemon_slices.png'
p3681
sg55
g11
sS'block_loop.thisTrial'
p3682
Nsg69
Vn
sS'block_loop.thisTrialN'
p3683
I0
sg39
F0.93340342938472531
sg34
g752
(S'\x07\xdf\n\x15\x106\x11\x01\x8a\x88'
tRp3684
sa(dp3685
S'trial_loop.thisTrialN'
p3686
I3
sg3632
S'10-bounty_redo.png'
p3687
sS'block_loop.thisIndex'
p3688
g3626
sg38
S'left'
p3689
sg58
g62
sS'trial_loop.thisN'
p3690
I3
sg33
S'4-corn.png'
p3691
sg63
g64
sS'trial_loop.thisIndex'
p3692
g59
(g98
S'\x03\x00\x00\x00'
tRp3693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3694
I0
sg3641
S'4-corn.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3644
S'10-bounty_redo.png'
p3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3698
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p3699
Nsg69
Vn
sS'block_loop.thisTrialN'
p3700
I0
sg39
F0.76671899162010959
sg34
g752
(S'\x07\xdf\n\x15\x106\x17\x00\xea`'
tRp3701
sa(dp3702
S'trial_loop.thisTrialN'
p3703
I4
sg3632
S'44-crunch.png'
p3704
sS'block_loop.thisIndex'
p3705
g3626
sg38
S'right'
p3706
sg58
g62
sS'trial_loop.thisN'
p3707
I4
sg33
S'44-crunch.png'
p3708
sg63
g64
sS'trial_loop.thisIndex'
p3709
g59
(g98
S'\x04\x00\x00\x00'
tRp3710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3711
I0
sg3641
S'26-walkers_smoky_bacon.png'
p3712
sS'block_loop.thisRepN'
p3713
I1
sg3644
S'26-walkers_smoky_bacon.png'
p3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3715
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p3716
Nsg69
Vn
sS'block_loop.thisTrialN'
p3717
I0
sg39
F1.0005622129065159
sg34
g752
(S'\x07\xdf\n\x15\x106\x1c\r/\x00'
tRp3718
sa(dp3719
S'trial_loop.thisTrialN'
p3720
I5
sg3632
S'36-fig_rolls.png'
p3721
sS'block_loop.thisIndex'
p3722
g3626
sg38
S'right'
p3723
sg58
g62
sS'trial_loop.thisN'
p3724
I5
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p3725
sg63
g64
sS'trial_loop.thisIndex'
p3726
g59
(g98
S'\x05\x00\x00\x00'
tRp3727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3728
I0
sg3641
S'34-hula_hoops_bbq_beef_redo.png'
p3729
sS'block_loop.thisRepN'
p3730
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3731
I1
sg3646
S'36-fig_rolls.png'
p3732
sg55
g11
sS'block_loop.thisTrial'
p3733
Nsg69
Vn
sS'block_loop.thisTrialN'
p3734
I0
sg39
F0.93347498893808734
sg34
g752
(S'\x07\xdf\n\x15\x106"\r\xbf\x88'
tRp3735
sa(dp3736
S'trial_loop.thisTrialN'
p3737
I6
sg3632
S'6-sour_patch_kids.png'
p3738
sS'block_loop.thisIndex'
p3739
g3626
sg38
S'right'
p3740
sg58
g62
sS'trial_loop.thisN'
p3741
I6
sg33
S'38-maltesers.png'
p3742
sg63
g64
sS'trial_loop.thisIndex'
p3743
g59
(g98
S'\x06\x00\x00\x00'
tRp3744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3745
I0
sg3641
S'38-maltesers.png'
p3746
sS'block_loop.thisRepN'
p3747
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3748
I1
sg3646
S'6-sour_patch_kids.png'
p3749
sg55
g11
sS'block_loop.thisTrial'
p3750
Nsg69
Vn
sS'block_loop.thisTrialN'
p3751
I0
sg39
F0.91657638568949551
sg34
g752
(S'\x07\xdf\n\x15\x106(\r\x1f`'
tRp3752
sa(dp3753
S'trial_loop.thisTrialN'
p3754
I7
sg3632
S'33-ambrosia_rice.png'
p3755
sS'block_loop.thisIndex'
p3756
g3626
sg38
S'right'
p3757
sg58
g62
sS'trial_loop.thisN'
p3758
I7
sg33
S'23-crunchie_redo.png'
p3759
sg63
g64
sS'trial_loop.thisIndex'
p3760
g59
(g98
S'\x07\x00\x00\x00'
tRp3761
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3762
I0
sg3641
S'23-crunchie_redo.png'
p3763
sS'block_loop.thisRepN'
p3764
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3765
I1
sg3646
S'33-ambrosia_rice.png'
p3766
sg55
g11
sS'block_loop.thisTrial'
p3767
Nsg69
Vn
sS'block_loop.thisTrialN'
p3768
I0
sg39
F0.88353383312869482
sg34
g752
(S'\x07\xdf\n\x15\x106.\x0c\x7f8'
tRp3769
sa(dp3770
S'trial_loop.thisTrialN'
p3771
I8
sg3632
S'40-sardines.png'
p3772
sS'block_loop.thisIndex'
p3773
g3626
sg38
S'left'
p3774
sg58
g62
sS'trial_loop.thisN'
p3775
I8
sg33
S'5-pineapple.png'
p3776
sg63
g64
sS'trial_loop.thisIndex'
p3777
g59
(g98
S'\x08\x00\x00\x00'
tRp3778
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3779
I0
sg3641
S'5-pineapple.png'
p3780
sS'block_loop.thisRepN'
p3781
I1
sg3644
S'40-sardines.png'
p3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3783
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p3784
Nsg69
Vn
sS'block_loop.thisTrialN'
p3785
I0
sg39
F1.1668007576763557
sg34
g752
(S'\x07\xdf\n\x15\x1064\x0b+`'
tRp3786
sa(dp3787
S'trial_loop.thisTrialN'
p3788
I9
sg3632
S'7-olives.png'
p3789
sS'block_loop.thisIndex'
p3790
g3626
sg38
S'right'
p3791
sg58
g62
sS'trial_loop.thisN'
p3792
I9
sg33
S'22-daim.png'
p3793
sg63
g64
sS'trial_loop.thisIndex'
p3794
g59
(g98
S'\t\x00\x00\x00'
tRp3795
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3796
I0
sg3641
S'22-daim.png'
p3797
sS'block_loop.thisRepN'
p3798
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3799
I1
sg3646
S'7-olives.png'
p3800
sg55
g11
sS'block_loop.thisTrial'
p3801
Nsg69
Vn
sS'block_loop.thisTrialN'
p3802
I0
sg39
F0.91683496941459453
sg34
g752
(S'\x07\xdf\n\x15\x106:\x0eW\xe0'
tRp3803
sa(dp3804
S'trial_loop.thisTrialN'
p3805
I10
sg3632
g3670
sS'block_loop.thisIndex'
p3806
g3626
sg38
S'right'
p3807
sg58
g62
sS'trial_loop.thisN'
p3808
I10
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p3809
g59
(g98
S'\n\x00\x00\x00'
tRp3810
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3811
I0
sg3641
g3678
sS'block_loop.thisRepN'
p3812
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3813
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p3814
Nsg69
Vn
sS'block_loop.thisTrialN'
p3815
I0
sg39
F0.85008929263813116
sg34
g752
(S'\x07\xdf\n\x15\x107\x04\r} '
tRp3816
sa(dp3817
S'trial_loop.thisTrialN'
p3818
I11
sg3632
S'3-ellas_strawberries_apples.png'
p3819
sS'block_loop.thisIndex'
p3820
g3626
sg38
S'right'
p3821
sg58
g62
sS'trial_loop.thisN'
p3822
I11
sg33
S'13-mccoys_steak_crisps.png'
p3823
sg63
g64
sS'trial_loop.thisIndex'
p3824
g59
(g98
S'\x0b\x00\x00\x00'
tRp3825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3826
I0
sg3641
S'13-mccoys_steak_crisps.png'
p3827
sS'block_loop.thisRepN'
p3828
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3829
I1
sg3646
S'3-ellas_strawberries_apples.png'
p3830
sg55
g11
sS'block_loop.thisTrial'
p3831
Nsg69
Vn
sS'block_loop.thisTrialN'
p3832
I0
sg39
F1.1167849062367168
sg34
g752
(S'\x07\xdf\n\x15\x107\n\x0b\xacH'
tRp3833
sa(dp3834
S'trial_loop.thisTrialN'
p3835
I12
sg3632
g3789
sS'block_loop.thisIndex'
p3836
g3626
sg38
S'right'
p3837
sg58
g62
sS'trial_loop.thisN'
p3838
I12
sg33
g3800
sg63
g64
sS'trial_loop.thisIndex'
p3839
g59
(g98
S'\x0c\x00\x00\x00'
tRp3840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3841
I0
sg3641
g3797
sS'block_loop.thisRepN'
p3842
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3843
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p3844
Nsg69
Vn
sS'block_loop.thisTrialN'
p3845
I0
sg39
F0.93353143830745466
sg34
g752
(S'\x07\xdf\n\x15\x107\x10\r\xea\x80'
tRp3846
sa(dp3847
S'trial_loop.thisTrialN'
p3848
I13
sg3632
S'18-mms.png'
p3849
sS'block_loop.thisIndex'
p3850
g3626
sg38
S'left'
p3851
sg58
g62
sS'trial_loop.thisN'
p3852
I13
sg33
S'43-mrporky_pork_crackles_redo.png'
p3853
sg63
g64
sS'trial_loop.thisIndex'
p3854
g59
(g98
S'\r\x00\x00\x00'
tRp3855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3856
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p3857
sS'block_loop.thisRepN'
p3858
I1
sg3644
S'18-mms.png'
p3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3860
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p3861
Nsg69
Vn
sS'block_loop.thisTrialN'
p3862
I0
sg39
F0.76688776953142224
sg34
g752
(S'\x07\xdf\n\x15\x107\x16\r\x84\xf0'
tRp3863
sa(dp3864
S'trial_loop.thisTrialN'
p3865
I14
sg3632
S'41-peanuts_redo.png'
p3866
sS'block_loop.thisIndex'
p3867
g3626
sg38
S'left'
p3868
sg58
g62
sS'trial_loop.thisN'
p3869
I14
sg33
S'41-peanuts_redo.png'
p3870
sg63
g64
sS'trial_loop.thisIndex'
p3871
g59
(g98
S'\x0e\x00\x00\x00'
tRp3872
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3873
I0
sg3641
S'45-chewy_nougat_redo.png'
p3874
sS'block_loop.thisRepN'
p3875
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3876
I1
sg3646
S'45-chewy_nougat_redo.png'
p3877
sg55
g11
sS'block_loop.thisTrial'
p3878
Nsg69
Vn
sS'block_loop.thisTrialN'
p3879
I0
sg39
F1.0667793183197318
sg34
g752
(S'\x07\xdf\n\x15\x107\x1c\n\x87P'
tRp3880
sa(dp3881
S'trial_loop.thisTrialN'
p3882
I15
sg3632
S'38-maltesers.png'
p3883
sS'block_loop.thisIndex'
p3884
g3626
sg38
S'left'
p3885
sg58
g62
sS'trial_loop.thisN'
p3886
I15
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p3887
g59
(g98
S'\x0f\x00\x00\x00'
tRp3888
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3889
I0
sg3641
S'6-sour_patch_kids.png'
p3890
sS'block_loop.thisRepN'
p3891
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3892
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p3893
Nsg69
Vn
sS'block_loop.thisTrialN'
p3894
I0
sg39
F0.78324639750417191
sg34
g752
(S'\x07\xdf\n\x15\x107"\x0c\n\x08'
tRp3895
sa(dp3896
S'trial_loop.thisTrialN'
p3897
I16
sg3632
S'49-yorkie.png'
p3898
sS'block_loop.thisIndex'
p3899
g3626
sg38
S'right'
p3900
sg58
g62
sS'trial_loop.thisN'
p3901
I16
sg33
S'49-yorkie.png'
p3902
sg63
g64
sS'trial_loop.thisIndex'
p3903
g59
(g98
S'\x10\x00\x00\x00'
tRp3904
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3905
I0
sg3641
S'35-raisins.png'
p3906
sS'block_loop.thisRepN'
p3907
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3908
I1
sg3646
S'35-raisins.png'
p3909
sg55
g11
sS'block_loop.thisTrial'
p3910
Nsg69
Vn
sS'block_loop.thisTrialN'
p3911
I0
sg39
F2.350158571409338
sg34
g752
(S'\x07\xdf\n\x15\x107(\t\x08\x80'
tRp3912
sa(dp3913
S'trial_loop.thisTrialN'
p3914
I17
sg3632
S'22-daim.png'
p3915
sS'block_loop.thisIndex'
p3916
g3626
sg38
S'left'
p3917
sg58
g62
sS'trial_loop.thisN'
p3918
I17
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p3919
g59
(g98
S'\x11\x00\x00\x00'
tRp3920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3921
I0
sg3641
S'7-olives.png'
p3922
sS'block_loop.thisRepN'
p3923
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3924
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p3925
Nsg69
Vn
sS'block_loop.thisTrialN'
p3926
I0
sg39
F0.76686667229250816
sg34
g752
(S'\x07\xdf\n\x15\x107/\x0f\x0fx'
tRp3927
sa(dp3928
S'trial_loop.thisTrialN'
p3929
I18
sg3632
S'4-corn.png'
p3930
sS'block_loop.thisIndex'
p3931
g3626
sg38
S'right'
p3932
sg58
g62
sS'trial_loop.thisN'
p3933
I18
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p3934
g59
(g98
S'\x12\x00\x00\x00'
tRp3935
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3936
I0
sg3641
S'10-bounty_redo.png'
p3937
sS'block_loop.thisRepN'
p3938
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3939
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p3940
Nsg69
Vn
sS'block_loop.thisTrialN'
p3941
I0
sg39
F0.90022887653185535
sg34
g752
(S'\x07\xdf\n\x15\x1075\x0c\r\xf0'
tRp3942
sa(dp3943
S'trial_loop.thisTrialN'
p3944
I19
sg3632
S'19-caramello_redo.png'
p3945
sS'block_loop.thisIndex'
p3946
g3626
sg38
S'left'
p3947
sg58
g62
sS'trial_loop.thisN'
p3948
I19
sg33
S'19-caramello_redo.png'
p3949
sg63
g64
sS'trial_loop.thisIndex'
p3950
g59
(g98
S'\x13\x00\x00\x00'
tRp3951
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3952
I0
sg3641
S'30-spaghetti_hoops.png'
p3953
sS'block_loop.thisRepN'
p3954
I1
sg3644
g3949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3955
I1
sg3646
S'30-spaghetti_hoops.png'
p3956
sg55
g11
sS'block_loop.thisTrial'
p3957
Nsg69
Vn
sS'block_loop.thisTrialN'
p3958
I0
sg39
F0.6502733517922934
sg34
g752
(S'\x07\xdf\n\x15\x107;\n\xf4\xb0'
tRp3959
sa(dp3960
S'trial_loop.thisTrialN'
p3961
I20
sg3632
g3721
sS'block_loop.thisIndex'
p3962
g3626
sg38
S'right'
p3963
sg58
g62
sS'trial_loop.thisN'
p3964
I20
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p3965
g59
(g98
S'\x14\x00\x00\x00'
tRp3966
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3967
I0
sg3641
g3729
sS'block_loop.thisRepN'
p3968
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3969
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p3970
Nsg69
Vn
sS'block_loop.thisTrialN'
p3971
I0
sg39
F1.2339814937299707
sg34
g752
(S'\x07\xdf\n\x15\x108\x05\x06\x0e\xc8'
tRp3972
sa(dp3973
S'trial_loop.thisTrialN'
p3974
I21
sg3632
g3866
sS'block_loop.thisIndex'
p3975
g3626
sg38
S'left'
p3976
sg58
g62
sS'trial_loop.thisN'
p3977
I21
sg33
g3870
sg63
g64
sS'trial_loop.thisIndex'
p3978
g59
(g98
S'\x15\x00\x00\x00'
tRp3979
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3980
I0
sg3641
g3874
sS'block_loop.thisRepN'
p3981
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3982
I1
sg3646
g3877
sg55
g11
sS'block_loop.thisTrial'
p3983
Nsg69
Vn
sS'block_loop.thisTrialN'
p3984
I0
sg39
F0.86679089329118142
sg34
g752
(S'\x07\xdf\n\x15\x108\x0b\n1`'
tRp3985
sa(dp3986
S'trial_loop.thisTrialN'
p3987
I22
sg3632
S'13-mccoys_steak_crisps.png'
p3988
sS'block_loop.thisIndex'
p3989
g3626
sg38
S'left'
p3990
sg58
g62
sS'trial_loop.thisN'
p3991
I22
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p3992
g59
(g98
S'\x16\x00\x00\x00'
tRp3993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3994
I0
sg3641
S'3-ellas_strawberries_apples.png'
p3995
sS'block_loop.thisRepN'
p3996
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3997
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p3998
Nsg69
Vn
sS'block_loop.thisTrialN'
p3999
I0
sg39
F1.6168387897255343
sg34
g752
(S'\x07\xdf\n\x15\x108\x11\x08\x9f\x08'
tRp4000
sa(dp4001
S'trial_loop.thisTrialN'
p4002
I23
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p4003
sS'block_loop.thisIndex'
p4004
g3626
sg38
S'left'
p4005
sg58
g62
sS'trial_loop.thisN'
p4006
I23
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4007
g59
(g98
S'\x17\x00\x00\x00'
tRp4008
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4009
I0
sg3641
S'36-fig_rolls.png'
p4010
sS'block_loop.thisRepN'
p4011
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4012
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4013
Nsg69
Vn
sS'block_loop.thisTrialN'
p4014
I0
sg39
F1.5167683135437073
sg34
g752
(S'\x07\xdf\n\x15\x108\x18\x034P'
tRp4015
sa(dp4016
S'trial_loop.thisTrialN'
p4017
I24
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p4018
sS'block_loop.thisIndex'
p4019
g3626
sg38
S'left'
p4020
sg58
g62
sS'trial_loop.thisN'
p4021
I24
sg33
S'17-jacobs_mini_cheddars_redo.png'
p4022
sg63
g64
sS'trial_loop.thisIndex'
p4023
g59
(g98
S'\x18\x00\x00\x00'
tRp4024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4025
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p4026
sS'block_loop.thisRepN'
p4027
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4028
I1
sg3646
S'8-liquorice_catherine_wheels.png'
p4029
sg55
g11
sS'block_loop.thisTrial'
p4030
Nsg69
Vn
sS'block_loop.thisTrialN'
p4031
I0
sg39
F0.9501808660588722
sg34
g752
(S'\x07\xdf\n\x15\x108\x1e\x0b\xa0\x90'
tRp4032
sa(dp4033
S'trial_loop.thisTrialN'
p4034
I25
sg3632
g3883
sS'block_loop.thisIndex'
p4035
g3626
sg38
S'left'
p4036
sg58
g62
sS'trial_loop.thisN'
p4037
I25
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4038
g59
(g98
S'\x19\x00\x00\x00'
tRp4039
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4040
I0
sg3641
g3890
sS'block_loop.thisRepN'
p4041
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4042
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4043
Nsg69
Vn
sS'block_loop.thisTrialN'
p4044
I0
sg39
F1.0500346678950336
sg34
g752
(S'\x07\xdf\n\x15\x108$\x0b}h'
tRp4045
sa(dp4046
S'trial_loop.thisTrialN'
p4047
I26
sg3632
g3915
sS'block_loop.thisIndex'
p4048
g3626
sg38
S'left'
p4049
sg58
g62
sS'trial_loop.thisN'
p4050
I26
sg33
g3800
sg63
g64
sS'trial_loop.thisIndex'
p4051
g59
(g98
S'\x1a\x00\x00\x00'
tRp4052
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4053
I0
sg3641
g3922
sS'block_loop.thisRepN'
p4054
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4055
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p4056
Nsg69
Vn
sS'block_loop.thisTrialN'
p4057
I0
sg39
F0.80013160115504434
sg34
g752
(S'\x07\xdf\n\x15\x108*\x0c\xc5\x88'
tRp4058
sa(dp4059
S'trial_loop.thisTrialN'
p4060
I27
sg3632
S'21-nakd_banana_crunch.png'
p4061
sS'block_loop.thisIndex'
p4062
g3626
sg38
S'right'
p4063
sg58
g62
sS'trial_loop.thisN'
p4064
I27
sg33
S'1-treacle_cookies.png'
p4065
sg63
g64
sS'trial_loop.thisIndex'
p4066
g59
(g98
S'\x1b\x00\x00\x00'
tRp4067
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4068
I0
sg3641
S'1-treacle_cookies.png'
p4069
sS'block_loop.thisRepN'
p4070
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4071
I1
sg3646
S'21-nakd_banana_crunch.png'
p4072
sg55
g11
sS'block_loop.thisTrial'
p4073
Nsg69
Vn
sS'block_loop.thisTrialN'
p4074
I0
sg39
F1.033431996186664
sg34
g752
(S'\x07\xdf\n\x15\x1080\n=\x18'
tRp4075
sa(dp4076
S'trial_loop.thisTrialN'
p4077
I28
sg3632
g3738
sS'block_loop.thisIndex'
p4078
g3626
sg38
S'left'
p4079
sg58
g62
sS'trial_loop.thisN'
p4080
I28
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4081
g59
(g98
S'\x1c\x00\x00\x00'
tRp4082
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4083
I0
sg3641
g3746
sS'block_loop.thisRepN'
p4084
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4085
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4086
Nsg69
Vn
sS'block_loop.thisTrialN'
p4087
I0
sg39
F1.0665848816047401
sg34
g752
(S'\x07\xdf\n\x15\x1086\x0bF\xb8'
tRp4088
sa(dp4089
S'trial_loop.thisTrialN'
p4090
I29
sg3632
S'2-steamed_puddings.png'
p4091
sS'block_loop.thisIndex'
p4092
g3626
sg38
S'left'
p4093
sg58
g62
sS'trial_loop.thisN'
p4094
I29
sg33
S'2-steamed_puddings.png'
p4095
sg63
g64
sS'trial_loop.thisIndex'
p4096
g59
(g98
S'\x1d\x00\x00\x00'
tRp4097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4098
I0
sg3641
S'20-fruit_pastilles.png'
p4099
sS'block_loop.thisRepN'
p4100
I1
sg3644
g4095
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4101
I1
sg3646
S'20-fruit_pastilles.png'
p4102
sg55
g11
sS'block_loop.thisTrial'
p4103
Nsg69
Vn
sS'block_loop.thisTrialN'
p4104
I0
sg39
F0.81690989312255624
sg34
g752
(S'\x07\xdf\n\x15\x109\x00\x0c\xcdX'
tRp4105
sa(dp4106
S'trial_loop.thisTrialN'
p4107
I30
sg3632
g3704
sS'block_loop.thisIndex'
p4108
g3626
sg38
S'right'
p4109
sg58
g62
sS'trial_loop.thisN'
p4110
I30
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p4111
g59
(g98
S'\x1e\x00\x00\x00'
tRp4112
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4113
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4114
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4115
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p4116
Nsg69
Vn
sS'block_loop.thisTrialN'
p4117
I0
sg39
F1.0168538428906686
sg34
g752
(S'\x07\xdf\n\x15\x109\x06\n\x83h'
tRp4118
sa(dp4119
S'trial_loop.thisTrialN'
p4120
I31
sg3632
S'51-mars.png'
p4121
sS'block_loop.thisIndex'
p4122
g3626
sg38
S'left'
p4123
sg58
g62
sS'trial_loop.thisN'
p4124
I31
sg33
S'51-mars.png'
p4125
sg63
g64
sS'trial_loop.thisIndex'
p4126
g59
(g98
S'\x1f\x00\x00\x00'
tRp4127
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4128
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p4129
sS'block_loop.thisRepN'
p4130
I1
sg3644
g4125
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4131
I1
sg3646
S'27-hartleys_raspberries_jelly.png'
p4132
sg55
g11
sS'block_loop.thisTrial'
p4133
Nsg69
Vn
sS'block_loop.thisTrialN'
p4134
I0
sg39
F1.066611110604299
sg34
g752
(S'\x07\xdf\n\x15\x109\x0c\x0b\x13\xf0'
tRp4135
sa(dp4136
S'trial_loop.thisTrialN'
p4137
I32
sg3632
S'5-pineapple.png'
p4138
sS'block_loop.thisIndex'
p4139
g3626
sg38
S'right'
p4140
sg58
g62
sS'trial_loop.thisN'
p4141
I32
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4142
g59
(g98
S' \x00\x00\x00'
tRp4143
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4144
I0
sg3641
S'40-sardines.png'
p4145
sS'block_loop.thisRepN'
p4146
I1
sg3644
g3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4147
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p4148
Nsg69
Vn
sS'block_loop.thisTrialN'
p4149
I0
sg39
F1.1167635239003175
sg34
g752
(S'\x07\xdf\n\x15\x109\x12\x0c\x9a\x90'
tRp4150
sa(dp4151
S'trial_loop.thisTrialN'
p4152
I33
sg3632
S'16-skips_prawn.png'
p4153
sS'block_loop.thisIndex'
p4154
g3626
sg38
S'left'
p4155
sg58
g62
sS'trial_loop.thisN'
p4156
I33
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p4157
g59
(g98
S'!\x00\x00\x00'
tRp4158
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4159
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p4160
sS'block_loop.thisRepN'
p4161
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4162
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4163
Nsg69
Vn
sS'block_loop.thisTrialN'
p4164
I0
sg39
F0.7334204212147597
sg34
g752
(S'\x07\xdf\n\x15\x109\x18\x0f\x13`'
tRp4165
sa(dp4166
S'trial_loop.thisTrialN'
p4167
I34
sg3632
g4138
sS'block_loop.thisIndex'
p4168
g3626
sg38
S'right'
p4169
sg58
g62
sS'trial_loop.thisN'
p4170
I34
sg33
g3782
sg63
g64
sS'trial_loop.thisIndex'
p4171
g59
(g98
S'"\x00\x00\x00'
tRp4172
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4173
I0
sg3641
g4145
sS'block_loop.thisRepN'
p4174
I1
sg3644
g3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4175
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p4176
Nsg69
Vn
sS'block_loop.thisTrialN'
p4177
I0
sg39
F0.93351404733994059
sg34
g752
(S'\x07\xdf\n\x15\x109\x1e\x0bZ@'
tRp4178
sa(dp4179
S'trial_loop.thisTrialN'
p4180
I35
sg3632
g4018
sS'block_loop.thisIndex'
p4181
g3626
sg38
S'left'
p4182
sg58
g62
sS'trial_loop.thisN'
p4183
I35
sg33
g4022
sg63
g64
sS'trial_loop.thisIndex'
p4184
g59
(g98
S'#\x00\x00\x00'
tRp4185
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4186
I0
sg3641
g4026
sS'block_loop.thisRepN'
p4187
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4188
I1
sg3646
g4029
sg55
g11
sS'block_loop.thisTrial'
p4189
Nsg69
Vn
sS'block_loop.thisTrialN'
p4190
I0
sg39
F1.3001988842411265
sg34
g752
(S'\x07\xdf\n\x15\x109$\n\xf8\x98'
tRp4191
sa(dp4192
S'trial_loop.thisTrialN'
p4193
I36
sg3632
g3988
sS'block_loop.thisIndex'
p4194
g3626
sg38
S'left'
p4195
sg58
g62
sS'trial_loop.thisN'
p4196
I36
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p4197
g59
(g98
S'$\x00\x00\x00'
tRp4198
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4199
I0
sg3641
g3995
sS'block_loop.thisRepN'
p4200
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4201
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p4202
Nsg69
Vn
sS'block_loop.thisTrialN'
p4203
I0
sg39
F0.85022727998421033
sg34
g752
(S'\x07\xdf\n\x15\x109+\x00\xcf\x08'
tRp4204
sa(dp4205
S'trial_loop.thisTrialN'
p4206
I37
sg3632
g4091
sS'block_loop.thisIndex'
p4207
g3626
sg38
S'left'
p4208
sg58
g62
sS'trial_loop.thisN'
p4209
I37
sg33
g4095
sg63
g64
sS'trial_loop.thisIndex'
p4210
g59
(g98
S'%\x00\x00\x00'
tRp4211
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4212
I0
sg3641
g4099
sS'block_loop.thisRepN'
p4213
I1
sg3644
g4095
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4214
I1
sg3646
g4102
sg55
g11
sS'block_loop.thisTrial'
p4215
Nsg69
Vn
sS'block_loop.thisTrialN'
p4216
I0
sg39
F1.3335228283531251
sg34
g752
(S'\x07\xdf\n\x15\x1090\x0e@p'
tRp4217
sa(dp4218
S'trial_loop.thisTrialN'
p4219
I38
sg3632
g4138
sS'block_loop.thisIndex'
p4220
g3626
sg38
S'right'
p4221
sg58
g62
sS'trial_loop.thisN'
p4222
I38
sg33
g3782
sg63
g64
sS'trial_loop.thisIndex'
p4223
g59
(g98
S'&\x00\x00\x00'
tRp4224
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4225
I0
sg3641
g4145
sS'block_loop.thisRepN'
p4226
I1
sg3644
g3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4227
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p4228
Nsg69
Vn
sS'block_loop.thisTrialN'
p4229
I0
sg39
F0.71688816866844718
sg34
g752
(S'\x07\xdf\n\x15\x1097\x04\x8f\xf8'
tRp4230
sa(dp4231
S'trial_loop.thisTrialN'
p4232
I39
sg3632
S'23-crunchie_redo.png'
p4233
sS'block_loop.thisIndex'
p4234
g3626
sg38
S'left'
p4235
sg58
g62
sS'trial_loop.thisN'
p4236
I39
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4237
g59
(g98
S"'\x00\x00\x00"
tRp4238
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4239
I0
sg3641
S'33-ambrosia_rice.png'
p4240
sS'block_loop.thisRepN'
p4241
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4242
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4243
Nsg69
Vn
sS'block_loop.thisTrialN'
p4244
I0
sg39
F0.71681632401714523
sg34
g752
(S'\x07\xdf\n\x15\x10:\x01\x00\xd6\xd8'
tRp4245
sa(dp4246
S'trial_loop.thisTrialN'
p4247
I40
sg3632
S'8-liquorice_catherine_wheels.png'
p4248
sS'block_loop.thisIndex'
p4249
g3626
sg38
S'right'
p4250
sg58
g62
sS'trial_loop.thisN'
p4251
I40
sg33
g4022
sg63
g64
sS'trial_loop.thisIndex'
p4252
g59
(g98
S'(\x00\x00\x00'
tRp4253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4254
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p4255
sS'block_loop.thisRepN'
p4256
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4257
I1
sg3646
g4029
sg55
g11
sS'block_loop.thisTrial'
p4258
Nsg69
Vn
sS'block_loop.thisTrialN'
p4259
I0
sg39
F1.0001331406833742
sg34
g752
(S'\x07\xdf\n\x15\x10:\x06\x0c%`'
tRp4260
sa(dp4261
S'trial_loop.thisTrialN'
p4262
I41
sg3632
S'50-polo.png'
p4263
sS'block_loop.thisIndex'
p4264
g3626
sg38
S'right'
p4265
sg58
g62
sS'trial_loop.thisN'
p4266
I41
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p4267
g59
(g98
S')\x00\x00\x00'
tRp4268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4269
I0
sg3641
S'48-twix.png'
p4270
sS'block_loop.thisRepN'
p4271
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4272
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4273
Nsg69
Vn
sS'block_loop.thisTrialN'
p4274
I0
sg39
F0.88352556529207504
sg34
g752
(S'\x07\xdf\n\x15\x10:\x0c\x0c\xb5\xe8'
tRp4275
sa(dp4276
S'trial_loop.thisTrialN'
p4277
I42
sg3632
S'20-fruit_pastilles.png'
p4278
sS'block_loop.thisIndex'
p4279
g3626
sg38
S'right'
p4280
sg58
g62
sS'trial_loop.thisN'
p4281
I42
sg33
g4095
sg63
g64
sS'trial_loop.thisIndex'
p4282
g59
(g98
S'*\x00\x00\x00'
tRp4283
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4284
I0
sg3641
S'2-steamed_puddings.png'
p4285
sS'block_loop.thisRepN'
p4286
I1
sg3644
g4095
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4287
I1
sg3646
g4102
sg55
g11
sS'block_loop.thisTrial'
p4288
Nsg69
Vn
sS'block_loop.thisTrialN'
p4289
I0
sg39
F1.1168641634317282
sg34
g752
(S'\x07\xdf\n\x15\x10:\x12\x0bb\x10'
tRp4290
sa(dp4291
S'trial_loop.thisTrialN'
p4292
I43
sg3632
S'30-spaghetti_hoops.png'
p4293
sS'block_loop.thisIndex'
p4294
g3626
sg38
S'right'
p4295
sg58
g62
sS'trial_loop.thisN'
p4296
I43
sg33
g3949
sg63
g64
sS'trial_loop.thisIndex'
p4297
g59
(g98
S'+\x00\x00\x00'
tRp4298
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4299
I0
sg3641
S'19-caramello_redo.png'
p4300
sS'block_loop.thisRepN'
p4301
I1
sg3644
g3949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4302
I1
sg3646
g3956
sg55
g11
sS'block_loop.thisTrial'
p4303
Nsg69
Vn
sS'block_loop.thisTrialN'
p4304
I0
sg39
F1.300188620719382
sg34
g752
(S'\x07\xdf\n\x15\x10:\x18\r\x9c`'
tRp4305
sa(dp4306
S'trial_loop.thisTrialN'
p4307
I44
sg3632
g4153
sS'block_loop.thisIndex'
p4308
g3626
sg38
S'left'
p4309
sg58
g62
sS'trial_loop.thisN'
p4310
I44
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p4311
g59
(g98
S',\x00\x00\x00'
tRp4312
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4313
I0
sg3641
g4160
sS'block_loop.thisRepN'
p4314
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4315
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4316
Nsg69
Vn
sS'block_loop.thisTrialN'
p4317
I0
sg39
F1.3500510895296429
sg34
g752
(S'\x07\xdf\n\x15\x10:\x1f\x03r\xd0'
tRp4318
sa(dp4319
S'trial_loop.thisTrialN'
p4320
I45
sg3632
S'1-treacle_cookies.png'
p4321
sS'block_loop.thisIndex'
p4322
g3626
sg38
S'left'
p4323
sg58
g62
sS'trial_loop.thisN'
p4324
I45
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p4325
g59
(g98
S'-\x00\x00\x00'
tRp4326
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4327
I0
sg3641
S'21-nakd_banana_crunch.png'
p4328
sS'block_loop.thisRepN'
p4329
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4330
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p4331
Nsg69
Vn
sS'block_loop.thisTrialN'
p4332
I0
sg39
F0.88354580723716936
sg34
g752
(S'\x07\xdf\n\x15\x10:%\t}\xb0'
tRp4333
sa(dp4334
S'trial_loop.thisTrialN'
p4335
I46
sg3632
g4138
sS'block_loop.thisIndex'
p4336
g3626
sg38
S'right'
p4337
sg58
g62
sS'trial_loop.thisN'
p4338
I46
sg33
g3782
sg63
g64
sS'trial_loop.thisIndex'
p4339
g59
(g98
S'.\x00\x00\x00'
tRp4340
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4341
I0
sg3641
g4145
sS'block_loop.thisRepN'
p4342
I1
sg3644
g3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4343
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p4344
Nsg69
Vn
sS'block_loop.thisTrialN'
p4345
I0
sg39
F0.8005675157260157
sg34
g752
(S'\x07\xdf\n\x15\x10:+\x08%\xf0'
tRp4346
sa(dp4347
S'trial_loop.thisTrialN'
p4348
I47
sg3632
S'46-pistachios.png'
p4349
sS'block_loop.thisIndex'
p4350
g3626
sg38
S'left'
p4351
sg58
g62
sS'trial_loop.thisN'
p4352
I47
sg33
S'46-pistachios.png'
p4353
sg63
g64
sS'trial_loop.thisIndex'
p4354
g59
(g98
S'/\x00\x00\x00'
tRp4355
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4356
I0
sg3641
S'29-beans.png'
p4357
sS'block_loop.thisRepN'
p4358
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4359
I1
sg3646
S'29-beans.png'
p4360
sg55
g11
sS'block_loop.thisTrial'
p4361
Nsg69
Vn
sS'block_loop.thisTrialN'
p4362
I0
sg39
F1.0001673524220678
sg34
g752
(S'\x07\xdf\n\x15\x10:1\x05\x9d\x80'
tRp4363
sa(dp4364
S'trial_loop.thisTrialN'
p4365
I48
sg3632
g4293
sS'block_loop.thisIndex'
p4366
g3626
sg38
S'right'
p4367
sg58
g62
sS'trial_loop.thisN'
p4368
I48
sg33
g3949
sg63
g64
sS'trial_loop.thisIndex'
p4369
g59
(g98
S'0\x00\x00\x00'
tRp4370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4371
I0
sg3641
g4300
sS'block_loop.thisRepN'
p4372
I1
sg3644
g3949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4373
I1
sg3646
g3956
sg55
g11
sS'block_loop.thisTrial'
p4374
Nsg69
Vn
sS'block_loop.thisTrialN'
p4375
I0
sg39
F0.85014118044182396
sg34
g752
(S'\x07\xdf\n\x15\x10:7\x061\xf0'
tRp4376
sa(dp4377
S'trial_loop.thisTrialN'
p4378
I49
sg3632
g3819
sS'block_loop.thisIndex'
p4379
g3626
sg38
S'right'
p4380
sg58
g62
sS'trial_loop.thisN'
p4381
I49
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p4382
g59
(g98
S'1\x00\x00\x00'
tRp4383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4384
I0
sg3641
g3827
sS'block_loop.thisRepN'
p4385
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4386
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p4387
Nsg69
Vn
sS'block_loop.thisTrialN'
p4388
I0
sg39
F0.76685868955337355
sg34
g752
(S'\x07\xdf\n\x15\x10;\x01\x04a\x18'
tRp4389
sa(dp4390
S'trial_loop.thisTrialN'
p4391
I50
sg3632
g4233
sS'block_loop.thisIndex'
p4392
g3626
sg38
S'left'
p4393
sg58
g62
sS'trial_loop.thisN'
p4394
I50
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4395
g59
(g98
S'2\x00\x00\x00'
tRp4396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4397
I0
sg3641
g4240
sS'block_loop.thisRepN'
p4398
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4399
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4400
Nsg69
Vn
sS'block_loop.thisTrialN'
p4401
I0
sg39
F1.3335048671897312
sg34
g752
(S'\x07\xdf\n\x15\x10;\x07\x01!\x10'
tRp4402
sa(dp4403
S'trial_loop.thisTrialN'
p4404
I51
sg3632
g4003
sS'block_loop.thisIndex'
p4405
g3626
sg38
S'left'
p4406
sg58
g62
sS'trial_loop.thisN'
p4407
I51
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p4408
g59
(g98
S'3\x00\x00\x00'
tRp4409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4410
I0
sg3641
g4010
sS'block_loop.thisRepN'
p4411
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4412
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4413
Nsg69
Vn
sS'block_loop.thisTrialN'
p4414
I0
sg39
F1.5004538757339105
sg34
g752
(S'\x07\xdf\n\x15\x10;\r\x06\xf1X'
tRp4415
sa(dp4416
S'trial_loop.thisTrialN'
p4417
I52
sg3632
S'43-mrporky_pork_crackles_redo.png'
p4418
sS'block_loop.thisIndex'
p4419
g3626
sg38
S'right'
p4420
sg58
g62
sS'trial_loop.thisN'
p4421
I52
sg33
g3859
sg63
g64
sS'trial_loop.thisIndex'
p4422
g59
(g98
S'4\x00\x00\x00'
tRp4423
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4424
I0
sg3641
S'18-mms.png'
p4425
sS'block_loop.thisRepN'
p4426
I1
sg3644
g3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4427
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p4428
Nsg69
Vn
sS'block_loop.thisTrialN'
p4429
I0
sg39
F1.4168566368489337
sg34
g752
(S'\x07\xdf\n\x15\x10;\x13\x0e\xe4\x80'
tRp4430
sa(dp4431
S'trial_loop.thisTrialN'
p4432
I53
sg3632
g4293
sS'block_loop.thisIndex'
p4433
g3626
sg38
S'right'
p4434
sg58
g62
sS'trial_loop.thisN'
p4435
I53
sg33
g3956
sg63
g64
sS'trial_loop.thisIndex'
p4436
g59
(g98
S'5\x00\x00\x00'
tRp4437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4438
I0
sg3641
g4300
sS'block_loop.thisRepN'
p4439
I1
sg3644
g3949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4440
I1
sg3646
g3956
sg55
g11
sS'block_loop.thisTrial'
p4441
Nsg69
Vn
sS'block_loop.thisTrialN'
p4442
I0
sg39
F1.1335061786403458
sg34
g752
(S'\x07\xdf\n\x15\x10;\x1a\x06\x9fP'
tRp4443
sa(dp4444
S'trial_loop.thisTrialN'
p4445
I54
sg3632
g3721
sS'block_loop.thisIndex'
p4446
g3626
sg38
S'left'
p4447
sg58
g62
sS'trial_loop.thisN'
p4448
I54
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p4449
g59
(g98
S'6\x00\x00\x00'
tRp4450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4451
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4452
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4453
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4454
Nsg69
Vn
sS'block_loop.thisTrialN'
p4455
I0
sg39
F1.0835105691462559
sg34
g752
(S'\x07\xdf\n\x15\x10; \t\x18 '
tRp4456
sa(dp4457
S'trial_loop.thisTrialN'
p4458
I55
sg3632
S'27-hartleys_raspberries_jelly.png'
p4459
sS'block_loop.thisIndex'
p4460
g3626
sg38
S'right'
p4461
sg58
g62
sS'trial_loop.thisN'
p4462
I55
sg33
g4125
sg63
g64
sS'trial_loop.thisIndex'
p4463
g59
(g98
S'7\x00\x00\x00'
tRp4464
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4465
I0
sg3641
S'51-mars.png'
p4466
sS'block_loop.thisRepN'
p4467
I1
sg3644
g4125
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4468
I1
sg3646
g4132
sg55
g11
sS'block_loop.thisTrial'
p4469
Nsg69
Vn
sS'block_loop.thisTrialN'
p4470
I0
sg39
F0.80019916933906643
sg34
g752
(S'\x07\xdf\n\x15\x10;&\n\xd9X'
tRp4471
sa(dp4472
S'trial_loop.thisTrialN'
p4473
I56
sg3632
S'29-beans.png'
p4474
sS'block_loop.thisIndex'
p4475
g3626
sg38
S'right'
p4476
sg58
g62
sS'trial_loop.thisN'
p4477
I56
sg33
g4353
sg63
g64
sS'trial_loop.thisIndex'
p4478
g59
(g98
S'8\x00\x00\x00'
tRp4479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4480
I0
sg3641
S'46-pistachios.png'
p4481
sS'block_loop.thisRepN'
p4482
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4483
I1
sg3646
g4360
sg55
g11
sS'block_loop.thisTrial'
p4484
Nsg69
Vn
sS'block_loop.thisTrialN'
p4485
I0
sg39
F0.9172064518775187
sg34
g752
(S'\x07\xdf\n\x15\x10;,\x08T\xd0'
tRp4486
sa(dp4487
S'trial_loop.thisTrialN'
p4488
I57
sg3632
g3849
sS'block_loop.thisIndex'
p4489
g3626
sg38
S'left'
p4490
sg58
g62
sS'trial_loop.thisN'
p4491
I57
sg33
g3859
sg63
g64
sS'trial_loop.thisIndex'
p4492
g59
(g98
S'9\x00\x00\x00'
tRp4493
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4494
I0
sg3641
g3857
sS'block_loop.thisRepN'
p4495
I1
sg3644
g3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4496
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p4497
Nsg69
Vn
sS'block_loop.thisTrialN'
p4498
I0
sg39
F0.96688446239659243
sg34
g752
(S'\x07\xdf\n\x15\x10;2\x07\xb4\xa8'
tRp4499
sa(dp4500
S'trial_loop.thisTrialN'
p4501
I58
sg3632
S'25-kitkat.png'
p4502
sS'block_loop.thisIndex'
p4503
g3626
sg38
S'left'
p4504
sg58
g62
sS'trial_loop.thisN'
p4505
I58
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4506
g59
(g98
S':\x00\x00\x00'
tRp4507
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4508
I0
sg3641
S'31-hobnobs.png'
p4509
sS'block_loop.thisRepN'
p4510
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4511
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4512
Nsg69
Vn
sS'block_loop.thisTrialN'
p4513
I0
sg39
F1.1501268115111998
sg34
g752
(S'\x07\xdf\n\x15\x10;8\x07\x8d\x98'
tRp4514
sa(dp4515
S'trial_loop.thisTrialN'
p4516
I59
sg3632
g3945
sS'block_loop.thisIndex'
p4517
g3626
sg38
S'left'
p4518
sg58
g62
sS'trial_loop.thisN'
p4519
I59
sg33
g3949
sg63
g64
sS'trial_loop.thisIndex'
p4520
g59
(g98
S';\x00\x00\x00'
tRp4521
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4522
I0
sg3641
g3953
sS'block_loop.thisRepN'
p4523
I1
sg3644
g3949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4524
I1
sg3646
g3956
sg55
g11
sS'block_loop.thisTrial'
p4525
Nsg69
Vn
sS'block_loop.thisTrialN'
p4526
I0
sg39
F1.0167785770649971
sg34
g752
(S'\x07\xdf\n\x15\x11\x00\x02\n\x83h'
tRp4527
sa(dp4528
S'trial_loop.thisTrialN'
p4529
I60
sg3632
g3930
sS'block_loop.thisIndex'
p4530
g3626
sg38
S'right'
p4531
sg58
g62
sS'trial_loop.thisN'
p4532
I60
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p4533
g59
(g98
S'<\x00\x00\x00'
tRp4534
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4535
I0
sg3641
g3937
sS'block_loop.thisRepN'
p4536
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4537
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p4538
Nsg69
Vn
sS'block_loop.thisTrialN'
p4539
I0
sg39
F1.000187879465102
sg34
g752
(S'\x07\xdf\n\x15\x11\x00\x08\x0b\x13\xf0'
tRp4540
sa(dp4541
S'trial_loop.thisTrialN'
p4542
I61
sg3632
g4018
sS'block_loop.thisIndex'
p4543
g3626
sg38
S'left'
p4544
sg58
g62
sS'trial_loop.thisN'
p4545
I61
sg33
g4029
sg63
g64
sS'trial_loop.thisIndex'
p4546
g59
(g98
S'=\x00\x00\x00'
tRp4547
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4548
I0
sg3641
g4026
sS'block_loop.thisRepN'
p4549
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4550
I1
sg3646
g4029
sg55
g11
sS'block_loop.thisTrial'
p4551
Nsg69
Vn
sS'block_loop.thisTrialN'
p4552
I0
sg39
F0.75056335329782087
sg34
g752
(S'\x07\xdf\n\x15\x11\x00\x0e\x0b\xa4x'
tRp4553
sa(dp4554
S'trial_loop.thisTrialN'
p4555
I62
sg3632
g4349
sS'block_loop.thisIndex'
p4556
g3626
sg38
S'left'
p4557
sg58
g62
sS'trial_loop.thisN'
p4558
I62
sg33
g4353
sg63
g64
sS'trial_loop.thisIndex'
p4559
g59
(g98
S'>\x00\x00\x00'
tRp4560
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4561
I0
sg3641
g4357
sS'block_loop.thisRepN'
p4562
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4563
I1
sg3646
g4360
sg55
g11
sS'block_loop.thisTrial'
p4564
Nsg69
Vn
sS'block_loop.thisTrialN'
p4565
I0
sg39
F0.81674966814625805
sg34
g752
(S'\x07\xdf\n\x15\x11\x00\x14\x08hX'
tRp4566
sa(dp4567
S'trial_loop.thisTrialN'
p4568
I63
sg3632
g4263
sS'block_loop.thisIndex'
p4569
g3626
sg38
S'right'
p4570
sg58
g62
sS'trial_loop.thisN'
p4571
I63
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4572
g59
(g98
S'?\x00\x00\x00'
tRp4573
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4574
I0
sg3641
g4270
sS'block_loop.thisRepN'
p4575
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4576
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4577
Nsg69
Vn
sS'block_loop.thisTrialN'
p4578
I0
sg39
F0.86685703598595865
sg34
g752
(S'\x07\xdf\n\x15\x11\x00\x1a\x06\x1eh'
tRp4579
sa(dp4580
S'trial_loop.thisTrialN'
p4581
I64
sg3632
g3687
sS'block_loop.thisIndex'
p4582
g3626
sg38
S'left'
p4583
sg58
g62
sS'trial_loop.thisN'
p4584
I64
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p4585
g59
(g98
S'@\x00\x00\x00'
tRp4586
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4587
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4588
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4589
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p4590
Nsg69
Vn
sS'block_loop.thisTrialN'
p4591
I0
sg39
F1.1168541850079237
sg34
g752
(S'\x07\xdf\n\x15\x11\x00 \x04\x88('
tRp4592
sa(dp4593
S'trial_loop.thisTrialN'
p4594
I65
sg3632
g3898
sS'block_loop.thisIndex'
p4595
g3626
sg38
S'right'
p4596
sg58
g62
sS'trial_loop.thisN'
p4597
I65
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p4598
g59
(g98
S'A\x00\x00\x00'
tRp4599
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4600
I0
sg3641
g3906
sS'block_loop.thisRepN'
p4601
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4602
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p4603
Nsg69
Vn
sS'block_loop.thisTrialN'
p4604
I0
sg39
F1.2669068710852116
sg34
g752
(S'\x07\xdf\n\x15\x11\x00&\x06\xc6`'
tRp4605
sa(dp4606
S'trial_loop.thisTrialN'
p4607
I66
sg3632
S'26-walkers_smoky_bacon.png'
p4608
sS'block_loop.thisIndex'
p4609
g3626
sg38
S'left'
p4610
sg58
g62
sS'trial_loop.thisN'
p4611
I66
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4612
g59
(g98
S'B\x00\x00\x00'
tRp4613
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4614
I0
sg3641
S'44-crunch.png'
p4615
sS'block_loop.thisRepN'
p4616
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4617
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p4618
Nsg69
Vn
sS'block_loop.thisTrialN'
p4619
I0
sg39
F0.63352699078086516
sg34
g752
(S'\x07\xdf\n\x15\x11\x00,\x0bb\x10'
tRp4620
sa(dp4621
S'trial_loop.thisTrialN'
p4622
I67
sg3632
g3915
sS'block_loop.thisIndex'
p4623
g3626
sg38
S'left'
p4624
sg58
g62
sS'trial_loop.thisN'
p4625
I67
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p4626
g59
(g98
S'C\x00\x00\x00'
tRp4627
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4628
I0
sg3641
g3922
sS'block_loop.thisRepN'
p4629
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4630
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p4631
Nsg69
Vn
sS'block_loop.thisTrialN'
p4632
I0
sg39
F1.5171771438217547
sg34
g752
(S'\x07\xdf\n\x15\x11\x002\x06=\xa8'
tRp4633
sa(dp4634
S'trial_loop.thisTrialN'
p4635
I68
sg3632
g4502
sS'block_loop.thisIndex'
p4636
g3626
sg38
S'left'
p4637
sg58
g62
sS'trial_loop.thisN'
p4638
I68
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p4639
g59
(g98
S'D\x00\x00\x00'
tRp4640
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4641
I0
sg3641
g4509
sS'block_loop.thisRepN'
p4642
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4643
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4644
Nsg69
Vn
sS'block_loop.thisTrialN'
p4645
I0
sg39
F1.0335312102288299
sg34
g752
(S'\x07\xdf\n\x15\x11\x008\x0e\xa9\xe8'
tRp4646
sa(dp4647
S'trial_loop.thisTrialN'
p4648
I69
sg3632
g3866
sS'block_loop.thisIndex'
p4649
g3626
sg38
S'left'
p4650
sg58
g62
sS'trial_loop.thisN'
p4651
I69
sg33
g3870
sg63
g64
sS'trial_loop.thisIndex'
p4652
g59
(g98
S'E\x00\x00\x00'
tRp4653
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4654
I0
sg3641
g3874
sS'block_loop.thisRepN'
p4655
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4656
I1
sg3646
g3877
sg55
g11
sS'block_loop.thisTrial'
p4657
Nsg69
Vn
sS'block_loop.thisTrialN'
p4658
I0
sg39
F0.85018337491965212
sg34
g752
(S'\x07\xdf\n\x15\x11\x01\x03\x00\xeeH'
tRp4659
sa(dp4660
S'trial_loop.thisTrialN'
p4661
I70
sg3632
g4321
sS'block_loop.thisIndex'
p4662
g3626
sg38
S'left'
p4663
sg58
g62
sS'trial_loop.thisN'
p4664
I70
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p4665
g59
(g98
S'F\x00\x00\x00'
tRp4666
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4667
I0
sg3641
g4328
sS'block_loop.thisRepN'
p4668
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4669
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p4670
Nsg69
Vn
sS'block_loop.thisTrialN'
p4671
I0
sg39
F0.83352567933070532
sg34
g752
(S'\x07\xdf\n\x15\x11\x01\x08\x0e_\xb0'
tRp4672
sa(dp4673
S'trial_loop.thisTrialN'
p4674
I71
sg3632
S'35-raisins.png'
p4675
sS'block_loop.thisIndex'
p4676
g3626
sg38
S'right'
p4677
sg58
g62
sS'trial_loop.thisN'
p4678
I71
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p4679
g59
(g98
S'G\x00\x00\x00'
tRp4680
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4681
I0
sg3641
S'49-yorkie.png'
p4682
sS'block_loop.thisRepN'
p4683
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4684
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p4685
Nsg69
Vn
sS'block_loop.thisTrialN'
p4686
I0
sg39
F1.3668416407035693
sg34
g752
(S'\x07\xdf\n\x15\x11\x01\x0e\x0cPX'
tRp4687
sa(dp4688
S'trial_loop.thisTrialN'
p4689
I72
sg3632
g3755
sS'block_loop.thisIndex'
p4690
g3626
sg38
S'right'
p4691
sg58
g62
sS'trial_loop.thisN'
p4692
I72
sg33
g3766
sg63
g64
sS'trial_loop.thisIndex'
p4693
g59
(g98
S'H\x00\x00\x00'
tRp4694
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4695
I0
sg3641
g3763
sS'block_loop.thisRepN'
p4696
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4697
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4698
Nsg69
Vn
sS'block_loop.thisTrialN'
p4699
I0
sg39
F0.86689580929032672
sg34
g752
(S'\x07\xdf\n\x15\x11\x01\x15\x03Wx'
tRp4700
sa(dp4701
S'trial_loop.thisTrialN'
p4702
I73
sg3632
g3704
sS'block_loop.thisIndex'
p4703
g3626
sg38
S'right'
p4704
sg58
g62
sS'trial_loop.thisN'
p4705
I73
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4706
g59
(g98
S'I\x00\x00\x00'
tRp4707
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4708
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4709
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4710
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p4711
Nsg69
Vn
sS'block_loop.thisTrialN'
p4712
I0
sg39
F1.0001895900522868
sg34
g752
(S'\x07\xdf\n\x15\x11\x01\x1b\x01\xc5 '
tRp4713
sa(dp4714
S'trial_loop.thisTrialN'
p4715
I74
sg3632
g4018
sS'block_loop.thisIndex'
p4716
g3626
sg38
S'left'
p4717
sg58
g62
sS'trial_loop.thisN'
p4718
I74
sg33
g4022
sg63
g64
sS'trial_loop.thisIndex'
p4719
g59
(g98
S'J\x00\x00\x00'
tRp4720
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4721
I0
sg3641
g4026
sS'block_loop.thisRepN'
p4722
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4723
I1
sg3646
g4029
sg55
g11
sS'block_loop.thisTrial'
p4724
Nsg69
Vn
sS'block_loop.thisTrialN'
p4725
I0
sg39
F1.466847114581924
sg34
g752
(S'\x07\xdf\n\x15\x11\x01!\x02U\xa8'
tRp4726
sa(dp4727
S'trial_loop.thisTrialN'
p4728
I75
sg3632
g4091
sS'block_loop.thisIndex'
p4729
g3626
sg38
S'left'
p4730
sg58
g62
sS'trial_loop.thisN'
p4731
I75
sg33
g4102
sg63
g64
sS'trial_loop.thisIndex'
p4732
g59
(g98
S'K\x00\x00\x00'
tRp4733
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4734
I0
sg3641
g4099
sS'block_loop.thisRepN'
p4735
I1
sg3644
g4095
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4736
I1
sg3646
g4102
sg55
g11
sS'block_loop.thisTrial'
p4737
Nsg69
Vn
sS'block_loop.thisTrialN'
p4738
I0
sg39
F0.91686262390339834
sg34
g752
(S"\x07\xdf\n\x15\x11\x01'\t\xcf\xb8"
tRp4739
sa(dp4740
S'trial_loop.thisTrialN'
p4741
I76
sg3632
g4418
sS'block_loop.thisIndex'
p4742
g3626
sg38
S'right'
p4743
sg58
g62
sS'trial_loop.thisN'
p4744
I76
sg33
g3859
sg63
g64
sS'trial_loop.thisIndex'
p4745
g59
(g98
S'L\x00\x00\x00'
tRp4746
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4747
I0
sg3641
g4425
sS'block_loop.thisRepN'
p4748
I1
sg3644
g3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4749
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p4750
Nsg69
Vn
sS'block_loop.thisTrialN'
p4751
I0
sg39
F1.2335336050505248
sg34
g752
(S'\x07\xdf\n\x15\x11\x01-\t/\x90'
tRp4752
sa(dp4753
S'trial_loop.thisTrialN'
p4754
I77
sg3632
g4608
sS'block_loop.thisIndex'
p4755
g3626
sg38
S'left'
p4756
sg58
g62
sS'trial_loop.thisN'
p4757
I77
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p4758
g59
(g98
S'M\x00\x00\x00'
tRp4759
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4760
I0
sg3641
g4615
sS'block_loop.thisRepN'
p4761
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4762
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p4763
Nsg69
Vn
sS'block_loop.thisTrialN'
p4764
I0
sg39
F0.73386688440541548
sg34
g752
(S'\x07\xdf\n\x15\x11\x013\r\x17\x90'
tRp4765
sa(dp4766
S'trial_loop.thisTrialN'
p4767
I78
sg3632
g3849
sS'block_loop.thisIndex'
p4768
g3626
sg38
S'left'
p4769
sg58
g62
sS'trial_loop.thisN'
p4770
I78
sg33
g3859
sg63
g64
sS'trial_loop.thisIndex'
p4771
g59
(g98
S'N\x00\x00\x00'
tRp4772
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4773
I0
sg3641
g3857
sS'block_loop.thisRepN'
p4774
I1
sg3644
g3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4775
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p4776
Nsg69
Vn
sS'block_loop.thisTrialN'
p4777
I0
sg39
F0.80014585604612876
sg34
g752
(S'\x07\xdf\n\x15\x11\x019\t\x9c\xf0'
tRp4778
sa(dp4779
S'trial_loop.thisTrialN'
p4780
I79
sg3632
g3738
sS'block_loop.thisIndex'
p4781
g3626
sg38
S'right'
p4782
sg58
g62
sS'trial_loop.thisN'
p4783
I79
sg33
g3749
sg63
g64
sS'trial_loop.thisIndex'
p4784
g59
(g98
S'O\x00\x00\x00'
tRp4785
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4786
I0
sg3641
g3746
sS'block_loop.thisRepN'
p4787
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4788
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4789
Nsg69
Vn
sS'block_loop.thisTrialN'
p4790
I0
sg39
F1.2331233492836873
sg34
g752
(S'\x07\xdf\n\x15\x11\x02\x03\x07\x14\x80'
tRp4791
sa(dp4792
S'trial_loop.thisTrialN'
p4793
I80
sg3632
g4233
sS'block_loop.thisIndex'
p4794
g3626
sg38
S'left'
p4795
sg58
g62
sS'trial_loop.thisN'
p4796
I80
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4797
g59
(g98
S'P\x00\x00\x00'
tRp4798
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4799
I0
sg3641
g4240
sS'block_loop.thisRepN'
p4800
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4801
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4802
Nsg69
Vn
sS'block_loop.thisTrialN'
p4803
I0
sg39
F0.75006101093413236
sg34
g752
(S'\x07\xdf\n\x15\x11\x02\t\x0b7\x18'
tRp4804
sa(dp4805
S'trial_loop.thisTrialN'
p4806
I81
sg3632
g4321
sS'block_loop.thisIndex'
p4807
g3626
sg38
S'left'
p4808
sg58
g62
sS'trial_loop.thisN'
p4809
I81
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p4810
g59
(g98
S'Q\x00\x00\x00'
tRp4811
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4812
I0
sg3641
g4328
sS'block_loop.thisRepN'
p4813
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4814
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p4815
Nsg69
Vn
sS'block_loop.thisTrialN'
p4816
I0
sg39
F0.80017522112211736
sg34
g752
(S'\x07\xdf\n\x15\x11\x02\x0f\x07\xbcx'
tRp4817
sa(dp4818
S'trial_loop.thisTrialN'
p4819
I82
sg3632
g3772
sS'block_loop.thisIndex'
p4820
g3626
sg38
S'left'
p4821
sg58
g62
sS'trial_loop.thisN'
p4822
I82
sg33
g3782
sg63
g64
sS'trial_loop.thisIndex'
p4823
g59
(g98
S'R\x00\x00\x00'
tRp4824
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4825
I0
sg3641
g3780
sS'block_loop.thisRepN'
p4826
I1
sg3644
g3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4827
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p4828
Nsg69
Vn
sS'block_loop.thisTrialN'
p4829
I0
sg39
F1.0001793265305423
sg34
g752
(S'\x07\xdf\n\x15\x11\x02\x15\x057\xf0'
tRp4830
sa(dp4831
S'trial_loop.thisTrialN'
p4832
I83
sg3632
g4003
sS'block_loop.thisIndex'
p4833
g3626
sg38
S'right'
p4834
sg58
g62
sS'trial_loop.thisN'
p4835
I83
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4836
g59
(g98
S'S\x00\x00\x00'
tRp4837
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4838
I0
sg3641
g4010
sS'block_loop.thisRepN'
p4839
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4840
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4841
Nsg69
Vn
sS'block_loop.thisTrialN'
p4842
I0
sg39
F2.0338619237036255
sg34
g752
(S'\x07\xdf\n\x15\x11\x02\x1b\x05\xc8x'
tRp4843
sa(dp4844
S'trial_loop.thisTrialN'
p4845
I84
sg3632
g3945
sS'block_loop.thisIndex'
p4846
g3626
sg38
S'left'
p4847
sg58
g62
sS'trial_loop.thisN'
p4848
I84
sg33
g3956
sg63
g64
sS'trial_loop.thisIndex'
p4849
g59
(g98
S'T\x00\x00\x00'
tRp4850
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4851
I0
sg3641
g3953
sS'block_loop.thisRepN'
p4852
I1
sg3644
g3949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4853
I1
sg3646
g3956
sg55
g11
sS'block_loop.thisTrial'
p4854
Nsg69
Vn
sS'block_loop.thisTrialN'
p4855
I0
sg39
F0.75019985357403129
sg34
g752
(S'\x07\xdf\n\x15\x11\x02"\x06\xce0'
tRp4856
sa(dp4857
S'trial_loop.thisTrialN'
p4858
I85
sg3632
g3915
sS'block_loop.thisIndex'
p4859
g3626
sg38
S'left'
p4860
sg58
g62
sS'trial_loop.thisN'
p4861
I85
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p4862
g59
(g98
S'U\x00\x00\x00'
tRp4863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4864
I0
sg3641
g3922
sS'block_loop.thisRepN'
p4865
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4866
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p4867
Nsg69
Vn
sS'block_loop.thisTrialN'
p4868
I0
sg39
F0.65020378792405609
sg34
g752
(S'\x07\xdf\n\x15\x11\x02(\x03\x8e('
tRp4869
sa(dp4870
S'trial_loop.thisTrialN'
p4871
I86
sg3632
g4091
sS'block_loop.thisIndex'
p4872
g3626
sg38
S'left'
p4873
sg58
g62
sS'trial_loop.thisN'
p4874
I86
sg33
g4095
sg63
g64
sS'trial_loop.thisIndex'
p4875
g59
(g98
S'V\x00\x00\x00'
tRp4876
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4877
I0
sg3641
g4099
sS'block_loop.thisRepN'
p4878
I1
sg3644
g4095
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4879
I1
sg3646
g4102
sg55
g11
sS'block_loop.thisTrial'
p4880
Nsg69
Vn
sS'block_loop.thisTrialN'
p4881
I0
sg39
F0.90018896283709182
sg34
g752
(S'\x07\xdf\n\x15\x11\x02-\r\xea\x80'
tRp4882
sa(dp4883
S'trial_loop.thisTrialN'
p4884
I87
sg3632
g4675
sS'block_loop.thisIndex'
p4885
g3626
sg38
S'right'
p4886
sg58
g62
sS'trial_loop.thisN'
p4887
I87
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p4888
g59
(g98
S'W\x00\x00\x00'
tRp4889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4890
I0
sg3641
g4682
sS'block_loop.thisRepN'
p4891
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4892
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p4893
Nsg69
Vn
sS'block_loop.thisTrialN'
p4894
I0
sg39
F1.166868610957863
sg34
g752
(S'\x07\xdf\n\x15\x11\x023\x0c\xd1@'
tRp4895
sa(dp4896
S'trial_loop.thisTrialN'
p4897
I88
sg3632
g4474
sS'block_loop.thisIndex'
p4898
g3626
sg38
S'right'
p4899
sg58
g62
sS'trial_loop.thisN'
p4900
I88
sg33
g4353
sg63
g64
sS'trial_loop.thisIndex'
p4901
g59
(g98
S'X\x00\x00\x00'
tRp4902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4903
I0
sg3641
g4481
sS'block_loop.thisRepN'
p4904
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4905
I1
sg3646
g4360
sg55
g11
sS'block_loop.thisTrial'
p4906
Nsg69
Vn
sS'block_loop.thisTrialN'
p4907
I0
sg39
F1.3001757913175425
sg34
g752
(S'\x07\xdf\n\x15\x11\x02:\x00\xbb\x80'
tRp4908
sa(dp4909
S'trial_loop.thisTrialN'
p4910
I89
sg3632
g3930
sS'block_loop.thisIndex'
p4911
g3626
sg38
S'right'
p4912
sg58
g62
sS'trial_loop.thisN'
p4913
I89
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p4914
g59
(g98
S'Y\x00\x00\x00'
tRp4915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4916
I0
sg3641
g3937
sS'block_loop.thisRepN'
p4917
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4918
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p4919
Nsg69
Vn
sS'block_loop.thisTrialN'
p4920
I0
sg39
F0.90019409459773669
sg34
g752
(S'\x07\xdf\n\x15\x11\x03\x04\x05\xd40'
tRp4921
sa(dp4922
S'trial_loop.thisTrialN'
p4923
I90
sg3632
S'45-chewy_nougat_redo.png'
p4924
sS'block_loop.thisIndex'
p4925
g3626
sg38
S'right'
p4926
sg58
g62
sS'trial_loop.thisN'
p4927
I90
sg33
g3870
sg63
g64
sS'trial_loop.thisIndex'
p4928
g59
(g98
S'Z\x00\x00\x00'
tRp4929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4930
I0
sg3641
S'41-peanuts_redo.png'
p4931
sS'block_loop.thisRepN'
p4932
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4933
I1
sg3646
g3877
sg55
g11
sS'block_loop.thisTrial'
p4934
Nsg69
Vn
sS'block_loop.thisTrialN'
p4935
I0
sg39
F0.91685863253405842
sg34
g752
(S'\x07\xdf\n\x15\x11\x03\n\x04\xba\xf0'
tRp4936
sa(dp4937
S'trial_loop.thisTrialN'
p4938
I91
sg3632
g4459
sS'block_loop.thisIndex'
p4939
g3626
sg38
S'right'
p4940
sg58
g62
sS'trial_loop.thisN'
p4941
I91
sg33
g4125
sg63
g64
sS'trial_loop.thisIndex'
p4942
g59
(g98
S'[\x00\x00\x00'
tRp4943
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4944
I0
sg3641
g4466
sS'block_loop.thisRepN'
p4945
I1
sg3644
g4125
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4946
I1
sg3646
g4132
sg55
g11
sS'block_loop.thisTrial'
p4947
Nsg69
Vn
sS'block_loop.thisTrialN'
p4948
I0
sg39
F0.98352647760520995
sg34
g752
(S'\x07\xdf\n\x15\x11\x03\x10\x04\x1a\xc8'
tRp4949
sa(dp4950
S'trial_loop.thisTrialN'
p4951
I92
sg3632
g3772
sS'block_loop.thisIndex'
p4952
g3626
sg38
S'left'
p4953
sg58
g62
sS'trial_loop.thisN'
p4954
I92
sg33
g3782
sg63
g64
sS'trial_loop.thisIndex'
p4955
g59
(g98
S'\\\x00\x00\x00'
tRp4956
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4957
I0
sg3641
g3780
sS'block_loop.thisRepN'
p4958
I1
sg3644
g3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4959
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p4960
Nsg69
Vn
sS'block_loop.thisTrialN'
p4961
I0
sg39
F1.8167964241888512
sg34
g752
(S'\x07\xdf\n\x15\x11\x03\x16\x0428'
tRp4962
sa(dp4963
S'trial_loop.thisTrialN'
p4964
I93
sg3632
g4675
sS'block_loop.thisIndex'
p4965
g3626
sg38
S'right'
p4966
sg58
g62
sS'trial_loop.thisN'
p4967
I93
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p4968
g59
(g98
S']\x00\x00\x00'
tRp4969
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4970
I0
sg3641
g4682
sS'block_loop.thisRepN'
p4971
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4972
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p4973
Nsg69
Vn
sS'block_loop.thisTrialN'
p4974
I0
sg39
F1.3672564580356266
sg34
g752
(S'\x07\xdf\n\x15\x11\x03\x1d\x01\xe4`'
tRp4975
sa(dp4976
S'trial_loop.thisTrialN'
p4977
I94
sg3632
g3653
sS'block_loop.thisIndex'
p4978
g3626
sg38
S'right'
p4979
sg58
g62
sS'trial_loop.thisN'
p4980
I94
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4981
g59
(g98
S'^\x00\x00\x00'
tRp4982
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4983
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4984
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4985
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4986
Nsg69
Vn
sS'block_loop.thisTrialN'
p4987
I0
sg39
F1.3667415713680384
sg34
g752
(S'\x07\xdf\n\x15\x11\x03#\x08)\xd8'
tRp4988
sa(dp4989
S'trial_loop.thisTrialN'
p4990
I95
sg3632
g4061
sS'block_loop.thisIndex'
p4991
g3626
sg38
S'right'
p4992
sg58
g62
sS'trial_loop.thisN'
p4993
I95
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p4994
g59
(g98
S'_\x00\x00\x00'
tRp4995
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4996
I0
sg3641
g4069
sS'block_loop.thisRepN'
p4997
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4998
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p4999
Nsg69
Vn
sS'block_loop.thisTrialN'
p5000
I0
sg39
F1.0835082883641007
sg34
g752
(S'\x07\xdf\n\x15\x11\x03)\x0e4\xb8'
tRp5001
sa(dp5002
S'trial_loop.thisTrialN'
p5003
I96
sg3632
g3945
sS'block_loop.thisIndex'
p5004
g3626
sg38
S'left'
p5005
sg58
g62
sS'trial_loop.thisN'
p5006
I96
sg33
g3956
sg63
g64
sS'trial_loop.thisIndex'
p5007
g59
(g98
S'`\x00\x00\x00'
tRp5008
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5009
I0
sg3641
g3953
sS'block_loop.thisRepN'
p5010
I1
sg3644
g3949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5011
I1
sg3646
g3956
sg55
g11
sS'block_loop.thisTrial'
p5012
Nsg69
Vn
sS'block_loop.thisTrialN'
p5013
I0
sg39
F1.2335093717356358
sg34
g752
(S'\x07\xdf\n\x15\x11\x030\x00\xb7\x98'
tRp5014
sa(dp5015
S'trial_loop.thisTrialN'
p5016
I97
sg3632
g4459
sS'block_loop.thisIndex'
p5017
g3626
sg38
S'right'
p5018
sg58
g62
sS'trial_loop.thisN'
p5019
I97
sg33
g4125
sg63
g64
sS'trial_loop.thisIndex'
p5020
g59
(g98
S'a\x00\x00\x00'
tRp5021
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5022
I0
sg3641
g4466
sS'block_loop.thisRepN'
p5023
I1
sg3644
g4125
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5024
I1
sg3646
g4132
sg55
g11
sS'block_loop.thisTrial'
p5025
Nsg69
Vn
sS'block_loop.thisTrialN'
p5026
I0
sg39
F1.5001827477044571
sg34
g752
(S'\x07\xdf\n\x15\x11\x036\x04\xda0'
tRp5027
sa(dp5028
S'trial_loop.thisTrialN'
p5029
I98
sg3632
g4474
sS'block_loop.thisIndex'
p5030
g3626
sg38
S'right'
p5031
sg58
g62
sS'trial_loop.thisN'
p5032
I98
sg33
g4360
sg63
g64
sS'trial_loop.thisIndex'
p5033
g59
(g98
S'b\x00\x00\x00'
tRp5034
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5035
I0
sg3641
g4481
sS'block_loop.thisRepN'
p5036
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5037
I1
sg3646
g4360
sg55
g11
sS'block_loop.thisTrial'
p5038
Nsg69
Vn
sS'block_loop.thisTrialN'
p5039
I0
sg39
F0.96723427742563217
sg34
g752
(S'\x07\xdf\n\x15\x11\x04\x00\x0c\xcdX'
tRp5040
sa(dp5041
S'trial_loop.thisTrialN'
p5042
I99
sg3632
g4153
sS'block_loop.thisIndex'
p5043
g3626
sg38
S'left'
p5044
sg58
g62
sS'trial_loop.thisN'
p5045
I99
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5046
g59
(g98
S'c\x00\x00\x00'
tRp5047
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5048
I0
sg3641
g4160
sS'block_loop.thisRepN'
p5049
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5050
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5051
Nsg69
Vn
sS'block_loop.thisTrialN'
p5052
I0
sg39
F1.2000397426363634
sg34
g752
(S'\x07\xdf\n\x15\x11\x04\x06\x0c\xe4\xc8'
tRp5053
sa(dp5054
S'trial_loop.thisTrialN'
p5055
I100
sg3632
g4263
sS'block_loop.thisIndex'
p5056
g3626
sg38
S'right'
p5057
sg58
g62
sS'trial_loop.thisN'
p5058
I100
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5059
g59
(g98
S'd\x00\x00\x00'
tRp5060
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5061
I0
sg3641
g4270
sS'block_loop.thisRepN'
p5062
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5063
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5064
Nsg69
Vn
sS'block_loop.thisTrialN'
p5065
I0
sg39
F0.76686125543392336
sg34
g752
(S'\x07\xdf\n\x15\x11\x04\r\x01L\x08'
tRp5066
sa(dp5067
S'trial_loop.thisTrialN'
p5068
I101
sg3632
g4293
sS'block_loop.thisIndex'
p5069
g3626
sg38
S'right'
p5070
sg58
g62
sS'trial_loop.thisN'
p5071
I101
sg33
g3949
sg63
g64
sS'trial_loop.thisIndex'
p5072
g59
(g98
S'e\x00\x00\x00'
tRp5073
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5074
I0
sg3641
g4300
sS'block_loop.thisRepN'
p5075
I1
sg3644
g3949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5076
I1
sg3646
g3956
sg55
g11
sS'block_loop.thisTrial'
p5077
Nsg69
Vn
sS'block_loop.thisTrialN'
p5078
I0
sg39
F0.95020481427582126
sg34
g752
(S'\x07\xdf\n\x15\x11\x04\x12\rN@'
tRp5079
sa(dp5080
S'trial_loop.thisTrialN'
p5081
I102
sg3632
g3819
sS'block_loop.thisIndex'
p5082
g3626
sg38
S'right'
p5083
sg58
g62
sS'trial_loop.thisN'
p5084
I102
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p5085
g59
(g98
S'f\x00\x00\x00'
tRp5086
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5087
I0
sg3641
g3827
sS'block_loop.thisRepN'
p5088
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5089
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p5090
Nsg69
Vn
sS'block_loop.thisTrialN'
p5091
I0
sg39
F1.0002483202038093
sg34
g752
(S'\x07\xdf\n\x15\x11\x04\x18\r+\x18'
tRp5092
sa(dp5093
S'trial_loop.thisTrialN'
p5094
I103
sg3632
g4153
sS'block_loop.thisIndex'
p5095
g3626
sg38
S'left'
p5096
sg58
g62
sS'trial_loop.thisN'
p5097
I103
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5098
g59
(g98
S'g\x00\x00\x00'
tRp5099
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5100
I0
sg3641
g4160
sS'block_loop.thisRepN'
p5101
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5102
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5103
Nsg69
Vn
sS'block_loop.thisTrialN'
p5104
I0
sg39
F2.2170712014703895
sg34
g752
(S'\x07\xdf\n\x15\x11\x04\x1e\r\xbb\xa0'
tRp5105
sa(dp5106
S'trial_loop.thisTrialN'
p5107
I104
sg3632
g3898
sS'block_loop.thisIndex'
p5108
g3626
sg38
S'left'
p5109
sg58
g62
sS'trial_loop.thisN'
p5110
I104
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p5111
g59
(g98
S'h\x00\x00\x00'
tRp5112
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5113
I0
sg3641
g3906
sS'block_loop.thisRepN'
p5114
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5115
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p5116
Nsg69
Vn
sS'block_loop.thisTrialN'
p5117
I0
sg39
F1.0169097220637013
sg34
g752
(S'\x07\xdf\n\x15\x11\x04&\x02\x1b\x10'
tRp5118
sa(dp5119
S'trial_loop.thisTrialN'
p5120
I105
sg3632
g3633
sS'block_loop.thisIndex'
p5121
g3626
sg38
S'left'
p5122
sg58
g62
sS'trial_loop.thisN'
p5123
I105
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p5124
g59
(g98
S'i\x00\x00\x00'
tRp5125
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5126
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5127
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5128
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5129
Nsg69
Vn
sS'block_loop.thisTrialN'
p5130
I0
sg39
F1.066842895134414
sg34
g752
(S'\x07\xdf\n\x15\x11\x04,\x02\xea\x18'
tRp5131
sa(dp5132
S'trial_loop.thisTrialN'
p5133
I106
sg3632
g4061
sS'block_loop.thisIndex'
p5134
g3626
sg38
S'right'
p5135
sg58
g62
sS'trial_loop.thisN'
p5136
I106
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p5137
g59
(g98
S'j\x00\x00\x00'
tRp5138
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5139
I0
sg3641
g4069
sS'block_loop.thisRepN'
p5140
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5141
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p5142
Nsg69
Vn
sS'block_loop.thisTrialN'
p5143
I0
sg39
F1.0834931781791965
sg34
g752
(S'\x07\xdf\n\x15\x11\x042\x04p\xb8'
tRp5144
sa(dp5145
S'trial_loop.thisTrialN'
p5146
I107
sg3632
g4121
sS'block_loop.thisIndex'
p5147
g3626
sg38
S'left'
p5148
sg58
g62
sS'trial_loop.thisN'
p5149
I107
sg33
g4132
sg63
g64
sS'trial_loop.thisIndex'
p5150
g59
(g98
S'k\x00\x00\x00'
tRp5151
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5152
I0
sg3641
g4129
sS'block_loop.thisRepN'
p5153
I1
sg3644
g4125
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5154
I1
sg3646
g4132
sg55
g11
sS'block_loop.thisTrial'
p5155
Nsg69
Vn
sS'block_loop.thisTrialN'
p5156
I0
sg39
F1.3001558344699333
sg34
g752
(S'\x07\xdf\n\x15\x11\x048\x061\xf0'
tRp5157
sa(dp5158
S'trial_loop.thisTrialN'
p5159
I108
sg3632
g4474
sS'block_loop.thisIndex'
p5160
g3626
sg38
S'right'
p5161
sg58
g62
sS'trial_loop.thisN'
p5162
I108
sg33
g4360
sg63
g64
sS'trial_loop.thisIndex'
p5163
g59
(g98
S'l\x00\x00\x00'
tRp5164
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5165
I0
sg3641
g4481
sS'block_loop.thisRepN'
p5166
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5167
I1
sg3646
g4360
sg55
g11
sS'block_loop.thisTrial'
p5168
Nsg69
Vn
sS'block_loop.thisTrialN'
p5169
I0
sg39
F1.1672717392789309
sg34
g752
(S'\x07\xdf\n\x15\x11\x05\x02\x0bF\xb8'
tRp5170
sa(dp5171
S'trial_loop.thisTrialN'
p5172
I109
sg3632
g3819
sS'block_loop.thisIndex'
p5173
g3626
sg38
S'right'
p5174
sg58
g62
sS'trial_loop.thisN'
p5175
I109
sg33
g3830
sg63
g64
sS'trial_loop.thisIndex'
p5176
g59
(g98
S'm\x00\x00\x00'
tRp5177
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5178
I0
sg3641
g3827
sS'block_loop.thisRepN'
p5179
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5180
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p5181
Nsg69
Vn
sS'block_loop.thisTrialN'
p5182
I0
sg39
F1.1501079950553503
sg34
g752
(S'\x07\xdf\n\x15\x11\x05\x08\x0ew '
tRp5183
sa(dp5184
S'trial_loop.thisTrialN'
p5185
I110
sg3632
g4924
sS'block_loop.thisIndex'
p5186
g3626
sg38
S'right'
p5187
sg58
g62
sS'trial_loop.thisN'
p5188
I110
sg33
g3877
sg63
g64
sS'trial_loop.thisIndex'
p5189
g59
(g98
S'n\x00\x00\x00'
tRp5190
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5191
I0
sg3641
g4931
sS'block_loop.thisRepN'
p5192
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5193
I1
sg3646
g3877
sg55
g11
sS'block_loop.thisTrial'
p5194
Nsg69
Vn
sS'block_loop.thisTrialN'
p5195
I0
sg39
F1.2335222011374753
sg34
g752
(S'\x07\xdf\n\x15\x11\x05\x0f\x01\xec0'
tRp5196
sa(dp5197
S'trial_loop.thisTrialN'
p5198
I111
sg3632
g3738
sS'block_loop.thisIndex'
p5199
g3626
sg38
S'right'
p5200
sg58
g62
sS'trial_loop.thisN'
p5201
I111
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5202
g59
(g98
S'o\x00\x00\x00'
tRp5203
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5204
I0
sg3641
g3746
sS'block_loop.thisRepN'
p5205
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5206
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5207
Nsg69
Vn
sS'block_loop.thisTrialN'
p5208
I0
sg39
F1.249930151033368
sg34
g752
(S'\x07\xdf\n\x15\x11\x05\x15\x06\x0e\xc8'
tRp5209
sa(dp5210
S'trial_loop.thisTrialN'
p5211
I112
sg3632
g4502
sS'block_loop.thisIndex'
p5212
g3626
sg38
S'left'
p5213
sg58
g62
sS'trial_loop.thisN'
p5214
I112
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5215
g59
(g98
S'p\x00\x00\x00'
tRp5216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5217
I0
sg3641
g4509
sS'block_loop.thisRepN'
p5218
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5219
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5220
Nsg69
Vn
sS'block_loop.thisTrialN'
p5221
I0
sg39
F1.2001027492551657
sg34
g752
(S'\x07\xdf\n\x15\x11\x05\x1b\no\xe0'
tRp5222
sa(dp5223
S'trial_loop.thisTrialN'
p5224
I113
sg3632
g4233
sS'block_loop.thisIndex'
p5225
g3626
sg38
S'left'
p5226
sg58
g62
sS'trial_loop.thisN'
p5227
I113
sg33
g3766
sg63
g64
sS'trial_loop.thisIndex'
p5228
g59
(g98
S'q\x00\x00\x00'
tRp5229
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5230
I0
sg3641
g4240
sS'block_loop.thisRepN'
p5231
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5232
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5233
Nsg69
Vn
sS'block_loop.thisTrialN'
p5234
I0
sg39
F1.2006224825863683
sg34
g752
(S'\x07\xdf\n\x15\x11\x05!\r\xda\xe0'
tRp5235
sa(dp5236
S'trial_loop.thisTrialN'
p5237
I114
sg3632
g4248
sS'block_loop.thisIndex'
p5238
g3626
sg38
S'right'
p5239
sg58
g62
sS'trial_loop.thisN'
p5240
I114
sg33
g4022
sg63
g64
sS'trial_loop.thisIndex'
p5241
g59
(g98
S'r\x00\x00\x00'
tRp5242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5243
I0
sg3641
g4255
sS'block_loop.thisRepN'
p5244
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5245
I1
sg3646
g4029
sg55
g11
sS'block_loop.thisTrial'
p5246
Nsg69
Vn
sS'block_loop.thisTrialN'
p5247
I0
sg39
F1.7168488251691087
sg34
g752
(S'\x07\xdf\n\x15\x11\x05(\x02B '
tRp5248
sa(dp5249
S'trial_loop.thisTrialN'
p5250
I115
sg3632
g3670
sS'block_loop.thisIndex'
p5251
g3626
sg38
S'right'
p5252
sg58
g62
sS'trial_loop.thisN'
p5253
I115
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5254
g59
(g98
S's\x00\x00\x00'
tRp5255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5256
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5257
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5258
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5259
Nsg69
Vn
sS'block_loop.thisTrialN'
p5260
I0
sg39
F1.7667241233812092
sg34
g752
(S'\x07\xdf\n\x15\x11\x05.\r\x8c\xc0'
tRp5261
sa(dp5262
S'trial_loop.thisTrialN'
p5263
I116
sg3632
g3653
sS'block_loop.thisIndex'
p5264
g3626
sg38
S'right'
p5265
sg58
g62
sS'trial_loop.thisN'
p5266
I116
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5267
g59
(g98
S't\x00\x00\x00'
tRp5268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5269
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5270
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5271
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5272
Nsg69
Vn
sS'block_loop.thisTrialN'
p5273
I0
sg39
F1.2334648964751977
sg34
g752
(S'\x07\xdf\n\x15\x11\x055\n\x83h'
tRp5274
sa(dp5275
S'trial_loop.thisTrialN'
p5276
I117
sg3632
g4248
sS'block_loop.thisIndex'
p5277
g3626
sg38
S'right'
p5278
sg58
g62
sS'trial_loop.thisN'
p5279
I117
sg33
g4022
sg63
g64
sS'trial_loop.thisIndex'
p5280
g59
(g98
S'u\x00\x00\x00'
tRp5281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5282
I0
sg3641
g4255
sS'block_loop.thisRepN'
p5283
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5284
I1
sg3646
g4029
sg55
g11
sS'block_loop.thisTrial'
p5285
Nsg69
Vn
sS'block_loop.thisTrialN'
p5286
I0
sg39
F1.4835199203553202
sg34
g752
(S'\x07\xdf\n\x15\x11\x05;\x0e\xa6\x00'
tRp5287
sa(dp5288
S'trial_loop.thisTrialN'
p5289
I118
sg3632
g3789
sS'block_loop.thisIndex'
p5290
g3626
sg38
S'right'
p5291
sg58
g62
sS'trial_loop.thisN'
p5292
I118
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p5293
g59
(g98
S'v\x00\x00\x00'
tRp5294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5295
I0
sg3641
g3797
sS'block_loop.thisRepN'
p5296
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5297
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5298
Nsg69
Vn
sS'block_loop.thisTrialN'
p5299
I0
sg39
F1.5173253946895784
sg34
g752
(S'\x07\xdf\n\x15\x11\x06\x06\x07V\xe8'
tRp5300
sa(dp5301
S'trial_loop.thisTrialN'
p5302
I119
sg3632
g4061
sS'block_loop.thisIndex'
p5303
g3626
sg38
S'right'
p5304
sg58
g62
sS'trial_loop.thisN'
p5305
I119
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p5306
g59
(g98
S'w\x00\x00\x00'
tRp5307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5308
I0
sg3641
g4069
sS'block_loop.thisRepN'
p5309
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5310
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p5311
Nsg69
Vn
sS'block_loop.thisTrialN'
p5312
I0
sg39
F2.1167555411611829
sg34
g752
(S'\x07\xdf\n\x15\x11\x06\r\x00\x80\xe8'
tRp5313
sa(dp5314
S'trial_loop.thisTrialN'
p5315
I120
sg3632
g4474
sS'block_loop.thisIndex'
p5316
g3626
sg38
S'right'
p5317
sg58
g62
sS'trial_loop.thisN'
p5318
I120
sg33
g4353
sg63
g64
sS'trial_loop.thisIndex'
p5319
g59
(g98
S'x\x00\x00\x00'
tRp5320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5321
I0
sg3641
g4481
sS'block_loop.thisRepN'
p5322
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5323
I1
sg3646
g4360
sg55
g11
sS'block_loop.thisTrial'
p5324
Nsg69
Vn
sS'block_loop.thisTrialN'
p5325
I0
sg39
F1.4834740196056373
sg34
g752
(S'\x07\xdf\n\x15\x11\x06\x14\x02\xb7P'
tRp5326
sa(dp5327
S'trial_loop.thisTrialN'
p5328
I121
sg3632
g4263
sS'block_loop.thisIndex'
p5329
g3626
sg38
S'right'
p5330
sg58
g62
sS'trial_loop.thisN'
p5331
I121
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p5332
g59
(g98
S'y\x00\x00\x00'
tRp5333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5334
I0
sg3641
g4270
sS'block_loop.thisRepN'
p5335
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5336
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5337
Nsg69
Vn
sS'block_loop.thisTrialN'
p5338
I0
sg39
F1.3834648394554279
sg34
g752
(S'\x07\xdf\n\x15\x11\x06\x1a\n\xaax'
tRp5339
sa(dp5340
S'trial_loop.thisTrialN'
p5341
I122
sg3632
g3772
sS'block_loop.thisIndex'
p5342
g3626
sg38
S'left'
p5343
sg58
g62
sS'trial_loop.thisN'
p5344
I122
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5345
g59
(g98
S'z\x00\x00\x00'
tRp5346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5347
I0
sg3641
g3780
sS'block_loop.thisRepN'
p5348
I1
sg3644
g3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5349
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p5350
Nsg69
Vn
sS'block_loop.thisTrialN'
p5351
I0
sg39
F1.3835093147163207
sg34
g752
(S'\x07\xdf\n\x15\x11\x06!\x01\xad\xb0'
tRp5352
sa(dp5353
S'trial_loop.thisTrialN'
p5354
I123
sg3632
g4121
sS'block_loop.thisIndex'
p5355
g3626
sg38
S'left'
p5356
sg58
g62
sS'trial_loop.thisN'
p5357
I123
sg33
g4132
sg63
g64
sS'trial_loop.thisIndex'
p5358
g59
(g98
S'{\x00\x00\x00'
tRp5359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5360
I0
sg3641
g4129
sS'block_loop.thisRepN'
p5361
I1
sg3644
g4125
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5362
I1
sg3646
g4132
sg55
g11
sS'block_loop.thisTrial'
p5363
Nsg69
Vn
sS'block_loop.thisTrialN'
p5364
I0
sg39
F1.267192824202084
sg34
g752
(S"\x07\xdf\n\x15\x11\x06'\x07\xf7\x10"
tRp5365
sa(dp5366
S'trial_loop.thisTrialN'
p5367
I124
sg3632
g4349
sS'block_loop.thisIndex'
p5368
g3626
sg38
S'left'
p5369
sg58
g62
sS'trial_loop.thisN'
p5370
I124
sg33
g4353
sg63
g64
sS'trial_loop.thisIndex'
p5371
g59
(g98
S'|\x00\x00\x00'
tRp5372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5373
I0
sg3641
g4357
sS'block_loop.thisRepN'
p5374
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5375
I1
sg3646
g4360
sg55
g11
sS'block_loop.thisTrial'
p5376
Nsg69
Vn
sS'block_loop.thisTrialN'
p5377
I0
sg39
F1.2835257933702451
sg34
g752
(S'\x07\xdf\n\x15\x11\x06-\x0c\x92\xc0'
tRp5378
sa(dp5379
S'trial_loop.thisTrialN'
p5380
I125
sg3632
g4121
sS'block_loop.thisIndex'
p5381
g3626
sg38
S'left'
p5382
sg58
g62
sS'trial_loop.thisN'
p5383
I125
sg33
g4132
sg63
g64
sS'trial_loop.thisIndex'
p5384
g59
(g98
S'}\x00\x00\x00'
tRp5385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5386
I0
sg3641
g4129
sS'block_loop.thisRepN'
p5387
I1
sg3644
g4125
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5388
I1
sg3646
g4132
sg55
g11
sS'block_loop.thisTrial'
p5389
Nsg69
Vn
sS'block_loop.thisTrialN'
p5390
I0
sg39
F1.4168318333390744
sg34
g752
(S'\x07\xdf\n\x15\x11\x064\x02*\xb0'
tRp5391
sa(dp5392
S'trial_loop.thisTrialN'
p5393
I126
sg3632
g4675
sS'block_loop.thisIndex'
p5394
g3626
sg38
S'right'
p5395
sg58
g62
sS'trial_loop.thisN'
p5396
I126
sg33
g3909
sg63
g64
sS'trial_loop.thisIndex'
p5397
g59
(g98
S'~\x00\x00\x00'
tRp5398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5399
I0
sg3641
g4682
sS'block_loop.thisRepN'
p5400
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5401
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p5402
Nsg69
Vn
sS'block_loop.thisTrialN'
p5403
I0
sg39
F2.5167469312073081
sg34
g752
(S'\x07\xdf\n\x15\x11\x06:\t+\xa8'
tRp5404
sa(dp5405
S'trial_loop.thisTrialN'
p5406
I127
sg3632
g4018
sS'block_loop.thisIndex'
p5407
g3626
sg38
S'left'
p5408
sg58
g62
sS'trial_loop.thisN'
p5409
I127
sg33
g4022
sg63
g64
sS'trial_loop.thisIndex'
p5410
g59
(g98
S'\x7f\x00\x00\x00'
tRp5411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5412
I0
sg3641
g4026
sS'block_loop.thisRepN'
p5413
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5414
I1
sg3646
g4029
sg55
g11
sS'block_loop.thisTrial'
p5415
Nsg69
Vn
sS'block_loop.thisTrialN'
p5416
I0
sg39
F1.5999210849222436
sg34
g752
(S'\x07\xdf\n\x15\x11\x07\x06\x02M\xd8'
tRp5417
sa(dp5418
S'trial_loop.thisTrialN'
p5419
I128
sg3632
g3687
sS'block_loop.thisIndex'
p5420
g3626
sg38
S'left'
p5421
sg58
g62
sS'trial_loop.thisN'
p5422
I128
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p5423
g59
(g98
S'\x80\x00\x00\x00'
tRp5424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5425
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5426
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5427
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p5428
Nsg69
Vn
sS'block_loop.thisTrialN'
p5429
I0
sg39
F1.4672448260444071
sg34
g752
(S'\x07\xdf\n\x15\x11\x07\x0c\x0b\xea\xc8'
tRp5430
sa(dp5431
S'trial_loop.thisTrialN'
p5432
I129
sg3632
g4248
sS'block_loop.thisIndex'
p5433
g3626
sg38
S'right'
p5434
sg58
g62
sS'trial_loop.thisN'
p5435
I129
sg33
g4022
sg63
g64
sS'trial_loop.thisIndex'
p5436
g59
(g98
S'\x81\x00\x00\x00'
tRp5437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5438
I0
sg3641
g4255
sS'block_loop.thisRepN'
p5439
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5440
I1
sg3646
g4029
sg55
g11
sS'block_loop.thisTrial'
p5441
Nsg69
Vn
sS'block_loop.thisTrialN'
p5442
I0
sg39
F1.3334392946908338
sg34
g752
(S'\x07\xdf\n\x15\x11\x07\x13\x04"\x98'
tRp5443
sa(dp5444
S'trial_loop.thisTrialN'
p5445
I130
sg3632
g4321
sS'block_loop.thisIndex'
p5446
g3626
sg38
S'left'
p5447
sg58
g62
sS'trial_loop.thisN'
p5448
I130
sg33
g4072
sg63
g64
sS'trial_loop.thisIndex'
p5449
g59
(g98
S'\x82\x00\x00\x00'
tRp5450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5451
I0
sg3641
g4328
sS'block_loop.thisRepN'
p5452
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5453
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p5454
Nsg69
Vn
sS'block_loop.thisTrialN'
p5455
I0
sg39
F1.0168726593474275
sg34
g752
(S'\x07\xdf\n\x15\x11\x07\x19\t\xee\xf8'
tRp5456
sa(dp5457
S'trial_loop.thisTrialN'
p5458
I131
sg3632
g4418
sS'block_loop.thisIndex'
p5459
g3626
sg38
S'right'
p5460
sg58
g62
sS'trial_loop.thisN'
p5461
I131
sg33
g3859
sg63
g64
sS'trial_loop.thisIndex'
p5462
g59
(g98
S'\x83\x00\x00\x00'
tRp5463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5464
I0
sg3641
g4425
sS'block_loop.thisRepN'
p5465
I1
sg3644
g3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5466
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p5467
Nsg69
Vn
sS'block_loop.thisTrialN'
p5468
I0
sg39
F1.4500770904514866
sg34
g752
(S'\x07\xdf\n\x15\x11\x07\x1f\n\x83h'
tRp5469
sa(dp5470
S'trial_loop.thisTrialN'
p5471
I132
sg3632
g3930
sS'block_loop.thisIndex'
p5472
g3626
sg38
S'right'
p5473
sg58
g62
sS'trial_loop.thisN'
p5474
I132
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5475
g59
(g98
S'\x84\x00\x00\x00'
tRp5476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5477
I0
sg3641
g3937
sS'block_loop.thisRepN'
p5478
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5479
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p5480
Nsg69
Vn
sS'block_loop.thisTrialN'
p5481
I0
sg39
F1.1834590234602729
sg34
g752
(S'\x07\xdf\n\x15\x11\x07&\x02\xb7P'
tRp5482
sa(dp5483
S'trial_loop.thisTrialN'
p5484
I133
sg3632
g4608
sS'block_loop.thisIndex'
p5485
g3626
sg38
S'left'
p5486
sg58
g62
sS'trial_loop.thisN'
p5487
I133
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5488
g59
(g98
S'\x85\x00\x00\x00'
tRp5489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5490
I0
sg3641
g4615
sS'block_loop.thisRepN'
p5491
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5492
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p5493
Nsg69
Vn
sS'block_loop.thisTrialN'
p5494
I0
sg39
F1.5505515502472917
sg34
g752
(S'\x07\xdf\n\x15\x11\x07,\x05\xe7\xb8'
tRp5495
sa(dp5496
S'trial_loop.thisTrialN'
p5497
I134
sg3632
g3789
sS'block_loop.thisIndex'
p5498
g3626
sg38
S'right'
p5499
sg58
g62
sS'trial_loop.thisN'
p5500
I134
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p5501
g59
(g98
S'\x86\x00\x00\x00'
tRp5502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5503
I0
sg3641
g3797
sS'block_loop.thisRepN'
p5504
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5505
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5506
Nsg69
Vn
sS'block_loop.thisTrialN'
p5507
I0
sg39
F1.3501859407997472
sg34
g752
(S'\x07\xdf\n\x15\x11\x072\x0e\xcd\x10'
tRp5508
sa(dp5509
S'trial_loop.thisTrialN'
p5510
I135
sg3632
g4502
sS'block_loop.thisIndex'
p5511
g3626
sg38
S'left'
p5512
sg58
g62
sS'trial_loop.thisN'
p5513
I135
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5514
g59
(g98
S'\x87\x00\x00\x00'
tRp5515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5516
I0
sg3641
g4509
sS'block_loop.thisRepN'
p5517
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5518
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5519
Nsg69
Vn
sS'block_loop.thisTrialN'
p5520
I0
sg39
F1.5668337720035197
sg34
g752
(S'\x07\xdf\n\x15\x11\x079\x05\x95\xb0'
tRp5521
sa(dp5522
S'trial_loop.thisTrialN'
p5523
I136
sg3632
g4263
sS'block_loop.thisIndex'
p5524
g3626
sg38
S'right'
p5525
sg58
g62
sS'trial_loop.thisN'
p5526
I136
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p5527
g59
(g98
S'\x88\x00\x00\x00'
tRp5528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5529
I0
sg3641
g4270
sS'block_loop.thisRepN'
p5530
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5531
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5532
Nsg69
Vn
sS'block_loop.thisTrialN'
p5533
I0
sg39
F1.8501756772784574
sg34
g752
(S'\x07\xdf\n\x15\x11\x08\x03\x0e\xb9\x88'
tRp5534
sa(dp5535
S'trial_loop.thisTrialN'
p5536
I137
sg3632
g4459
sS'block_loop.thisIndex'
p5537
g3626
sg38
S'right'
p5538
sg58
g62
sS'trial_loop.thisN'
p5539
I137
sg33
g4125
sg63
g64
sS'trial_loop.thisIndex'
p5540
g59
(g98
S'\x89\x00\x00\x00'
tRp5541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5542
I0
sg3641
g4466
sS'block_loop.thisRepN'
p5543
I1
sg3644
g4125
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5544
I1
sg3646
g4132
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vn
sS'block_loop.thisTrialN'
p5546
I0
sg39
F1.1502080643913359
sg34
g752
(S'\x07\xdf\n\x15\x11\x08\n\x0c\xe4\xc8'
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g4293
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'right'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g3956
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g4300
sS'block_loop.thisRepN'
p5556
I1
sg3644
g3949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5557
I1
sg3646
g3956
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vn
sS'block_loop.thisTrialN'
p5559
I0
sg39
F1.417215575008413
sg34
g752
(S'\x07\xdf\n\x15\x11\x08\x11\x00U\xf0'
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g4003
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'left'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g4010
sS'block_loop.thisRepN'
p5569
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5570
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vn
sS'block_loop.thisTrialN'
p5572
I0
sg39
F1.533508402402731
sg34
g752
(S'\x07\xdf\n\x15\x11\x08\x17\x07V\xe8'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g4608
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'left'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g4615
sS'block_loop.thisRepN'
p5582
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5583
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vn
sS'block_loop.thisTrialN'
p5585
I0
sg39
F1.1501541809020637
sg34
g752
(S'\x07\xdf\n\x15\x11\x08\x1e\x00\xbb\x80'
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g3819
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'right'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g3830
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g3827
sS'block_loop.thisRepN'
p5595
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5596
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vn
sS'block_loop.thisTrialN'
p5598
I0
sg39
F1.1834245266236394
sg34
g752
(S'\x07\xdf\n\x15\x11\x08$\x03r\xd0'
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g3721
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'right'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5608
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5609
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vn
sS'block_loop.thisTrialN'
p5611
I0
sg39
F2.1667990470887162
sg34
g752
(S'\x07\xdf\n\x15\x11\x08*\x06\xdd\xd0'
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g4924
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'right'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g3870
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g4931
sS'block_loop.thisRepN'
p5621
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5622
I1
sg3646
g3877
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vn
sS'block_loop.thisTrialN'
p5624
I0
sg39
F1.233836949133547
sg34
g752
(S'\x07\xdf\n\x15\x11\x081\t\xcb\xd0'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g4233
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'left'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g4240
sS'block_loop.thisRepN'
p5634
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5635
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vn
sS'block_loop.thisTrialN'
p5637
I0
sg39
F1.8834323383043738
sg34
g752
(S'\x07\xdf\n\x15\x11\x087\r\xeeh'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g3930
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'right'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g3937
sS'block_loop.thisRepN'
p5647
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5648
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vn
sS'block_loop.thisTrialN'
p5650
I0
sg39
F1.8335051522872163
sg34
g752
(S'\x07\xdf\n\x15\x11\t\x02\x0c\x92\xc0'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g3898
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'left'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g3906
sS'block_loop.thisRepN'
p5660
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5661
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vn
sS'block_loop.thisTrialN'
p5663
I0
sg39
F2.8834551461295632
sg34
g752
(S'\x07\xdf\n\x15\x11\t\t\n\x7f\x80'
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g3755
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'right'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g3763
sS'block_loop.thisRepN'
p5673
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5674
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vn
sS'block_loop.thisTrialN'
p5676
I0
sg39
F0.96656087636802113
sg34
g752
(S'\x07\xdf\n\x15\x11\t\x11\tZ\x88'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g3849
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'left'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g3859
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g3857
sS'block_loop.thisRepN'
p5686
I1
sg3644
g3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5687
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vn
sS'block_loop.thisTrialN'
p5689
I0
sg39
F0.73389482399124972
sg34
g752
(S'\x07\xdf\n\x15\x11\t\x17\t3x'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g4278
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'right'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g4095
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g4285
sS'block_loop.thisRepN'
p5699
I1
sg3644
g4095
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5700
I1
sg3646
g4102
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vn
sS'block_loop.thisTrialN'
p5702
I0
sg39
F1.0502134242306056
sg34
g752
(S'\x07\xdf\n\x15\x11\t\x1d\x05\xb8\xd8'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g3849
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'left'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g3853
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g3857
sS'block_loop.thisRepN'
p5712
I1
sg3644
g3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5713
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vn
sS'block_loop.thisTrialN'
p5715
I0
sg39
F1.0502385128384049
sg34
g752
(S'\x07\xdf\n\x15\x11\t#\x07\x00\xf8'
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g4459
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'right'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g4125
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g4466
sS'block_loop.thisRepN'
p5725
I1
sg3644
g4125
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5726
I1
sg3646
g4132
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vn
sS'block_loop.thisTrialN'
p5728
I0
sg39
F2.1501732824563078
sg34
g752
(S'\x07\xdf\n\x15\x11\t)\x08I\x18'
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g3670
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'right'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5738
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5739
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vn
sS'block_loop.thisTrialN'
p5741
I0
sg39
F0.91670724559025984
sg34
g752
(S'\x07\xdf\n\x15\x11\t0\n\xf8\x98'
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g3866
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'left'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g3870
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g3874
sS'block_loop.thisRepN'
p5751
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5752
I1
sg3646
g3877
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vn
sS'block_loop.thisTrialN'
p5754
I0
sg39
F1.1505074171045635
sg34
g752
(S'\x07\xdf\n\x15\x11\t6\nXp'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g3704
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'right'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5764
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5765
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vn
sS'block_loop.thisTrialN'
p5767
I0
sg39
F1.1332840874365502
sg34
g752
(S'\x07\xdf\n\x15\x11\n\x00\r\x0f\xc0'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g4278
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'right'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g4095
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g4285
sS'block_loop.thisRepN'
p5777
I1
sg3644
g4095
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5778
I1
sg3646
g4102
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vn
sS'block_loop.thisTrialN'
p5780
I0
sg39
F1.1500757790017815
sg34
g752
(S'\x07\xdf\n\x15\x11\n\x07\x00FP'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g3883
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'left'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g3890
sS'block_loop.thisRepN'
p5790
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5791
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vn
sS'block_loop.thisTrialN'
p5793
I0
sg39
F1.0165835701545802
sg34
g752
(S'\x07\xdf\n\x15\x11\n\r\x0388'
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g3670
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'right'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5803
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5804
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vn
sS'block_loop.thisTrialN'
p5806
I0
sg39
F2.3666409318357182
sg34
g752
(S'\x07\xdf\n\x15\x11\n\x13\x04\x07@'
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g4608
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'left'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g4615
sS'block_loop.thisRepN'
p5816
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5817
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vn
sS'block_loop.thisTrialN'
p5819
I0
sg39
F1.2172362731098474
sg34
g752
(S'\x07\xdf\n\x15\x11\n\x1a\n\nP'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g3755
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'right'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g3763
sS'block_loop.thisRepN'
p5829
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5830
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vn
sS'block_loop.thisTrialN'
p5832
I0
sg39
F1.9501654707764828
sg34
g752
(S'\x07\xdf\n\x15\x11\n \r\xf2P'
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g4418
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'right'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g3859
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g4425
sS'block_loop.thisRepN'
p5842
I1
sg3644
g3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5843
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vn
sS'block_loop.thisTrialN'
p5845
I0
sg39
F1.1834125525147101
sg34
g752
(S"\x07\xdf\n\x15\x11\n'\r\x88\xd8"
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g4675
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'right'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g4682
sS'block_loop.thisRepN'
p5855
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5856
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vn
sS'block_loop.thisTrialN'
p5858
I0
sg39
F1.3667697960527221
sg34
g752
(S'\x07\xdf\n\x15\x11\n.\x01\xb5\x80'
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g3755
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'right'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g3763
sS'block_loop.thisRepN'
p5868
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5869
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vn
sS'block_loop.thisTrialN'
p5871
I0
sg39
F2.5834387244949539
sg34
g752
(S'\x07\xdf\n\x15\x11\n4\x07\xc0`'
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g4321
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'left'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g4328
sS'block_loop.thisRepN'
p5881
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5882
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vn
sS'block_loop.thisTrialN'
p5884
I0
sg39
F1.1339118728419635
sg34
g752
(S'\x07\xdf\n\x15\x11\x0b\x00\x01\xd8\xa8'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g4138
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'right'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g3782
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g4145
sS'block_loop.thisRepN'
p5894
I1
sg3644
g3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5895
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vn
sS'block_loop.thisTrialN'
p5897
I0
sg39
F1.2168881686684472
sg34
g752
(S'\x07\xdf\n\x15\x11\x0b\x06\x04\x8c\x10'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g3633
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'left'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5907
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5908
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vn
sS'block_loop.thisTrialN'
p5910
I0
sg39
F1.3668533297150134
sg34
g752
(S'\x07\xdf\n\x15\x11\x0b\x0c\x085\x90'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g4278
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'right'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g4095
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g4285
sS'block_loop.thisRepN'
p5920
I1
sg3644
g4095
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5921
I1
sg3646
g4102
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vn
sS'block_loop.thisTrialN'
p5923
I0
sg39
F1.5168686679771781
sg34
g752
(S'\x07\xdf\n\x15\x11\x0b\x12\x0e@p'
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g3883
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'left'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g3890
sS'block_loop.thisRepN'
p5933
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5934
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vn
sS'block_loop.thisTrialN'
p5936
I0
sg39
F1.4332822628102804
sg34
g752
(S'\x07\xdf\n\x15\x11\x0b\x19\x07jp'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g3687
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'left'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5946
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5947
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vn
sS'block_loop.thisTrialN'
p5949
I0
sg39
F1.31727909480378
sg34
g752
(S'\x07\xdf\n\x15\x11\x0b\x1f\x0e\xa6\x00'
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g4278
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'right'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g4095
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g4285
sS'block_loop.thisRepN'
p5959
I1
sg3644
g4095
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5960
I1
sg3646
g4102
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vn
sS'block_loop.thisTrialN'
p5962
I0
sg39
F1.316820372406255
sg34
g752
(S'\x07\xdf\n\x15\x11\x0b&\x04\xb7\x08'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g3898
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'left'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g3906
sS'block_loop.thisRepN'
p5972
I1
sg3644
g3902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5973
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vn
sS'block_loop.thisTrialN'
p5975
I0
sg39
F1.3001834889582824
sg34
g752
(S'\x07\xdf\n\x15\x11\x0b,\n\x0e8'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g4121
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'left'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g4125
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g4129
sS'block_loop.thisRepN'
p5985
I1
sg3644
g4125
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5986
I1
sg3646
g4132
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vn
sS'block_loop.thisTrialN'
p5988
I0
sg39
F1.6834915246117816
sg34
g752
(S'\x07\xdf\n\x15\x11\x0b2\x0f#\x00'
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g4349
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'left'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g4353
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g4357
sS'block_loop.thisRepN'
p5998
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5999
I1
sg3646
g4360
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vn
sS'block_loop.thisTrialN'
p6001
I0
sg39
F1.4168574921422987
sg34
g752
(S'\x07\xdf\n\x15\x11\x0b9\n\xae`'
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g4248
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'right'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g4029
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g4255
sS'block_loop.thisRepN'
p6011
I1
sg3644
g4022
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6012
I1
sg3646
g4029
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vn
sS'block_loop.thisTrialN'
p6014
I0
sg39
F1.617195447101949
sg34
g752
(S'\x07\xdf\n\x15\x11\x0c\x04\x02m\x18'
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g3738
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'right'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g3746
sS'block_loop.thisRepN'
p6024
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6025
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vn
sS'block_loop.thisTrialN'
p6027
I0
sg39
F1.3165922941479948
sg34
g752
(S'\x07\xdf\n\x15\x11\x0c\n\x0cD\xa0'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g3633
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'left'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g3642
sS'block_loop.thisRepN'
p6037
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6038
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vn
sS'block_loop.thisTrialN'
p6040
I0
sg39
F1.4666637966811322
sg34
g752
(S'\x07\xdf\n\x15\x11\x0c\x11\x02U\xa8'
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g3653
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'right'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g3661
sS'block_loop.thisRepN'
p6050
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6051
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vn
sS'block_loop.thisTrialN'
p6053
I0
sg39
F1.5501800677857318
sg34
g752
(S'\x07\xdf\n\x15\x11\x0c\x17\n\x0e8'
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g3945
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'left'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g3956
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g3953
sS'block_loop.thisRepN'
p6063
I1
sg3644
g3949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6064
I1
sg3646
g3956
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vn
sS'block_loop.thisTrialN'
p6066
I0
sg39
F1.4001601679565283
sg34
g752
(S'\x07\xdf\n\x15\x11\x0c\x1e\x03\xb1P'
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g3704
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'right'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g3712
sS'block_loop.thisRepN'
p6076
I1
sg3644
g3714
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6077
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vn
sS'block_loop.thisTrialN'
p6079
I0
sg39
F1.4672197374356983
sg34
g752
(S'\x07\xdf\n\x15\x11\x0c$\n5H'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g3789
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'right'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g3797
sS'block_loop.thisRepN'
p6089
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6090
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vn
sS'block_loop.thisTrialN'
p6092
I0
sg39
F1.6835368551655847
sg34
g752
(S'\x07\xdf\n\x15\x11\x0c+\x02\xa7\xb0'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g4349
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'left'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g4353
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g4357
sS'block_loop.thisRepN'
p6102
I1
sg3644
g4353
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6103
I1
sg3646
g4360
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vn
sS'block_loop.thisTrialN'
p6105
I0
sg39
F3.0001371320531689
sg34
g752
(S'\x07\xdf\n\x15\x11\x0c1\r\xb3\xd0'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g3883
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'left'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g3890
sS'block_loop.thisRepN'
p6115
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6116
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vn
sS'block_loop.thisTrialN'
p6118
I0
sg39
F1.4332494765603769
sg34
g752
(S'\x07\xdf\n\x15\x11\x0c9\r\xfa '
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g3988
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'left'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g3830
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g3995
sS'block_loop.thisRepN'
p6128
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6129
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vn
sS'block_loop.thisTrialN'
p6131
I0
sg39
F1.2668099378261104
sg34
g752
(S'\x07\xdf\n\x15\x11\r\x04\x05\xf3p'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g3866
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'left'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g3870
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g3874
sS'block_loop.thisRepN'
p6141
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6142
I1
sg3646
g3877
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vn
sS'block_loop.thisTrialN'
p6144
I0
sg39
F1.583477497799322
sg34
g752
(S'\x07\xdf\n\x15\x11\r\n\n\x93\x08'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g3772
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'left'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g3780
sS'block_loop.thisRepN'
p6154
I1
sg3644
g3782
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6155
I1
sg3646
g3776
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vn
sS'block_loop.thisTrialN'
p6157
I0
sg39
F1.483523626627175
sg34
g752
(S'\x07\xdf\n\x15\x11\r\x11\x04\xaf8'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g3915
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'left'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g3922
sS'block_loop.thisRepN'
p6167
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6168
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vn
sS'block_loop.thisTrialN'
p6170
I0
sg39
F1.1836471880233148
sg34
g752
(S'\x07\xdf\n\x15\x11\r\x17\x0c\xa2`'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g3988
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'left'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g3995
sS'block_loop.thisRepN'
p6180
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6181
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vn
sS'block_loop.thisTrialN'
p6183
I0
sg39
F0.91676483535047737
sg34
g752
(S'\x07\xdf\n\x15\x11\r\x1e\x00\x90\x88'
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g4418
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'right'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g3853
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g4425
sS'block_loop.thisRepN'
p6193
I1
sg3644
g3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6194
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vn
sS'block_loop.thisTrialN'
p6196
I0
sg39
F0.90020948987967131
sg34
g752
(S'\x07\xdf\n\x15\x11\r#\x0f2\xa0'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g3653
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'right'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g3661
sS'block_loop.thisRepN'
p6206
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6207
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vn
sS'block_loop.thisTrialN'
p6209
I0
sg39
F1.0672890732266751
sg34
g752
(S'\x07\xdf\n\x15\x11\r)\x0e\x19`'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g3633
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'left'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g3642
sS'block_loop.thisRepN'
p6219
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6220
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vn
sS'block_loop.thisTrialN'
p6222
I0
sg39
F1.0502023054150413
sg34
g752
(S'\x07\xdf\n\x15\x11\r0\x00]\xc0'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g4924
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'right'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g3870
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g4931
sS'block_loop.thisRepN'
p6232
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6233
I1
sg3646
g3877
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vn
sS'block_loop.thisTrialN'
p6235
I0
sg39
F0.81677817792842689
sg34
g752
(S'\x07\xdf\n\x15\x11\r6\x01\xa5\xe0'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g4091
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'left'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g4095
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g4099
sS'block_loop.thisRepN'
p6245
I1
sg3644
g4095
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6246
I1
sg3646
g4102
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vn
sS'block_loop.thisTrialN'
p6248
I0
sg39
F0.7502272229639857
sg34
g752
(S'\x07\xdf\n\x15\x11\r;\x0e\x9e0'
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g3687
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'left'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g3695
sS'block_loop.thisRepN'
p6258
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6259
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vn
sS'block_loop.thisTrialN'
p6261
I0
sg39
F1.7001634750913581
sg34
g752
(S'\x07\xdf\n\x15\x11\x0e\x05\x0b^('
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g4153
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'left'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g4160
sS'block_loop.thisRepN'
p6271
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6272
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vn
sS'block_loop.thisTrialN'
p6274
I0
sg39
F1.5834065084409303
sg34
g752
(S'\x07\xdf\n\x15\x11\x0e\x0c\x07(\x08'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g3721
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'right'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g3729
sS'block_loop.thisRepN'
p6284
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6285
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vn
sS'block_loop.thisTrialN'
p6287
I0
sg39
F1.3001789273939721
sg34
g752
(S'\x07\xdf\n\x15\x11\x0e\x13\x01D8'
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g4061
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'right'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g4072
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g4069
sS'block_loop.thisRepN'
p6297
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6298
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vn
sS'block_loop.thisTrialN'
p6300
I0
sg39
F1.0334453957839287
sg34
g752
(S'\x07\xdf\n\x15\x11\x0e\x19\x06\\\xe8'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g4502
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'left'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g4509
sS'block_loop.thisRepN'
p6310
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6311
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vn
sS'block_loop.thisTrialN'
p6313
I0
sg39
F1.2501790414335119
sg34
g752
(S'\x07\xdf\n\x15\x11\x0e\x1f\x07f\x88'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g4003
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'left'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g4010
sS'block_loop.thisRepN'
p6323
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6324
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vn
sS'block_loop.thisTrialN'
p6326
I0
sg39
F1.1502123408590705
sg34
g752
(S'\x07\xdf\n\x15\x11\x0e%\x0b\xc7\xa0'
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g4924
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'right'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g3870
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g4931
sS'block_loop.thisRepN'
p6336
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6337
I1
sg3646
g3877
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vn
sS'block_loop.thisTrialN'
p6339
I0
sg39
F1.5172019473320688
sg34
g752
(S'\x07\xdf\n\x15\x11\x0e+\x0e~\xf0'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g3988
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'left'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g3830
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g3995
sS'block_loop.thisRepN'
p6349
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6350
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vn
sS'block_loop.thisTrialN'
p6352
I0
sg39
F1.5835194071787555
sg34
g752
(S'\x07\xdf\n\x15\x11\x0e2\x07\xa8\xf0'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F37.399227898076788
sg56
Vr
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vn
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vr
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vn
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'10-bounty_redo.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'left'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'10-bounty_redo.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'4-corn.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6383
I2
sS'img_wrong'
p6384
S'4-corn.png'
p6385
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vn
sS'block_loop.thisTrialN'
p6387
I0
sg39
F1.850094424398776
sg34
g752
(S"\x07\xdf\n\x15\x11\x0f'\x08\x9b "
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'36-fig_rolls.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'right'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6401
I2
sg6384
S'36-fig_rolls.png'
p6402
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vn
sS'block_loop.thisTrialN'
p6404
I0
sg39
F1.150210630271431
sg34
g752
(S'\x07\xdf\n\x15\x11\x0f.\x06\xc2x'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'4-corn.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'right'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6412
g59
(g98
S'\x02\x00\x00\x00'
tRp6413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6414
I0
sg6379
S'10-bounty_redo.png'
p6415
sS'block_loop.thisRepN'
p6416
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6417
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6418
Nsg69
Vn
sS'block_loop.thisTrialN'
p6419
I0
sg39
F1.1335141613790256
sg34
g752
(S'\x07\xdf\n\x15\x11\x0f4\ty\xc8'
tRp6420
sa(dp6421
S'trial_loop.thisTrialN'
p6422
I3
sg6370
S'19-caramello_redo.png'
p6423
sS'block_loop.thisIndex'
p6424
g6364
sg38
S'left'
p6425
sg58
g62
sS'trial_loop.thisN'
p6426
I3
sg33
S'30-spaghetti_hoops.png'
p6427
sg63
g64
sS'trial_loop.thisIndex'
p6428
g59
(g98
S'\x03\x00\x00\x00'
tRp6429
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6430
I0
sg6379
S'30-spaghetti_hoops.png'
p6431
sS'block_loop.thisRepN'
p6432
I2
sg6382
S'19-caramello_redo.png'
p6433
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6434
I2
sg6384
g6427
sg55
g11
sS'block_loop.thisTrial'
p6435
Nsg69
Vn
sS'block_loop.thisTrialN'
p6436
I0
sg39
F3.5834358735173737
sg34
g752
(S'\x07\xdf\n\x15\x11\x0f:\x0b\xf2\x98'
tRp6437
sa(dp6438
S'trial_loop.thisTrialN'
p6439
I4
sg6370
S'33-ambrosia_rice.png'
p6440
sS'block_loop.thisIndex'
p6441
g6364
sg38
S'right'
p6442
sg58
g62
sS'trial_loop.thisN'
p6443
I4
sg33
S'23-crunchie_redo.png'
p6444
sg63
g64
sS'trial_loop.thisIndex'
p6445
g59
(g98
S'\x04\x00\x00\x00'
tRp6446
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6447
I0
sg6379
S'23-crunchie_redo.png'
p6448
sS'block_loop.thisRepN'
p6449
I2
sg6382
g6444
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6450
I2
sg6384
S'33-ambrosia_rice.png'
p6451
sg55
g11
sS'block_loop.thisTrial'
p6452
Nsg69
Vn
sS'block_loop.thisTrialN'
p6453
I0
sg39
F2.067236330130072
sg34
g752
(S'\x07\xdf\n\x15\x11\x10\x07\x06A\x90'
tRp6454
sa(dp6455
S'trial_loop.thisTrialN'
p6456
I5
sg6370
S'30-spaghetti_hoops.png'
p6457
sS'block_loop.thisIndex'
p6458
g6364
sg38
S'right'
p6459
sg58
g62
sS'trial_loop.thisN'
p6460
I5
sg33
g6433
sg63
g64
sS'trial_loop.thisIndex'
p6461
g59
(g98
S'\x05\x00\x00\x00'
tRp6462
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6463
I0
sg6379
S'19-caramello_redo.png'
p6464
sS'block_loop.thisRepN'
p6465
I2
sg6382
g6433
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6466
I2
sg6384
g6427
sg55
g11
sS'block_loop.thisTrial'
p6467
Nsg69
Vn
sS'block_loop.thisTrialN'
p6468
I0
sg39
F0.88346113318402786
sg34
g752
(S'\x07\xdf\n\x15\x11\x10\x0e\x07\xc0`'
tRp6469
sa(dp6470
S'trial_loop.thisTrialN'
p6471
I6
sg6370
S'31-hobnobs.png'
p6472
sS'block_loop.thisIndex'
p6473
g6364
sg38
S'right'
p6474
sg58
g62
sS'trial_loop.thisN'
p6475
I6
sg33
S'25-kitkat.png'
p6476
sg63
g64
sS'trial_loop.thisIndex'
p6477
g59
(g98
S'\x06\x00\x00\x00'
tRp6478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6479
I0
sg6379
S'25-kitkat.png'
p6480
sS'block_loop.thisRepN'
p6481
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6482
I2
sg6384
S'31-hobnobs.png'
p6483
sg55
g11
sS'block_loop.thisTrial'
p6484
Nsg69
Vn
sS'block_loop.thisTrialN'
p6485
I0
sg39
F0.88346968611949706
sg34
g752
(S'\x07\xdf\n\x15\x11\x10\x14\x06h\xa0'
tRp6486
sa(dp6487
S'trial_loop.thisTrialN'
p6488
I7
sg6370
S'6-sour_patch_kids.png'
p6489
sS'block_loop.thisIndex'
p6490
g6364
sg38
S'right'
p6491
sg58
g62
sS'trial_loop.thisN'
p6492
I7
sg33
S'38-maltesers.png'
p6493
sg63
g64
sS'trial_loop.thisIndex'
p6494
g59
(g98
S'\x07\x00\x00\x00'
tRp6495
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6496
I0
sg6379
S'38-maltesers.png'
p6497
sS'block_loop.thisRepN'
p6498
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6499
I2
sg6384
S'6-sour_patch_kids.png'
p6500
sg55
g11
sS'block_loop.thisTrial'
p6501
Nsg69
Vn
sS'block_loop.thisTrialN'
p6502
I0
sg39
F0.7998770087988305
sg34
g752
(S'\x07\xdf\n\x15\x11\x10\x1a\x05\x14\xc8'
tRp6503
sa(dp6504
S'trial_loop.thisTrialN'
p6505
I8
sg6370
S'23-crunchie_redo.png'
p6506
sS'block_loop.thisIndex'
p6507
g6364
sg38
S'left'
p6508
sg58
g62
sS'trial_loop.thisN'
p6509
I8
sg33
g6451
sg63
g64
sS'trial_loop.thisIndex'
p6510
g59
(g98
S'\x08\x00\x00\x00'
tRp6511
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6512
I0
sg6379
S'33-ambrosia_rice.png'
p6513
sS'block_loop.thisRepN'
p6514
I2
sg6382
g6444
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6515
I2
sg6384
g6451
sg55
g11
sS'block_loop.thisTrial'
p6516
Nsg69
Vn
sS'block_loop.thisTrialN'
p6517
I0
sg39
F1.7334338208129338
sg34
g752
(S'\x07\xdf\n\x15\x11\x10 \x02\x8cX'
tRp6518
sa(dp6519
S'trial_loop.thisTrialN'
p6520
I9
sg6370
S'13-mccoys_steak_crisps.png'
p6521
sS'block_loop.thisIndex'
p6522
g6364
sg38
S'left'
p6523
sg58
g62
sS'trial_loop.thisN'
p6524
I9
sg33
S'13-mccoys_steak_crisps.png'
p6525
sg63
g64
sS'trial_loop.thisIndex'
p6526
g59
(g98
S'\t\x00\x00\x00'
tRp6527
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6528
I0
sg6379
S'3-ellas_strawberries_apples.png'
p6529
sS'block_loop.thisRepN'
p6530
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6531
I2
sg6384
S'3-ellas_strawberries_apples.png'
p6532
sg55
g11
sS'block_loop.thisTrial'
p6533
Nsg69
Vn
sS'block_loop.thisTrialN'
p6534
I0
sg39
F0.81725828266280587
sg34
g752
(S'\x07\xdf\n\x15\x11\x10&\x0eP\x10'
tRp6535
sa(dp6536
S'trial_loop.thisTrialN'
p6537
I10
sg6370
S'17-jacobs_mini_cheddars_redo.png'
p6538
sS'block_loop.thisIndex'
p6539
g6364
sg38
S'left'
p6540
sg58
g62
sS'trial_loop.thisN'
p6541
I10
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6542
sg63
g64
sS'trial_loop.thisIndex'
p6543
g59
(g98
S'\n\x00\x00\x00'
tRp6544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6545
I0
sg6379
S'8-liquorice_catherine_wheels.png'
p6546
sS'block_loop.thisRepN'
p6547
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6548
I2
sg6384
S'8-liquorice_catherine_wheels.png'
p6549
sg55
g11
sS'block_loop.thisTrial'
p6550
Nsg69
Vn
sS'block_loop.thisTrialN'
p6551
I0
sg39
F1.3501725412024825
sg34
g752
(S'\x07\xdf\n\x15\x11\x10,\x0c\x06 '
tRp6552
sa(dp6553
S'trial_loop.thisTrialN'
p6554
I11
sg6370
S'29-beans.png'
p6555
sS'block_loop.thisIndex'
p6556
g6364
sg38
S'right'
p6557
sg58
g62
sS'trial_loop.thisN'
p6558
I11
sg33
S'46-pistachios.png'
p6559
sg63
g64
sS'trial_loop.thisIndex'
p6560
g59
(g98
S'\x0b\x00\x00\x00'
tRp6561
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6562
I0
sg6379
S'46-pistachios.png'
p6563
sS'block_loop.thisRepN'
p6564
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6565
I2
sg6384
S'29-beans.png'
p6566
sg55
g11
sS'block_loop.thisTrial'
p6567
Nsg69
Vn
sS'block_loop.thisTrialN'
p6568
I0
sg39
F0.86687129087749781
sg34
g752
(S'\x07\xdf\n\x15\x11\x103\x02\x90@'
tRp6569
sa(dp6570
S'trial_loop.thisTrialN'
p6571
I12
sg6370
S'49-yorkie.png'
p6572
sS'block_loop.thisIndex'
p6573
g6364
sg38
S'left'
p6574
sg58
g62
sS'trial_loop.thisN'
p6575
I12
sg33
S'49-yorkie.png'
p6576
sg63
g64
sS'trial_loop.thisIndex'
p6577
g59
(g98
S'\x0c\x00\x00\x00'
tRp6578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6579
I0
sg6379
S'35-raisins.png'
p6580
sS'block_loop.thisRepN'
p6581
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6582
I2
sg6384
S'35-raisins.png'
p6583
sg55
g11
sS'block_loop.thisTrial'
p6584
Nsg69
Vn
sS'block_loop.thisTrialN'
p6585
I0
sg39
F0.78353263571807474
sg34
g752
(S'\x07\xdf\n\x15\x11\x109\x00\xfd\xe8'
tRp6586
sa(dp6587
S'trial_loop.thisTrialN'
p6588
I13
sg6370
g6391
sS'block_loop.thisIndex'
p6589
g6364
sg38
S'right'
p6590
sg58
g62
sS'trial_loop.thisN'
p6591
I13
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6592
g59
(g98
S'\r\x00\x00\x00'
tRp6593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6594
I0
sg6379
g6399
sS'block_loop.thisRepN'
p6595
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6596
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6597
Nsg69
Vn
sS'block_loop.thisTrialN'
p6598
I0
sg39
F1.2334532074646631
sg34
g752
(S'\x07\xdf\n\x15\x11\x11\x02\r} '
tRp6599
sa(dp6600
S'trial_loop.thisTrialN'
p6601
I14
sg6370
S'1-treacle_cookies.png'
p6602
sS'block_loop.thisIndex'
p6603
g6364
sg38
S'left'
p6604
sg58
g62
sS'trial_loop.thisN'
p6605
I14
sg33
S'1-treacle_cookies.png'
p6606
sg63
g64
sS'trial_loop.thisIndex'
p6607
g59
(g98
S'\x0e\x00\x00\x00'
tRp6608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6609
I0
sg6379
S'21-nakd_banana_crunch.png'
p6610
sS'block_loop.thisRepN'
p6611
I2
sg6382
g6606
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6612
I2
sg6384
S'21-nakd_banana_crunch.png'
p6613
sg55
g11
sS'block_loop.thisTrial'
p6614
Nsg69
Vn
sS'block_loop.thisTrialN'
p6615
I0
sg39
F0.66726318634482595
sg34
g752
(S'\x07\xdf\n\x15\x11\x11\t\x02]x'
tRp6616
sa(dp6617
S'trial_loop.thisTrialN'
p6618
I15
sg6370
g6440
sS'block_loop.thisIndex'
p6619
g6364
sg38
S'right'
p6620
sg58
g62
sS'trial_loop.thisN'
p6621
I15
sg33
g6451
sg63
g64
sS'trial_loop.thisIndex'
p6622
g59
(g98
S'\x0f\x00\x00\x00'
tRp6623
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6624
I0
sg6379
g6448
sS'block_loop.thisRepN'
p6625
I2
sg6382
g6444
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6626
I2
sg6384
g6451
sg55
g11
sS'block_loop.thisTrial'
p6627
Nsg69
Vn
sS'block_loop.thisTrialN'
p6628
I0
sg39
F1.7334988231168609
sg34
g752
(S'\x07\xdf\n\x15\x11\x11\x0e\x0c\xf4h'
tRp6629
sa(dp6630
S'trial_loop.thisTrialN'
p6631
I16
sg6370
S'45-chewy_nougat_redo.png'
p6632
sS'block_loop.thisIndex'
p6633
g6364
sg38
S'right'
p6634
sg58
g62
sS'trial_loop.thisN'
p6635
I16
sg33
S'41-peanuts_redo.png'
p6636
sg63
g64
sS'trial_loop.thisIndex'
p6637
g59
(g98
S'\x10\x00\x00\x00'
tRp6638
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6639
I0
sg6379
S'41-peanuts_redo.png'
p6640
sS'block_loop.thisRepN'
p6641
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6642
I2
sg6384
S'45-chewy_nougat_redo.png'
p6643
sg55
g11
sS'block_loop.thisTrial'
p6644
Nsg69
Vn
sS'block_loop.thisTrialN'
p6645
I0
sg39
F2.0001402681291438
sg34
g752
(S'\x07\xdf\n\x15\x11\x11\x15\tq\xf8'
tRp6646
sa(dp6647
S'trial_loop.thisTrialN'
p6648
I17
sg6370
S'25-kitkat.png'
p6649
sS'block_loop.thisIndex'
p6650
g6364
sg38
S'left'
p6651
sg58
g62
sS'trial_loop.thisN'
p6652
I17
sg33
g6483
sg63
g64
sS'trial_loop.thisIndex'
p6653
g59
(g98
S'\x11\x00\x00\x00'
tRp6654
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6655
I0
sg6379
S'31-hobnobs.png'
p6656
sS'block_loop.thisRepN'
p6657
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6658
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p6659
Nsg69
Vn
sS'block_loop.thisTrialN'
p6660
I0
sg39
F1.1335232845085557
sg34
g752
(S'\x07\xdf\n\x15\x11\x11\x1c\t\xfe\x98'
tRp6661
sa(dp6662
S'trial_loop.thisTrialN'
p6663
I18
sg6370
S'46-pistachios.png'
p6664
sS'block_loop.thisIndex'
p6665
g6364
sg38
S'left'
p6666
sg58
g62
sS'trial_loop.thisN'
p6667
I18
sg33
g6559
sg63
g64
sS'trial_loop.thisIndex'
p6668
g59
(g98
S'\x12\x00\x00\x00'
tRp6669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6670
I0
sg6379
S'29-beans.png'
p6671
sS'block_loop.thisRepN'
p6672
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6673
I2
sg6384
g6566
sg55
g11
sS'block_loop.thisTrial'
p6674
Nsg69
Vn
sS'block_loop.thisTrialN'
p6675
I0
sg39
F1.616721899618824
sg34
g752
(S'\x07\xdf\n\x15\x11\x11"\x0cwh'
tRp6676
sa(dp6677
S'trial_loop.thisTrialN'
p6678
I19
sg6370
S'8-liquorice_catherine_wheels.png'
p6679
sS'block_loop.thisIndex'
p6680
g6364
sg38
S'right'
p6681
sg58
g62
sS'trial_loop.thisN'
p6682
I19
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p6683
g59
(g98
S'\x13\x00\x00\x00'
tRp6684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6685
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p6686
sS'block_loop.thisRepN'
p6687
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6688
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p6689
Nsg69
Vn
sS'block_loop.thisTrialN'
p6690
I0
sg39
F0.8672849678177954
sg34
g752
(S'\x07\xdf\n\x15\x11\x11)\x07K0'
tRp6691
sa(dp6692
S'trial_loop.thisTrialN'
p6693
I20
sg6370
S'26-walkers_smoky_bacon.png'
p6694
sS'block_loop.thisIndex'
p6695
g6364
sg38
S'left'
p6696
sg58
g62
sS'trial_loop.thisN'
p6697
I20
sg33
S'26-walkers_smoky_bacon.png'
p6698
sg63
g64
sS'trial_loop.thisIndex'
p6699
g59
(g98
S'\x14\x00\x00\x00'
tRp6700
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6701
I0
sg6379
S'44-crunch.png'
p6702
sS'block_loop.thisRepN'
p6703
I2
sg6382
g6698
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6704
I2
sg6384
S'44-crunch.png'
p6705
sg55
g11
sS'block_loop.thisTrial'
p6706
Nsg69
Vn
sS'block_loop.thisTrialN'
p6707
I0
sg39
F1.0335269337610953
sg34
g752
(S'\x07\xdf\n\x15\x11\x11/\x05\xb8\xd8'
tRp6708
sa(dp6709
S'trial_loop.thisTrialN'
p6710
I21
sg6370
S'7-olives.png'
p6711
sS'block_loop.thisIndex'
p6712
g6364
sg38
S'right'
p6713
sg58
g62
sS'trial_loop.thisN'
p6714
I21
sg33
S'7-olives.png'
p6715
sg63
g64
sS'trial_loop.thisIndex'
p6716
g59
(g98
S'\x15\x00\x00\x00'
tRp6717
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6718
I0
sg6379
S'22-daim.png'
p6719
sS'block_loop.thisRepN'
p6720
I2
sg6382
S'22-daim.png'
p6721
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6722
I2
sg6384
g6715
sg55
g11
sS'block_loop.thisTrial'
p6723
Nsg69
Vn
sS'block_loop.thisTrialN'
p6724
I0
sg39
F0.96680891147389048
sg34
g752
(S'\x07\xdf\n\x15\x11\x115\x06\xc2x'
tRp6725
sa(dp6726
S'trial_loop.thisTrialN'
p6727
I22
sg6370
S'44-crunch.png'
p6728
sS'block_loop.thisIndex'
p6729
g6364
sg38
S'right'
p6730
sg58
g62
sS'trial_loop.thisN'
p6731
I22
sg33
g6698
sg63
g64
sS'trial_loop.thisIndex'
p6732
g59
(g98
S'\x16\x00\x00\x00'
tRp6733
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6734
I0
sg6379
S'26-walkers_smoky_bacon.png'
p6735
sS'block_loop.thisRepN'
p6736
I2
sg6382
g6698
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6737
I2
sg6384
g6705
sg55
g11
sS'block_loop.thisTrial'
p6738
Nsg69
Vn
sS'block_loop.thisTrialN'
p6739
I0
sg39
F0.96680663069128059
sg34
g752
(S'\x07\xdf\n\x15\x11\x11;\x06\x9fP'
tRp6740
sa(dp6741
S'trial_loop.thisTrialN'
p6742
I23
sg6370
S'41-peanuts_redo.png'
p6743
sS'block_loop.thisIndex'
p6744
g6364
sg38
S'left'
p6745
sg58
g62
sS'trial_loop.thisN'
p6746
I23
sg33
g6643
sg63
g64
sS'trial_loop.thisIndex'
p6747
g59
(g98
S'\x17\x00\x00\x00'
tRp6748
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6749
I0
sg6379
S'45-chewy_nougat_redo.png'
p6750
sS'block_loop.thisRepN'
p6751
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6752
I2
sg6384
g6643
sg55
g11
sS'block_loop.thisTrial'
p6753
Nsg69
Vn
sS'block_loop.thisTrialN'
p6754
I0
sg39
F0.80018063798070216
sg34
g752
(S'\x07\xdf\n\x15\x11\x12\x05\x06\xb6\xc0'
tRp6755
sa(dp6756
S'trial_loop.thisTrialN'
p6757
I24
sg6370
g6408
sS'block_loop.thisIndex'
p6758
g6364
sg38
S'right'
p6759
sg58
g62
sS'trial_loop.thisN'
p6760
I24
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6761
g59
(g98
S'\x18\x00\x00\x00'
tRp6762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6763
I0
sg6379
g6415
sS'block_loop.thisRepN'
p6764
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6765
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6766
Nsg69
Vn
sS'block_loop.thisTrialN'
p6767
I0
sg39
F2.6838296506302868
sg34
g752
(S'\x07\xdf\n\x15\x11\x12\x0b\x04.P'
tRp6768
sa(dp6769
S'trial_loop.thisTrialN'
p6770
I25
sg6370
g6423
sS'block_loop.thisIndex'
p6771
g6364
sg38
S'left'
p6772
sg58
g62
sS'trial_loop.thisN'
p6773
I25
sg33
g6433
sg63
g64
sS'trial_loop.thisIndex'
p6774
g59
(g98
S'\x19\x00\x00\x00'
tRp6775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6776
I0
sg6379
g6431
sS'block_loop.thisRepN'
p6777
I2
sg6382
g6433
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6778
I2
sg6384
g6427
sg55
g11
sS'block_loop.thisTrial'
p6779
Nsg69
Vn
sS'block_loop.thisTrialN'
p6780
I0
sg39
F1.3335245389398551
sg34
g752
(S'\x07\xdf\n\x15\x11\x12\x12\x0e\xf4 '
tRp6781
sa(dp6782
S'trial_loop.thisTrialN'
p6783
I26
sg6370
S'2-steamed_puddings.png'
p6784
sS'block_loop.thisIndex'
p6785
g6364
sg38
S'left'
p6786
sg58
g62
sS'trial_loop.thisN'
p6787
I26
sg33
S'2-steamed_puddings.png'
p6788
sg63
g64
sS'trial_loop.thisIndex'
p6789
g59
(g98
S'\x1a\x00\x00\x00'
tRp6790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6791
I0
sg6379
S'20-fruit_pastilles.png'
p6792
sS'block_loop.thisRepN'
p6793
I2
sg6382
g6788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6794
I2
sg6384
S'20-fruit_pastilles.png'
p6795
sg55
g11
sS'block_loop.thisTrial'
p6796
Nsg69
Vn
sS'block_loop.thisTrialN'
p6797
I0
sg39
F0.85010839419283002
sg34
g752
(S'\x07\xdf\n\x15\x11\x12\x19\x05\x82('
tRp6798
sa(dp6799
S'trial_loop.thisTrialN'
p6800
I27
sg6370
g6423
sS'block_loop.thisIndex'
p6801
g6364
sg38
S'left'
p6802
sg58
g62
sS'trial_loop.thisN'
p6803
I27
sg33
g6433
sg63
g64
sS'trial_loop.thisIndex'
p6804
g59
(g98
S'\x1b\x00\x00\x00'
tRp6805
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6806
I0
sg6379
g6431
sS'block_loop.thisRepN'
p6807
I2
sg6382
g6433
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6808
I2
sg6384
g6427
sg55
g11
sS'block_loop.thisTrial'
p6809
Nsg69
Vn
sS'block_loop.thisTrialN'
p6810
I0
sg39
F0.86684221089944913
sg34
g752
(S'\x07\xdf\n\x15\x11\x12\x1f\x03\xb1P'
tRp6811
sa(dp6812
S'trial_loop.thisTrialN'
p6813
I28
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p6814
sS'block_loop.thisIndex'
p6815
g6364
sg38
S'left'
p6816
sg58
g62
sS'trial_loop.thisN'
p6817
I28
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6818
g59
(g98
S'\x1c\x00\x00\x00'
tRp6819
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6820
I0
sg6379
S'36-fig_rolls.png'
p6821
sS'block_loop.thisRepN'
p6822
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6823
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6824
Nsg69
Vn
sS'block_loop.thisTrialN'
p6825
I0
sg39
F1.2335127929090959
sg34
g752
(S'\x07\xdf\n\x15\x11\x12%\x02\x1e\xf8'
tRp6826
sa(dp6827
S'trial_loop.thisTrialN'
p6828
I29
sg6370
g6506
sS'block_loop.thisIndex'
p6829
g6364
sg38
S'left'
p6830
sg58
g62
sS'trial_loop.thisN'
p6831
I29
sg33
g6451
sg63
g64
sS'trial_loop.thisIndex'
p6832
g59
(g98
S'\x1d\x00\x00\x00'
tRp6833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6834
I0
sg6379
g6513
sS'block_loop.thisRepN'
p6835
I2
sg6382
g6444
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6836
I2
sg6384
g6451
sg55
g11
sS'block_loop.thisTrial'
p6837
Nsg69
Vn
sS'block_loop.thisTrialN'
p6838
I0
sg39
F1.7671888328322893
sg34
g752
(S'\x07\xdf\n\x15\x11\x12+\x06A\x90'
tRp6839
sa(dp6840
S'trial_loop.thisTrialN'
p6841
I30
sg6370
S'42-mrkipling_lemon_slices.png'
p6842
sS'block_loop.thisIndex'
p6843
g6364
sg38
S'right'
p6844
sg58
g62
sS'trial_loop.thisN'
p6845
I30
sg33
S'16-skips_prawn.png'
p6846
sg63
g64
sS'trial_loop.thisIndex'
p6847
g59
(g98
S'\x1e\x00\x00\x00'
tRp6848
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6849
I0
sg6379
S'16-skips_prawn.png'
p6850
sS'block_loop.thisRepN'
p6851
I2
sg6382
g6846
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6852
I2
sg6384
S'42-mrkipling_lemon_slices.png'
p6853
sg55
g11
sS'block_loop.thisTrial'
p6854
Nsg69
Vn
sS'block_loop.thisTrialN'
p6855
I0
sg39
F1.4999700647285863
sg34
g752
(S'\x07\xdf\n\x15\x11\x122\x02\xfd\xa0'
tRp6856
sa(dp6857
S'trial_loop.thisTrialN'
p6858
I31
sg6370
g6371
sS'block_loop.thisIndex'
p6859
g6364
sg38
S'left'
p6860
sg58
g62
sS'trial_loop.thisN'
p6861
I31
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6862
g59
(g98
S'\x1f\x00\x00\x00'
tRp6863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6864
I0
sg6379
g6380
sS'block_loop.thisRepN'
p6865
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6866
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6867
Nsg69
Vn
sS'block_loop.thisTrialN'
p6868
I0
sg39
F1.1001178024198452
sg34
g752
(S'\x07\xdf\n\x15\x11\x128\x0b/H'
tRp6869
sa(dp6870
S'trial_loop.thisTrialN'
p6871
I32
sg6370
S'50-polo.png'
p6872
sS'block_loop.thisIndex'
p6873
g6364
sg38
S'right'
p6874
sg58
g62
sS'trial_loop.thisN'
p6875
I32
sg33
S'50-polo.png'
p6876
sg63
g64
sS'trial_loop.thisIndex'
p6877
g59
(g98
S' \x00\x00\x00'
tRp6878
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6879
I0
sg6379
S'48-twix.png'
p6880
sS'block_loop.thisRepN'
p6881
I2
sg6382
S'48-twix.png'
p6882
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6883
I2
sg6384
g6876
sg55
g11
sS'block_loop.thisTrial'
p6884
Nsg69
Vn
sS'block_loop.thisTrialN'
p6885
I0
sg39
F1.4668627949622532
sg34
g752
(S'\x07\xdf\n\x15\x11\x13\x02\r+\x18'
tRp6886
sa(dp6887
S'trial_loop.thisTrialN'
p6888
I33
sg6370
g6694
sS'block_loop.thisIndex'
p6889
g6364
sg38
S'left'
p6890
sg58
g62
sS'trial_loop.thisN'
p6891
I33
sg33
g6705
sg63
g64
sS'trial_loop.thisIndex'
p6892
g59
(g98
S'!\x00\x00\x00'
tRp6893
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6894
I0
sg6379
g6702
sS'block_loop.thisRepN'
p6895
I2
sg6382
g6698
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6896
I2
sg6384
g6705
sg55
g11
sS'block_loop.thisTrial'
p6897
Nsg69
Vn
sS'block_loop.thisTrialN'
p6898
I0
sg39
F1.0502028756109212
sg34
g752
(S'\x07\xdf\n\x15\x11\x13\t\x05\xa1h'
tRp6899
sa(dp6900
S'trial_loop.thisTrialN'
p6901
I34
sg6370
S'40-sardines.png'
p6902
sS'block_loop.thisIndex'
p6903
g6364
sg38
S'left'
p6904
sg58
g62
sS'trial_loop.thisN'
p6905
I34
sg33
S'40-sardines.png'
p6906
sg63
g64
sS'trial_loop.thisIndex'
p6907
g59
(g98
S'"\x00\x00\x00'
tRp6908
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6909
I0
sg6379
S'5-pineapple.png'
p6910
sS'block_loop.thisRepN'
p6911
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6912
I2
sg6384
S'5-pineapple.png'
p6913
sg55
g11
sS'block_loop.thisTrial'
p6914
Nsg69
Vn
sS'block_loop.thisTrialN'
p6915
I0
sg39
F1.0835567549938787
sg34
g752
(S'\x07\xdf\n\x15\x11\x13\x0f\x06\xe9\x88'
tRp6916
sa(dp6917
S'trial_loop.thisTrialN'
p6918
I35
sg6370
S'43-mrporky_pork_crackles_redo.png'
p6919
sS'block_loop.thisIndex'
p6920
g6364
sg38
S'right'
p6921
sg58
g62
sS'trial_loop.thisN'
p6922
I35
sg33
S'43-mrporky_pork_crackles_redo.png'
p6923
sg63
g64
sS'trial_loop.thisIndex'
p6924
g59
(g98
S'#\x00\x00\x00'
tRp6925
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6926
I0
sg6379
S'18-mms.png'
p6927
sS'block_loop.thisRepN'
p6928
I2
sg6382
S'18-mms.png'
p6929
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6930
I2
sg6384
g6923
sg55
g11
sS'block_loop.thisTrial'
p6931
Nsg69
Vn
sS'block_loop.thisTrialN'
p6932
I0
sg39
F1.3168274998515699
sg34
g752
(S'\x07\xdf\n\x15\x11\x13\x15\x08\xaa\xc0'
tRp6933
sa(dp6934
S'trial_loop.thisTrialN'
p6935
I36
sg6370
g6538
sS'block_loop.thisIndex'
p6936
g6364
sg38
S'left'
p6937
sg58
g62
sS'trial_loop.thisN'
p6938
I36
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p6939
g59
(g98
S'$\x00\x00\x00'
tRp6940
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6941
I0
sg6379
g6546
sS'block_loop.thisRepN'
p6942
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6943
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p6944
Nsg69
Vn
sS'block_loop.thisTrialN'
p6945
I0
sg39
F1.2168545271251787
sg34
g752
(S'\x07\xdf\n\x15\x11\x13\x1b\r\xfe\x08'
tRp6946
sa(dp6947
S'trial_loop.thisTrialN'
p6948
I37
sg6370
g6902
sS'block_loop.thisIndex'
p6949
g6364
sg38
S'left'
p6950
sg58
g62
sS'trial_loop.thisN'
p6951
I37
sg33
g6906
sg63
g64
sS'trial_loop.thisIndex'
p6952
g59
(g98
S'%\x00\x00\x00'
tRp6953
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6954
I0
sg6379
g6910
sS'block_loop.thisRepN'
p6955
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6956
I2
sg6384
g6913
sg55
g11
sS'block_loop.thisTrial'
p6957
Nsg69
Vn
sS'block_loop.thisTrialN'
p6958
I0
sg39
F1.2001737386126479
sg34
g752
(S'\x07\xdf\n\x15\x11\x13"\x02\xa3\xc8'
tRp6959
sa(dp6960
S'trial_loop.thisTrialN'
p6961
I38
sg6370
g6728
sS'block_loop.thisIndex'
p6962
g6364
sg38
S'right'
p6963
sg58
g62
sS'trial_loop.thisN'
p6964
I38
sg33
g6698
sg63
g64
sS'trial_loop.thisIndex'
p6965
g59
(g98
S'&\x00\x00\x00'
tRp6966
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6967
I0
sg6379
g6735
sS'block_loop.thisRepN'
p6968
I2
sg6382
g6698
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6969
I2
sg6384
g6705
sg55
g11
sS'block_loop.thisTrial'
p6970
Nsg69
Vn
sS'block_loop.thisTrialN'
p6971
I0
sg39
F1.3334960291576863
sg34
g752
(S'\x07\xdf\n\x15\x11\x13(\x06\x0e\xc8'
tRp6972
sa(dp6973
S'trial_loop.thisTrialN'
p6974
I39
sg6370
g6602
sS'block_loop.thisIndex'
p6975
g6364
sg38
S'left'
p6976
sg58
g62
sS'trial_loop.thisN'
p6977
I39
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p6978
g59
(g98
S"'\x00\x00\x00"
tRp6979
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6980
I0
sg6379
g6610
sS'block_loop.thisRepN'
p6981
I2
sg6382
g6606
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6982
I2
sg6384
g6613
sg55
g11
sS'block_loop.thisTrial'
p6983
Nsg69
Vn
sS'block_loop.thisTrialN'
p6984
I0
sg39
F1.3002775712402581
sg34
g752
(S'\x07\xdf\n\x15\x11\x13.\x0b\xdb('
tRp6985
sa(dp6986
S'trial_loop.thisTrialN'
p6987
I40
sg6370
g6679
sS'block_loop.thisIndex'
p6988
g6364
sg38
S'right'
p6989
sg58
g62
sS'trial_loop.thisN'
p6990
I40
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p6991
g59
(g98
S'(\x00\x00\x00'
tRp6992
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6993
I0
sg6379
g6686
sS'block_loop.thisRepN'
p6994
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6995
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p6996
Nsg69
Vn
sS'block_loop.thisTrialN'
p6997
I0
sg39
F1.250161935563483
sg34
g752
(S'\x07\xdf\n\x15\x11\x135\x01s\x18'
tRp6998
sa(dp6999
S'trial_loop.thisTrialN'
p7000
I41
sg6370
S'27-hartleys_raspberries_jelly.png'
p7001
sS'block_loop.thisIndex'
p7002
g6364
sg38
S'right'
p7003
sg58
g62
sS'trial_loop.thisN'
p7004
I41
sg33
S'51-mars.png'
p7005
sg63
g64
sS'trial_loop.thisIndex'
p7006
g59
(g98
S')\x00\x00\x00'
tRp7007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7008
I0
sg6379
S'51-mars.png'
p7009
sS'block_loop.thisRepN'
p7010
I2
sg6382
g7005
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7011
I2
sg6384
S'27-hartleys_raspberries_jelly.png'
p7012
sg55
g11
sS'block_loop.thisTrial'
p7013
Nsg69
Vn
sS'block_loop.thisTrialN'
p7014
I0
sg39
F1.3168312061234246
sg34
g752
(S'\x07\xdf\n\x15\x11\x13;\x05\xd40'
tRp7015
sa(dp7016
S'trial_loop.thisTrialN'
p7017
I42
sg6370
g6902
sS'block_loop.thisIndex'
p7018
g6364
sg38
S'left'
p7019
sg58
g62
sS'trial_loop.thisN'
p7020
I42
sg33
g6906
sg63
g64
sS'trial_loop.thisIndex'
p7021
g59
(g98
S'*\x00\x00\x00'
tRp7022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7023
I0
sg6379
g6910
sS'block_loop.thisRepN'
p7024
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7025
I2
sg6384
g6913
sg55
g11
sS'block_loop.thisTrial'
p7026
Nsg69
Vn
sS'block_loop.thisTrialN'
p7027
I0
sg39
F1.4834460800193483
sg34
g752
(S"\x07\xdf\n\x15\x11\x14\x05\x0b'x"
tRp7028
sa(dp7029
S'trial_loop.thisTrialN'
p7030
I43
sg6370
g6814
sS'block_loop.thisIndex'
p7031
g6364
sg38
S'left'
p7032
sg58
g62
sS'trial_loop.thisN'
p7033
I43
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7034
g59
(g98
S'+\x00\x00\x00'
tRp7035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7036
I0
sg6379
g6821
sS'block_loop.thisRepN'
p7037
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7038
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7039
Nsg69
Vn
sS'block_loop.thisTrialN'
p7040
I0
sg39
F1.4001895330329717
sg34
g752
(S'\x07\xdf\n\x15\x11\x14\x0c\x03\xd8`'
tRp7041
sa(dp7042
S'trial_loop.thisTrialN'
p7043
I44
sg6370
g6872
sS'block_loop.thisIndex'
p7044
g6364
sg38
S'right'
p7045
sg58
g62
sS'trial_loop.thisN'
p7046
I44
sg33
g6882
sg63
g64
sS'trial_loop.thisIndex'
p7047
g59
(g98
S',\x00\x00\x00'
tRp7048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7049
I0
sg6379
g6880
sS'block_loop.thisRepN'
p7050
I2
sg6382
g6882
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7051
I2
sg6384
g6876
sg55
g11
sS'block_loop.thisTrial'
p7052
Nsg69
Vn
sS'block_loop.thisTrialN'
p7053
I0
sg39
F1.3005201894875427
sg34
g752
(S'\x07\xdf\n\x15\x11\x14\x12\n\\X'
tRp7054
sa(dp7055
S'trial_loop.thisTrialN'
p7056
I45
sg6370
g6423
sS'block_loop.thisIndex'
p7057
g6364
sg38
S'left'
p7058
sg58
g62
sS'trial_loop.thisN'
p7059
I45
sg33
g6427
sg63
g64
sS'trial_loop.thisIndex'
p7060
g59
(g98
S'-\x00\x00\x00'
tRp7061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7062
I0
sg6379
g6431
sS'block_loop.thisRepN'
p7063
I2
sg6382
g6433
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7064
I2
sg6384
g6427
sg55
g11
sS'block_loop.thisTrial'
p7065
Nsg69
Vn
sS'block_loop.thisTrialN'
p7066
I0
sg39
F1.1168005866175008
sg34
g752
(S'\x07\xdf\n\x15\x11\x14\x19\x002\xc8'
tRp7067
sa(dp7068
S'trial_loop.thisTrialN'
p7069
I46
sg6370
g7001
sS'block_loop.thisIndex'
p7070
g6364
sg38
S'right'
p7071
sg58
g62
sS'trial_loop.thisN'
p7072
I46
sg33
g7005
sg63
g64
sS'trial_loop.thisIndex'
p7073
g59
(g98
S'.\x00\x00\x00'
tRp7074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7075
I0
sg6379
g7009
sS'block_loop.thisRepN'
p7076
I2
sg6382
g7005
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7077
I2
sg6384
g7012
sg55
g11
sS'block_loop.thisTrial'
p7078
Nsg69
Vn
sS'block_loop.thisTrialN'
p7079
I0
sg39
F1.383531267248145
sg34
g752
(S'\x07\xdf\n\x15\x11\x14\x1f\x02\xab\x98'
tRp7080
sa(dp7081
S'trial_loop.thisTrialN'
p7082
I47
sg6370
g6842
sS'block_loop.thisIndex'
p7083
g6364
sg38
S'right'
p7084
sg58
g62
sS'trial_loop.thisN'
p7085
I47
sg33
g6846
sg63
g64
sS'trial_loop.thisIndex'
p7086
g59
(g98
S'/\x00\x00\x00'
tRp7087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7088
I0
sg6379
g6850
sS'block_loop.thisRepN'
p7089
I2
sg6382
g6846
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7090
I2
sg6384
g6853
sg55
g11
sS'block_loop.thisTrial'
p7091
Nsg69
Vn
sS'block_loop.thisTrialN'
p7092
I0
sg39
F1.1834057101668805
sg34
g752
(S'\x07\xdf\n\x15\x11\x14%\x08\xf4\xf8'
tRp7093
sa(dp7094
S'trial_loop.thisTrialN'
p7095
I48
sg6370
S'21-nakd_banana_crunch.png'
p7096
sS'block_loop.thisIndex'
p7097
g6364
sg38
S'right'
p7098
sg58
g62
sS'trial_loop.thisN'
p7099
I48
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p7100
g59
(g98
S'0\x00\x00\x00'
tRp7101
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7102
I0
sg6379
S'1-treacle_cookies.png'
p7103
sS'block_loop.thisRepN'
p7104
I2
sg6382
g6606
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7105
I2
sg6384
g6613
sg55
g11
sS'block_loop.thisTrial'
p7106
Nsg69
Vn
sS'block_loop.thisTrialN'
p7107
I0
sg39
F1.3168545841444939
sg34
g752
(S'\x07\xdf\n\x15\x11\x14+\x0c%`'
tRp7108
sa(dp7109
S'trial_loop.thisTrialN'
p7110
I49
sg6370
g6728
sS'block_loop.thisIndex'
p7111
g6364
sg38
S'right'
p7112
sg58
g62
sS'trial_loop.thisN'
p7113
I49
sg33
g6698
sg63
g64
sS'trial_loop.thisIndex'
p7114
g59
(g98
S'1\x00\x00\x00'
tRp7115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7116
I0
sg6379
g6735
sS'block_loop.thisRepN'
p7117
I2
sg6382
g6698
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7118
I2
sg6384
g6705
sg55
g11
sS'block_loop.thisTrial'
p7119
Nsg69
Vn
sS'block_loop.thisTrialN'
p7120
I0
sg39
F1.0671907144778743
sg34
g752
(S'\x07\xdf\n\x15\x11\x142\x02q\x00'
tRp7121
sa(dp7122
S'trial_loop.thisTrialN'
p7123
I50
sg6370
g6649
sS'block_loop.thisIndex'
p7124
g6364
sg38
S'left'
p7125
sg58
g62
sS'trial_loop.thisN'
p7126
I50
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p7127
g59
(g98
S'2\x00\x00\x00'
tRp7128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7129
I0
sg6379
g6656
sS'block_loop.thisRepN'
p7130
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7131
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p7132
Nsg69
Vn
sS'block_loop.thisTrialN'
p7133
I0
sg39
F1.2500285097830783
sg34
g752
(S'\x07\xdf\n\x15\x11\x148\x03\xf7\xa0'
tRp7134
sa(dp7135
S'trial_loop.thisTrialN'
p7136
I51
sg6370
g6664
sS'block_loop.thisIndex'
p7137
g6364
sg38
S'left'
p7138
sg58
g62
sS'trial_loop.thisN'
p7139
I51
sg33
g6566
sg63
g64
sS'trial_loop.thisIndex'
p7140
g59
(g98
S'3\x00\x00\x00'
tRp7141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7142
I0
sg6379
g6671
sS'block_loop.thisRepN'
p7143
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7144
I2
sg6384
g6566
sg55
g11
sS'block_loop.thisTrial'
p7145
Nsg69
Vn
sS'block_loop.thisTrialN'
p7146
I0
sg39
F1.0668517331669136
sg34
g752
(S'\x07\xdf\n\x15\x11\x15\x02\x08\x1a8'
tRp7147
sa(dp7148
S'trial_loop.thisTrialN'
p7149
I52
sg6370
g6632
sS'block_loop.thisIndex'
p7150
g6364
sg38
S'right'
p7151
sg58
g62
sS'trial_loop.thisN'
p7152
I52
sg33
g6643
sg63
g64
sS'trial_loop.thisIndex'
p7153
g59
(g98
S'4\x00\x00\x00'
tRp7154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7155
I0
sg6379
g6640
sS'block_loop.thisRepN'
p7156
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7157
I2
sg6384
g6643
sg55
g11
sS'block_loop.thisTrial'
p7158
Nsg69
Vn
sS'block_loop.thisTrialN'
p7159
I0
sg39
F1.1835123367536653
sg34
g752
(S'\x07\xdf\n\x15\x11\x15\x08\t\xa0\xd8'
tRp7160
sa(dp7161
S'trial_loop.thisTrialN'
p7162
I53
sg6370
S'3-ellas_strawberries_apples.png'
p7163
sS'block_loop.thisIndex'
p7164
g6364
sg38
S'right'
p7165
sg58
g62
sS'trial_loop.thisN'
p7166
I53
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p7167
g59
(g98
S'5\x00\x00\x00'
tRp7168
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7169
I0
sg6379
S'13-mccoys_steak_crisps.png'
p7170
sS'block_loop.thisRepN'
p7171
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7172
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p7173
Nsg69
Vn
sS'block_loop.thisTrialN'
p7174
I0
sg39
F1.2501873092696769
sg34
g752
(S'\x07\xdf\n\x15\x11\x15\x0e\r\x0b\xd8'
tRp7175
sa(dp7176
S'trial_loop.thisTrialN'
p7177
I54
sg6370
S'5-pineapple.png'
p7178
sS'block_loop.thisIndex'
p7179
g6364
sg38
S'right'
p7180
sg58
g62
sS'trial_loop.thisN'
p7181
I54
sg33
g6913
sg63
g64
sS'trial_loop.thisIndex'
p7182
g59
(g98
S'6\x00\x00\x00'
tRp7183
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7184
I0
sg6379
S'40-sardines.png'
p7185
sS'block_loop.thisRepN'
p7186
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7187
I2
sg6384
g6913
sg55
g11
sS'block_loop.thisTrial'
p7188
Nsg69
Vn
sS'block_loop.thisTrialN'
p7189
I0
sg39
F1.3172517254115519
sg34
g752
(S'\x07\xdf\n\x15\x11\x15\x15\x02*\xb0'
tRp7190
sa(dp7191
S'trial_loop.thisTrialN'
p7192
I55
sg6370
g6872
sS'block_loop.thisIndex'
p7193
g6364
sg38
S'right'
p7194
sg58
g62
sS'trial_loop.thisN'
p7195
I55
sg33
g6882
sg63
g64
sS'trial_loop.thisIndex'
p7196
g59
(g98
S'7\x00\x00\x00'
tRp7197
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7198
I0
sg6379
g6880
sS'block_loop.thisRepN'
p7199
I2
sg6382
g6882
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7200
I2
sg6384
g6876
sg55
g11
sS'block_loop.thisTrial'
p7201
Nsg69
Vn
sS'block_loop.thisTrialN'
p7202
I0
sg39
F1.1168028674001107
sg34
g752
(S'\x07\xdf\n\x15\x11\x15\x1b\x07}\xf8'
tRp7203
sa(dp7204
S'trial_loop.thisTrialN'
p7205
I56
sg6370
g6408
sS'block_loop.thisIndex'
p7206
g6364
sg38
S'right'
p7207
sg58
g62
sS'trial_loop.thisN'
p7208
I56
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7209
g59
(g98
S'8\x00\x00\x00'
tRp7210
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7211
I0
sg6379
g6415
sS'block_loop.thisRepN'
p7212
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7213
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7214
Nsg69
Vn
sS'block_loop.thisTrialN'
p7215
I0
sg39
F1.0167426547395735
sg34
g752
(S'\x07\xdf\n\x15\x11\x15!\t\xbc0'
tRp7216
sa(dp7217
S'trial_loop.thisTrialN'
p7218
I57
sg6370
g6572
sS'block_loop.thisIndex'
p7219
g6364
sg38
S'left'
p7220
sg58
g62
sS'trial_loop.thisN'
p7221
I57
sg33
g6576
sg63
g64
sS'trial_loop.thisIndex'
p7222
g59
(g98
S'9\x00\x00\x00'
tRp7223
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7224
I0
sg6379
g6580
sS'block_loop.thisRepN'
p7225
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7226
I2
sg6384
g6583
sg55
g11
sS'block_loop.thisTrial'
p7227
Nsg69
Vn
sS'block_loop.thisTrialN'
p7228
I0
sg39
F1.0669292797747403
sg34
g752
(S"\x07\xdf\n\x15\x11\x15'\n\x87P"
tRp7229
sa(dp7230
S'trial_loop.thisTrialN'
p7231
I58
sg6370
g6743
sS'block_loop.thisIndex'
p7232
g6364
sg38
S'left'
p7233
sg58
g62
sS'trial_loop.thisN'
p7234
I58
sg33
g6636
sg63
g64
sS'trial_loop.thisIndex'
p7235
g59
(g98
S':\x00\x00\x00'
tRp7236
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7237
I0
sg6379
g6750
sS'block_loop.thisRepN'
p7238
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7239
I2
sg6384
g6643
sg55
g11
sS'block_loop.thisTrial'
p7240
Nsg69
Vn
sS'block_loop.thisTrialN'
p7241
I0
sg39
F0.76672982533727918
sg34
g752
(S'\x07\xdf\n\x15\x11\x15-\x0c\r\xf0'
tRp7242
sa(dp7243
S'trial_loop.thisTrialN'
p7244
I59
sg6370
S'38-maltesers.png'
p7245
sS'block_loop.thisIndex'
p7246
g6364
sg38
S'left'
p7247
sg58
g62
sS'trial_loop.thisN'
p7248
I59
sg33
g6500
sg63
g64
sS'trial_loop.thisIndex'
p7249
g59
(g98
S';\x00\x00\x00'
tRp7250
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7251
I0
sg6379
S'6-sour_patch_kids.png'
p7252
sS'block_loop.thisRepN'
p7253
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7254
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p7255
Nsg69
Vn
sS'block_loop.thisTrialN'
p7256
I0
sg39
F1.0002873786052078
sg34
g752
(S'\x07\xdf\n\x15\x11\x153\x08\xd1\xd0'
tRp7257
sa(dp7258
S'trial_loop.thisTrialN'
p7259
I60
sg6370
g6632
sS'block_loop.thisIndex'
p7260
g6364
sg38
S'right'
p7261
sg58
g62
sS'trial_loop.thisN'
p7262
I60
sg33
g6636
sg63
g64
sS'trial_loop.thisIndex'
p7263
g59
(g98
S'<\x00\x00\x00'
tRp7264
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7265
I0
sg6379
g6640
sS'block_loop.thisRepN'
p7266
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7267
I2
sg6384
g6643
sg55
g11
sS'block_loop.thisTrial'
p7268
Nsg69
Vn
sS'block_loop.thisTrialN'
p7269
I0
sg39
F0.88351444647651078
sg34
g752
(S'\x07\xdf\n\x15\x11\x159\tbX'
tRp7270
sa(dp7271
S'trial_loop.thisTrialN'
p7272
I61
sg6370
g6919
sS'block_loop.thisIndex'
p7273
g6364
sg38
S'right'
p7274
sg58
g62
sS'trial_loop.thisN'
p7275
I61
sg33
g6929
sg63
g64
sS'trial_loop.thisIndex'
p7276
g59
(g98
S'=\x00\x00\x00'
tRp7277
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7278
I0
sg6379
g6927
sS'block_loop.thisRepN'
p7279
I2
sg6382
g6929
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7280
I2
sg6384
g6923
sg55
g11
sS'block_loop.thisTrial'
p7281
Nsg69
Vn
sS'block_loop.thisTrialN'
p7282
I0
sg39
F0.70020481427582126
sg34
g752
(S'\x07\xdf\n\x15\x11\x16\x03\x08I\x18'
tRp7283
sa(dp7284
S'trial_loop.thisTrialN'
p7285
I62
sg6370
g6506
sS'block_loop.thisIndex'
p7286
g6364
sg38
S'left'
p7287
sg58
g62
sS'trial_loop.thisN'
p7288
I62
sg33
g6444
sg63
g64
sS'trial_loop.thisIndex'
p7289
g59
(g98
S'>\x00\x00\x00'
tRp7290
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7291
I0
sg6379
g6513
sS'block_loop.thisRepN'
p7292
I2
sg6382
g6444
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7293
I2
sg6384
g6451
sg55
g11
sS'block_loop.thisTrial'
p7294
Nsg69
Vn
sS'block_loop.thisTrialN'
p7295
I0
sg39
F0.80017265524111281
sg34
g752
(S'\x07\xdf\n\x15\x11\x16\t\x04\x16\xe0'
tRp7296
sa(dp7297
S'trial_loop.thisTrialN'
p7298
I63
sg6370
g6602
sS'block_loop.thisIndex'
p7299
g6364
sg38
S'left'
p7300
sg58
g62
sS'trial_loop.thisN'
p7301
I63
sg33
g6613
sg63
g64
sS'trial_loop.thisIndex'
p7302
g59
(g98
S'?\x00\x00\x00'
tRp7303
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7304
I0
sg6379
g6610
sS'block_loop.thisRepN'
p7305
I2
sg6382
g6606
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7306
I2
sg6384
g6613
sg55
g11
sS'block_loop.thisTrial'
p7307
Nsg69
Vn
sS'block_loop.thisTrialN'
p7308
I0
sg39
F0.81691559507908096
sg34
g752
(S'\x07\xdf\n\x15\x11\x16\x0f\x01\x8ep'
tRp7309
sa(dp7310
S'trial_loop.thisTrialN'
p7311
I64
sg6370
g7245
sS'block_loop.thisIndex'
p7312
g6364
sg38
S'left'
p7313
sg58
g62
sS'trial_loop.thisN'
p7314
I64
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p7315
g59
(g98
S'@\x00\x00\x00'
tRp7316
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7317
I0
sg6379
g7252
sS'block_loop.thisRepN'
p7318
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7319
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p7320
Nsg69
Vn
sS'block_loop.thisTrialN'
p7321
I0
sg39
F1.7168950110162768
sg34
g752
(S'\x07\xdf\n\x15\x11\x16\x14\x0e\x8a\xa8'
tRp7322
sa(dp7323
S'trial_loop.thisTrialN'
p7324
I65
sg6370
g6919
sS'block_loop.thisIndex'
p7325
g6364
sg38
S'right'
p7326
sg58
g62
sS'trial_loop.thisN'
p7327
I65
sg33
g6929
sg63
g64
sS'trial_loop.thisIndex'
p7328
g59
(g98
S'A\x00\x00\x00'
tRp7329
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7330
I0
sg6379
g6927
sS'block_loop.thisRepN'
p7331
I2
sg6382
g6929
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7332
I2
sg6384
g6923
sg55
g11
sS'block_loop.thisTrial'
p7333
Nsg69
Vn
sS'block_loop.thisTrialN'
p7334
I0
sg39
F0.6668748831098128
sg34
g752
(S'\x07\xdf\n\x15\x11\x16\x1b\n\xc9\xb8'
tRp7335
sa(dp7336
S'trial_loop.thisTrialN'
p7337
I66
sg6370
g6814
sS'block_loop.thisIndex'
p7338
g6364
sg38
S'left'
p7339
sg58
g62
sS'trial_loop.thisN'
p7340
I66
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7341
g59
(g98
S'B\x00\x00\x00'
tRp7342
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7343
I0
sg6379
g6821
sS'block_loop.thisRepN'
p7344
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7345
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7346
Nsg69
Vn
sS'block_loop.thisTrialN'
p7347
I0
sg39
F1.9335046391115611
sg34
g752
(S'\x07\xdf\n\x15\x11\x16!\x06\x1eh'
tRp7348
sa(dp7349
S'trial_loop.thisTrialN'
p7350
I67
sg6370
g6728
sS'block_loop.thisIndex'
p7351
g6364
sg38
S'right'
p7352
sg58
g62
sS'trial_loop.thisN'
p7353
I67
sg33
g6698
sg63
g64
sS'trial_loop.thisIndex'
p7354
g59
(g98
S'C\x00\x00\x00'
tRp7355
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7356
I0
sg6379
g6735
sS'block_loop.thisRepN'
p7357
I2
sg6382
g6698
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7358
I2
sg6384
g6705
sg55
g11
sS'block_loop.thisTrial'
p7359
Nsg69
Vn
sS'block_loop.thisTrialN'
p7360
I0
sg39
F0.80027072889242845
sg34
g752
(S'\x07\xdf\n\x15\x11\x16(\x05\xb8\xd8'
tRp7361
sa(dp7362
S'trial_loop.thisTrialN'
p7363
I68
sg6370
S'48-twix.png'
p7364
sS'block_loop.thisIndex'
p7365
g6364
sg38
S'left'
p7366
sg58
g62
sS'trial_loop.thisN'
p7367
I68
sg33
g6876
sg63
g64
sS'trial_loop.thisIndex'
p7368
g59
(g98
S'D\x00\x00\x00'
tRp7369
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7370
I0
sg6379
S'50-polo.png'
p7371
sS'block_loop.thisRepN'
p7372
I2
sg6382
g6882
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7373
I2
sg6384
g6876
sg55
g11
sS'block_loop.thisTrial'
p7374
Nsg69
Vn
sS'block_loop.thisTrialN'
p7375
I0
sg39
F1.1335583515419785
sg34
g752
(S'\x07\xdf\n\x15\x11\x16.\x030h'
tRp7376
sa(dp7377
S'trial_loop.thisTrialN'
p7378
I69
sg6370
g7096
sS'block_loop.thisIndex'
p7379
g6364
sg38
S'right'
p7380
sg58
g62
sS'trial_loop.thisN'
p7381
I69
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p7382
g59
(g98
S'E\x00\x00\x00'
tRp7383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7384
I0
sg6379
g7103
sS'block_loop.thisRepN'
p7385
I2
sg6382
g6606
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7386
I2
sg6384
g6613
sg55
g11
sS'block_loop.thisTrial'
p7387
Nsg69
Vn
sS'block_loop.thisTrialN'
p7388
I0
sg39
F0.88384287916869653
sg34
g752
(S'\x07\xdf\n\x15\x11\x164\x05\xa98'
tRp7389
sa(dp7390
S'trial_loop.thisTrialN'
p7391
I70
sg6370
S'35-raisins.png'
p7392
sS'block_loop.thisIndex'
p7393
g6364
sg38
S'right'
p7394
sg58
g62
sS'trial_loop.thisN'
p7395
I70
sg33
g6576
sg63
g64
sS'trial_loop.thisIndex'
p7396
g59
(g98
S'F\x00\x00\x00'
tRp7397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7398
I0
sg6379
S'49-yorkie.png'
p7399
sS'block_loop.thisRepN'
p7400
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7401
I2
sg6384
g6583
sg55
g11
sS'block_loop.thisTrial'
p7402
Nsg69
Vn
sS'block_loop.thisTrialN'
p7403
I0
sg39
F0.91684323725166905
sg34
g752
(S'\x07\xdf\n\x15\x11\x16:\x04Qx'
tRp7404
sa(dp7405
S'trial_loop.thisTrialN'
p7406
I71
sg6370
g6649
sS'block_loop.thisIndex'
p7407
g6364
sg38
S'left'
p7408
sg58
g62
sS'trial_loop.thisN'
p7409
I71
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p7410
g59
(g98
S'G\x00\x00\x00'
tRp7411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7412
I0
sg6379
g6656
sS'block_loop.thisRepN'
p7413
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7414
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p7415
Nsg69
Vn
sS'block_loop.thisTrialN'
p7416
I0
sg39
F0.98351222271412553
sg34
g752
(S'\x07\xdf\n\x15\x11\x17\x04\x03v\xb8'
tRp7417
sa(dp7418
S'trial_loop.thisTrialN'
p7419
I72
sg6370
S'16-skips_prawn.png'
p7420
sS'block_loop.thisIndex'
p7421
g6364
sg38
S'left'
p7422
sg58
g62
sS'trial_loop.thisN'
p7423
I72
sg33
g6846
sg63
g64
sS'trial_loop.thisIndex'
p7424
g59
(g98
S'H\x00\x00\x00'
tRp7425
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7426
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p7427
sS'block_loop.thisRepN'
p7428
I2
sg6382
g6846
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7429
I2
sg6384
g6853
sg55
g11
sS'block_loop.thisTrial'
p7430
Nsg69
Vn
sS'block_loop.thisTrialN'
p7431
I0
sg39
F0.78343171108826937
sg34
g752
(S'\x07\xdf\n\x15\x11\x17\n\x03\xcc\xa8'
tRp7432
sa(dp7433
S'trial_loop.thisTrialN'
p7434
I73
sg6370
S'51-mars.png'
p7435
sS'block_loop.thisIndex'
p7436
g6364
sg38
S'left'
p7437
sg58
g62
sS'trial_loop.thisN'
p7438
I73
sg33
g7005
sg63
g64
sS'trial_loop.thisIndex'
p7439
g59
(g98
S'I\x00\x00\x00'
tRp7440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7441
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p7442
sS'block_loop.thisRepN'
p7443
I2
sg6382
g7005
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7444
I2
sg6384
g7012
sg55
g11
sS'block_loop.thisTrial'
p7445
Nsg69
Vn
sS'block_loop.thisTrialN'
p7446
I0
sg39
F0.83353309187441482
sg34
g752
(S'\x07\xdf\n\x15\x11\x17\x10\x01\x05\xb8'
tRp7447
sa(dp7448
S'trial_loop.thisTrialN'
p7449
I74
sg6370
g6632
sS'block_loop.thisIndex'
p7450
g6364
sg38
S'right'
p7451
sg58
g62
sS'trial_loop.thisN'
p7452
I74
sg33
g6636
sg63
g64
sS'trial_loop.thisIndex'
p7453
g59
(g98
S'J\x00\x00\x00'
tRp7454
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7455
I0
sg6379
g6640
sS'block_loop.thisRepN'
p7456
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7457
I2
sg6384
g6643
sg55
g11
sS'block_loop.thisTrial'
p7458
Nsg69
Vn
sS'block_loop.thisTrialN'
p7459
I0
sg39
F1.1000522299218574
sg34
g752
(S'\x07\xdf\n\x15\x11\x17\x15\x0e<\x88'
tRp7460
sa(dp7461
S'trial_loop.thisTrialN'
p7462
I75
sg6370
g7245
sS'block_loop.thisIndex'
p7463
g6364
sg38
S'left'
p7464
sg58
g62
sS'trial_loop.thisN'
p7465
I75
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p7466
g59
(g98
S'K\x00\x00\x00'
tRp7467
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7468
I0
sg6379
g7252
sS'block_loop.thisRepN'
p7469
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7470
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p7471
Nsg69
Vn
sS'block_loop.thisTrialN'
p7472
I0
sg39
F0.80023138539309002
sg34
g752
(S'\x07\xdf\n\x15\x11\x17\x1c\x00\xfa\x00'
tRp7473
sa(dp7474
S'trial_loop.thisTrialN'
p7475
I76
sg6370
g6555
sS'block_loop.thisIndex'
p7476
g6364
sg38
S'right'
p7477
sg58
g62
sS'trial_loop.thisN'
p7478
I76
sg33
g6559
sg63
g64
sS'trial_loop.thisIndex'
p7479
g59
(g98
S'L\x00\x00\x00'
tRp7480
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7481
I0
sg6379
g6563
sS'block_loop.thisRepN'
p7482
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7483
I2
sg6384
g6566
sg55
g11
sS'block_loop.thisTrial'
p7484
Nsg69
Vn
sS'block_loop.thisTrialN'
p7485
I0
sg39
F0.85016227768119279
sg34
g752
(S'\x07\xdf\n\x15\x11\x17!\r\xb3\xd0'
tRp7486
sa(dp7487
S'trial_loop.thisTrialN'
p7488
I77
sg6370
g6489
sS'block_loop.thisIndex'
p7489
g6364
sg38
S'right'
p7490
sg58
g62
sS'trial_loop.thisN'
p7491
I77
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p7492
g59
(g98
S'M\x00\x00\x00'
tRp7493
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7494
I0
sg6379
g6497
sS'block_loop.thisRepN'
p7495
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7496
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p7497
Nsg69
Vn
sS'block_loop.thisTrialN'
p7498
I0
sg39
F0.83320922074835835
sg34
g752
(S"\x07\xdf\n\x15\x11\x17'\x0b\xe2\xf8"
tRp7499
sa(dp7500
S'trial_loop.thisTrialN'
p7501
I78
sg6370
g6664
sS'block_loop.thisIndex'
p7502
g6364
sg38
S'left'
p7503
sg58
g62
sS'trial_loop.thisN'
p7504
I78
sg33
g6566
sg63
g64
sS'trial_loop.thisIndex'
p7505
g59
(g98
S'N\x00\x00\x00'
tRp7506
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7507
I0
sg6379
g6671
sS'block_loop.thisRepN'
p7508
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7509
I2
sg6384
g6566
sg55
g11
sS'block_loop.thisTrial'
p7510
Nsg69
Vn
sS'block_loop.thisTrialN'
p7511
I0
sg39
F0.7502571582353994
sg34
g752
(S'\x07\xdf\n\x15\x11\x17-\t\xd7\x88'
tRp7512
sa(dp7513
S'trial_loop.thisTrialN'
p7514
I79
sg6370
g6472
sS'block_loop.thisIndex'
p7515
g6364
sg38
S'right'
p7516
sg58
g62
sS'trial_loop.thisN'
p7517
I79
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p7518
g59
(g98
S'O\x00\x00\x00'
tRp7519
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7520
I0
sg6379
g6480
sS'block_loop.thisRepN'
p7521
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7522
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p7523
Nsg69
Vn
sS'block_loop.thisTrialN'
p7524
I0
sg39
F1.0001285791186092
sg34
g752
(S'\x07\xdf\n\x15\x11\x173\x06\x9bh'
tRp7525
sa(dp7526
S'trial_loop.thisTrialN'
p7527
I80
sg6370
g6521
sS'block_loop.thisIndex'
p7528
g6364
sg38
S'left'
p7529
sg58
g62
sS'trial_loop.thisN'
p7530
I80
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p7531
g59
(g98
S'P\x00\x00\x00'
tRp7532
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7533
I0
sg6379
g6529
sS'block_loop.thisRepN'
p7534
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7535
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p7536
Nsg69
Vn
sS'block_loop.thisTrialN'
p7537
I0
sg39
F0.75014825086782366
sg34
g752
(S'\x07\xdf\n\x15\x11\x179\x07+\xf0'
tRp7538
sa(dp7539
S'trial_loop.thisTrialN'
p7540
I81
sg6370
g6602
sS'block_loop.thisIndex'
p7541
g6364
sg38
S'left'
p7542
sg58
g62
sS'trial_loop.thisN'
p7543
I81
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p7544
g59
(g98
S'Q\x00\x00\x00'
tRp7545
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7546
I0
sg6379
g6610
sS'block_loop.thisRepN'
p7547
I2
sg6382
g6606
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7548
I2
sg6384
g6613
sg55
g11
sS'block_loop.thisTrial'
p7549
Nsg69
Vn
sS'block_loop.thisTrialN'
p7550
I0
sg39
F0.66723553185511264
sg34
g752
(S'\x07\xdf\n\x15\x11\x18\x03\x03\xeb\xe8'
tRp7551
sa(dp7552
S'trial_loop.thisTrialN'
p7553
I82
sg6370
g6814
sS'block_loop.thisIndex'
p7554
g6364
sg38
S'left'
p7555
sg58
g62
sS'trial_loop.thisN'
p7556
I82
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7557
g59
(g98
S'R\x00\x00\x00'
tRp7558
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7559
I0
sg6379
g6821
sS'block_loop.thisRepN'
p7560
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7561
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7562
Nsg69
Vn
sS'block_loop.thisTrialN'
p7563
I0
sg39
F1.200180580961387
sg34
g752
(S'\x07\xdf\n\x15\x11\x18\x08\x0e\x82\xd8'
tRp7564
sa(dp7565
S'trial_loop.thisTrialN'
p7566
I83
sg6370
g7163
sS'block_loop.thisIndex'
p7567
g6364
sg38
S'right'
p7568
sg58
g62
sS'trial_loop.thisN'
p7569
I83
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p7570
g59
(g98
S'S\x00\x00\x00'
tRp7571
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7572
I0
sg6379
g7170
sS'block_loop.thisRepN'
p7573
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7574
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p7575
Nsg69
Vn
sS'block_loop.thisTrialN'
p7576
I0
sg39
F0.86677834898728179
sg34
g752
(S'\x07\xdf\n\x15\x11\x18\x0f\x02\xee\x00'
tRp7577
sa(dp7578
S'trial_loop.thisTrialN'
p7579
I84
sg6370
g7096
sS'block_loop.thisIndex'
p7580
g6364
sg38
S'right'
p7581
sg58
g62
sS'trial_loop.thisN'
p7582
I84
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p7583
g59
(g98
S'T\x00\x00\x00'
tRp7584
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7585
I0
sg6379
g7103
sS'block_loop.thisRepN'
p7586
I2
sg6382
g6606
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7587
I2
sg6384
g6613
sg55
g11
sS'block_loop.thisTrial'
p7588
Nsg69
Vn
sS'block_loop.thisTrialN'
p7589
I0
sg39
F0.81676991009135236
sg34
g752
(S'\x07\xdf\n\x15\x11\x18\x15\x01W\xc0'
tRp7590
sa(dp7591
S'trial_loop.thisTrialN'
p7592
I85
sg6370
g6694
sS'block_loop.thisIndex'
p7593
g6364
sg38
S'left'
p7594
sg58
g62
sS'trial_loop.thisN'
p7595
I85
sg33
g6698
sg63
g64
sS'trial_loop.thisIndex'
p7596
g59
(g98
S'U\x00\x00\x00'
tRp7597
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7598
I0
sg6379
g6702
sS'block_loop.thisRepN'
p7599
I2
sg6382
g6698
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7600
I2
sg6384
g6705
sg55
g11
sS'block_loop.thisTrial'
p7601
Nsg69
Vn
sS'block_loop.thisTrialN'
p7602
I0
sg39
F0.80010366156875534
sg34
g752
(S'\x07\xdf\n\x15\x11\x18\x1a\x0eP\x10'
tRp7603
sa(dp7604
S'trial_loop.thisTrialN'
p7605
I86
sg6370
g6902
sS'block_loop.thisIndex'
p7606
g6364
sg38
S'left'
p7607
sg58
g62
sS'trial_loop.thisN'
p7608
I86
sg33
g6906
sg63
g64
sS'trial_loop.thisIndex'
p7609
g59
(g98
S'V\x00\x00\x00'
tRp7610
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7611
I0
sg6379
g6910
sS'block_loop.thisRepN'
p7612
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7613
I2
sg6384
g6913
sg55
g11
sS'block_loop.thisTrial'
p7614
Nsg69
Vn
sS'block_loop.thisTrialN'
p7615
I0
sg39
F1.8668601720619336
sg34
g752
(S'\x07\xdf\n\x15\x11\x18 \x0b\xcb\x88'
tRp7616
sa(dp7617
S'trial_loop.thisTrialN'
p7618
I87
sg6370
g6440
sS'block_loop.thisIndex'
p7619
g6364
sg38
S'right'
p7620
sg58
g62
sS'trial_loop.thisN'
p7621
I87
sg33
g6451
sg63
g64
sS'trial_loop.thisIndex'
p7622
g59
(g98
S'W\x00\x00\x00'
tRp7623
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7624
I0
sg6379
g6448
sS'block_loop.thisRepN'
p7625
I2
sg6382
g6444
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7626
I2
sg6384
g6451
sg55
g11
sS'block_loop.thisTrial'
p7627
Nsg69
Vn
sS'block_loop.thisTrialN'
p7628
I0
sg39
F0.83353166638516996
sg34
g752
(S"\x07\xdf\n\x15\x11\x18'\n1`"
tRp7629
sa(dp7630
S'trial_loop.thisTrialN'
p7631
I88
sg6370
g7001
sS'block_loop.thisIndex'
p7632
g6364
sg38
S'right'
p7633
sg58
g62
sS'trial_loop.thisN'
p7634
I88
sg33
g7005
sg63
g64
sS'trial_loop.thisIndex'
p7635
g59
(g98
S'X\x00\x00\x00'
tRp7636
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7637
I0
sg6379
g7009
sS'block_loop.thisRepN'
p7638
I2
sg6382
g7005
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7639
I2
sg6384
g7012
sg55
g11
sS'block_loop.thisTrial'
p7640
Nsg69
Vn
sS'block_loop.thisTrialN'
p7641
I0
sg39
F0.833576141645608
sg34
g752
(S'\x07\xdf\n\x15\x11\x18-\x08%\xf0'
tRp7642
sa(dp7643
S'trial_loop.thisTrialN'
p7644
I89
sg6370
g6711
sS'block_loop.thisIndex'
p7645
g6364
sg38
S'right'
p7646
sg58
g62
sS'trial_loop.thisN'
p7647
I89
sg33
g6721
sg63
g64
sS'trial_loop.thisIndex'
p7648
g59
(g98
S'Y\x00\x00\x00'
tRp7649
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7650
I0
sg6379
g6719
sS'block_loop.thisRepN'
p7651
I2
sg6382
g6721
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7652
I2
sg6384
g6715
sg55
g11
sS'block_loop.thisTrial'
p7653
Nsg69
Vn
sS'block_loop.thisTrialN'
p7654
I0
sg39
F0.88353069705317466
sg34
g752
(S'\x07\xdf\n\x15\x11\x183\x06\x16\x98'
tRp7655
sa(dp7656
S'trial_loop.thisTrialN'
p7657
I90
sg6370
g6457
sS'block_loop.thisIndex'
p7658
g6364
sg38
S'right'
p7659
sg58
g62
sS'trial_loop.thisN'
p7660
I90
sg33
g6433
sg63
g64
sS'trial_loop.thisIndex'
p7661
g59
(g98
S'Z\x00\x00\x00'
tRp7662
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7663
I0
sg6379
g6464
sS'block_loop.thisRepN'
p7664
I2
sg6382
g6433
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7665
I2
sg6384
g6427
sg55
g11
sS'block_loop.thisTrial'
p7666
Nsg69
Vn
sS'block_loop.thisTrialN'
p7667
I0
sg39
F0.8667729321277875
sg34
g752
(S'\x07\xdf\n\x15\x11\x189\x04\xc2\xc0'
tRp7668
sa(dp7669
S'trial_loop.thisTrialN'
p7670
I91
sg6370
g6664
sS'block_loop.thisIndex'
p7671
g6364
sg38
S'left'
p7672
sg58
g62
sS'trial_loop.thisN'
p7673
I91
sg33
g6559
sg63
g64
sS'trial_loop.thisIndex'
p7674
g59
(g98
S'[\x00\x00\x00'
tRp7675
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7676
I0
sg6379
g6671
sS'block_loop.thisRepN'
p7677
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7678
I2
sg6384
g6566
sg55
g11
sS'block_loop.thisTrial'
p7679
Nsg69
Vn
sS'block_loop.thisTrialN'
p7680
I0
sg39
F0.75010206502065557
sg34
g752
(S'\x07\xdf\n\x15\x11\x19\x03\x03k\x00'
tRp7681
sa(dp7682
S'trial_loop.thisTrialN'
p7683
I92
sg6370
g7392
sS'block_loop.thisIndex'
p7684
g6364
sg38
S'right'
p7685
sg58
g62
sS'trial_loop.thisN'
p7686
I92
sg33
g6576
sg63
g64
sS'trial_loop.thisIndex'
p7687
g59
(g98
S'\\\x00\x00\x00'
tRp7688
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7689
I0
sg6379
g7399
sS'block_loop.thisRepN'
p7690
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7691
I2
sg6384
g6583
sg55
g11
sS'block_loop.thisTrial'
p7692
Nsg69
Vn
sS'block_loop.thisTrialN'
p7693
I0
sg39
F0.90055075197415135
sg34
g752
(S'\x07\xdf\n\x15\x11\x19\x08\x0f2\xa0'
tRp7694
sa(dp7695
S'trial_loop.thisTrialN'
p7696
I93
sg6370
g7163
sS'block_loop.thisIndex'
p7697
g6364
sg38
S'right'
p7698
sg58
g62
sS'trial_loop.thisN'
p7699
I93
sg33
g6532
sg63
g64
sS'trial_loop.thisIndex'
p7700
g59
(g98
S']\x00\x00\x00'
tRp7701
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7702
I0
sg6379
g7170
sS'block_loop.thisRepN'
p7703
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7704
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p7705
Nsg69
Vn
sS'block_loop.thisTrialN'
p7706
I0
sg39
F0.75020070886694157
sg34
g752
(S'\x07\xdf\n\x15\x11\x19\x0e\x0eW\xe0'
tRp7707
sa(dp7708
S'trial_loop.thisTrialN'
p7709
I94
sg6370
g6784
sS'block_loop.thisIndex'
p7710
g6364
sg38
S'left'
p7711
sg58
g62
sS'trial_loop.thisN'
p7712
I94
sg33
g6788
sg63
g64
sS'trial_loop.thisIndex'
p7713
g59
(g98
S'^\x00\x00\x00'
tRp7714
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7715
I0
sg6379
g6792
sS'block_loop.thisRepN'
p7716
I2
sg6382
g6788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7717
I2
sg6384
g6795
sg55
g11
sS'block_loop.thisTrial'
p7718
Nsg69
Vn
sS'block_loop.thisTrialN'
p7719
I0
sg39
F0.81685173316691362
sg34
g752
(S'\x07\xdf\n\x15\x11\x19\x14\n\xdd@'
tRp7720
sa(dp7721
S'trial_loop.thisTrialN'
p7722
I95
sg6370
g7364
sS'block_loop.thisIndex'
p7723
g6364
sg38
S'left'
p7724
sg58
g62
sS'trial_loop.thisN'
p7725
I95
sg33
g6882
sg63
g64
sS'trial_loop.thisIndex'
p7726
g59
(g98
S'_\x00\x00\x00'
tRp7727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7728
I0
sg6379
g7371
sS'block_loop.thisRepN'
p7729
I2
sg6382
g6882
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7730
I2
sg6384
g6876
sg55
g11
sS'block_loop.thisTrial'
p7731
Nsg69
Vn
sS'block_loop.thisTrialN'
p7732
I0
sg39
F0.68350463911156112
sg34
g752
(S'\x07\xdf\n\x15\x11\x19\x1a\x08\x93P'
tRp7733
sa(dp7734
S'trial_loop.thisTrialN'
p7735
I96
sg6370
g6538
sS'block_loop.thisIndex'
p7736
g6364
sg38
S'left'
p7737
sg58
g62
sS'trial_loop.thisN'
p7738
I96
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p7739
g59
(g98
S'`\x00\x00\x00'
tRp7740
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7741
I0
sg6379
g6546
sS'block_loop.thisRepN'
p7742
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7743
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p7744
Nsg69
Vn
sS'block_loop.thisTrialN'
p7745
I0
sg39
F0.80011449528592493
sg34
g752
(S'\x07\xdf\n\x15\x11\x19 \x04a\x18'
tRp7746
sa(dp7747
S'trial_loop.thisTrialN'
p7748
I97
sg6370
g6784
sS'block_loop.thisIndex'
p7749
g6364
sg38
S'left'
p7750
sg58
g62
sS'trial_loop.thisN'
p7751
I97
sg33
g6795
sg63
g64
sS'trial_loop.thisIndex'
p7752
g59
(g98
S'a\x00\x00\x00'
tRp7753
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7754
I0
sg6379
g6792
sS'block_loop.thisRepN'
p7755
I2
sg6382
g6788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7756
I2
sg6384
g6795
sg55
g11
sS'block_loop.thisTrial'
p7757
Nsg69
Vn
sS'block_loop.thisTrialN'
p7758
I0
sg39
F0.70017858527626231
sg34
g752
(S'\x07\xdf\n\x15\x11\x19&\x01\xd8\xa8'
tRp7759
sa(dp7760
S'trial_loop.thisTrialN'
p7761
I98
sg6370
g7435
sS'block_loop.thisIndex'
p7762
g6364
sg38
S'left'
p7763
sg58
g62
sS'trial_loop.thisN'
p7764
I98
sg33
g7005
sg63
g64
sS'trial_loop.thisIndex'
p7765
g59
(g98
S'b\x00\x00\x00'
tRp7766
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7767
I0
sg6379
g7442
sS'block_loop.thisRepN'
p7768
I2
sg6382
g7005
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7769
I2
sg6384
g7012
sg55
g11
sS'block_loop.thisTrial'
p7770
Nsg69
Vn
sS'block_loop.thisTrialN'
p7771
I0
sg39
F0.91728827495262522
sg34
g752
(S'\x07\xdf\n\x15\x11\x19+\x0c\xe8\xb0'
tRp7772
sa(dp7773
S'trial_loop.thisTrialN'
p7774
I99
sg6370
g6506
sS'block_loop.thisIndex'
p7775
g6364
sg38
S'left'
p7776
sg58
g62
sS'trial_loop.thisN'
p7777
I99
sg33
g6451
sg63
g64
sS'trial_loop.thisIndex'
p7778
g59
(g98
S'c\x00\x00\x00'
tRp7779
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7780
I0
sg6379
g6513
sS'block_loop.thisRepN'
p7781
I2
sg6382
g6444
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7782
I2
sg6384
g6451
sg55
g11
sS'block_loop.thisTrial'
p7783
Nsg69
Vn
sS'block_loop.thisTrialN'
p7784
I0
sg39
F2.2001517860808235
sg34
g752
(S'\x07\xdf\n\x15\x11\x191\x0cLp'
tRp7785
sa(dp7786
S'trial_loop.thisTrialN'
p7787
I100
sg6370
g6472
sS'block_loop.thisIndex'
p7788
g6364
sg38
S'right'
p7789
sg58
g62
sS'trial_loop.thisN'
p7790
I100
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p7791
g59
(g98
S'd\x00\x00\x00'
tRp7792
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7793
I0
sg6379
g6480
sS'block_loop.thisRepN'
p7794
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7795
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p7796
Nsg69
Vn
sS'block_loop.thisTrialN'
p7797
I0
sg39
F1.0335161000448352
sg34
g752
(S'\x07\xdf\n\x15\x11\x199\x00m`'
tRp7798
sa(dp7799
S'trial_loop.thisTrialN'
p7800
I101
sg6370
S'20-fruit_pastilles.png'
p7801
sS'block_loop.thisIndex'
p7802
g6364
sg38
S'right'
p7803
sg58
g62
sS'trial_loop.thisN'
p7804
I101
sg33
g6788
sg63
g64
sS'trial_loop.thisIndex'
p7805
g59
(g98
S'e\x00\x00\x00'
tRp7806
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7807
I0
sg6379
S'2-steamed_puddings.png'
p7808
sS'block_loop.thisRepN'
p7809
I2
sg6382
g6788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7810
I2
sg6384
g6795
sg55
g11
sS'block_loop.thisTrial'
p7811
Nsg69
Vn
sS'block_loop.thisTrialN'
p7812
I0
sg39
F1.116865018725548
sg34
g752
(S'\x07\xdf\n\x15\x11\x1a\x03\x01z\xe8'
tRp7813
sa(dp7814
S'trial_loop.thisTrialN'
p7815
I102
sg6370
g6555
sS'block_loop.thisIndex'
p7816
g6364
sg38
S'right'
p7817
sg58
g62
sS'trial_loop.thisN'
p7818
I102
sg33
g6559
sg63
g64
sS'trial_loop.thisIndex'
p7819
g59
(g98
S'f\x00\x00\x00'
tRp7820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7821
I0
sg6379
g6563
sS'block_loop.thisRepN'
p7822
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7823
I2
sg6384
g6566
sg55
g11
sS'block_loop.thisTrial'
p7824
Nsg69
Vn
sS'block_loop.thisTrialN'
p7825
I0
sg39
F1.100087011855976
sg34
g752
(S'\x07\xdf\n\x15\x11\x1a\t\x03\xb58'
tRp7826
sa(dp7827
S'trial_loop.thisTrialN'
p7828
I103
sg6370
g6521
sS'block_loop.thisIndex'
p7829
g6364
sg38
S'left'
p7830
sg58
g62
sS'trial_loop.thisN'
p7831
I103
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p7832
g59
(g98
S'g\x00\x00\x00'
tRp7833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7834
I0
sg6379
g6529
sS'block_loop.thisRepN'
p7835
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7836
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p7837
Nsg69
Vn
sS'block_loop.thisTrialN'
p7838
I0
sg39
F0.63390046892891405
sg34
g752
(S'\x07\xdf\n\x15\x11\x1a\x0f\x05\xf3p'
tRp7839
sa(dp7840
S'trial_loop.thisTrialN'
p7841
I104
sg6370
g6664
sS'block_loop.thisIndex'
p7842
g6364
sg38
S'left'
p7843
sg58
g62
sS'trial_loop.thisN'
p7844
I104
sg33
g6559
sg63
g64
sS'trial_loop.thisIndex'
p7845
g59
(g98
S'h\x00\x00\x00'
tRp7846
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7847
I0
sg6379
g6671
sS'block_loop.thisRepN'
p7848
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7849
I2
sg6384
g6566
sg55
g11
sS'block_loop.thisTrial'
p7850
Nsg69
Vn
sS'block_loop.thisTrialN'
p7851
I0
sg39
F0.71685566751693841
sg34
g752
(S'\x07\xdf\n\x15\x11\x1a\x15\x00\xcf\x08'
tRp7852
sa(dp7853
S'trial_loop.thisTrialN'
p7854
I105
sg6370
g6391
sS'block_loop.thisIndex'
p7855
g6364
sg38
S'right'
p7856
sg58
g62
sS'trial_loop.thisN'
p7857
I105
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7858
g59
(g98
S'i\x00\x00\x00'
tRp7859
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7860
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7861
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7862
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7863
Nsg69
Vn
sS'block_loop.thisTrialN'
p7864
I0
sg39
F0.86685903167108336
sg34
g752
(S'\x07\xdf\n\x15\x11\x1a\x1a\x0c\x19\xa8'
tRp7865
sa(dp7866
S'trial_loop.thisTrialN'
p7867
I106
sg6370
g6423
sS'block_loop.thisIndex'
p7868
g6364
sg38
S'left'
p7869
sg58
g62
sS'trial_loop.thisN'
p7870
I106
sg33
g6433
sg63
g64
sS'trial_loop.thisIndex'
p7871
g59
(g98
S'j\x00\x00\x00'
tRp7872
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7873
I0
sg6379
g6431
sS'block_loop.thisRepN'
p7874
I2
sg6382
g6433
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7875
I2
sg6384
g6427
sg55
g11
sS'block_loop.thisTrial'
p7876
Nsg69
Vn
sS'block_loop.thisTrialN'
p7877
I0
sg39
F0.61685504030174343
sg34
g752
(S'\x07\xdf\n\x15\x11\x1a \n\xc5\xd0'
tRp7878
sa(dp7879
S'trial_loop.thisTrialN'
p7880
I107
sg6370
g6711
sS'block_loop.thisIndex'
p7881
g6364
sg38
S'right'
p7882
sg58
g62
sS'trial_loop.thisN'
p7883
I107
sg33
g6721
sg63
g64
sS'trial_loop.thisIndex'
p7884
g59
(g98
S'k\x00\x00\x00'
tRp7885
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7886
I0
sg6379
g6719
sS'block_loop.thisRepN'
p7887
I2
sg6382
g6721
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7888
I2
sg6384
g6715
sg55
g11
sS'block_loop.thisTrial'
p7889
Nsg69
Vn
sS'block_loop.thisTrialN'
p7890
I0
sg39
F0.91684836901276867
sg34
g752
(S'\x07\xdf\n\x15\x11\x1a&\x05b\xe8'
tRp7891
sa(dp7892
S'trial_loop.thisTrialN'
p7893
I108
sg6370
g6538
sS'block_loop.thisIndex'
p7894
g6364
sg38
S'left'
p7895
sg58
g62
sS'trial_loop.thisN'
p7896
I108
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p7897
g59
(g98
S'l\x00\x00\x00'
tRp7898
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7899
I0
sg6379
g6546
sS'block_loop.thisRepN'
p7900
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7901
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p7902
Nsg69
Vn
sS'block_loop.thisTrialN'
p7903
I0
sg39
F1.0168578342600085
sg34
g752
(S'\x07\xdf\n\x15\x11\x1a,\x04\x88('
tRp7904
sa(dp7905
S'trial_loop.thisTrialN'
p7906
I109
sg6370
g6842
sS'block_loop.thisIndex'
p7907
g6364
sg38
S'right'
p7908
sg58
g62
sS'trial_loop.thisN'
p7909
I109
sg33
g6846
sg63
g64
sS'trial_loop.thisIndex'
p7910
g59
(g98
S'm\x00\x00\x00'
tRp7911
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7912
I0
sg6379
g6850
sS'block_loop.thisRepN'
p7913
I2
sg6382
g6846
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7914
I2
sg6384
g6853
sg55
g11
sS'block_loop.thisTrial'
p7915
Nsg69
Vn
sS'block_loop.thisTrialN'
p7916
I0
sg39
F0.76676831354325259
sg34
g752
(S'\x07\xdf\n\x15\x11\x1a2\x05SH'
tRp7917
sa(dp7918
S'trial_loop.thisTrialN'
p7919
I110
sg6370
g6743
sS'block_loop.thisIndex'
p7920
g6364
sg38
S'left'
p7921
sg58
g62
sS'trial_loop.thisN'
p7922
I110
sg33
g6643
sg63
g64
sS'trial_loop.thisIndex'
p7923
g59
(g98
S'n\x00\x00\x00'
tRp7924
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7925
I0
sg6379
g6750
sS'block_loop.thisRepN'
p7926
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7927
I2
sg6384
g6643
sg55
g11
sS'block_loop.thisTrial'
p7928
Nsg69
Vn
sS'block_loop.thisTrialN'
p7929
I0
sg39
F1.0334719098818823
sg34
g752
(S'\x07\xdf\n\x15\x11\x1a8\x02U\xa8'
tRp7930
sa(dp7931
S'trial_loop.thisTrialN'
p7932
I111
sg6370
g6489
sS'block_loop.thisIndex'
p7933
g6364
sg38
S'right'
p7934
sg58
g62
sS'trial_loop.thisN'
p7935
I111
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p7936
g59
(g98
S'o\x00\x00\x00'
tRp7937
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7938
I0
sg6379
g6497
sS'block_loop.thisRepN'
p7939
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7940
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p7941
Nsg69
Vn
sS'block_loop.thisTrialN'
p7942
I0
sg39
F0.99985574050151627
sg34
g752
(S'\x07\xdf\n\x15\x11\x1b\x02\x03_H'
tRp7943
sa(dp7944
S'trial_loop.thisTrialN'
p7945
I112
sg6370
g6784
sS'block_loop.thisIndex'
p7946
g6364
sg38
S'left'
p7947
sg58
g62
sS'trial_loop.thisN'
p7948
I112
sg33
g6788
sg63
g64
sS'trial_loop.thisIndex'
p7949
g59
(g98
S'p\x00\x00\x00'
tRp7950
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7951
I0
sg6379
g6792
sS'block_loop.thisRepN'
p7952
I2
sg6382
g6788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7953
I2
sg6384
g6795
sg55
g11
sS'block_loop.thisTrial'
p7954
Nsg69
Vn
sS'block_loop.thisTrialN'
p7955
I0
sg39
F1.2834223028612541
sg34
g752
(S'\x07\xdf\n\x15\x11\x1b\x08\x03\xb58'
tRp7956
sa(dp7957
S'trial_loop.thisTrialN'
p7958
I113
sg6370
g7364
sS'block_loop.thisIndex'
p7959
g6364
sg38
S'left'
p7960
sg58
g62
sS'trial_loop.thisN'
p7961
I113
sg33
g6882
sg63
g64
sS'trial_loop.thisIndex'
p7962
g59
(g98
S'q\x00\x00\x00'
tRp7963
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7964
I0
sg6379
g7371
sS'block_loop.thisRepN'
p7965
I2
sg6382
g6882
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7966
I2
sg6384
g6876
sg55
g11
sS'block_loop.thisTrial'
p7967
Nsg69
Vn
sS'block_loop.thisTrialN'
p7968
I0
sg39
F1.133504182955221
sg34
g752
(S'\x07\xdf\n\x15\x11\x1b\x0e\x08\x8fh'
tRp7969
sa(dp7970
S'trial_loop.thisTrialN'
p7971
I114
sg6370
g6408
sS'block_loop.thisIndex'
p7972
g6364
sg38
S'right'
p7973
sg58
g62
sS'trial_loop.thisN'
p7974
I114
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7975
g59
(g98
S'r\x00\x00\x00'
tRp7976
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7977
I0
sg6379
g6415
sS'block_loop.thisRepN'
p7978
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7979
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7980
Nsg69
Vn
sS'block_loop.thisTrialN'
p7981
I0
sg39
F1.3337908203066036
sg34
g752
(S'\x07\xdf\n\x15\x11\x1b\x14\x0bB\xd0'
tRp7982
sa(dp7983
S'trial_loop.thisTrialN'
p7984
I115
sg6370
g7163
sS'block_loop.thisIndex'
p7985
g6364
sg38
S'right'
p7986
sg58
g62
sS'trial_loop.thisN'
p7987
I115
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p7988
g59
(g98
S's\x00\x00\x00'
tRp7989
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7990
I0
sg6379
g7170
sS'block_loop.thisRepN'
p7991
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7992
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p7993
Nsg69
Vn
sS'block_loop.thisTrialN'
p7994
I0
sg39
F1.1168259603236947
sg34
g752
(S'\x07\xdf\n\x15\x11\x1b\x1b\x01\x92X'
tRp7995
sa(dp7996
S'trial_loop.thisTrialN'
p7997
I116
sg6370
g6506
sS'block_loop.thisIndex'
p7998
g6364
sg38
S'left'
p7999
sg58
g62
sS'trial_loop.thisN'
p8000
I116
sg33
g6451
sg63
g64
sS'trial_loop.thisIndex'
p8001
g59
(g98
S't\x00\x00\x00'
tRp8002
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8003
I0
sg6379
g6513
sS'block_loop.thisRepN'
p8004
I2
sg6382
g6444
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8005
I2
sg6384
g6451
sg55
g11
sS'block_loop.thisTrial'
p8006
Nsg69
Vn
sS'block_loop.thisTrialN'
p8007
I0
sg39
F0.90018753734784696
sg34
g752
(S'\x07\xdf\n\x15\x11\x1b!\x03\xcc\xa8'
tRp8008
sa(dp8009
S'trial_loop.thisTrialN'
p8010
I117
sg6370
g7392
sS'block_loop.thisIndex'
p8011
g6364
sg38
S'right'
p8012
sg58
g62
sS'trial_loop.thisN'
p8013
I117
sg33
g6583
sg63
g64
sS'trial_loop.thisIndex'
p8014
g59
(g98
S'u\x00\x00\x00'
tRp8015
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8016
I0
sg6379
g7399
sS'block_loop.thisRepN'
p8017
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8018
I2
sg6384
g6583
sg55
g11
sS'block_loop.thisTrial'
p8019
Nsg69
Vn
sS'block_loop.thisTrialN'
p8020
I0
sg39
F1.4668870282766875
sg34
g752
(S"\x07\xdf\n\x15\x11\x1b'\x02\xb3h"
tRp8021
sa(dp8022
S'trial_loop.thisTrialN'
p8023
I118
sg6370
g7435
sS'block_loop.thisIndex'
p8024
g6364
sg38
S'left'
p8025
sg58
g62
sS'trial_loop.thisN'
p8026
I118
sg33
g7005
sg63
g64
sS'trial_loop.thisIndex'
p8027
g59
(g98
S'v\x00\x00\x00'
tRp8028
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8029
I0
sg6379
g7442
sS'block_loop.thisRepN'
p8030
I2
sg6382
g7005
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8031
I2
sg6384
g7012
sg55
g11
sS'block_loop.thisTrial'
p8032
Nsg69
Vn
sS'block_loop.thisTrialN'
p8033
I0
sg39
F1.4335157579262159
sg34
g752
(S'\x07\xdf\n\x15\x11\x1b-\nk\xf8'
tRp8034
sa(dp8035
S'trial_loop.thisTrialN'
p8036
I119
sg6370
g6919
sS'block_loop.thisIndex'
p8037
g6364
sg38
S'right'
p8038
sg58
g62
sS'trial_loop.thisN'
p8039
I119
sg33
g6923
sg63
g64
sS'trial_loop.thisIndex'
p8040
g59
(g98
S'w\x00\x00\x00'
tRp8041
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8042
I0
sg6379
g6927
sS'block_loop.thisRepN'
p8043
I2
sg6382
g6929
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8044
I2
sg6384
g6923
sg55
g11
sS'block_loop.thisTrial'
p8045
Nsg69
Vn
sS'block_loop.thisTrialN'
p8046
I0
sg39
F1.133905315591619
sg34
g752
(S'\x07\xdf\n\x15\x11\x1b4\x02&\xc8'
tRp8047
sa(dp8048
S'trial_loop.thisTrialN'
p8049
I120
sg6370
g6555
sS'block_loop.thisIndex'
p8050
g6364
sg38
S'right'
p8051
sg58
g62
sS'trial_loop.thisN'
p8052
I120
sg33
g6566
sg63
g64
sS'trial_loop.thisIndex'
p8053
g59
(g98
S'x\x00\x00\x00'
tRp8054
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8055
I0
sg6379
g6563
sS'block_loop.thisRepN'
p8056
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8057
I2
sg6384
g6566
sg55
g11
sS'block_loop.thisTrial'
p8058
Nsg69
Vn
sS'block_loop.thisTrialN'
p8059
I0
sg39
F1.4001729973588226
sg34
g752
(S'\x07\xdf\n\x15\x11\x1b:\x04\xde\x18'
tRp8060
sa(dp8061
S'trial_loop.thisTrialN'
p8062
I121
sg6370
S'22-daim.png'
p8063
sS'block_loop.thisIndex'
p8064
g6364
sg38
S'left'
p8065
sg58
g62
sS'trial_loop.thisN'
p8066
I121
sg33
g6721
sg63
g64
sS'trial_loop.thisIndex'
p8067
g59
(g98
S'y\x00\x00\x00'
tRp8068
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8069
I0
sg6379
S'7-olives.png'
p8070
sS'block_loop.thisRepN'
p8071
I2
sg6382
g6721
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8072
I2
sg6384
g6715
sg55
g11
sS'block_loop.thisTrial'
p8073
Nsg69
Vn
sS'block_loop.thisTrialN'
p8074
I0
sg39
F1.7002718122639635
sg34
g752
(S'\x07\xdf\n\x15\x11\x1c\x04\x0bb\x10'
tRp8075
sa(dp8076
S'trial_loop.thisTrialN'
p8077
I122
sg6370
S'18-mms.png'
p8078
sS'block_loop.thisIndex'
p8079
g6364
sg38
S'left'
p8080
sg58
g62
sS'trial_loop.thisN'
p8081
I122
sg33
g6929
sg63
g64
sS'trial_loop.thisIndex'
p8082
g59
(g98
S'z\x00\x00\x00'
tRp8083
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8084
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p8085
sS'block_loop.thisRepN'
p8086
I2
sg6382
g6929
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8087
I2
sg6384
g6923
sg55
g11
sS'block_loop.thisTrial'
p8088
Nsg69
Vn
sS'block_loop.thisTrialN'
p8089
I0
sg39
F1.4667698530720372
sg34
g752
(S'\x07\xdf\n\x15\x11\x1c\x0b\x07f\x88'
tRp8090
sa(dp8091
S'trial_loop.thisTrialN'
p8092
I123
sg6370
g7001
sS'block_loop.thisIndex'
p8093
g6364
sg38
S'right'
p8094
sg58
g62
sS'trial_loop.thisN'
p8095
I123
sg33
g7005
sg63
g64
sS'trial_loop.thisIndex'
p8096
g59
(g98
S'{\x00\x00\x00'
tRp8097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8098
I0
sg6379
g7009
sS'block_loop.thisRepN'
p8099
I2
sg6382
g7005
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8100
I2
sg6384
g7012
sg55
g11
sS'block_loop.thisTrial'
p8101
Nsg69
Vn
sS'block_loop.thisTrialN'
p8102
I0
sg39
F0.78352436788100022
sg34
g752
(S'\x07\xdf\n\x15\x11\x1c\x11\x0e\xe0\x98'
tRp8103
sa(dp8104
S'trial_loop.thisTrialN'
p8105
I124
sg6370
g6679
sS'block_loop.thisIndex'
p8106
g6364
sg38
S'right'
p8107
sg58
g62
sS'trial_loop.thisN'
p8108
I124
sg33
g6549
sg63
g64
sS'trial_loop.thisIndex'
p8109
g59
(g98
S'|\x00\x00\x00'
tRp8110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8111
I0
sg6379
g6686
sS'block_loop.thisRepN'
p8112
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8113
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p8114
Nsg69
Vn
sS'block_loop.thisTrialN'
p8115
I0
sg39
F2.0838840472943048
sg34
g752
(S'\x07\xdf\n\x15\x11\x1c\x17\x0c\x1d\x90'
tRp8116
sa(dp8117
S'trial_loop.thisTrialN'
p8118
I125
sg6370
g6472
sS'block_loop.thisIndex'
p8119
g6364
sg38
S'right'
p8120
sg58
g62
sS'trial_loop.thisN'
p8121
I125
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p8122
g59
(g98
S'}\x00\x00\x00'
tRp8123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8124
I0
sg6379
g6480
sS'block_loop.thisRepN'
p8125
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8126
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8127
Nsg69
Vn
sS'block_loop.thisTrialN'
p8128
I0
sg39
F1.1669222093487406
sg34
g752
(S'\x07\xdf\n\x15\x11\x1c\x1e\r\xd6\xf8'
tRp8129
sa(dp8130
S'trial_loop.thisTrialN'
p8131
I126
sg6370
g8063
sS'block_loop.thisIndex'
p8132
g6364
sg38
S'left'
p8133
sg58
g62
sS'trial_loop.thisN'
p8134
I126
sg33
g6715
sg63
g64
sS'trial_loop.thisIndex'
p8135
g59
(g98
S'~\x00\x00\x00'
tRp8136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8137
I0
sg6379
g8070
sS'block_loop.thisRepN'
p8138
I2
sg6382
g6721
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8139
I2
sg6384
g6715
sg55
g11
sS'block_loop.thisTrial'
p8140
Nsg69
Vn
sS'block_loop.thisTrialN'
p8141
I0
sg39
F1.183520889688225
sg34
g752
(S'\x07\xdf\n\x15\x11\x1c%\x01\xc5 '
tRp8142
sa(dp8143
S'trial_loop.thisTrialN'
p8144
I127
sg6370
g7001
sS'block_loop.thisIndex'
p8145
g6364
sg38
S'right'
p8146
sg58
g62
sS'trial_loop.thisN'
p8147
I127
sg33
g7005
sg63
g64
sS'trial_loop.thisIndex'
p8148
g59
(g98
S'\x7f\x00\x00\x00'
tRp8149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8150
I0
sg6379
g7009
sS'block_loop.thisRepN'
p8151
I2
sg6382
g7005
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8152
I2
sg6384
g7012
sg55
g11
sS'block_loop.thisTrial'
p8153
Nsg69
Vn
sS'block_loop.thisTrialN'
p8154
I0
sg39
F1.133458852401418
sg34
g752
(S'\x07\xdf\n\x15\x11\x1c+\x04\xf5\x88'
tRp8155
sa(dp8156
S'trial_loop.thisTrialN'
p8157
I128
sg6370
g6572
sS'block_loop.thisIndex'
p8158
g6364
sg38
S'left'
p8159
sg58
g62
sS'trial_loop.thisN'
p8160
I128
sg33
g6576
sg63
g64
sS'trial_loop.thisIndex'
p8161
g59
(g98
S'\x80\x00\x00\x00'
tRp8162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8163
I0
sg6379
g6580
sS'block_loop.thisRepN'
p8164
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8165
I2
sg6384
g6583
sg55
g11
sS'block_loop.thisTrial'
p8166
Nsg69
Vn
sS'block_loop.thisTrialN'
p8167
I0
sg39
F2.0501777870022124
sg34
g752
(S'\x07\xdf\n\x15\x11\x1c1\x07\xa8\xf0'
tRp8168
sa(dp8169
S'trial_loop.thisTrialN'
p8170
I129
sg6370
g6391
sS'block_loop.thisIndex'
p8171
g6364
sg38
S'right'
p8172
sg58
g62
sS'trial_loop.thisN'
p8173
I129
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8174
g59
(g98
S'\x81\x00\x00\x00'
tRp8175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8176
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8177
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8178
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8179
Nsg69
Vn
sS'block_loop.thisTrialN'
p8180
I0
sg39
F1.8835038978577359
sg34
g752
(S'\x07\xdf\n\x15\x11\x1c8\x08\xed('
tRp8181
sa(dp8182
S'trial_loop.thisTrialN'
p8183
I130
sg6370
g6728
sS'block_loop.thisIndex'
p8184
g6364
sg38
S'right'
p8185
sg58
g62
sS'trial_loop.thisN'
p8186
I130
sg33
g6705
sg63
g64
sS'trial_loop.thisIndex'
p8187
g59
(g98
S'\x82\x00\x00\x00'
tRp8188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8189
I0
sg6379
g6735
sS'block_loop.thisRepN'
p8190
I2
sg6382
g6698
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8191
I2
sg6384
g6705
sg55
g11
sS'block_loop.thisTrial'
p8192
Nsg69
Vn
sS'block_loop.thisTrialN'
p8193
I0
sg39
F1.5001528124330434
sg34
g752
(S'\x07\xdf\n\x15\x11\x1d\x03\x07\x91\x80'
tRp8194
sa(dp8195
S'trial_loop.thisTrialN'
p8196
I131
sg6370
g6743
sS'block_loop.thisIndex'
p8197
g6364
sg38
S'left'
p8198
sg58
g62
sS'trial_loop.thisN'
p8199
I131
sg33
g6643
sg63
g64
sS'trial_loop.thisIndex'
p8200
g59
(g98
S'\x83\x00\x00\x00'
tRp8201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8202
I0
sg6379
g6750
sS'block_loop.thisRepN'
p8203
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8204
I2
sg6384
g6643
sg55
g11
sS'block_loop.thisTrial'
p8205
Nsg69
Vn
sS'block_loop.thisTrialN'
p8206
I0
sg39
F1.8168007006570406
sg34
g752
(S'\x07\xdf\n\x15\x11\x1d\n\x00}\x00'
tRp8207
sa(dp8208
S'trial_loop.thisTrialN'
p8209
I132
sg6370
g6842
sS'block_loop.thisIndex'
p8210
g6364
sg38
S'right'
p8211
sg58
g62
sS'trial_loop.thisN'
p8212
I132
sg33
g6846
sg63
g64
sS'trial_loop.thisIndex'
p8213
g59
(g98
S'\x84\x00\x00\x00'
tRp8214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8215
I0
sg6379
g6850
sS'block_loop.thisRepN'
p8216
I2
sg6382
g6846
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8217
I2
sg6384
g6853
sg55
g11
sS'block_loop.thisTrial'
p8218
Nsg69
Vn
sS'block_loop.thisTrialN'
p8219
I0
sg39
F1.1167367247053335
sg34
g752
(S'\x07\xdf\n\x15\x11\x1d\x10\rm\x80'
tRp8220
sa(dp8221
S'trial_loop.thisTrialN'
p8222
I133
sg6370
g6371
sS'block_loop.thisIndex'
p8223
g6364
sg38
S'left'
p8224
sg58
g62
sS'trial_loop.thisN'
p8225
I133
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p8226
g59
(g98
S'\x85\x00\x00\x00'
tRp8227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8228
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8229
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8230
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8231
Nsg69
Vn
sS'block_loop.thisTrialN'
p8232
I0
sg39
F1.1334223598796598
sg34
g752
(S'\x07\xdf\n\x15\x11\x1d\x17\x00ix'
tRp8233
sa(dp8234
S'trial_loop.thisTrialN'
p8235
I134
sg6370
g6457
sS'block_loop.thisIndex'
p8236
g6364
sg38
S'right'
p8237
sg58
g62
sS'trial_loop.thisN'
p8238
I134
sg33
g6427
sg63
g64
sS'trial_loop.thisIndex'
p8239
g59
(g98
S'\x86\x00\x00\x00'
tRp8240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8241
I0
sg6379
g6464
sS'block_loop.thisRepN'
p8242
I2
sg6382
g6433
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8243
I2
sg6384
g6427
sg55
g11
sS'block_loop.thisTrial'
p8244
Nsg69
Vn
sS'block_loop.thisTrialN'
p8245
I0
sg39
F1.2335096568340305
sg34
g752
(S'\x07\xdf\n\x15\x11\x1d\x1d\x03\x1c\xe0'
tRp8246
sa(dp8247
S'trial_loop.thisTrialN'
p8248
I135
sg6370
g6649
sS'block_loop.thisIndex'
p8249
g6364
sg38
S'left'
p8250
sg58
g62
sS'trial_loop.thisN'
p8251
I135
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p8252
g59
(g98
S'\x87\x00\x00\x00'
tRp8253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8254
I0
sg6379
g6656
sS'block_loop.thisRepN'
p8255
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8256
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8257
Nsg69
Vn
sS'block_loop.thisTrialN'
p8258
I0
sg39
F1.1001004114532407
sg34
g752
(S'\x07\xdf\n\x15\x11\x1d#\x07\x04\xe0'
tRp8259
sa(dp8260
S'trial_loop.thisTrialN'
p8261
I136
sg6370
g8063
sS'block_loop.thisIndex'
p8262
g6364
sg38
S'left'
p8263
sg58
g62
sS'trial_loop.thisN'
p8264
I136
sg33
g6715
sg63
g64
sS'trial_loop.thisIndex'
p8265
g59
(g98
S'\x88\x00\x00\x00'
tRp8266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8267
I0
sg6379
g8070
sS'block_loop.thisRepN'
p8268
I2
sg6382
g6721
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8269
I2
sg6384
g6715
sg55
g11
sS'block_loop.thisTrial'
p8270
Nsg69
Vn
sS'block_loop.thisTrialN'
p8271
I0
sg39
F1.183499507351371
sg34
g752
(S'\x07\xdf\n\x15\x11\x1d)\t\x04\x98'
tRp8272
sa(dp8273
S'trial_loop.thisTrialN'
p8274
I137
sg6370
g6457
sS'block_loop.thisIndex'
p8275
g6364
sg38
S'right'
p8276
sg58
g62
sS'trial_loop.thisN'
p8277
I137
sg33
g6433
sg63
g64
sS'trial_loop.thisIndex'
p8278
g59
(g98
S'\x89\x00\x00\x00'
tRp8279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8280
I0
sg6379
g6464
sS'block_loop.thisRepN'
p8281
I2
sg6382
g6433
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8282
I2
sg6384
g6427
sg55
g11
sS'block_loop.thisTrial'
p8283
Nsg69
Vn
sS'block_loop.thisTrialN'
p8284
I0
sg39
F1.0667679144071371
sg34
g752
(S'\x07\xdf\n\x15\x11\x1d/\x0co\x98'
tRp8285
sa(dp8286
S'trial_loop.thisTrialN'
p8287
I138
sg6370
g6872
sS'block_loop.thisIndex'
p8288
g6364
sg38
S'right'
p8289
sg58
g62
sS'trial_loop.thisN'
p8290
I138
sg33
g6882
sg63
g64
sS'trial_loop.thisIndex'
p8291
g59
(g98
S'\x8a\x00\x00\x00'
tRp8292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8293
I0
sg6379
g6880
sS'block_loop.thisRepN'
p8294
I2
sg6382
g6882
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8295
I2
sg6384
g6876
sg55
g11
sS'block_loop.thisTrial'
p8296
Nsg69
Vn
sS'block_loop.thisTrialN'
p8297
I0
sg39
F1.2335290434857598
sg34
g752
(S'\x07\xdf\n\x15\x11\x1d5\r\xf68'
tRp8298
sa(dp8299
S'trial_loop.thisTrialN'
p8300
I139
sg6370
g8078
sS'block_loop.thisIndex'
p8301
g6364
sg38
S'left'
p8302
sg58
g62
sS'trial_loop.thisN'
p8303
I139
sg33
g6929
sg63
g64
sS'trial_loop.thisIndex'
p8304
g59
(g98
S'\x8b\x00\x00\x00'
tRp8305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8306
I0
sg6379
g8085
sS'block_loop.thisRepN'
p8307
I2
sg6382
g6929
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8308
I2
sg6384
g6923
sg55
g11
sS'block_loop.thisTrial'
p8309
Nsg69
Vn
sS'block_loop.thisTrialN'
p8310
I0
sg39
F1.5168909056073971
sg34
g752
(S'\x07\xdf\n\x15\x11\x1e\x00\x02\xd6\x90'
tRp8311
sa(dp8312
S'trial_loop.thisTrialN'
p8313
I140
sg6370
g6902
sS'block_loop.thisIndex'
p8314
g6364
sg38
S'left'
p8315
sg58
g62
sS'trial_loop.thisN'
p8316
I140
sg33
g6913
sg63
g64
sS'trial_loop.thisIndex'
p8317
g59
(g98
S'\x8c\x00\x00\x00'
tRp8318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8319
I0
sg6379
g6910
sS'block_loop.thisRepN'
p8320
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8321
I2
sg6384
g6913
sg55
g11
sS'block_loop.thisTrial'
p8322
Nsg69
Vn
sS'block_loop.thisTrialN'
p8323
I0
sg39
F1.0835310961892901
sg34
g752
(S'\x07\xdf\n\x15\x11\x1e\x06\x0bB\xd0'
tRp8324
sa(dp8325
S'trial_loop.thisTrialN'
p8326
I141
sg6370
g6489
sS'block_loop.thisIndex'
p8327
g6364
sg38
S'right'
p8328
sg58
g62
sS'trial_loop.thisN'
p8329
I141
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p8330
g59
(g98
S'\x8d\x00\x00\x00'
tRp8331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8332
I0
sg6379
g6497
sS'block_loop.thisRepN'
p8333
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8334
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p8335
Nsg69
Vn
sS'block_loop.thisTrialN'
p8336
I0
sg39
F1.0999396162815174
sg34
g752
(S'\x07\xdf\n\x15\x11\x1e\x0c\r\x04\x08'
tRp8337
sa(dp8338
S'trial_loop.thisTrialN'
p8339
I142
sg6370
g7178
sS'block_loop.thisIndex'
p8340
g6364
sg38
S'right'
p8341
sg58
g62
sS'trial_loop.thisN'
p8342
I142
sg33
g6906
sg63
g64
sS'trial_loop.thisIndex'
p8343
g59
(g98
S'\x8e\x00\x00\x00'
tRp8344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8345
I0
sg6379
g7185
sS'block_loop.thisRepN'
p8346
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8347
I2
sg6384
g6913
sg55
g11
sS'block_loop.thisTrial'
p8348
Nsg69
Vn
sS'block_loop.thisTrialN'
p8349
I0
sg39
F1.1501481938485085
sg34
g752
(S'\x07\xdf\n\x15\x11\x1e\x12\x0f\x03\xc0'
tRp8350
sa(dp8351
S'trial_loop.thisTrialN'
p8352
I143
sg6370
g6872
sS'block_loop.thisIndex'
p8353
g6364
sg38
S'right'
p8354
sg58
g62
sS'trial_loop.thisN'
p8355
I143
sg33
g6882
sg63
g64
sS'trial_loop.thisIndex'
p8356
g59
(g98
S'\x8f\x00\x00\x00'
tRp8357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8358
I0
sg6379
g6880
sS'block_loop.thisRepN'
p8359
I2
sg6382
g6882
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8360
I2
sg6384
g6876
sg55
g11
sS'block_loop.thisTrial'
p8361
Nsg69
Vn
sS'block_loop.thisTrialN'
p8362
I0
sg39
F1.183484682263952
sg34
g752
(S'\x07\xdf\n\x15\x11\x1e\x19\x02x\xd0'
tRp8363
sa(dp8364
S'trial_loop.thisTrialN'
p8365
I144
sg6370
g7392
sS'block_loop.thisIndex'
p8366
g6364
sg38
S'right'
p8367
sg58
g62
sS'trial_loop.thisN'
p8368
I144
sg33
g6583
sg63
g64
sS'trial_loop.thisIndex'
p8369
g59
(g98
S'\x90\x00\x00\x00'
tRp8370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8371
I0
sg6379
g7399
sS'block_loop.thisRepN'
p8372
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8373
I2
sg6384
g6583
sg55
g11
sS'block_loop.thisTrial'
p8374
Nsg69
Vn
sS'block_loop.thisTrialN'
p8375
I0
sg39
F1.1166112816626992
sg34
g752
(S'\x07\xdf\n\x15\x11\x1e\x1f\x05\xe3\xd0'
tRp8376
sa(dp8377
S'trial_loop.thisTrialN'
p8378
I145
sg6370
g7096
sS'block_loop.thisIndex'
p8379
g6364
sg38
S'right'
p8380
sg58
g62
sS'trial_loop.thisN'
p8381
I145
sg33
g6613
sg63
g64
sS'trial_loop.thisIndex'
p8382
g59
(g98
S'\x91\x00\x00\x00'
tRp8383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8384
I0
sg6379
g7103
sS'block_loop.thisRepN'
p8385
I2
sg6382
g6606
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8386
I2
sg6384
g6613
sg55
g11
sS'block_loop.thisTrial'
p8387
Nsg69
Vn
sS'block_loop.thisTrialN'
p8388
I0
sg39
F1.3501830898212575
sg34
g752
(S'\x07\xdf\n\x15\x11\x1e%\x08"\x08'
tRp8389
sa(dp8390
S'trial_loop.thisTrialN'
p8391
I146
sg6370
g6440
sS'block_loop.thisIndex'
p8392
g6364
sg38
S'right'
p8393
sg58
g62
sS'trial_loop.thisN'
p8394
I146
sg33
g6451
sg63
g64
sS'trial_loop.thisIndex'
p8395
g59
(g98
S'\x92\x00\x00\x00'
tRp8396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8397
I0
sg6379
g6448
sS'block_loop.thisRepN'
p8398
I2
sg6382
g6444
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8399
I2
sg6384
g6451
sg55
g11
sS'block_loop.thisTrial'
p8400
Nsg69
Vn
sS'block_loop.thisTrialN'
p8401
I0
sg39
F1.2167424836807186
sg34
g752
(S'\x07\xdf\n\x15\x11\x1e+\r\xeeh'
tRp8402
sa(dp8403
S'trial_loop.thisTrialN'
p8404
I147
sg6370
g7801
sS'block_loop.thisIndex'
p8405
g6364
sg38
S'right'
p8406
sg58
g62
sS'trial_loop.thisN'
p8407
I147
sg33
g6788
sg63
g64
sS'trial_loop.thisIndex'
p8408
g59
(g98
S'\x93\x00\x00\x00'
tRp8409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8410
I0
sg6379
g7808
sS'block_loop.thisRepN'
p8411
I2
sg6382
g6788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8412
I2
sg6384
g6795
sg55
g11
sS'block_loop.thisTrial'
p8413
Nsg69
Vn
sS'block_loop.thisTrialN'
p8414
I0
sg39
F1.0168857738462975
sg34
g752
(S'\x07\xdf\n\x15\x11\x1e2\x02\x94('
tRp8415
sa(dp8416
S'trial_loop.thisTrialN'
p8417
I148
sg6370
g6694
sS'block_loop.thisIndex'
p8418
g6364
sg38
S'left'
p8419
sg58
g62
sS'trial_loop.thisN'
p8420
I148
sg33
g6698
sg63
g64
sS'trial_loop.thisIndex'
p8421
g59
(g98
S'\x94\x00\x00\x00'
tRp8422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8423
I0
sg6379
g6702
sS'block_loop.thisRepN'
p8424
I2
sg6382
g6698
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8425
I2
sg6384
g6705
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vn
sS'block_loop.thisTrialN'
p8427
I0
sg39
F0.81686484766669309
sg34
g752
(S'\x07\xdf\n\x15\x11\x1e8\x03$\xb0'
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g6521
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'left'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g6529
sS'block_loop.thisRepN'
p8437
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8438
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vn
sS'block_loop.thisTrialN'
p8440
I0
sg39
F1.3333614629855219
sg34
g752
(S'\x07\xdf\n\x15\x11\x1f\x02\x00\xda\xc0'
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g6555
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'right'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6559
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g6563
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8451
I2
sg6384
g6566
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vn
sS'block_loop.thisTrialN'
p8453
I0
sg39
F1.6668458031317641
sg34
g752
(S'\x07\xdf\n\x15\x11\x1f\x08\x06\xa7 '
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g6572
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'left'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g6576
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g6580
sS'block_loop.thisRepN'
p8463
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8464
I2
sg6384
g6583
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vn
sS'block_loop.thisTrialN'
p8466
I0
sg39
F1.1335204335309754
sg34
g752
(S'\x07\xdf\n\x15\x11\x1f\x0f\x01\xf7\xe8'
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g6711
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'right'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g6721
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g6719
sS'block_loop.thisRepN'
p8476
I2
sg6382
g6721
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8477
I2
sg6384
g6715
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vn
sS'block_loop.thisTrialN'
p8479
I0
sg39
F0.93353229360036494
sg34
g752
(S'\x07\xdf\n\x15\x11\x1f\x15\x04p\xb8'
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g6572
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'left'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6583
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g6580
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8490
I2
sg6384
g6583
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vn
sS'block_loop.thisTrialN'
p8492
I0
sg39
F1.2167630107242076
sg34
g752
(S'\x07\xdf\n\x15\x11\x1f\x1b\x04\x0b('
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g6538
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'left'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g6546
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8503
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vn
sS'block_loop.thisTrialN'
p8505
I0
sg39
F0.88388108227718476
sg34
g752
(S'\x07\xdf\n\x15\x11\x1f!\x07\xb4\xa8'
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g6632
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'right'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6636
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g6640
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8516
I2
sg6384
g6643
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vn
sS'block_loop.thisTrialN'
p8518
I0
sg39
F0.81687026452527789
sg34
g752
(S"\x07\xdf\n\x15\x11\x1f'\x06\x9bh"
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g6371
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'left'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8528
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8529
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vn
sS'block_loop.thisTrialN'
p8531
I0
sg39
F0.70019169977604179
sg34
g752
(S'\x07\xdf\n\x15\x11\x1f-\x04Qx'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g8063
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'left'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6721
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g8070
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6721
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8542
I2
sg6384
g6715
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vn
sS'block_loop.thisTrialN'
p8544
I0
sg39
F1.1167760682046719
sg34
g752
(S'\x07\xdf\n\x15\x11\x1f3\x00#('
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g7364
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'left'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g6876
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g7371
sS'block_loop.thisRepN'
p8554
I2
sg6382
g6882
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8555
I2
sg6384
g6876
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vn
sS'block_loop.thisTrialN'
p8557
I0
sg39
F0.85011409614889999
sg34
g752
(S'\x07\xdf\n\x15\x11\x1f9\x02]x'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g6391
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'right'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8568
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vn
sS'block_loop.thisTrialN'
p8570
I0
sg39
F1.550189476012747
sg34
g752
(S'\x07\xdf\n\x15\x11 \x03\x00\xcb '
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g6919
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'right'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6929
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g6927
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6929
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8581
I2
sg6384
g6923
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vn
sS'block_loop.thisTrialN'
p8583
I0
sg39
F0.70016490058060299
sg34
g752
(S'\x07\xdf\n\x15\x11 \t\t\xb0x'
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g6602
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'left'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g6610
sS'block_loop.thisRepN'
p8593
I2
sg6382
g6606
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8594
I2
sg6384
g6613
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vn
sS'block_loop.thisTrialN'
p8596
I0
sg39
F0.75024575432325946
sg34
g752
(S'\x07\xdf\n\x15\x11 \x0f\x05~@'
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g8063
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'left'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g6721
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g8070
sS'block_loop.thisRepN'
p8606
I2
sg6382
g6721
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8607
I2
sg6384
g6715
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vn
sS'block_loop.thisTrialN'
p8609
I0
sg39
F0.86688668615897768
sg34
g752
(S'\x07\xdf\n\x15\x11 \x15\x02B '
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g8078
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'left'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g6929
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g8085
sS'block_loop.thisRepN'
p8619
I2
sg6382
g6929
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8620
I2
sg6384
g6923
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vn
sS'block_loop.thisTrialN'
p8622
I0
sg39
F0.65020150714099145
sg34
g752
(S'\x07\xdf\n\x15\x11 \x1b\x00\xaf\xc8'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g7178
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'right'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g6906
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g7185
sS'block_loop.thisRepN'
p8632
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8633
I2
sg6384
g6913
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vn
sS'block_loop.thisTrialN'
p8635
I0
sg39
F0.90020036675014126
sg34
g752
(S'\x07\xdf\n\x15\x11  \x0b\x088'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g6679
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'right'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g6549
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g6686
sS'block_loop.thisRepN'
p8645
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8646
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vn
sS'block_loop.thisTrialN'
p8648
I0
sg39
F0.76722247437555779
sg34
g752
(S'\x07\xdf\n\x15\x11 &\n-x'
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g7801
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'right'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6788
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g7808
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8659
I2
sg6384
g6795
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vn
sS'block_loop.thisTrialN'
p8661
I0
sg39
F0.95009391122312081
sg34
g752
(S'\x07\xdf\n\x15\x11 ,\x07+\xf0'
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g6408
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'right'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g6415
sS'block_loop.thisRepN'
p8671
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8672
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vn
sS'block_loop.thisTrialN'
p8674
I0
sg39
F0.75017219908568222
sg34
g752
(S'\x07\xdf\n\x15\x11 2\x06\xcaH'
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g7245
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'right'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g7252
sS'block_loop.thisRepN'
p8684
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8685
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vn
sS'block_loop.thisTrialN'
p8687
I0
sg39
F0.70014636922223872
sg34
g752
(S'\x07\xdf\n\x15\x11 8\x03\x8a@'
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g6743
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'left'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g6636
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g6750
sS'block_loop.thisRepN'
p8697
I2
sg6382
g6636
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8698
I2
sg6384
g6643
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vn
sS'block_loop.thisTrialN'
p8700
I0
sg39
F0.71678838443040149
sg34
g752
(S'\x07\xdf\n\x15\x11!\x01\x0e\x9e0'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g7420
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'left'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6846
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g7427
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6846
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8711
I2
sg6384
g6853
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vn
sS'block_loop.thisTrialN'
p8713
I0
sg39
F0.68341283761310478
sg34
g752
(S'\x07\xdf\n\x15\x11!\x07\n\xe5\x10'
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g6457
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'right'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6433
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g6464
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6433
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8724
I2
sg6384
g6427
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vn
sS'block_loop.thisTrialN'
p8726
I0
sg39
F0.96684911026659393
sg34
g752
(S'\x07\xdf\n\x15\x11!\r\x06x@'
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g6521
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'left'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6532
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g6529
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8737
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vn
sS'block_loop.thisTrialN'
p8739
I0
sg39
F0.80019916933906643
sg34
g752
(S'\x07\xdf\n\x15\x11!\x13\x06\x8f\xb0'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g7435
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'left'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g7005
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g7442
sS'block_loop.thisRepN'
p8749
I2
sg6382
g7005
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8750
I2
sg6384
g7012
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vn
sS'block_loop.thisTrialN'
p8752
I0
sg39
F0.75019899828112102
sg34
g752
(S'\x07\xdf\n\x15\x11!\x19\x04\x07@'
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g7801
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'right'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6788
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g7808
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8763
I2
sg6384
g6795
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vn
sS'block_loop.thisTrialN'
p8765
I0
sg39
F0.81685429904700868
sg34
g752
(S'\x07\xdf\n\x15\x11!\x1f\x00\xcb '
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g7178
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'right'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6906
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g7185
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8776
I2
sg6384
g6913
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vn
sS'block_loop.thisTrialN'
p8778
I0
sg39
F0.81680326653622615
sg34
g752
(S'\x07\xdf\n\x15\x11!$\r\xc3p'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g7420
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'left'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6846
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g7427
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6846
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8789
I2
sg6384
g6853
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vn
sS'block_loop.thisTrialN'
p8791
I0
sg39
F0.86675554116118292
sg34
g752
(S'\x07\xdf\n\x15\x11!*\x0by\x80'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g6649
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'left'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g6656
sS'block_loop.thisRepN'
p8801
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8802
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vn
sS'block_loop.thisTrialN'
p8804
I0
sg39
F0.8005498396605617
sg34
g752
(S'\x07\xdf\n\x15\x11!0\t\xe7('
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g6784
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'left'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6788
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g6792
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8815
I2
sg6384
g6795
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vn
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.70019854212387145
sg34
g752
(S'\x07\xdf\n\x15\x11!6\x07^\xb8'
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g6694
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'left'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g6698
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g6702
sS'block_loop.thisRepN'
p8827
I2
sg6382
g6698
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8828
I2
sg6384
g6705
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vn
sS'block_loop.thisTrialN'
p8830
I0
sg39
F0.81685657982961857
sg34
g752
(S'\x07\xdf\n\x15\x11"\x00\x03,\x80'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g6489
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'right'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g6497
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8841
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vn
sS'block_loop.thisTrialN'
p8843
I0
sg39
F0.79993317307071266
sg34
g752
(S'\x07\xdf\n\x15\x11"\x06\x00\xe2\x90'
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g7801
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'right'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6788
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g7808
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6788
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8854
I2
sg6384
g6795
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vn
sS'block_loop.thisTrialN'
p8856
I0
sg39
F1.0501621066223379
sg34
g752
(S'\x07\xdf\n\x15\x11"\x0b\r\xa0H'
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g7245
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'left'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6493
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g7252
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6493
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8867
I2
sg6384
g6500
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vn
sS'block_loop.thisTrialN'
p8869
I0
sg39
F0.88330432938164449
sg34
g752
(S'\x07\xdf\n\x15\x11"\x11\x0e\xe8h'
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g7178
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'right'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g6906
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g7185
sS'block_loop.thisRepN'
p8879
I2
sg6382
g6906
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8880
I2
sg6384
g6913
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vn
sS'block_loop.thisTrialN'
p8882
I0
sg39
F1.1672078773672183
sg34
g752
(S'\x07\xdf\n\x15\x11"\x17\r\x90\xa8'
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g6679
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'right'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g6686
sS'block_loop.thisRepN'
p8892
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8893
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vn
sS'block_loop.thisTrialN'
p8895
I0
sg39
F1.0001958622042366
sg34
g752
(S'\x07\xdf\n\x15\x11"\x1e\x01~\xd0'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g7096
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'right'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g7103
sS'block_loop.thisRepN'
p8905
I2
sg6382
g6606
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8906
I2
sg6384
g6613
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vn
sS'block_loop.thisTrialN'
p8908
I0
sg39
F0.86684990854064381
sg34
g752
(S'\x07\xdf\n\x15\x11"$\x02\x0fX'
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g6842
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'right'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6853
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g6850
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6846
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8919
I2
sg6384
g6853
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vn
sS'block_loop.thisTrialN'
p8921
I0
sg39
F0.85004795345412276
sg34
g752
(S'\x07\xdf\n\x15\x11"*\x00}\x00'
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g8078
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'left'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6929
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g8085
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6929
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8932
I2
sg6384
g6923
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vn
sS'block_loop.thisTrialN'
p8934
I0
sg39
F0.7002033887865764
sg34
g752
(S'\x07\xdf\n\x15\x11"/\r\xeeh'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g6440
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'right'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6444
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g6448
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6444
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8945
I2
sg6384
g6451
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vn
sS'block_loop.thisTrialN'
p8947
I0
sg39
F1.0168327456512998
sg34
g752
(S'\x07\xdf\n\x15\x11"5\t\xbc0'
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g6472
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'right'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6476
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g6480
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6476
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8958
I2
sg6384
g6483
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vn
sS'block_loop.thisTrialN'
p8960
I0
sg39
F1.5672568571726515
sg34
g752
(S'\x07\xdf\n\x15\x11";\n\x8b8'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g7392
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'right'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g6583
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g7399
sS'block_loop.thisRepN'
p8970
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8971
I2
sg6384
g6583
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vn
sS'block_loop.thisTrialN'
p8973
I0
sg39
F1.1168413556051746
sg34
g752
(S'\x07\xdf\n\x15\x11#\x06\x04l\xd0'
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g6711
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'right'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g6721
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g6719
sS'block_loop.thisRepN'
p8983
I2
sg6382
g6721
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8984
I2
sg6384
g6715
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vn
sS'block_loop.thisTrialN'
p8986
I0
sg39
F1.0668907915687669
sg34
g752
(S'\x07\xdf\n\x15\x11#\x0c\x06\xe5\xa0'
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g7364
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'left'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6876
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g7371
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6882
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8997
I2
sg6384
g6876
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vn
sS'block_loop.thisTrialN'
p8999
I0
sg39
F1.4001761334347975
sg34
g752
(S'\x07\xdf\n\x15\x11#\x12\x08hX'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g7420
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'left'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g6846
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g7427
sS'block_loop.thisRepN'
p9009
I2
sg6382
g6846
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9010
I2
sg6384
g6853
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vn
sS'block_loop.thisTrialN'
p9012
I0
sg39
F1.0834065084409303
sg34
g752
(S'\x07\xdf\n\x15\x11#\x18\x0e\xf08'
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g7435
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'left'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g7005
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g7442
sS'block_loop.thisRepN'
p9022
I2
sg6382
g7005
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9023
I2
sg6384
g7012
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vn
sS'block_loop.thisTrialN'
p9025
I0
sg39
F1.1671568448564358
sg34
g752
(S'\x07\xdf\n\x15\x11#\x1f\x01o0'
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g6371
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'left'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g6380
sS'block_loop.thisRepN'
p9035
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9036
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vn
sS'block_loop.thisTrialN'
p9038
I0
sg39
F1.2001677515590927
sg34
g752
(S'\x07\xdf\n\x15\x11#%\x04a\x18'
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g7163
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'right'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g7170
sS'block_loop.thisRepN'
p9048
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9049
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vn
sS'block_loop.thisTrialN'
p9051
I0
sg39
F1.2168570930061833
sg34
g752
(S'\x07\xdf\n\x15\x11#+\x08\n\x98'
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g6814
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'left'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g6821
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9062
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vn
sS'block_loop.thisTrialN'
p9064
I0
sg39
F1.3168380484712543
sg34
g752
(S'\x07\xdf\n\x15\x11#1\x0b\xf2\x98'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g7420
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'left'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g6846
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g7427
sS'block_loop.thisRepN'
p9074
I2
sg6382
g6846
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9075
I2
sg6384
g6853
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vn
sS'block_loop.thisTrialN'
p9077
I0
sg39
F1.2834037715028899
sg34
g752
(S'\x07\xdf\n\x15\x11#8\x02\x03\xa0'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g8078
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'left'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g6929
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g8085
sS'block_loop.thisRepN'
p9087
I2
sg6382
g6929
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9088
I2
sg6384
g6923
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vn
sS'block_loop.thisTrialN'
p9090
I0
sg39
F1.2006022406403645
sg34
g752
(S'\x07\xdf\n\x15\x11$\x02\x06\xdd\xd0'
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vr
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vn
sa(dp9098
g63
g64
sg43
I40
sg56
Vr
sg57
Vn
sg42
I560
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp9099
g63
g64
sg43
I40
sg55
g11
sg56
Vr
sg45
F0.73999999999999999
sg42
I560
sg49
F0.01
sg57
Vn
sg58
g62
sg44
I00
sg48
I25
sg47
g507
sg51
F30.600000000000001
sg46
F0.71999999999999931
sg65
g66
sg67
g68
sg50
I0
sg69
Vn
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I78156624
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?)\\\x8f>33\xb3?\x00\x00\x00\x00\x00\x00\x00\x00\xc3\xf5(?\x00\x00\x00\x00{\x14.?\x00\x00\x80?\x00\x00\x00\x00\xa4p=?\xb8\x1e\x05?\x00\x00\x00\x00\\\x8f\xc2>\xd7\xa3p?\n\xd7#?\x00\x00\x00\x00\xf6(\\?\x8f\xc2\xf5>\x00\x00\x00\x00\\\x8fB?\xecQ8>{\x14.?\xb8\x1e\x05?R\xb8\x1e?q=\n?\xcd\xccL>\x00\x00\x00\x00\x1f\x85\xeb>\x00\x00\x00\x00\xecQ8>\x00\x00\x00\x00\x00\x00\x00\x00\xecQ8?\x00\x00\x00\x00\xb8\x1e\x85>\xcd\xccL?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S'\xcb\xa1\xa9@\xc9v&@\x96C\x13@\xc9vv@\x96C#@\xc9v\xa3A!\xb0*@\xa8\xc6;@w\xbe\xab@\x83\xc0\x1a@b\x10P@\xee|W@\xdb\xf9\x0e@u\x93(@B`e@\xc9vF@\x0e-"@\xd5x\x1bAb\x10 @b\x10\x00@\x08\xac\x02A!\xb0:@\xa8\xc6\x1b@\xd5x\'A\xdd$\x82@\xfe\xd4\x84@P\x8d\xf7?B`5@\x87\x16A@\x0e-R@\xfc\xa99@\xbaI$@^\xba\xf9?\xa8\xc6+@b\x10\x00@\xee|\'@\x96C#@\x91\xed\xec?ff\x1eA\xc5 \xe0?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xc0@\x00\x00\x90A\x00\x00\x80A\x00\x00\x10B\x00\x00\xb0A\x00\x00\x00\x00\x00\x00\xa0@\x00\x00\x00@\x00\x00\x08B\x00\x00\xd8A\x00\x00\x04B\x00\x00\xa0A\x00\x00\xe8A\x00\x00PA\x00\x00 A\x00\x00\x10A\x00\x00`A\x00\x00@@\x00\x00\xf8A\x00\x00\xb8A\x00\x00@A\x00\x00\x98A\x00\x00\x0cB\x00\x00\xe0@\x00\x00\x80@\x00\x00\xd0A\x00\x00\x14B\x00\x00\xc8A\x00\x00\x1cB\x00\x00\xf0A\x00\x00\xe0A\x00\x00\x00A\x00\x000A\x00\x00\x18B\x00\x00\x88A\x00\x00pA\x00\x00\xa8A\x00\x00\x00B\x00\x00\x80?\x00\x00\xc0A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'ff\xe6?33\xf3?33\xb3?\x00\x00\x80?\x00\x00\xc0?ff\xe6?\x00\x00\xc0?\xcd\xcc\xcc?ff\xe6?ff\xe6?ff\xa6?\x9a\x99\x99?\x00\x00\xc0?\x9a\x99\xd9?\x9a\x99\xd9?ff\xe6?\xcd\xcc\x8c?\xcd\xcc\x8c?\xcd\xcc\xcc?\x9a\x99\x99?\x00\x00\x80?\x00\x00\x00@33\xf3?\xcd\xcc\x8c?\x00\x00\x00@\x9a\x99\x99?\x00\x00\x80?\x00\x00\x00@\xcd\xcc\x8c?\x9a\x99\xd9?\x00\x00\x00@\xcd\xcc\x8c?\xcd\xcc\x8c?\x00\x00\x00@\x9a\x99\x99?\xcd\xcc\xcc?33\xb3?ff\xa6?\x9a\x99\xd9?33\xb3?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'\x05\x00\x00\x00&\x00\x00\x00\x07\x00\x00\x00\x11\x00\x00\x00\x18\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x1f\x00\x00\x00\x0f\x00\x00\x00\x0e\x00\x00\x00 \x00\x00\x00\x14\x00\x00\x00\r\x00\x00\x00\x10\x00\x00\x00#\x00\x00\x00\x02\x00\x00\x00"\x00\x00\x00\x01\x00\x00\x00\x15\x00\x00\x00\x0b\x00\x00\x00$\x00\x00\x00\x04\x00\x00\x00\x13\x00\x00\x00\'\x00\x00\x00\x1b\x00\x00\x00\x19\x00\x00\x00\t\x00\x00\x00\x1e\x00\x00\x00\x0c\x00\x00\x00\x1d\x00\x00\x00\x12\x00\x00\x00%\x00\x00\x00\n\x00\x00\x00\x08\x00\x00\x00\x16\x00\x00\x00\x03\x00\x00\x00\x1a\x00\x00\x00!\x00\x00\x00\x1c\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g144
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g228
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g214
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g354
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g256
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g102
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g137
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g116
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g340
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g291
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g333
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g242
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g305
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g193
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g172
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g165
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g200
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g123
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g319
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g263
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g186
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g235
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g347
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g151
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g130
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g284
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g361
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g277
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g375
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g312
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g298
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g158
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g179
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g368
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g221
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g207
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g249
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g326
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g109
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g270
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I78156624
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xc0@33\x13@\x9a\x99y@\xcd\xcc\x0c@\x00\x00\xc0@\x00\x00@@\x00\x00\xa0@\x00\x00@@\x00\x00\x80@ff\x96@\x00\x00\xa0@\x00\x00\xc0@ff\xe6?\x00\x00\xc0@\x9a\x99y@\x00\x00\xa0@\xcd\xccl@\x00\x00\xc0@33\xa3@\x00\x00\x00@\x9a\x99y@\x00\x00\xc0@\x9a\x99\x19@\x9a\x99\x99@\x00\x00\x80@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x9a\x999@33\x83@\x00\x00\x90@\xcd\xcc\x9c@\x00\x00\xc0@\xcd\xccL@\x00\x00\xc0?\x00\x00\xa0@\x9a\x999@\x00\x00\xc0@ff\x06@33\x93@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S'\xfc3\xf3?\xbe\xcd\x84@D\x9b\x99?\xa5W\x05@_\xce\xac?d!\xb2@\xf5E\xa4?L\x00\x80@\xdfn6@Jy\xf7?_\x02\xe0?\xa4\xce\xac?\xb4f\x9e@G\x9a\xb9?\x96\x13\x01@i\xb0\xaa?\x01.b?\x16\xfd\xae?\x9dE\xa4?R4\x93?\xd3k\xe6?-\xd0\x8c?\x13\xbd[@[\xfd\xbf?\x7f\x01\xa0?\x1dN\xd5?\xce\xef.@\xe4\xbc\x9b?\x9a\xaaJ@yE\x84?pW\xb5?\xd9W\xf5?\xea\xfd\x8e?\xcf~w?*}\xf7? \x9b\xb9?Q%b?\x02y\x97?\xa2[U@\xec\xf2\x7f?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80@33S@\x9a\x99y@33S@33S@\x9a\x99Y@\x9a\x99\x89@\xcd\xccl@ffF@33\x83@ff\x86@\x9a\x99y@\x00\x00`@\xcd\xccL@33\x83@33\x83@333@\xcd\xccl@\x00\x00@@333@\x9a\x99y@ffF@\x00\x00`@\x9a\x999@\x9a\x999@\x00\x00@@33s@\xcd\xccl@\x00\x00\x80@\x9a\x999@\x00\x00@@fff@\x9a\x99y@\xcd\xccL@fff@33s@\x9a\x99y@\xcd\xcc,@33S@\x9a\x99\x89@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\x00;\x08\x03\xc0\x05.\r \x07.\r\x00\x06.\r`,,\r\xa0,,\r\x80\x02.\r\xa0/,\r\xc0\x06.\r\x00s\xfc\x0c`/,\r\xa0A\xfa\x0c\x80@\xfa\x0c\xc0@\xfa\x0c\xa0\x05.\r@\xd2\x06\x03\x80\x00.\r`@\xfa\x0c\x00<\x08\x03@9\x08\x03 \xb0\x08\x03\xc0\xb0\x08\x03\xe0\xb1\x08\x03\xa0\xb0\x08\x03@\xb1\x08\x03\x80\xb2\x08\x03`\xb2\x08\x03`\xb1\x08\x03\x00\xb2\x08\x03\x80\xb0\x08\x03\xc0\xb2\x08\x03 \xb1\x08\x03\xa0\xb1\x08\x03@\xb3\x08\x03`\xb0\x08\x03\xc0\xb1\x08\x03\x80\xb1\x08\x03\xa0\xb2\x08\x03@\xb2\x08\x03\xc0\xdb\x06\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S'\xcb\xa1\x91@\xee|\x87@\xe9&\x91?w\xbe\x8b@\x83\xc0j?\x98n\xde@T\xe3\xa5@\x0e-2@\xe9&\xb1?\xfc\xa9i@^\xba\xf9?\x1dZ\xa4?B`u@\xb6\xf3]?!\xb0:@\xc5 \xe0?!\xb0z@\x91\xed\x8c?\xc5 \xe0?P\x8dw?T\xe3=@\x83\xc0\x8a?1\x08\x88@/\xdd,@u\x93\xc8?\x0e-\xa2?\xdb\xf9\x8e?\xd3Mb?\xe9&\xd1?T\xe3M@\xc9vv@P\x8d\x97?\xf0\xa7f?\xc5 \xe0?\x83\xc0j?\x83\xc0j?+\x87\x86?^\xba\x99?\xc9v\x16@P\x8d\xb7?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I78156624
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'\x90\xc5\x08\x03\x88\xa6l\r\xc0\xa5l\r\xe8\xa5l\r`\xc5\x08\x03\x10\xa6l\r\xd8\xa6l\r\x10\xa6l\r\xc0\xa5l\r0\xc5\x08\x038\xa6l\r\x98\xa5l\r\x00\x81l\r\xe8\xa5l\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S'\xf0k2\x04\x98lZ\x02  \x82\x04\xa0-\x82\x04\xe8$\x82\x04\xe0,\x82\x04\xe8\x1a\xdf\x04\xc0\x12\xdf\x04\xc8\x1c\xdf\x04\xf8\x13\xdf\x04\x18\x12\xdf\x048\x16\xdf\x04(\x1d\xdf\x04\xd8\x12\xdf\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g777
sg82
g778
sg83
g782
sg84
g783
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g788
sg82
g789
sg83
g793
sg84
g794
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g799
sg82
g800
sg83
g804
sg84
g805
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g810
sg82
g811
sg83
g815
sg84
g816
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g799
sg82
g821
sg83
g804
sg84
g825
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g766
sg82
g830
sg83
g771
sg84
g834
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g743
sg82
g839
sg83
g748
sg84
g843
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g810
sg82
g848
sg83
g815
sg84
g852
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g755
sg82
g857
sg83
g760
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g788
sg82
g866
sg83
g793
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g777
sg82
g875
sg83
g782
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I78156624
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I78156624
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S'`\xa6n\r\x88\xa6n\r(un\r\xc8\xa7n\r\x00y\x06\x03\xb0\xa6n\r\x08vn\r\xd8\xa6n\r\xf0\xa7n\r@\xa8n\r`\xa6n\r\x10\xb1n\r\x00\xa7n\r@v\x06\x03@\xb1n\r`\xb2n\r`\xa6n\r\xc0}\x06\x03@v\x06\x03\xe0y\x06\x03\xb0\xa6n\rh\xa8n\r\xc0}\x06\x03(un\r\xe0\xb0n\rp\xb1n\r@\xb1n\r\x00\xa7n\r\x10\xb1n\r\x18\xa8n\r@v\x06\x03\xe0\xb0n\r\x88\xa6n\r@v\x06\x03\xe0\xb0n\r`un\rP\xa7n\r\xa0\xb1n\r\x88\xa6n\r(\xa7n\rp\xb1n\r\xd8\xa6n\r\xc0z\x06\x03\x80r\x06\x03@v\x06\x03\xb0\xa6n\r\xc0z\x06\x03p\xb1n\r`\xa6n\r(\xa7n\rx\xa7n\r(\xa7n\rh\xa8n\r\xb0\xa6n\r\x88\xa6n\r(\xa7n\r@\xb1n\r@v\x06\x03\x10\xb1n\r\xa0\xb1n\r\xd0\xb1n\r\x00\xa7n\rx\xa7n\r0\xb2n\r\x00\xa7n\r\xa0\xb1n\r\xe0\xb0n\r\xc0}\x06\x03P\xa7n\r`un\rp\xb1n\r\xd0un\r0\xb2n\r\xb0\xa6n\r\xd0\xb1n\r(un\r\xd8\xa6n\r`un\r@\xb1n\r\xa0\xb1n\r`\xa6n\rx\xa7n\r\xe0y\x06\x03\xb0\xa6n\r\x90\xa8n\r\x10\xb1n\r\x00y\x06\x03xvn\r\xc0}\x06\x03\x10\xb1n\r\xc0\xb2n\r(\xa7n\r\xa0\xb1n\r\xe0y\x06\x03\x98un\r\x90\xa8n\r\x00y\x06\x03h\xa8n\r\xc0}\x06\x030\xb2n\r\x80r\x06\x03\xd0\xb1n\r\xe0y\x06\x03\xd8\xa6n\r\xe0\xb0n\r\x18\xa8n\rx\xa7n\r\xd0\xb1n\r`\xa6n\rp\xb1n\r\x00y\x06\x03@\xb1n\r\x00y\x06\x03\xd8\xa6n\r\xd0\xb1n\rp\xb1n\r\x88\xa6n\rp\xb1n\r\xb0\xa6n\r(un\r@vn\r\x88\xa6n\r\x00\xa7n\r(un\r`\xa6n\r\xf0\xb2n\rx\xa7n\r\x90\xa8n\rx\xa7n\r(un\r\x18\xa8n\r\xe0\xb0n\r@\xb1n\r\x90\xa8n\r\xe0y\x06\x03\x88\xa6n\r`\xa6n\rP\xa7n\r\xd0\xb1n\r`un\r\xb8\xa8n\r\x00y\x06\x03h\xa8n\rp\xb1n\r(\xa7n\r\x00\xa7n\r`un\r\xc0\xb2n\r\xe0\xb0n\r\x10\xb1n\r\xe0\xb0n\r(un\rx\xa7n\rP\xa7n\r\x08vn\rP\xa7n\r\x00y\x06\x03\xa0\xb1n\rx\xa7n\r(un\r\xb0\xa6n\r\x00\xa7n\r\xa0\xb1n\r@v\x06\x03\x80r\x06\x03\xd0\xb1n\r\xe0\xb0n\r\xd8\xa6n\r@\xb1n\r\xe0y\x06\x03(\xa7n\r\xd0\xb1n\r\x10\xb1n\r@v\x06\x03\xe0y\x06\x03\x10\xb1n\r`un\r\xc0}\x06\x03P\xa7n\r\x18\xa8n\r\x00\xa7n\r\xe0y\x06\x03\xc0}\x06\x03x\xa7n\r\xc0\xb2n\r\xb0\xa6n\rp\xb1n\r\x00y\x06\x03`\xa6n\r\xd0\xb1n\r(\xa7n\r\x10\xb1n\r(un\r\x90\xb2n\r(\xa7n\rxvn\r\x00\xb2n\r\x88\xa6n\r\xf0\xa7n\r\x88\xa6n\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S'`\xd1\x06\x03`l\x07\x03\xc0i\x07\x03`m\x07\x03\xe0m\x07\x03\x80m\x07\x03\x00j\x07\x03 l\x07\x03`k\x07\x03\xe0k\x07\x03\xe0l\x07\x03\x80o\x07\x03\x00i\x07\x03@n\x07\x03 k\x07\x03\x00n\x07\x03\xa0l\x07\x03\xa0n\x07\x03\xc0o\x07\x03\xe0n\x07\x03\xe0o\x07\x03\x80j\x07\x03 n\x07\x03\xa0m\x07\x03\xa0\xc1.\r`o\x07\x03\xc0m\x07\x03\xe0\xde\xf9\x0c\x80\xdf\xf9\x0c\xe0\xdf\xf9\x0c\xc0n\x07\x03\x80\xda\xf9\x0c\x00\xde\xf9\x0c \xdb\x06\x03\xa0\xdb\xfb\x0c@\xd5\xfb\x0c`\xd8\xfb\x0c`\xda\xfb\x0c\xc0\xdb\xfb\x0c`\xdd\xfb\x0c`\xd4\xfb\x0c\x00\xd5\xfb\x0c\x00\xd4\xfb\x0c \xd8\xfb\x0c\x80\xdc\xfb\x0c@\xd4\xfb\x0c\x00\xd6\xfb\x0c \xdf\xf9\x0c\x80\xd4\xfb\x0c\x80\xda\xfb\x0c@#+\r\xe0"+\r\xc0*+\r\xa0"+\r\x80 +\r\xc0 +\r\xe0 +\r\x00++\r  +\r@!+\r\x00!+\r\xa0 +\r\xe0\xda\xfb\x0c\xc0\xeb(\r\xc0\xe2(\r \xed(\r\x80\xe3(\r\x80\xed(\r\xe0\xe2(\r@\xe3(\r\x80\xe2(\r`\xdf\xf9\x0c\xe0\xef(\r@\xeb(\r\x00\xe3(\r\x80\xe6(\r\xe0\xeb(\r\x80\xe7(\r\xc0\xe7(\r \xe0(\r\xc0\xcd.\r@\xe6(\r`\xe7(\r\x80\xeb(\r`\xec(\r\xa0\xe7(\r \xeb(\r@\xe7(\r\xe0\xe6(\r \xe7(\r\x80\xec(\r\x00\xeb(\r\xa0\xe3(\r\xa0\xe6(\r`\xe6(\r \xe6(\r\xa0\xec(\r@\xed(\r`\xed(\r\xa02\xbc\x04@2\xbc\x04\xc01\xbc\x04\xc02\xbc\x04\xe02\xbc\x04@3\xbc\x04 3\xbc\x04\x803\xbc\x04`3\xbc\x04 1\xbc\x04\xe03\xbc\x04\x004\xbc\x04\xa01\xbc\x04`2\xbc\x04 4\xbc\x04\x804\xbc\x04`4\xbc\x04\x002\xbc\x04\xe04\xbc\x04\xc04\xbc\x04 2\xbc\x04@5\xbc\x04`5\xbc\x04\x805\xbc\x04\x003\xbc\x04@1\xbc\x04\xe05\xbc\x04\xc05\xbc\x04 6\xbc\x04\x006\xbc\x04`6\xbc\x04@6\xbc\x04\xa06\xbc\x04\x806\xbc\x04\xe06\xbc\x04\xc06\xbc\x04\xe00\xbc\x04\x007\xbc\x04`7\xbc\x04@7\xbc\x04\xa05\xbc\x04\x807\xbc\x04\xe07\xbc\x04\xc07\xbc\x04 8\xbc\x04@8\xbc\x04\x801\xbc\x04\x001\xbc\x04\xa08\xbc\x04\xc08\xbc\x04 5\xbc\x04\xa00\xbc\x04\xe08\xbc\x04@9\xbc\x04 9\xbc\x04\xc00\xbc\x04`9\xbc\x04\x809\xbc\x04\xa09\xbc\x04\x00:\xbc\x04\xe09\xbc\x04@:\xbc\x04`:\xbc\x04\x808\xbc\x04\xa0:\xbc\x04\xc0:\xbc\x04\xa03\xbc\x04\x009\xbc\x04\xe0:\xbc\x04\x00;\xbc\x04`;\xbc\x04@;\xbc\x04\xa07\xbc\x04\x80;\xbc\x04\xe0;\xbc\x04\xc0;\xbc\x04`8\xbc\x04\x00<\xbc\x04 <\xbc\x04@<\xbc\x04`<\xbc\x04\x80<\xbc\x04\xe0<\xbc\x04\xc0<\xbc\x04\x00\xec(\r\xc09\xbc\x04\x80:\xbc\x04\x80=\xbc\x04\xa0=\xbc\x04\xa0<\xbc\x04\xc0=\xbc\x04 =\xbc\x04@=\xbc\x04 ;\xbc\x04`>\xbc\x04\x80>\xbc\x04\x005\xbc\x04\xa04\xbc\x04\xe01\xbc\x04\xc03\xbc\x04\xc0>\xbc\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S'B\xb0\x8a?\xc2\xab\x8a?\x8c\xf4\x8e?\xae}\x97?l\xc2\x9b?+\xfbn?\xcd\xd2\xcc?\xfcj\x86?\xfd\'\x82?#\x06\xa0?(5\x03@\xae\xc7{?\xa6\xb6j?\xdb~\xb7?\xda\x9aw?\xe8\x1cb?%\xd1\x8c?\x0c8\x93?<\x8d\x88?w\xa9\x99?[\x8b\x88?\x19(\xa2?\x9f@s?d\x8d\x88?O\x13o?\xfc\x15\x91?\xdb\xf4\x8e?\xe6l\xc6?T\x8e\xa8?\xac:\x93?k\xea]?\xd6\x9a9@\xf3\xcf\x8c?\xce.b?\x11m\xc6?P\x83w?\x13[\xf5?\xd1\x83w?3F\xa4?S\xec\xae?,G\xa4?\xce\x8e\xa8?=J\x84?h\xa0\x99?\x03\x9c7?l\x8b\xe8?:\xf5\x8e?\xd1k\xa6?\\I\xc4?+\x18\xf1?\x91\'\xa2?\xfc\x0e\x91?\x96(\xa2?\x8b.b?\xe0>\xf3?2A\x84?\xf0~\x97?\xf9n\x86?\xd07\xb3?t\xcf\xbb?\xcd\xd0\xcc?\x00\xae\x8a?\xe7\x9d\xb9?WJ\x84?\xc9\xdf\x8c?\x95\xbf\x9b?\x04\xf2\xae?W\x9d\xb9?]$R@&\xdf\xac?f}\xb7?\x9c 2@\x10\xd3\x8c?\xd6\xf4\x8e?\xa9!\xa2?\xe6\xef^@\x95\xc1\x9b?\x8f\x8e\x88?\xb5\xae\x8a?\xbd\x8af?\xf5\xdb\xbd?B\xcf\x0c@J[\xb5?\xa8\xf4\x8e?6\xb5\xaa?.\x9f\x99?\xb7\x9d\xb9?p\x04\x80?\x0bI\x84?\xde\xa8\xb9?R\xcc\xdc@\xcer\x97?\x06\r@?\x04\xd3\xac?\xda\xbd\x9b?\xbf[\xd5?\xcf\xd1\x8c?#\xb1\xaa?w\x07\x80?U\x06\x80?\xbb\xa5Y?\xcc\x16\x91?\x97\xe1\xdd?bV\xc4?\x80\xb6j?g\x8e\xa8?\x04G\xe4?\xb8\x87w?\xc1\x02\x8f?(}\x97?\x8b9\x93?3\xc0\xdb?\x0f\xf3n?"\x08\x00@!tf?\x10\x90H?\xf8;s?{\xd9L?\x06cU?P;3@\xd8\xb7j?y$\x82?%dU?\x8dsf?:\xfbn?j\x9a\xa8?\xd6\xf2\xae?\nl\xc6?\xed\x8d\xc8?\x888\xb3?0\xbd\xaa?\x11qf?\xfeI\x84?\xe5:\x93?\x1d\x86w?wE\x84?\xc4nf?\xccG\x84?\x87.b?C\xc1\xbb?\x13,@?x\xa7Y?cJ\xe4?\xca,b?\xa6\xdb=@\x80\xcf\x0c@\x87&\xa2?ejf?\x16\xf6n?\x11\xfen?\x8f\x02^?K~\xf7?\x97\xc1\xdb?\x16\xf4\xae?\x83\xe4\x9d?\xb7\xd5\x8c?\x0e\xb0\xea?Fn\x86?H\xc2\xfb?N}\x97?p<\x93?r\x1eQ?\xe6\xa5Y?\xdb(\x82?\xfcF\x84?W\xb5j?\xc16Q?\x9f.b?\t\xca{?p\x05@?T\x86\xa8?k\xe5\x9d?oJ\x84?HQD?\x7f\x8c\xa8?@\x96H?"\xad\x1a@\xefQD?Tl\xc6?\xd7\xe2\xdd?\x15\xe3\xdd?\x974\xc2?]:\x93?\xfe\xa8\x8a?:J\xa4?\xd9\xb0\xaa?\x0f\xa0\x99?\x00l\xc6?\x11\xe2\x9d?\x9c\x02\x00@\n\xfd\xbf?\xc7F\xf3?k\xd1\xcc?U}\xd7?9\xc8\xac?\x16j\xa6?\x99\xab\x99?\xd85\x93?H\x8e\xa8?\xb5C\xa4?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S'\x08\x16\xdf\x04\xc8\x16\xdf\x0405\xdc\x04\xf86\xdc\x04\x98?\xdc\x04\xa0:\xdc\x04 ?\xdc\x04 6\xdc\x04\x88:\xdc\x04@=\xdc\x04P<\xdc\x04\xe8:\xdc\x04\xa0=\xdc\x04p=\xdc\x04\xa85\xdc\x04H>\xdc\x04\xe87\xdc\x04\xc0;\xdc\x04X7\xdc\x04\x08?\xdc\x04\x90;\xdc\x04\x98<\xdc\x04\xc8?\xdc\x04\x803\xdc\x04\xa8>\xdc\x04H;\xdc\x04\xf0>\xdc\x04(:\xdc\x04x>\xdc\x04\xf8<\xdc\x04\x00;\xdc\x04\x185\xdc\x04\xd8>\xdc\x048<\xdc\x04\x107\xdc\x04X=\xdc\x04\x005\xdc\x04P6\xdc\x04\x18;\xdc\x04\xf83\xdc\x04\xf08\xdc\x04H8\xdc\x04\xf0;\xdc\x04h?\xdc\x04@:\xdc\x04\x800\xdc\x04\x80\x89\xdd\x04\xb0\x80\xdd\x04\xd0\x81\xdd\x040\x82\xdd\x04\x08\x86\xdd\x04P\x80\xdd\x04\xb8\x87\xdd\x04H\x82\xdd\x04\xc8\x89\xdd\x04\xa0\x1d\x83\x04X\x1d\x83\x04\x08\x13\x83\x04\xf0\x15\x83\x04\x90\x1b\x83\x04\xe0\x1c\x83\x04\x08\x1f\x83\x04\xc0\x1e\x83\x04\xb0\x19\x83\x04\xb8\x11\x83\x04\xd8\x1b\x83\x04\xb0\x1f\x83\x04x\x15\x83\x048\x19\x83\x04P\x13\x83\x04@\x17\x83\x04(\x11\x83\x04\x88\x1d\x83\x04\xa0\x1a\x83\x04\x80\x16\x83\x04\xf8\x1c\x83\x04p\x11\x83\x04\xc0\x12\x83\x04(\x1a\x83\x04 \x16\x83\x04x\x18\x83\x04\xe0\x19\x83\x04\xb0\x1c\x83\x04\xc0\x1b\x83\x04x\x1b\x83\x04\xd8\x1e\x83\x04P3\xdc\x04(4\xdc\x04\xa01\xdc\x04 <\xdc\x04\xe00\xdc\x04\xf05\xdc\x04p4\xdc\x04h6\xdc\x04\xf80\xdc\x04\x083\xdc\x04\x104\xdc\x04\xa07\xdc\x04\xb84\xdc\x04\x182\xdc\x04\xe8=\xdc\x04\x188\xdc\x04\x989\xdc\x04p1\xdc\x04\xd04\xdc\x0480\xdc\x04\xb87\xdc\x04\x806\xdc\x04H5\xdc\x04\xc08\xdc\x04\xc02\xdc\x04\x809\xdc\x04h9\xdc\x04\xc05\xdc\x04\xd07\xdc\x04\x089\xdc\x04\xd8;\xdc\x04@4\xdc\x04\xe09\xdc\x04\xc86\xdc\x040;\xdc\x04p7\xdc\x04\xb0?\xdc\x04\xa82\xdc\x04\xb09\xdc\x04\xd01\xdc\x04\x881\xdc\x04\xe84\xdc\x04\xd0:\xdc\x0486\xdc\x04\x80?\xdc\x04X:\xdc\x04`8\xdc\x04\xd85\xdc\x04\xc80\xdc\x04\xc89\xdc\x04(1\xdc\x04\xc83\xdc\x04 0\xdc\x04\x983\xdc\x04\xe0<\xdc\x04\xa04\xdc\x04\xe03\xdc\x04\xb03\xdc\x04h<\xdc\x04`>\xdc\x04\x002\xdc\x04\x884\xdc\x04\xc0>\xdc\x04`5\xdc\x04\x008\xdc\x04\xb06\xdc\x04 3\xdc\x04\x10:\xdc\x04\xb8=\xdc\x04h3\xdc\x04\x00>\xdc\x04(7\xdc\x04P0\xdc\x04@7\xdc\x04\xb81\xdc\x04\x980\xdc\x04\x18>\xdc\x04\xa88\xdc\x04\xb00\xdc\x04x5\xdc\x04x8\xdc\x04`2\xdc\x04\xb0<\xdc\x04 9\xdc\x04`;\xdc\x04\xd0=\xdc\x04x;\xdc\x04\x986\xdc\x04@1\xdc\x04H2\xdc\x040>\xdc\x04x2\xdc\x04\x902\xdc\x04\x10=\xdc\x04\x101\xdc\x04\xe0?\xdc\x04(=\xdc\x0483\xdc\x04\x086\xdc\x04\x80<\xdc\x0489\xdc\x04p:\xdc\x048?\xdc\x04\x90>\xdc\x0408\xdc\x04P?\xdc\x04\xa8;\xdc\x04P9\xdc\x04\xe06\xdc\x04\xe81\xdc\x04\x88=\xdc\x0402\xdc\x04\xd88\xdc\x04X1\xdc\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g959
sg894
g949
sg908
g953
sg903
g957
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g959
sg894
g983
sg908
g953
sg903
g990
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g1008
sg894
g998
sg908
g1002
sg903
g1006
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g1019
sg894
g1015
sg908
g1026
sg903
g1023
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g970
sg894
g1032
sg908
g977
sg903
g1039
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g1057
sg894
g1047
sg908
g1051
sg903
g1055
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g899
sg894
g1064
sg908
g909
sg903
g1071
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g1083
sg894
g1079
sg908
g1090
sg903
g1087
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g1100
sg894
g1096
sg908
g1107
sg903
g1104
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g1008
sg894
g998
sg908
g1002
sg903
g1006
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g1130
sg894
g1126
sg908
g1137
sg903
g1134
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g1153
sg894
g1143
sg908
g1147
sg903
g1151
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g1177
sg894
g1173
sg908
g1184
sg903
g1181
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g1008
sg894
g1190
sg908
g1002
sg903
g1197
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g1209
sg894
g1205
sg908
g1216
sg903
g1213
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g959
sg894
g949
sg908
g953
sg903
g957
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g1245
sg894
g1235
sg908
g1239
sg903
g1243
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g1177
sg894
g1173
sg908
g1184
sg903
g1181
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g1057
sg894
g1047
sg908
g1051
sg903
g1055
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g1295
sg894
g1291
sg908
g1302
sg903
g1299
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g1130
sg894
g1308
sg908
g1137
sg903
g1315
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g1100
sg894
g1096
sg908
g1107
sg903
g1104
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g1083
sg894
g1079
sg908
g1090
sg903
g1087
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g1019
sg894
g1015
sg908
g1026
sg903
g1023
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g1008
sg894
g998
sg908
g1002
sg903
g1006
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g1057
sg894
g1375
sg908
g1051
sg903
g1382
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g919
sg894
g1390
sg908
g926
sg903
g1397
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g1008
sg894
g998
sg908
g1002
sg903
g1006
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g1057
sg894
g1047
sg908
g1051
sg903
g1055
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g1245
sg894
g1235
sg908
g1239
sg903
g1243
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g1448
sg894
g1444
sg908
g1455
sg903
g1452
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g1465
sg894
g1461
sg908
g1472
sg903
g1469
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g1153
sg894
g1143
sg908
g1147
sg903
g1151
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g1295
sg894
g1291
sg908
g1302
sg903
g1299
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g1019
sg894
g1517
sg908
g1026
sg903
g1524
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g1100
sg894
g1096
sg908
g1107
sg903
g1104
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g1177
sg894
g1545
sg908
g1184
sg903
g1552
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g1008
sg894
g1190
sg908
g1002
sg903
g1197
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g959
sg894
g983
sg908
g953
sg903
g990
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g1100
sg894
g1586
sg908
g1107
sg903
g1593
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g1295
sg894
g1601
sg908
g1302
sg903
g1608
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g899
sg894
g1064
sg908
g909
sg903
g1071
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g1153
sg894
g1143
sg908
g1147
sg903
g1151
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g1646
sg894
g1642
sg908
g1653
sg903
g1650
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g1153
sg894
g1143
sg908
g1147
sg903
g1151
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g1245
sg894
g1672
sg908
g1239
sg903
g1679
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g959
sg894
g949
sg908
g953
sg903
g957
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g919
sg894
g1390
sg908
g926
sg903
g1397
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g1153
sg894
g1713
sg908
g1147
sg903
g1720
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g1130
sg894
g1308
sg908
g1137
sg903
g1315
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g1008
sg894
g1190
sg908
g1002
sg903
g1197
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g1083
sg894
g1754
sg908
g1090
sg903
g1761
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g1465
sg894
g1769
sg908
g1472
sg903
g1776
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g1788
sg894
g1784
sg908
g1795
sg903
g1792
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g1100
sg894
g1586
sg908
g1107
sg903
g1593
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g1646
sg894
g1814
sg908
g1653
sg903
g1821
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g1130
sg894
g1308
sg908
g1137
sg903
g1315
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g1100
sg894
g1096
sg908
g1107
sg903
g1104
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g1465
sg894
g1461
sg908
g1472
sg903
g1469
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g1057
sg894
g1047
sg908
g1051
sg903
g1055
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g1177
sg894
g1173
sg908
g1184
sg903
g1181
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g1448
sg894
g1894
sg908
g1455
sg903
g1901
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g1245
sg894
g1672
sg908
g1239
sg903
g1679
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g1295
sg894
g1291
sg908
g1302
sg903
g1299
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g936
sg894
g1935
sg908
g943
sg903
g1942
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g1130
sg894
g1126
sg908
g1137
sg903
g1134
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g959
sg894
g949
sg908
g953
sg903
g957
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g1788
sg894
g1976
sg908
g1795
sg903
g1983
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g1019
sg894
g1015
sg908
g1026
sg903
g1023
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g1245
sg894
g1672
sg908
g1239
sg903
g1679
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g1130
sg894
g1126
sg908
g1137
sg903
g1134
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g1465
sg894
g1769
sg908
g1472
sg903
g1776
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g899
sg894
g1064
sg908
g909
sg903
g1071
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g1646
sg894
g1814
sg908
g1653
sg903
g1821
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g1209
sg894
g1205
sg908
g1216
sg903
g1213
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g959
sg894
g983
sg908
g953
sg903
g990
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g1448
sg894
g1444
sg908
g1455
sg903
g1452
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g1083
sg894
g1754
sg908
g1090
sg903
g1761
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g970
sg894
g1032
sg908
g977
sg903
g1039
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g1209
sg894
g1205
sg908
g1216
sg903
g1213
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g1177
sg894
g1545
sg908
g1184
sg903
g1552
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g1083
sg894
g1079
sg908
g1090
sg903
g1087
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g1465
sg894
g1769
sg908
g1472
sg903
g1776
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g1153
sg894
g1713
sg908
g1147
sg903
g1720
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g1465
sg894
g1461
sg908
g1472
sg903
g1469
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g1209
sg894
g2225
sg908
g1216
sg903
g2232
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g1448
sg894
g1894
sg908
g1455
sg903
g1901
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g1245
sg894
g1235
sg908
g1239
sg903
g1243
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g1177
sg894
g1173
sg908
g1184
sg903
g1181
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g1130
sg894
g1126
sg908
g1137
sg903
g1134
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g1177
sg894
g1545
sg908
g1184
sg903
g1552
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g1788
sg894
g1784
sg908
g1795
sg903
g1792
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g1209
sg894
g1205
sg908
g1216
sg903
g1213
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g1019
sg894
g1517
sg908
g1026
sg903
g1524
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g1057
sg894
g1375
sg908
g1051
sg903
g1382
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g1019
sg894
g1517
sg908
g1026
sg903
g1524
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g1646
sg894
g1814
sg908
g1653
sg903
g1821
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g1788
sg894
g1976
sg908
g1795
sg903
g1983
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g1295
sg894
g1291
sg908
g1302
sg903
g1299
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g1130
sg894
g1126
sg908
g1137
sg903
g1134
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g970
sg894
g1032
sg908
g977
sg903
g1039
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g1019
sg894
g1517
sg908
g1026
sg903
g1524
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g1788
sg894
g1976
sg908
g1795
sg903
g1983
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g1295
sg894
g1601
sg908
g1302
sg903
g1608
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g919
sg894
g1390
sg908
g926
sg903
g1397
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g1295
sg894
g1601
sg908
g1302
sg903
g1608
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g959
sg894
g949
sg908
g953
sg903
g957
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g936
sg894
g1935
sg908
g943
sg903
g1942
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g1083
sg894
g1754
sg908
g1090
sg903
g1761
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g919
sg894
g1390
sg908
g926
sg903
g1397
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1100
sg894
g1586
sg908
g1107
sg903
g1593
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g1788
sg894
g1784
sg908
g1795
sg903
g1792
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g1646
sg894
g1642
sg908
g1653
sg903
g1650
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g1448
sg894
g1894
sg908
g1455
sg903
g1901
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g1646
sg894
g1642
sg908
g1653
sg903
g1650
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g1019
sg894
g1517
sg908
g1026
sg903
g1524
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g1057
sg894
g1047
sg908
g1051
sg903
g1055
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g1130
sg894
g1308
sg908
g1137
sg903
g1315
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g1448
sg894
g1894
sg908
g1455
sg903
g1901
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g1209
sg894
g2225
sg908
g1216
sg903
g2232
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g899
sg894
g1064
sg908
g909
sg903
g1071
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g1448
sg894
g1444
sg908
g1455
sg903
g1452
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g1788
sg894
g1976
sg908
g1795
sg903
g1983
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g1245
sg894
g1672
sg908
g1239
sg903
g1679
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g1646
sg894
g1642
sg908
g1653
sg903
g1650
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g1245
sg894
g1235
sg908
g1239
sg903
g1243
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g1295
sg894
g1291
sg908
g1302
sg903
g1299
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g1153
sg894
g1713
sg908
g1147
sg903
g1720
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g1100
sg894
g1586
sg908
g1107
sg903
g1593
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g1245
sg894
g1235
sg908
g1239
sg903
g1243
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g1465
sg894
g1461
sg908
g1472
sg903
g1469
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g1057
sg894
g1375
sg908
g1051
sg903
g1382
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g1083
sg894
g1079
sg908
g1090
sg903
g1087
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g1057
sg894
g1375
sg908
g1051
sg903
g1382
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g936
sg894
g1935
sg908
g943
sg903
g1942
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g1646
sg894
g1814
sg908
g1653
sg903
g1821
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g1448
sg894
g1894
sg908
g1455
sg903
g1901
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g1008
sg894
g1190
sg908
g1002
sg903
g1197
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g1448
sg894
g1444
sg908
g1455
sg903
g1452
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g970
sg894
g1032
sg908
g977
sg903
g1039
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1465
sg894
g1769
sg908
g1472
sg903
g1776
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g1646
sg894
g1814
sg908
g1653
sg903
g1821
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g936
sg894
g1935
sg908
g943
sg903
g1942
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g959
sg894
g983
sg908
g953
sg903
g990
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g1100
sg894
g1586
sg908
g1107
sg903
g1593
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g1465
sg894
g1461
sg908
g1472
sg903
g1469
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g1008
sg894
g998
sg908
g1002
sg903
g1006
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g1177
sg894
g1545
sg908
g1184
sg903
g1552
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g1788
sg894
g1976
sg908
g1795
sg903
g1983
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g1057
sg894
g1375
sg908
g1051
sg903
g1382
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g1019
sg894
g1015
sg908
g1026
sg903
g1023
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1130
sg894
g1308
sg908
g1137
sg903
g1315
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g1209
sg894
g2225
sg908
g1216
sg903
g2232
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g1153
sg894
g1143
sg908
g1147
sg903
g1151
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g1788
sg894
g1784
sg908
g1795
sg903
g1792
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g1083
sg894
g1754
sg908
g1090
sg903
g1761
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g1008
sg894
g1190
sg908
g1002
sg903
g1197
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g1209
sg894
g2225
sg908
g1216
sg903
g2232
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g1083
sg894
g1079
sg908
g1090
sg903
g1087
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g1245
sg894
g1672
sg908
g1239
sg903
g1679
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g1177
sg894
g1545
sg908
g1184
sg903
g1552
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1448
sg894
g1444
sg908
g1455
sg903
g1452
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g1019
sg894
g1015
sg908
g1026
sg903
g1023
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1100
sg894
g1096
sg908
g1107
sg903
g1104
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g1209
sg894
g1205
sg908
g1216
sg903
g1213
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g1177
sg894
g1173
sg908
g1184
sg903
g1181
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g1646
sg894
g1642
sg908
g1653
sg903
g1650
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g1465
sg894
g1769
sg908
g1472
sg903
g1776
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g959
sg894
g983
sg908
g953
sg903
g990
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g1295
sg894
g1601
sg908
g1302
sg903
g1608
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g899
sg894
g1064
sg908
g909
sg903
g1071
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g1788
sg894
g1784
sg908
g1795
sg903
g1792
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g1153
sg894
g1713
sg908
g1147
sg903
g1720
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g1083
sg894
g1754
sg908
g1090
sg903
g1761
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g936
sg894
g1935
sg908
g943
sg903
g1942
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g1295
sg894
g1601
sg908
g1302
sg903
g1608
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g1153
sg894
g1713
sg908
g1147
sg903
g1720
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g1209
sg894
g2225
sg908
g1216
sg903
g2232
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g919
sg894
g1390
sg908
g926
sg903
g1397
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g970
sg894
g1032
sg908
g977
sg903
g1039
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I78156624
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'\xe0>\xbc\x04\x80\xc9\xeb\x12\xa8\xc9\xeb\x12\xe0?\xbc\x04\x10\xcb\xeb\x12\x08m\xeb\x12\xf8\xc9\xeb\x12\xa0\x97\xeb\x12`\xcb\xeb\x12`?\xbc\x04\xa8\xc9\xeb\x12\xd0\x97\xeb\x12\x88\xcb\xeb\x12\xe8m\xeb\x12H\xca\xeb\x12\xf8\xc9\xeb\x12p\xca\xeb\x12`?\xbc\x04\xe0?\xbc\x04\x00\x98\xeb\x128\xcb\xeb\x12H\xca\xeb\x12\xd0\x97\xeb\x12\x08m\xeb\x12@m\xeb\x12\xf8\xc9\xeb\x12\x88\xcb\xeb\x120\x98\xeb\x12\xf8\xc9\xeb\x12`\x98\xeb\x12p\x97\xeb\x12\xc0?\xbc\x04`\xcb\xeb\x12xm\xeb\x12 \xca\xeb\x12@m\xeb\x12\xd0\x97\xeb\x12`\x98\xeb\x12 \xca\xeb\x12\xa0\x97\xeb\x12@m\xeb\x12\x80?\xbc\x04`\x98\xeb\x12\x00\x98\xeb\x12xm\xeb\x120\x98\xeb\x12 \xca\xeb\x12\x98\xca\xeb\x12\x00\x98\xeb\x12\xd0\x97\xeb\x12\xa0\x97\xeb\x128\xcb\xeb\x12\xa0?\xbc\x04 \x99\xeb\x128\xcb\xeb\x12\xc0?\xbc\x04\x98\xca\xeb\x12\xa0?\xbc\x04\x80\xc9\xeb\x12\x00\x98\xeb\x12\xd0\xc9\xeb\x12 n\xeb\x12\x98\xca\xeb\x12\xe0>\xbc\x04\xd0\xc9\xeb\x12p\xca\xeb\x12\x10\xcb\xeb\x12`?\xbc\x04\xe8\xca\xeb\x12H\xca\xeb\x120\x98\xeb\x12p\xca\xeb\x12\xc0\x98\xeb\x12\x10\xcb\xeb\x12@m\xeb\x12\x80\x99\xeb\x12\xa0?\xbc\x04p\x97\xeb\x12\xa0?\xbc\x04\x90\x98\xeb\x12\xa0\x97\xeb\x120\x98\xeb\x12 \xca\xeb\x12\x08m\xeb\x12 \x99\xeb\x12`?\xbc\x04`\x98\xeb\x12p\xca\xeb\x12\x98\xca\xeb\x12\xd0\xc9\xeb\x12H\xca\xeb\x12\xc0?\xbc\x04 \xca\xeb\x12p\xca\xeb\x12\x80\xc9\xeb\x120\x98\xeb\x12 \x99\xeb\x12\xc0?\xbc\x04\xd8\xcb\xeb\x12\xa8\xc9\xeb\x12\xe0>\xbc\x04\x00\x98\xeb\x12\xd0\x97\xeb\x12\xa8\xc9\xeb\x12p\xca\xeb\x12\x80?\xbc\x040\x98\xeb\x12Xn\xeb\x12\xd8\xcb\xeb\x12\xb0m\xeb\x12\xf0\x98\xeb\x12\xf8\xc9\xeb\x12\x80\xc9\xeb\x12\xc0\x98\xeb\x12@m\xeb\x12\xa8\xc9\xeb\x12\x80\xc9\xeb\x12@m\xeb\x12`?\xbc\x040\x98\xeb\x12\x98\xca\xeb\x12\x80?\xbc\x04`\xcb\xeb\x12Xn\xeb\x12\x98\xca\xeb\x12Xn\xeb\x12\xb0\xcb\xeb\x12@m\xeb\x12\xd0\xc9\xeb\x12@m\xeb\x12P\x99\xeb\x12\xa0?\xbc\x04\xe0?\xbc\x04\x10\xcb\xeb\x12`?\xbc\x04\x80\xc9\xeb\x12\x80?\xbc\x04\xc0?\xbc\x04 \x99\xeb\x12\x08m\xeb\x12\x10\xcb\xeb\x12\xb0m\xeb\x12\x08m\xeb\x12H\xca\xeb\x12\xa0\x97\xeb\x12\xd0\xc9\xeb\x12p\xca\xeb\x12\xa0\x97\xeb\x12\xa0?\xbc\x04`\x98\xeb\x12\xe8m\xeb\x12\xc0?\xbc\x04\xa8\xc9\xeb\x12H\xca\xeb\x12p\x97\xeb\x12`\x98\xeb\x12\xf8\xc9\xeb\x12\xa8\xc9\xeb\x12p\x97\xeb\x12\xa0\x97\xeb\x12\xa0?\xbc\x04p\xca\xeb\x12\xa0\x97\xeb\x120\x98\xeb\x12 \xca\xeb\x12\xe0>\xbc\x04`\x98\xeb\x12\xf8\xc9\xeb\x12\xd0\xc9\xeb\x12`\x98\xeb\x12p\xca\xeb\x12\xc0?\xbc\x04\x98\xca\xeb\x12 n\xeb\x12\xf8\xc9\xeb\x12\x80?\xbc\x04\xe8\xca\xeb\x12 \x99\xeb\x12p\x97\xeb\x12`?\xbc\x04\x98\xca\xeb\x12\xf8\xc9\xeb\x12\xb0m\xeb\x12H\xca\xeb\x12`\xcb\xeb\x12`?\xbc\x04\xd0\x97\xeb\x12\xe8m\xeb\x12\xe8\xca\xeb\x12\xe0>\xbc\x04H\xca\xeb\x12`\x98\xeb\x12\xd0\xc9\xeb\x12\xa8\xc9\xeb\x128\xcb\xeb\x12P\x99\xeb\x12\x80\xc9\xeb\x12\x08m\xeb\x12H\xca\xeb\x12\xb0m\xeb\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S'\xe0\xe1\xeb\x12@\xe1\xeb\x12\xc0\xe1\xeb\x12`\xe2\xeb\x12\xc0\xe2\xeb\x12\x80\xe2\xeb\x12\xe0\xd0\x06\x03\xc0\xd0\x06\x03`\xd0\x06\x03\x80\xe1\xeb\x12\x00\xe2\xeb\x12\x80\xe0\xeb\x12 \xe0\xeb\x12 \xe3\xeb\x12@\xe3\xeb\x12\xa0\xe3\xeb\x12\xc0\xe0\xeb\x12\xe0\xe3\xeb\x12\xc0\xe3\xeb\x12 \xe4\xeb\x12\x00\xe4\xeb\x12`\xe4\xeb\x12\x80\xe4\xeb\x12\xa0\xe4\xeb\x12@\xe2\xeb\x12\xa0\xe2\xeb\x12\xc0\xe4\xeb\x12\xe0\xe4\xeb\x12@\xe5\xeb\x12 \xe5\xeb\x12@\xe0\xeb\x12 \xe1\xeb\x12\x80\xe5\xeb\x12\xa0\xe5\xeb\x12\x00\xe6\xeb\x12\xe0\xe5\xeb\x12\xe0\xe2\xeb\x12`\xe6\xeb\x12@\xe6\xeb\x12@\xe4\xeb\x12\xc0\xe6\xeb\x12\xe0\xe6\xeb\x12`\xe3\xeb\x12\x80\xe3\xeb\x12@\xe7\xeb\x12`\xe7\xeb\x12\x00\xe1\xeb\x12`\xe1\xeb\x12\x80\xe7\xeb\x12\xe0\xe7\xeb\x12\xc0\xe7\xeb\x12 \xe8\xeb\x12\x00\xe8\xeb\x12\x00\xe3\xeb\x12\x80\xe8\xeb\x12\xa0\xe8\xeb\x12`\xe5\xeb\x12\xe0\xe8\xeb\x12\x00\xe9\xeb\x12 \xe9\xeb\x12\x00\xe7\xeb\x12`\xe9\xeb\x12@\xe9\xeb\x12\xa0\xe7\xeb\x12\x80\xe9\xeb\x12\xa0\xe9\xeb\x12\x00\xea\xeb\x12\xe0\xe0\xeb\x12\xc0\xe5\xeb\x12\xa0:\x08\x03`9\x08\x03\xa0;\x08\x03\xc09\x08\x03 ;\x08\x03`=\x08\x03@?\x08\x03`:\x08\x03\x009\x08\x03\x806\x08\x03\xa0?\x08\x03@8\x08\x03\x80;\x08\x03 4\x08\x03\xc0;\x08\x03\xe0?\x08\x03`?\x08\x03\x80?\x08\x03@;\x08\x03\xe04\x08\x03\x00:\x08\x03\xa0>\x08\x03\xe0;\x08\x03\x00=\x08\x03@=\x08\x03 ?\x08\x03\x005\x08\x03\xc05\x08\x03\x80>\x08\x03`6\x08\x03\xa04\x08\x03\xe0=\x08\x03\x805\x08\x03\xa0=\x08\x03\x80=\x08\x03\xe0:\x08\x03@3\x08\x03 :\x08\x03`4\x08\x03@6\x08\x03 9\x08\x03\xc0?\x08\x03\x80<\x08\x03\xc08\x08\x03\xa00\x08\x03\xa09\x08\x03\xe0<\x08\x03\x00>\x08\x03@:\x08\x03 6\x08\x03@5\x08\x03`;\x08\x03\xc03\x08\x03 =\x08\x03 3\x08\x03\x803\x08\x03@<\x08\x03\xa08\x08\x03\xc0:\x08\x03@m\x07\x03\xc0k\x07\x03\x80l\x07\x03\x00l\x07\x03\x80:\x08\x03`\xe2(\r\x80\xd0\xfa\x0c\xc0=\x08\x03\x00>\xbc\x04\x00b\x07\x03\x00m\x07\x03\x00k\x07\x03\xa0o\x07\x03\xc0l\x07\x03@l\x07\x03 o\x07\x03\x80n\x07\x03\x80k\x07\x03\x00o\x07\x03\xe0\xbf\xb9\x04@o\x07\x03 \xe2(\r@\xdb\xfb\x0c \xd5\xfb\x0c\xa0\xd4\xfb\x0c\x00\xd2\xfb\x0c\xc0\xd5\xfb\x0c\x00\xdb\xfb\x0c\xc0\xd9\xfb\x0c\xe0\xd5\xfb\x0c`8\x08\x03 #+\r\x00\'+\r`!+\r`*+\r\x00#+\r\x00)+\r\xc0"+\r\x80e\x07\x03@k\x07\x03\xe0\x7f\xfc\x0c`s\xfc\x0c\xe0t\xfc\x0c\x00|\xfc\x0c`q\xfc\x0c\xe0v\xfc\x0c\xa0q\xfc\x0c@\xd2\xfa\x0c`~\xfc\x0c\xa0{\xfc\x0c\xe0r\xfc\x0c\x00q\xfc\x0c\xe0q\xfc\x0c\xc0w\xfc\x0c\xc0t\xfc\x0c\x80t\xfc\x0c\x00r\xfc\x0c\xa0*+\r q\xfc\x0c\xe0\x02.\r\xe0\x06.\r`\x00.\r@\x00.\r\xc0\x03.\r\xe0\x00.\r\xc0\x00.\r\xa0\x00.\r\xc0\x04.\r`\t.\r \x0f.\r\x00\x07.\r\xc0r\xfc\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'\xf8\xd0\xac?\x08\xb8j?\x87\xf3n?\xb2GD?l\x12\x80?8\xf8n?\xc0\xa4j?F/b?\xbaY\x95?\xb2\xb5j?t\x9fY?\xcf\xf2\x8e?\xeb\xfbn?\xc2RD?:\x8c\x88?\xd6\x82H?\xffh\x16@`QD?fuf?Px&?\x1b\xf3\x9d?\x02\xe6]?\x93\xf4\xce?w%\xc2?\x0e?s?\x89g\x86?m\xd5L?\x80G\x84?\xda\x85\x88?\x02!Q?D(\x82?\xb6\x86\x88?\x1b\xf2\x8e?q\xc1;?\xc7\xfan?\xebl\xa6?\x7f\xa8Y?\xe0\xb0\xaa?\xfc\x857?F\x817?]\x04\x80?\xbb.b?h\xf5\x8e?\x95l\xa6?y\xce\xac?\x0f0b?\xfe\xf1L?|\x05\x80?\xda\xa2Y?\xdaPD?J\xb0\xaa?\xdf\x0e\xc0?\x8f[\xb5?\xbb\x16\x91?y\xb0\x8a?\xda\xd9L?\x0b\xcej?\xbd\x85w?[7\x93?\xcd%\x82?(\x06\x80?\xeb$@?\x82\x16Q?X\xea]?\x14\xf5\x8e?\x01*\xa2?\xd3."?\xdc2\xc2?\xc0J\x84?\x9e\xa5Y?\xf0aU?\xab\xf4\xae?\xe2\xec]?6\x06\x80?\xa5\xc1\xbb?\x82\xb7j?n\xe4\x9d?\xb3\xde;?\\\xd6L?\xfc\xd6\x9d?\x00\x04@?I\xd8L?\xe0\x05\x80?\xcb*\x02@\x19\r@?\xc1s&?\xc9rf?\xf3[\x95?)l\xa6?\x1fsf??\xb7j?d\xc8{?\xc9\x8c\xe8?B\x02\xaf?c\xf1\xae?f\xb0\x8a?\xa3\xe3\x9d?\xfd\x05\xc0?\xaa\x9cw?\xe7\x9a\x99?\x05QD?\x9f@s?#\x08\x80?\x7f\xe4\r@\x19*\x82?O\x8e\x88?\xe8\xaf\x8a?\x82k\xa6?)i\x95?\xbd6\x93?\x0e\xe4\x9d?\xb6\xfd\x9f?\xf8\x9c\x99?\xff\xad\x99?\xb4\xc1\xdb?\x04$\xe2?-\xe2\x9d?\xfb\xe3\xbd?\xb87\xc2?\xecx\x07@z\xe2\xbd?`\x15\xb1?\xd5\x16\xb1?`3\xa2?\x93J\xa4?\xbfZ\xb5?b\x12!@7\xca\xcc?\xae\xce\xbb?$\xae\xaa?\xe2(\x82? \x9c\xb9?\x96{\x97?yx\xc6?\xe5\xd2\xac?\x02\x8e\xc8?\x8e\xd2\xec?\x05:\x93?Rg\xb5?\x01J\xc4?A8\x93?tz\x97?\xd6\xac\n@_\xee\x9d?P\x14\xf1?L\xb0\xea?\x87\x8a8@\x89pw?\x88\xe0;?em\x86?7n\x86?p\x9c\t@S\xadj?\xd4C\x93?t\x0f\x91?\xaf5\x93?i\x1f\x82?\x0cw\x17@f\xce\x9b?\x06\x9f\xf9?\x10z\x97?P\xf2\xae?\x0fW%@\x06$\x91?\xfe\xc2\x9b?\r\xf5\xae?\xc1(\xc2?\xcbu\xb7?\x9a\x9c\xa8?\x92\x8d\xa8?jl\xa6?\xa6|\xd7?\x96[\xb5?C\x00\xcf?\x19\x86\xa8?\xa4\xbb\xbb?Ml\xc6?s8\xb3?\xdb\xcd\xbb?#~\xd7??\x02@@\xb8t\xb7?\xd4&\xa2?d\xaf\xca?\x1a\xe4\xbd?\xc0\x81\x97?\x1a\xb1j?!tf?\xee\x9c\x88?\x07m\x86?`\x18Q?\xe4\x0e@?\xf5\x9e\xd9?\x11\xad\xca?Cl\xa6?\xf0G\x84?\xde\x05\xa0?(:\x93?\xac3\xc2?\xc4\xb0\xca?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'\xf8\x16\x83\x04\xf8\x13\x83\x04\x10\x84\xa1\x04\x80\x80\xa1\x04\x98\x86\xa1\x04\xc0\x82\xa1\x04X\x81\xa1\x04`\x82\xa1\x04@\x81\xa1\x04\xf8\x86\xa1\x048\x89\xa1\x04\xe0\x89\xa1\x04P\x8f\xa1\x04p\x87\xa1\x040\x8e\xa1\x04\xa0\x81\xa1\x04x\x82\xa1\x04\xc0\x88\xa1\x04\xc8\x80\xa1\x04(\x81\xa1\x04\xa8\x8b\xa1\x04(\x84\xa1\x04\x00\x85\xa1\x04p\x8a\xa1\x04\xf0\x82\xa1\x04\x18\x8b\xa1\x04\xe0\x83\xa1\x04x\x88\xa1\x048\x8c\xa1\x04@\x84\xa1\x04\xf0\x88\xa1\x04\x18\x88\xa1\x04\xb0\x89\xa1\x04@\x8a\xa1\x04\xd0\x81\xa1\x04\x08\x89\xa1\x04`\x88\xa1\x04\xc0\x8b\xa1\x04H\x82\xa1\x04\xb0\x83\xa1\x04\xe0\x80\xa1\x04\xd0\x84\xa1\x04X\x87\xa1\x04\xb8\x8a\xa1\x04\xd0\x8a\xa1\x040\x82\xa1\x04\x00\x82\xa1\x04\x98\x80\xa1\x048\x86\xa1\x04\x10\x81\xa1\x048\x80\xa1\x04\x80\x83\xa1\x04\x08\x83\xa1\x04X\x84\xa1\x04\xb0\x8c\xa1\x04H\x88\xa1\x04\x88\x81\xa1\x04H\x8e\xa1\x04\x08\x8c\xa1\x04\xa8\x88\xa1\x04\x00\x88\xa1\x04\xa8\x82\xa1\x04\x10\x8d\xa1\x048\x83\xa1\x04X\x8a\xa1\x04P\x86\xa1\x04\xe8\x87\xa1\x04\xe0\x86\xa1\x04 \x89\xa1\x04 \x8c\xa1\x04\xa0\x8d\xa1\x04\xc8\x8c\xa1\x04\xd0\x87\xa1\x04@\x8d\xa1\x04P\x80\xa1\x04\x80\x8f\xa1\x04`\x8e\xa1\x04\x98\x8c\xa1\x04\x80\x86\xa1\x04\x90\x8e\xa1\x04\x80\x89\xa1\x04\xc0\x85\xa1\x04(\x8d\xa1\x04\xb8\x8d\xa1\x04\x88\x84\xa1\x04(\x87\xa1\x04P\x8c\xa1\x04\x88\x87\xa1\x04\x98\x89\xa1\x04\xd8\x88\xa1\x04\xc8\x8f\xa1\x04x\x8b\xa1\x04x\x85\xa1\x04\x10\x8a\xa1\x040\x8b\xa1\x04\x10\x87\xa1\x04x\x8e\xa1\x04h\x8c\xa1\x04\xd8\x8e\xa1\x04\xa0\x8a\xa1\x048\x8f\xa1\x04\xb8\x81\xa1\x04\x00\x8b\xa1\x04\xc0\x8e\xa1\x04\xb0\x86\xa1\x04p\x8d\xa1\x04X\x8d\xa1\x04\x80\x8c\xa1\x04\xd8\x82\xa1\x040\x88\xa1\x04`\x85\xa1\x04\xe0\x8c\xa1\x04\x90\x88\xa1\x04h\x86\xa1\x04\x88\x8d\xa1\x04(\x8a\xa1\x04\x18\x82\xa1\x04\x00\x8e\xa1\x04\xe8\x8a\xa1\x04 \x8f\xa1\x04\xd8\x8b\xa1\x04h\x8f\xa1\x04@\x87\xa1\x04\xc8\x86\xa1\x04\x98\x8f\xa1\x04`\x8b\xa1\x04H\x8b\xa1\x04\xd0\x8d\xa1\x04\xf8\x83\xa1\x04h\x80\xa1\x04\xa8\x8e\xa1\x04\xf0\x8e\xa1\x04\xf8\x80\xa1\x04\xc8\x89\xa1\x04\x18\x85\xa1\x04\x08\x8f\xa1\x04\xe8\x81\xa1\x04\xe8\x8d\xa1\x04\xa0\x87\xa1\x04\x18\x8e\xa1\x04\xe0\x8f\xa1\x04\xf8\x8c\xa1\x04\x88\x8a\xa1\x04\x90\x8b\xa1\x04\xf8\x89\xa1\x04h\x89\xa1\x04P\x89\xa1\x04 \x8f\xdd\x04(\x1a\xdf\x04\xa8\x18\xdf\x04\xd8\x1b\xdf\x04`\x18\xdf\x04\x10\x11\xdf\x04\xb0\x13\xdf\x04X\x1a\xdf\x04h\x1f\xdf\x04h\x1c\xdf\x04P\x1c\xdf\x04\xe0\x1f\xdf\x04\xd8\x18\xdf\x04\x10\x1d\xdf\x048\x13\xdf\x04\xf0\x15\xdf\x04\x80\x10\xdf\x04P\x13\xdf\x04\xb0\x1f\xdf\x04\xa8\x1b\xdf\x04\x98\x19\xdf\x04\xe8\x14\xdf\x04 \x10\xdf\x04\xe0\x16\xdf\x04\xa0\x11\xdf\x04(\x17\xdf\x04\x08\x13\xdf\x04\x18\x1b\xdf\x04\xe0\x10\xdf\x04H\x15\xdf\x04\xc0\x18\xdf\x04\xc0\x1b\xdf\x04P\x1f\xdf\x04\x10\x17\xdf\x04\xc8\x10\xdf\x04\xc0\x1e\xdf\x04 \x1c\xdf\x04\xe8\x11\xdf\x04x\x18\xdf\x04\xe8\x17\xdf\x04x\x1e\xdf\x04\xa0\x1a\xdf\x04\xb8\x1d\xdf\x04\xc8\x1f\xdf\x04\x80\x16\xdf\x048\x1f\xdf\x04\xd8\x1e\xdf\x04p\x1d\xdf\x04\xa8\x1e\xdf\x04\xb8\x1a\xdf\x04X\x14\xdf\x04\x00\x1b\xdf\x04\x98\x13\xdf\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3697
sg3632
g3687
sg3646
g3691
sg3641
g3695
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3782
sg3632
g3772
sg3646
g3776
sg3641
g3780
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3859
sg3632
g3849
sg3646
g3853
sg3641
g3857
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3870
sg3632
g3866
sg3646
g3877
sg3641
g3874
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3742
sg3632
g3883
sg3646
g3749
sg3641
g3890
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3793
sg3632
g3915
sg3646
g3800
sg3641
g3922
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3697
sg3632
g3930
sg3646
g3691
sg3641
g3937
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3949
sg3632
g3945
sg3646
g3956
sg3641
g3953
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3870
sg3632
g3866
sg3646
g3877
sg3641
g3874
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3823
sg3632
g3988
sg3646
g3830
sg3641
g3995
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g3725
sg3632
g4003
sg3646
g3732
sg3641
g4010
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g4022
sg3632
g4018
sg3646
g4029
sg3641
g4026
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g3742
sg3632
g3883
sg3646
g3749
sg3641
g3890
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g3793
sg3632
g3915
sg3646
g3800
sg3641
g3922
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g4065
sg3632
g4061
sg3646
g4072
sg3641
g4069
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g4095
sg3632
g4091
sg3646
g4102
sg3641
g4099
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g4125
sg3632
g4121
sg3646
g4132
sg3641
g4129
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g3782
sg3632
g4138
sg3646
g3776
sg3641
g4145
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g3674
sg3632
g4153
sg3646
g3681
sg3641
g4160
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3782
sg3632
g4138
sg3646
g3776
sg3641
g4145
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g4022
sg3632
g4018
sg3646
g4029
sg3641
g4026
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g3823
sg3632
g3988
sg3646
g3830
sg3641
g3995
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g4095
sg3632
g4091
sg3646
g4102
sg3641
g4099
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g3782
sg3632
g4138
sg3646
g3776
sg3641
g4145
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g3759
sg3632
g4233
sg3646
g3766
sg3641
g4240
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g4022
sg3632
g4248
sg3646
g4029
sg3641
g4255
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g3637
sg3632
g4263
sg3646
g3647
sg3641
g4270
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g4095
sg3632
g4278
sg3646
g4102
sg3641
g4285
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g3949
sg3632
g4293
sg3646
g3956
sg3641
g4300
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g3674
sg3632
g4153
sg3646
g3681
sg3641
g4160
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g4065
sg3632
g4321
sg3646
g4072
sg3641
g4328
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g3782
sg3632
g4138
sg3646
g3776
sg3641
g4145
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g4353
sg3632
g4349
sg3646
g4360
sg3641
g4357
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g3949
sg3632
g4293
sg3646
g3956
sg3641
g4300
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g3759
sg3632
g4233
sg3646
g3766
sg3641
g4240
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g3725
sg3632
g4003
sg3646
g3732
sg3641
g4010
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g3859
sg3632
g4418
sg3646
g3853
sg3641
g4425
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g3949
sg3632
g4293
sg3646
g3956
sg3641
g4300
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g4125
sg3632
g4459
sg3646
g4132
sg3641
g4466
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g4353
sg3632
g4474
sg3646
g4360
sg3641
g4481
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g3859
sg3632
g3849
sg3646
g3853
sg3641
g3857
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g3657
sg3632
g4502
sg3646
g3664
sg3641
g4509
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g3949
sg3632
g3945
sg3646
g3956
sg3641
g3953
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g3697
sg3632
g3930
sg3646
g3691
sg3641
g3937
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g4022
sg3632
g4018
sg3646
g4029
sg3641
g4026
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g4353
sg3632
g4349
sg3646
g4360
sg3641
g4357
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g3637
sg3632
g4263
sg3646
g3647
sg3641
g4270
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g3697
sg3632
g3687
sg3646
g3691
sg3641
g3695
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g3714
sg3632
g4608
sg3646
g3708
sg3641
g4615
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g3793
sg3632
g3915
sg3646
g3800
sg3641
g3922
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g3657
sg3632
g4502
sg3646
g3664
sg3641
g4509
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g3870
sg3632
g3866
sg3646
g3877
sg3641
g3874
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g4065
sg3632
g4321
sg3646
g4072
sg3641
g4328
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g3902
sg3632
g4675
sg3646
g3909
sg3641
g4682
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g4022
sg3632
g4018
sg3646
g4029
sg3641
g4026
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g4095
sg3632
g4091
sg3646
g4102
sg3641
g4099
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g3859
sg3632
g4418
sg3646
g3853
sg3641
g4425
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g3714
sg3632
g4608
sg3646
g3708
sg3641
g4615
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g3859
sg3632
g3849
sg3646
g3853
sg3641
g3857
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g3759
sg3632
g4233
sg3646
g3766
sg3641
g4240
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g4065
sg3632
g4321
sg3646
g4072
sg3641
g4328
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g3782
sg3632
g3772
sg3646
g3776
sg3641
g3780
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g3725
sg3632
g4003
sg3646
g3732
sg3641
g4010
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g3949
sg3632
g3945
sg3646
g3956
sg3641
g3953
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g3793
sg3632
g3915
sg3646
g3800
sg3641
g3922
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g4095
sg3632
g4091
sg3646
g4102
sg3641
g4099
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g3902
sg3632
g4675
sg3646
g3909
sg3641
g4682
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g4353
sg3632
g4474
sg3646
g4360
sg3641
g4481
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g3697
sg3632
g3930
sg3646
g3691
sg3641
g3937
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g3870
sg3632
g4924
sg3646
g3877
sg3641
g4931
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g4125
sg3632
g4459
sg3646
g4132
sg3641
g4466
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g3782
sg3632
g3772
sg3646
g3776
sg3641
g3780
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g3902
sg3632
g4675
sg3646
g3909
sg3641
g4682
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g4065
sg3632
g4061
sg3646
g4072
sg3641
g4069
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g3949
sg3632
g3945
sg3646
g3956
sg3641
g3953
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g4125
sg3632
g4459
sg3646
g4132
sg3641
g4466
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g4353
sg3632
g4474
sg3646
g4360
sg3641
g4481
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g3674
sg3632
g4153
sg3646
g3681
sg3641
g4160
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g3637
sg3632
g4263
sg3646
g3647
sg3641
g4270
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g3949
sg3632
g4293
sg3646
g3956
sg3641
g4300
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g3674
sg3632
g4153
sg3646
g3681
sg3641
g4160
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g4065
sg3632
g4061
sg3646
g4072
sg3641
g4069
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g4125
sg3632
g4121
sg3646
g4132
sg3641
g4129
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g4353
sg3632
g4474
sg3646
g4360
sg3641
g4481
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g3870
sg3632
g4924
sg3646
g3877
sg3641
g4931
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g3657
sg3632
g4502
sg3646
g3664
sg3641
g4509
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g3759
sg3632
g4233
sg3646
g3766
sg3641
g4240
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g4022
sg3632
g4248
sg3646
g4029
sg3641
g4255
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g4022
sg3632
g4248
sg3646
g4029
sg3641
g4255
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g4065
sg3632
g4061
sg3646
g4072
sg3641
g4069
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g4353
sg3632
g4474
sg3646
g4360
sg3641
g4481
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g3637
sg3632
g4263
sg3646
g3647
sg3641
g4270
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g3782
sg3632
g3772
sg3646
g3776
sg3641
g3780
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g4125
sg3632
g4121
sg3646
g4132
sg3641
g4129
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g4353
sg3632
g4349
sg3646
g4360
sg3641
g4357
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g4125
sg3632
g4121
sg3646
g4132
sg3641
g4129
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g3902
sg3632
g4675
sg3646
g3909
sg3641
g4682
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g4022
sg3632
g4018
sg3646
g4029
sg3641
g4026
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g3697
sg3632
g3687
sg3646
g3691
sg3641
g3695
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g4022
sg3632
g4248
sg3646
g4029
sg3641
g4255
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g4065
sg3632
g4321
sg3646
g4072
sg3641
g4328
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g3859
sg3632
g4418
sg3646
g3853
sg3641
g4425
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g3697
sg3632
g3930
sg3646
g3691
sg3641
g3937
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g3714
sg3632
g4608
sg3646
g3708
sg3641
g4615
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g3657
sg3632
g4502
sg3646
g3664
sg3641
g4509
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g3637
sg3632
g4263
sg3646
g3647
sg3641
g4270
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g4125
sg3632
g4459
sg3646
g4132
sg3641
g4466
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g3949
sg3632
g4293
sg3646
g3956
sg3641
g4300
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g3725
sg3632
g4003
sg3646
g3732
sg3641
g4010
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g3714
sg3632
g4608
sg3646
g3708
sg3641
g4615
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g3870
sg3632
g4924
sg3646
g3877
sg3641
g4931
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g3759
sg3632
g4233
sg3646
g3766
sg3641
g4240
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g3697
sg3632
g3930
sg3646
g3691
sg3641
g3937
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g3859
sg3632
g3849
sg3646
g3853
sg3641
g3857
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g4095
sg3632
g4278
sg3646
g4102
sg3641
g4285
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g3859
sg3632
g3849
sg3646
g3853
sg3641
g3857
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g4125
sg3632
g4459
sg3646
g4132
sg3641
g4466
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g3870
sg3632
g3866
sg3646
g3877
sg3641
g3874
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g4095
sg3632
g4278
sg3646
g4102
sg3641
g4285
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g3742
sg3632
g3883
sg3646
g3749
sg3641
g3890
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g3714
sg3632
g4608
sg3646
g3708
sg3641
g4615
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g3859
sg3632
g4418
sg3646
g3853
sg3641
g4425
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g3902
sg3632
g4675
sg3646
g3909
sg3641
g4682
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g4065
sg3632
g4321
sg3646
g4072
sg3641
g4328
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g3782
sg3632
g4138
sg3646
g3776
sg3641
g4145
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g4095
sg3632
g4278
sg3646
g4102
sg3641
g4285
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g3742
sg3632
g3883
sg3646
g3749
sg3641
g3890
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g3697
sg3632
g3687
sg3646
g3691
sg3641
g3695
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g4095
sg3632
g4278
sg3646
g4102
sg3641
g4285
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g4125
sg3632
g4121
sg3646
g4132
sg3641
g4129
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g4353
sg3632
g4349
sg3646
g4360
sg3641
g4357
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g4022
sg3632
g4248
sg3646
g4029
sg3641
g4255
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g3949
sg3632
g3945
sg3646
g3956
sg3641
g3953
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g4353
sg3632
g4349
sg3646
g4360
sg3641
g4357
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g3742
sg3632
g3883
sg3646
g3749
sg3641
g3890
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g3823
sg3632
g3988
sg3646
g3830
sg3641
g3995
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g3870
sg3632
g3866
sg3646
g3877
sg3641
g3874
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g3782
sg3632
g3772
sg3646
g3776
sg3641
g3780
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g3793
sg3632
g3915
sg3646
g3800
sg3641
g3922
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g3823
sg3632
g3988
sg3646
g3830
sg3641
g3995
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g3859
sg3632
g4418
sg3646
g3853
sg3641
g4425
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g3870
sg3632
g4924
sg3646
g3877
sg3641
g4931
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g4095
sg3632
g4091
sg3646
g4102
sg3641
g4099
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g3697
sg3632
g3687
sg3646
g3691
sg3641
g3695
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g3674
sg3632
g4153
sg3646
g3681
sg3641
g4160
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g4065
sg3632
g4061
sg3646
g4072
sg3641
g4069
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g3657
sg3632
g4502
sg3646
g3664
sg3641
g4509
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g3725
sg3632
g4003
sg3646
g3732
sg3641
g4010
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g3870
sg3632
g4924
sg3646
g3877
sg3641
g4931
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g3823
sg3632
g3988
sg3646
g3830
sg3641
g3995
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I78156624
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S'\xb0!,\x13h\x13,\x13\xb0!,\x13@\x1d+\x13P\x1c+\x13 \x1c+\x13\xd8!,\x13\x00",\x13p\x1d+\x13\x80\x1c+\x13\xa0\x13,\x13(",\x13P",\x13h\x13,\x13\xb0\x1c+\x13p\x1d+\x13x",\x13@#,\x13(",\x13\xa0\x13,\x13\xe0\x1c+\x13\xe0#,\x13\xe0\x1c+\x13\x00\x1e+\x13\xb0!,\x13 \x1c+\x13\x10\x1d+\x13 \x1c+\x13h\x13,\x13p\x1d+\x13\xa0",\x13\xb0!,\x13`|\x06\x03\xb8#,\x13\xc8",\x13\x80\x14,\x13\xa0\x13,\x13\xc8",\x13\xe0\x1c+\x13\xb0\x1c+\x13\xa0\x13,\x13\xa0}\x06\x03\xc8",\x13h\x13,\x13 v\x06\x03@\x1d+\x13\xa0}\x06\x03\xa0",\x13\xb0\x1c+\x13\xe0\x1c+\x13\xd8!,\x13h#,\x13\x00\x1e+\x13\x80\x1c+\x13\x08$,\x13 v\x06\x03\xb0!,\x13P",\x13x",\x13\xa0\x1d+\x13x",\x13\x80}\x06\x03P\x1c+\x13\xd0\x1d+\x13\x00",\x13\x80}\x06\x03h\x13,\x13\xe0\x1c+\x13`|\x06\x03\xb0\x1c+\x13P",\x13\xd8!,\x13\xa0",\x13\xa0}\x06\x03x",\x13\x00",\x13(",\x13\x00",\x13h#,\x13\xd8!,\x13\x80\x1c+\x13\xb0\x1c+\x13h\x13,\x13\x80\x1c+\x13\xb0\x1c+\x13\xe0\x1c+\x13\xc8",\x13p\x1d+\x13\xa0}\x06\x03\xa0v\x06\x03 \x1c+\x13(",\x13P",\x13\xd8\x13,\x13\x10\x1d+\x13 v\x06\x03\xa0\x13,\x130\x1e+\x13\xa0}\x06\x03p\x1d+\x13\xd8!,\x13\x10\x1d+\x13(",\x13\x80\x1c+\x13(",\x13h\x13,\x13 \x1c+\x13\xa0v\x06\x03\xa0\x13,\x13\xa0",\x13\x00\x1e+\x13\x00",\x13\x10\x1d+\x13 v\x06\x03\xb0!,\x13\x80\x1c+\x13p\x1d+\x13\x90#,\x13\xa0}\x06\x03\x80\x14,\x13h#,\x13\xa0v\x06\x03\x80}\x06\x03\xa0}\x06\x03\x10\x14,\x13\xd8!,\x13\xe0#,\x13\xa0}\x06\x03P",\x13h\x13,\x13\xb8#,\x13\x00\x1e+\x13\xa0",\x13\x00|\x06\x03@\x1d+\x13\xd8!,\x13\xe0#,\x13 \x1c+\x13 v\x06\x03\x80}\x06\x03\x08$,\x13\x00",\x13\xc8",\x13 v\x06\x03\x90#,\x13\xd0\x1d+\x13p\x1d+\x13\x10\x1d+\x13\xe0\x1c+\x13\x80\x1c+\x13(",\x13P",\x13\xa0v\x06\x03\x90#,\x13\xa0\x13,\x13x",\x13\xb0!,\x13\xa0v\x06\x03`|\x06\x03h\x13,\x13\x80}\x06\x03\xb0\x1c+\x13\xa0v\x06\x03\x80}\x06\x03\xc8",\x13\x10\x14,\x13\x10\x1d+\x13\xb0!,\x13\x00",\x13x",\x13\xa0",\x13 \x1c+\x13\xd8\x13,\x13\xa0}\x06\x03\x10\x1d+\x13\xc8",\x13\xa0",\x13\xd8!,\x13\x10\x1d+\x13\xe0\x1c+\x13\x00",\x13\x10\x1d+\x13\x00",\x13\xc8",\x13\xa0\x13,\x13\xb0\x1c+\x13H\x14,\x13\x80}\x06\x03P\x1c+\x13\xd8!,\x13\x90#,\x13\xa0v\x06\x03`|\x06\x03\xa0",\x13\xa0}\x06\x03\xb0!,\x13\x80\x1c+\x13\x18#,\x13\xa0",\x13\x80}\x06\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x80\xfb,\x13\xa0\xfa,\x13 \xfc,\x13\xe0\xf9,\x13`\xfa,\x13\xc0\xfa,\x13\xc0\xfc,\x13\xe0\xfc,\x13@\xfb,\x13\x00\xfc,\x13@\xfd,\x13`\xfd,\x13\xa0\xfb,\x13 \xfd,\x13\xc0\xfd,\x13\xe0\xfd,\x13\x80\xfd,\x13 \xfb,\x13\x80\xfc,\x13\x80\xfa,\x13@\xfc,\x13@\xfa,\x13@\xfe,\x13`\xfb,\x13\xe0\xfa,\x13\x00\xfa,\x13 \xfa,\x13\xa0\xfc,\x13 \xff,\x13`\xfe,\x13\x80\xff,\x13\x00\xfe,\x13\xa0\xfe,\x13\x00\xfb,\x13`\xfc,\x13\xe0\xff,\x13\x80\xfe,\x13\xe0\xfe,\x13\xc0\xfb,\x13@\xff,\x13\x00\xfd,\x13\xc0\xfe,\x13\xa0\xff,\x13`\xff,\x13\xe0\xfb,\x13 \xfe,\x13\xc0\xff,\x13\xa0\x06.\r@PA\x13\xe0QA\x13@QA\x13\xc0RA\x13`RA\x13\xa0RA\x13\x80RA\x13 QA\x13\xe0RA\x13@SA\x13\x00QA\x13\x80SA\x13\x80PA\x13\xc0SA\x13\xa0SA\x13\x00TA\x13\xe0SA\x13\xc0QA\x13 TA\x13@TA\x13`TA\x13\x80TA\x13\xe0TA\x13\xc0TA\x13 UA\x13@UA\x13\xa0QA\x13\x80UA\x13`UA\x13\xc0UA\x13\xa0UA\x13\xe0PA\x13\xe0UA\x13@VA\x13 VA\x13\xc0PA\x13`VA\x13\xc0VA\x13\xa0VA\x13\x00UA\x13 WA\x13\x00WA\x13\x80QA\x13\x80WA\x13`WA\x13`PA\x13\xa0WA\x13\xc0WA\x13\xe0WA\x13\x00XA\x13 XA\x13@XA\x13\xa0XA\x13\x80XA\x13\x80VA\x13\x00YA\x13 YA\x13\xa0TA\x13`YA\x13@YA\x13`QA\x13\x80YA\x13\xa0YA\x13\x00ZA\x13\xe0YA\x13`SA\x13 ZA\x13\x80ZA\x13`ZA\x13\xc0ZA\x13\xa0ZA\x13@WA\x13\xe0ZA\x13@[A\x13 [A\x13\x80[A\x13`[A\x13\xc0[A\x13\xa0[A\x13\xc0YA\x13\xe0[A\x13@\\A\x13`\\A\x13 PA\x13\xa0\\A\x13\x80\\A\x13\xe0VA\x13\x00]A\x13 ]A\x13\x00VA\x13`]A\x13@]A\x13\xa0]A\x13\x80]A\x13`XA\x13\xc0]A\x13@ +\r\x00RA\x13\xe0\\A\x13\x80^A\x13\xa0^A\x13@RA\x13 ^A\x13\xe0^A\x13\x00_A\x13 _A\x13`_A\x13\x80_A\x13 \\A\x13@ZA\x13\xe0_A\x13 SA\x13\x00^A\x13\x00\\A\x13\xe0]A\x13\x00[A\x13 RA\x13\xa0_A\x13`^A\x13\xc0^A\x13\xc0_A\x13\x00SA\x13\xa0PA\x13\x00\xff,\x13@_A\x13\xc0XA\x13\x00\xe6(\r \x00p\x13\xe0\x01p\x13`\x02p\x13\xc0\x02p\x13\xe0\x00p\x13\xa0\x00p\x13\x80\x02p\x13\xa0\x02p\x13\xe0\x02p\x13\x00\x03p\x13`\x03p\x13\x80\x03p\x13`\x00p\x13\xc0\x03p\x13\xe0\x03p\x13`\x01p\x13\x00\x01p\x13\x00\x04p\x13 \x04p\x13\x80\x04p\x13`\x04p\x13@\x01p\x13\xa0\x04p\x13\xc0\x04p\x13 \x05p\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S'\xe5\xcf\xec?\x1a:\x93?\xfe\x16\x91?\x03We@\x9aM\x04@\x82*b?\x12+b?\xbd\xc4L?)\xe1\xdd?\xd77Q?t\xd2\xac?G\xeb]?\x98\x95H?\xcb\xe1\x9d?\xc3\xd1*?J\xe3\xdd?L\x02\x00@J\x17\x91?\xbe\xf0\xce?c\x06^?\x9cJ\x84?\xca\x80w?\xa4\x80w?\xa3\xd8L?\xdd\xc3+@\xef\xb0\xaa?\xb4\xa0Y?_\xe9]?\xbf\xe3\x9d?>3\xe2?\x05\xff\xbf?\xa9\xd0\x8c?)\xc2\xbb?\x0cm\x86?\xfd\xb1\x8a?\xce\x8d\xa8?\xe4\xc1\x9b?K\x9f\x99?\xff\xaf\xaa?\x7fo\xa6?N\x05\xa0?\xed\x8d\xa8?\x90\xe1\xbd?i9\xb3?rw\xa6?R\xf3\x8e?\x8d\x17\xb1?\xd7y\x97?\xb1\x8e\xa8?\xb5\x99\x88?\xef\x00\xa0?\x99\x8e\x88?U}\x97?#\x06\xa0?\xb4\x9b\xa8?e\xf3\x8e?\xa0$\x82?#\x91\x88?hHD?k\t\x80?\x01.b?\x9f@3?\x1d\xd8L?a!Q?7\xc3\xdb?P\xb8*?\x14}\xf7?\x8b\xdeL?q\x18\x91?\x87Cb?=\xb6j?u\xc7{?\xfb\x8eH?mbU?\x83\xce\x8c?\xf7\xdbL?<\xa4Y?3MU?\xda\x10@?7\x04\x80?\xb7\t@?\xf3\xcf*?\x84\x9f\x99?0\xe5]?\xd5\x17Q?\x98\xd3L?F\xf5\xee?UbU??eU?\x11/b?\xd5\xe4]?\xb0\x06@?~\x8af?\'\r@?2\x1dQ?)\xfa.?N\xd4L?\xe7>3?h\xd3j?I\xcf\x0c@AJ\x84?o\xf5\x8e?\xa7\xcf\x8c?MG"?\xda\x837?y\xea]?6\xea\x1d?\x93\xb6j?f(\x82?\xeeJD?\xcfH\x84?\x8c\xf6\x7f?/G\xa4?\xaa\x16\x91?\xa8\xb9\xaa?\'\xf4\x8e?\xb1rf?\xf4\xc2\xbb?r}\xb7?\xcf#\x91?\xde8\xb3?\x82\xa2\xd9?\x1d\xbf\xbb?\x0e\x95H?[^\x05@\xb5]\x95?\x9d}\x97?.\x15\x91?\x1d6\x03@\xa8\x16\xf1?\x02\x05\xc0?\xed\x8c\xe8?;\xf1\x8e?\xfc\x13\x91?\xa5\xe3\x9d?\x17\xd0\x8c?\xe9|\x97?\xda\x8b\x88?H\xe4\x9d?{)\xc2?&\xb1\x8a?\xd2\xca\x8c?\x0e8\x93?m|\x97?\x1e\xed\x8e?\xcd\xd2\xac?8\xbe\x9b?P)\x82?\x0e\x1eQ?\x97\xab\xaa?4[\xd5?3\x17\x91?\xf9\xfbn?\xe4\xbe\x9b?\x08Fb?i\x1eQ?\xc3?3?\x85\xf2\x8e?\x14\xa1Y?\x9cl\xc6?\x02>3?\x1b\x10@?I\xec]?\x9bs&?\x88sf?\xb1hD?[9s?I\x0b@?\xcb<3?r\x7f7?%\xf4.?l\x83w?\xda\xd9L?\x0b\r@?]\x1dQ?\x05\x1aQ?\xb1\xe3]?\xd6\xf0L?6@3?\x83\x1dQ?l\xc8L?\xb6k\x86?< b?\x11g\x95?k\x06\x80?\xe0\xe9]?\xbe\x9cY?\x87@3?\x93\'\x82?\xdf\x9b\xc8?\xa8\xf4\x8e?\xe1\x8f\x88?\xf98\xb3?\x11\xad\x8a?ee\x95?\x19\x9f\x99?\xf9\xc1\x9b?&\x8e\xa8?\x93F\xa4?V\xad\x99?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S'\xc0\x8e\xdd\x04\xf0\x88\xdd\x04\xd0w\x94\x04\x18{\x94\x04\x98p\x94\x048|\x94\x04\x00{\x94\x04\xa8u\x94\x04Py\x94\x04\x80p\x94\x04\xd0q\x94\x048v\x94\x04\xe0v\x94\x04\xa0t\x94\x04\xf8y\x94\x04Hr\x94\x04\xc0x\x94\x04\xf0~\x94\x04\xf0u\x94\x04\xf0x\x94\x04@z\x94\x04P|\x94\x04\x80v\x94\x04\xa8{\x94\x048\x7f\x94\x04\x18u\x94\x04\x98v\x94\x04\xc8\x7f\x94\x04\xc0r\x94\x04(q\x94\x04\xb0p\x94\x04Pp\x94\x04\xc8|\x94\x04\xd0}\x94\x04\xc8v\x94\x040x\x94\x04@}\x94\x040u\x94\x04H{\x94\x04\x90~\x94\x04\xa0q\x94\x04\xe8z\x94\x040{\x94\x04h\x7f\x94\x04\xb0s\x94\x04 p\x94\x04\xa0}\x94\x04(w\x94\x04\x18r\x94\x04\x88}\x94\x04\xa0w\x94\x04Xz\x94\x04\xb0|\x94\x04X}\x94\x04\x10q\x94\x04\xc8s\x94\x04\x90r\x94\x04\x18~\x94\x04\xd0t\x94\x04 \x7f\x94\x04hs\x94\x040~\x94\x04(}\x94\x04\x88t\x94\x04\x80y\x94\x04h|\x94\x04\x00~\x94\x04hv\x94\x04`~\x94\x04\xe0s\x94\x04(z\x94\x04H~\x94\x04\x90{\x94\x04\xc0{\x94\x040r\x94\x04\x98\x7f\x94\x04\xd8x\x94\x04 |\x94\x04\xc0~\x94\x04\xb8t\x94\x04x{\x94\x04\xc8y\x94\x04\xf8|\x94\x048s\x94\x04\x08\x7f\x94\x04\xd8r\x94\x04pz\x94\x04\xb0\x7f\x94\x04Hu\x94\x04\xe0\x7f\x94\x04\xe8}\x94\x04\xd8{\x94\x04\xb8z\x94\x04\x08v\x94\x04\xa0z\x94\x04\x90x\x94\x04\xb8}\x94\x04\x98s\x94\x04@q\x94\x04pt\x94\x04\xa8~\x94\x04\xc8\x1c\x83\x04\x18\x18\x83\x04\xa8\x15\x83\x04\x80\x1c\x83\x04\x90\x1e\x83\x04\x98\x19\x83\x04p\x1d\x83\x04X\x1a\x83\x040\x1b\x83\x04\xe0\x13\x83\x04\x98\x16\x83\x04h\x10\x83\x04\x80\x19\x83\x048\x1f\x83\x04\x10\x1d\x83\x04 \x13\x83\x04\xc8\x19\x83\x04 \x1c\x83\x04H\x1b\x83\x04\xe0\x1f\x83\x04`\x1e\x83\x04\xd8\x18\x83\x04\x98\x1c\x83\x04 \x1f\x83\x04P\x1f\x83\x04\xa8\x1e\x83\x04\x18\x1b\x83\x04\xf0\x1e\x83\x04\xc8\x1f\x83\x04\xd0\x1d\x83\x04\x18\x12\x83\x04H\x15\x83\x048\x1c\x83\x04p\x1a\x83\x04\x08\x19\x83\x04@\x1d\x83\x04\xd8\x12\x83\x04 \x10\x83\x04\x08\x1c\x83\x04\xb0\x13\x83\x04h\x1c\x83\x04\x08s\x94\x04Xt\x94\x04\x88z\x94\x04`{\x94\x04\x08y\x94\x04\xa8r\x94\x04\xe0|\x94\x04\x10z\x94\x04\xf0{\x94\x04\xd0z\x94\x04\x10}\x94\x04\xf8s\x94\x04\xe8q\x94\x04\xf0r\x94\x04\x88q\x94\x04\xe0p\x94\x04\xe0y\x94\x04`x\x94\x04pq\x94\x04\xb0v\x94\x04Xq\x94\x04hy\x94\x04\xe8w\x94\x04\x90u\x94\x04\x18x\x94\x04\xf8p\x94\x04 y\x94\x04\x00x\x94\x04\x80\x7f\x94\x04\xd8~\x94\x04\x00r\x94\x04\xc8p\x94\x04 v\x94\x048p\x94\x04(t\x94\x04\xc0u\x94\x04hp\x94\x04\x00u\x94\x04xu\x94\x04\x08|\x94\x048y\x94\x04\xf8v\x94\x04\x80s\x94\x04p}\x94\x04@w\x94\x04xr\x94\x04`u\x94\x04\x98y\x94\x04\xb0y\x94\x04\xb8q\x94\x04Ps\x94\x04`r\x94\x04 s\x94\x04\xe8t\x94\x04xx\x94\x04\x10w\x94\x04x~\x94\x04\x98|\x94\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6375
sg6370
g6408
sg6384
g6385
sg6379
g6415
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6433
sg6370
g6423
sg6384
g6427
sg6379
g6431
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6444
sg6370
g6440
sg6384
g6451
sg6379
g6448
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6433
sg6370
g6457
sg6384
g6427
sg6379
g6464
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6444
sg6370
g6506
sg6384
g6451
sg6379
g6513
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6559
sg6370
g6555
sg6384
g6566
sg6379
g6563
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6576
sg6370
g6572
sg6384
g6583
sg6379
g6580
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6606
sg6370
g6602
sg6384
g6613
sg6379
g6610
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6444
sg6370
g6440
sg6384
g6451
sg6379
g6448
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6636
sg6370
g6632
sg6384
g6643
sg6379
g6640
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6476
sg6370
g6649
sg6384
g6483
sg6379
g6656
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6559
sg6370
g6664
sg6384
g6566
sg6379
g6671
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6542
sg6370
g6679
sg6384
g6549
sg6379
g6686
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6698
sg6370
g6694
sg6384
g6705
sg6379
g6702
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6721
sg6370
g6711
sg6384
g6715
sg6379
g6719
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6698
sg6370
g6728
sg6384
g6705
sg6379
g6735
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6636
sg6370
g6743
sg6384
g6643
sg6379
g6750
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6375
sg6370
g6408
sg6384
g6385
sg6379
g6415
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6433
sg6370
g6423
sg6384
g6427
sg6379
g6431
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6788
sg6370
g6784
sg6384
g6795
sg6379
g6792
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6433
sg6370
g6423
sg6384
g6427
sg6379
g6431
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6395
sg6370
g6814
sg6384
g6402
sg6379
g6821
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6444
sg6370
g6506
sg6384
g6451
sg6379
g6513
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6846
sg6370
g6842
sg6384
g6853
sg6379
g6850
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6882
sg6370
g6872
sg6384
g6876
sg6379
g6880
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6698
sg6370
g6694
sg6384
g6705
sg6379
g6702
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6906
sg6370
g6902
sg6384
g6913
sg6379
g6910
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6929
sg6370
g6919
sg6384
g6923
sg6379
g6927
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6906
sg6370
g6902
sg6384
g6913
sg6379
g6910
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6698
sg6370
g6728
sg6384
g6705
sg6379
g6735
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6606
sg6370
g6602
sg6384
g6613
sg6379
g6610
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6542
sg6370
g6679
sg6384
g6549
sg6379
g6686
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g7005
sg6370
g7001
sg6384
g7012
sg6379
g7009
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g6906
sg6370
g6902
sg6384
g6913
sg6379
g6910
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6395
sg6370
g6814
sg6384
g6402
sg6379
g6821
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g6882
sg6370
g6872
sg6384
g6876
sg6379
g6880
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6433
sg6370
g6423
sg6384
g6427
sg6379
g6431
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g7005
sg6370
g7001
sg6384
g7012
sg6379
g7009
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6846
sg6370
g6842
sg6384
g6853
sg6379
g6850
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6606
sg6370
g7096
sg6384
g6613
sg6379
g7103
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6698
sg6370
g6728
sg6384
g6705
sg6379
g6735
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6476
sg6370
g6649
sg6384
g6483
sg6379
g6656
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6559
sg6370
g6664
sg6384
g6566
sg6379
g6671
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g6636
sg6370
g6632
sg6384
g6643
sg6379
g6640
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6525
sg6370
g7163
sg6384
g6532
sg6379
g7170
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6906
sg6370
g7178
sg6384
g6913
sg6379
g7185
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6882
sg6370
g6872
sg6384
g6876
sg6379
g6880
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g6375
sg6370
g6408
sg6384
g6385
sg6379
g6415
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6576
sg6370
g6572
sg6384
g6583
sg6379
g6580
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6636
sg6370
g6743
sg6384
g6643
sg6379
g6750
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6493
sg6370
g7245
sg6384
g6500
sg6379
g7252
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g6636
sg6370
g6632
sg6384
g6643
sg6379
g6640
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g6929
sg6370
g6919
sg6384
g6923
sg6379
g6927
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6444
sg6370
g6506
sg6384
g6451
sg6379
g6513
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g6606
sg6370
g6602
sg6384
g6613
sg6379
g6610
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g6493
sg6370
g7245
sg6384
g6500
sg6379
g7252
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6929
sg6370
g6919
sg6384
g6923
sg6379
g6927
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6395
sg6370
g6814
sg6384
g6402
sg6379
g6821
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g6698
sg6370
g6728
sg6384
g6705
sg6379
g6735
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6882
sg6370
g7364
sg6384
g6876
sg6379
g7371
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g6606
sg6370
g7096
sg6384
g6613
sg6379
g7103
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6576
sg6370
g7392
sg6384
g6583
sg6379
g7399
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6476
sg6370
g6649
sg6384
g6483
sg6379
g6656
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6846
sg6370
g7420
sg6384
g6853
sg6379
g7427
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g7005
sg6370
g7435
sg6384
g7012
sg6379
g7442
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6636
sg6370
g6632
sg6384
g6643
sg6379
g6640
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6493
sg6370
g7245
sg6384
g6500
sg6379
g7252
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6559
sg6370
g6555
sg6384
g6566
sg6379
g6563
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6559
sg6370
g6664
sg6384
g6566
sg6379
g6671
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g6606
sg6370
g6602
sg6384
g6613
sg6379
g6610
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g6395
sg6370
g6814
sg6384
g6402
sg6379
g6821
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g6525
sg6370
g7163
sg6384
g6532
sg6379
g7170
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g6606
sg6370
g7096
sg6384
g6613
sg6379
g7103
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6698
sg6370
g6694
sg6384
g6705
sg6379
g6702
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g6906
sg6370
g6902
sg6384
g6913
sg6379
g6910
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g6444
sg6370
g6440
sg6384
g6451
sg6379
g6448
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g7005
sg6370
g7001
sg6384
g7012
sg6379
g7009
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6721
sg6370
g6711
sg6384
g6715
sg6379
g6719
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g6433
sg6370
g6457
sg6384
g6427
sg6379
g6464
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g6559
sg6370
g6664
sg6384
g6566
sg6379
g6671
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g6576
sg6370
g7392
sg6384
g6583
sg6379
g7399
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g6525
sg6370
g7163
sg6384
g6532
sg6379
g7170
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6788
sg6370
g6784
sg6384
g6795
sg6379
g6792
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g6882
sg6370
g7364
sg6384
g6876
sg6379
g7371
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6788
sg6370
g6784
sg6384
g6795
sg6379
g6792
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g7005
sg6370
g7435
sg6384
g7012
sg6379
g7442
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6444
sg6370
g6506
sg6384
g6451
sg6379
g6513
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g6788
sg6370
g7801
sg6384
g6795
sg6379
g7808
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6559
sg6370
g6555
sg6384
g6566
sg6379
g6563
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g6559
sg6370
g6664
sg6384
g6566
sg6379
g6671
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6433
sg6370
g6423
sg6384
g6427
sg6379
g6431
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g6721
sg6370
g6711
sg6384
g6715
sg6379
g6719
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6846
sg6370
g6842
sg6384
g6853
sg6379
g6850
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g6636
sg6370
g6743
sg6384
g6643
sg6379
g6750
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g6788
sg6370
g6784
sg6384
g6795
sg6379
g6792
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g6882
sg6370
g7364
sg6384
g6876
sg6379
g7371
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6375
sg6370
g6408
sg6384
g6385
sg6379
g6415
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g6525
sg6370
g7163
sg6384
g6532
sg6379
g7170
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g6444
sg6370
g6506
sg6384
g6451
sg6379
g6513
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6576
sg6370
g7392
sg6384
g6583
sg6379
g7399
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g7005
sg6370
g7435
sg6384
g7012
sg6379
g7442
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g6929
sg6370
g6919
sg6384
g6923
sg6379
g6927
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g6559
sg6370
g6555
sg6384
g6566
sg6379
g6563
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g6721
sg6370
g8063
sg6384
g6715
sg6379
g8070
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6929
sg6370
g8078
sg6384
g6923
sg6379
g8085
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g7005
sg6370
g7001
sg6384
g7012
sg6379
g7009
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g6542
sg6370
g6679
sg6384
g6549
sg6379
g6686
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6721
sg6370
g8063
sg6384
g6715
sg6379
g8070
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g7005
sg6370
g7001
sg6384
g7012
sg6379
g7009
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g6576
sg6370
g6572
sg6384
g6583
sg6379
g6580
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6698
sg6370
g6728
sg6384
g6705
sg6379
g6735
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g6636
sg6370
g6743
sg6384
g6643
sg6379
g6750
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g6846
sg6370
g6842
sg6384
g6853
sg6379
g6850
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6433
sg6370
g6457
sg6384
g6427
sg6379
g6464
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6476
sg6370
g6649
sg6384
g6483
sg6379
g6656
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g6721
sg6370
g8063
sg6384
g6715
sg6379
g8070
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g6433
sg6370
g6457
sg6384
g6427
sg6379
g6464
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g6882
sg6370
g6872
sg6384
g6876
sg6379
g6880
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6929
sg6370
g8078
sg6384
g6923
sg6379
g8085
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g6906
sg6370
g6902
sg6384
g6913
sg6379
g6910
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6906
sg6370
g7178
sg6384
g6913
sg6379
g7185
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g6882
sg6370
g6872
sg6384
g6876
sg6379
g6880
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g6576
sg6370
g7392
sg6384
g6583
sg6379
g7399
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6606
sg6370
g7096
sg6384
g6613
sg6379
g7103
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6444
sg6370
g6440
sg6384
g6451
sg6379
g6448
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6788
sg6370
g7801
sg6384
g6795
sg6379
g7808
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6698
sg6370
g6694
sg6384
g6705
sg6379
g6702
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6559
sg6370
g6555
sg6384
g6566
sg6379
g6563
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g6576
sg6370
g6572
sg6384
g6583
sg6379
g6580
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g6721
sg6370
g6711
sg6384
g6715
sg6379
g6719
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6576
sg6370
g6572
sg6384
g6583
sg6379
g6580
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6636
sg6370
g6632
sg6384
g6643
sg6379
g6640
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6721
sg6370
g8063
sg6384
g6715
sg6379
g8070
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g6882
sg6370
g7364
sg6384
g6876
sg6379
g7371
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6929
sg6370
g6919
sg6384
g6923
sg6379
g6927
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g6606
sg6370
g6602
sg6384
g6613
sg6379
g6610
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g6721
sg6370
g8063
sg6384
g6715
sg6379
g8070
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g6929
sg6370
g8078
sg6384
g6923
sg6379
g8085
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g6906
sg6370
g7178
sg6384
g6913
sg6379
g7185
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g6542
sg6370
g6679
sg6384
g6549
sg6379
g6686
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6788
sg6370
g7801
sg6384
g6795
sg6379
g7808
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g6375
sg6370
g6408
sg6384
g6385
sg6379
g6415
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g6493
sg6370
g7245
sg6384
g6500
sg6379
g7252
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g6636
sg6370
g6743
sg6384
g6643
sg6379
g6750
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6846
sg6370
g7420
sg6384
g6853
sg6379
g7427
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6433
sg6370
g6457
sg6384
g6427
sg6379
g6464
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g7005
sg6370
g7435
sg6384
g7012
sg6379
g7442
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6788
sg6370
g7801
sg6384
g6795
sg6379
g7808
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6906
sg6370
g7178
sg6384
g6913
sg6379
g7185
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6846
sg6370
g7420
sg6384
g6853
sg6379
g7427
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g6476
sg6370
g6649
sg6384
g6483
sg6379
g6656
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6788
sg6370
g6784
sg6384
g6795
sg6379
g6792
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g6698
sg6370
g6694
sg6384
g6705
sg6379
g6702
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6493
sg6370
g6489
sg6384
g6500
sg6379
g6497
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6788
sg6370
g7801
sg6384
g6795
sg6379
g7808
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6493
sg6370
g7245
sg6384
g6500
sg6379
g7252
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g6906
sg6370
g7178
sg6384
g6913
sg6379
g7185
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g6542
sg6370
g6679
sg6384
g6549
sg6379
g6686
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g6606
sg6370
g7096
sg6384
g6613
sg6379
g7103
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6846
sg6370
g6842
sg6384
g6853
sg6379
g6850
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6929
sg6370
g8078
sg6384
g6923
sg6379
g8085
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6444
sg6370
g6440
sg6384
g6451
sg6379
g6448
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6476
sg6370
g6472
sg6384
g6483
sg6379
g6480
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g6576
sg6370
g7392
sg6384
g6583
sg6379
g7399
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g6721
sg6370
g6711
sg6384
g6715
sg6379
g6719
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6882
sg6370
g7364
sg6384
g6876
sg6379
g7371
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g6846
sg6370
g7420
sg6384
g6853
sg6379
g7427
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g7005
sg6370
g7435
sg6384
g7012
sg6379
g7442
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g6525
sg6370
g7163
sg6384
g6532
sg6379
g7170
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6395
sg6370
g6814
sg6384
g6402
sg6379
g6821
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g6846
sg6370
g7420
sg6384
g6853
sg6379
g7427
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g6929
sg6370
g8078
sg6384
g6923
sg6379
g8085
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.