ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C35_infer_design1_no_eyetracking_2015_Oct_26_1428
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vr
sVcontacts
p57
Vn
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'z\x0b\xe4\xef\x11\x00N@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Oct_26_1428
p66
sVparticipant
p67
VC35
p68
sVglasses
p69
Vn
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vr
sg15
F0.033464973252193886
sg14
S'space'
p88
sg58
g62
sg57
Vn
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp89
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F9.583389022758638
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P9\x00'
tbsg69
Vn
sa(dp95
g63
g64
sg20
F14.433999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F0.77999999999999914
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x03\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V4-corn.png
p102
sg21
F1.7
sg69
Vn
sa(dp103
g63
g64
sg20
F7.1340000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F1.0799999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'\x05\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p109
sg21
F1.5
sg69
Vn
sa(dp110
g63
g64
sg20
F3.2509999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F0.83999999999999986
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S"'\x00\x00\x00"
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V51-mars.png
p116
sg21
F1
sg69
Vn
sa(dp117
g63
g64
sg20
F3.0009999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F0.77999999999999936
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'\r\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p123
sg21
F1.3999999999999999
sg69
Vn
sa(dp124
g63
g64
sg20
F4.101
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F1.1399999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'\x19\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p130
sg21
F1.3999999999999999
sg69
Vn
sa(dp131
g63
g64
sg20
F2.484
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F0.29999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'\x10\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V22-daim.png
p137
sg21
F1.5
sg69
Vn
sa(dp138
g63
g64
sg20
F5.7670000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F0.099999999999998951
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'\x15\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V29-beans.png
p144
sg21
F1.5
sg69
Vn
sa(dp145
g63
g64
sg20
F2.6840000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F0.33999999999999897
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'\x1a\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V35-raisins.png
p151
sg21
F1.3999999999999999
sg69
Vn
sa(dp152
g63
g64
sg20
F4.484
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F1.2399999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x0c\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V18-mms.png
p158
sg21
F1.6000000000000001
sg69
Vn
sa(dp159
g63
g64
sg20
F2.484
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F1.3400000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'\x1c\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p165
sg21
F1.2
sg69
Vn
sa(dp166
g63
g64
sg20
F3.3839999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'\x1d\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V40-sardines.png
p172
sg21
F1.7
sg69
Vn
sa(dp173
g63
g64
sg20
F1.9339999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F0.87999999999999945
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S'\x0e\x00\x00\x00'
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p179
sg21
F1.3999999999999999
sg69
Vn
sa(dp180
g63
g64
sg20
F5.4340000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F1.1399999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'\x01\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p186
sg21
F1.5
sg69
Vn
sa(dp187
g63
g64
sg20
F2.5670000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F1.2199999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'\x1e\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p193
sg21
F1.7
sg69
Vn
sa(dp194
g63
g64
sg20
F1.417
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F0.7799999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'\x17\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p200
sg21
F1
sg69
Vn
sa(dp201
g63
g64
sg20
F2.6339999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'\x1b\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p207
sg21
F1.8999999999999999
sg69
Vn
sa(dp208
g63
g64
sg20
F2.5339999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F0.65999999999999948
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'\x18\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p214
sg21
F1.3
sg69
Vn
sa(dp215
g63
g64
sg20
F2.984
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F0.19999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'\x16\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p221
sg21
F1.5
sg69
Vn
sa(dp222
g63
g64
sg20
F4.3840000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F0.51999999999999913
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x14\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p228
sg21
F1.3999999999999999
sg69
Vn
sa(dp229
g63
g64
sg20
F9.1010000000000009
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F0.97999999999999909
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'%\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p235
sg21
F2
sg69
Vn
sa(dp236
g63
g64
sg20
F3.0670000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F1.6599999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'\x06\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V7-olives.png
p242
sg21
F1.8999999999999999
sg69
Vn
sa(dp243
g63
g64
sg20
F2.3170000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'\x08\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p249
sg21
F1.8
sg69
Vn
sa(dp250
g63
g64
sg20
F3.1840000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F0.17999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S'&\x00\x00\x00'
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V50-polo.png
p256
sg21
F1
sg69
Vn
sa(dp257
g63
g64
sg20
F4.117
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F1.3399999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'#\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p263
sg21
F1.6000000000000001
sg69
Vn
sa(dp264
g63
g64
sg20
F2.0009999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F0.97999999999999909
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'$\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V48-twix.png
p270
sg21
F1.8999999999999999
sg69
Vn
sa(dp271
g63
g64
sg20
F1.9510000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F0.75999999999999912
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'\n\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p277
sg21
F1.8
sg69
Vn
sa(dp278
g63
g64
sg20
F2.9169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F0.97999999999999954
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'\x13\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p284
sg21
F1.3999999999999999
sg69
Vn
sa(dp285
g63
g64
sg20
F1.1339999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F1.3999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S'\t\x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p291
sg21
F1.3999999999999999
sg69
Vn
sa(dp292
g63
g64
sg20
F4.8010000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F0.63999999999999901
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S'"\x00\x00\x00'
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p298
sg21
F1.7
sg69
Vn
sa(dp299
g63
g64
sg20
F4.9180000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F1.4999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S'\x02\x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p305
sg21
F1.8999999999999999
sg69
Vn
sa(dp306
g63
g64
sg20
F2.9510000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F0.85999999999999943
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S'\x0b\x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p312
sg21
F1.3999999999999999
sg69
Vn
sa(dp313
g63
g64
sg20
F6.617
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F1.5600000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S'!\x00\x00\x00'
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V44-crunch.png
p319
sg21
F1.6000000000000001
sg69
Vn
sa(dp320
g63
g64
sg20
F2.5510000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'\x07\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p326
sg21
F2
sg69
Vn
sa(dp327
g63
g64
sg20
F2.9169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F1.1199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'\x04\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p333
sg21
F1.7
sg69
Vn
sa(dp334
g63
g64
sg20
F4.7510000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F1.3999999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'\x00\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p340
sg21
F1.8
sg69
Vn
sa(dp341
g63
g64
sg20
F5.0339999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F1.2
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S'\x12\x00\x00\x00'
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p347
sg21
F1.2
sg69
Vn
sa(dp348
g63
g64
sg20
F2.4169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S' \x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p354
sg21
F1.7
sg69
Vn
sa(dp355
g63
g64
sg20
F3.6669999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S'\x0f\x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p361
sg21
F1.7
sg69
Vn
sa(dp362
g63
g64
sg20
F2.8170000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F0.41999999999999904
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'\x11\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p368
sg21
F1.6000000000000001
sg69
Vn
sa(dp369
g63
g64
sg20
F4.101
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F1.5400000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\x1f\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p375
sg21
F1.3
sg69
Vn
sa(dp376
g63
g64
sg55
g11
sg56
Vr
sg23
F7.0833736273884824
sg57
Vn
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vn
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p380
sg26
F5.5999999999999988
sg28
F4
sg58
g62
sg57
Vn
sg80
S'30-spaghetti_hoops.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vr
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'left'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F1.26670825317251
sg27
F5.0510000000000002
sg69
Vn
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p389
sg26
F5.9999999999999973
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'18-mms.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vr
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'right'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F1.2166633214997091
sg27
F1.367
sg69
Vn
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'38-maltesers.png'
p398
sg26
F3.5
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'6-sour_patch_kids.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vr
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'left'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F1.6164568524795868
sg27
F2.3170000000000002
sg69
Vn
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p407
sg26
F1.9999999999999987
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'44-crunch.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vr
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'right'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F3.8668403112374108
sg27
F2.351
sg69
Vn
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'46-pistachios.png'
p416
sg26
F5.0000000000000018
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'29-beans.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vr
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'left'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F1.4335096768454605
sg27
F1.0840000000000001
sg69
Vn
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p425
sg26
F5.9999999999999973
sg28
F4
sg58
g62
sg57
Vn
sg80
S'4-corn.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vr
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'right'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F1.3167221090061503
sg27
F0.71699999999999997
sg69
Vn
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p434
sg26
F2.4999999999999996
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'20-fruit_pastilles.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vr
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'left'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F4.2501653576800891
sg27
F1.1839999999999999
sg69
Vn
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p443
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'8-liquorice_catherine_wheels.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vr
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'left'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F3.0001741957630657
sg27
F0.751
sg69
Vn
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'40-sardines.png'
p452
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'5-pineapple.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vr
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'right'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F1.3833857726253882
sg27
F0.56699999999999995
sg69
Vn
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p461
sg26
F2.4999999999999991
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'3-ellas_strawberries_apples.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vr
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'right'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F3.9333759652045046
sg27
F3.1840000000000002
sg69
Vn
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p470
sg26
F1.3999999999999986
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'33-ambrosia_rice.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vr
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'right'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F10.350067910688267
sg27
F2.851
sg69
Vn
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p479
sg26
F4.5
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'41-peanuts_redo.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vr
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'right'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F1.2167987437378542
sg27
F1.101
sg69
Vn
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'22-daim.png'
p488
sg26
F5.3999999999999995
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'7-olives.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vr
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'right'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F1.7667507329906584
sg27
F2.8340000000000001
sg69
Vn
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'5-pineapple.png'
p497
sg26
F5.9999999999999973
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'40-sardines.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vr
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'left'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F1.1167641896845453
sg27
F2.7839999999999998
sg69
Vn
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p506
sg26
F4.0999999999999996
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'16-skips_prawn.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vr
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'left'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F1.3501237901805325
sg27
F2.4169999999999998
sg69
Vn
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p515
sg26
F5.2000000000000002
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'45-chewy_nougat_redo.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vr
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'left'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F1.1667672117387156
sg27
F1.268
sg69
Vn
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p524
sg26
F5.3999999999999995
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'1-treacle_cookies.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vr
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'right'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F1.250565637305499
sg27
F1.351
sg69
Vn
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'50-polo.png'
p533
sg26
F4.9000000000000004
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'48-twix.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vr
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'right'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F1.2501032060004036
sg27
F1.8009999999999999
sg69
Vn
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p542
sg26
F4.7000000000000011
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'19-caramello_redo.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vr
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'right'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F1.116868536083075
sg27
F1.8169999999999999
sg69
Vn
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p551
sg26
F5.0000000000000009
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'42-mrkipling_lemon_slices.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vr
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'right'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F1.0666648040173641
sg27
F1.4670000000000001
sg69
Vn
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'29-beans.png'
p560
sg26
F5.2999999999999998
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'46-pistachios.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vr
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'right'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F0.76673818861490872
sg27
F1.5669999999999999
sg69
Vn
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'18-mms.png'
p569
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'43-mrporky_pork_crackles_redo.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vr
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'left'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F1.1000804550644716
sg27
F0.66700000000000004
sg69
Vn
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p578
sg26
F1.7999999999999989
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'13-mccoys_steak_crisps.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vr
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'left'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F2.1834164493257049
sg27
F1.3340000000000001
sg69
Vn
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'51-mars.png'
p587
sg26
F3.3999999999999999
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'27-hartleys_raspberries_jelly.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vr
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'left'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F2.3166713613045431
sg27
F2.0670000000000002
sg69
Vn
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'44-crunch.png'
p596
sg26
F1.6999999999999993
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'26-walkers_smoky_bacon.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vr
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'left'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F1.9667092225113265
sg27
F1.784
sg69
Vn
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p605
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'36-fig_rolls.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vr
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'left'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F1.050056050551575
sg27
F0.63400000000000001
sg69
Vn
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'35-raisins.png'
p614
sg26
F4.9000000000000012
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'49-yorkie.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vr
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'right'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F1.2667173763547908
sg27
F0.66700000000000004
sg69
Vn
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p623
sg26
F5.9999999999999973
sg28
F4
sg58
g62
sg57
Vn
sg80
S'21-nakd_banana_crunch.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vr
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'left'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F0.88356738097354537
sg27
F0.51700000000000002
sg69
Vn
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'49-yorkie.png'
p632
sg26
F5.2000000000000002
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'35-raisins.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vr
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'left'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F0.71672889437286358
sg27
F2.1339999999999999
sg69
Vn
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'25-kitkat.png'
p641
sg26
F4.9000000000000021
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'31-hobnobs.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vr
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'right'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F4.1667865985009485
sg27
F0.91700000000000004
sg69
Vn
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p650
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vr
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'right'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F0.7833996854783436
sg27
F0.58399999999999996
sg69
Vn
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p659
sg26
F2.9999999999999996
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'38-maltesers.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vr
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'right'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F1.6164500100926489
sg27
F0.96699999999999997
sg69
Vn
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'4-corn.png'
p668
sg26
F5.9999999999999973
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'10-bounty_redo.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vr
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'left'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F1.1333911895144411
sg27
F0.66800000000000004
sg69
Vn
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p677
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'17-jacobs_mini_cheddars_redo.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vr
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'right'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F1.3003377288068805
sg27
F0.63400000000000001
sg69
Vn
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p686
sg26
F2.2999999999999985
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'23-crunchie_redo.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vr
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'left'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F1.9334649162319693
sg27
F1.1339999999999999
sg69
Vn
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p695
sg26
F4.0000000000000009
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'2-steamed_puddings.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vr
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'right'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F1.8834271120454105
sg27
F2.9670000000000001
sg69
Vn
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'48-twix.png'
p704
sg26
F5.3999999999999995
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'50-polo.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vr
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'left'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F1.0835788989916182
sg27
F1.0009999999999999
sg69
Vn
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p713
sg26
F4.0000000000000009
sg28
F3
sg58
g62
sg57
Vn
sg80
S'51-mars.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vr
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'right'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F2.6668248018277154
sg27
F0.95099999999999996
sg69
Vn
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'7-olives.png'
p722
sg26
F5.0000000000000018
sg28
F3
sg58
g62
sg57
Vn
sg80
S'22-daim.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vr
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'left'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F0.8667299777507651
sg27
F1.5840000000000001
sg69
Vn
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'31-hobnobs.png'
p731
sg26
F3.7999999999999998
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'25-kitkat.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vr
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'left'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F1.2667327717254011
sg27
F4.0510000000000002
sg69
Vn
sa(dp738
g63
g64
sg56
Vr
sg29
S'space'
p739
sg57
Vn
sg58
g62
sg30
F328.32662418304744
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp740
g63
g64
sg56
Vr
sg57
Vn
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F17.11645913327493
sg65
g66
sg67
g68
sg69
Vn
sa(dp742
g63
g64
sg81
S'11-snickers.png'
p743
sg82
S'54-frubes_yogurt.png'
p744
sg56
Vr
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'54-frubes_yogurt.png'
p748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S'\x07\xdf\n\x1a\x0e*(\n\x1d\xd8'
tRp753
sa(dp754
g63
g64
sg81
S'12-topic.png'
p755
sg82
S'12-topic.png'
p756
sg56
Vr
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'39-mackerel.png'
p760
sg33
g760
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S'\x07\xdf\n\x1a\x0e*/\x05\xe7\xb8'
tRp764
sa(dp765
g63
g64
sg81
S'52-aero_mousse.png'
p766
sg82
S'14-discos_salt_vinegar.png'
p767
sg56
Vr
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'14-discos_salt_vinegar.png'
p771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S'\x07\xdf\n\x1a\x0e*7\x0f:p'
tRp775
sa(dp776
g63
g64
sg81
g743
sg82
S'11-snickers.png'
p777
sg56
Vr
sS'practice_loop.thisN'
p778
I3
sS'practice_loop.thisTrialN'
p779
I3
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p780
I0
sg83
g748
sg33
g748
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p781
sS'practice_loop.thisIndex'
p782
g59
(g98
S'\x03\x00\x00\x00'
tRp783
sg34
g752
(S'\x07\xdf\n\x1a\x0e+\x02\x01\x05\xb8'
tRp784
sa(dp785
g63
g64
sg81
g755
sg82
S'39-mackerel.png'
p786
sg56
Vr
sS'practice_loop.thisN'
p787
I4
sS'practice_loop.thisTrialN'
p788
I4
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p789
I0
sg83
g760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p790
sS'practice_loop.thisIndex'
p791
g59
(g98
S'\x04\x00\x00\x00'
tRp792
sg34
g752
(S'\x07\xdf\n\x1a\x0e+\x08\x03\xf7\xa0'
tRp793
sa(dp794
g63
g64
sg81
S'53-cheestrings.png'
p795
sg82
S'53-cheestrings.png'
p796
sg56
Vr
sS'practice_loop.thisN'
p797
I5
sS'practice_loop.thisTrialN'
p798
I5
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p799
I0
sg83
S'47-picnic.png'
p800
sg33
g795
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p801
sS'practice_loop.thisIndex'
p802
g59
(g98
S'\x05\x00\x00\x00'
tRp803
sg34
g752
(S'\x07\xdf\n\x1a\x0e+\x0f\x0eDX'
tRp804
sa(dp805
g63
g64
sg81
g766
sg82
S'52-aero_mousse.png'
p806
sg56
Vr
sS'practice_loop.thisN'
p807
I6
sS'practice_loop.thisTrialN'
p808
I6
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p809
I0
sg83
g771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p810
sS'practice_loop.thisIndex'
p811
g59
(g98
S'\x06\x00\x00\x00'
tRp812
sg34
g752
(S'\x07\xdf\n\x1a\x0e+\x16\x05\xc4\x90'
tRp813
sa(dp814
g63
g64
sg81
S'32-hovis_crackers.png'
p815
sg82
S'24-food_doctor_apple_walnut_bar.png'
p816
sg56
Vr
sS'practice_loop.thisN'
p817
I7
sS'practice_loop.thisTrialN'
p818
I7
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p819
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p820
sg33
g815
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p821
sS'practice_loop.thisIndex'
p822
g59
(g98
S'\x07\x00\x00\x00'
tRp823
sg34
g752
(S'\x07\xdf\n\x1a\x0e+\x1c\x0c\x87\x08'
tRp824
sa(dp825
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p826
sg82
S'37-nakd_cashew_cookie.png'
p827
sg56
Vr
sS'practice_loop.thisN'
p828
I8
sS'practice_loop.thisTrialN'
p829
I8
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p830
I0
sg83
S'9-yu_mango_pieces.png'
p831
sg33
g826
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p832
sS'practice_loop.thisIndex'
p833
g59
(g98
S'\x08\x00\x00\x00'
tRp834
sg34
g752
(S'\x07\xdf\n\x1a\x0e+#\x07\x95h'
tRp835
sa(dp836
g63
g64
sg81
g795
sg82
S'47-picnic.png'
p837
sg56
Vr
sS'practice_loop.thisN'
p838
I9
sS'practice_loop.thisTrialN'
p839
I9
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p840
I0
sg83
g800
sg33
g795
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p841
sS'practice_loop.thisIndex'
p842
g59
(g98
S'\t\x00\x00\x00'
tRp843
sg34
g752
(S'\x07\xdf\n\x1a\x0e++\x00Bh'
tRp844
sa(dp845
g63
g64
sg81
g815
sg82
S'32-hovis_crackers.png'
p846
sg56
Vr
sS'practice_loop.thisN'
p847
I10
sS'practice_loop.thisTrialN'
p848
I10
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p849
I0
sg83
g820
sg33
g820
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p850
sS'practice_loop.thisIndex'
p851
g59
(g98
S'\n\x00\x00\x00'
tRp852
sg34
g752
(S'\x07\xdf\n\x1a\x0e+1\x034P'
tRp853
sa(dp854
g63
g64
sg81
S'15-walnut_whip.png'
p855
sg82
S'15-walnut_whip.png'
p856
sg56
Vr
sS'practice_loop.thisN'
p857
I11
sS'practice_loop.thisTrialN'
p858
I11
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p859
I0
sg83
S'28-maple_pecan.png'
p860
sg33
g855
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\n\x1a\x0e+7\x07\x95h'
tRp864
sa(dp865
g63
g64
sg81
g826
sg82
S'9-yu_mango_pieces.png'
p866
sg56
Vr
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g831
sg33
g826
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\n\x1a\x0e,\x02\x03\x99\xe0'
tRp873
sa(dp874
g63
g64
sg81
g855
sg82
S'28-maple_pecan.png'
p875
sg56
Vr
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g860
sg33
g860
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\n\x1a\x0e,\x08\x0e\xa6\x00'
tRp882
sa(dp883
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F100.88137468111654
sg65
g66
sg67
g68
sg69
Vn
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vr
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vn
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'2-steamed_puddings.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'right'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'2-steamed_puddings.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'20-fruit_pastilles.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p907
I0
sS'img_wrong'
p908
S'20-fruit_pastilles.png'
p909
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vn
sS'block_loop.thisTrialN'
p911
I0
sg39
F1.4167726286282232
sg34
g752
(S'\x07\xdf\n\x1a\x0e.\x05\x00]\xc0'
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'45-chewy_nougat_redo.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'right'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'41-peanuts_redo.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'41-peanuts_redo.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p925
I0
sg908
S'45-chewy_nougat_redo.png'
p926
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vn
sS'block_loop.thisTrialN'
p928
I0
sg39
F1.3001447164801903
sg34
g752
(S'\x07\xdf\n\x1a\x0e.\x0b\x07 8'
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'3-ellas_strawberries_apples.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'right'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
S'3-ellas_strawberries_apples.png'
p936
sg63
g64
sS'trial_loop.thisIndex'
p937
g59
(g98
S'\x02\x00\x00\x00'
tRp938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p939
I0
sg903
S'13-mccoys_steak_crisps.png'
p940
sS'block_loop.thisRepN'
p941
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p942
I0
sg908
S'13-mccoys_steak_crisps.png'
p943
sg55
g11
sS'block_loop.thisTrial'
p944
Nsg69
Vn
sS'block_loop.thisTrialN'
p945
I0
sg39
F1.4500979031508905
sg34
g752
(S'\x07\xdf\n\x1a\x0e.\x11\x0c5\x00'
tRp946
sa(dp947
S'trial_loop.thisTrialN'
p948
I3
sg894
g915
sS'block_loop.thisIndex'
p949
g888
sg38
S'left'
p950
sg58
g62
sS'trial_loop.thisN'
p951
I3
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p952
g59
(g98
S'\x03\x00\x00\x00'
tRp953
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p954
I0
sg903
g923
sS'block_loop.thisRepN'
p955
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p956
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p957
Nsg69
Vn
sS'block_loop.thisTrialN'
p958
I0
sg39
F1.8000845604965434
sg34
g752
(S'\x07\xdf\n\x1a\x0e.\x18\x04.P'
tRp959
sa(dp960
S'trial_loop.thisTrialN'
p961
I4
sg894
S'10-bounty_redo.png'
p962
sS'block_loop.thisIndex'
p963
g888
sg38
S'right'
p964
sg58
g62
sS'trial_loop.thisN'
p965
I4
sg33
S'10-bounty_redo.png'
p966
sg63
g64
sS'trial_loop.thisIndex'
p967
g59
(g98
S'\x04\x00\x00\x00'
tRp968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p969
I0
sg903
S'4-corn.png'
p970
sS'block_loop.thisRepN'
p971
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p972
I0
sg908
S'4-corn.png'
p973
sg55
g11
sS'block_loop.thisTrial'
p974
Nsg69
Vn
sS'block_loop.thisTrialN'
p975
I0
sg39
F1.2006008185776409
sg34
g752
(S'\x07\xdf\n\x1a\x0e.\x1f\x01\xa1\xf8'
tRp976
sa(dp977
S'trial_loop.thisTrialN'
p978
I5
sg894
S'17-jacobs_mini_cheddars_redo.png'
p979
sS'block_loop.thisIndex'
p980
g888
sg38
S'left'
p981
sg58
g62
sS'trial_loop.thisN'
p982
I5
sg33
S'8-liquorice_catherine_wheels.png'
p983
sg63
g64
sS'trial_loop.thisIndex'
p984
g59
(g98
S'\x05\x00\x00\x00'
tRp985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p986
I0
sg903
S'8-liquorice_catherine_wheels.png'
p987
sS'block_loop.thisRepN'
p988
I0
sg906
S'17-jacobs_mini_cheddars_redo.png'
p989
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p990
I0
sg908
g983
sg55
g11
sS'block_loop.thisTrial'
p991
Nsg69
Vn
sS'block_loop.thisTrialN'
p992
I0
sg39
F1.6168525705134016
sg34
g752
(S'\x07\xdf\n\x1a\x0e.%\x05Kx'
tRp993
sa(dp994
S'trial_loop.thisTrialN'
p995
I6
sg894
S'19-caramello_redo.png'
p996
sS'block_loop.thisIndex'
p997
g888
sg38
S'left'
p998
sg58
g62
sS'trial_loop.thisN'
p999
I6
sg33
S'19-caramello_redo.png'
p1000
sg63
g64
sS'trial_loop.thisIndex'
p1001
g59
(g98
S'\x06\x00\x00\x00'
tRp1002
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1003
I0
sg903
S'30-spaghetti_hoops.png'
p1004
sS'block_loop.thisRepN'
p1005
I0
sg906
g1000
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1006
I0
sg908
S'30-spaghetti_hoops.png'
p1007
sg55
g11
sS'block_loop.thisTrial'
p1008
Nsg69
Vn
sS'block_loop.thisTrialN'
p1009
I0
sg39
F1.633509790885455
sg34
g752
(S'\x07\xdf\n\x1a\x0e.+\x0f&\xe8'
tRp1010
sa(dp1011
S'trial_loop.thisTrialN'
p1012
I7
sg894
S'20-fruit_pastilles.png'
p1013
sS'block_loop.thisIndex'
p1014
g888
sg38
S'right'
p1015
sg58
g62
sS'trial_loop.thisN'
p1016
I7
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1017
g59
(g98
S'\x07\x00\x00\x00'
tRp1018
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1019
I0
sg903
S'2-steamed_puddings.png'
p1020
sS'block_loop.thisRepN'
p1021
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1022
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1023
Nsg69
Vn
sS'block_loop.thisTrialN'
p1024
I0
sg39
F1.8000905475846594
sg34
g752
(S'\x07\xdf\n\x1a\x0e.2\n5H'
tRp1025
sa(dp1026
S'trial_loop.thisTrialN'
p1027
I8
sg894
S'35-raisins.png'
p1028
sS'block_loop.thisIndex'
p1029
g888
sg38
S'right'
p1030
sg58
g62
sS'trial_loop.thisN'
p1031
I8
sg33
S'49-yorkie.png'
p1032
sg63
g64
sS'trial_loop.thisIndex'
p1033
g59
(g98
S'\x08\x00\x00\x00'
tRp1034
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1035
I0
sg903
S'49-yorkie.png'
p1036
sS'block_loop.thisRepN'
p1037
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1038
I0
sg908
S'35-raisins.png'
p1039
sg55
g11
sS'block_loop.thisTrial'
p1040
Nsg69
Vn
sS'block_loop.thisTrialN'
p1041
I0
sg39
F1.0668549653491937
sg34
g752
(S'\x07\xdf\n\x1a\x0e.9\x07\xa8\xf0'
tRp1042
sa(dp1043
S'trial_loop.thisTrialN'
p1044
I9
sg894
S'31-hobnobs.png'
p1045
sS'block_loop.thisIndex'
p1046
g888
sg38
S'right'
p1047
sg58
g62
sS'trial_loop.thisN'
p1048
I9
sg33
S'25-kitkat.png'
p1049
sg63
g64
sS'trial_loop.thisIndex'
p1050
g59
(g98
S'\t\x00\x00\x00'
tRp1051
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1052
I0
sg903
S'25-kitkat.png'
p1053
sS'block_loop.thisRepN'
p1054
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1055
I0
sg908
S'31-hobnobs.png'
p1056
sg55
g11
sS'block_loop.thisTrial'
p1057
Nsg69
Vn
sS'block_loop.thisTrialN'
p1058
I0
sg39
F2.3668403112374108
sg34
g752
(S'\x07\xdf\n\x1a\x0e/\x03\t/\x90'
tRp1059
sa(dp1060
S'trial_loop.thisTrialN'
p1061
I10
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p1062
sS'block_loop.thisIndex'
p1063
g888
sg38
S'left'
p1064
sg58
g62
sS'trial_loop.thisN'
p1065
I10
sg33
S'36-fig_rolls.png'
p1066
sg63
g64
sS'trial_loop.thisIndex'
p1067
g59
(g98
S'\n\x00\x00\x00'
tRp1068
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1069
I0
sg903
S'36-fig_rolls.png'
p1070
sS'block_loop.thisRepN'
p1071
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1072
I0
sg908
S'34-hula_hoops_bbq_beef_redo.png'
p1073
sg55
g11
sS'block_loop.thisTrial'
p1074
Nsg69
Vn
sS'block_loop.thisTrialN'
p1075
I0
sg39
F1.0501852006018453
sg34
g752
(S'\x07\xdf\n\x1a\x0e/\n\x0f2\xa0'
tRp1076
sa(dp1077
S'trial_loop.thisTrialN'
p1078
I11
sg894
g932
sS'block_loop.thisIndex'
p1079
g888
sg38
S'left'
p1080
sg58
g62
sS'trial_loop.thisN'
p1081
I11
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p1082
g59
(g98
S'\x0b\x00\x00\x00'
tRp1083
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1084
I0
sg903
g940
sS'block_loop.thisRepN'
p1085
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1086
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1087
Nsg69
Vn
sS'block_loop.thisTrialN'
p1088
I0
sg39
F2.6835054003536243
sg34
g752
(S'\x07\xdf\n\x1a\x0e/\x11\x018\x80'
tRp1089
sa(dp1090
S'trial_loop.thisTrialN'
p1091
I12
sg894
g1013
sS'block_loop.thisIndex'
p1092
g888
sg38
S'right'
p1093
sg58
g62
sS'trial_loop.thisN'
p1094
I12
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1095
g59
(g98
S'\x0c\x00\x00\x00'
tRp1096
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1097
I0
sg903
g1020
sS'block_loop.thisRepN'
p1098
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1099
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1100
Nsg69
Vn
sS'block_loop.thisTrialN'
p1101
I0
sg39
F1.4000903195055798
sg34
g752
(S'\x07\xdf\n\x1a\x0e/\x18\x0c<\xd0'
tRp1102
sa(dp1103
S'trial_loop.thisTrialN'
p1104
I13
sg894
S'42-mrkipling_lemon_slices.png'
p1105
sS'block_loop.thisIndex'
p1106
g888
sg38
S'left'
p1107
sg58
g62
sS'trial_loop.thisN'
p1108
I13
sg33
S'42-mrkipling_lemon_slices.png'
p1109
sg63
g64
sS'trial_loop.thisIndex'
p1110
g59
(g98
S'\r\x00\x00\x00'
tRp1111
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1112
I0
sg903
S'16-skips_prawn.png'
p1113
sS'block_loop.thisRepN'
p1114
I0
sg906
g1109
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1115
I0
sg908
S'16-skips_prawn.png'
p1116
sg55
g11
sS'block_loop.thisTrial'
p1117
Nsg69
Vn
sS'block_loop.thisTrialN'
p1118
I0
sg39
F1.3500502345227687
sg34
g752
(S'\x07\xdf\n\x1a\x0e/\x1f\x03~\x88'
tRp1119
sa(dp1120
S'trial_loop.thisTrialN'
p1121
I14
sg894
S'8-liquorice_catherine_wheels.png'
p1122
sS'block_loop.thisIndex'
p1123
g888
sg38
S'left'
p1124
sg58
g62
sS'trial_loop.thisN'
p1125
I14
sg33
g983
sg63
g64
sS'trial_loop.thisIndex'
p1126
g59
(g98
S'\x0e\x00\x00\x00'
tRp1127
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1128
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p1129
sS'block_loop.thisRepN'
p1130
I0
sg906
g989
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1131
I0
sg908
g983
sg55
g11
sS'block_loop.thisTrial'
p1132
Nsg69
Vn
sS'block_loop.thisTrialN'
p1133
I0
sg39
F1.3338831001028666
sg34
g752
(S'\x07\xdf\n\x1a\x0e/%\tN\xd0'
tRp1134
sa(dp1135
S'trial_loop.thisTrialN'
p1136
I15
sg894
S'5-pineapple.png'
p1137
sS'block_loop.thisIndex'
p1138
g888
sg38
S'left'
p1139
sg58
g62
sS'trial_loop.thisN'
p1140
I15
sg33
S'5-pineapple.png'
p1141
sg63
g64
sS'trial_loop.thisIndex'
p1142
g59
(g98
S'\x0f\x00\x00\x00'
tRp1143
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1144
I0
sg903
S'40-sardines.png'
p1145
sS'block_loop.thisRepN'
p1146
I0
sg906
S'40-sardines.png'
p1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1148
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p1149
Nsg69
Vn
sS'block_loop.thisTrialN'
p1150
I0
sg39
F1.3667168631764071
sg34
g752
(S'\x07\xdf\n\x1a\x0e/+\x0e\xe0\x98'
tRp1151
sa(dp1152
S'trial_loop.thisTrialN'
p1153
I16
sg894
S'27-hartleys_raspberries_jelly.png'
p1154
sS'block_loop.thisIndex'
p1155
g888
sg38
S'right'
p1156
sg58
g62
sS'trial_loop.thisN'
p1157
I16
sg33
S'51-mars.png'
p1158
sg63
g64
sS'trial_loop.thisIndex'
p1159
g59
(g98
S'\x10\x00\x00\x00'
tRp1160
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1161
I0
sg903
S'51-mars.png'
p1162
sS'block_loop.thisRepN'
p1163
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1164
I0
sg908
S'27-hartleys_raspberries_jelly.png'
p1165
sg55
g11
sS'block_loop.thisTrial'
p1166
Nsg69
Vn
sS'block_loop.thisTrialN'
p1167
I0
sg39
F2.3168270256028336
sg34
g752
(S'\x07\xdf\n\x1a\x0e/2\x05\xe3\xd0'
tRp1168
sa(dp1169
S'trial_loop.thisTrialN'
p1170
I17
sg894
S'29-beans.png'
p1171
sS'block_loop.thisIndex'
p1172
g888
sg38
S'right'
p1173
sg58
g62
sS'trial_loop.thisN'
p1174
I17
sg33
S'46-pistachios.png'
p1175
sg63
g64
sS'trial_loop.thisIndex'
p1176
g59
(g98
S'\x11\x00\x00\x00'
tRp1177
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1178
I0
sg903
S'46-pistachios.png'
p1179
sS'block_loop.thisRepN'
p1180
I0
sg906
g1175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1181
I0
sg908
S'29-beans.png'
p1182
sg55
g11
sS'block_loop.thisTrial'
p1183
Nsg69
Vn
sS'block_loop.thisTrialN'
p1184
I0
sg39
F0.9834323008553838
sg34
g752
(S'\x07\xdf\n\x1a\x0e/9\x0b30'
tRp1185
sa(dp1186
S'trial_loop.thisTrialN'
p1187
I18
sg894
S'23-crunchie_redo.png'
p1188
sS'block_loop.thisIndex'
p1189
g888
sg38
S'left'
p1190
sg58
g62
sS'trial_loop.thisN'
p1191
I18
sg33
S'23-crunchie_redo.png'
p1192
sg63
g64
sS'trial_loop.thisIndex'
p1193
g59
(g98
S'\x12\x00\x00\x00'
tRp1194
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1195
I0
sg903
S'33-ambrosia_rice.png'
p1196
sS'block_loop.thisRepN'
p1197
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1198
I0
sg908
S'33-ambrosia_rice.png'
p1199
sg55
g11
sS'block_loop.thisTrial'
p1200
Nsg69
Vn
sS'block_loop.thisTrialN'
p1201
I0
sg39
F1.4501939816645972
sg34
g752
(S'\x07\xdf\n\x1a\x0e0\x03\x0bJ\xa0'
tRp1202
sa(dp1203
S'trial_loop.thisTrialN'
p1204
I19
sg894
S'48-twix.png'
p1205
sS'block_loop.thisIndex'
p1206
g888
sg38
S'left'
p1207
sg58
g62
sS'trial_loop.thisN'
p1208
I19
sg33
S'48-twix.png'
p1209
sg63
g64
sS'trial_loop.thisIndex'
p1210
g59
(g98
S'\x13\x00\x00\x00'
tRp1211
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1212
I0
sg903
S'50-polo.png'
p1213
sS'block_loop.thisRepN'
p1214
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1215
I0
sg908
S'50-polo.png'
p1216
sg55
g11
sS'block_loop.thisTrial'
p1217
Nsg69
Vn
sS'block_loop.thisTrialN'
p1218
I0
sg39
F1.9505264076215099
sg34
g752
(S'\x07\xdf\n\x1a\x0e0\n\x03\x82p'
tRp1219
sa(dp1220
S'trial_loop.thisTrialN'
p1221
I20
sg894
S'33-ambrosia_rice.png'
p1222
sS'block_loop.thisIndex'
p1223
g888
sg38
S'right'
p1224
sg58
g62
sS'trial_loop.thisN'
p1225
I20
sg33
g1199
sg63
g64
sS'trial_loop.thisIndex'
p1226
g59
(g98
S'\x14\x00\x00\x00'
tRp1227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1228
I0
sg903
S'23-crunchie_redo.png'
p1229
sS'block_loop.thisRepN'
p1230
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1231
I0
sg908
g1199
sg55
g11
sS'block_loop.thisTrial'
p1232
Nsg69
Vn
sS'block_loop.thisTrialN'
p1233
I0
sg39
F1.7334305902586493
sg34
g752
(S'\x07\xdf\n\x1a\x0e0\x11\x03S\x90'
tRp1234
sa(dp1235
S'trial_loop.thisTrialN'
p1236
I21
sg894
g1045
sS'block_loop.thisIndex'
p1237
g888
sg38
S'left'
p1238
sg58
g62
sS'trial_loop.thisN'
p1239
I21
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p1240
g59
(g98
S'\x15\x00\x00\x00'
tRp1241
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1242
I0
sg903
g1053
sS'block_loop.thisRepN'
p1243
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1244
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p1245
Nsg69
Vn
sS'block_loop.thisTrialN'
p1246
I0
sg39
F2.5167427502055943
sg34
g752
(S'\x07\xdf\n\x1a\x0e0\x17\x0e\xd8\xc8'
tRp1247
sa(dp1248
S'trial_loop.thisTrialN'
p1249
I22
sg894
S'43-mrporky_pork_crackles_redo.png'
p1250
sS'block_loop.thisIndex'
p1251
g888
sg38
S'right'
p1252
sg58
g62
sS'trial_loop.thisN'
p1253
I22
sg33
S'18-mms.png'
p1254
sg63
g64
sS'trial_loop.thisIndex'
p1255
g59
(g98
S'\x16\x00\x00\x00'
tRp1256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1257
I0
sg903
S'18-mms.png'
p1258
sS'block_loop.thisRepN'
p1259
I0
sg906
g1254
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1260
I0
sg908
S'43-mrporky_pork_crackles_redo.png'
p1261
sg55
g11
sS'block_loop.thisTrial'
p1262
Nsg69
Vn
sS'block_loop.thisTrialN'
p1263
I0
sg39
F1.666851030977341
sg34
g752
(S'\x07\xdf\n\x1a\x0e0\x1f\x07\xfe\xe0'
tRp1264
sa(dp1265
S'trial_loop.thisTrialN'
p1266
I23
sg894
S'21-nakd_banana_crunch.png'
p1267
sS'block_loop.thisIndex'
p1268
g888
sg38
S'right'
p1269
sg58
g62
sS'trial_loop.thisN'
p1270
I23
sg33
S'21-nakd_banana_crunch.png'
p1271
sg63
g64
sS'trial_loop.thisIndex'
p1272
g59
(g98
S'\x17\x00\x00\x00'
tRp1273
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1274
I0
sg903
S'1-treacle_cookies.png'
p1275
sS'block_loop.thisRepN'
p1276
I0
sg906
S'1-treacle_cookies.png'
p1277
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1278
I0
sg908
g1271
sg55
g11
sS'block_loop.thisTrial'
p1279
Nsg69
Vn
sS'block_loop.thisTrialN'
p1280
I0
sg39
F1.4168364909046431
sg34
g752
(S'\x07\xdf\n\x1a\x0e0&\x03\x8a@'
tRp1281
sa(dp1282
S'trial_loop.thisTrialN'
p1283
I24
sg894
S'41-peanuts_redo.png'
p1284
sS'block_loop.thisIndex'
p1285
g888
sg38
S'right'
p1286
sg58
g62
sS'trial_loop.thisN'
p1287
I24
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1288
g59
(g98
S'\x18\x00\x00\x00'
tRp1289
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1290
I0
sg903
S'45-chewy_nougat_redo.png'
p1291
sS'block_loop.thisRepN'
p1292
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1293
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1294
Nsg69
Vn
sS'block_loop.thisTrialN'
p1295
I0
sg39
F1.5838816746054363
sg34
g752
(S'\x07\xdf\n\x1a\x0e0,\nH\xd0'
tRp1296
sa(dp1297
S'trial_loop.thisTrialN'
p1298
I25
sg894
S'6-sour_patch_kids.png'
p1299
sS'block_loop.thisIndex'
p1300
g888
sg38
S'right'
p1301
sg58
g62
sS'trial_loop.thisN'
p1302
I25
sg33
S'38-maltesers.png'
p1303
sg63
g64
sS'trial_loop.thisIndex'
p1304
g59
(g98
S'\x19\x00\x00\x00'
tRp1305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1306
I0
sg903
S'38-maltesers.png'
p1307
sS'block_loop.thisRepN'
p1308
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1309
I0
sg908
S'6-sour_patch_kids.png'
p1310
sg55
g11
sS'block_loop.thisTrial'
p1311
Nsg69
Vn
sS'block_loop.thisTrialN'
p1312
I0
sg39
F1.4832606709869651
sg34
g752
(S'\x07\xdf\n\x1a\x0e03\x04h\xe8'
tRp1313
sa(dp1314
S'trial_loop.thisTrialN'
p1315
I26
sg894
S'50-polo.png'
p1316
sS'block_loop.thisIndex'
p1317
g888
sg38
S'right'
p1318
sg58
g62
sS'trial_loop.thisN'
p1319
I26
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p1320
g59
(g98
S'\x1a\x00\x00\x00'
tRp1321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1322
I0
sg903
S'48-twix.png'
p1323
sS'block_loop.thisRepN'
p1324
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1325
I0
sg908
g1216
sg55
g11
sS'block_loop.thisTrial'
p1326
Nsg69
Vn
sS'block_loop.thisTrialN'
p1327
I0
sg39
F2.3167466275590414
sg34
g752
(S'\x07\xdf\n\x1a\x0e09\x0c\\\x10'
tRp1328
sa(dp1329
S'trial_loop.thisTrialN'
p1330
I27
sg894
g1105
sS'block_loop.thisIndex'
p1331
g888
sg38
S'left'
p1332
sg58
g62
sS'trial_loop.thisN'
p1333
I27
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p1334
g59
(g98
S'\x1b\x00\x00\x00'
tRp1335
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1336
I0
sg903
g1113
sS'block_loop.thisRepN'
p1337
I0
sg906
g1109
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1338
I0
sg908
g1116
sg55
g11
sS'block_loop.thisTrial'
p1339
Nsg69
Vn
sS'block_loop.thisTrialN'
p1340
I0
sg39
F2.233321397169675
sg34
g752
(S'\x07\xdf\n\x1a\x0e1\x05\x02eH'
tRp1341
sa(dp1342
S'trial_loop.thisTrialN'
p1343
I28
sg894
g915
sS'block_loop.thisIndex'
p1344
g888
sg38
S'left'
p1345
sg58
g62
sS'trial_loop.thisN'
p1346
I28
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1347
g59
(g98
S'\x1c\x00\x00\x00'
tRp1348
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1349
I0
sg903
g923
sS'block_loop.thisRepN'
p1350
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1351
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1352
Nsg69
Vn
sS'block_loop.thisTrialN'
p1353
I0
sg39
F1.0667680100168582
sg34
g752
(S'\x07\xdf\n\x1a\x0e1\x0c\x06\x83\xf8'
tRp1354
sa(dp1355
S'trial_loop.thisTrialN'
p1356
I29
sg894
g1222
sS'block_loop.thisIndex'
p1357
g888
sg38
S'left'
p1358
sg58
g62
sS'trial_loop.thisN'
p1359
I29
sg33
g1192
sg63
g64
sS'trial_loop.thisIndex'
p1360
g59
(g98
S'\x1d\x00\x00\x00'
tRp1361
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1362
I0
sg903
g1229
sS'block_loop.thisRepN'
p1363
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1364
I0
sg908
g1199
sg55
g11
sS'block_loop.thisTrial'
p1365
Nsg69
Vn
sS'block_loop.thisTrialN'
p1366
I0
sg39
F1.6669265823302339
sg34
g752
(S'\x07\xdf\n\x1a\x0e1\x12\x08\x06\xb0'
tRp1367
sa(dp1368
S'trial_loop.thisTrialN'
p1369
I30
sg894
g895
sS'block_loop.thisIndex'
p1370
g888
sg38
S'left'
p1371
sg58
g62
sS'trial_loop.thisN'
p1372
I30
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1373
g59
(g98
S'\x1e\x00\x00\x00'
tRp1374
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1375
I0
sg903
g904
sS'block_loop.thisRepN'
p1376
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1377
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1378
Nsg69
Vn
sS'block_loop.thisTrialN'
p1379
I0
sg39
F0.93353362519883376
sg34
g752
(S'\x07\xdf\n\x1a\x0e1\x19\x03\x92\x10'
tRp1380
sa(dp1381
S'trial_loop.thisTrialN'
p1382
I31
sg894
S'7-olives.png'
p1383
sS'block_loop.thisIndex'
p1384
g888
sg38
S'left'
p1385
sg58
g62
sS'trial_loop.thisN'
p1386
I31
sg33
S'22-daim.png'
p1387
sg63
g64
sS'trial_loop.thisIndex'
p1388
g59
(g98
S'\x1f\x00\x00\x00'
tRp1389
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1390
I0
sg903
S'22-daim.png'
p1391
sS'block_loop.thisRepN'
p1392
I0
sg906
g1387
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1393
I0
sg908
S'7-olives.png'
p1394
sg55
g11
sS'block_loop.thisTrial'
p1395
Nsg69
Vn
sS'block_loop.thisTrialN'
p1396
I0
sg39
F1.7668331267313988
sg34
g752
(S'\x07\xdf\n\x1a\x0e1\x1f\x02\xf5\xd0'
tRp1397
sa(dp1398
S'trial_loop.thisTrialN'
p1399
I32
sg894
g1062
sS'block_loop.thisIndex'
p1400
g888
sg38
S'right'
p1401
sg58
g62
sS'trial_loop.thisN'
p1402
I32
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p1403
g59
(g98
S' \x00\x00\x00'
tRp1404
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1405
I0
sg903
g1070
sS'block_loop.thisRepN'
p1406
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1407
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p1408
Nsg69
Vn
sS'block_loop.thisTrialN'
p1409
I0
sg39
F1.8502056137222098
sg34
g752
(S'\x07\xdf\n\x1a\x0e1%\x0f.\xb8'
tRp1410
sa(dp1411
S'trial_loop.thisTrialN'
p1412
I33
sg894
S'40-sardines.png'
p1413
sS'block_loop.thisIndex'
p1414
g888
sg38
S'left'
p1415
sg58
g62
sS'trial_loop.thisN'
p1416
I33
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p1417
g59
(g98
S'!\x00\x00\x00'
tRp1418
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1419
I0
sg903
S'5-pineapple.png'
p1420
sS'block_loop.thisRepN'
p1421
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1422
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p1423
Nsg69
Vn
sS'block_loop.thisTrialN'
p1424
I0
sg39
F3.4167184597326923
sg34
g752
(S'\x07\xdf\n\x1a\x0e1,\rY\xf8'
tRp1425
sa(dp1426
S'trial_loop.thisTrialN'
p1427
I34
sg894
g1284
sS'block_loop.thisIndex'
p1428
g888
sg38
S'left'
p1429
sg58
g62
sS'trial_loop.thisN'
p1430
I34
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1431
g59
(g98
S'"\x00\x00\x00'
tRp1432
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1433
I0
sg903
g1291
sS'block_loop.thisRepN'
p1434
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1435
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1436
Nsg69
Vn
sS'block_loop.thisTrialN'
p1437
I0
sg39
F1.7835111593622059
sg34
g752
(S'\x07\xdf\n\x1a\x0e15\x05\t\x10'
tRp1438
sa(dp1439
S'trial_loop.thisTrialN'
p1440
I35
sg894
S'1-treacle_cookies.png'
p1441
sS'block_loop.thisIndex'
p1442
g888
sg38
S'left'
p1443
sg58
g62
sS'trial_loop.thisN'
p1444
I35
sg33
g1277
sg63
g64
sS'trial_loop.thisIndex'
p1445
g59
(g98
S'#\x00\x00\x00'
tRp1446
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1447
I0
sg903
S'21-nakd_banana_crunch.png'
p1448
sS'block_loop.thisRepN'
p1449
I0
sg906
g1277
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1450
I0
sg908
g1271
sg55
g11
sS'block_loop.thisTrial'
p1451
Nsg69
Vn
sS'block_loop.thisTrialN'
p1452
I0
sg39
F2.133502378299454
sg34
g752
(S'\x07\xdf\n\x1a\x0e2\x00\x02>8'
tRp1453
sa(dp1454
S'trial_loop.thisTrialN'
p1455
I36
sg894
S'25-kitkat.png'
p1456
sS'block_loop.thisIndex'
p1457
g888
sg38
S'left'
p1458
sg58
g62
sS'trial_loop.thisN'
p1459
I36
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p1460
g59
(g98
S'$\x00\x00\x00'
tRp1461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1462
I0
sg903
S'31-hobnobs.png'
p1463
sS'block_loop.thisRepN'
p1464
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1465
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p1466
Nsg69
Vn
sS'block_loop.thisTrialN'
p1467
I0
sg39
F2.8168213236140218
sg34
g752
(S'\x07\xdf\n\x1a\x0e2\x07\x04\xb3 '
tRp1468
sa(dp1469
S'trial_loop.thisTrialN'
p1470
I37
sg894
g1122
sS'block_loop.thisIndex'
p1471
g888
sg38
S'left'
p1472
sg58
g62
sS'trial_loop.thisN'
p1473
I37
sg33
g983
sg63
g64
sS'trial_loop.thisIndex'
p1474
g59
(g98
S'%\x00\x00\x00'
tRp1475
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1476
I0
sg903
g1129
sS'block_loop.thisRepN'
p1477
I0
sg906
g989
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1478
I0
sg908
g983
sg55
g11
sS'block_loop.thisTrial'
p1479
Nsg69
Vn
sS'block_loop.thisTrialN'
p1480
I0
sg39
F1.5667509040504228
sg34
g752
(S'\x07\xdf\n\x1a\x0e2\x0f\x02]x'
tRp1481
sa(dp1482
S'trial_loop.thisTrialN'
p1483
I38
sg894
S'36-fig_rolls.png'
p1484
sS'block_loop.thisIndex'
p1485
g888
sg38
S'left'
p1486
sg58
g62
sS'trial_loop.thisN'
p1487
I38
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p1488
g59
(g98
S'&\x00\x00\x00'
tRp1489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1490
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p1491
sS'block_loop.thisRepN'
p1492
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1493
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p1494
Nsg69
Vn
sS'block_loop.thisTrialN'
p1495
I0
sg39
F1.0167532988862149
sg34
g752
(S'\x07\xdf\n\x1a\x0e2\x15\x0b\xbb\xe8'
tRp1496
sa(dp1497
S'trial_loop.thisTrialN'
p1498
I39
sg894
g996
sS'block_loop.thisIndex'
p1499
g888
sg38
S'right'
p1500
sg58
g62
sS'trial_loop.thisN'
p1501
I39
sg33
g1000
sg63
g64
sS'trial_loop.thisIndex'
p1502
g59
(g98
S"'\x00\x00\x00"
tRp1503
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1504
I0
sg903
g1004
sS'block_loop.thisRepN'
p1505
I0
sg906
g1000
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1506
I0
sg908
g1007
sg55
g11
sS'block_loop.thisTrial'
p1507
Nsg69
Vn
sS'block_loop.thisTrialN'
p1508
I0
sg39
F2.4668514871355001
sg34
g752
(S'\x07\xdf\n\x1a\x0e2\x1b\x0cLp'
tRp1509
sa(dp1510
S'trial_loop.thisTrialN'
p1511
I40
sg894
g1441
sS'block_loop.thisIndex'
p1512
g888
sg38
S'left'
p1513
sg58
g62
sS'trial_loop.thisN'
p1514
I40
sg33
g1277
sg63
g64
sS'trial_loop.thisIndex'
p1515
g59
(g98
S'(\x00\x00\x00'
tRp1516
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1517
I0
sg903
g1448
sS'block_loop.thisRepN'
p1518
I0
sg906
g1277
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1519
I0
sg908
g1271
sg55
g11
sS'block_loop.thisTrial'
p1520
Nsg69
Vn
sS'block_loop.thisTrialN'
p1521
I0
sg39
F0.98347706146887504
sg34
g752
(S'\x07\xdf\n\x1a\x0e2#\x04\xba\xf0'
tRp1522
sa(dp1523
S'trial_loop.thisTrialN'
p1524
I41
sg894
S'13-mccoys_steak_crisps.png'
p1525
sS'block_loop.thisIndex'
p1526
g888
sg38
S'left'
p1527
sg58
g62
sS'trial_loop.thisN'
p1528
I41
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1529
g59
(g98
S')\x00\x00\x00'
tRp1530
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1531
I0
sg903
S'3-ellas_strawberries_apples.png'
p1532
sS'block_loop.thisRepN'
p1533
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1534
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1535
Nsg69
Vn
sS'block_loop.thisTrialN'
p1536
I0
sg39
F1.8334468979464873
sg34
g752
(S'\x07\xdf\n\x1a\x0e2)\x05\x0c\xf8'
tRp1537
sa(dp1538
S'trial_loop.thisTrialN'
p1539
I42
sg894
S'16-skips_prawn.png'
p1540
sS'block_loop.thisIndex'
p1541
g888
sg38
S'right'
p1542
sg58
g62
sS'trial_loop.thisN'
p1543
I42
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p1544
g59
(g98
S'*\x00\x00\x00'
tRp1545
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1546
I0
sg903
S'42-mrkipling_lemon_slices.png'
p1547
sS'block_loop.thisRepN'
p1548
I0
sg906
g1109
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1549
I0
sg908
g1116
sg55
g11
sS'block_loop.thisTrial'
p1550
Nsg69
Vn
sS'block_loop.thisTrialN'
p1551
I0
sg39
F0.9499927014539935
sg34
g752
(S'\x07\xdf\n\x1a\x0e20\x02\xf9\xb8'
tRp1552
sa(dp1553
S'trial_loop.thisTrialN'
p1554
I43
sg894
g1267
sS'block_loop.thisIndex'
p1555
g888
sg38
S'right'
p1556
sg58
g62
sS'trial_loop.thisN'
p1557
I43
sg33
g1277
sg63
g64
sS'trial_loop.thisIndex'
p1558
g59
(g98
S'+\x00\x00\x00'
tRp1559
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1560
I0
sg903
g1275
sS'block_loop.thisRepN'
p1561
I0
sg906
g1277
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1562
I0
sg908
g1271
sg55
g11
sS'block_loop.thisTrial'
p1563
Nsg69
Vn
sS'block_loop.thisTrialN'
p1564
I0
sg39
F0.66676721173826081
sg34
g752
(S'\x07\xdf\n\x1a\x0e26\x02\x98\x10'
tRp1565
sa(dp1566
S'trial_loop.thisTrialN'
p1567
I44
sg894
g932
sS'block_loop.thisIndex'
p1568
g888
sg38
S'left'
p1569
sg58
g62
sS'trial_loop.thisN'
p1570
I44
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1571
g59
(g98
S',\x00\x00\x00'
tRp1572
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1573
I0
sg903
g940
sS'block_loop.thisRepN'
p1574
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1575
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1576
Nsg69
Vn
sS'block_loop.thisTrialN'
p1577
I0
sg39
F1.4838559586351039
sg34
g752
(S'\x07\xdf\n\x1a\x0e2;\rm\x80'
tRp1578
sa(dp1579
S'trial_loop.thisTrialN'
p1580
I45
sg894
g1540
sS'block_loop.thisIndex'
p1581
g888
sg38
S'right'
p1582
sg58
g62
sS'trial_loop.thisN'
p1583
I45
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p1584
g59
(g98
S'-\x00\x00\x00'
tRp1585
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1586
I0
sg903
g1547
sS'block_loop.thisRepN'
p1587
I0
sg906
g1109
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1588
I0
sg908
g1116
sg55
g11
sS'block_loop.thisTrial'
p1589
Nsg69
Vn
sS'block_loop.thisTrialN'
p1590
I0
sg39
F0.80007173102148954
sg34
g752
(S'\x07\xdf\n\x1a\x0e3\x06\x06\x1eh'
tRp1591
sa(dp1592
S'trial_loop.thisTrialN'
p1593
I46
sg894
g1267
sS'block_loop.thisIndex'
p1594
g888
sg38
S'right'
p1595
sg58
g62
sS'trial_loop.thisN'
p1596
I46
sg33
g1277
sg63
g64
sS'trial_loop.thisIndex'
p1597
g59
(g98
S'.\x00\x00\x00'
tRp1598
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1599
I0
sg903
g1275
sS'block_loop.thisRepN'
p1600
I0
sg906
g1277
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1601
I0
sg908
g1271
sg55
g11
sS'block_loop.thisTrial'
p1602
Nsg69
Vn
sS'block_loop.thisTrialN'
p1603
I0
sg39
F0.80019660457946884
sg34
g752
(S'\x07\xdf\n\x1a\x0e3\x0c\x03\x95\xf8'
tRp1604
sa(dp1605
S'trial_loop.thisTrialN'
p1606
I47
sg894
S'4-corn.png'
p1607
sS'block_loop.thisIndex'
p1608
g888
sg38
S'left'
p1609
sg58
g62
sS'trial_loop.thisN'
p1610
I47
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p1611
g59
(g98
S'/\x00\x00\x00'
tRp1612
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1613
I0
sg903
S'10-bounty_redo.png'
p1614
sS'block_loop.thisRepN'
p1615
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1616
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p1617
Nsg69
Vn
sS'block_loop.thisTrialN'
p1618
I0
sg39
F1.7833409549912176
sg34
g752
(S'\x07\xdf\n\x1a\x0e3\x12\x00\xd2\xf0'
tRp1619
sa(dp1620
S'trial_loop.thisTrialN'
p1621
I48
sg894
g1383
sS'block_loop.thisIndex'
p1622
g888
sg38
S'right'
p1623
sg58
g62
sS'trial_loop.thisN'
p1624
I48
sg33
g1387
sg63
g64
sS'trial_loop.thisIndex'
p1625
g59
(g98
S'0\x00\x00\x00'
tRp1626
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1627
I0
sg903
g1391
sS'block_loop.thisRepN'
p1628
I0
sg906
g1387
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1629
I0
sg908
g1394
sg55
g11
sS'block_loop.thisTrial'
p1630
Nsg69
Vn
sS'block_loop.thisTrialN'
p1631
I0
sg39
F2.3000760075137805
sg34
g752
(S'\x07\xdf\n\x1a\x0e3\x18\rJX'
tRp1632
sa(dp1633
S'trial_loop.thisTrialN'
p1634
I49
sg894
g1316
sS'block_loop.thisIndex'
p1635
g888
sg38
S'right'
p1636
sg58
g62
sS'trial_loop.thisN'
p1637
I49
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p1638
g59
(g98
S'1\x00\x00\x00'
tRp1639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1640
I0
sg903
g1323
sS'block_loop.thisRepN'
p1641
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1642
I0
sg908
g1216
sg55
g11
sS'block_loop.thisTrial'
p1643
Nsg69
Vn
sS'block_loop.thisTrialN'
p1644
I0
sg39
F1.9838696434089798
sg34
g752
(S'\x07\xdf\n\x1a\x0e3 \x03Wx'
tRp1645
sa(dp1646
S'trial_loop.thisTrialN'
p1647
I50
sg894
g1484
sS'block_loop.thisIndex'
p1648
g888
sg38
S'left'
p1649
sg58
g62
sS'trial_loop.thisN'
p1650
I50
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p1651
g59
(g98
S'2\x00\x00\x00'
tRp1652
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1653
I0
sg903
g1491
sS'block_loop.thisRepN'
p1654
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1655
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p1656
Nsg69
Vn
sS'block_loop.thisTrialN'
p1657
I0
sg39
F1.1167721724686999
sg34
g752
(S"\x07\xdf\n\x1a\x0e3'\x03g\x18"
tRp1658
sa(dp1659
S'trial_loop.thisTrialN'
p1660
I51
sg894
g1456
sS'block_loop.thisIndex'
p1661
g888
sg38
S'right'
p1662
sg58
g62
sS'trial_loop.thisN'
p1663
I51
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p1664
g59
(g98
S'3\x00\x00\x00'
tRp1665
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1666
I0
sg903
g1463
sS'block_loop.thisRepN'
p1667
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1668
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p1669
Nsg69
Vn
sS'block_loop.thisTrialN'
p1670
I0
sg39
F3.0665735721941019
sg34
g752
(S'\x07\xdf\n\x1a\x0e3-\x05\xdf\xe8'
tRp1671
sa(dp1672
S'trial_loop.thisTrialN'
p1673
I52
sg894
S'38-maltesers.png'
p1674
sS'block_loop.thisIndex'
p1675
g888
sg38
S'left'
p1676
sg58
g62
sS'trial_loop.thisN'
p1677
I52
sg33
g1310
sg63
g64
sS'trial_loop.thisIndex'
p1678
g59
(g98
S'4\x00\x00\x00'
tRp1679
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1680
I0
sg903
S'6-sour_patch_kids.png'
p1681
sS'block_loop.thisRepN'
p1682
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1683
I0
sg908
g1310
sg55
g11
sS'block_loop.thisTrial'
p1684
Nsg69
Vn
sS'block_loop.thisTrialN'
p1685
I0
sg39
F1.1331759394306573
sg34
g752
(S'\x07\xdf\n\x1a\x0e35\x07Z\xd0'
tRp1686
sa(dp1687
S'trial_loop.thisTrialN'
p1688
I53
sg894
g1171
sS'block_loop.thisIndex'
p1689
g888
sg38
S'right'
p1690
sg58
g62
sS'trial_loop.thisN'
p1691
I53
sg33
g1175
sg63
g64
sS'trial_loop.thisIndex'
p1692
g59
(g98
S'5\x00\x00\x00'
tRp1693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1694
I0
sg903
g1179
sS'block_loop.thisRepN'
p1695
I0
sg906
g1175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1696
I0
sg908
g1182
sg55
g11
sS'block_loop.thisTrial'
p1697
Nsg69
Vn
sS'block_loop.thisTrialN'
p1698
I0
sg39
F1.450084788575623
sg34
g752
(S'\x07\xdf\n\x1a\x0e3;\t\xd3\xa0'
tRp1699
sa(dp1700
S'trial_loop.thisTrialN'
p1701
I54
sg894
g1188
sS'block_loop.thisIndex'
p1702
g888
sg38
S'left'
p1703
sg58
g62
sS'trial_loop.thisN'
p1704
I54
sg33
g1192
sg63
g64
sS'trial_loop.thisIndex'
p1705
g59
(g98
S'6\x00\x00\x00'
tRp1706
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1707
I0
sg903
g1196
sS'block_loop.thisRepN'
p1708
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1709
I0
sg908
g1199
sg55
g11
sS'block_loop.thisTrial'
p1710
Nsg69
Vn
sS'block_loop.thisTrialN'
p1711
I0
sg39
F1.600205898821514
sg34
g752
(S'\x07\xdf\n\x1a\x0e4\x06\x02\x07\x88'
tRp1712
sa(dp1713
S'trial_loop.thisTrialN'
p1714
I55
sg894
g962
sS'block_loop.thisIndex'
p1715
g888
sg38
S'left'
p1716
sg58
g62
sS'trial_loop.thisN'
p1717
I55
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p1718
g59
(g98
S'7\x00\x00\x00'
tRp1719
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1720
I0
sg903
g970
sS'block_loop.thisRepN'
p1721
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1722
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p1723
Nsg69
Vn
sS'block_loop.thisTrialN'
p1724
I0
sg39
F1.6335146375758995
sg34
g752
(S'\x07\xdf\n\x1a\x0e4\x0c\x0b\xa4x'
tRp1725
sa(dp1726
S'trial_loop.thisTrialN'
p1727
I56
sg894
g1105
sS'block_loop.thisIndex'
p1728
g888
sg38
S'left'
p1729
sg58
g62
sS'trial_loop.thisN'
p1730
I56
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p1731
g59
(g98
S'8\x00\x00\x00'
tRp1732
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1733
I0
sg903
g1113
sS'block_loop.thisRepN'
p1734
I0
sg906
g1109
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1735
I0
sg908
g1116
sg55
g11
sS'block_loop.thisTrial'
p1736
Nsg69
Vn
sS'block_loop.thisTrialN'
p1737
I0
sg39
F0.81671355602247786
sg34
g752
(S'\x07\xdf\n\x1a\x0e4\x13\x06x@'
tRp1738
sa(dp1739
S'trial_loop.thisTrialN'
p1740
I57
sg894
g1205
sS'block_loop.thisIndex'
p1741
g888
sg38
S'left'
p1742
sg58
g62
sS'trial_loop.thisN'
p1743
I57
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p1744
g59
(g98
S'9\x00\x00\x00'
tRp1745
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1746
I0
sg903
g1213
sS'block_loop.thisRepN'
p1747
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1748
I0
sg908
g1216
sg55
g11
sS'block_loop.thisTrial'
p1749
Nsg69
Vn
sS'block_loop.thisTrialN'
p1750
I0
sg39
F2.7002167896207538
sg34
g752
(S'\x07\xdf\n\x1a\x0e4\x19\x04.P'
tRp1751
sa(dp1752
S'trial_loop.thisTrialN'
p1753
I58
sg894
S'46-pistachios.png'
p1754
sS'block_loop.thisIndex'
p1755
g888
sg38
S'left'
p1756
sg58
g62
sS'trial_loop.thisN'
p1757
I58
sg33
g1175
sg63
g64
sS'trial_loop.thisIndex'
p1758
g59
(g98
S':\x00\x00\x00'
tRp1759
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1760
I0
sg903
S'29-beans.png'
p1761
sS'block_loop.thisRepN'
p1762
I0
sg906
g1175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1763
I0
sg908
g1182
sg55
g11
sS'block_loop.thisTrial'
p1764
Nsg69
Vn
sS'block_loop.thisTrialN'
p1765
I0
sg39
F3.4333856585853937
sg34
g752
(S'\x07\xdf\n\x1a\x0e4!\x00.\xe0'
tRp1766
sa(dp1767
S'trial_loop.thisTrialN'
p1768
I59
sg894
g932
sS'block_loop.thisIndex'
p1769
g888
sg38
S'left'
p1770
sg58
g62
sS'trial_loop.thisN'
p1771
I59
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1772
g59
(g98
S';\x00\x00\x00'
tRp1773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1774
I0
sg903
g940
sS'block_loop.thisRepN'
p1775
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1776
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1777
Nsg69
Vn
sS'block_loop.thisTrialN'
p1778
I0
sg39
F1.8001381591930112
sg34
g752
(S'\x07\xdf\n\x1a\x0e4)\x07^\xb8'
tRp1779
sa(dp1780
S'trial_loop.thisTrialN'
p1781
I60
sg894
g1540
sS'block_loop.thisIndex'
p1782
g888
sg38
S'right'
p1783
sg58
g62
sS'trial_loop.thisN'
p1784
I60
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p1785
g59
(g98
S'<\x00\x00\x00'
tRp1786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1787
I0
sg903
g1547
sS'block_loop.thisRepN'
p1788
I0
sg906
g1109
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1789
I0
sg908
g1116
sg55
g11
sS'block_loop.thisTrial'
p1790
Nsg69
Vn
sS'block_loop.thisTrialN'
p1791
I0
sg39
F0.7834119447543344
sg34
g752
(S'\x07\xdf\n\x1a\x0e40\x04\xd2`'
tRp1792
sa(dp1793
S'trial_loop.thisTrialN'
p1794
I61
sg894
g1441
sS'block_loop.thisIndex'
p1795
g888
sg38
S'left'
p1796
sg58
g62
sS'trial_loop.thisN'
p1797
I61
sg33
g1277
sg63
g64
sS'trial_loop.thisIndex'
p1798
g59
(g98
S'=\x00\x00\x00'
tRp1799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1800
I0
sg903
g1448
sS'block_loop.thisRepN'
p1801
I0
sg906
g1277
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1802
I0
sg908
g1271
sg55
g11
sS'block_loop.thisTrial'
p1803
Nsg69
Vn
sS'block_loop.thisTrialN'
p1804
I0
sg39
F0.8335329979800008
sg34
g752
(S'\x07\xdf\n\x1a\x0e46\x02\x0bp'
tRp1805
sa(dp1806
S'trial_loop.thisTrialN'
p1807
I62
sg894
g979
sS'block_loop.thisIndex'
p1808
g888
sg38
S'right'
p1809
sg58
g62
sS'trial_loop.thisN'
p1810
I62
sg33
g989
sg63
g64
sS'trial_loop.thisIndex'
p1811
g59
(g98
S'>\x00\x00\x00'
tRp1812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1813
I0
sg903
g987
sS'block_loop.thisRepN'
p1814
I0
sg906
g989
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1815
I0
sg908
g983
sg55
g11
sS'block_loop.thisTrial'
p1816
Nsg69
Vn
sS'block_loop.thisTrialN'
p1817
I0
sg39
F1.0835190281077303
sg34
g752
(S'\x07\xdf\n\x1a\x0e5\x00\x00\x00\x00'
tRp1818
sa(dp1819
S'trial_loop.thisTrialN'
p1820
I63
sg894
g1299
sS'block_loop.thisIndex'
p1821
g888
sg38
S'right'
p1822
sg58
g62
sS'trial_loop.thisN'
p1823
I63
sg33
g1303
sg63
g64
sS'trial_loop.thisIndex'
p1824
g59
(g98
S'?\x00\x00\x00'
tRp1825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1826
I0
sg903
g1307
sS'block_loop.thisRepN'
p1827
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1828
I0
sg908
g1310
sg55
g11
sS'block_loop.thisTrial'
p1829
Nsg69
Vn
sS'block_loop.thisTrialN'
p1830
I0
sg39
F1.8665754538496913
sg34
g752
(S'\x07\xdf\n\x1a\x0e5\x06\x01\xc18'
tRp1831
sa(dp1832
S'trial_loop.thisTrialN'
p1833
I64
sg894
g1525
sS'block_loop.thisIndex'
p1834
g888
sg38
S'right'
p1835
sg58
g62
sS'trial_loop.thisN'
p1836
I64
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1837
g59
(g98
S'@\x00\x00\x00'
tRp1838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1839
I0
sg903
g1532
sS'block_loop.thisRepN'
p1840
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1841
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1842
Nsg69
Vn
sS'block_loop.thisTrialN'
p1843
I0
sg39
F0.93356299044171465
sg34
g752
(S"\x07\xdf\n\x1a\x0e5\r\x00'\x10"
tRp1844
sa(dp1845
S'trial_loop.thisTrialN'
p1846
I65
sg894
g1484
sS'block_loop.thisIndex'
p1847
g888
sg38
S'left'
p1848
sg58
g62
sS'trial_loop.thisN'
p1849
I65
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p1850
g59
(g98
S'A\x00\x00\x00'
tRp1851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1852
I0
sg903
g1491
sS'block_loop.thisRepN'
p1853
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1854
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p1855
Nsg69
Vn
sS'block_loop.thisTrialN'
p1856
I0
sg39
F0.75020185040921206
sg34
g752
(S'\x07\xdf\n\x1a\x0e5\x12\x0e\xcd\x10'
tRp1857
sa(dp1858
S'trial_loop.thisTrialN'
p1859
I66
sg894
g895
sS'block_loop.thisIndex'
p1860
g888
sg38
S'left'
p1861
sg58
g62
sS'trial_loop.thisN'
p1862
I66
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1863
g59
(g98
S'B\x00\x00\x00'
tRp1864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1865
I0
sg903
g904
sS'block_loop.thisRepN'
p1866
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1867
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1868
Nsg69
Vn
sS'block_loop.thisTrialN'
p1869
I0
sg39
F0.76688187873696734
sg34
g752
(S'\x07\xdf\n\x1a\x0e5\x18\x0b\x8d\x08'
tRp1870
sa(dp1871
S'trial_loop.thisTrialN'
p1872
I67
sg894
g915
sS'block_loop.thisIndex'
p1873
g888
sg38
S'left'
p1874
sg58
g62
sS'trial_loop.thisN'
p1875
I67
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1876
g59
(g98
S'C\x00\x00\x00'
tRp1877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1878
I0
sg903
g923
sS'block_loop.thisRepN'
p1879
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1880
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1881
Nsg69
Vn
sS'block_loop.thisTrialN'
p1882
I0
sg39
F2.0500697353245414
sg34
g752
(S'\x07\xdf\n\x1a\x0e5\x1e\x08\x8b\x80'
tRp1883
sa(dp1884
S'trial_loop.thisTrialN'
p1885
I68
sg894
g1456
sS'block_loop.thisIndex'
p1886
g888
sg38
S'right'
p1887
sg58
g62
sS'trial_loop.thisN'
p1888
I68
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p1889
g59
(g98
S'D\x00\x00\x00'
tRp1890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1891
I0
sg903
g1463
sS'block_loop.thisRepN'
p1892
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1893
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p1894
Nsg69
Vn
sS'block_loop.thisTrialN'
p1895
I0
sg39
F2.283423348731958
sg34
g752
(S'\x07\xdf\n\x1a\x0e5%\t\xcf\xb8'
tRp1896
sa(dp1897
S'trial_loop.thisTrialN'
p1898
I69
sg894
g1441
sS'block_loop.thisIndex'
p1899
g888
sg38
S'left'
p1900
sg58
g62
sS'trial_loop.thisN'
p1901
I69
sg33
g1277
sg63
g64
sS'trial_loop.thisIndex'
p1902
g59
(g98
S'E\x00\x00\x00'
tRp1903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1904
I0
sg903
g1448
sS'block_loop.thisRepN'
p1905
I0
sg906
g1277
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1906
I0
sg908
g1271
sg55
g11
sS'block_loop.thisTrial'
p1907
Nsg69
Vn
sS'block_loop.thisTrialN'
p1908
I0
sg39
F0.61687737416559685
sg34
g752
(S'\x07\xdf\n\x1a\x0e5,\x0e\xa2\x18'
tRp1909
sa(dp1910
S'trial_loop.thisTrialN'
p1911
I70
sg894
g979
sS'block_loop.thisIndex'
p1912
g888
sg38
S'right'
p1913
sg58
g62
sS'trial_loop.thisN'
p1914
I70
sg33
g989
sg63
g64
sS'trial_loop.thisIndex'
p1915
g59
(g98
S'F\x00\x00\x00'
tRp1916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1917
I0
sg903
g987
sS'block_loop.thisRepN'
p1918
I0
sg906
g989
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1919
I0
sg908
g983
sg55
g11
sS'block_loop.thisTrial'
p1920
Nsg69
Vn
sS'block_loop.thisTrialN'
p1921
I0
sg39
F1.5000786874479672
sg34
g752
(S'\x07\xdf\n\x1a\x0e52\tC\x18'
tRp1922
sa(dp1923
S'trial_loop.thisTrialN'
p1924
I71
sg894
g1383
sS'block_loop.thisIndex'
p1925
g888
sg38
S'right'
p1926
sg58
g62
sS'trial_loop.thisN'
p1927
I71
sg33
g1387
sg63
g64
sS'trial_loop.thisIndex'
p1928
g59
(g98
S'G\x00\x00\x00'
tRp1929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1930
I0
sg903
g1391
sS'block_loop.thisRepN'
p1931
I0
sg906
g1387
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1932
I0
sg908
g1394
sg55
g11
sS'block_loop.thisTrial'
p1933
Nsg69
Vn
sS'block_loop.thisTrialN'
p1934
I0
sg39
F1.7332794875510444
sg34
g752
(S'\x07\xdf\n\x1a\x0e59\x02.\x98'
tRp1935
sa(dp1936
S'trial_loop.thisTrialN'
p1937
I72
sg894
S'18-mms.png'
p1938
sS'block_loop.thisIndex'
p1939
g888
sg38
S'left'
p1940
sg58
g62
sS'trial_loop.thisN'
p1941
I72
sg33
g1254
sg63
g64
sS'trial_loop.thisIndex'
p1942
g59
(g98
S'H\x00\x00\x00'
tRp1943
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1944
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p1945
sS'block_loop.thisRepN'
p1946
I0
sg906
g1254
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1947
I0
sg908
g1261
sg55
g11
sS'block_loop.thisTrial'
p1948
Nsg69
Vn
sS'block_loop.thisTrialN'
p1949
I0
sg39
F2.2667649879631426
sg34
g752
(S'\x07\xdf\n\x1a\x0e6\x03\r\xeeh'
tRp1950
sa(dp1951
S'trial_loop.thisTrialN'
p1952
I73
sg894
g1105
sS'block_loop.thisIndex'
p1953
g888
sg38
S'left'
p1954
sg58
g62
sS'trial_loop.thisN'
p1955
I73
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p1956
g59
(g98
S'I\x00\x00\x00'
tRp1957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1958
I0
sg903
g1113
sS'block_loop.thisRepN'
p1959
I0
sg906
g1109
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1960
I0
sg908
g1116
sg55
g11
sS'block_loop.thisTrial'
p1961
Nsg69
Vn
sS'block_loop.thisTrialN'
p1962
I0
sg39
F0.78334124009143125
sg34
g752
(S'\x07\xdf\n\x1a\x0e6\x0b\x03C\xf0'
tRp1963
sa(dp1964
S'trial_loop.thisTrialN'
p1965
I74
sg894
g1028
sS'block_loop.thisIndex'
p1966
g888
sg38
S'right'
p1967
sg58
g62
sS'trial_loop.thisN'
p1968
I74
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p1969
g59
(g98
S'J\x00\x00\x00'
tRp1970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1971
I0
sg903
g1036
sS'block_loop.thisRepN'
p1972
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1973
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p1974
Nsg69
Vn
sS'block_loop.thisTrialN'
p1975
I0
sg39
F2.0338681038720097
sg34
g752
(S'\x07\xdf\n\x1a\x0e6\x11\x00\x80\xe8'
tRp1976
sa(dp1977
S'trial_loop.thisTrialN'
p1978
I75
sg894
g1222
sS'block_loop.thisIndex'
p1979
g888
sg38
S'right'
p1980
sg58
g62
sS'trial_loop.thisN'
p1981
I75
sg33
g1192
sg63
g64
sS'trial_loop.thisIndex'
p1982
g59
(g98
S'K\x00\x00\x00'
tRp1983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1984
I0
sg903
g1229
sS'block_loop.thisRepN'
p1985
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1986
I0
sg908
g1199
sg55
g11
sS'block_loop.thisTrial'
p1987
Nsg69
Vn
sS'block_loop.thisTrialN'
p1988
I0
sg39
F1.8167540401436781
sg34
g752
(S'\x07\xdf\n\x1a\x0e6\x18\x01\x86\xa0'
tRp1989
sa(dp1990
S'trial_loop.thisTrialN'
p1991
I76
sg894
g1171
sS'block_loop.thisIndex'
p1992
g888
sg38
S'left'
p1993
sg58
g62
sS'trial_loop.thisN'
p1994
I76
sg33
g1182
sg63
g64
sS'trial_loop.thisIndex'
p1995
g59
(g98
S'L\x00\x00\x00'
tRp1996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1997
I0
sg903
g1179
sS'block_loop.thisRepN'
p1998
I0
sg906
g1175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1999
I0
sg908
g1182
sg55
g11
sS'block_loop.thisTrial'
p2000
Nsg69
Vn
sS'block_loop.thisTrialN'
p2001
I0
sg39
F1.383431958735855
sg34
g752
(S'\x07\xdf\n\x1a\x0e6\x1e\x0ew '
tRp2002
sa(dp2003
S'trial_loop.thisTrialN'
p2004
I77
sg894
g1250
sS'block_loop.thisIndex'
p2005
g888
sg38
S'right'
p2006
sg58
g62
sS'trial_loop.thisN'
p2007
I77
sg33
g1254
sg63
g64
sS'trial_loop.thisIndex'
p2008
g59
(g98
S'M\x00\x00\x00'
tRp2009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2010
I0
sg903
g1258
sS'block_loop.thisRepN'
p2011
I0
sg906
g1254
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2012
I0
sg908
g1261
sg55
g11
sS'block_loop.thisTrial'
p2013
Nsg69
Vn
sS'block_loop.thisTrialN'
p2014
I0
sg39
F1.3167948093650921
sg34
g752
(S'\x07\xdf\n\x1a\x0e6%\x05~@'
tRp2015
sa(dp2016
S'trial_loop.thisTrialN'
p2017
I78
sg894
g1383
sS'block_loop.thisIndex'
p2018
g888
sg38
S'left'
p2019
sg58
g62
sS'trial_loop.thisN'
p2020
I78
sg33
g1387
sg63
g64
sS'trial_loop.thisIndex'
p2021
g59
(g98
S'N\x00\x00\x00'
tRp2022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2023
I0
sg903
g1391
sS'block_loop.thisRepN'
p2024
I0
sg906
g1387
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2025
I0
sg908
g1394
sg55
g11
sS'block_loop.thisTrial'
p2026
Nsg69
Vn
sS'block_loop.thisTrialN'
p2027
I0
sg39
F0.80010708335248637
sg34
g752
(S'\x07\xdf\n\x1a\x0e6+\n\xd1\x88'
tRp2028
sa(dp2029
S'trial_loop.thisTrialN'
p2030
I79
sg894
g1062
sS'block_loop.thisIndex'
p2031
g888
sg38
S'right'
p2032
sg58
g62
sS'trial_loop.thisN'
p2033
I79
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p2034
g59
(g98
S'O\x00\x00\x00'
tRp2035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2036
I0
sg903
g1070
sS'block_loop.thisRepN'
p2037
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2038
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p2039
Nsg69
Vn
sS'block_loop.thisTrialN'
p2040
I0
sg39
F1.1002118859105394
sg34
g752
(S'\x07\xdf\n\x1a\x0e61\x08I\x18'
tRp2041
sa(dp2042
S'trial_loop.thisTrialN'
p2043
I80
sg894
g1045
sS'block_loop.thisIndex'
p2044
g888
sg38
S'right'
p2045
sg58
g62
sS'trial_loop.thisN'
p2046
I80
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p2047
g59
(g98
S'P\x00\x00\x00'
tRp2048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2049
I0
sg903
g1053
sS'block_loop.thisRepN'
p2050
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2051
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p2052
Nsg69
Vn
sS'block_loop.thisTrialN'
p2053
I0
sg39
F1.5501806390102502
sg34
g752
(S'\x07\xdf\n\x1a\x0e67\nH\xd0'
tRp2054
sa(dp2055
S'trial_loop.thisTrialN'
p2056
I81
sg894
S'30-spaghetti_hoops.png'
p2057
sS'block_loop.thisIndex'
p2058
g888
sg38
S'right'
p2059
sg58
g62
sS'trial_loop.thisN'
p2060
I81
sg33
g1000
sg63
g64
sS'trial_loop.thisIndex'
p2061
g59
(g98
S'Q\x00\x00\x00'
tRp2062
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2063
I0
sg903
S'19-caramello_redo.png'
p2064
sS'block_loop.thisRepN'
p2065
I0
sg906
g1000
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2066
I0
sg908
g1007
sg55
g11
sS'block_loop.thisTrial'
p2067
Nsg69
Vn
sS'block_loop.thisTrialN'
p2068
I0
sg39
F1.4834214670754591
sg34
g752
(S'\x07\xdf\n\x1a\x0e7\x02\x03\xeb\xe8'
tRp2069
sa(dp2070
S'trial_loop.thisTrialN'
p2071
I82
sg894
S'22-daim.png'
p2072
sS'block_loop.thisIndex'
p2073
g888
sg38
S'left'
p2074
sg58
g62
sS'trial_loop.thisN'
p2075
I82
sg33
g1387
sg63
g64
sS'trial_loop.thisIndex'
p2076
g59
(g98
S'R\x00\x00\x00'
tRp2077
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2078
I0
sg903
S'7-olives.png'
p2079
sS'block_loop.thisRepN'
p2080
I0
sg906
g1387
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2081
I0
sg908
g1394
sg55
g11
sS'block_loop.thisTrial'
p2082
Nsg69
Vn
sS'block_loop.thisTrialN'
p2083
I0
sg39
F2.6334955359134256
sg34
g752
(S'\x07\xdf\n\x1a\x0e7\x08\x0b\xdf\x10'
tRp2084
sa(dp2085
S'trial_loop.thisTrialN'
p2086
I83
sg894
g2057
sS'block_loop.thisIndex'
p2087
g888
sg38
S'right'
p2088
sg58
g62
sS'trial_loop.thisN'
p2089
I83
sg33
g1000
sg63
g64
sS'trial_loop.thisIndex'
p2090
g59
(g98
S'S\x00\x00\x00'
tRp2091
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2092
I0
sg903
g2064
sS'block_loop.thisRepN'
p2093
I0
sg906
g1000
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2094
I0
sg908
g1007
sg55
g11
sS'block_loop.thisTrial'
p2095
Nsg69
Vn
sS'block_loop.thisTrialN'
p2096
I0
sg39
F1.4168541670705963
sg34
g752
(S'\x07\xdf\n\x1a\x0e7\x10\x06\xae\xf0'
tRp2097
sa(dp2098
S'trial_loop.thisTrialN'
p2099
I84
sg894
g1316
sS'block_loop.thisIndex'
p2100
g888
sg38
S'right'
p2101
sg58
g62
sS'trial_loop.thisN'
p2102
I84
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p2103
g59
(g98
S'T\x00\x00\x00'
tRp2104
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2105
I0
sg903
g1323
sS'block_loop.thisRepN'
p2106
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2107
I0
sg908
g1216
sg55
g11
sS'block_loop.thisTrial'
p2108
Nsg69
Vn
sS'block_loop.thisTrialN'
p2109
I0
sg39
F1.7001931263666847
sg34
g752
(S'\x07\xdf\n\x1a\x0e7\x16\r\xac\x00'
tRp2110
sa(dp2111
S'trial_loop.thisTrialN'
p2112
I85
sg894
g1028
sS'block_loop.thisIndex'
p2113
g888
sg38
S'right'
p2114
sg58
g62
sS'trial_loop.thisN'
p2115
I85
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p2116
g59
(g98
S'U\x00\x00\x00'
tRp2117
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2118
I0
sg903
g1036
sS'block_loop.thisRepN'
p2119
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2120
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p2121
Nsg69
Vn
sS'block_loop.thisTrialN'
p2122
I0
sg39
F0.86676732577871007
sg34
g752
(S'\x07\xdf\n\x1a\x0e7\x1d\tu\xe0'
tRp2123
sa(dp2124
S'trial_loop.thisTrialN'
p2125
I86
sg894
g1938
sS'block_loop.thisIndex'
p2126
g888
sg38
S'left'
p2127
sg58
g62
sS'trial_loop.thisN'
p2128
I86
sg33
g1261
sg63
g64
sS'trial_loop.thisIndex'
p2129
g59
(g98
S'V\x00\x00\x00'
tRp2130
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2131
I0
sg903
g1945
sS'block_loop.thisRepN'
p2132
I0
sg906
g1254
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2133
I0
sg908
g1261
sg55
g11
sS'block_loop.thisTrial'
p2134
Nsg69
Vn
sS'block_loop.thisTrialN'
p2135
I0
sg39
F0.93352250632051437
sg34
g752
(S'\x07\xdf\n\x1a\x0e7#\x08\x1e '
tRp2136
sa(dp2137
S'trial_loop.thisTrialN'
p2138
I87
sg894
g1137
sS'block_loop.thisIndex'
p2139
g888
sg38
S'right'
p2140
sg58
g62
sS'trial_loop.thisN'
p2141
I87
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p2142
g59
(g98
S'W\x00\x00\x00'
tRp2143
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2144
I0
sg903
g1145
sS'block_loop.thisRepN'
p2145
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2146
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p2147
Nsg69
Vn
sS'block_loop.thisTrialN'
p2148
I0
sg39
F1.2500786874479672
sg34
g752
(S'\x07\xdf\n\x1a\x0e7)\x07\x81\xe0'
tRp2149
sa(dp2150
S'trial_loop.thisTrialN'
p2151
I88
sg894
g1250
sS'block_loop.thisIndex'
p2152
g888
sg38
S'right'
p2153
sg58
g62
sS'trial_loop.thisN'
p2154
I88
sg33
g1254
sg63
g64
sS'trial_loop.thisIndex'
p2155
g59
(g98
S'X\x00\x00\x00'
tRp2156
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2157
I0
sg903
g1258
sS'block_loop.thisRepN'
p2158
I0
sg906
g1254
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2159
I0
sg908
g1261
sg55
g11
sS'block_loop.thisTrial'
p2160
Nsg69
Vn
sS'block_loop.thisTrialN'
p2161
I0
sg39
F0.96690137953919475
sg34
g752
(S'\x07\xdf\n\x1a\x0e7/\x0b\xdf\x10'
tRp2162
sa(dp2163
S'trial_loop.thisTrialN'
p2164
I89
sg894
g1674
sS'block_loop.thisIndex'
p2165
g888
sg38
S'left'
p2166
sg58
g62
sS'trial_loop.thisN'
p2167
I89
sg33
g1303
sg63
g64
sS'trial_loop.thisIndex'
p2168
g59
(g98
S'Y\x00\x00\x00'
tRp2169
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2170
I0
sg903
g1681
sS'block_loop.thisRepN'
p2171
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2172
I0
sg908
g1310
sg55
g11
sS'block_loop.thisTrial'
p2173
Nsg69
Vn
sS'block_loop.thisTrialN'
p2174
I0
sg39
F1.316612060618354
sg34
g752
(S'\x07\xdf\n\x1a\x0e75\x0b\xbb\xe8'
tRp2175
sa(dp2176
S'trial_loop.thisTrialN'
p2177
I90
sg894
g979
sS'block_loop.thisIndex'
p2178
g888
sg38
S'left'
p2179
sg58
g62
sS'trial_loop.thisN'
p2180
I90
sg33
g989
sg63
g64
sS'trial_loop.thisIndex'
p2181
g59
(g98
S'Z\x00\x00\x00'
tRp2182
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2183
I0
sg903
g987
sS'block_loop.thisRepN'
p2184
I0
sg906
g989
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2185
I0
sg908
g983
sg55
g11
sS'block_loop.thisTrial'
p2186
Nsg69
Vn
sS'block_loop.thisTrialN'
p2187
I0
sg39
F2.9832273143520069
sg34
g752
(S'\x07\xdf\n\x1a\x0e8\x00\x01\xcc\xf0'
tRp2188
sa(dp2189
S'trial_loop.thisTrialN'
p2190
I91
sg894
S'26-walkers_smoky_bacon.png'
p2191
sS'block_loop.thisIndex'
p2192
g888
sg38
S'right'
p2193
sg58
g62
sS'trial_loop.thisN'
p2194
I91
sg33
S'44-crunch.png'
p2195
sg63
g64
sS'trial_loop.thisIndex'
p2196
g59
(g98
S'[\x00\x00\x00'
tRp2197
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2198
I0
sg903
S'44-crunch.png'
p2199
sS'block_loop.thisRepN'
p2200
I0
sg906
g2195
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2201
I0
sg908
S'26-walkers_smoky_bacon.png'
p2202
sg55
g11
sS'block_loop.thisTrial'
p2203
Nsg69
Vn
sS'block_loop.thisTrialN'
p2204
I0
sg39
F1.2668542240908209
sg34
g752
(S'\x07\xdf\n\x1a\x0e8\x08\x02\x13@'
tRp2205
sa(dp2206
S'trial_loop.thisTrialN'
p2207
I92
sg894
g932
sS'block_loop.thisIndex'
p2208
g888
sg38
S'left'
p2209
sg58
g62
sS'trial_loop.thisN'
p2210
I92
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p2211
g59
(g98
S'\\\x00\x00\x00'
tRp2212
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2213
I0
sg903
g940
sS'block_loop.thisRepN'
p2214
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2215
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2216
Nsg69
Vn
sS'block_loop.thisTrialN'
p2217
I0
sg39
F1.6834840178953527
sg34
g752
(S'\x07\xdf\n\x1a\x0e8\x0e\x06\xb2\xd8'
tRp2218
sa(dp2219
S'trial_loop.thisTrialN'
p2220
I93
sg894
S'44-crunch.png'
p2221
sS'block_loop.thisIndex'
p2222
g888
sg38
S'left'
p2223
sg58
g62
sS'trial_loop.thisN'
p2224
I93
sg33
g2195
sg63
g64
sS'trial_loop.thisIndex'
p2225
g59
(g98
S']\x00\x00\x00'
tRp2226
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2227
I0
sg903
S'26-walkers_smoky_bacon.png'
p2228
sS'block_loop.thisRepN'
p2229
I0
sg906
g2195
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2230
I0
sg908
g2202
sg55
g11
sS'block_loop.thisTrial'
p2231
Nsg69
Vn
sS'block_loop.thisTrialN'
p2232
I0
sg39
F1.1834386870823437
sg34
g752
(S'\x07\xdf\n\x1a\x0e8\x15\x02x\xd0'
tRp2233
sa(dp2234
S'trial_loop.thisTrialN'
p2235
I94
sg894
g2072
sS'block_loop.thisIndex'
p2236
g888
sg38
S'left'
p2237
sg58
g62
sS'trial_loop.thisN'
p2238
I94
sg33
g1387
sg63
g64
sS'trial_loop.thisIndex'
p2239
g59
(g98
S'^\x00\x00\x00'
tRp2240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2241
I0
sg903
g2079
sS'block_loop.thisRepN'
p2242
I0
sg906
g1387
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2243
I0
sg908
g1394
sg55
g11
sS'block_loop.thisTrial'
p2244
Nsg69
Vn
sS'block_loop.thisTrialN'
p2245
I0
sg39
F1.467225252512435
sg34
g752
(S'\x07\xdf\n\x1a\x0e8\x1b\x05\xa98'
tRp2246
sa(dp2247
S'trial_loop.thisTrialN'
p2248
I95
sg894
g1188
sS'block_loop.thisIndex'
p2249
g888
sg38
S'left'
p2250
sg58
g62
sS'trial_loop.thisN'
p2251
I95
sg33
g1192
sg63
g64
sS'trial_loop.thisIndex'
p2252
g59
(g98
S'_\x00\x00\x00'
tRp2253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2254
I0
sg903
g1196
sS'block_loop.thisRepN'
p2255
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2256
I0
sg908
g1199
sg55
g11
sS'block_loop.thisTrial'
p2257
Nsg69
Vn
sS'block_loop.thisTrialN'
p2258
I0
sg39
F2.3334671400079969
sg34
g752
(S'\x07\xdf\n\x1a\x0e8!\r]\xe0'
tRp2259
sa(dp2260
S'trial_loop.thisTrialN'
p2261
I96
sg894
g2191
sS'block_loop.thisIndex'
p2262
g888
sg38
S'right'
p2263
sg58
g62
sS'trial_loop.thisN'
p2264
I96
sg33
g2195
sg63
g64
sS'trial_loop.thisIndex'
p2265
g59
(g98
S'`\x00\x00\x00'
tRp2266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2267
I0
sg903
g2199
sS'block_loop.thisRepN'
p2268
I0
sg906
g2195
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2269
I0
sg908
g2202
sg55
g11
sS'block_loop.thisTrial'
p2270
Nsg69
Vn
sS'block_loop.thisTrialN'
p2271
I0
sg39
F1.5501852006018453
sg34
g752
(S'\x07\xdf\n\x1a\x0e8)\x03\xa9\x80'
tRp2272
sa(dp2273
S'trial_loop.thisTrialN'
p2274
I97
sg894
S'49-yorkie.png'
p2275
sS'block_loop.thisIndex'
p2276
g888
sg38
S'left'
p2277
sg58
g62
sS'trial_loop.thisN'
p2278
I97
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p2279
g59
(g98
S'a\x00\x00\x00'
tRp2280
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2281
I0
sg903
S'35-raisins.png'
p2282
sS'block_loop.thisRepN'
p2283
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2284
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p2285
Nsg69
Vn
sS'block_loop.thisTrialN'
p2286
I0
sg39
F1.6001426067441571
sg34
g752
(S'\x07\xdf\n\x1a\x0e8/\x0c\x8e\xd8'
tRp2287
sa(dp2288
S'trial_loop.thisTrialN'
p2289
I98
sg894
g1316
sS'block_loop.thisIndex'
p2290
g888
sg38
S'right'
p2291
sg58
g62
sS'trial_loop.thisN'
p2292
I98
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p2293
g59
(g98
S'b\x00\x00\x00'
tRp2294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2295
I0
sg903
g1323
sS'block_loop.thisRepN'
p2296
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2297
I0
sg908
g1216
sg55
g11
sS'block_loop.thisTrial'
p2298
Nsg69
Vn
sS'block_loop.thisTrialN'
p2299
I0
sg39
F0.85014203654554876
sg34
g752
(S'\x07\xdf\n\x1a\x0e86\x06\xe9\x88'
tRp2300
sa(dp2301
S'trial_loop.thisTrialN'
p2302
I99
sg894
g2221
sS'block_loop.thisIndex'
p2303
g888
sg38
S'left'
p2304
sg58
g62
sS'trial_loop.thisN'
p2305
I99
sg33
g2202
sg63
g64
sS'trial_loop.thisIndex'
p2306
g59
(g98
S'c\x00\x00\x00'
tRp2307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2308
I0
sg903
g2228
sS'block_loop.thisRepN'
p2309
I0
sg906
g2195
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2310
I0
sg908
g2202
sg55
g11
sS'block_loop.thisTrial'
p2311
Nsg69
Vn
sS'block_loop.thisTrialN'
p2312
I0
sg39
F1.0505618169736408
sg34
g752
(S'\x07\xdf\n\x1a\x0e9\x00\x05\x18\xb0'
tRp2313
sa(dp2314
S'trial_loop.thisTrialN'
p2315
I100
sg894
g1525
sS'block_loop.thisIndex'
p2316
g888
sg38
S'right'
p2317
sg58
g62
sS'trial_loop.thisN'
p2318
I100
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2319
g59
(g98
S'd\x00\x00\x00'
tRp2320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2321
I0
sg903
g1532
sS'block_loop.thisRepN'
p2322
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2323
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2324
Nsg69
Vn
sS'block_loop.thisTrialN'
p2325
I0
sg39
F1.1834295639009724
sg34
g752
(S'\x07\xdf\n\x1a\x0e9\x06\x06`\xd0'
tRp2326
sa(dp2327
S'trial_loop.thisTrialN'
p2328
I101
sg894
g1540
sS'block_loop.thisIndex'
p2329
g888
sg38
S'right'
p2330
sg58
g62
sS'trial_loop.thisN'
p2331
I101
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p2332
g59
(g98
S'e\x00\x00\x00'
tRp2333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2334
I0
sg903
g1547
sS'block_loop.thisRepN'
p2335
I0
sg906
g1109
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2336
I0
sg908
g1116
sg55
g11
sS'block_loop.thisTrial'
p2337
Nsg69
Vn
sS'block_loop.thisTrialN'
p2338
I0
sg39
F1.2834051023673965
sg34
g752
(S'\x07\xdf\n\x1a\x0e9\x0c\t\xcb\xd0'
tRp2339
sa(dp2340
S'trial_loop.thisTrialN'
p2341
I102
sg894
g1456
sS'block_loop.thisIndex'
p2342
g888
sg38
S'left'
p2343
sg58
g62
sS'trial_loop.thisN'
p2344
I102
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p2345
g59
(g98
S'f\x00\x00\x00'
tRp2346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2347
I0
sg903
g1463
sS'block_loop.thisRepN'
p2348
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2349
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p2350
Nsg69
Vn
sS'block_loop.thisTrialN'
p2351
I0
sg39
F2.1665964371695736
sg34
g752
(S'\x07\xdf\n\x1a\x0e9\x12\x0e\xa6\x00'
tRp2352
sa(dp2353
S'trial_loop.thisTrialN'
p2354
I103
sg894
g1062
sS'block_loop.thisIndex'
p2355
g888
sg38
S'right'
p2356
sg58
g62
sS'trial_loop.thisN'
p2357
I103
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p2358
g59
(g98
S'g\x00\x00\x00'
tRp2359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2360
I0
sg903
g1070
sS'block_loop.thisRepN'
p2361
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2362
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p2363
Nsg69
Vn
sS'block_loop.thisTrialN'
p2364
I0
sg39
F1.3001019515631924
sg34
g752
(S'\x07\xdf\n\x1a\x0e9\x1a\x02Q\xc0'
tRp2365
sa(dp2366
S'trial_loop.thisTrialN'
p2367
I104
sg894
g1028
sS'block_loop.thisIndex'
p2368
g888
sg38
S'right'
p2369
sg58
g62
sS'trial_loop.thisN'
p2370
I104
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p2371
g59
(g98
S'h\x00\x00\x00'
tRp2372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2373
I0
sg903
g1036
sS'block_loop.thisRepN'
p2374
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2375
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p2376
Nsg69
Vn
sS'block_loop.thisTrialN'
p2377
I0
sg39
F0.76691808636678616
sg34
g752
(S'\x07\xdf\n\x1a\x0e9 \x07jp'
tRp2378
sa(dp2379
S'trial_loop.thisTrialN'
p2380
I105
sg894
g1754
sS'block_loop.thisIndex'
p2381
g888
sg38
S'right'
p2382
sg58
g62
sS'trial_loop.thisN'
p2383
I105
sg33
g1175
sg63
g64
sS'trial_loop.thisIndex'
p2384
g59
(g98
S'i\x00\x00\x00'
tRp2385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2386
I0
sg903
g1761
sS'block_loop.thisRepN'
p2387
I0
sg906
g1175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2388
I0
sg908
g1182
sg55
g11
sS'block_loop.thisTrial'
p2389
Nsg69
Vn
sS'block_loop.thisTrialN'
p2390
I0
sg39
F1.2835259845332985
sg34
g752
(S'\x07\xdf\n\x1a\x0e9&\x04h\xe8'
tRp2391
sa(dp2392
S'trial_loop.thisTrialN'
p2393
I106
sg894
g1525
sS'block_loop.thisIndex'
p2394
g888
sg38
S'right'
p2395
sg58
g62
sS'trial_loop.thisN'
p2396
I106
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2397
g59
(g98
S'j\x00\x00\x00'
tRp2398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2399
I0
sg903
g1532
sS'block_loop.thisRepN'
p2400
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2401
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2402
Nsg69
Vn
sS'block_loop.thisTrialN'
p2403
I0
sg39
F0.76678323432770412
sg34
g752
(S'\x07\xdf\n\x1a\x0e9,\tC\x18'
tRp2404
sa(dp2405
S'trial_loop.thisTrialN'
p2406
I107
sg894
g1205
sS'block_loop.thisIndex'
p2407
g888
sg38
S'left'
p2408
sg58
g62
sS'trial_loop.thisN'
p2409
I107
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p2410
g59
(g98
S'k\x00\x00\x00'
tRp2411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2412
I0
sg903
g1213
sS'block_loop.thisRepN'
p2413
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2414
I0
sg908
g1216
sg55
g11
sS'block_loop.thisTrial'
p2415
Nsg69
Vn
sS'block_loop.thisTrialN'
p2416
I0
sg39
F0.9001008681843814
sg34
g752
(S'\x07\xdf\n\x1a\x0e92\x06A\x90'
tRp2417
sa(dp2418
S'trial_loop.thisTrialN'
p2419
I108
sg894
g2221
sS'block_loop.thisIndex'
p2420
g888
sg38
S'left'
p2421
sg58
g62
sS'trial_loop.thisN'
p2422
I108
sg33
g2195
sg63
g64
sS'trial_loop.thisIndex'
p2423
g59
(g98
S'l\x00\x00\x00'
tRp2424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2425
I0
sg903
g2228
sS'block_loop.thisRepN'
p2426
I0
sg906
g2195
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2427
I0
sg908
g2202
sg55
g11
sS'block_loop.thisTrial'
p2428
Nsg69
Vn
sS'block_loop.thisTrialN'
p2429
I0
sg39
F1.0501321721048953
sg34
g752
(S'\x07\xdf\n\x1a\x0e98\x05(P'
tRp2430
sa(dp2431
S'trial_loop.thisTrialN'
p2432
I109
sg894
g1013
sS'block_loop.thisIndex'
p2433
g888
sg38
S'right'
p2434
sg58
g62
sS'trial_loop.thisN'
p2435
I109
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p2436
g59
(g98
S'm\x00\x00\x00'
tRp2437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2438
I0
sg903
g1020
sS'block_loop.thisRepN'
p2439
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2440
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2441
Nsg69
Vn
sS'block_loop.thisTrialN'
p2442
I0
sg39
F0.83344091085837135
sg34
g752
(S'\x07\xdf\n\x1a\x0e:\x02\x06pp'
tRp2443
sa(dp2444
S'trial_loop.thisTrialN'
p2445
I110
sg894
g1607
sS'block_loop.thisIndex'
p2446
g888
sg38
S'left'
p2447
sg58
g62
sS'trial_loop.thisN'
p2448
I110
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p2449
g59
(g98
S'n\x00\x00\x00'
tRp2450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2451
I0
sg903
g1614
sS'block_loop.thisRepN'
p2452
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2453
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p2454
Nsg69
Vn
sS'block_loop.thisTrialN'
p2455
I0
sg39
F2.4500269133877737
sg34
g752
(S'\x07\xdf\n\x1a\x0e:\x08\x04e\x00'
tRp2456
sa(dp2457
S'trial_loop.thisTrialN'
p2458
I111
sg894
g1154
sS'block_loop.thisIndex'
p2459
g888
sg38
S'right'
p2460
sg58
g62
sS'trial_loop.thisN'
p2461
I111
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p2462
g59
(g98
S'o\x00\x00\x00'
tRp2463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2464
I0
sg903
g1162
sS'block_loop.thisRepN'
p2465
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2466
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p2467
Nsg69
Vn
sS'block_loop.thisTrialN'
p2468
I0
sg39
F2.2167488513341596
sg34
g752
(S'\x07\xdf\n\x1a\x0e:\x0f\x0b\xd7@'
tRp2469
sa(dp2470
S'trial_loop.thisTrialN'
p2471
I112
sg894
g2221
sS'block_loop.thisIndex'
p2472
g888
sg38
S'left'
p2473
sg58
g62
sS'trial_loop.thisN'
p2474
I112
sg33
g2195
sg63
g64
sS'trial_loop.thisIndex'
p2475
g59
(g98
S'p\x00\x00\x00'
tRp2476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2477
I0
sg903
g2228
sS'block_loop.thisRepN'
p2478
I0
sg906
g2195
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2479
I0
sg908
g2202
sg55
g11
sS'block_loop.thisTrial'
p2480
Nsg69
Vn
sS'block_loop.thisTrialN'
p2481
I0
sg39
F1.0334960490918093
sg34
g752
(S'\x07\xdf\n\x1a\x0e:\x17\x00u0'
tRp2482
sa(dp2483
S'trial_loop.thisTrialN'
p2484
I113
sg894
g1938
sS'block_loop.thisIndex'
p2485
g888
sg38
S'left'
p2486
sg58
g62
sS'trial_loop.thisN'
p2487
I113
sg33
g1254
sg63
g64
sS'trial_loop.thisIndex'
p2488
g59
(g98
S'q\x00\x00\x00'
tRp2489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2490
I0
sg903
g1945
sS'block_loop.thisRepN'
p2491
I0
sg906
g1254
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2492
I0
sg908
g1261
sg55
g11
sS'block_loop.thisTrial'
p2493
Nsg69
Vn
sS'block_loop.thisTrialN'
p2494
I0
sg39
F1.0501920429887832
sg34
g752
(S'\x07\xdf\n\x1a\x0e:\x1d\x01D8'
tRp2495
sa(dp2496
S'trial_loop.thisTrialN'
p2497
I114
sg894
g1171
sS'block_loop.thisIndex'
p2498
g888
sg38
S'left'
p2499
sg58
g62
sS'trial_loop.thisN'
p2500
I114
sg33
g1182
sg63
g64
sS'trial_loop.thisIndex'
p2501
g59
(g98
S'r\x00\x00\x00'
tRp2502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2503
I0
sg903
g1179
sS'block_loop.thisRepN'
p2504
I0
sg906
g1175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2505
I0
sg908
g1182
sg55
g11
sS'block_loop.thisTrial'
p2506
Nsg69
Vn
sS'block_loop.thisTrialN'
p2507
I0
sg39
F1.9335296338067565
sg34
g752
(S'\x07\xdf\n\x1a\x0e:#\x02\x8cX'
tRp2508
sa(dp2509
S'trial_loop.thisTrialN'
p2510
I115
sg894
g1122
sS'block_loop.thisIndex'
p2511
g888
sg38
S'left'
p2512
sg58
g62
sS'trial_loop.thisN'
p2513
I115
sg33
g983
sg63
g64
sS'trial_loop.thisIndex'
p2514
g59
(g98
S's\x00\x00\x00'
tRp2515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2516
I0
sg903
g1129
sS'block_loop.thisRepN'
p2517
I0
sg906
g989
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2518
I0
sg908
g983
sg55
g11
sS'block_loop.thisTrial'
p2519
Nsg69
Vn
sS'block_loop.thisTrialN'
p2520
I0
sg39
F2.5501806390102502
sg34
g752
(S'\x07\xdf\n\x1a\x0e:*\x02"\xe0'
tRp2521
sa(dp2522
S'trial_loop.thisTrialN'
p2523
I116
sg894
g1607
sS'block_loop.thisIndex'
p2524
g888
sg38
S'right'
p2525
sg58
g62
sS'trial_loop.thisN'
p2526
I116
sg33
g973
sg63
g64
sS'trial_loop.thisIndex'
p2527
g59
(g98
S't\x00\x00\x00'
tRp2528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2529
I0
sg903
g1614
sS'block_loop.thisRepN'
p2530
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2531
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p2532
Nsg69
Vn
sS'block_loop.thisTrialN'
p2533
I0
sg39
F1.2167605404110873
sg34
g752
(S'\x07\xdf\n\x1a\x0e:1\x0b\x00h'
tRp2534
sa(dp2535
S'trial_loop.thisTrialN'
p2536
I117
sg894
g2191
sS'block_loop.thisIndex'
p2537
g888
sg38
S'right'
p2538
sg58
g62
sS'trial_loop.thisN'
p2539
I117
sg33
g2195
sg63
g64
sS'trial_loop.thisIndex'
p2540
g59
(g98
S'u\x00\x00\x00'
tRp2541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2542
I0
sg903
g2199
sS'block_loop.thisRepN'
p2543
I0
sg906
g2195
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2544
I0
sg908
g2202
sg55
g11
sS'block_loop.thisTrial'
p2545
Nsg69
Vn
sS'block_loop.thisTrialN'
p2546
I0
sg39
F2.0501735115249176
sg34
g752
(S'\x07\xdf\n\x1a\x0e:7\x0e\xe8h'
tRp2547
sa(dp2548
S'trial_loop.thisTrialN'
p2549
I118
sg894
g1383
sS'block_loop.thisIndex'
p2550
g888
sg38
S'right'
p2551
sg58
g62
sS'trial_loop.thisN'
p2552
I118
sg33
g1394
sg63
g64
sS'trial_loop.thisIndex'
p2553
g59
(g98
S'v\x00\x00\x00'
tRp2554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2555
I0
sg903
g1391
sS'block_loop.thisRepN'
p2556
I0
sg906
g1387
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2557
I0
sg908
g1394
sg55
g11
sS'block_loop.thisTrial'
p2558
Nsg69
Vn
sS'block_loop.thisTrialN'
p2559
I0
sg39
F1.4501794415928089
sg34
g752
(S'\x07\xdf\n\x1a\x0e;\x03\x00\xe6x'
tRp2560
sa(dp2561
S'trial_loop.thisTrialN'
p2562
I119
sg894
g1137
sS'block_loop.thisIndex'
p2563
g888
sg38
S'right'
p2564
sg58
g62
sS'trial_loop.thisN'
p2565
I119
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p2566
g59
(g98
S'w\x00\x00\x00'
tRp2567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2568
I0
sg903
g1145
sS'block_loop.thisRepN'
p2569
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2570
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p2571
Nsg69
Vn
sS'block_loop.thisTrialN'
p2572
I0
sg39
F1.0505823441326356
sg34
g752
(S'\x07\xdf\n\x1a\x0e;\t\x08"\x08'
tRp2573
sa(dp2574
S'trial_loop.thisTrialN'
p2575
I120
sg894
g895
sS'block_loop.thisIndex'
p2576
g888
sg38
S'left'
p2577
sg58
g62
sS'trial_loop.thisN'
p2578
I120
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2579
g59
(g98
S'x\x00\x00\x00'
tRp2580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2581
I0
sg903
g904
sS'block_loop.thisRepN'
p2582
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2583
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2584
Nsg69
Vn
sS'block_loop.thisTrialN'
p2585
I0
sg39
F0.90016330496473529
sg34
g752
(S'\x07\xdf\n\x1a\x0e;\x0f\tj('
tRp2586
sa(dp2587
S'trial_loop.thisTrialN'
p2588
I121
sg894
g2275
sS'block_loop.thisIndex'
p2589
g888
sg38
S'left'
p2590
sg58
g62
sS'trial_loop.thisN'
p2591
I121
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p2592
g59
(g98
S'y\x00\x00\x00'
tRp2593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2594
I0
sg903
g2282
sS'block_loop.thisRepN'
p2595
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2596
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p2597
Nsg69
Vn
sS'block_loop.thisTrialN'
p2598
I0
sg39
F1.2001443743611162
sg34
g752
(S'\x07\xdf\n\x1a\x0e;\x15\x08\x8fh'
tRp2599
sa(dp2600
S'trial_loop.thisTrialN'
p2601
I122
sg894
g1484
sS'block_loop.thisIndex'
p2602
g888
sg38
S'left'
p2603
sg58
g62
sS'trial_loop.thisN'
p2604
I122
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p2605
g59
(g98
S'z\x00\x00\x00'
tRp2606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2607
I0
sg903
g1491
sS'block_loop.thisRepN'
p2608
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2609
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p2610
Nsg69
Vn
sS'block_loop.thisTrialN'
p2611
I0
sg39
F0.98342346277240722
sg34
g752
(S'\x07\xdf\n\x1a\x0e;\x1b\x0b\xfeP'
tRp2612
sa(dp2613
S'trial_loop.thisTrialN'
p2614
I123
sg894
g1299
sS'block_loop.thisIndex'
p2615
g888
sg38
S'right'
p2616
sg58
g62
sS'trial_loop.thisN'
p2617
I123
sg33
g1303
sg63
g64
sS'trial_loop.thisIndex'
p2618
g59
(g98
S'{\x00\x00\x00'
tRp2619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2620
I0
sg903
g1307
sS'block_loop.thisRepN'
p2621
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2622
I0
sg908
g1310
sg55
g11
sS'block_loop.thisTrial'
p2623
Nsg69
Vn
sS'block_loop.thisTrialN'
p2624
I0
sg39
F1.0831774789685369
sg34
g752
(S'\x07\xdf\n\x1a\x0e;!\x0cPX'
tRp2625
sa(dp2626
S'trial_loop.thisTrialN'
p2627
I124
sg894
g1250
sS'block_loop.thisIndex'
p2628
g888
sg38
S'right'
p2629
sg58
g62
sS'trial_loop.thisN'
p2630
I124
sg33
g1254
sg63
g64
sS'trial_loop.thisIndex'
p2631
g59
(g98
S'|\x00\x00\x00'
tRp2632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2633
I0
sg903
g1258
sS'block_loop.thisRepN'
p2634
I0
sg906
g1254
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2635
I0
sg908
g1261
sg55
g11
sS'block_loop.thisTrial'
p2636
Nsg69
Vn
sS'block_loop.thisTrialN'
p2637
I0
sg39
F0.93386006406763045
sg34
g752
(S"\x07\xdf\n\x1a\x0e;'\x0e\x11\x90"
tRp2638
sa(dp2639
S'trial_loop.thisTrialN'
p2640
I125
sg894
g1754
sS'block_loop.thisIndex'
p2641
g888
sg38
S'right'
p2642
sg58
g62
sS'trial_loop.thisN'
p2643
I125
sg33
g1175
sg63
g64
sS'trial_loop.thisIndex'
p2644
g59
(g98
S'}\x00\x00\x00'
tRp2645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2646
I0
sg903
g1761
sS'block_loop.thisRepN'
p2647
I0
sg906
g1175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2648
I0
sg908
g1182
sg55
g11
sS'block_loop.thisTrial'
p2649
Nsg69
Vn
sS'block_loop.thisTrialN'
p2650
I0
sg39
F1.7335243879770132
sg34
g752
(S'\x07\xdf\n\x1a\x0e;-\r\xaf\xe8'
tRp2651
sa(dp2652
S'trial_loop.thisTrialN'
p2653
I126
sg894
g1674
sS'block_loop.thisIndex'
p2654
g888
sg38
S'left'
p2655
sg58
g62
sS'trial_loop.thisN'
p2656
I126
sg33
g1303
sg63
g64
sS'trial_loop.thisIndex'
p2657
g59
(g98
S'~\x00\x00\x00'
tRp2658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2659
I0
sg903
g1681
sS'block_loop.thisRepN'
p2660
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2661
I0
sg908
g1310
sg55
g11
sS'block_loop.thisTrial'
p2662
Nsg69
Vn
sS'block_loop.thisTrialN'
p2663
I0
sg39
F0.74980128568404325
sg34
g752
(S'\x07\xdf\n\x1a\x0e;4\t\xf2\xe0'
tRp2664
sa(dp2665
S'trial_loop.thisTrialN'
p2666
I127
sg894
g2191
sS'block_loop.thisIndex'
p2667
g888
sg38
S'right'
p2668
sg58
g62
sS'trial_loop.thisN'
p2669
I127
sg33
g2195
sg63
g64
sS'trial_loop.thisIndex'
p2670
g59
(g98
S'\x7f\x00\x00\x00'
tRp2671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2672
I0
sg903
g2199
sS'block_loop.thisRepN'
p2673
I0
sg906
g2195
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2674
I0
sg908
g2202
sg55
g11
sS'block_loop.thisTrial'
p2675
Nsg69
Vn
sS'block_loop.thisTrialN'
p2676
I0
sg39
F1.2167471407374251
sg34
g752
(S'\x07\xdf\n\x1a\x0e;:\x06\xb6\xc0'
tRp2677
sa(dp2678
S'trial_loop.thisTrialN'
p2679
I128
sg894
g1413
sS'block_loop.thisIndex'
p2680
g888
sg38
S'left'
p2681
sg58
g62
sS'trial_loop.thisN'
p2682
I128
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p2683
g59
(g98
S'\x80\x00\x00\x00'
tRp2684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2685
I0
sg903
g1420
sS'block_loop.thisRepN'
p2686
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2687
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p2688
Nsg69
Vn
sS'block_loop.thisTrialN'
p2689
I0
sg39
F2.6334040189904044
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x00\x04\n\x9a\xd8'
tRp2690
sa(dp2691
S'trial_loop.thisTrialN'
p2692
I129
sg894
g1250
sS'block_loop.thisIndex'
p2693
g888
sg38
S'right'
p2694
sg58
g62
sS'trial_loop.thisN'
p2695
I129
sg33
g1254
sg63
g64
sS'trial_loop.thisIndex'
p2696
g59
(g98
S'\x81\x00\x00\x00'
tRp2697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2698
I0
sg903
g1258
sS'block_loop.thisRepN'
p2699
I0
sg906
g1254
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2700
I0
sg908
g1261
sg55
g11
sS'block_loop.thisTrial'
p2701
Nsg69
Vn
sS'block_loop.thisTrialN'
p2702
I0
sg39
F0.7837295455401545
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x00\x0c\x05j\xb8'
tRp2703
sa(dp2704
S'trial_loop.thisTrialN'
p2705
I130
sg894
g1222
sS'block_loop.thisIndex'
p2706
g888
sg38
S'right'
p2707
sg58
g62
sS'trial_loop.thisN'
p2708
I130
sg33
g1192
sg63
g64
sS'trial_loop.thisIndex'
p2709
g59
(g98
S'\x82\x00\x00\x00'
tRp2710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2711
I0
sg903
g1229
sS'block_loop.thisRepN'
p2712
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2713
I0
sg908
g1199
sg55
g11
sS'block_loop.thisTrial'
p2714
Nsg69
Vn
sS'block_loop.thisTrialN'
p2715
I0
sg39
F1.7999371640817117
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x00\x12\x02\xa7\xb0'
tRp2716
sa(dp2717
S'trial_loop.thisTrialN'
p2718
I131
sg894
g1299
sS'block_loop.thisIndex'
p2719
g888
sg38
S'right'
p2720
sg58
g62
sS'trial_loop.thisN'
p2721
I131
sg33
g1303
sg63
g64
sS'trial_loop.thisIndex'
p2722
g59
(g98
S'\x83\x00\x00\x00'
tRp2723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2724
I0
sg903
g1307
sS'block_loop.thisRepN'
p2725
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2726
I0
sg908
g1310
sg55
g11
sS'block_loop.thisTrial'
p2727
Nsg69
Vn
sS'block_loop.thisTrialN'
p2728
I0
sg39
F0.94989576764146477
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x00\x19\x00\x17p'
tRp2729
sa(dp2730
S'trial_loop.thisTrialN'
p2731
I132
sg894
g2072
sS'block_loop.thisIndex'
p2732
g888
sg38
S'left'
p2733
sg58
g62
sS'trial_loop.thisN'
p2734
I132
sg33
g1387
sg63
g64
sS'trial_loop.thisIndex'
p2735
g59
(g98
S'\x84\x00\x00\x00'
tRp2736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2737
I0
sg903
g2079
sS'block_loop.thisRepN'
p2738
I0
sg906
g1387
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2739
I0
sg908
g1394
sg55
g11
sS'block_loop.thisTrial'
p2740
Nsg69
Vn
sS'block_loop.thisTrialN'
p2741
I0
sg39
F1.0500942538774325
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x00\x1e\x0e\xf8\x08'
tRp2742
sa(dp2743
S'trial_loop.thisTrialN'
p2744
I133
sg894
g1441
sS'block_loop.thisIndex'
p2745
g888
sg38
S'left'
p2746
sg58
g62
sS'trial_loop.thisN'
p2747
I133
sg33
g1277
sg63
g64
sS'trial_loop.thisIndex'
p2748
g59
(g98
S'\x85\x00\x00\x00'
tRp2749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2750
I0
sg903
g1448
sS'block_loop.thisRepN'
p2751
I0
sg906
g1277
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2752
I0
sg908
g1271
sg55
g11
sS'block_loop.thisTrial'
p2753
Nsg69
Vn
sS'block_loop.thisTrialN'
p2754
I0
sg39
F0.70023075949302438
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x00%\x00\xfd\xe8'
tRp2755
sa(dp2756
S'trial_loop.thisTrialN'
p2757
I134
sg894
g1607
sS'block_loop.thisIndex'
p2758
g888
sg38
S'left'
p2759
sg58
g62
sS'trial_loop.thisN'
p2760
I134
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p2761
g59
(g98
S'\x86\x00\x00\x00'
tRp2762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2763
I0
sg903
g1614
sS'block_loop.thisRepN'
p2764
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2765
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p2766
Nsg69
Vn
sS'block_loop.thisTrialN'
p2767
I0
sg39
F1.6838557875753395
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x00*\x0cLp'
tRp2768
sa(dp2769
S'trial_loop.thisTrialN'
p2770
I135
sg894
g1062
sS'block_loop.thisIndex'
p2771
g888
sg38
S'right'
p2772
sg58
g62
sS'trial_loop.thisN'
p2773
I135
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p2774
g59
(g98
S'\x87\x00\x00\x00'
tRp2775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2776
I0
sg903
g1070
sS'block_loop.thisRepN'
p2777
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2778
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p2779
Nsg69
Vn
sS'block_loop.thisTrialN'
p2780
I0
sg39
F0.70011101772524853
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x001\x08\x16P'
tRp2781
sa(dp2782
S'trial_loop.thisTrialN'
p2783
I136
sg894
g962
sS'block_loop.thisIndex'
p2784
g888
sg38
S'left'
p2785
sg58
g62
sS'trial_loop.thisN'
p2786
I136
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p2787
g59
(g98
S'\x88\x00\x00\x00'
tRp2788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2789
I0
sg903
g970
sS'block_loop.thisRepN'
p2790
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2791
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p2792
Nsg69
Vn
sS'block_loop.thisTrialN'
p2793
I0
sg39
F0.71681784540123772
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x007\x03\xe4\x18'
tRp2794
sa(dp2795
S'trial_loop.thisTrialN'
p2796
I137
sg894
g1284
sS'block_loop.thisIndex'
p2797
g888
sg38
S'right'
p2798
sg58
g62
sS'trial_loop.thisN'
p2799
I137
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2800
g59
(g98
S'\x89\x00\x00\x00'
tRp2801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2802
I0
sg903
g1291
sS'block_loop.thisRepN'
p2803
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2804
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2805
Nsg69
Vn
sS'block_loop.thisTrialN'
p2806
I0
sg39
F1.5334301911198054
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x01\x01\x00*\xf8'
tRp2807
sa(dp2808
S'trial_loop.thisTrialN'
p2809
I138
sg894
g2057
sS'block_loop.thisIndex'
p2810
g888
sg38
S'right'
p2811
sg58
g62
sS'trial_loop.thisN'
p2812
I138
sg33
g1000
sg63
g64
sS'trial_loop.thisIndex'
p2813
g59
(g98
S'\x8a\x00\x00\x00'
tRp2814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2815
I0
sg903
g2064
sS'block_loop.thisRepN'
p2816
I0
sg906
g1000
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2817
I0
sg908
g1007
sg55
g11
sS'block_loop.thisTrial'
p2818
Nsg69
Vn
sS'block_loop.thisTrialN'
p2819
I0
sg39
F1.3834738683544856
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x01\x07\x08\xd5\xb8'
tRp2820
sa(dp2821
S'trial_loop.thisTrialN'
p2822
I139
sg894
g1205
sS'block_loop.thisIndex'
p2823
g888
sg38
S'left'
p2824
sg58
g62
sS'trial_loop.thisN'
p2825
I139
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p2826
g59
(g98
S'\x8b\x00\x00\x00'
tRp2827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2828
I0
sg903
g1213
sS'block_loop.thisRepN'
p2829
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2830
I0
sg908
g1216
sg55
g11
sS'block_loop.thisTrial'
p2831
Nsg69
Vn
sS'block_loop.thisTrialN'
p2832
I0
sg39
F1.1838942760014106
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x01\r\x0f\x1f\x18'
tRp2833
sa(dp2834
S'trial_loop.thisTrialN'
p2835
I140
sg894
g1013
sS'block_loop.thisIndex'
p2836
g888
sg38
S'right'
p2837
sg58
g62
sS'trial_loop.thisN'
p2838
I140
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2839
g59
(g98
S'\x8c\x00\x00\x00'
tRp2840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2841
I0
sg903
g1020
sS'block_loop.thisRepN'
p2842
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2843
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2844
Nsg69
Vn
sS'block_loop.thisTrialN'
p2845
I0
sg39
F0.75021239908892312
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x01\x14\x03\tX'
tRp2846
sa(dp2847
S'trial_loop.thisTrialN'
p2848
I141
sg894
g1171
sS'block_loop.thisIndex'
p2849
g888
sg38
S'right'
p2850
sg58
g62
sS'trial_loop.thisN'
p2851
I141
sg33
g1175
sg63
g64
sS'trial_loop.thisIndex'
p2852
g59
(g98
S'\x8d\x00\x00\x00'
tRp2853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2854
I0
sg903
g1179
sS'block_loop.thisRepN'
p2855
I0
sg906
g1175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2856
I0
sg908
g1182
sg55
g11
sS'block_loop.thisTrial'
p2857
Nsg69
Vn
sS'block_loop.thisTrialN'
p2858
I0
sg39
F1.2500647175747872
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x01\x19\x0f\x0fx'
tRp2859
sa(dp2860
S'trial_loop.thisTrialN'
p2861
I142
sg894
S'51-mars.png'
p2862
sS'block_loop.thisIndex'
p2863
g888
sg38
S'left'
p2864
sg58
g62
sS'trial_loop.thisN'
p2865
I142
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p2866
g59
(g98
S'\x8e\x00\x00\x00'
tRp2867
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2868
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p2869
sS'block_loop.thisRepN'
p2870
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2871
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vn
sS'block_loop.thisTrialN'
p2873
I0
sg39
F0.91662551731315034
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x01 \x04.P'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g979
sS'block_loop.thisIndex'
p2877
g888
sg38
S'right'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g989
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g987
sS'block_loop.thisRepN'
p2883
I0
sg906
g989
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2884
I0
sg908
g983
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vn
sS'block_loop.thisTrialN'
p2886
I0
sg39
F1.9666085824055699
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x01&\x03O\xa8'
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g1137
sS'block_loop.thisIndex'
p2890
g888
sg38
S'right'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g1145
sS'block_loop.thisRepN'
p2896
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2897
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vn
sS'block_loop.thisTrialN'
p2899
I0
sg39
F0.90019951259364461
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x01-\x03c0'
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g1028
sS'block_loop.thisIndex'
p2903
g888
sg38
S'right'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g1036
sS'block_loop.thisRepN'
p2909
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2910
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vn
sS'block_loop.thisTrialN'
p2912
I0
sg39
F0.60019677563923324
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x013\x02I\xf0'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g1316
sS'block_loop.thisIndex'
p2916
g888
sg38
S'right'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g1323
sS'block_loop.thisRepN'
p2922
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2923
I0
sg908
g1216
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vn
sS'block_loop.thisTrialN'
p2925
I0
sg39
F0.88335982857552153
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x018\x0b\xea\xc8'
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g996
sS'block_loop.thisIndex'
p2929
g888
sg38
S'left'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g1000
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g1004
sS'block_loop.thisRepN'
p2935
I0
sg906
g1000
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2936
I0
sg908
g1007
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vn
sS'block_loop.thisTrialN'
p2938
I0
sg39
F3.1501556072789754
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x02\x02\n\xd1\x88'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g1938
sS'block_loop.thisIndex'
p2942
g888
sg38
S'left'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g1254
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g1945
sS'block_loop.thisRepN'
p2948
I0
sg906
g1254
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2949
I0
sg908
g1261
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vn
sS'block_loop.thisTrialN'
p2951
I0
sg39
F0.73352125188284845
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x02\n\r} '
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g1674
sS'block_loop.thisIndex'
p2955
g888
sg38
S'left'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g1303
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g1681
sS'block_loop.thisRepN'
p2961
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2962
I0
sg908
g1310
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vn
sS'block_loop.thisTrialN'
p2964
I0
sg39
F1.7170122832249035
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x02\x10\n\x02\x80'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g1540
sS'block_loop.thisIndex'
p2968
g888
sg38
S'right'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g1547
sS'block_loop.thisRepN'
p2974
I0
sg906
g1109
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2975
I0
sg908
g1116
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vn
sS'block_loop.thisTrialN'
p2977
I0
sg39
F0.93342101091730001
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x02\x17\x06Ex'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g1013
sS'block_loop.thisIndex'
p2981
g888
sg38
S'right'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g1020
sS'block_loop.thisRepN'
p2987
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2988
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vn
sS'block_loop.thisTrialN'
p2990
I0
sg39
F0.71677222948892449
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x02\x1d\x05\xa5P'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g1299
sS'block_loop.thisIndex'
p2994
g888
sg38
S'right'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g1303
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g1307
sS'block_loop.thisRepN'
p3000
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3001
I0
sg908
g1310
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vn
sS'block_loop.thisTrialN'
p3003
I0
sg39
F0.88326945205062657
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x02#\x01\xec0'
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g2057
sS'block_loop.thisIndex'
p3007
g888
sg38
S'right'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g1007
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g2064
sS'block_loop.thisRepN'
p3013
I0
sg906
g1000
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3014
I0
sg908
g1007
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vn
sS'block_loop.thisTrialN'
p3016
I0
sg39
F2.2667915022120724
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x02)\x00\x98X'
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g915
sS'block_loop.thisIndex'
p3020
g888
sg38
S'right'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g923
sS'block_loop.thisRepN'
p3026
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3027
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vn
sS'block_loop.thisTrialN'
p3029
I0
sg39
F1.1668695624402972
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x020\x05,8'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g1188
sS'block_loop.thisIndex'
p3033
g888
sg38
S'left'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g1192
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g1196
sS'block_loop.thisRepN'
p3039
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3040
I0
sg908
g1199
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vn
sS'block_loop.thisTrialN'
p3042
I0
sg39
F1.6835715434253871
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x026\x08"\x08'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g1154
sS'block_loop.thisIndex'
p3046
g888
sg38
S'right'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g1162
sS'block_loop.thisRepN'
p3052
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3053
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vn
sS'block_loop.thisTrialN'
p3055
I0
sg39
F0.95010674123386707
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x03\x01\x03\xe8\x00'
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g2057
sS'block_loop.thisIndex'
p3059
g888
sg38
S'right'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1007
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g2064
sS'block_loop.thisRepN'
p3065
I0
sg906
g1000
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3066
I0
sg908
g1007
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vn
sS'block_loop.thisTrialN'
p3068
I0
sg39
F1.1001103905064156
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x03\x07\x03\x86X'
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1484
sS'block_loop.thisIndex'
p3072
g888
sg38
S'left'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g1073
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1491
sS'block_loop.thisRepN'
p3078
I0
sg906
g1066
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3079
I0
sg908
g1073
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vn
sS'block_loop.thisTrialN'
p3081
I0
sg39
F0.68343783178443118
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x03\r\x05\xc4\x90'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g1205
sS'block_loop.thisIndex'
p3085
g888
sg38
S'left'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g1216
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g1213
sS'block_loop.thisRepN'
p3091
I0
sg906
g1209
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3092
I0
sg908
g1216
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vn
sS'block_loop.thisTrialN'
p3094
I0
sg39
F1.1168591278010354
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x03\x13\x01S\xd8'
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g1188
sS'block_loop.thisIndex'
p3098
g888
sg38
S'left'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g1192
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g1196
sS'block_loop.thisRepN'
p3104
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3105
I0
sg908
g1199
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vn
sS'block_loop.thisTrialN'
p3107
I0
sg39
F1.333496790350182
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x03\x19\x03\x92\x10'
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g2862
sS'block_loop.thisIndex'
p3111
g888
sg38
S'left'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g2869
sS'block_loop.thisRepN'
p3117
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3118
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vn
sS'block_loop.thisTrialN'
p3120
I0
sg39
F0.78353339711975423
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x03\x1f\t\x1f\xf0'
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g1137
sS'block_loop.thisIndex'
p3124
g888
sg38
S'right'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g1145
sS'block_loop.thisRepN'
p3130
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3131
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vn
sS'block_loop.thisTrialN'
p3133
I0
sg39
F1.8501668401968345
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x03%\x06\\\xe8'
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g1938
sS'block_loop.thisIndex'
p3137
g888
sg38
S'left'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g1254
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g1945
sS'block_loop.thisRepN'
p3143
I0
sg906
g1254
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3144
I0
sg908
g1261
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vn
sS'block_loop.thisTrialN'
p3146
I0
sg39
F0.7502141096856576
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x03,\x04\x88('
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g962
sS'block_loop.thisIndex'
p3150
g888
sg38
S'right'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g970
sS'block_loop.thisRepN'
p3156
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3157
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vn
sS'block_loop.thisTrialN'
p3159
I0
sg39
F1.3338768279154465
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x032\x01H '
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g1413
sS'block_loop.thisIndex'
p3163
g888
sg38
S'left'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g1420
sS'block_loop.thisRepN'
p3169
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3170
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vn
sS'block_loop.thisTrialN'
p3172
I0
sg39
F1.0667631633259589
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x038\x06\xd9\xe8'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g1045
sS'block_loop.thisIndex'
p3176
g888
sg38
S'left'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g1053
sS'block_loop.thisRepN'
p3182
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3183
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vn
sS'block_loop.thisTrialN'
p3185
I0
sg39
F3.2834823643179334
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x04\x02\x08`\x88'
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g1754
sS'block_loop.thisIndex'
p3189
g888
sg38
S'left'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g1175
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g1761
sS'block_loop.thisRepN'
p3195
I0
sg906
g1175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3196
I0
sg908
g1182
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vn
sS'block_loop.thisTrialN'
p3198
I0
sg39
F1.7334211819761549
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x04\n\r/\x00'
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g1267
sS'block_loop.thisIndex'
p3202
g888
sg38
S'right'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1277
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g1275
sS'block_loop.thisRepN'
p3208
I0
sg906
g1277
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3209
I0
sg908
g1271
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vn
sS'block_loop.thisTrialN'
p3211
I0
sg39
F0.63343794582397095
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x04\x11\t\xac\x90'
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g895
sS'block_loop.thisIndex'
p3215
g888
sg38
S'left'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g904
sS'block_loop.thisRepN'
p3221
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3222
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vn
sS'block_loop.thisTrialN'
p3224
I0
sg39
F0.63393629966049048
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x04\x17\x04\x88('
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g2191
sS'block_loop.thisIndex'
p3228
g888
sg38
S'right'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g2202
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g2199
sS'block_loop.thisRepN'
p3234
I0
sg906
g2195
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3235
I0
sg908
g2202
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vn
sS'block_loop.thisTrialN'
p3237
I0
sg39
F0.98353550685624214
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x04\x1c\x0e\xe0\x98'
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g1122
sS'block_loop.thisIndex'
p3241
g888
sg38
S'left'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g989
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g1129
sS'block_loop.thisRepN'
p3247
I0
sg906
g989
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3248
I0
sg908
g983
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vn
sS'block_loop.thisTrialN'
p3250
I0
sg39
F1.9001798407325623
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x04"\x0e\xf8\x08'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g2072
sS'block_loop.thisIndex'
p3254
g888
sg38
S'left'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g1387
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g2079
sS'block_loop.thisRepN'
p3260
I0
sg906
g1387
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3261
I0
sg908
g1394
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vn
sS'block_loop.thisTrialN'
p3263
I0
sg39
F2.5335008957827085
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x04)\x0e\x15x'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g1122
sS'block_loop.thisIndex'
p3267
g888
sg38
S'right'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g989
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g1129
sS'block_loop.thisRepN'
p3273
I0
sg906
g989
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3274
I0
sg908
g983
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vn
sS'block_loop.thisTrialN'
p3276
I0
sg39
F1.2501830338460422
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x041\x07v('
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g1105
sS'block_loop.thisIndex'
p3280
g888
sg38
S'left'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g1113
sS'block_loop.thisRepN'
p3286
I0
sg906
g1109
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3287
I0
sg908
g1116
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vn
sS'block_loop.thisTrialN'
p3289
I0
sg39
F0.91709764199913479
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x047\x0b\xd7@'
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g2862
sS'block_loop.thisIndex'
p3293
g888
sg38
S'left'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g2869
sS'block_loop.thisRepN'
p3299
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3300
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vn
sS'block_loop.thisTrialN'
p3302
I0
sg39
F1.0168533687919989
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x05\x01\n\xfc\x80'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g996
sS'block_loop.thisIndex'
p3306
g888
sg38
S'left'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g1000
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g1004
sS'block_loop.thisRepN'
p3312
I0
sg906
g1000
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3313
I0
sg908
g1007
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vn
sS'block_loop.thisTrialN'
p3315
I0
sg39
F1.0501122151426898
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x05\x07\x0b\xcb\x88'
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g1674
sS'block_loop.thisIndex'
p3319
g888
sg38
S'left'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g1310
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g1681
sS'block_loop.thisRepN'
p3325
I0
sg906
g1303
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3326
I0
sg908
g1310
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vn
sS'block_loop.thisTrialN'
p3328
I0
sg39
F0.81650286753028922
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x05\r\r\x13\xa8'
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1413
sS'block_loop.thisIndex'
p3332
g888
sg38
S'left'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1420
sS'block_loop.thisRepN'
p3338
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3339
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vn
sS'block_loop.thisTrialN'
p3341
I0
sg39
F0.88351492267520371
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x05\x13\n\xc9\xb8'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1154
sS'block_loop.thisIndex'
p3345
g888
sg38
S'right'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1162
sS'block_loop.thisRepN'
p3351
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3352
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vn
sS'block_loop.thisTrialN'
p3354
I0
sg39
F0.83354069566485123
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x05\x19\tq\xf8'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g1267
sS'block_loop.thisIndex'
p3358
g888
sg38
S'right'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1277
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g1275
sS'block_loop.thisRepN'
p3364
I0
sg906
g1277
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3365
I0
sg908
g1271
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vn
sS'block_loop.thisTrialN'
p3367
I0
sg39
F0.95055662816321274
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x05\x1f\x07f\x88'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g1222
sS'block_loop.thisIndex'
p3371
g888
sg38
S'right'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g1192
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g1229
sS'block_loop.thisRepN'
p3377
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3378
I0
sg908
g1199
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vn
sS'block_loop.thisTrialN'
p3380
I0
sg39
F1.4334344105918717
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x05%\x07?x'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g2221
sS'block_loop.thisIndex'
p3384
g888
sg38
S'left'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g2195
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g2228
sS'block_loop.thisRepN'
p3390
I0
sg906
g2195
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3391
I0
sg908
g2202
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vn
sS'block_loop.thisTrialN'
p3393
I0
sg39
F1.1334453584095172
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x05+\x0e<\x88'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g1607
sS'block_loop.thisIndex'
p3397
g888
sg38
S'right'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g1614
sS'block_loop.thisRepN'
p3403
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3404
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vn
sS'block_loop.thisTrialN'
p3406
I0
sg39
F1.9834166203854693
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x052\x01s\x18'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g1754
sS'block_loop.thisIndex'
p3410
g888
sg38
S'left'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g1182
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g1761
sS'block_loop.thisRepN'
p3416
I0
sg906
g1175
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3417
I0
sg908
g1182
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vn
sS'block_loop.thisTrialN'
p3419
I0
sg39
F0.65019238510740252
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x059\x01\xc18'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g1045
sS'block_loop.thisIndex'
p3423
g888
sg38
S'right'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g1053
sS'block_loop.thisRepN'
p3429
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3430
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vn
sS'block_loop.thisTrialN'
p3432
I0
sg39
F1.2669942079191969
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x06\x02\x0cX('
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g2275
sS'block_loop.thisIndex'
p3436
g888
sg38
S'left'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g2282
sS'block_loop.thisRepN'
p3442
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3443
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vn
sS'block_loop.thisTrialN'
p3445
I0
sg39
F0.95013040448702668
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x06\t\x01w\x00'
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g1525
sS'block_loop.thisIndex'
p3449
g888
sg38
S'right'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g1532
sS'block_loop.thisRepN'
p3455
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3456
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vn
sS'block_loop.thisTrialN'
p3458
I0
sg39
F1.3668534258122236
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x06\x0f\x01S\xd8'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g1154
sS'block_loop.thisIndex'
p3462
g888
sg38
S'right'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g1165
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g1162
sS'block_loop.thisRepN'
p3468
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3469
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vn
sS'block_loop.thisTrialN'
p3471
I0
sg39
F0.90013137382538844
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x06\x15\x07^\xb8'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g1456
sS'block_loop.thisIndex'
p3475
g888
sg38
S'left'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g1463
sS'block_loop.thisRepN'
p3481
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3482
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vn
sS'block_loop.thisTrialN'
p3484
I0
sg39
F2.066839855078797
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x06\x1b\x06\x80\x10'
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g1284
sS'block_loop.thisIndex'
p3488
g888
sg38
S'left'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g1291
sS'block_loop.thisRepN'
p3494
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3495
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vn
sS'block_loop.thisTrialN'
p3497
I0
sg39
F0.83389193818584317
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x06"\x07\xfe\xe0'
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g996
sS'block_loop.thisIndex'
p3501
g888
sg38
S'left'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g1000
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g1004
sS'block_loop.thisRepN'
p3507
I0
sg906
g1000
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3508
I0
sg908
g1007
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vn
sS'block_loop.thisTrialN'
p3510
I0
sg39
F1.1500960214943916
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x06(\x05\xf3p'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g1413
sS'block_loop.thisIndex'
p3514
g888
sg38
S'left'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g1420
sS'block_loop.thisRepN'
p3520
I0
sg906
g1147
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3521
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vn
sS'block_loop.thisTrialN'
p3523
I0
sg39
F0.70010902202920988
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x06.\x08\xa6\xd8'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g962
sS'block_loop.thisIndex'
p3527
g888
sg38
S'left'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g970
sS'block_loop.thisRepN'
p3533
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3534
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vn
sS'block_loop.thisTrialN'
p3536
I0
sg39
F1.3001030919604091
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x064\x04\xb3 '
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g1284
sS'block_loop.thisIndex'
p3540
g888
sg38
S'left'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g1291
sS'block_loop.thisRepN'
p3546
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3547
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vn
sS'block_loop.thisTrialN'
p3549
I0
sg39
F1.0335234186386515
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x06:\t\xcb\xd0'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g2862
sS'block_loop.thisIndex'
p3553
g888
sg38
S'left'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g2869
sS'block_loop.thisRepN'
p3559
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3560
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vn
sS'block_loop.thisTrialN'
p3562
I0
sg39
F1.0668732117137552
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x07\x04\n\x9a\xd8'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g2275
sS'block_loop.thisIndex'
p3566
g888
sg38
S'left'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g2282
sS'block_loop.thisRepN'
p3572
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3573
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vn
sS'block_loop.thisTrialN'
p3575
I0
sg39
F1.0001901613322843
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x07\n\x0c\x1d\x90'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g2072
sS'block_loop.thisIndex'
p3579
g888
sg38
S'left'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g1387
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g2079
sS'block_loop.thisRepN'
p3585
I0
sg906
g1387
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3586
I0
sg908
g1394
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vn
sS'block_loop.thisTrialN'
p3588
I0
sg39
F1.23343344125351
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x07\x10\x0c\xb2\x00'
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g2862
sS'block_loop.thisIndex'
p3592
g888
sg38
S'left'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g1165
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g2869
sS'block_loop.thisRepN'
p3598
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3599
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vn
sS'block_loop.thisTrialN'
p3601
I0
sg39
F0.71678505896397837
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x07\x17\x01\x92X'
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g2275
sS'block_loop.thisIndex'
p3605
g888
sg38
S'left'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g2282
sS'block_loop.thisRepN'
p3611
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3612
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vn
sS'block_loop.thisTrialN'
p3614
I0
sg39
F0.65017470894144935
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x07\x1c\r\x1bx'
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F157.59700907870683
sg56
Vr
sS'block_loop.thisIndex'
p3618
g888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vn
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vr
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vn
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'7-olives.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'right'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'22-daim.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'22-daim.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3645
I1
sS'img_wrong'
p3646
S'7-olives.png'
p3647
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vn
sS'block_loop.thisTrialN'
p3649
I0
sg39
F6.7166559089146176
sg34
g752
(S'\x07\xdf\n\x1a\x0f\n\x11\x02\x90@'
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'45-chewy_nougat_redo.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'right'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'45-chewy_nougat_redo.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'41-peanuts_redo.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
S'41-peanuts_redo.png'
p3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3664
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vn
sS'block_loop.thisTrialN'
p3666
I0
sg39
F1.3667781595577253
sg34
g752
(S'\x07\xdf\n\x1a\x0f\n\x1c\r\xf68'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'44-crunch.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'left'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
S'44-crunch.png'
p3674
sg63
g64
sS'trial_loop.thisIndex'
p3675
g59
(g98
S'\x02\x00\x00\x00'
tRp3676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3677
I0
sg3641
S'26-walkers_smoky_bacon.png'
p3678
sS'block_loop.thisRepN'
p3679
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3680
I1
sg3646
S'26-walkers_smoky_bacon.png'
p3681
sg55
g11
sS'block_loop.thisTrial'
p3682
Nsg69
Vn
sS'block_loop.thisTrialN'
p3683
I0
sg39
F0.98341918628102576
sg34
g752
(S'\x07\xdf\n\x1a\x0f\n#\x04\xbe\xd8'
tRp3684
sa(dp3685
S'trial_loop.thisTrialN'
p3686
I3
sg3632
S'38-maltesers.png'
p3687
sS'block_loop.thisIndex'
p3688
g3626
sg38
S'left'
p3689
sg58
g62
sS'trial_loop.thisN'
p3690
I3
sg33
S'38-maltesers.png'
p3691
sg63
g64
sS'trial_loop.thisIndex'
p3692
g59
(g98
S'\x03\x00\x00\x00'
tRp3693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3694
I0
sg3641
S'6-sour_patch_kids.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3697
I1
sg3646
S'6-sour_patch_kids.png'
p3698
sg55
g11
sS'block_loop.thisTrial'
p3699
Nsg69
Vn
sS'block_loop.thisTrialN'
p3700
I0
sg39
F1.1832664870153167
sg34
g752
(S'\x07\xdf\n\x1a\x0f\n)\x05\x10\xe0'
tRp3701
sa(dp3702
S'trial_loop.thisTrialN'
p3703
I4
sg3632
S'1-treacle_cookies.png'
p3704
sS'block_loop.thisIndex'
p3705
g3626
sg38
S'left'
p3706
sg58
g62
sS'trial_loop.thisN'
p3707
I4
sg33
S'1-treacle_cookies.png'
p3708
sg63
g64
sS'trial_loop.thisIndex'
p3709
g59
(g98
S'\x04\x00\x00\x00'
tRp3710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3711
I0
sg3641
S'21-nakd_banana_crunch.png'
p3712
sS'block_loop.thisRepN'
p3713
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3714
I1
sg3646
S'21-nakd_banana_crunch.png'
p3715
sg55
g11
sS'block_loop.thisTrial'
p3716
Nsg69
Vn
sS'block_loop.thisTrialN'
p3717
I0
sg39
F0.63353402433858719
sg34
g752
(S'\x07\xdf\n\x1a\x0f\n/\x08\x7f\xc8'
tRp3718
sa(dp3719
S'trial_loop.thisTrialN'
p3720
I5
sg3632
S'4-corn.png'
p3721
sS'block_loop.thisIndex'
p3722
g3626
sg38
S'right'
p3723
sg58
g62
sS'trial_loop.thisN'
p3724
I5
sg33
S'10-bounty_redo.png'
p3725
sg63
g64
sS'trial_loop.thisIndex'
p3726
g59
(g98
S'\x05\x00\x00\x00'
tRp3727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3728
I0
sg3641
S'10-bounty_redo.png'
p3729
sS'block_loop.thisRepN'
p3730
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3731
I1
sg3646
S'4-corn.png'
p3732
sg55
g11
sS'block_loop.thisTrial'
p3733
Nsg69
Vn
sS'block_loop.thisTrialN'
p3734
I0
sg39
F1.7168004543336792
sg34
g752
(S'\x07\xdf\n\x1a\x0f\n5\x03[`'
tRp3735
sa(dp3736
S'trial_loop.thisTrialN'
p3737
I6
sg3632
S'46-pistachios.png'
p3738
sS'block_loop.thisIndex'
p3739
g3626
sg38
S'left'
p3740
sg58
g62
sS'trial_loop.thisN'
p3741
I6
sg33
S'46-pistachios.png'
p3742
sg63
g64
sS'trial_loop.thisIndex'
p3743
g59
(g98
S'\x06\x00\x00\x00'
tRp3744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3745
I0
sg3641
S'29-beans.png'
p3746
sS'block_loop.thisRepN'
p3747
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3748
I1
sg3646
S'29-beans.png'
p3749
sg55
g11
sS'block_loop.thisTrial'
p3750
Nsg69
Vn
sS'block_loop.thisTrialN'
p3751
I0
sg39
F0.6502043592845439
sg34
g752
(S'\x07\xdf\n\x1a\x0f\n;\x0e\xa2\x18'
tRp3752
sa(dp3753
S'trial_loop.thisTrialN'
p3754
I7
sg3632
S'2-steamed_puddings.png'
p3755
sS'block_loop.thisIndex'
p3756
g3626
sg38
S'left'
p3757
sg58
g62
sS'trial_loop.thisN'
p3758
I7
sg33
S'2-steamed_puddings.png'
p3759
sg63
g64
sS'trial_loop.thisIndex'
p3760
g59
(g98
S'\x07\x00\x00\x00'
tRp3761
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3762
I0
sg3641
S'20-fruit_pastilles.png'
p3763
sS'block_loop.thisRepN'
p3764
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3765
I1
sg3646
S'20-fruit_pastilles.png'
p3766
sg55
g11
sS'block_loop.thisTrial'
p3767
Nsg69
Vn
sS'block_loop.thisTrialN'
p3768
I0
sg39
F1.0001898762329802
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0b\x05\t\xf6\xc8'
tRp3769
sa(dp3770
S'trial_loop.thisTrialN'
p3771
I8
sg3632
S'48-twix.png'
p3772
sS'block_loop.thisIndex'
p3773
g3626
sg38
S'left'
p3774
sg58
g62
sS'trial_loop.thisN'
p3775
I8
sg33
S'48-twix.png'
p3776
sg63
g64
sS'trial_loop.thisIndex'
p3777
g59
(g98
S'\x08\x00\x00\x00'
tRp3778
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3779
I0
sg3641
S'50-polo.png'
p3780
sS'block_loop.thisRepN'
p3781
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3782
I1
sg3646
S'50-polo.png'
p3783
sg55
g11
sS'block_loop.thisTrial'
p3784
Nsg69
Vn
sS'block_loop.thisTrialN'
p3785
I0
sg39
F0.88384734863211634
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0b\x0b\n\x87P'
tRp3786
sa(dp3787
S'trial_loop.thisTrialN'
p3788
I9
sg3632
S'23-crunchie_redo.png'
p3789
sS'block_loop.thisIndex'
p3790
g3626
sg38
S'left'
p3791
sg58
g62
sS'trial_loop.thisN'
p3792
I9
sg33
S'23-crunchie_redo.png'
p3793
sg63
g64
sS'trial_loop.thisIndex'
p3794
g59
(g98
S'\t\x00\x00\x00'
tRp3795
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3796
I0
sg3641
S'33-ambrosia_rice.png'
p3797
sS'block_loop.thisRepN'
p3798
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3799
I1
sg3646
S'33-ambrosia_rice.png'
p3800
sg55
g11
sS'block_loop.thisTrial'
p3801
Nsg69
Vn
sS'block_loop.thisTrialN'
p3802
I0
sg39
F0.95011500911732583
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0b\x11\t/\x90'
tRp3803
sa(dp3804
S'trial_loop.thisTrialN'
p3805
I10
sg3632
g3721
sS'block_loop.thisIndex'
p3806
g3626
sg38
S'right'
p3807
sg58
g62
sS'trial_loop.thisN'
p3808
I10
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p3809
g59
(g98
S'\n\x00\x00\x00'
tRp3810
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3811
I0
sg3641
g3729
sS'block_loop.thisRepN'
p3812
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3813
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p3814
Nsg69
Vn
sS'block_loop.thisTrialN'
p3815
I0
sg39
F0.73355802971127559
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0b\x17\x08\xcd\xe8'
tRp3816
sa(dp3817
S'trial_loop.thisTrialN'
p3818
I11
sg3632
S'27-hartleys_raspberries_jelly.png'
p3819
sS'block_loop.thisIndex'
p3820
g3626
sg38
S'right'
p3821
sg58
g62
sS'trial_loop.thisN'
p3822
I11
sg33
S'51-mars.png'
p3823
sg63
g64
sS'trial_loop.thisIndex'
p3824
g59
(g98
S'\x0b\x00\x00\x00'
tRp3825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3826
I0
sg3641
S'51-mars.png'
p3827
sS'block_loop.thisRepN'
p3828
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3829
I1
sg3646
S'27-hartleys_raspberries_jelly.png'
p3830
sg55
g11
sS'block_loop.thisTrial'
p3831
Nsg69
Vn
sS'block_loop.thisTrialN'
p3832
I0
sg39
F0.58349650525087782
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0b\x1d\x05SH'
tRp3833
sa(dp3834
S'trial_loop.thisTrialN'
p3835
I12
sg3632
S'41-peanuts_redo.png'
p3836
sS'block_loop.thisIndex'
p3837
g3626
sg38
S'right'
p3838
sg58
g62
sS'trial_loop.thisN'
p3839
I12
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p3840
g59
(g98
S'\x0c\x00\x00\x00'
tRp3841
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3842
I0
sg3641
S'45-chewy_nougat_redo.png'
p3843
sS'block_loop.thisRepN'
p3844
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3845
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p3846
Nsg69
Vn
sS'block_loop.thisTrialN'
p3847
I0
sg39
F1.1168679658840119
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0b"\x0e\xb9\x88'
tRp3848
sa(dp3849
S'trial_loop.thisTrialN'
p3850
I13
sg3632
S'49-yorkie.png'
p3851
sS'block_loop.thisIndex'
p3852
g3626
sg38
S'left'
p3853
sg58
g62
sS'trial_loop.thisN'
p3854
I13
sg33
S'49-yorkie.png'
p3855
sg63
g64
sS'trial_loop.thisIndex'
p3856
g59
(g98
S'\r\x00\x00\x00'
tRp3857
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3858
I0
sg3641
S'35-raisins.png'
p3859
sS'block_loop.thisRepN'
p3860
I1
sg3644
g3855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3861
I1
sg3646
S'35-raisins.png'
p3862
sg55
g11
sS'block_loop.thisTrial'
p3863
Nsg69
Vn
sS'block_loop.thisTrialN'
p3864
I0
sg39
F0.73345026212064113
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0b)\x01\xb5\x80'
tRp3865
sa(dp3866
S'trial_loop.thisTrialN'
p3867
I14
sg3632
S'18-mms.png'
p3868
sS'block_loop.thisIndex'
p3869
g3626
sg38
S'left'
p3870
sg58
g62
sS'trial_loop.thisN'
p3871
I14
sg33
S'18-mms.png'
p3872
sg63
g64
sS'trial_loop.thisIndex'
p3873
g59
(g98
S'\x0e\x00\x00\x00'
tRp3874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3875
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p3876
sS'block_loop.thisRepN'
p3877
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3878
I1
sg3646
S'43-mrporky_pork_crackles_redo.png'
p3879
sg55
g11
sS'block_loop.thisTrial'
p3880
Nsg69
Vn
sS'block_loop.thisTrialN'
p3881
I0
sg39
F0.61723773986886954
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0b.\r} '
tRp3882
sa(dp3883
S'trial_loop.thisTrialN'
p3884
I15
sg3632
S'30-spaghetti_hoops.png'
p3885
sS'block_loop.thisIndex'
p3886
g3626
sg38
S'right'
p3887
sg58
g62
sS'trial_loop.thisN'
p3888
I15
sg33
S'19-caramello_redo.png'
p3889
sg63
g64
sS'trial_loop.thisIndex'
p3890
g59
(g98
S'\x0f\x00\x00\x00'
tRp3891
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3892
I0
sg3641
S'19-caramello_redo.png'
p3893
sS'block_loop.thisRepN'
p3894
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3895
I1
sg3646
S'30-spaghetti_hoops.png'
p3896
sg55
g11
sS'block_loop.thisTrial'
p3897
Nsg69
Vn
sS'block_loop.thisTrialN'
p3898
I0
sg39
F1.5000875255309438
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0b4\x08\x1a8'
tRp3899
sa(dp3900
S'trial_loop.thisTrialN'
p3901
I16
sg3632
S'33-ambrosia_rice.png'
p3902
sS'block_loop.thisIndex'
p3903
g3626
sg38
S'right'
p3904
sg58
g62
sS'trial_loop.thisN'
p3905
I16
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p3906
g59
(g98
S'\x10\x00\x00\x00'
tRp3907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3908
I0
sg3641
S'23-crunchie_redo.png'
p3909
sS'block_loop.thisRepN'
p3910
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3911
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p3912
Nsg69
Vn
sS'block_loop.thisTrialN'
p3913
I0
sg39
F1.1001930693464601
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0b;\x01\x05\xb8'
tRp3914
sa(dp3915
S'trial_loop.thisTrialN'
p3916
I17
sg3632
S'20-fruit_pastilles.png'
p3917
sS'block_loop.thisIndex'
p3918
g3626
sg38
S'right'
p3919
sg58
g62
sS'trial_loop.thisN'
p3920
I17
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p3921
g59
(g98
S'\x11\x00\x00\x00'
tRp3922
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3923
I0
sg3641
S'2-steamed_puddings.png'
p3924
sS'block_loop.thisRepN'
p3925
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3926
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p3927
Nsg69
Vn
sS'block_loop.thisTrialN'
p3928
I0
sg39
F0.60009328453907074
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0c\x05\x03\x05p'
tRp3929
sa(dp3930
S'trial_loop.thisTrialN'
p3931
I18
sg3632
g3902
sS'block_loop.thisIndex'
p3932
g3626
sg38
S'right'
p3933
sg58
g62
sS'trial_loop.thisN'
p3934
I18
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p3935
g59
(g98
S'\x12\x00\x00\x00'
tRp3936
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3937
I0
sg3641
g3909
sS'block_loop.thisRepN'
p3938
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3939
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p3940
Nsg69
Vn
sS'block_loop.thisTrialN'
p3941
I0
sg39
F0.86687623376747069
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0c\n\x0c\xaa0'
tRp3942
sa(dp3943
S'trial_loop.thisTrialN'
p3944
I19
sg3632
S'26-walkers_smoky_bacon.png'
p3945
sS'block_loop.thisIndex'
p3946
g3626
sg38
S'right'
p3947
sg58
g62
sS'trial_loop.thisN'
p3948
I19
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p3949
g59
(g98
S'\x13\x00\x00\x00'
tRp3950
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3951
I0
sg3641
S'44-crunch.png'
p3952
sS'block_loop.thisRepN'
p3953
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3954
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p3955
Nsg69
Vn
sS'block_loop.thisTrialN'
p3956
I0
sg39
F1.366874238071432
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0c\x10\x0b\x13\xf0'
tRp3957
sa(dp3958
S'trial_loop.thisTrialN'
p3959
I20
sg3632
S'35-raisins.png'
p3960
sS'block_loop.thisIndex'
p3961
g3626
sg38
S'right'
p3962
sg58
g62
sS'trial_loop.thisN'
p3963
I20
sg33
g3855
sg63
g64
sS'trial_loop.thisIndex'
p3964
g59
(g98
S'\x14\x00\x00\x00'
tRp3965
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3966
I0
sg3641
S'49-yorkie.png'
p3967
sS'block_loop.thisRepN'
p3968
I1
sg3644
g3855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3969
I1
sg3646
g3862
sg55
g11
sS'block_loop.thisTrial'
p3970
Nsg69
Vn
sS'block_loop.thisTrialN'
p3971
I0
sg39
F0.60010411831808597
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0c\x17\x02\x1b\x10'
tRp3972
sa(dp3973
S'trial_loop.thisTrialN'
p3974
I21
sg3632
S'19-caramello_redo.png'
p3975
sS'block_loop.thisIndex'
p3976
g3626
sg38
S'left'
p3977
sg58
g62
sS'trial_loop.thisN'
p3978
I21
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p3979
g59
(g98
S'\x15\x00\x00\x00'
tRp3980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3981
I0
sg3641
S'30-spaghetti_hoops.png'
p3982
sS'block_loop.thisRepN'
p3983
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3984
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p3985
Nsg69
Vn
sS'block_loop.thisTrialN'
p3986
I0
sg39
F4.5334572755673435
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0c\x1c\x0b\xbf\xd0'
tRp3987
sa(dp3988
S'trial_loop.thisTrialN'
p3989
I22
sg3632
g3960
sS'block_loop.thisIndex'
p3990
g3626
sg38
S'right'
p3991
sg58
g62
sS'trial_loop.thisN'
p3992
I22
sg33
g3855
sg63
g64
sS'trial_loop.thisIndex'
p3993
g59
(g98
S'\x16\x00\x00\x00'
tRp3994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3995
I0
sg3641
g3967
sS'block_loop.thisRepN'
p3996
I1
sg3644
g3855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3997
I1
sg3646
g3862
sg55
g11
sS'block_loop.thisTrial'
p3998
Nsg69
Vn
sS'block_loop.thisTrialN'
p3999
I0
sg39
F0.73353294096068566
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0c&\x05\x14\xc8'
tRp4000
sa(dp4001
S'trial_loop.thisTrialN'
p4002
I23
sg3632
g3738
sS'block_loop.thisIndex'
p4003
g3626
sg38
S'left'
p4004
sg58
g62
sS'trial_loop.thisN'
p4005
I23
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4006
g59
(g98
S'\x17\x00\x00\x00'
tRp4007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4008
I0
sg3641
g3746
sS'block_loop.thisRepN'
p4009
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4010
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4011
Nsg69
Vn
sS'block_loop.thisTrialN'
p4012
I0
sg39
F1.0667010116467281
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0c,\x01\x9a('
tRp4013
sa(dp4014
S'trial_loop.thisTrialN'
p4015
I24
sg3632
g3704
sS'block_loop.thisIndex'
p4016
g3626
sg38
S'left'
p4017
sg58
g62
sS'trial_loop.thisN'
p4018
I24
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4019
g59
(g98
S'\x18\x00\x00\x00'
tRp4020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4021
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4022
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4023
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4024
Nsg69
Vn
sS'block_loop.thisTrialN'
p4025
I0
sg39
F0.63392803177612222
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0c2\x03\x1c\xe0'
tRp4026
sa(dp4027
S'trial_loop.thisTrialN'
p4028
I25
sg3632
S'16-skips_prawn.png'
p4029
sS'block_loop.thisIndex'
p4030
g3626
sg38
S'left'
p4031
sg58
g62
sS'trial_loop.thisN'
p4032
I25
sg33
S'42-mrkipling_lemon_slices.png'
p4033
sg63
g64
sS'trial_loop.thisIndex'
p4034
g59
(g98
S'\x19\x00\x00\x00'
tRp4035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4036
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p4037
sS'block_loop.thisRepN'
p4038
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4039
I1
sg3646
S'16-skips_prawn.png'
p4040
sg55
g11
sS'block_loop.thisTrial'
p4041
Nsg69
Vn
sS'block_loop.thisTrialN'
p4042
I0
sg39
F0.63333930141470773
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0c7\r:\xb8'
tRp4043
sa(dp4044
S'trial_loop.thisTrialN'
p4045
I26
sg3632
S'31-hobnobs.png'
p4046
sS'block_loop.thisIndex'
p4047
g3626
sg38
S'right'
p4048
sg58
g62
sS'trial_loop.thisN'
p4049
I26
sg33
S'31-hobnobs.png'
p4050
sg63
g64
sS'trial_loop.thisIndex'
p4051
g59
(g98
S'\x1a\x00\x00\x00'
tRp4052
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4053
I0
sg3641
S'25-kitkat.png'
p4054
sS'block_loop.thisRepN'
p4055
I1
sg3644
S'25-kitkat.png'
p4056
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4057
I1
sg3646
g4050
sg55
g11
sS'block_loop.thisTrial'
p4058
Nsg69
Vn
sS'block_loop.thisTrialN'
p4059
I0
sg39
F2.2000973329513727
sg34
g752
(S'\x07\xdf\n\x1a\x0f\r\x01\x08\x16P'
tRp4060
sa(dp4061
S'trial_loop.thisTrialN'
p4062
I27
sg3632
S'10-bounty_redo.png'
p4063
sS'block_loop.thisIndex'
p4064
g3626
sg38
S'left'
p4065
sg58
g62
sS'trial_loop.thisN'
p4066
I27
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4067
g59
(g98
S'\x1b\x00\x00\x00'
tRp4068
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4069
I0
sg3641
S'4-corn.png'
p4070
sS'block_loop.thisRepN'
p4071
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4072
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4073
Nsg69
Vn
sS'block_loop.thisTrialN'
p4074
I0
sg39
F1.7667684091566116
sg34
g752
(S'\x07\xdf\n\x1a\x0f\r\x08\x0b\xb8\x00'
tRp4075
sa(dp4076
S'trial_loop.thisTrialN'
p4077
I28
sg3632
g4046
sS'block_loop.thisIndex'
p4078
g3626
sg38
S'right'
p4079
sg58
g62
sS'trial_loop.thisN'
p4080
I28
sg33
g4056
sg63
g64
sS'trial_loop.thisIndex'
p4081
g59
(g98
S'\x1c\x00\x00\x00'
tRp4082
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4083
I0
sg3641
g4054
sS'block_loop.thisRepN'
p4084
I1
sg3644
g4056
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4085
I1
sg3646
g4050
sg55
g11
sS'block_loop.thisTrial'
p4086
Nsg69
Vn
sS'block_loop.thisTrialN'
p4087
I0
sg39
F1.5834525999362086
sg34
g752
(S'\x07\xdf\n\x1a\x0f\r\x0f\x08\xb2\x90'
tRp4088
sa(dp4089
S'trial_loop.thisTrialN'
p4090
I29
sg3632
g3772
sS'block_loop.thisIndex'
p4091
g3626
sg38
S'left'
p4092
sg58
g62
sS'trial_loop.thisN'
p4093
I29
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4094
g59
(g98
S'\x1d\x00\x00\x00'
tRp4095
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4096
I0
sg3641
g3780
sS'block_loop.thisRepN'
p4097
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4098
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4099
Nsg69
Vn
sS'block_loop.thisTrialN'
p4100
I0
sg39
F0.98354890652899485
sg34
g752
(S'\x07\xdf\n\x1a\x0f\r\x16\x02\xce\xc0'
tRp4101
sa(dp4102
S'trial_loop.thisTrialN'
p4103
I30
sg3632
S'3-ellas_strawberries_apples.png'
p4104
sS'block_loop.thisIndex'
p4105
g3626
sg38
S'left'
p4106
sg58
g62
sS'trial_loop.thisN'
p4107
I30
sg33
S'3-ellas_strawberries_apples.png'
p4108
sg63
g64
sS'trial_loop.thisIndex'
p4109
g59
(g98
S'\x1e\x00\x00\x00'
tRp4110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4111
I0
sg3641
S'13-mccoys_steak_crisps.png'
p4112
sS'block_loop.thisRepN'
p4113
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4114
I1
sg3646
S'13-mccoys_steak_crisps.png'
p4115
sg55
g11
sS'block_loop.thisTrial'
p4116
Nsg69
Vn
sS'block_loop.thisTrialN'
p4117
I0
sg39
F1.6835627053424105
sg34
g752
(S'\x07\xdf\n\x1a\x0f\r\x1c\x03$\xb0'
tRp4118
sa(dp4119
S'trial_loop.thisTrialN'
p4120
I31
sg3632
g3704
sS'block_loop.thisIndex'
p4121
g3626
sg38
S'left'
p4122
sg58
g62
sS'trial_loop.thisN'
p4123
I31
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4124
g59
(g98
S'\x1f\x00\x00\x00'
tRp4125
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4126
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4127
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4128
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4129
Nsg69
Vn
sS'block_loop.thisTrialN'
p4130
I0
sg39
F0.70010503063622309
sg34
g752
(S'\x07\xdf\n\x1a\x0f\r"\r\xf2P'
tRp4131
sa(dp4132
S'trial_loop.thisTrialN'
p4133
I32
sg3632
g3885
sS'block_loop.thisIndex'
p4134
g3626
sg38
S'right'
p4135
sg58
g62
sS'trial_loop.thisN'
p4136
I32
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p4137
g59
(g98
S' \x00\x00\x00'
tRp4138
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4139
I0
sg3641
g3893
sS'block_loop.thisRepN'
p4140
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4141
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p4142
Nsg69
Vn
sS'block_loop.thisTrialN'
p4143
I0
sg39
F1.5334316166163262
sg34
g752
(S'\x07\xdf\n\x1a\x0f\r(\t\xfe\x98'
tRp4144
sa(dp4145
S'trial_loop.thisTrialN'
p4146
I33
sg3632
S'6-sour_patch_kids.png'
p4147
sS'block_loop.thisIndex'
p4148
g3626
sg38
S'right'
p4149
sg58
g62
sS'trial_loop.thisN'
p4150
I33
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4151
g59
(g98
S'!\x00\x00\x00'
tRp4152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4153
I0
sg3641
S'38-maltesers.png'
p4154
sS'block_loop.thisRepN'
p4155
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4156
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4157
Nsg69
Vn
sS'block_loop.thisTrialN'
p4158
I0
sg39
F0.99982010224812257
sg34
g752
(S'\x07\xdf\n\x1a\x0f\r/\x03c0'
tRp4159
sa(dp4160
S'trial_loop.thisTrialN'
p4161
I34
sg3632
S'43-mrporky_pork_crackles_redo.png'
p4162
sS'block_loop.thisIndex'
p4163
g3626
sg38
S'right'
p4164
sg58
g62
sS'trial_loop.thisN'
p4165
I34
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p4166
g59
(g98
S'"\x00\x00\x00'
tRp4167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4168
I0
sg3641
S'18-mms.png'
p4169
sS'block_loop.thisRepN'
p4170
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4171
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p4172
Nsg69
Vn
sS'block_loop.thisTrialN'
p4173
I0
sg39
F0.8505605625359749
sg34
g752
(S'\x07\xdf\n\x1a\x0f\r5\x03\xb9 '
tRp4174
sa(dp4175
S'trial_loop.thisTrialN'
p4176
I35
sg3632
g4046
sS'block_loop.thisIndex'
p4177
g3626
sg38
S'right'
p4178
sg58
g62
sS'trial_loop.thisN'
p4179
I35
sg33
g4056
sg63
g64
sS'trial_loop.thisIndex'
p4180
g59
(g98
S'#\x00\x00\x00'
tRp4181
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4182
I0
sg3641
g4054
sS'block_loop.thisRepN'
p4183
I1
sg3644
g4056
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4184
I1
sg3646
g4050
sg55
g11
sS'block_loop.thisTrial'
p4185
Nsg69
Vn
sS'block_loop.thisTrialN'
p4186
I0
sg39
F2.6334028785922783
sg34
g752
(S'\x07\xdf\n\x1a\x0f\r;\x01\xe8H'
tRp4187
sa(dp4188
S'trial_loop.thisTrialN'
p4189
I36
sg3632
g3670
sS'block_loop.thisIndex'
p4190
g3626
sg38
S'left'
p4191
sg58
g62
sS'trial_loop.thisN'
p4192
I36
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4193
g59
(g98
S'$\x00\x00\x00'
tRp4194
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4195
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4196
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4197
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4198
Nsg69
Vn
sS'block_loop.thisTrialN'
p4199
I0
sg39
F1.2335320856627732
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0e\x06\x0c5\x00'
tRp4200
sa(dp4201
S'trial_loop.thisTrialN'
p4202
I37
sg3632
g3704
sS'block_loop.thisIndex'
p4203
g3626
sg38
S'left'
p4204
sg58
g62
sS'trial_loop.thisN'
p4205
I37
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4206
g59
(g98
S'%\x00\x00\x00'
tRp4207
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4208
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4209
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4210
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4211
Nsg69
Vn
sS'block_loop.thisTrialN'
p4212
I0
sg39
F0.6168240605684332
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0e\r\x01\x15X'
tRp4213
sa(dp4214
S'trial_loop.thisTrialN'
p4215
I38
sg3632
g3885
sS'block_loop.thisIndex'
p4216
g3626
sg38
S'right'
p4217
sg58
g62
sS'trial_loop.thisN'
p4218
I38
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p4219
g59
(g98
S'&\x00\x00\x00'
tRp4220
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4221
I0
sg3641
g3893
sS'block_loop.thisRepN'
p4222
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4223
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p4224
Nsg69
Vn
sS'block_loop.thisTrialN'
p4225
I0
sg39
F0.85009813122997002
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0e\x12\n\xf8\x98'
tRp4226
sa(dp4227
S'trial_loop.thisTrialN'
p4228
I39
sg3632
g3945
sS'block_loop.thisIndex'
p4229
g3626
sg38
S'right'
p4230
sg58
g62
sS'trial_loop.thisN'
p4231
I39
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4232
g59
(g98
S"'\x00\x00\x00"
tRp4233
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4234
I0
sg3641
g3952
sS'block_loop.thisRepN'
p4235
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4236
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4237
Nsg69
Vn
sS'block_loop.thisTrialN'
p4238
I0
sg39
F0.98390271494554327
sg34
g752
(S"\x07\xdf\n\x1a\x0f\x0e\x18\t'\xc0"
tRp4239
sa(dp4240
S'trial_loop.thisTrialN'
p4241
I40
sg3632
g3836
sS'block_loop.thisIndex'
p4242
g3626
sg38
S'left'
p4243
sg58
g62
sS'trial_loop.thisN'
p4244
I40
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4245
g59
(g98
S'(\x00\x00\x00'
tRp4246
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4247
I0
sg3641
g3843
sS'block_loop.thisRepN'
p4248
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4249
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p4250
Nsg69
Vn
sS'block_loop.thisTrialN'
p4251
I0
sg39
F1.1835048301545612
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0e\x1e\t}\xb0'
tRp4252
sa(dp4253
S'trial_loop.thisTrialN'
p4254
I41
sg3632
g3960
sS'block_loop.thisIndex'
p4255
g3626
sg38
S'right'
p4256
sg58
g62
sS'trial_loop.thisN'
p4257
I41
sg33
g3855
sg63
g64
sS'trial_loop.thisIndex'
p4258
g59
(g98
S')\x00\x00\x00'
tRp4259
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4260
I0
sg3641
g3967
sS'block_loop.thisRepN'
p4261
I1
sg3644
g3855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4262
I1
sg3646
g3862
sg55
g11
sS'block_loop.thisTrial'
p4263
Nsg69
Vn
sS'block_loop.thisTrialN'
p4264
I0
sg39
F0.65012880793074146
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0e$\x0c\xaa0'
tRp4265
sa(dp4266
S'trial_loop.thisTrialN'
p4267
I42
sg3632
g3945
sS'block_loop.thisIndex'
p4268
g3626
sg38
S'right'
p4269
sg58
g62
sS'trial_loop.thisN'
p4270
I42
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4271
g59
(g98
S'*\x00\x00\x00'
tRp4272
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4273
I0
sg3641
g3952
sS'block_loop.thisRepN'
p4274
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4275
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4276
Nsg69
Vn
sS'block_loop.thisTrialN'
p4277
I0
sg39
F0.95032199131674133
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0e*\x07\xc4H'
tRp4278
sa(dp4279
S'trial_loop.thisTrialN'
p4280
I43
sg3632
S'50-polo.png'
p4281
sS'block_loop.thisIndex'
p4282
g3626
sg38
S'right'
p4283
sg58
g62
sS'trial_loop.thisN'
p4284
I43
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4285
g59
(g98
S'+\x00\x00\x00'
tRp4286
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4287
I0
sg3641
S'48-twix.png'
p4288
sS'block_loop.thisRepN'
p4289
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4290
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4291
Nsg69
Vn
sS'block_loop.thisTrialN'
p4292
I0
sg39
F0.85011210110315005
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0e0\x07\x9d8'
tRp4293
sa(dp4294
S'trial_loop.thisTrialN'
p4295
I44
sg3632
g3868
sS'block_loop.thisIndex'
p4296
g3626
sg38
S'left'
p4297
sg58
g62
sS'trial_loop.thisN'
p4298
I44
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p4299
g59
(g98
S',\x00\x00\x00'
tRp4300
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4301
I0
sg3641
g3876
sS'block_loop.thisRepN'
p4302
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4303
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p4304
Nsg69
Vn
sS'block_loop.thisTrialN'
p4305
I0
sg39
F0.96678648446140869
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0e6\x05\xcc`'
tRp4306
sa(dp4307
S'trial_loop.thisTrialN'
p4308
I45
sg3632
S'21-nakd_banana_crunch.png'
p4309
sS'block_loop.thisIndex'
p4310
g3626
sg38
S'right'
p4311
sg58
g62
sS'trial_loop.thisN'
p4312
I45
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p4313
g59
(g98
S'-\x00\x00\x00'
tRp4314
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4315
I0
sg3641
S'1-treacle_cookies.png'
p4316
sS'block_loop.thisRepN'
p4317
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4318
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4319
Nsg69
Vn
sS'block_loop.thisTrialN'
p4320
I0
sg39
F0.68355415235964756
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0f\x00\x05\xe3\xd0'
tRp4321
sa(dp4322
S'trial_loop.thisTrialN'
p4323
I46
sg3632
g3772
sS'block_loop.thisIndex'
p4324
g3626
sg38
S'left'
p4325
sg58
g62
sS'trial_loop.thisN'
p4326
I46
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4327
g59
(g98
S'.\x00\x00\x00'
tRp4328
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4329
I0
sg3641
g3780
sS'block_loop.thisRepN'
p4330
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4331
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4332
Nsg69
Vn
sS'block_loop.thisTrialN'
p4333
I0
sg39
F0.73353522175602848
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0f\x06\x01w\x00'
tRp4334
sa(dp4335
S'trial_loop.thisTrialN'
p4336
I47
sg3632
S'51-mars.png'
p4337
sS'block_loop.thisIndex'
p4338
g3626
sg38
S'left'
p4339
sg58
g62
sS'trial_loop.thisN'
p4340
I47
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p4341
g59
(g98
S'/\x00\x00\x00'
tRp4342
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4343
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p4344
sS'block_loop.thisRepN'
p4345
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4346
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p4347
Nsg69
Vn
sS'block_loop.thisTrialN'
p4348
I0
sg39
F1.100208464716161
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0f\x0b\r>\xa0'
tRp4349
sa(dp4350
S'trial_loop.thisTrialN'
p4351
I48
sg3632
S'8-liquorice_catherine_wheels.png'
p4352
sS'block_loop.thisIndex'
p4353
g3626
sg38
S'right'
p4354
sg58
g62
sS'trial_loop.thisN'
p4355
I48
sg33
S'17-jacobs_mini_cheddars_redo.png'
p4356
sg63
g64
sS'trial_loop.thisIndex'
p4357
g59
(g98
S'0\x00\x00\x00'
tRp4358
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4359
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p4360
sS'block_loop.thisRepN'
p4361
I1
sg3644
g4356
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4362
I1
sg3646
S'8-liquorice_catherine_wheels.png'
p4363
sg55
g11
sS'block_loop.thisTrial'
p4364
Nsg69
Vn
sS'block_loop.thisTrialN'
p4365
I0
sg39
F2.3668405963362602
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0f\x11\x0f>X'
tRp4366
sa(dp4367
S'trial_loop.thisTrialN'
p4368
I49
sg3632
g4337
sS'block_loop.thisIndex'
p4369
g3626
sg38
S'left'
p4370
sg58
g62
sS'trial_loop.thisN'
p4371
I49
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p4372
g59
(g98
S'1\x00\x00\x00'
tRp4373
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4374
I0
sg3641
g4344
sS'block_loop.thisRepN'
p4375
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4376
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p4377
Nsg69
Vn
sS'block_loop.thisTrialN'
p4378
I0
sg39
F0.75016364708335459
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0f\x19\x05\xff('
tRp4379
sa(dp4380
S'trial_loop.thisTrialN'
p4381
I50
sg3632
g3975
sS'block_loop.thisIndex'
p4382
g3626
sg38
S'left'
p4383
sg58
g62
sS'trial_loop.thisN'
p4384
I50
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p4385
g59
(g98
S'2\x00\x00\x00'
tRp4386
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4387
I0
sg3641
g3982
sS'block_loop.thisRepN'
p4388
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4389
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p4390
Nsg69
Vn
sS'block_loop.thisTrialN'
p4391
I0
sg39
F1.3172096290627451
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0f\x1f\x02\xc3\x08'
tRp4392
sa(dp4393
S'trial_loop.thisTrialN'
p4394
I51
sg3632
g3819
sS'block_loop.thisIndex'
p4395
g3626
sg38
S'right'
p4396
sg58
g62
sS'trial_loop.thisN'
p4397
I51
sg33
g3830
sg63
g64
sS'trial_loop.thisIndex'
p4398
g59
(g98
S'3\x00\x00\x00'
tRp4399
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4400
I0
sg3641
g3827
sS'block_loop.thisRepN'
p4401
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4402
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p4403
Nsg69
Vn
sS'block_loop.thisTrialN'
p4404
I0
sg39
F0.88346845146588748
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0f%\x08\x16P'
tRp4405
sa(dp4406
S'trial_loop.thisTrialN'
p4407
I52
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p4408
sS'block_loop.thisIndex'
p4409
g3626
sg38
S'left'
p4410
sg58
g62
sS'trial_loop.thisN'
p4411
I52
sg33
g4356
sg63
g64
sS'trial_loop.thisIndex'
p4412
g59
(g98
S'4\x00\x00\x00'
tRp4413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4414
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p4415
sS'block_loop.thisRepN'
p4416
I1
sg3644
g4356
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4417
I1
sg3646
g4363
sg55
g11
sS'block_loop.thisTrial'
p4418
Nsg69
Vn
sS'block_loop.thisTrialN'
p4419
I0
sg39
F1.5668518292550289
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0f+\x06\xbe\x90'
tRp4420
sa(dp4421
S'trial_loop.thisTrialN'
p4422
I53
sg3632
g3738
sS'block_loop.thisIndex'
p4423
g3626
sg38
S'left'
p4424
sg58
g62
sS'trial_loop.thisN'
p4425
I53
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4426
g59
(g98
S'5\x00\x00\x00'
tRp4427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4428
I0
sg3641
g3746
sS'block_loop.thisRepN'
p4429
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4430
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4431
Nsg69
Vn
sS'block_loop.thisTrialN'
p4432
I0
sg39
F0.81676059743131191
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0f2\x00\xa0('
tRp4433
sa(dp4434
S'trial_loop.thisTrialN'
p4435
I54
sg3632
S'25-kitkat.png'
p4436
sS'block_loop.thisIndex'
p4437
g3626
sg38
S'left'
p4438
sg58
g62
sS'trial_loop.thisN'
p4439
I54
sg33
g4056
sg63
g64
sS'trial_loop.thisIndex'
p4440
g59
(g98
S'6\x00\x00\x00'
tRp4441
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4442
I0
sg3641
S'31-hobnobs.png'
p4443
sS'block_loop.thisRepN'
p4444
I1
sg3644
g4056
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4445
I1
sg3646
g4050
sg55
g11
sS'block_loop.thisTrial'
p4446
Nsg69
Vn
sS'block_loop.thisTrialN'
p4447
I0
sg39
F1.8334163923054803
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x0f7\r\x98x'
tRp4448
sa(dp4449
S'trial_loop.thisTrialN'
p4450
I55
sg3632
g3902
sS'block_loop.thisIndex'
p4451
g3626
sg38
S'right'
p4452
sg58
g62
sS'trial_loop.thisN'
p4453
I55
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p4454
g59
(g98
S'7\x00\x00\x00'
tRp4455
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4456
I0
sg3641
g3909
sS'block_loop.thisRepN'
p4457
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4458
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p4459
Nsg69
Vn
sS'block_loop.thisTrialN'
p4460
I0
sg39
F0.76687788734489004
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x10\x02\x0b\xc3\xb8'
tRp4461
sa(dp4462
S'trial_loop.thisTrialN'
p4463
I56
sg3632
S'5-pineapple.png'
p4464
sS'block_loop.thisIndex'
p4465
g3626
sg38
S'right'
p4466
sg58
g62
sS'trial_loop.thisN'
p4467
I56
sg33
S'40-sardines.png'
p4468
sg63
g64
sS'trial_loop.thisIndex'
p4469
g59
(g98
S'8\x00\x00\x00'
tRp4470
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4471
I0
sg3641
S'40-sardines.png'
p4472
sS'block_loop.thisRepN'
p4473
I1
sg3644
g4468
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4474
I1
sg3646
S'5-pineapple.png'
p4475
sg55
g11
sS'block_loop.thisTrial'
p4476
Nsg69
Vn
sS'block_loop.thisTrialN'
p4477
I0
sg39
F0.81677200140893547
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x10\x08\x08\x83\xb0'
tRp4478
sa(dp4479
S'trial_loop.thisTrialN'
p4480
I57
sg3632
S'22-daim.png'
p4481
sS'block_loop.thisIndex'
p4482
g3626
sg38
S'left'
p4483
sg58
g62
sS'trial_loop.thisN'
p4484
I57
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4485
g59
(g98
S'9\x00\x00\x00'
tRp4486
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4487
I0
sg3641
S'7-olives.png'
p4488
sS'block_loop.thisRepN'
p4489
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4490
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4491
Nsg69
Vn
sS'block_loop.thisTrialN'
p4492
I0
sg39
F1.0500999558662443
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x10\x0e\x069\xc0'
tRp4493
sa(dp4494
S'trial_loop.thisTrialN'
p4495
I58
sg3632
g3721
sS'block_loop.thisIndex'
p4496
g3626
sg38
S'right'
p4497
sg58
g62
sS'trial_loop.thisN'
p4498
I58
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4499
g59
(g98
S':\x00\x00\x00'
tRp4500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4501
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4502
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4503
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4504
Nsg69
Vn
sS'block_loop.thisTrialN'
p4505
I0
sg39
F1.3501742527823808
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x10\x14\x07\x81\xe0'
tRp4506
sa(dp4507
S'trial_loop.thisTrialN'
p4508
I59
sg3632
g4029
sS'block_loop.thisIndex'
p4509
g3626
sg38
S'right'
p4510
sg58
g62
sS'trial_loop.thisN'
p4511
I59
sg33
g4033
sg63
g64
sS'trial_loop.thisIndex'
p4512
g59
(g98
S';\x00\x00\x00'
tRp4513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4514
I0
sg3641
g4037
sS'block_loop.thisRepN'
p4515
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4516
I1
sg3646
g4040
sg55
g11
sS'block_loop.thisTrial'
p4517
Nsg69
Vn
sS'block_loop.thisTrialN'
p4518
I0
sg39
F0.74999543840840488
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x10\x1a\rR('
tRp4519
sa(dp4520
S'trial_loop.thisTrialN'
p4521
I60
sg3632
S'13-mccoys_steak_crisps.png'
p4522
sS'block_loop.thisIndex'
p4523
g3626
sg38
S'right'
p4524
sg58
g62
sS'trial_loop.thisN'
p4525
I60
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p4526
g59
(g98
S'<\x00\x00\x00'
tRp4527
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4528
I0
sg3641
S'3-ellas_strawberries_apples.png'
p4529
sS'block_loop.thisRepN'
p4530
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4531
I1
sg3646
g4115
sg55
g11
sS'block_loop.thisTrial'
p4532
Nsg69
Vn
sS'block_loop.thisTrialN'
p4533
I0
sg39
F1.7339297993930813
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x10 \n\x16\x08'
tRp4534
sa(dp4535
S'trial_loop.thisTrialN'
p4536
I61
sg3632
g3633
sS'block_loop.thisIndex'
p4537
g3626
sg38
S'right'
p4538
sg58
g62
sS'trial_loop.thisN'
p4539
I61
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4540
g59
(g98
S'=\x00\x00\x00'
tRp4541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4542
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4543
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4544
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4545
Nsg69
Vn
sS'block_loop.thisTrialN'
p4546
I0
sg39
F0.93344695496762142
sg34
g752
(S"\x07\xdf\n\x1a\x0f\x10'\x06\x93\x98"
tRp4547
sa(dp4548
S'trial_loop.thisTrialN'
p4549
I62
sg3632
g3653
sS'block_loop.thisIndex'
p4550
g3626
sg38
S'right'
p4551
sg58
g62
sS'trial_loop.thisN'
p4552
I62
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p4553
g59
(g98
S'>\x00\x00\x00'
tRp4554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4555
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4556
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4557
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p4558
Nsg69
Vn
sS'block_loop.thisTrialN'
p4559
I0
sg39
F1.3334571615268942
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x10-\x05\xf3p'
tRp4560
sa(dp4561
S'trial_loop.thisTrialN'
p4562
I63
sg3632
g3633
sS'block_loop.thisIndex'
p4563
g3626
sg38
S'left'
p4564
sg58
g62
sS'trial_loop.thisN'
p4565
I63
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4566
g59
(g98
S'?\x00\x00\x00'
tRp4567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4568
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4569
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4570
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4571
Nsg69
Vn
sS'block_loop.thisTrialN'
p4572
I0
sg39
F4.8001164916340713
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x103\x0b\xc3\xb8'
tRp4573
sa(dp4574
S'trial_loop.thisTrialN'
p4575
I64
sg3632
g3755
sS'block_loop.thisIndex'
p4576
g3626
sg38
S'left'
p4577
sg58
g62
sS'trial_loop.thisN'
p4578
I64
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4579
g59
(g98
S'@\x00\x00\x00'
tRp4580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4581
I0
sg3641
g3763
sS'block_loop.thisRepN'
p4582
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4583
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4584
Nsg69
Vn
sS'block_loop.thisTrialN'
p4585
I0
sg39
F0.93350283445852256
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x11\x01\t#\xd8'
tRp4586
sa(dp4587
S'trial_loop.thisTrialN'
p4588
I65
sg3632
S'29-beans.png'
p4589
sS'block_loop.thisIndex'
p4590
g3626
sg38
S'right'
p4591
sg58
g62
sS'trial_loop.thisN'
p4592
I65
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4593
g59
(g98
S'A\x00\x00\x00'
tRp4594
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4595
I0
sg3641
S'46-pistachios.png'
p4596
sS'block_loop.thisRepN'
p4597
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4598
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4599
Nsg69
Vn
sS'block_loop.thisTrialN'
p4600
I0
sg39
F0.61723916536629986
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x11\x07\x08\x83\xb0'
tRp4601
sa(dp4602
S'trial_loop.thisTrialN'
p4603
I66
sg3632
g3789
sS'block_loop.thisIndex'
p4604
g3626
sg38
S'left'
p4605
sg58
g62
sS'trial_loop.thisN'
p4606
I66
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p4607
g59
(g98
S'B\x00\x00\x00'
tRp4608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4609
I0
sg3641
g3797
sS'block_loop.thisRepN'
p4610
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4611
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p4612
Nsg69
Vn
sS'block_loop.thisTrialN'
p4613
I0
sg39
F1.2166000294218975
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x11\r\x03_H'
tRp4614
sa(dp4615
S'trial_loop.thisTrialN'
p4616
I67
sg3632
g4436
sS'block_loop.thisIndex'
p4617
g3626
sg38
S'left'
p4618
sg58
g62
sS'trial_loop.thisN'
p4619
I67
sg33
g4050
sg63
g64
sS'trial_loop.thisIndex'
p4620
g59
(g98
S'C\x00\x00\x00'
tRp4621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4622
I0
sg3641
g4443
sS'block_loop.thisRepN'
p4623
I1
sg3644
g4056
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4624
I1
sg3646
g4050
sg55
g11
sS'block_loop.thisTrial'
p4625
Nsg69
Vn
sS'block_loop.thisTrialN'
p4626
I0
sg39
F2.016852513493177
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x11\x13\x07\x08\xc8'
tRp4627
sa(dp4628
S'trial_loop.thisTrialN'
p4629
I68
sg3632
g3670
sS'block_loop.thisIndex'
p4630
g3626
sg38
S'left'
p4631
sg58
g62
sS'trial_loop.thisN'
p4632
I68
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4633
g59
(g98
S'D\x00\x00\x00'
tRp4634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4635
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4636
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4637
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4638
Nsg69
Vn
sS'block_loop.thisTrialN'
p4639
I0
sg39
F1.016860496278241
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x11\x1a\x07\xd0\x00'
tRp4640
sa(dp4641
S'trial_loop.thisTrialN'
p4642
I69
sg3632
g4147
sS'block_loop.thisIndex'
p4643
g3626
sg38
S'right'
p4644
sg58
g62
sS'trial_loop.thisN'
p4645
I69
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4646
g59
(g98
S'E\x00\x00\x00'
tRp4647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4648
I0
sg3641
g4154
sS'block_loop.thisRepN'
p4649
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4650
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4651
Nsg69
Vn
sS'block_loop.thisTrialN'
p4652
I0
sg39
F0.91649294606941112
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x11 \x08\x9f\x08'
tRp4653
sa(dp4654
S'trial_loop.thisTrialN'
p4655
I70
sg3632
g4162
sS'block_loop.thisIndex'
p4656
g3626
sg38
S'right'
p4657
sg58
g62
sS'trial_loop.thisN'
p4658
I70
sg33
g3879
sg63
g64
sS'trial_loop.thisIndex'
p4659
g59
(g98
S'F\x00\x00\x00'
tRp4660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4661
I0
sg3641
g4169
sS'block_loop.thisRepN'
p4662
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4663
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p4664
Nsg69
Vn
sS'block_loop.thisTrialN'
p4665
I0
sg39
F1.0168818787369673
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x11&\x07\xc0`'
tRp4666
sa(dp4667
S'trial_loop.thisTrialN'
p4668
I71
sg3632
g4481
sS'block_loop.thisIndex'
p4669
g3626
sg38
S'left'
p4670
sg58
g62
sS'trial_loop.thisN'
p4671
I71
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4672
g59
(g98
S'G\x00\x00\x00'
tRp4673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4674
I0
sg3641
g4488
sS'block_loop.thisRepN'
p4675
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4676
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4677
Nsg69
Vn
sS'block_loop.thisTrialN'
p4678
I0
sg39
F2.0500882667893165
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x11,\x08\x8fh'
tRp4679
sa(dp4680
S'trial_loop.thisTrialN'
p4681
I72
sg3632
S'42-mrkipling_lemon_slices.png'
p4682
sS'block_loop.thisIndex'
p4683
g3626
sg38
S'left'
p4684
sg58
g62
sS'trial_loop.thisN'
p4685
I72
sg33
g4033
sg63
g64
sS'trial_loop.thisIndex'
p4686
g59
(g98
S'H\x00\x00\x00'
tRp4687
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4688
I0
sg3641
S'16-skips_prawn.png'
p4689
sS'block_loop.thisRepN'
p4690
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4691
I1
sg3646
g4040
sg55
g11
sS'block_loop.thisTrial'
p4692
Nsg69
Vn
sS'block_loop.thisTrialN'
p4693
I0
sg39
F1.1500270274273134
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x113\t\xcf\xb8'
tRp4694
sa(dp4695
S'trial_loop.thisTrialN'
p4696
I73
sg3632
g3945
sS'block_loop.thisIndex'
p4697
g3626
sg38
S'left'
p4698
sg58
g62
sS'trial_loop.thisN'
p4699
I73
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p4700
g59
(g98
S'I\x00\x00\x00'
tRp4701
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4702
I0
sg3641
g3952
sS'block_loop.thisRepN'
p4703
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4704
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4705
Nsg69
Vn
sS'block_loop.thisTrialN'
p4706
I0
sg39
F1.73350043962364
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x119\x0c\x87\x08'
tRp4707
sa(dp4708
S'trial_loop.thisTrialN'
p4709
I74
sg3632
g3772
sS'block_loop.thisIndex'
p4710
g3626
sg38
S'left'
p4711
sg58
g62
sS'trial_loop.thisN'
p4712
I74
sg33
g3783
sg63
g64
sS'trial_loop.thisIndex'
p4713
g59
(g98
S'J\x00\x00\x00'
tRp4714
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4715
I0
sg3641
g3780
sS'block_loop.thisRepN'
p4716
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4717
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4718
Nsg69
Vn
sS'block_loop.thisTrialN'
p4719
I0
sg39
F1.250107767591544
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x12\x04\t\x04\x98'
tRp4720
sa(dp4721
S'trial_loop.thisTrialN'
p4722
I75
sg3632
g3738
sS'block_loop.thisIndex'
p4723
g3626
sg38
S'left'
p4724
sg58
g62
sS'trial_loop.thisN'
p4725
I75
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4726
g59
(g98
S'K\x00\x00\x00'
tRp4727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4728
I0
sg3641
g3746
sS'block_loop.thisRepN'
p4729
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4730
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4731
Nsg69
Vn
sS'block_loop.thisTrialN'
p4732
I0
sg39
F0.86689105893856322
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x12\n\re\xb0'
tRp4733
sa(dp4734
S'trial_loop.thisTrialN'
p4735
I76
sg3632
g4352
sS'block_loop.thisIndex'
p4736
g3626
sg38
S'right'
p4737
sg58
g62
sS'trial_loop.thisN'
p4738
I76
sg33
g4356
sg63
g64
sS'trial_loop.thisIndex'
p4739
g59
(g98
S'L\x00\x00\x00'
tRp4740
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4741
I0
sg3641
g4360
sS'block_loop.thisRepN'
p4742
I1
sg3644
g4356
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4743
I1
sg3646
g4363
sg55
g11
sS'block_loop.thisTrial'
p4744
Nsg69
Vn
sS'block_loop.thisTrialN'
p4745
I0
sg39
F1.9000920301023143
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x12\x10\x0b\xd3X'
tRp4746
sa(dp4747
S'trial_loop.thisTrialN'
p4748
I77
sg3632
S'40-sardines.png'
p4749
sS'block_loop.thisIndex'
p4750
g3626
sg38
S'left'
p4751
sg58
g62
sS'trial_loop.thisN'
p4752
I77
sg33
g4468
sg63
g64
sS'trial_loop.thisIndex'
p4753
g59
(g98
S'M\x00\x00\x00'
tRp4754
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4755
I0
sg3641
S'5-pineapple.png'
p4756
sS'block_loop.thisRepN'
p4757
I1
sg3644
g4468
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4758
I1
sg3646
g4475
sg55
g11
sS'block_loop.thisTrial'
p4759
Nsg69
Vn
sS'block_loop.thisTrialN'
p4760
I0
sg39
F1.3334346386709512
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x12\x17\n\xf0\xc8'
tRp4761
sa(dp4762
S'trial_loop.thisTrialN'
p4763
I78
sg3632
g3917
sS'block_loop.thisIndex'
p4764
g3626
sg38
S'right'
p4765
sg58
g62
sS'trial_loop.thisN'
p4766
I78
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4767
g59
(g98
S'N\x00\x00\x00'
tRp4768
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4769
I0
sg3641
g3924
sS'block_loop.thisRepN'
p4770
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4771
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4772
Nsg69
Vn
sS'block_loop.thisTrialN'
p4773
I0
sg39
F0.71687030369866989
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x12\x1e\x01@P'
tRp4774
sa(dp4775
S'trial_loop.thisTrialN'
p4776
I79
sg3632
g4281
sS'block_loop.thisIndex'
p4777
g3626
sg38
S'right'
p4778
sg58
g62
sS'trial_loop.thisN'
p4779
I79
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4780
g59
(g98
S'O\x00\x00\x00'
tRp4781
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4782
I0
sg3641
g4288
sS'block_loop.thisRepN'
p4783
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4784
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p4785
Nsg69
Vn
sS'block_loop.thisTrialN'
p4786
I0
sg39
F0.83352415989793371
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x12#\x0c\x8e\xd8'
tRp4787
sa(dp4788
S'trial_loop.thisTrialN'
p4789
I80
sg3632
g4464
sS'block_loop.thisIndex'
p4790
g3626
sg38
S'right'
p4791
sg58
g62
sS'trial_loop.thisN'
p4792
I80
sg33
g4468
sg63
g64
sS'trial_loop.thisIndex'
p4793
g59
(g98
S'P\x00\x00\x00'
tRp4794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4795
I0
sg3641
g4472
sS'block_loop.thisRepN'
p4796
I1
sg3644
g4468
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4797
I1
sg3646
g4475
sg55
g11
sS'block_loop.thisTrial'
p4798
Nsg69
Vn
sS'block_loop.thisTrialN'
p4799
I0
sg39
F0.96719816806489689
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x12)\n\x7f\x80'
tRp4800
sa(dp4801
S'trial_loop.thisTrialN'
p4802
I81
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p4803
sS'block_loop.thisIndex'
p4804
g3626
sg38
S'right'
p4805
sg58
g62
sS'trial_loop.thisN'
p4806
I81
sg33
S'36-fig_rolls.png'
p4807
sg63
g64
sS'trial_loop.thisIndex'
p4808
g59
(g98
S'Q\x00\x00\x00'
tRp4809
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4810
I0
sg3641
S'36-fig_rolls.png'
p4811
sS'block_loop.thisRepN'
p4812
I1
sg3644
g4807
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4813
I1
sg3646
S'34-hula_hoops_bbq_beef_redo.png'
p4814
sg55
g11
sS'block_loop.thisTrial'
p4815
Nsg69
Vn
sS'block_loop.thisTrialN'
p4816
I0
sg39
F1.0834400555604589
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x12/\n\x96\xf0'
tRp4817
sa(dp4818
S'trial_loop.thisTrialN'
p4819
I82
sg3632
g4436
sS'block_loop.thisIndex'
p4820
g3626
sg38
S'left'
p4821
sg58
g62
sS'trial_loop.thisN'
p4822
I82
sg33
g4056
sg63
g64
sS'trial_loop.thisIndex'
p4823
g59
(g98
S'R\x00\x00\x00'
tRp4824
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4825
I0
sg3641
g4443
sS'block_loop.thisRepN'
p4826
I1
sg3644
g4056
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4827
I1
sg3646
g4050
sg55
g11
sS'block_loop.thisTrial'
p4828
Nsg69
Vn
sS'block_loop.thisTrialN'
p4829
I0
sg39
F1.2835000404838866
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x125\x0c\\\x10'
tRp4830
sa(dp4831
S'trial_loop.thisTrialN'
p4832
I83
sg3632
g3755
sS'block_loop.thisIndex'
p4833
g3626
sg38
S'left'
p4834
sg58
g62
sS'trial_loop.thisN'
p4835
I83
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4836
g59
(g98
S'S\x00\x00\x00'
tRp4837
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4838
I0
sg3641
g3763
sS'block_loop.thisRepN'
p4839
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4840
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4841
Nsg69
Vn
sS'block_loop.thisTrialN'
p4842
I0
sg39
F0.71682155169401085
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x13\x00\x01\xf4\x00'
tRp4843
sa(dp4844
S'trial_loop.thisTrialN'
p4845
I84
sg3632
g4063
sS'block_loop.thisIndex'
p4846
g3626
sg38
S'right'
p4847
sg58
g62
sS'trial_loop.thisN'
p4848
I84
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4849
g59
(g98
S'T\x00\x00\x00'
tRp4850
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4851
I0
sg3641
g4070
sS'block_loop.thisRepN'
p4852
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4853
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4854
Nsg69
Vn
sS'block_loop.thisTrialN'
p4855
I0
sg39
F1.5167524435873929
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x13\x05\r} '
tRp4856
sa(dp4857
S'trial_loop.thisTrialN'
p4858
I85
sg3632
g3851
sS'block_loop.thisIndex'
p4859
g3626
sg38
S'left'
p4860
sg58
g62
sS'trial_loop.thisN'
p4861
I85
sg33
g3855
sg63
g64
sS'trial_loop.thisIndex'
p4862
g59
(g98
S'U\x00\x00\x00'
tRp4863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4864
I0
sg3641
g3859
sS'block_loop.thisRepN'
p4865
I1
sg3644
g3855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4866
I1
sg3646
g3862
sg55
g11
sS'block_loop.thisTrial'
p4867
Nsg69
Vn
sS'block_loop.thisTrialN'
p4868
I0
sg39
F0.76686733866517898
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x13\x0c\x06\xa7 '
tRp4869
sa(dp4870
S'trial_loop.thisTrialN'
p4871
I86
sg3632
g4147
sS'block_loop.thisIndex'
p4872
g3626
sg38
S'right'
p4873
sg58
g62
sS'trial_loop.thisN'
p4874
I86
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4875
g59
(g98
S'V\x00\x00\x00'
tRp4876
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4877
I0
sg3641
g4154
sS'block_loop.thisRepN'
p4878
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4879
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4880
Nsg69
Vn
sS'block_loop.thisTrialN'
p4881
I0
sg39
F0.76655486966956232
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x13\x12\x03k\x00'
tRp4882
sa(dp4883
S'trial_loop.thisTrialN'
p4884
I87
sg3632
g3868
sS'block_loop.thisIndex'
p4885
g3626
sg38
S'left'
p4886
sg58
g62
sS'trial_loop.thisN'
p4887
I87
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p4888
g59
(g98
S'W\x00\x00\x00'
tRp4889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4890
I0
sg3641
g3876
sS'block_loop.thisRepN'
p4891
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4892
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p4893
Nsg69
Vn
sS'block_loop.thisTrialN'
p4894
I0
sg39
F1.0002055567019852
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x13\x18\x00ix'
tRp4895
sa(dp4896
S'trial_loop.thisTrialN'
p4897
I88
sg3632
g4803
sS'block_loop.thisIndex'
p4898
g3626
sg38
S'right'
p4899
sg58
g62
sS'trial_loop.thisN'
p4900
I88
sg33
g4807
sg63
g64
sS'trial_loop.thisIndex'
p4901
g59
(g98
S'X\x00\x00\x00'
tRp4902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4903
I0
sg3641
g4811
sS'block_loop.thisRepN'
p4904
I1
sg3644
g4807
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4905
I1
sg3646
g4814
sg55
g11
sS'block_loop.thisTrial'
p4906
Nsg69
Vn
sS'block_loop.thisTrialN'
p4907
I0
sg39
F0.66677861571679387
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x13\x1e\x00\xfa\x00'
tRp4908
sa(dp4909
S'trial_loop.thisTrialN'
p4910
I89
sg3632
g4162
sS'block_loop.thisIndex'
p4911
g3626
sg38
S'right'
p4912
sg58
g62
sS'trial_loop.thisN'
p4913
I89
sg33
g3879
sg63
g64
sS'trial_loop.thisIndex'
p4914
g59
(g98
S'Y\x00\x00\x00'
tRp4915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4916
I0
sg3641
g4169
sS'block_loop.thisRepN'
p4917
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4918
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p4919
Nsg69
Vn
sS'block_loop.thisTrialN'
p4920
I0
sg39
F0.7667818088302738
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x13#\x0b\x90\xf0'
tRp4921
sa(dp4922
S'trial_loop.thisTrialN'
p4923
I90
sg3632
g4682
sS'block_loop.thisIndex'
p4924
g3626
sg38
S'left'
p4925
sg58
g62
sS'trial_loop.thisN'
p4926
I90
sg33
g4033
sg63
g64
sS'trial_loop.thisIndex'
p4927
g59
(g98
S'Z\x00\x00\x00'
tRp4928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4929
I0
sg3641
g4689
sS'block_loop.thisRepN'
p4930
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4931
I1
sg3646
g4040
sg55
g11
sS'block_loop.thisTrial'
p4932
Nsg69
Vn
sS'block_loop.thisTrialN'
p4933
I0
sg39
F0.866671532363398
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x13)\x08\x8fh'
tRp4934
sa(dp4935
S'trial_loop.thisTrialN'
p4936
I91
sg3632
g3836
sS'block_loop.thisIndex'
p4937
g3626
sg38
S'left'
p4938
sg58
g62
sS'trial_loop.thisN'
p4939
I91
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4940
g59
(g98
S'[\x00\x00\x00'
tRp4941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4942
I0
sg3641
g3843
sS'block_loop.thisRepN'
p4943
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4944
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p4945
Nsg69
Vn
sS'block_loop.thisTrialN'
p4946
I0
sg39
F1.3172104843615671
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x13/\x06\xfd\x10'
tRp4947
sa(dp4948
S'trial_loop.thisTrialN'
p4949
I92
sg3632
g3670
sS'block_loop.thisIndex'
p4950
g3626
sg38
S'left'
p4951
sg58
g62
sS'trial_loop.thisN'
p4952
I92
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4953
g59
(g98
S'\\\x00\x00\x00'
tRp4954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4955
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4956
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4957
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4958
Nsg69
Vn
sS'block_loop.thisTrialN'
p4959
I0
sg39
F1.3001974598782908
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x135\x0cPX'
tRp4960
sa(dp4961
S'trial_loop.thisTrialN'
p4962
I93
sg3632
g4162
sS'block_loop.thisIndex'
p4963
g3626
sg38
S'right'
p4964
sg58
g62
sS'trial_loop.thisN'
p4965
I93
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p4966
g59
(g98
S']\x00\x00\x00'
tRp4967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4968
I0
sg3641
g4169
sS'block_loop.thisRepN'
p4969
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4970
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p4971
Nsg69
Vn
sS'block_loop.thisTrialN'
p4972
I0
sg39
F1.083527295991189
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x14\x00\x02&\xc8'
tRp4973
sa(dp4974
S'trial_loop.thisTrialN'
p4975
I94
sg3632
S'36-fig_rolls.png'
p4976
sS'block_loop.thisIndex'
p4977
g3626
sg38
S'left'
p4978
sg58
g62
sS'trial_loop.thisN'
p4979
I94
sg33
g4807
sg63
g64
sS'trial_loop.thisIndex'
p4980
g59
(g98
S'^\x00\x00\x00'
tRp4981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4982
I0
sg3641
S'34-hula_hoops_bbq_beef_redo.png'
p4983
sS'block_loop.thisRepN'
p4984
I1
sg3644
g4807
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4985
I1
sg3646
g4814
sg55
g11
sS'block_loop.thisTrial'
p4986
Nsg69
Vn
sS'block_loop.thisTrialN'
p4987
I0
sg39
F1.0167840896256166
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x14\x06\x03\xe8\x00'
tRp4988
sa(dp4989
S'trial_loop.thisTrialN'
p4990
I95
sg3632
g3975
sS'block_loop.thisIndex'
p4991
g3626
sg38
S'left'
p4992
sg58
g62
sS'trial_loop.thisN'
p4993
I95
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p4994
g59
(g98
S'_\x00\x00\x00'
tRp4995
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4996
I0
sg3641
g3982
sS'block_loop.thisRepN'
p4997
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4998
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p4999
Nsg69
Vn
sS'block_loop.thisTrialN'
p5000
I0
sg39
F1.2001050306362231
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x14\x0c\x04\xb7\x08'
tRp5001
sa(dp5002
S'trial_loop.thisTrialN'
p5003
I96
sg3632
g4976
sS'block_loop.thisIndex'
p5004
g3626
sg38
S'left'
p5005
sg58
g62
sS'trial_loop.thisN'
p5006
I96
sg33
g4807
sg63
g64
sS'trial_loop.thisIndex'
p5007
g59
(g98
S'`\x00\x00\x00'
tRp5008
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5009
I0
sg3641
g4983
sS'block_loop.thisRepN'
p5010
I1
sg3644
g4807
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5011
I1
sg3646
g4814
sg55
g11
sS'block_loop.thisTrial'
p5012
Nsg69
Vn
sS'block_loop.thisTrialN'
p5013
I0
sg39
F0.7171901852807423
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x14\x12\x08`\x88'
tRp5014
sa(dp5015
S'trial_loop.thisTrialN'
p5016
I97
sg3632
g4522
sS'block_loop.thisIndex'
p5017
g3626
sg38
S'right'
p5018
sg58
g62
sS'trial_loop.thisN'
p5019
I97
sg33
g4115
sg63
g64
sS'trial_loop.thisIndex'
p5020
g59
(g98
S'a\x00\x00\x00'
tRp5021
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5022
I0
sg3641
g4529
sS'block_loop.thisRepN'
p5023
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5024
I1
sg3646
g4115
sg55
g11
sS'block_loop.thisTrial'
p5025
Nsg69
Vn
sS'block_loop.thisTrialN'
p5026
I0
sg39
F0.93353875698903721
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x14\x18\x04l\xd0'
tRp5027
sa(dp5028
S'trial_loop.thisTrialN'
p5029
I98
sg3632
g4589
sS'block_loop.thisIndex'
p5030
g3626
sg38
S'right'
p5031
sg58
g62
sS'trial_loop.thisN'
p5032
I98
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5033
g59
(g98
S'b\x00\x00\x00'
tRp5034
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5035
I0
sg3641
g4596
sS'block_loop.thisRepN'
p5036
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5037
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5038
Nsg69
Vn
sS'block_loop.thisTrialN'
p5039
I0
sg39
F0.71685462322966487
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x14\x1e\x04\x0b('
tRp5040
sa(dp5041
S'trial_loop.thisTrialN'
p5042
I99
sg3632
g4104
sS'block_loop.thisIndex'
p5043
g3626
sg38
S'left'
p5044
sg58
g62
sS'trial_loop.thisN'
p5045
I99
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p5046
g59
(g98
S'c\x00\x00\x00'
tRp5047
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5048
I0
sg3641
g4112
sS'block_loop.thisRepN'
p5049
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5050
I1
sg3646
g4115
sg55
g11
sS'block_loop.thisTrial'
p5051
Nsg69
Vn
sS'block_loop.thisTrialN'
p5052
I0
sg39
F1.8168295914974806
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x14$\x00\x13\x88'
tRp5053
sa(dp5054
S'trial_loop.thisTrialN'
p5055
I100
sg3632
g3687
sS'block_loop.thisIndex'
p5056
g3626
sg38
S'left'
p5057
sg58
g62
sS'trial_loop.thisN'
p5058
I100
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p5059
g59
(g98
S'd\x00\x00\x00'
tRp5060
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5061
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5062
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5063
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5064
Nsg69
Vn
sS'block_loop.thisTrialN'
p5065
I0
sg39
F0.76656085675767827
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x14*\r\x07\xf0'
tRp5066
sa(dp5067
S'trial_loop.thisTrialN'
p5068
I101
sg3632
g4522
sS'block_loop.thisIndex'
p5069
g3626
sg38
S'left'
p5070
sg58
g62
sS'trial_loop.thisN'
p5071
I101
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p5072
g59
(g98
S'e\x00\x00\x00'
tRp5073
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5074
I0
sg3641
g4529
sS'block_loop.thisRepN'
p5075
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5076
I1
sg3646
g4115
sg55
g11
sS'block_loop.thisTrial'
p5077
Nsg69
Vn
sS'block_loop.thisTrialN'
p5078
I0
sg39
F0.85022214949003683
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x140\n\x06h'
tRp5079
sa(dp5080
S'trial_loop.thisTrialN'
p5081
I102
sg3632
g3687
sS'block_loop.thisIndex'
p5082
g3626
sg38
S'left'
p5083
sg58
g62
sS'trial_loop.thisN'
p5084
I102
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p5085
g59
(g98
S'f\x00\x00\x00'
tRp5086
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5087
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5088
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5089
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5090
Nsg69
Vn
sS'block_loop.thisTrialN'
p5091
I0
sg39
F1.0165058325646896
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x146\x085\x90'
tRp5092
sa(dp5093
S'trial_loop.thisTrialN'
p5094
I103
sg3632
g4522
sS'block_loop.thisIndex'
p5095
g3626
sg38
S'right'
p5096
sg58
g62
sS'trial_loop.thisN'
p5097
I103
sg33
g4115
sg63
g64
sS'trial_loop.thisIndex'
p5098
g59
(g98
S'g\x00\x00\x00'
tRp5099
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5100
I0
sg3641
g4529
sS'block_loop.thisRepN'
p5101
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5102
I1
sg3646
g4115
sg55
g11
sS'block_loop.thisTrial'
p5103
Nsg69
Vn
sS'block_loop.thisTrialN'
p5104
I0
sg39
F0.88351777367006434
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x15\x00\t\x04\x98'
tRp5105
sa(dp5106
S'trial_loop.thisTrialN'
p5107
I104
sg3632
g3772
sS'block_loop.thisIndex'
p5108
g3626
sg38
S'left'
p5109
sg58
g62
sS'trial_loop.thisN'
p5110
I104
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5111
g59
(g98
S'h\x00\x00\x00'
tRp5112
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5113
I0
sg3641
g3780
sS'block_loop.thisRepN'
p5114
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5115
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p5116
Nsg69
Vn
sS'block_loop.thisTrialN'
p5117
I0
sg39
F0.76686705356587481
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x15\x06\x07\xac\xd8'
tRp5118
sa(dp5119
S'trial_loop.thisTrialN'
p5120
I105
sg3632
g3836
sS'block_loop.thisIndex'
p5121
g3626
sg38
S'left'
p5122
sg58
g62
sS'trial_loop.thisN'
p5123
I105
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p5124
g59
(g98
S'i\x00\x00\x00'
tRp5125
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5126
I0
sg3641
g3843
sS'block_loop.thisRepN'
p5127
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5128
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p5129
Nsg69
Vn
sS'block_loop.thisTrialN'
p5130
I0
sg39
F1.7501311457463089
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x15\x0c\x04\xaf8'
tRp5131
sa(dp5132
S'trial_loop.thisTrialN'
p5133
I106
sg3632
g3633
sS'block_loop.thisIndex'
p5134
g3626
sg38
S'left'
p5135
sg58
g62
sS'trial_loop.thisN'
p5136
I106
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5137
g59
(g98
S'j\x00\x00\x00'
tRp5138
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5139
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5140
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5141
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5142
Nsg69
Vn
sS'block_loop.thisTrialN'
p5143
I0
sg39
F2.1172411610623385
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x15\x13\x01kH'
tRp5144
sa(dp5145
S'trial_loop.thisTrialN'
p5146
I107
sg3632
g4803
sS'block_loop.thisIndex'
p5147
g3626
sg38
S'right'
p5148
sg58
g62
sS'trial_loop.thisN'
p5149
I107
sg33
g4807
sg63
g64
sS'trial_loop.thisIndex'
p5150
g59
(g98
S'k\x00\x00\x00'
tRp5151
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5152
I0
sg3641
g4811
sS'block_loop.thisRepN'
p5153
I1
sg3644
g4807
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5154
I1
sg3646
g4814
sg55
g11
sS'block_loop.thisTrial'
p5155
Nsg69
Vn
sS'block_loop.thisTrialN'
p5156
I0
sg39
F0.73350756710897258
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x15\x1a\x03\x9d\xc8'
tRp5157
sa(dp5158
S'trial_loop.thisTrialN'
p5159
I108
sg3632
g4147
sS'block_loop.thisIndex'
p5160
g3626
sg38
S'right'
p5161
sg58
g62
sS'trial_loop.thisN'
p5162
I108
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5163
g59
(g98
S'l\x00\x00\x00'
tRp5164
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5165
I0
sg3641
g4154
sS'block_loop.thisRepN'
p5166
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5167
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5168
Nsg69
Vn
sS'block_loop.thisTrialN'
p5169
I0
sg39
F1.249864292662096
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x15 \x00#('
tRp5170
sa(dp5171
S'trial_loop.thisTrialN'
p5172
I109
sg3632
g3721
sS'block_loop.thisIndex'
p5173
g3626
sg38
S'right'
p5174
sg58
g62
sS'trial_loop.thisN'
p5175
I109
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5176
g59
(g98
S'm\x00\x00\x00'
tRp5177
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5178
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5179
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5180
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5181
Nsg69
Vn
sS'block_loop.thisTrialN'
p5182
I0
sg39
F1.6667198852301226
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x15&\x04\x84@'
tRp5183
sa(dp5184
S'trial_loop.thisTrialN'
p5185
I110
sg3632
g4803
sS'block_loop.thisIndex'
p5186
g3626
sg38
S'right'
p5187
sg58
g62
sS'trial_loop.thisN'
p5188
I110
sg33
g4807
sg63
g64
sS'trial_loop.thisIndex'
p5189
g59
(g98
S'n\x00\x00\x00'
tRp5190
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5191
I0
sg3641
g4811
sS'block_loop.thisRepN'
p5192
I1
sg3644
g4807
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5193
I1
sg3646
g4814
sg55
g11
sS'block_loop.thisTrial'
p5194
Nsg69
Vn
sS'block_loop.thisTrialN'
p5195
I0
sg39
F0.66674896537369932
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x15,\x0f\x17H'
tRp5196
sa(dp5197
S'trial_loop.thisTrialN'
p5198
I111
sg3632
g3653
sS'block_loop.thisIndex'
p5199
g3626
sg38
S'right'
p5200
sg58
g62
sS'trial_loop.thisN'
p5201
I111
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p5202
g59
(g98
S'o\x00\x00\x00'
tRp5203
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5204
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5205
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5206
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p5207
Nsg69
Vn
sS'block_loop.thisTrialN'
p5208
I0
sg39
F1.5835438317599255
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x152\n\xa6\x90'
tRp5209
sa(dp5210
S'trial_loop.thisTrialN'
p5211
I112
sg3632
g3960
sS'block_loop.thisIndex'
p5212
g3626
sg38
S'right'
p5213
sg58
g62
sS'trial_loop.thisN'
p5214
I112
sg33
g3855
sg63
g64
sS'trial_loop.thisIndex'
p5215
g59
(g98
S'p\x00\x00\x00'
tRp5216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5217
I0
sg3641
g3967
sS'block_loop.thisRepN'
p5218
I1
sg3644
g3855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5219
I1
sg3646
g3862
sg55
g11
sS'block_loop.thisTrial'
p5220
Nsg69
Vn
sS'block_loop.thisTrialN'
p5221
I0
sg39
F0.81677314180706162
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x159\x04\xc6\xa8'
tRp5222
sa(dp5223
S'trial_loop.thisTrialN'
p5224
I113
sg3632
g4522
sS'block_loop.thisIndex'
p5225
g3626
sg38
S'right'
p5226
sg58
g62
sS'trial_loop.thisN'
p5227
I113
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p5228
g59
(g98
S'q\x00\x00\x00'
tRp5229
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5230
I0
sg3641
g4529
sS'block_loop.thisRepN'
p5231
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5232
I1
sg3646
g4115
sg55
g11
sS'block_loop.thisTrial'
p5233
Nsg69
Vn
sS'block_loop.thisTrialN'
p5234
I0
sg39
F0.90019523610226315
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x16\x03\x02|\xb8'
tRp5235
sa(dp5236
S'trial_loop.thisTrialN'
p5237
I114
sg3632
g3819
sS'block_loop.thisIndex'
p5238
g3626
sg38
S'right'
p5239
sg58
g62
sS'trial_loop.thisN'
p5240
I114
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p5241
g59
(g98
S'r\x00\x00\x00'
tRp5242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5243
I0
sg3641
g3827
sS'block_loop.thisRepN'
p5244
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5245
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p5246
Nsg69
Vn
sS'block_loop.thisTrialN'
p5247
I0
sg39
F0.78353168652211025
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x16\t\x01cx'
tRp5248
sa(dp5249
S'trial_loop.thisTrialN'
p5250
I115
sg3632
g3917
sS'block_loop.thisIndex'
p5251
g3626
sg38
S'right'
p5252
sg58
g62
sS'trial_loop.thisN'
p5253
I115
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5254
g59
(g98
S's\x00\x00\x00'
tRp5255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5256
I0
sg3641
g3924
sS'block_loop.thisRepN'
p5257
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5258
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5259
Nsg69
Vn
sS'block_loop.thisTrialN'
p5260
I0
sg39
F0.75010691229363147
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x16\x0e\r\xe2\xb0'
tRp5261
sa(dp5262
S'trial_loop.thisTrialN'
p5263
I116
sg3632
g4352
sS'block_loop.thisIndex'
p5264
g3626
sg38
S'right'
p5265
sg58
g62
sS'trial_loop.thisN'
p5266
I116
sg33
g4363
sg63
g64
sS'trial_loop.thisIndex'
p5267
g59
(g98
S't\x00\x00\x00'
tRp5268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5269
I0
sg3641
g4360
sS'block_loop.thisRepN'
p5270
I1
sg3644
g4356
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5271
I1
sg3646
g4363
sg55
g11
sS'block_loop.thisTrial'
p5272
Nsg69
Vn
sS'block_loop.thisTrialN'
p5273
I0
sg39
F2.8337924384786675
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x16\x14\n\xa2\xa8'
tRp5274
sa(dp5275
S'trial_loop.thisTrialN'
p5276
I117
sg3632
g4682
sS'block_loop.thisIndex'
p5277
g3626
sg38
S'left'
p5278
sg58
g62
sS'trial_loop.thisN'
p5279
I117
sg33
g4033
sg63
g64
sS'trial_loop.thisIndex'
p5280
g59
(g98
S'u\x00\x00\x00'
tRp5281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5282
I0
sg3641
g4689
sS'block_loop.thisRepN'
p5283
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5284
I1
sg3646
g4040
sg55
g11
sS'block_loop.thisTrial'
p5285
Nsg69
Vn
sS'block_loop.thisTrialN'
p5286
I0
sg39
F0.91676065445153654
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x16\x1c\x08\x8b\x80'
tRp5287
sa(dp5288
S'trial_loop.thisTrialN'
p5289
I118
sg3632
g4589
sS'block_loop.thisIndex'
p5290
g3626
sg38
S'right'
p5291
sg58
g62
sS'trial_loop.thisN'
p5292
I118
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5293
g59
(g98
S'v\x00\x00\x00'
tRp5294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5295
I0
sg3641
g4596
sS'block_loop.thisRepN'
p5296
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5297
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5298
Nsg69
Vn
sS'block_loop.thisTrialN'
p5299
I0
sg39
F1.1001856567600043
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x16"\x07\xac\xd8'
tRp5300
sa(dp5301
S'trial_loop.thisTrialN'
p5302
I119
sg3632
g4309
sS'block_loop.thisIndex'
p5303
g3626
sg38
S'right'
p5304
sg58
g62
sS'trial_loop.thisN'
p5305
I119
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p5306
g59
(g98
S'w\x00\x00\x00'
tRp5307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5308
I0
sg3641
g4316
sS'block_loop.thisRepN'
p5309
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5310
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5311
Nsg69
Vn
sS'block_loop.thisTrialN'
p5312
I0
sg39
F0.90010257878111588
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x16(\t\xeb\x10'
tRp5313
sa(dp5314
S'trial_loop.thisTrialN'
p5315
I120
sg3632
g4029
sS'block_loop.thisIndex'
p5316
g3626
sg38
S'right'
p5317
sg58
g62
sS'trial_loop.thisN'
p5318
I120
sg33
g4033
sg63
g64
sS'trial_loop.thisIndex'
p5319
g59
(g98
S'x\x00\x00\x00'
tRp5320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5321
I0
sg3641
g4037
sS'block_loop.thisRepN'
p5322
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5323
I1
sg3646
g4040
sg55
g11
sS'block_loop.thisTrial'
p5324
Nsg69
Vn
sS'block_loop.thisTrialN'
p5325
I0
sg39
F0.68332977909358306
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x16.\x08\xd1\xd0'
tRp5326
sa(dp5327
S'trial_loop.thisTrialN'
p5328
I121
sg3632
g3868
sS'block_loop.thisIndex'
p5329
g3626
sg38
S'left'
p5330
sg58
g62
sS'trial_loop.thisN'
p5331
I121
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p5332
g59
(g98
S'y\x00\x00\x00'
tRp5333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5334
I0
sg3641
g3876
sS'block_loop.thisRepN'
p5335
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5336
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p5337
Nsg69
Vn
sS'block_loop.thisTrialN'
p5338
I0
sg39
F0.6502217503511929
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x164\x04a\x18'
tRp5339
sa(dp5340
S'trial_loop.thisTrialN'
p5341
I122
sg3632
g4976
sS'block_loop.thisIndex'
p5342
g3626
sg38
S'left'
p5343
sg58
g62
sS'trial_loop.thisN'
p5344
I122
sg33
g4807
sg63
g64
sS'trial_loop.thisIndex'
p5345
g59
(g98
S'z\x00\x00\x00'
tRp5346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5347
I0
sg3641
g4983
sS'block_loop.thisRepN'
p5348
I1
sg3644
g4807
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5349
I1
sg3646
g4814
sg55
g11
sS'block_loop.thisTrial'
p5350
Nsg69
Vn
sS'block_loop.thisTrialN'
p5351
I0
sg39
F0.86688279105510446
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x169\x0e\xf8\x08'
tRp5352
sa(dp5353
S'trial_loop.thisTrialN'
p5354
I123
sg3632
g3819
sS'block_loop.thisIndex'
p5355
g3626
sg38
S'right'
p5356
sg58
g62
sS'trial_loop.thisN'
p5357
I123
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p5358
g59
(g98
S'{\x00\x00\x00'
tRp5359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5360
I0
sg3641
g3827
sS'block_loop.thisRepN'
p5361
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5362
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p5363
Nsg69
Vn
sS'block_loop.thisTrialN'
p5364
I0
sg39
F0.81676801001776766
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x17\x03\re\xb0'
tRp5365
sa(dp5366
S'trial_loop.thisTrialN'
p5367
I124
sg3632
g4408
sS'block_loop.thisIndex'
p5368
g3626
sg38
S'left'
p5369
sg58
g62
sS'trial_loop.thisN'
p5370
I124
sg33
g4356
sg63
g64
sS'trial_loop.thisIndex'
p5371
g59
(g98
S'|\x00\x00\x00'
tRp5372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5373
I0
sg3641
g4415
sS'block_loop.thisRepN'
p5374
I1
sg3644
g4356
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5375
I1
sg3646
g4363
sg55
g11
sS'block_loop.thisTrial'
p5376
Nsg69
Vn
sS'block_loop.thisTrialN'
p5377
I0
sg39
F1.866810660894771
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x17\t\x0b\x1b\xc0'
tRp5378
sa(dp5379
S'trial_loop.thisTrialN'
p5380
I125
sg3632
g3975
sS'block_loop.thisIndex'
p5381
g3626
sg38
S'left'
p5382
sg58
g62
sS'trial_loop.thisN'
p5383
I125
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p5384
g59
(g98
S'}\x00\x00\x00'
tRp5385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5386
I0
sg3641
g3982
sS'block_loop.thisRepN'
p5387
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5388
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p5389
Nsg69
Vn
sS'block_loop.thisTrialN'
p5390
I0
sg39
F0.73352438797701325
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x17\x10\t\x81\x98'
tRp5391
sa(dp5392
S'trial_loop.thisTrialN'
p5393
I126
sg3632
g3687
sS'block_loop.thisIndex'
p5394
g3626
sg38
S'left'
p5395
sg58
g62
sS'trial_loop.thisN'
p5396
I126
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5397
g59
(g98
S'~\x00\x00\x00'
tRp5398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5399
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5400
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5401
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5402
Nsg69
Vn
sS'block_loop.thisTrialN'
p5403
I0
sg39
F1.2331711497608921
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x17\x16\x06\x06\xf8'
tRp5404
sa(dp5405
S'trial_loop.thisTrialN'
p5406
I127
sg3632
g4309
sS'block_loop.thisIndex'
p5407
g3626
sg38
S'right'
p5408
sg58
g62
sS'trial_loop.thisN'
p5409
I127
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p5410
g59
(g98
S'\x7f\x00\x00\x00'
tRp5411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5412
I0
sg3641
g4316
sS'block_loop.thisRepN'
p5413
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5414
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5415
Nsg69
Vn
sS'block_loop.thisTrialN'
p5416
I0
sg39
F0.70054123279260239
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x17\x1c\n)\x90'
tRp5417
sa(dp5418
S'trial_loop.thisTrialN'
p5419
I128
sg3632
g3975
sS'block_loop.thisIndex'
p5420
g3626
sg38
S'left'
p5421
sg58
g62
sS'trial_loop.thisN'
p5422
I128
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p5423
g59
(g98
S'\x80\x00\x00\x00'
tRp5424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5425
I0
sg3641
g3982
sS'block_loop.thisRepN'
p5426
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5427
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p5428
Nsg69
Vn
sS'block_loop.thisTrialN'
p5429
I0
sg39
F0.73328632993798237
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x17"\x05\xfb@'
tRp5430
sa(dp5431
S'trial_loop.thisTrialN'
p5432
I129
sg3632
g4309
sS'block_loop.thisIndex'
p5433
g3626
sg38
S'right'
p5434
sg58
g62
sS'trial_loop.thisN'
p5435
I129
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5436
g59
(g98
S'\x81\x00\x00\x00'
tRp5437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5438
I0
sg3641
g4316
sS'block_loop.thisRepN'
p5439
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5440
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5441
Nsg69
Vn
sS'block_loop.thisTrialN'
p5442
I0
sg39
F0.60010867990968109
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x17(\x02\x80\xa0'
tRp5443
sa(dp5444
S'trial_loop.thisTrialN'
p5445
I130
sg3632
g3738
sS'block_loop.thisIndex'
p5446
g3626
sg38
S'left'
p5447
sg58
g62
sS'trial_loop.thisN'
p5448
I130
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5449
g59
(g98
S'\x82\x00\x00\x00'
tRp5450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5451
I0
sg3641
g3746
sS'block_loop.thisRepN'
p5452
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5453
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5454
Nsg69
Vn
sS'block_loop.thisTrialN'
p5455
I0
sg39
F0.75020498650337686
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x17-\x0c!x'
tRp5456
sa(dp5457
S'trial_loop.thisTrialN'
p5458
I131
sg3632
g3917
sS'block_loop.thisIndex'
p5459
g3626
sg38
S'right'
p5460
sg58
g62
sS'trial_loop.thisN'
p5461
I131
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5462
g59
(g98
S'\x83\x00\x00\x00'
tRp5463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5464
I0
sg3641
g3924
sS'block_loop.thisRepN'
p5465
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5466
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5467
Nsg69
Vn
sS'block_loop.thisTrialN'
p5468
I0
sg39
F0.65011113176569779
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x173\x08\xe5X'
tRp5469
sa(dp5470
S'trial_loop.thisTrialN'
p5471
I132
sg3632
g4464
sS'block_loop.thisIndex'
p5472
g3626
sg38
S'right'
p5473
sg58
g62
sS'trial_loop.thisN'
p5474
I132
sg33
g4468
sg63
g64
sS'trial_loop.thisIndex'
p5475
g59
(g98
S'\x84\x00\x00\x00'
tRp5476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5477
I0
sg3641
g4472
sS'block_loop.thisRepN'
p5478
I1
sg3644
g4468
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5479
I1
sg3646
g4475
sg55
g11
sS'block_loop.thisTrial'
p5480
Nsg69
Vn
sS'block_loop.thisTrialN'
p5481
I0
sg39
F1.2500821086405267
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x179\x03\xfb\x88'
tRp5482
sa(dp5483
S'trial_loop.thisTrialN'
p5484
I133
sg3632
g3836
sS'block_loop.thisIndex'
p5485
g3626
sg38
S'left'
p5486
sg58
g62
sS'trial_loop.thisN'
p5487
I133
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p5488
g59
(g98
S'\x85\x00\x00\x00'
tRp5489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5490
I0
sg3641
g3843
sS'block_loop.thisRepN'
p5491
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5492
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p5493
Nsg69
Vn
sS'block_loop.thisTrialN'
p5494
I0
sg39
F1.9835164051928587
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x18\x03\x08\\\xa0'
tRp5495
sa(dp5496
S'trial_loop.thisTrialN'
p5497
I134
sg3632
g4481
sS'block_loop.thisIndex'
p5498
g3626
sg38
S'left'
p5499
sg58
g62
sS'trial_loop.thisN'
p5500
I134
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p5501
g59
(g98
S'\x86\x00\x00\x00'
tRp5502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5503
I0
sg3641
g4488
sS'block_loop.thisRepN'
p5504
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5505
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5506
Nsg69
Vn
sS'block_loop.thisTrialN'
p5507
I0
sg39
F1.1335249011553969
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x18\n\x08p('
tRp5508
sa(dp5509
S'trial_loop.thisTrialN'
p5510
I135
sg3632
g4408
sS'block_loop.thisIndex'
p5511
g3626
sg38
S'left'
p5512
sg58
g62
sS'trial_loop.thisN'
p5513
I135
sg33
g4356
sg63
g64
sS'trial_loop.thisIndex'
p5514
g59
(g98
S'\x87\x00\x00\x00'
tRp5515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5516
I0
sg3641
g4415
sS'block_loop.thisRepN'
p5517
I1
sg3644
g4356
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5518
I1
sg3646
g4363
sg55
g11
sS'block_loop.thisTrial'
p5519
Nsg69
Vn
sS'block_loop.thisTrialN'
p5520
I0
sg39
F2.0835543804387271
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x18\x10\x0b#\x90'
tRp5521
sa(dp5522
S'trial_loop.thisTrialN'
p5523
I136
sg3632
g4976
sS'block_loop.thisIndex'
p5524
g3626
sg38
S'left'
p5525
sg58
g62
sS'trial_loop.thisN'
p5526
I136
sg33
g4807
sg63
g64
sS'trial_loop.thisIndex'
p5527
g59
(g98
S'\x88\x00\x00\x00'
tRp5528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5529
I0
sg3641
g4983
sS'block_loop.thisRepN'
p5530
I1
sg3644
g4807
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5531
I1
sg3646
g4814
sg55
g11
sS'block_loop.thisTrial'
p5532
Nsg69
Vn
sS'block_loop.thisTrialN'
p5533
I0
sg39
F0.68354018248646753
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x18\x17\x0c\xe0\xe0'
tRp5534
sa(dp5535
S'trial_loop.thisTrialN'
p5536
I137
sg3632
g3902
sS'block_loop.thisIndex'
p5537
g3626
sg38
S'right'
p5538
sg58
g62
sS'trial_loop.thisN'
p5539
I137
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p5540
g59
(g98
S'\x89\x00\x00\x00'
tRp5541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5542
I0
sg3641
g3909
sS'block_loop.thisRepN'
p5543
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5544
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vn
sS'block_loop.thisTrialN'
p5546
I0
sg39
F1.2501870252381195
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x18\x1d\x08p('
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g4976
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'left'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g4807
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g4983
sS'block_loop.thisRepN'
p5556
I1
sg3644
g4807
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5557
I1
sg3646
g4814
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vn
sS'block_loop.thisTrialN'
p5559
I0
sg39
F0.66730804539201927
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x18#\x0c\xd1@'
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g4309
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'right'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g4316
sS'block_loop.thisRepN'
p5569
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5570
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vn
sS'block_loop.thisTrialN'
p5572
I0
sg39
F0.71687971198116429
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x18)\x08%\xf0'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g4481
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'left'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g4488
sS'block_loop.thisRepN'
p5582
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5583
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vn
sS'block_loop.thisTrialN'
p5585
I0
sg39
F0.9335230765191227
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x18/\x04p\xb8'
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g3653
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'right'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5595
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5596
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vn
sS'block_loop.thisTrialN'
p5598
I0
sg39
F1.2667869406204773
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x185\x04\x0b('
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g4337
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'left'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g3830
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g4344
sS'block_loop.thisRepN'
p5608
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5609
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vn
sS'block_loop.thisTrialN'
p5611
I0
sg39
F1.2502078374982375
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x18;\x08l@'
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g4147
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'right'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g4154
sS'block_loop.thisRepN'
p5621
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5622
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vn
sS'block_loop.thisTrialN'
p5624
I0
sg39
F0.88327600933735084
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x19\x05\x0c\xcdX'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g3789
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'left'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g3797
sS'block_loop.thisRepN'
p5634
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5635
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vn
sS'block_loop.thisTrialN'
p5637
I0
sg39
F0.81673807457536896
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x19\x0b\x0bu\x98'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g4481
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'left'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g4488
sS'block_loop.thisRepN'
p5647
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5648
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vn
sS'block_loop.thisTrialN'
p5650
I0
sg39
F1.5333606268541189
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x19\x11\t+\xa8'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g3885
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'right'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g3893
sS'block_loop.thisRepN'
p5660
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5661
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vn
sS'block_loop.thisTrialN'
p5663
I0
sg39
F1.5834135413115291
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x19\x18\x02\x94('
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g4063
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'left'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g4070
sS'block_loop.thisRepN'
p5673
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5674
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vn
sS'block_loop.thisTrialN'
p5676
I0
sg39
F0.9668551934282732
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x19\x1e\x0c1\x18'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g3960
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'right'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g3855
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g3967
sS'block_loop.thisRepN'
p5686
I1
sg3644
g3855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5687
I1
sg3646
g3862
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vn
sS'block_loop.thisTrialN'
p5689
I0
sg39
F1.1669522412803417
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x19$\x0c\n\x08'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g3945
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'right'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g3952
sS'block_loop.thisRepN'
p5699
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5700
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vn
sS'block_loop.thisTrialN'
p5702
I0
sg39
F1.3167671547189457
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x19*\x0f:p'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g3789
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'left'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g3797
sS'block_loop.thisRepN'
p5712
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5713
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vn
sS'block_loop.thisTrialN'
p5715
I0
sg39
F0.95018970517321577
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x191\x05Kx'
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g4589
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'right'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g4596
sS'block_loop.thisRepN'
p5725
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5726
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vn
sS'block_loop.thisTrialN'
p5728
I0
sg39
F1.1168716721767851
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x197\x04\xe9\xd0'
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g3885
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'right'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g3889
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g3893
sS'block_loop.thisRepN'
p5738
I1
sg3644
g3889
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5739
I1
sg3646
g3896
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vn
sS'block_loop.thisTrialN'
p5741
I0
sg39
F1.8667470837172004
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1a\x01\x07(\x08'
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g4029
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'right'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g4033
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g4037
sS'block_loop.thisRepN'
p5751
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5752
I1
sg3646
g4040
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vn
sS'block_loop.thisTrialN'
p5754
I0
sg39
F0.93343498079048004
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1a\x08\x05\xcc`'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g4464
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'right'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g4468
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g4472
sS'block_loop.thisRepN'
p5764
I1
sg3644
g4468
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5765
I1
sg3646
g4475
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vn
sS'block_loop.thisTrialN'
p5767
I0
sg39
F2.0000861000335135
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1a\x0e\x05,8'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g3755
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'left'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g3763
sS'block_loop.thisRepN'
p5777
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5778
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vn
sS'block_loop.thisTrialN'
p5780
I0
sg39
F0.6334470690062517
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1a\x15\x05\xb4\xf0'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g3851
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'left'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g3855
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g3859
sS'block_loop.thisRepN'
p5790
I1
sg3644
g3855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5791
I1
sg3646
g3862
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vn
sS'block_loop.thisTrialN'
p5793
I0
sg39
F0.65010571487528068
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1a\x1b\x00\x90\x88'
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g4749
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'left'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g4468
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g4756
sS'block_loop.thisRepN'
p5803
I1
sg3644
g4468
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5804
I1
sg3646
g4475
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vn
sS'block_loop.thisTrialN'
p5806
I0
sg39
F0.6001314878658377
sg34
g752
(S"\x07\xdf\n\x1a\x0f\x1a \x0b'x"
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g4046
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'right'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g4056
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g4054
sS'block_loop.thisRepN'
p5816
I1
sg3644
g4056
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5817
I1
sg3646
g4050
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vn
sS'block_loop.thisTrialN'
p5819
I0
sg39
F2.2835145805565844
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1a&\x05\x89\xf8'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g4281
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'right'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g4288
sS'block_loop.thisRepN'
p5829
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5830
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vn
sS'block_loop.thisTrialN'
p5832
I0
sg39
F0.78352683983212046
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1a-\n\\X'
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g3653
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'right'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5842
I1
sg3644
g3663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5843
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vn
sS'block_loop.thisTrialN'
p5845
I0
sg39
F1.183439257280952
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1a3\x07\x99P'
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g4104
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'left'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g4112
sS'block_loop.thisRepN'
p5855
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5856
I1
sg3646
g4115
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vn
sS'block_loop.thisTrialN'
p5858
I0
sg39
F0.98350899260731239
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1a9\n\xc9\xb8'
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g4162
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'right'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g4169
sS'block_loop.thisRepN'
p5868
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5869
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vn
sS'block_loop.thisTrialN'
p5871
I0
sg39
F0.73354320454018307
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1b\x03\x0b\x1b\xc0'
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g4063
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'left'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g4070
sS'block_loop.thisRepN'
p5881
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5882
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vn
sS'block_loop.thisTrialN'
p5884
I0
sg39
F1.2168814225778988
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1b\t\x07f\x88'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g4436
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'left'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g4056
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g4443
sS'block_loop.thisRepN'
p5894
I1
sg3644
g4056
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5895
I1
sg3646
g4050
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vn
sS'block_loop.thisTrialN'
p5897
I0
sg39
F1.083420383698467
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1b\x0f\x0bJ\xa0'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g4682
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'left'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g4033
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g4689
sS'block_loop.thisRepN'
p5907
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5908
I1
sg3646
g4040
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vn
sS'block_loop.thisTrialN'
p5910
I0
sg39
F0.78334865267697751
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1b\x15\r\x0f\xc0'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g4408
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'left'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g4356
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g4415
sS'block_loop.thisRepN'
p5920
I1
sg3644
g4356
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5921
I1
sg3646
g4363
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vn
sS'block_loop.thisTrialN'
p5923
I0
sg39
F1.3168603822387013
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1b\x1b\nH\xd0'
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g3819
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'right'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g3827
sS'block_loop.thisRepN'
p5933
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5934
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vn
sS'block_loop.thisTrialN'
p5936
I0
sg39
F0.88343823092327511
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1b"\x00]\xc0'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g4408
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'left'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g4356
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g4415
sS'block_loop.thisRepN'
p5946
I1
sg3644
g4356
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5947
I1
sg3646
g4363
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vn
sS'block_loop.thisTrialN'
p5949
I0
sg39
F0.7667991998969228
sg34
g752
(S"\x07\xdf\n\x1a\x0f\x1b'\x0eH@"
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g3868
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'left'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g3876
sS'block_loop.thisRepN'
p5959
I1
sg3644
g3872
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5960
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vn
sS'block_loop.thisTrialN'
p5962
I0
sg39
F0.86686226389520016
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1b-\x0bF\xb8'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g4803
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'right'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g4807
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g4811
sS'block_loop.thisRepN'
p5972
I1
sg3644
g4807
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5973
I1
sg3646
g4814
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vn
sS'block_loop.thisTrialN'
p5975
I0
sg39
F0.85019135874972562
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1b3\t\xb4`'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g3851
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'left'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g3855
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g3859
sS'block_loop.thisRepN'
p5985
I1
sg3644
g3855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5986
I1
sg3646
g3862
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vn
sS'block_loop.thisTrialN'
p5988
I0
sg39
F1.0501073684527
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1b9\x07\xe3\x88'
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g4104
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'left'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g4112
sS'block_loop.thisRepN'
p5998
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5999
I1
sg3646
g4115
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vn
sS'block_loop.thisTrialN'
p6001
I0
sg39
F0.78353368221905839
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1c\x03\t+\xa8'
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g3633
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'right'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g3642
sS'block_loop.thisRepN'
p6011
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6012
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vn
sS'block_loop.thisTrialN'
p6014
I0
sg39
F1.433528778508844
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1c\t\x06h\xa0'
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g4029
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'right'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g4033
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g4037
sS'block_loop.thisRepN'
p6024
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6025
I1
sg3646
g4040
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vn
sS'block_loop.thisTrialN'
p6027
I0
sg39
F0.68334859565675288
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1c\x0f\r\xa40'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g4104
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'left'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g4112
sS'block_loop.thisRepN'
p6037
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6038
I1
sg3646
g4115
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vn
sS'block_loop.thisTrialN'
p6040
I0
sg39
F0.86677359796703968
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1c\x15\t7`'
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g4464
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'right'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g4468
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g4472
sS'block_loop.thisRepN'
p6050
I1
sg3644
g4468
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6051
I1
sg3646
g4475
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vn
sS'block_loop.thisTrialN'
p6053
I0
sg39
F1.3000822797012006
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1c\x1b\x07\xa5\x08'
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g3789
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'left'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g3800
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g3797
sS'block_loop.thisRepN'
p6063
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6064
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vn
sS'block_loop.thisTrialN'
p6066
I0
sg39
F1.0501860558997578
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1c!\x0c\xb9\xd0'
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g4281
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'right'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g4288
sS'block_loop.thisRepN'
p6076
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6077
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vn
sS'block_loop.thisTrialN'
p6079
I0
sg39
F0.90018924901323771
sg34
g752
(S"\x07\xdf\n\x1a\x0f\x1c'\x0e\x01\xf0"
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g4352
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'right'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g4363
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g4360
sS'block_loop.thisRepN'
p6089
I1
sg3644
g4356
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6090
I1
sg3646
g4363
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vn
sS'block_loop.thisTrialN'
p6092
I0
sg39
F2.1171182831994884
sg34
g752
(S"\x07\xdf\n\x1a\x0f\x1c-\r'0"
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g4063
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'right'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g4070
sS'block_loop.thisRepN'
p6102
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6103
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vn
sS'block_loop.thisTrialN'
p6105
I0
sg39
F0.76687161515656044
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1c5\x00\x1bX'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g3917
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'right'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g3924
sS'block_loop.thisRepN'
p6115
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6116
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vn
sS'block_loop.thisTrialN'
p6118
I0
sg39
F0.98353778765067545
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1c:\x0c\\\x10'
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g4046
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'right'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g4056
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g4054
sS'block_loop.thisRepN'
p6128
I1
sg3644
g4056
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6129
I1
sg3646
g4050
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vn
sS'block_loop.thisTrialN'
p6131
I0
sg39
F2.6833850883867854
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1d\x04\x0cs\x80'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g3851
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'left'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g3855
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g3859
sS'block_loop.thisRepN'
p6141
I1
sg3644
g3855
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6142
I1
sg3646
g3862
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vn
sS'block_loop.thisTrialN'
p6144
I0
sg39
F0.90017442384305468
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1d\x0c\x085\x90'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g4352
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'right'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g4363
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g4360
sS'block_loop.thisRepN'
p6154
I1
sg3644
g4356
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6155
I1
sg3646
g4363
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vn
sS'block_loop.thisTrialN'
p6157
I0
sg39
F1.6168542811101361
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1d\x12\x07\x1cP'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g4436
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'left'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g4056
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g4443
sS'block_loop.thisRepN'
p6167
I1
sg3644
g4056
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6168
I1
sg3646
g4050
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vn
sS'block_loop.thisTrialN'
p6170
I0
sg39
F1.5501720860274872
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1d\x19\x01\xf0\x18'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g3687
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'left'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g3695
sS'block_loop.thisRepN'
p6180
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6181
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vn
sS'block_loop.thisTrialN'
p6183
I0
sg39
F1.3163386502483263
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1d\x1f\n\xd5p'
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g4337
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'left'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g3830
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g4344
sS'block_loop.thisRepN'
p6193
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6194
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vn
sS'block_loop.thisTrialN'
p6196
I0
sg39
F3.8667023231046187
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1d&\x00\xe6x'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g4749
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'left'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g4468
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g4756
sS'block_loop.thisRepN'
p6206
I1
sg3644
g4468
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6207
I1
sg3646
g4475
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vn
sS'block_loop.thisTrialN'
p6209
I0
sg39
F1.0169126694772785
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1d.\x0e\x86\xc0'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g4281
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'right'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g4288
sS'block_loop.thisRepN'
p6219
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6220
I1
sg3646
g3783
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vn
sS'block_loop.thisTrialN'
p6222
I0
sg39
F1.8001233340210092
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1d5\x00\x0f\xa0'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g3755
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'left'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g3766
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g3763
sS'block_loop.thisRepN'
p6232
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6233
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vn
sS'block_loop.thisTrialN'
p6235
I0
sg39
F0.76679948499622697
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1d;\x0c\xc5\x88'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g4749
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'left'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g4468
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g4756
sS'block_loop.thisRepN'
p6245
I1
sg3644
g4468
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6246
I1
sg3646
g4475
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vn
sS'block_loop.thisTrialN'
p6248
I0
sg39
F0.98344341973370319
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1e\x05\t\xc4\x00'
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g4682
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'left'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g4033
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g4689
sS'block_loop.thisRepN'
p6258
I1
sg3644
g4033
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6259
I1
sg3646
g4040
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vn
sS'block_loop.thisTrialN'
p6261
I0
sg39
F0.76666890944943589
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1e\x0b\n\x19\xf0'
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g3902
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'right'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g3909
sS'block_loop.thisRepN'
p6271
I1
sg3644
g3793
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6272
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vn
sS'block_loop.thisTrialN'
p6274
I0
sg39
F2.6167356797395769
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1e\x11\x06\xdd\xd0'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g3704
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'left'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g3712
sS'block_loop.thisRepN'
p6284
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6285
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vn
sS'block_loop.thisTrialN'
p6287
I0
sg39
F0.68389056970863749
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1e\x19\x01\xa9\xc8'
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g4589
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'right'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g4596
sS'block_loop.thisRepN'
p6297
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6298
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vn
sS'block_loop.thisTrialN'
p6300
I0
sg39
F0.86677416816473851
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1e\x1e\x0c\x7f8'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g4337
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'left'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g4344
sS'block_loop.thisRepN'
p6310
I1
sg3644
g3823
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6311
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vn
sS'block_loop.thisTrialN'
p6313
I0
sg39
F0.90019210000900785
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1e$\n\xec\xe0'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g3670
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'left'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g3678
sS'block_loop.thisRepN'
p6323
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6324
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vn
sS'block_loop.thisTrialN'
p6326
I0
sg39
F2.4168076958603706
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1e*\n\x0e8'
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g4749
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'left'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g4468
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g4756
sS'block_loop.thisRepN'
p6336
I1
sg3644
g4468
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6337
I1
sg3646
g4475
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vn
sS'block_loop.thisTrialN'
p6339
I0
sg39
F0.66684105249532877
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1e2\x01\x86\xa0'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g3721
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'right'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g3729
sS'block_loop.thisRepN'
p6349
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6350
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vn
sS'block_loop.thisTrialN'
p6352
I0
sg39
F1.4335176596305246
sg34
g752
(S'\x07\xdf\n\x1a\x0f\x1e7\x0c\\\x10'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F175.19632632254797
sg56
Vr
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vn
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vr
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vn
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'30-spaghetti_hoops.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'right'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'19-caramello_redo.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'19-caramello_redo.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6383
I2
sS'img_wrong'
p6384
S'30-spaghetti_hoops.png'
p6385
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vn
sS'block_loop.thisTrialN'
p6387
I0
sg39
F1.316772001409845
sg34
g752
(S'\x07\xdf\n\x1a\x0f"\x02\x07\xcc\x18'
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'7-olives.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'right'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'22-daim.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'22-daim.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6401
I2
sg6384
S'7-olives.png'
p6402
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vn
sS'block_loop.thisTrialN'
p6404
I0
sg39
F1.1335166332719382
sg34
g752
(S'\x07\xdf\n\x1a\x0f"\x08\r\x1f`'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'3-ellas_strawberries_apples.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'left'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'3-ellas_strawberries_apples.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'13-mccoys_steak_crisps.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6418
I2
sg6384
S'13-mccoys_steak_crisps.png'
p6419
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vn
sS'block_loop.thisTrialN'
p6421
I0
sg39
F0.8668793698616355
sg34
g752
(S'\x07\xdf\n\x1a\x0f"\x0f\x00U\xf0'
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
S'42-mrkipling_lemon_slices.png'
p6425
sS'block_loop.thisIndex'
p6426
g6364
sg38
S'left'
p6427
sg58
g62
sS'trial_loop.thisN'
p6428
I3
sg33
S'42-mrkipling_lemon_slices.png'
p6429
sg63
g64
sS'trial_loop.thisIndex'
p6430
g59
(g98
S'\x03\x00\x00\x00'
tRp6431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6432
I0
sg6379
S'16-skips_prawn.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6435
I2
sg6384
S'16-skips_prawn.png'
p6436
sg55
g11
sS'block_loop.thisTrial'
p6437
Nsg69
Vn
sS'block_loop.thisTrialN'
p6438
I0
sg39
F0.7833289808149857
sg34
g752
(S'\x07\xdf\n\x1a\x0f"\x14\x0e\x05\xd8'
tRp6439
sa(dp6440
S'trial_loop.thisTrialN'
p6441
I4
sg6370
S'36-fig_rolls.png'
p6442
sS'block_loop.thisIndex'
p6443
g6364
sg38
S'left'
p6444
sg58
g62
sS'trial_loop.thisN'
p6445
I4
sg33
S'36-fig_rolls.png'
p6446
sg63
g64
sS'trial_loop.thisIndex'
p6447
g59
(g98
S'\x04\x00\x00\x00'
tRp6448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6449
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p6450
sS'block_loop.thisRepN'
p6451
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6452
I2
sg6384
S'34-hula_hoops_bbq_beef_redo.png'
p6453
sg55
g11
sS'block_loop.thisTrial'
p6454
Nsg69
Vn
sS'block_loop.thisTrialN'
p6455
I0
sg39
F0.83354810825130699
sg34
g752
(S'\x07\xdf\n\x1a\x0f"\x1a\x0bB\xd0'
tRp6456
sa(dp6457
S'trial_loop.thisTrialN'
p6458
I5
sg6370
S'6-sour_patch_kids.png'
p6459
sS'block_loop.thisIndex'
p6460
g6364
sg38
S'right'
p6461
sg58
g62
sS'trial_loop.thisN'
p6462
I5
sg33
S'38-maltesers.png'
p6463
sg63
g64
sS'trial_loop.thisIndex'
p6464
g59
(g98
S'\x05\x00\x00\x00'
tRp6465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6466
I0
sg6379
S'38-maltesers.png'
p6467
sS'block_loop.thisRepN'
p6468
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6469
I2
sg6384
S'6-sour_patch_kids.png'
p6470
sg55
g11
sS'block_loop.thisTrial'
p6471
Nsg69
Vn
sS'block_loop.thisTrialN'
p6472
I0
sg39
F0.98326238158369961
sg34
g752
(S'\x07\xdf\n\x1a\x0f" \t7`'
tRp6473
sa(dp6474
S'trial_loop.thisTrialN'
p6475
I6
sg6370
S'1-treacle_cookies.png'
p6476
sS'block_loop.thisIndex'
p6477
g6364
sg38
S'left'
p6478
sg58
g62
sS'trial_loop.thisN'
p6479
I6
sg33
S'1-treacle_cookies.png'
p6480
sg63
g64
sS'trial_loop.thisIndex'
p6481
g59
(g98
S'\x06\x00\x00\x00'
tRp6482
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6483
I0
sg6379
S'21-nakd_banana_crunch.png'
p6484
sS'block_loop.thisRepN'
p6485
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6486
I2
sg6384
S'21-nakd_banana_crunch.png'
p6487
sg55
g11
sS'block_loop.thisTrial'
p6488
Nsg69
Vn
sS'block_loop.thisTrialN'
p6489
I0
sg39
F0.73344912172251497
sg34
g752
(S'\x07\xdf\n\x1a\x0f"&\t\x89h'
tRp6490
sa(dp6491
S'trial_loop.thisTrialN'
p6492
I7
sg6370
g6371
sS'block_loop.thisIndex'
p6493
g6364
sg38
S'right'
p6494
sg58
g62
sS'trial_loop.thisN'
p6495
I7
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6496
g59
(g98
S'\x07\x00\x00\x00'
tRp6497
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6498
I0
sg6379
g6380
sS'block_loop.thisRepN'
p6499
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6500
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6501
Nsg69
Vn
sS'block_loop.thisTrialN'
p6502
I0
sg39
F0.81687663290722412
sg34
g752
(S'\x07\xdf\n\x1a\x0f",\x05\xd40'
tRp6503
sa(dp6504
S'trial_loop.thisTrialN'
p6505
I8
sg6370
S'22-daim.png'
p6506
sS'block_loop.thisIndex'
p6507
g6364
sg38
S'left'
p6508
sg58
g62
sS'trial_loop.thisN'
p6509
I8
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6510
g59
(g98
S'\x08\x00\x00\x00'
tRp6511
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6512
I0
sg6379
S'7-olives.png'
p6513
sS'block_loop.thisRepN'
p6514
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6515
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6516
Nsg69
Vn
sS'block_loop.thisTrialN'
p6517
I0
sg39
F1.3500912888439416
sg34
g752
(S'\x07\xdf\n\x1a\x0f"2\x03\x8a@'
tRp6518
sa(dp6519
S'trial_loop.thisTrialN'
p6520
I9
sg6370
S'17-jacobs_mini_cheddars_redo.png'
p6521
sS'block_loop.thisIndex'
p6522
g6364
sg38
S'left'
p6523
sg58
g62
sS'trial_loop.thisN'
p6524
I9
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6525
sg63
g64
sS'trial_loop.thisIndex'
p6526
g59
(g98
S'\t\x00\x00\x00'
tRp6527
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6528
I0
sg6379
S'8-liquorice_catherine_wheels.png'
p6529
sS'block_loop.thisRepN'
p6530
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6531
I2
sg6384
S'8-liquorice_catherine_wheels.png'
p6532
sg55
g11
sS'block_loop.thisTrial'
p6533
Nsg69
Vn
sS'block_loop.thisTrialN'
p6534
I0
sg39
F1.7338950172597833
sg34
g752
(S'\x07\xdf\n\x1a\x0f"8\tV\xa0'
tRp6535
sa(dp6536
S'trial_loop.thisTrialN'
p6537
I10
sg6370
S'25-kitkat.png'
p6538
sS'block_loop.thisIndex'
p6539
g6364
sg38
S'left'
p6540
sg58
g62
sS'trial_loop.thisN'
p6541
I10
sg33
S'25-kitkat.png'
p6542
sg63
g64
sS'trial_loop.thisIndex'
p6543
g59
(g98
S'\n\x00\x00\x00'
tRp6544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6545
I0
sg6379
S'31-hobnobs.png'
p6546
sS'block_loop.thisRepN'
p6547
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6548
I2
sg6384
S'31-hobnobs.png'
p6549
sg55
g11
sS'block_loop.thisTrial'
p6550
Nsg69
Vn
sS'block_loop.thisTrialN'
p6551
I0
sg39
F2.1000126013959743
sg34
g752
(S'\x07\xdf\n\x1a\x0f#\x03\x05\xd40'
tRp6552
sa(dp6553
S'trial_loop.thisTrialN'
p6554
I11
sg6370
S'29-beans.png'
p6555
sS'block_loop.thisIndex'
p6556
g6364
sg38
S'right'
p6557
sg58
g62
sS'trial_loop.thisN'
p6558
I11
sg33
S'46-pistachios.png'
p6559
sg63
g64
sS'trial_loop.thisIndex'
p6560
g59
(g98
S'\x0b\x00\x00\x00'
tRp6561
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6562
I0
sg6379
S'46-pistachios.png'
p6563
sS'block_loop.thisRepN'
p6564
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6565
I2
sg6384
S'29-beans.png'
p6566
sg55
g11
sS'block_loop.thisTrial'
p6567
Nsg69
Vn
sS'block_loop.thisTrialN'
p6568
I0
sg39
F0.6667783306174897
sg34
g752
(S'\x07\xdf\n\x1a\x0f#\n\x07\xd0\x00'
tRp6569
sa(dp6570
S'trial_loop.thisTrialN'
p6571
I12
sg6370
S'4-corn.png'
p6572
sS'block_loop.thisIndex'
p6573
g6364
sg38
S'right'
p6574
sg58
g62
sS'trial_loop.thisN'
p6575
I12
sg33
S'4-corn.png'
p6576
sg63
g64
sS'trial_loop.thisIndex'
p6577
g59
(g98
S'\x0c\x00\x00\x00'
tRp6578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6579
I0
sg6379
S'10-bounty_redo.png'
p6580
sS'block_loop.thisRepN'
p6581
I2
sg6382
S'10-bounty_redo.png'
p6582
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6583
I2
sg6384
g6576
sg55
g11
sS'block_loop.thisTrial'
p6584
Nsg69
Vn
sS'block_loop.thisTrialN'
p6585
I0
sg39
F1.0001014954032144
sg34
g752
(S'\x07\xdf\n\x1a\x0f#\x10\x03_H'
tRp6586
sa(dp6587
S'trial_loop.thisTrialN'
p6588
I13
sg6370
S'13-mccoys_steak_crisps.png'
p6589
sS'block_loop.thisIndex'
p6590
g6364
sg38
S'right'
p6591
sg58
g62
sS'trial_loop.thisN'
p6592
I13
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6593
g59
(g98
S'\r\x00\x00\x00'
tRp6594
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6595
I0
sg6379
S'3-ellas_strawberries_apples.png'
p6596
sS'block_loop.thisRepN'
p6597
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6598
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6599
Nsg69
Vn
sS'block_loop.thisTrialN'
p6600
I0
sg39
F2.8667941251260345
sg34
g752
(S'\x07\xdf\n\x1a\x0f#\x16\x03\xf3\xb8'
tRp6601
sa(dp6602
S'trial_loop.thisTrialN'
p6603
I14
sg6370
S'43-mrporky_pork_crackles_redo.png'
p6604
sS'block_loop.thisIndex'
p6605
g6364
sg38
S'right'
p6606
sg58
g62
sS'trial_loop.thisN'
p6607
I14
sg33
S'18-mms.png'
p6608
sg63
g64
sS'trial_loop.thisIndex'
p6609
g59
(g98
S'\x0e\x00\x00\x00'
tRp6610
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6611
I0
sg6379
S'18-mms.png'
p6612
sS'block_loop.thisRepN'
p6613
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6614
I2
sg6384
S'43-mrporky_pork_crackles_redo.png'
p6615
sg55
g11
sS'block_loop.thisTrial'
p6616
Nsg69
Vn
sS'block_loop.thisTrialN'
p6617
I0
sg39
F1.1169144370942377
sg34
g752
(S'\x07\xdf\n\x1a\x0f#\x1e\x02Q\xc0'
tRp6618
sa(dp6619
S'trial_loop.thisTrialN'
p6620
I15
sg6370
S'33-ambrosia_rice.png'
p6621
sS'block_loop.thisIndex'
p6622
g6364
sg38
S'right'
p6623
sg58
g62
sS'trial_loop.thisN'
p6624
I15
sg33
S'23-crunchie_redo.png'
p6625
sg63
g64
sS'trial_loop.thisIndex'
p6626
g59
(g98
S'\x0f\x00\x00\x00'
tRp6627
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6628
I0
sg6379
S'23-crunchie_redo.png'
p6629
sS'block_loop.thisRepN'
p6630
I2
sg6382
g6625
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6631
I2
sg6384
S'33-ambrosia_rice.png'
p6632
sg55
g11
sS'block_loop.thisTrial'
p6633
Nsg69
Vn
sS'block_loop.thisTrialN'
p6634
I0
sg39
F1.5001833189453464
sg34
g752
(S'\x07\xdf\n\x1a\x0f#$\x04\x8f\xf8'
tRp6635
sa(dp6636
S'trial_loop.thisTrialN'
p6637
I16
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p6638
sS'block_loop.thisIndex'
p6639
g6364
sg38
S'right'
p6640
sg58
g62
sS'trial_loop.thisN'
p6641
I16
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p6642
g59
(g98
S'\x10\x00\x00\x00'
tRp6643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6644
I0
sg6379
S'36-fig_rolls.png'
p6645
sS'block_loop.thisRepN'
p6646
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6647
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p6648
Nsg69
Vn
sS'block_loop.thisTrialN'
p6649
I0
sg39
F0.66677034783242561
sg34
g752
(S'\x07\xdf\n\x1a\x0f#*\x0c\xbd\xb8'
tRp6650
sa(dp6651
S'trial_loop.thisTrialN'
p6652
I17
sg6370
S'49-yorkie.png'
p6653
sS'block_loop.thisIndex'
p6654
g6364
sg38
S'left'
p6655
sg58
g62
sS'trial_loop.thisN'
p6656
I17
sg33
S'35-raisins.png'
p6657
sg63
g64
sS'trial_loop.thisIndex'
p6658
g59
(g98
S'\x11\x00\x00\x00'
tRp6659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6660
I0
sg6379
S'35-raisins.png'
p6661
sS'block_loop.thisRepN'
p6662
I2
sg6382
S'49-yorkie.png'
p6663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6664
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p6665
Nsg69
Vn
sS'block_loop.thisTrialN'
p6666
I0
sg39
F1.6667977173801773
sg34
g752
(S'\x07\xdf\n\x1a\x0f#0\x08\x12h'
tRp6667
sa(dp6668
S'trial_loop.thisTrialN'
p6669
I18
sg6370
S'27-hartleys_raspberries_jelly.png'
p6670
sS'block_loop.thisIndex'
p6671
g6364
sg38
S'right'
p6672
sg58
g62
sS'trial_loop.thisN'
p6673
I18
sg33
S'51-mars.png'
p6674
sg63
g64
sS'trial_loop.thisIndex'
p6675
g59
(g98
S'\x12\x00\x00\x00'
tRp6676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6677
I0
sg6379
S'51-mars.png'
p6678
sS'block_loop.thisRepN'
p6679
I2
sg6382
g6674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6680
I2
sg6384
S'27-hartleys_raspberries_jelly.png'
p6681
sg55
g11
sS'block_loop.thisTrial'
p6682
Nsg69
Vn
sS'block_loop.thisTrialN'
p6683
I0
sg39
F0.85010611401503411
sg34
g752
(S'\x07\xdf\n\x1a\x0f#7\x03\x9d\xc8'
tRp6684
sa(dp6685
S'trial_loop.thisTrialN'
p6686
I19
sg6370
S'35-raisins.png'
p6687
sS'block_loop.thisIndex'
p6688
g6364
sg38
S'right'
p6689
sg58
g62
sS'trial_loop.thisN'
p6690
I19
sg33
g6663
sg63
g64
sS'trial_loop.thisIndex'
p6691
g59
(g98
S'\x13\x00\x00\x00'
tRp6692
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6693
I0
sg6379
S'49-yorkie.png'
p6694
sS'block_loop.thisRepN'
p6695
I2
sg6382
g6663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6696
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p6697
Nsg69
Vn
sS'block_loop.thisTrialN'
p6698
I0
sg39
F0.7672693288877781
sg34
g752
(S'\x07\xdf\n\x1a\x0f$\x01\x01\xcc\xf0'
tRp6699
sa(dp6700
S'trial_loop.thisTrialN'
p6701
I20
sg6370
g6459
sS'block_loop.thisIndex'
p6702
g6364
sg38
S'right'
p6703
sg58
g62
sS'trial_loop.thisN'
p6704
I20
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p6705
g59
(g98
S'\x14\x00\x00\x00'
tRp6706
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6707
I0
sg6379
g6467
sS'block_loop.thisRepN'
p6708
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6709
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p6710
Nsg69
Vn
sS'block_loop.thisTrialN'
p6711
I0
sg39
F0.89992097043250396
sg34
g752
(S'\x07\xdf\n\x1a\x0f$\x06\x0e\r\xa8'
tRp6712
sa(dp6713
S'trial_loop.thisTrialN'
p6714
I21
sg6370
S'41-peanuts_redo.png'
p6715
sS'block_loop.thisIndex'
p6716
g6364
sg38
S'left'
p6717
sg58
g62
sS'trial_loop.thisN'
p6718
I21
sg33
S'41-peanuts_redo.png'
p6719
sg63
g64
sS'trial_loop.thisIndex'
p6720
g59
(g98
S'\x15\x00\x00\x00'
tRp6721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6722
I0
sg6379
S'45-chewy_nougat_redo.png'
p6723
sS'block_loop.thisRepN'
p6724
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6725
I2
sg6384
S'45-chewy_nougat_redo.png'
p6726
sg55
g11
sS'block_loop.thisTrial'
p6727
Nsg69
Vn
sS'block_loop.thisTrialN'
p6728
I0
sg39
F0.90017043245006789
sg34
g752
(S'\x07\xdf\n\x1a\x0f$\x0c\x0c\xf4h'
tRp6729
sa(dp6730
S'trial_loop.thisTrialN'
p6731
I22
sg6370
S'8-liquorice_catherine_wheels.png'
p6732
sS'block_loop.thisIndex'
p6733
g6364
sg38
S'right'
p6734
sg58
g62
sS'trial_loop.thisN'
p6735
I22
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p6736
g59
(g98
S'\x16\x00\x00\x00'
tRp6737
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6738
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p6739
sS'block_loop.thisRepN'
p6740
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6741
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p6742
Nsg69
Vn
sS'block_loop.thisTrialN'
p6743
I0
sg39
F1.166900638280822
sg34
g752
(S'\x07\xdf\n\x1a\x0f$\x12\x0b\xdb('
tRp6744
sa(dp6745
S'trial_loop.thisTrialN'
p6746
I23
sg6370
g6408
sS'block_loop.thisIndex'
p6747
g6364
sg38
S'left'
p6748
sg58
g62
sS'trial_loop.thisN'
p6749
I23
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6750
g59
(g98
S'\x17\x00\x00\x00'
tRp6751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6752
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6753
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6754
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6755
Nsg69
Vn
sS'block_loop.thisTrialN'
p6756
I0
sg39
F0.96682725368191313
sg34
g752
(S'\x07\xdf\n\x1a\x0f$\x18\x0f\x0b\x90'
tRp6757
sa(dp6758
S'trial_loop.thisTrialN'
p6759
I24
sg6370
g6555
sS'block_loop.thisIndex'
p6760
g6364
sg38
S'right'
p6761
sg58
g62
sS'trial_loop.thisN'
p6762
I24
sg33
g6559
sg63
g64
sS'trial_loop.thisIndex'
p6763
g59
(g98
S'\x18\x00\x00\x00'
tRp6764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6765
I0
sg6379
g6563
sS'block_loop.thisRepN'
p6766
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6767
I2
sg6384
g6566
sg55
g11
sS'block_loop.thisTrial'
p6768
Nsg69
Vn
sS'block_loop.thisTrialN'
p6769
I0
sg39
F1.5172222874780346
sg34
g752
(S'\x07\xdf\n\x1a\x0f$\x1e\x0f#\x00'
tRp6770
sa(dp6771
S'trial_loop.thisTrialN'
p6772
I25
sg6370
S'19-caramello_redo.png'
p6773
sS'block_loop.thisIndex'
p6774
g6364
sg38
S'left'
p6775
sg58
g62
sS'trial_loop.thisN'
p6776
I25
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6777
g59
(g98
S'\x19\x00\x00\x00'
tRp6778
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6779
I0
sg6379
S'30-spaghetti_hoops.png'
p6780
sS'block_loop.thisRepN'
p6781
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6782
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6783
Nsg69
Vn
sS'block_loop.thisTrialN'
p6784
I0
sg39
F1.6334932551171732
sg34
g752
(S'\x07\xdf\n\x1a\x0f$%\x08\x12h'
tRp6785
sa(dp6786
S'trial_loop.thisTrialN'
p6787
I26
sg6370
S'50-polo.png'
p6788
sS'block_loop.thisIndex'
p6789
g6364
sg38
S'right'
p6790
sg58
g62
sS'trial_loop.thisN'
p6791
I26
sg33
S'48-twix.png'
p6792
sg63
g64
sS'trial_loop.thisIndex'
p6793
g59
(g98
S'\x1a\x00\x00\x00'
tRp6794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6795
I0
sg6379
S'48-twix.png'
p6796
sS'block_loop.thisRepN'
p6797
I2
sg6382
g6792
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6798
I2
sg6384
S'50-polo.png'
p6799
sg55
g11
sS'block_loop.thisTrial'
p6800
Nsg69
Vn
sS'block_loop.thisTrialN'
p6801
I0
sg39
F0.91682708262305823
sg34
g752
(S'\x07\xdf\n\x1a\x0f$,\x03 \xc8'
tRp6802
sa(dp6803
S'trial_loop.thisTrialN'
p6804
I27
sg6370
g6555
sS'block_loop.thisIndex'
p6805
g6364
sg38
S'right'
p6806
sg58
g62
sS'trial_loop.thisN'
p6807
I27
sg33
g6566
sg63
g64
sS'trial_loop.thisIndex'
p6808
g59
(g98
S'\x1b\x00\x00\x00'
tRp6809
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6810
I0
sg6379
g6563
sS'block_loop.thisRepN'
p6811
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6812
I2
sg6384
g6566
sg55
g11
sS'block_loop.thisTrial'
p6813
Nsg69
Vn
sS'block_loop.thisTrialN'
p6814
I0
sg39
F0.75011261428244325
sg34
g752
(S'\x07\xdf\n\x1a\x0f$2\x02F\x08'
tRp6815
sa(dp6816
S'trial_loop.thisTrialN'
p6817
I28
sg6370
g6788
sS'block_loop.thisIndex'
p6818
g6364
sg38
S'right'
p6819
sg58
g62
sS'trial_loop.thisN'
p6820
I28
sg33
g6792
sg63
g64
sS'trial_loop.thisIndex'
p6821
g59
(g98
S'\x1c\x00\x00\x00'
tRp6822
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6823
I0
sg6379
g6796
sS'block_loop.thisRepN'
p6824
I2
sg6382
g6792
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6825
I2
sg6384
g6799
sg55
g11
sS'block_loop.thisTrial'
p6826
Nsg69
Vn
sS'block_loop.thisTrialN'
p6827
I0
sg39
F0.98347934226421785
sg34
g752
(S'\x07\xdf\n\x1a\x0f$7\x0eL('
tRp6828
sa(dp6829
S'trial_loop.thisTrialN'
p6830
I29
sg6370
S'21-nakd_banana_crunch.png'
p6831
sS'block_loop.thisIndex'
p6832
g6364
sg38
S'right'
p6833
sg58
g62
sS'trial_loop.thisN'
p6834
I29
sg33
g6487
sg63
g64
sS'trial_loop.thisIndex'
p6835
g59
(g98
S'\x1d\x00\x00\x00'
tRp6836
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6837
I0
sg6379
S'1-treacle_cookies.png'
p6838
sS'block_loop.thisRepN'
p6839
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6840
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p6841
Nsg69
Vn
sS'block_loop.thisTrialN'
p6842
I0
sg39
F0.66694226280014846
sg34
g752
(S'\x07\xdf\n\x1a\x0f%\x01\x0e\x9e0'
tRp6843
sa(dp6844
S'trial_loop.thisTrialN'
p6845
I30
sg6370
g6538
sS'block_loop.thisIndex'
p6846
g6364
sg38
S'left'
p6847
sg58
g62
sS'trial_loop.thisN'
p6848
I30
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p6849
g59
(g98
S'\x1e\x00\x00\x00'
tRp6850
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6851
I0
sg6379
g6546
sS'block_loop.thisRepN'
p6852
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6853
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p6854
Nsg69
Vn
sS'block_loop.thisTrialN'
p6855
I0
sg39
F1.8334491787427396
sg34
g752
(S'\x07\xdf\n\x1a\x0f%\x07\t\xf2\xe0'
tRp6856
sa(dp6857
S'trial_loop.thisTrialN'
p6858
I31
sg6370
g6408
sS'block_loop.thisIndex'
p6859
g6364
sg38
S'left'
p6860
sg58
g62
sS'trial_loop.thisN'
p6861
I31
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6862
g59
(g98
S'\x1f\x00\x00\x00'
tRp6863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6864
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6865
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6866
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6867
Nsg69
Vn
sS'block_loop.thisTrialN'
p6868
I0
sg39
F0.81674292126535875
sg34
g752
(S'\x07\xdf\n\x1a\x0f%\x0e\x07\xdf\xa0'
tRp6869
sa(dp6870
S'trial_loop.thisTrialN'
p6871
I32
sg6370
S'20-fruit_pastilles.png'
p6872
sS'block_loop.thisIndex'
p6873
g6364
sg38
S'right'
p6874
sg58
g62
sS'trial_loop.thisN'
p6875
I32
sg33
S'2-steamed_puddings.png'
p6876
sg63
g64
sS'trial_loop.thisIndex'
p6877
g59
(g98
S' \x00\x00\x00'
tRp6878
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6879
I0
sg6379
S'2-steamed_puddings.png'
p6880
sS'block_loop.thisRepN'
p6881
I2
sg6382
g6876
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6882
I2
sg6384
S'20-fruit_pastilles.png'
p6883
sg55
g11
sS'block_loop.thisTrial'
p6884
Nsg69
Vn
sS'block_loop.thisTrialN'
p6885
I0
sg39
F0.66687440913119644
sg34
g752
(S'\x07\xdf\n\x1a\x0f%\x14\x05\x95\xb0'
tRp6886
sa(dp6887
S'trial_loop.thisTrialN'
p6888
I33
sg6370
g6715
sS'block_loop.thisIndex'
p6889
g6364
sg38
S'left'
p6890
sg58
g62
sS'trial_loop.thisN'
p6891
I33
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p6892
g59
(g98
S'!\x00\x00\x00'
tRp6893
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6894
I0
sg6379
g6723
sS'block_loop.thisRepN'
p6895
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6896
I2
sg6384
g6726
sg55
g11
sS'block_loop.thisTrial'
p6897
Nsg69
Vn
sS'block_loop.thisTrialN'
p6898
I0
sg39
F1.7335226773802788
sg34
g752
(S'\x07\xdf\n\x1a\x0f%\x1a\x00\xea`'
tRp6899
sa(dp6900
S'trial_loop.thisTrialN'
p6901
I34
sg6370
g6408
sS'block_loop.thisIndex'
p6902
g6364
sg38
S'left'
p6903
sg58
g62
sS'trial_loop.thisN'
p6904
I34
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6905
g59
(g98
S'"\x00\x00\x00'
tRp6906
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6907
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6908
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6909
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6910
Nsg69
Vn
sS'block_loop.thisTrialN'
p6911
I0
sg39
F1.4002197546551542
sg34
g752
(S'\x07\xdf\n\x1a\x0f% \x0c\xae\x18'
tRp6912
sa(dp6913
S'trial_loop.thisTrialN'
p6914
I35
sg6370
S'51-mars.png'
p6915
sS'block_loop.thisIndex'
p6916
g6364
sg38
S'left'
p6917
sg58
g62
sS'trial_loop.thisN'
p6918
I35
sg33
g6674
sg63
g64
sS'trial_loop.thisIndex'
p6919
g59
(g98
S'#\x00\x00\x00'
tRp6920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6921
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p6922
sS'block_loop.thisRepN'
p6923
I2
sg6382
g6674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6924
I2
sg6384
g6681
sg55
g11
sS'block_loop.thisTrial'
p6925
Nsg69
Vn
sS'block_loop.thisTrialN'
p6926
I0
sg39
F0.98352609857374773
sg34
g752
(S"\x07\xdf\n\x1a\x0f%'\x04.P"
tRp6927
sa(dp6928
S'trial_loop.thisTrialN'
p6929
I36
sg6370
g6621
sS'block_loop.thisIndex'
p6930
g6364
sg38
S'right'
p6931
sg58
g62
sS'trial_loop.thisN'
p6932
I36
sg33
g6625
sg63
g64
sS'trial_loop.thisIndex'
p6933
g59
(g98
S'$\x00\x00\x00'
tRp6934
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6935
I0
sg6379
g6629
sS'block_loop.thisRepN'
p6936
I2
sg6382
g6625
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6937
I2
sg6384
g6632
sg55
g11
sS'block_loop.thisTrial'
p6938
Nsg69
Vn
sS'block_loop.thisTrialN'
p6939
I0
sg39
F0.91672530211963021
sg34
g752
(S'\x07\xdf\n\x1a\x0f%-\x04E\xc0'
tRp6940
sa(dp6941
S'trial_loop.thisTrialN'
p6942
I37
sg6370
S'31-hobnobs.png'
p6943
sS'block_loop.thisIndex'
p6944
g6364
sg38
S'right'
p6945
sg58
g62
sS'trial_loop.thisN'
p6946
I37
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p6947
g59
(g98
S'%\x00\x00\x00'
tRp6948
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6949
I0
sg6379
S'25-kitkat.png'
p6950
sS'block_loop.thisRepN'
p6951
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6952
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p6953
Nsg69
Vn
sS'block_loop.thisTrialN'
p6954
I0
sg39
F1.0835435466597119
sg34
g752
(S'\x07\xdf\n\x1a\x0f%3\x03\xa5\x98'
tRp6955
sa(dp6956
S'trial_loop.thisTrialN'
p6957
I38
sg6370
S'26-walkers_smoky_bacon.png'
p6958
sS'block_loop.thisIndex'
p6959
g6364
sg38
S'right'
p6960
sg58
g62
sS'trial_loop.thisN'
p6961
I38
sg33
S'44-crunch.png'
p6962
sg63
g64
sS'trial_loop.thisIndex'
p6963
g59
(g98
S'&\x00\x00\x00'
tRp6964
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6965
I0
sg6379
S'44-crunch.png'
p6966
sS'block_loop.thisRepN'
p6967
I2
sg6382
g6962
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6968
I2
sg6384
S'26-walkers_smoky_bacon.png'
p6969
sg55
g11
sS'block_loop.thisTrial'
p6970
Nsg69
Vn
sS'block_loop.thisTrialN'
p6971
I0
sg39
F1.2500889510274646
sg34
g752
(S'\x07\xdf\n\x1a\x0f%9\x05f\xd0'
tRp6972
sa(dp6973
S'trial_loop.thisTrialN'
p6974
I39
sg6370
g6732
sS'block_loop.thisIndex'
p6975
g6364
sg38
S'right'
p6976
sg58
g62
sS'trial_loop.thisN'
p6977
I39
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p6978
g59
(g98
S"'\x00\x00\x00"
tRp6979
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6980
I0
sg6379
g6739
sS'block_loop.thisRepN'
p6981
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6982
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p6983
Nsg69
Vn
sS'block_loop.thisTrialN'
p6984
I0
sg39
F1.033886065137267
sg34
g752
(S'\x07\xdf\n\x1a\x0f&\x03\t\xc7\xe8'
tRp6985
sa(dp6986
S'trial_loop.thisTrialN'
p6987
I40
sg6370
S'38-maltesers.png'
p6988
sS'block_loop.thisIndex'
p6989
g6364
sg38
S'left'
p6990
sg58
g62
sS'trial_loop.thisN'
p6991
I40
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p6992
g59
(g98
S'(\x00\x00\x00'
tRp6993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6994
I0
sg6379
S'6-sour_patch_kids.png'
p6995
sS'block_loop.thisRepN'
p6996
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6997
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p6998
Nsg69
Vn
sS'block_loop.thisTrialN'
p6999
I0
sg39
F0.76659677928910241
sg34
g752
(S'\x07\xdf\n\x1a\x0f&\t\n\x96\xf0'
tRp7000
sa(dp7001
S'trial_loop.thisTrialN'
p7002
I41
sg6370
g6572
sS'block_loop.thisIndex'
p7003
g6364
sg38
S'right'
p7004
sg58
g62
sS'trial_loop.thisN'
p7005
I41
sg33
g6582
sg63
g64
sS'trial_loop.thisIndex'
p7006
g59
(g98
S')\x00\x00\x00'
tRp7007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7008
I0
sg6379
g6580
sS'block_loop.thisRepN'
p7009
I2
sg6382
g6582
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7010
I2
sg6384
g6576
sg55
g11
sS'block_loop.thisTrial'
p7011
Nsg69
Vn
sS'block_loop.thisTrialN'
p7012
I0
sg39
F1.3167717163096313
sg34
g752
(S'\x07\xdf\n\x1a\x0f&\x0f\x07\x95h'
tRp7013
sa(dp7014
S'trial_loop.thisTrialN'
p7015
I42
sg6370
g6506
sS'block_loop.thisIndex'
p7016
g6364
sg38
S'right'
p7017
sg58
g62
sS'trial_loop.thisN'
p7018
I42
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7019
g59
(g98
S'*\x00\x00\x00'
tRp7020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7021
I0
sg6379
g6513
sS'block_loop.thisRepN'
p7022
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7023
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7024
Nsg69
Vn
sS'block_loop.thisTrialN'
p7025
I0
sg39
F0.80009910056833178
sg34
g752
(S'\x07\xdf\n\x1a\x0f&\x15\x0c\xe8\xb0'
tRp7026
sa(dp7027
S'trial_loop.thisTrialN'
p7028
I43
sg6370
g6442
sS'block_loop.thisIndex'
p7029
g6364
sg38
S'left'
p7030
sg58
g62
sS'trial_loop.thisN'
p7031
I43
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7032
g59
(g98
S'+\x00\x00\x00'
tRp7033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7034
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7035
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7036
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7037
Nsg69
Vn
sS'block_loop.thisTrialN'
p7038
I0
sg39
F0.63344763920576952
sg34
g752
(S'\x07\xdf\n\x1a\x0f&\x1b\n`@'
tRp7039
sa(dp7040
S'trial_loop.thisTrialN'
p7041
I44
sg6370
S'10-bounty_redo.png'
p7042
sS'block_loop.thisIndex'
p7043
g6364
sg38
S'left'
p7044
sg58
g62
sS'trial_loop.thisN'
p7045
I44
sg33
g6582
sg63
g64
sS'trial_loop.thisIndex'
p7046
g59
(g98
S',\x00\x00\x00'
tRp7047
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7048
I0
sg6379
S'4-corn.png'
p7049
sS'block_loop.thisRepN'
p7050
I2
sg6382
g6582
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7051
I2
sg6384
g6576
sg55
g11
sS'block_loop.thisTrial'
p7052
Nsg69
Vn
sS'block_loop.thisTrialN'
p7053
I0
sg39
F2.0504811338296349
sg34
g752
(S'\x07\xdf\n\x1a\x0f&!\x05;\xd8'
tRp7054
sa(dp7055
S'trial_loop.thisTrialN'
p7056
I45
sg6370
g6538
sS'block_loop.thisIndex'
p7057
g6364
sg38
S'left'
p7058
sg58
g62
sS'trial_loop.thisN'
p7059
I45
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p7060
g59
(g98
S'-\x00\x00\x00'
tRp7061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7062
I0
sg6379
g6546
sS'block_loop.thisRepN'
p7063
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7064
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p7065
Nsg69
Vn
sS'block_loop.thisTrialN'
p7066
I0
sg39
F2.2001614803275515
sg34
g752
(S'\x07\xdf\n\x1a\x0f&(\x06\xba\xa8'
tRp7067
sa(dp7068
S'trial_loop.thisTrialN'
p7069
I46
sg6370
S'45-chewy_nougat_redo.png'
p7070
sS'block_loop.thisIndex'
p7071
g6364
sg38
S'right'
p7072
sg58
g62
sS'trial_loop.thisN'
p7073
I46
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p7074
g59
(g98
S'.\x00\x00\x00'
tRp7075
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7076
I0
sg6379
S'41-peanuts_redo.png'
p7077
sS'block_loop.thisRepN'
p7078
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7079
I2
sg6384
g6726
sg55
g11
sS'block_loop.thisTrial'
p7080
Nsg69
Vn
sS'block_loop.thisTrialN'
p7081
I0
sg39
F1.0668672246256392
sg34
g752
(S'\x07\xdf\n\x1a\x0f&/\n!\xc0'
tRp7082
sa(dp7083
S'trial_loop.thisTrialN'
p7084
I47
sg6370
g6958
sS'block_loop.thisIndex'
p7085
g6364
sg38
S'right'
p7086
sg58
g62
sS'trial_loop.thisN'
p7087
I47
sg33
g6969
sg63
g64
sS'trial_loop.thisIndex'
p7088
g59
(g98
S'/\x00\x00\x00'
tRp7089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7090
I0
sg6379
g6966
sS'block_loop.thisRepN'
p7091
I2
sg6382
g6962
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7092
I2
sg6384
g6969
sg55
g11
sS'block_loop.thisTrial'
p7093
Nsg69
Vn
sS'block_loop.thisTrialN'
p7094
I0
sg39
F0.7667889363165159
sg34
g752
(S'\x07\xdf\n\x1a\x0f&5\x0b\xa8`'
tRp7095
sa(dp7096
S'trial_loop.thisTrialN'
p7097
I48
sg6370
g6476
sS'block_loop.thisIndex'
p7098
g6364
sg38
S'left'
p7099
sg58
g62
sS'trial_loop.thisN'
p7100
I48
sg33
g6487
sg63
g64
sS'trial_loop.thisIndex'
p7101
g59
(g98
S'0\x00\x00\x00'
tRp7102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7103
I0
sg6379
g6484
sS'block_loop.thisRepN'
p7104
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7105
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p7106
Nsg69
Vn
sS'block_loop.thisTrialN'
p7107
I0
sg39
F0.70010759653177956
sg34
g752
(S'\x07\xdf\n\x1a\x0f&;\x08\xa6\xd8'
tRp7108
sa(dp7109
S'trial_loop.thisTrialN'
p7110
I49
sg6370
S'46-pistachios.png'
p7111
sS'block_loop.thisIndex'
p7112
g6364
sg38
S'left'
p7113
sg58
g62
sS'trial_loop.thisN'
p7114
I49
sg33
g6559
sg63
g64
sS'trial_loop.thisIndex'
p7115
g59
(g98
S'1\x00\x00\x00'
tRp7116
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7117
I0
sg6379
S'29-beans.png'
p7118
sS'block_loop.thisRepN'
p7119
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7120
I2
sg6384
g6566
sg55
g11
sS'block_loop.thisTrial'
p7121
Nsg69
Vn
sS'block_loop.thisTrialN'
p7122
I0
sg39
F0.90020806557731703
sg34
g752
(S"\x07\xdf\n\x1a\x0f'\x05\x04\xb3 "
tRp7123
sa(dp7124
S'trial_loop.thisTrialN'
p7125
I50
sg6370
S'18-mms.png'
p7126
sS'block_loop.thisIndex'
p7127
g6364
sg38
S'left'
p7128
sg58
g62
sS'trial_loop.thisN'
p7129
I50
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p7130
g59
(g98
S'2\x00\x00\x00'
tRp7131
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7132
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p7133
sS'block_loop.thisRepN'
p7134
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7135
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p7136
Nsg69
Vn
sS'block_loop.thisTrialN'
p7137
I0
sg39
F1.1835367612929986
sg34
g752
(S"\x07\xdf\n\x1a\x0f'\x0b\x03\x99\xe0"
tRp7138
sa(dp7139
S'trial_loop.thisTrialN'
p7140
I51
sg6370
g6459
sS'block_loop.thisIndex'
p7141
g6364
sg38
S'right'
p7142
sg58
g62
sS'trial_loop.thisN'
p7143
I51
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7144
g59
(g98
S'3\x00\x00\x00'
tRp7145
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7146
I0
sg6379
g6467
sS'block_loop.thisRepN'
p7147
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7148
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7149
Nsg69
Vn
sS'block_loop.thisTrialN'
p7150
I0
sg39
F0.99984005920941854
sg34
g752
(S"\x07\xdf\n\x1a\x0f'\x11\x06\xcaH"
tRp7151
sa(dp7152
S'trial_loop.thisTrialN'
p7153
I52
sg6370
g7111
sS'block_loop.thisIndex'
p7154
g6364
sg38
S'left'
p7155
sg58
g62
sS'trial_loop.thisN'
p7156
I52
sg33
g6559
sg63
g64
sS'trial_loop.thisIndex'
p7157
g59
(g98
S'4\x00\x00\x00'
tRp7158
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7159
I0
sg6379
g7118
sS'block_loop.thisRepN'
p7160
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7161
I2
sg6384
g6566
sg55
g11
sS'block_loop.thisTrial'
p7162
Nsg69
Vn
sS'block_loop.thisTrialN'
p7163
I0
sg39
F0.76686933436121762
sg34
g752
(S"\x07\xdf\n\x1a\x0f'\x17\x07Z\xd0"
tRp7164
sa(dp7165
S'trial_loop.thisTrialN'
p7166
I53
sg6370
g6732
sS'block_loop.thisIndex'
p7167
g6364
sg38
S'right'
p7168
sg58
g62
sS'trial_loop.thisN'
p7169
I53
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p7170
g59
(g98
S'5\x00\x00\x00'
tRp7171
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7172
I0
sg6379
g6739
sS'block_loop.thisRepN'
p7173
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7174
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p7175
Nsg69
Vn
sS'block_loop.thisTrialN'
p7176
I0
sg39
F1.2832913476886461
sg34
g752
(S"\x07\xdf\n\x1a\x0f'\x1d\x04YH"
tRp7177
sa(dp7178
S'trial_loop.thisTrialN'
p7179
I54
sg6370
g6788
sS'block_loop.thisIndex'
p7180
g6364
sg38
S'right'
p7181
sg58
g62
sS'trial_loop.thisN'
p7182
I54
sg33
g6799
sg63
g64
sS'trial_loop.thisIndex'
p7183
g59
(g98
S'6\x00\x00\x00'
tRp7184
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7185
I0
sg6379
g6796
sS'block_loop.thisRepN'
p7186
I2
sg6382
g6792
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7187
I2
sg6384
g6799
sg55
g11
sS'block_loop.thisTrial'
p7188
Nsg69
Vn
sS'block_loop.thisTrialN'
p7189
I0
sg39
F0.73354263434157474
sg34
g752
(S"\x07\xdf\n\x1a\x0f'#\t3x"
tRp7190
sa(dp7191
S'trial_loop.thisTrialN'
p7192
I55
sg6370
g6371
sS'block_loop.thisIndex'
p7193
g6364
sg38
S'right'
p7194
sg58
g62
sS'trial_loop.thisN'
p7195
I55
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7196
g59
(g98
S'7\x00\x00\x00'
tRp7197
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7198
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7199
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7200
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7201
Nsg69
Vn
sS'block_loop.thisTrialN'
p7202
I0
sg39
F1.1167693214747487
sg34
g752
(S"\x07\xdf\n\x1a\x0f')\x05zX"
tRp7203
sa(dp7204
S'trial_loop.thisTrialN'
p7205
I56
sg6370
g6425
sS'block_loop.thisIndex'
p7206
g6364
sg38
S'left'
p7207
sg58
g62
sS'trial_loop.thisN'
p7208
I56
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p7209
g59
(g98
S'8\x00\x00\x00'
tRp7210
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7211
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7212
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7213
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7214
Nsg69
Vn
sS'block_loop.thisTrialN'
p7215
I0
sg39
F0.85008786764956312
sg34
g752
(S"\x07\xdf\n\x1a\x0f'/\x07\xf3("
tRp7216
sa(dp7217
S'trial_loop.thisTrialN'
p7218
I57
sg6370
g6459
sS'block_loop.thisIndex'
p7219
g6364
sg38
S'right'
p7220
sg58
g62
sS'trial_loop.thisN'
p7221
I57
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7222
g59
(g98
S'9\x00\x00\x00'
tRp7223
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7224
I0
sg6379
g6467
sS'block_loop.thisRepN'
p7225
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7226
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7227
Nsg69
Vn
sS'block_loop.thisTrialN'
p7228
I0
sg39
F0.99992901023779268
sg34
g752
(S"\x07\xdf\n\x1a\x0f'5\x06&8"
tRp7229
sa(dp7230
S'trial_loop.thisTrialN'
p7231
I58
sg6370
g6715
sS'block_loop.thisIndex'
p7232
g6364
sg38
S'left'
p7233
sg58
g62
sS'trial_loop.thisN'
p7234
I58
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p7235
g59
(g98
S':\x00\x00\x00'
tRp7236
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7237
I0
sg6379
g6723
sS'block_loop.thisRepN'
p7238
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7239
I2
sg6384
g6726
sg55
g11
sS'block_loop.thisTrial'
p7240
Nsg69
Vn
sS'block_loop.thisTrialN'
p7241
I0
sg39
F1.0002369176418142
sg34
g752
(S"\x07\xdf\n\x1a\x0f';\x06\xb6\xc0"
tRp7242
sa(dp7243
S'trial_loop.thisTrialN'
p7244
I59
sg6370
g6589
sS'block_loop.thisIndex'
p7245
g6364
sg38
S'right'
p7246
sg58
g62
sS'trial_loop.thisN'
p7247
I59
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p7248
g59
(g98
S';\x00\x00\x00'
tRp7249
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7250
I0
sg6379
g6596
sS'block_loop.thisRepN'
p7251
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7252
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7253
Nsg69
Vn
sS'block_loop.thisTrialN'
p7254
I0
sg39
F0.88388726255470829
sg34
g752
(S'\x07\xdf\n\x1a\x0f(\x05\x07\x08\xc8'
tRp7255
sa(dp7256
S'trial_loop.thisTrialN'
p7257
I60
sg6370
g6604
sS'block_loop.thisIndex'
p7258
g6364
sg38
S'right'
p7259
sg58
g62
sS'trial_loop.thisN'
p7260
I60
sg33
g6615
sg63
g64
sS'trial_loop.thisIndex'
p7261
g59
(g98
S'<\x00\x00\x00'
tRp7262
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7263
I0
sg6379
g6612
sS'block_loop.thisRepN'
p7264
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7265
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p7266
Nsg69
Vn
sS'block_loop.thisTrialN'
p7267
I0
sg39
F0.73347535087123106
sg34
g752
(S'\x07\xdf\n\x1a\x0f(\x0b\x05\xef\x88'
tRp7268
sa(dp7269
S'trial_loop.thisTrialN'
p7270
I61
sg6370
g6687
sS'block_loop.thisIndex'
p7271
g6364
sg38
S'right'
p7272
sg58
g62
sS'trial_loop.thisN'
p7273
I61
sg33
g6657
sg63
g64
sS'trial_loop.thisIndex'
p7274
g59
(g98
S'=\x00\x00\x00'
tRp7275
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7276
I0
sg6379
g6694
sS'block_loop.thisRepN'
p7277
I2
sg6382
g6663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7278
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p7279
Nsg69
Vn
sS'block_loop.thisTrialN'
p7280
I0
sg39
F1.0168596409803285
sg34
g752
(S'\x07\xdf\n\x1a\x0f(\x11\x02:P'
tRp7281
sa(dp7282
S'trial_loop.thisTrialN'
p7283
I62
sg6370
g6371
sS'block_loop.thisIndex'
p7284
g6364
sg38
S'right'
p7285
sg58
g62
sS'trial_loop.thisN'
p7286
I62
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p7287
g59
(g98
S'>\x00\x00\x00'
tRp7288
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7289
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7290
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7291
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7292
Nsg69
Vn
sS'block_loop.thisTrialN'
p7293
I0
sg39
F0.71677793147773627
sg34
g752
(S'\x07\xdf\n\x1a\x0f(\x17\x03\tX'
tRp7294
sa(dp7295
S'trial_loop.thisTrialN'
p7296
I63
sg6370
g6476
sS'block_loop.thisIndex'
p7297
g6364
sg38
S'left'
p7298
sg58
g62
sS'trial_loop.thisN'
p7299
I63
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p7300
g59
(g98
S'?\x00\x00\x00'
tRp7301
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7302
I0
sg6379
g6484
sS'block_loop.thisRepN'
p7303
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7304
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p7305
Nsg69
Vn
sS'block_loop.thisTrialN'
p7306
I0
sg39
F0.85018622695952217
sg34
g752
(S'\x07\xdf\n\x1a\x0f(\x1c\x0e\x92x'
tRp7307
sa(dp7308
S'trial_loop.thisTrialN'
p7309
I64
sg6370
S'40-sardines.png'
p7310
sS'block_loop.thisIndex'
p7311
g6364
sg38
S'left'
p7312
sg58
g62
sS'trial_loop.thisN'
p7313
I64
sg33
S'40-sardines.png'
p7314
sg63
g64
sS'trial_loop.thisIndex'
p7315
g59
(g98
S'@\x00\x00\x00'
tRp7316
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7317
I0
sg6379
S'5-pineapple.png'
p7318
sS'block_loop.thisRepN'
p7319
I2
sg6382
g7314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7320
I2
sg6384
S'5-pineapple.png'
p7321
sg55
g11
sS'block_loop.thisTrial'
p7322
Nsg69
Vn
sS'block_loop.thisTrialN'
p7323
I0
sg39
F0.83343805986442021
sg34
g752
(S'\x07\xdf\n\x1a\x0f("\x0c\xc1\xa0'
tRp7324
sa(dp7325
S'trial_loop.thisTrialN'
p7326
I65
sg6370
S'48-twix.png'
p7327
sS'block_loop.thisIndex'
p7328
g6364
sg38
S'left'
p7329
sg58
g62
sS'trial_loop.thisN'
p7330
I65
sg33
g6792
sg63
g64
sS'trial_loop.thisIndex'
p7331
g59
(g98
S'A\x00\x00\x00'
tRp7332
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7333
I0
sg6379
S'50-polo.png'
p7334
sS'block_loop.thisRepN'
p7335
I2
sg6382
g6792
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7336
I2
sg6384
g6799
sg55
g11
sS'block_loop.thisTrial'
p7337
Nsg69
Vn
sS'block_loop.thisTrialN'
p7338
I0
sg39
F0.71688427357275941
sg34
g752
(S'\x07\xdf\n\x1a\x0f((\n\xb60'
tRp7339
sa(dp7340
S'trial_loop.thisTrialN'
p7341
I66
sg6370
g6653
sS'block_loop.thisIndex'
p7342
g6364
sg38
S'left'
p7343
sg58
g62
sS'trial_loop.thisN'
p7344
I66
sg33
g6663
sg63
g64
sS'trial_loop.thisIndex'
p7345
g59
(g98
S'B\x00\x00\x00'
tRp7346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7347
I0
sg6379
g6661
sS'block_loop.thisRepN'
p7348
I2
sg6382
g6663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7349
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p7350
Nsg69
Vn
sS'block_loop.thisTrialN'
p7351
I0
sg39
F0.68351737453031092
sg34
g752
(S'\x07\xdf\n\x1a\x0f(.\x06\xc2x'
tRp7352
sa(dp7353
S'trial_loop.thisTrialN'
p7354
I67
sg6370
g6715
sS'block_loop.thisIndex'
p7355
g6364
sg38
S'left'
p7356
sg58
g62
sS'trial_loop.thisN'
p7357
I67
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p7358
g59
(g98
S'C\x00\x00\x00'
tRp7359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7360
I0
sg6379
g6723
sS'block_loop.thisRepN'
p7361
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7362
I2
sg6384
g6726
sg55
g11
sS'block_loop.thisTrial'
p7363
Nsg69
Vn
sS'block_loop.thisTrialN'
p7364
I0
sg39
F0.90020065299177077
sg34
g752
(S'\x07\xdf\n\x1a\x0f(4\x02\x90@'
tRp7365
sa(dp7366
S'trial_loop.thisTrialN'
p7367
I68
sg6370
g6459
sS'block_loop.thisIndex'
p7368
g6364
sg38
S'right'
p7369
sg58
g62
sS'trial_loop.thisN'
p7370
I68
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p7371
g59
(g98
S'D\x00\x00\x00'
tRp7372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7373
I0
sg6379
g6467
sS'block_loop.thisRepN'
p7374
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7375
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7376
Nsg69
Vn
sS'block_loop.thisTrialN'
p7377
I0
sg39
F1.1332628947629928
sg34
g752
(S'\x07\xdf\n\x1a\x0f(:\x01w\x00'
tRp7378
sa(dp7379
S'trial_loop.thisTrialN'
p7380
I69
sg6370
S'44-crunch.png'
p7381
sS'block_loop.thisIndex'
p7382
g6364
sg38
S'left'
p7383
sg58
g62
sS'trial_loop.thisN'
p7384
I69
sg33
g6962
sg63
g64
sS'trial_loop.thisIndex'
p7385
g59
(g98
S'E\x00\x00\x00'
tRp7386
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7387
I0
sg6379
S'26-walkers_smoky_bacon.png'
p7388
sS'block_loop.thisRepN'
p7389
I2
sg6382
g6962
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7390
I2
sg6384
g6969
sg55
g11
sS'block_loop.thisTrial'
p7391
Nsg69
Vn
sS'block_loop.thisTrialN'
p7392
I0
sg39
F1.4667901907550913
sg34
g752
(S'\x07\xdf\n\x1a\x0f)\x04\x03\xef\xd0'
tRp7393
sa(dp7394
S'trial_loop.thisTrialN'
p7395
I70
sg6370
g6670
sS'block_loop.thisIndex'
p7396
g6364
sg38
S'right'
p7397
sg58
g62
sS'trial_loop.thisN'
p7398
I70
sg33
g6674
sg63
g64
sS'trial_loop.thisIndex'
p7399
g59
(g98
S'F\x00\x00\x00'
tRp7400
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7401
I0
sg6379
g6678
sS'block_loop.thisRepN'
p7402
I2
sg6382
g6674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7403
I2
sg6384
g6681
sg55
g11
sS'block_loop.thisTrial'
p7404
Nsg69
Vn
sS'block_loop.thisTrialN'
p7405
I0
sg39
F0.71688085237929045
sg34
g752
(S'\x07\xdf\n\x1a\x0f)\n\x0b\xa4x'
tRp7406
sa(dp7407
S'trial_loop.thisTrialN'
p7408
I71
sg6370
g6831
sS'block_loop.thisIndex'
p7409
g6364
sg38
S'right'
p7410
sg58
g62
sS'trial_loop.thisN'
p7411
I71
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p7412
g59
(g98
S'G\x00\x00\x00'
tRp7413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7414
I0
sg6379
g6838
sS'block_loop.thisRepN'
p7415
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7416
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p7417
Nsg69
Vn
sS'block_loop.thisTrialN'
p7418
I0
sg39
F0.58345088933856459
sg34
g752
(S'\x07\xdf\n\x1a\x0f)\x10\x07\xef@'
tRp7419
sa(dp7420
S'trial_loop.thisTrialN'
p7421
I72
sg6370
g6638
sS'block_loop.thisIndex'
p7422
g6364
sg38
S'right'
p7423
sg58
g62
sS'trial_loop.thisN'
p7424
I72
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7425
g59
(g98
S'H\x00\x00\x00'
tRp7426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7427
I0
sg6379
g6645
sS'block_loop.thisRepN'
p7428
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7429
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7430
Nsg69
Vn
sS'block_loop.thisTrialN'
p7431
I0
sg39
F0.91678289220817533
sg34
g752
(S'\x07\xdf\n\x1a\x0f)\x16\x02\x13@'
tRp7432
sa(dp7433
S'trial_loop.thisTrialN'
p7434
I73
sg6370
S'5-pineapple.png'
p7435
sS'block_loop.thisIndex'
p7436
g6364
sg38
S'right'
p7437
sg58
g62
sS'trial_loop.thisN'
p7438
I73
sg33
g7321
sg63
g64
sS'trial_loop.thisIndex'
p7439
g59
(g98
S'I\x00\x00\x00'
tRp7440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7441
I0
sg6379
S'40-sardines.png'
p7442
sS'block_loop.thisRepN'
p7443
I2
sg6382
g7314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7444
I2
sg6384
g7321
sg55
g11
sS'block_loop.thisTrial'
p7445
Nsg69
Vn
sS'block_loop.thisTrialN'
p7446
I0
sg39
F0.68352364671864052
sg34
g752
(S'\x07\xdf\n\x1a\x0f)\x1c\x014\x98'
tRp7447
sa(dp7448
S'trial_loop.thisTrialN'
p7449
I74
sg6370
g6831
sS'block_loop.thisIndex'
p7450
g6364
sg38
S'right'
p7451
sg58
g62
sS'trial_loop.thisN'
p7452
I74
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p7453
g59
(g98
S'J\x00\x00\x00'
tRp7454
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7455
I0
sg6379
g6838
sS'block_loop.thisRepN'
p7456
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7457
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p7458
Nsg69
Vn
sS'block_loop.thisTrialN'
p7459
I0
sg39
F0.55020373206571094
sg34
g752
(S'\x07\xdf\n\x1a\x0f)!\x0cD\xa0'
tRp7460
sa(dp7461
S'trial_loop.thisTrialN'
p7462
I75
sg6370
S'23-crunchie_redo.png'
p7463
sS'block_loop.thisIndex'
p7464
g6364
sg38
S'left'
p7465
sg58
g62
sS'trial_loop.thisN'
p7466
I75
sg33
g6632
sg63
g64
sS'trial_loop.thisIndex'
p7467
g59
(g98
S'K\x00\x00\x00'
tRp7468
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7469
I0
sg6379
S'33-ambrosia_rice.png'
p7470
sS'block_loop.thisRepN'
p7471
I2
sg6382
g6625
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7472
I2
sg6384
g6632
sg55
g11
sS'block_loop.thisTrial'
p7473
Nsg69
Vn
sS'block_loop.thisTrialN'
p7474
I0
sg39
F1.0835218791016814
sg34
g752
(S"\x07\xdf\n\x1a\x0f)'\x05\xef\x88"
tRp7475
sa(dp7476
S'trial_loop.thisTrialN'
p7477
I76
sg6370
g6872
sS'block_loop.thisIndex'
p7478
g6364
sg38
S'right'
p7479
sg58
g62
sS'trial_loop.thisN'
p7480
I76
sg33
g6883
sg63
g64
sS'trial_loop.thisIndex'
p7481
g59
(g98
S'L\x00\x00\x00'
tRp7482
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7483
I0
sg6379
g6880
sS'block_loop.thisRepN'
p7484
I2
sg6382
g6876
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7485
I2
sg6384
g6883
sg55
g11
sS'block_loop.thisTrial'
p7486
Nsg69
Vn
sS'block_loop.thisTrialN'
p7487
I0
sg39
F0.6672287877454437
sg34
g752
(S'\x07\xdf\n\x1a\x0f)-\x07\xb0\xc0'
tRp7488
sa(dp7489
S'trial_loop.thisTrialN'
p7490
I77
sg6370
g6425
sS'block_loop.thisIndex'
p7491
g6364
sg38
S'left'
p7492
sg58
g62
sS'trial_loop.thisN'
p7493
I77
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p7494
g59
(g98
S'M\x00\x00\x00'
tRp7495
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7496
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7497
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7498
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7499
Nsg69
Vn
sS'block_loop.thisTrialN'
p7500
I0
sg39
F0.69999555244794465
sg34
g752
(S'\x07\xdf\n\x1a\x0f)3\x03\x05p'
tRp7501
sa(dp7502
S'trial_loop.thisTrialN'
p7503
I78
sg6370
g6773
sS'block_loop.thisIndex'
p7504
g6364
sg38
S'left'
p7505
sg58
g62
sS'trial_loop.thisN'
p7506
I78
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7507
g59
(g98
S'N\x00\x00\x00'
tRp7508
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7509
I0
sg6379
g6780
sS'block_loop.thisRepN'
p7510
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7511
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7512
Nsg69
Vn
sS'block_loop.thisTrialN'
p7513
I0
sg39
F0.75012259276263649
sg34
g752
(S'\x07\xdf\n\x1a\x0f)8\x0eS\xf8'
tRp7514
sa(dp7515
S'trial_loop.thisTrialN'
p7516
I79
sg6370
g6958
sS'block_loop.thisIndex'
p7517
g6364
sg38
S'right'
p7518
sg58
g62
sS'trial_loop.thisN'
p7519
I79
sg33
g6962
sg63
g64
sS'trial_loop.thisIndex'
p7520
g59
(g98
S'O\x00\x00\x00'
tRp7521
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7522
I0
sg6379
g6966
sS'block_loop.thisRepN'
p7523
I2
sg6382
g6962
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7524
I2
sg6384
g6969
sg55
g11
sS'block_loop.thisTrial'
p7525
Nsg69
Vn
sS'block_loop.thisTrialN'
p7526
I0
sg39
F2.5001633619840504
sg34
g752
(S'\x07\xdf\n\x1a\x0f*\x02\n\xd9X'
tRp7527
sa(dp7528
S'trial_loop.thisTrialN'
p7529
I80
sg6370
g7435
sS'block_loop.thisIndex'
p7530
g6364
sg38
S'right'
p7531
sg58
g62
sS'trial_loop.thisN'
p7532
I80
sg33
g7321
sg63
g64
sS'trial_loop.thisIndex'
p7533
g59
(g98
S'P\x00\x00\x00'
tRp7534
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7535
I0
sg6379
g7442
sS'block_loop.thisRepN'
p7536
I2
sg6382
g7314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7537
I2
sg6384
g7321
sg55
g11
sS'block_loop.thisTrial'
p7538
Nsg69
Vn
sS'block_loop.thisTrialN'
p7539
I0
sg39
F0.65010828077083715
sg34
g752
(S'\x07\xdf\n\x1a\x0f*\n\x03\xc0\xf0'
tRp7540
sa(dp7541
S'trial_loop.thisTrialN'
p7542
I81
sg6370
g6788
sS'block_loop.thisIndex'
p7543
g6364
sg38
S'right'
p7544
sg58
g62
sS'trial_loop.thisN'
p7545
I81
sg33
g6792
sg63
g64
sS'trial_loop.thisIndex'
p7546
g59
(g98
S'Q\x00\x00\x00'
tRp7547
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7548
I0
sg6379
g6796
sS'block_loop.thisRepN'
p7549
I2
sg6382
g6792
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7550
I2
sg6384
g6799
sg55
g11
sS'block_loop.thisTrial'
p7551
Nsg69
Vn
sS'block_loop.thisTrialN'
p7552
I0
sg39
F0.96727913630820694
sg34
g752
(S'\x07\xdf\n\x1a\x0f*\x0f\x0e\x19`'
tRp7553
sa(dp7554
S'trial_loop.thisTrialN'
p7555
I82
sg6370
g6425
sS'block_loop.thisIndex'
p7556
g6364
sg38
S'left'
p7557
sg58
g62
sS'trial_loop.thisN'
p7558
I82
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7559
g59
(g98
S'R\x00\x00\x00'
tRp7560
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7561
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7562
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7563
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7564
Nsg69
Vn
sS'block_loop.thisTrialN'
p7565
I0
sg39
F0.70006397631550499
sg34
g752
(S'\x07\xdf\n\x1a\x0f*\x15\x0e0\xd0'
tRp7566
sa(dp7567
S'trial_loop.thisTrialN'
p7568
I83
sg6370
g6572
sS'block_loop.thisIndex'
p7569
g6364
sg38
S'right'
p7570
sg58
g62
sS'trial_loop.thisN'
p7571
I83
sg33
g6582
sg63
g64
sS'trial_loop.thisIndex'
p7572
g59
(g98
S'S\x00\x00\x00'
tRp7573
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7574
I0
sg6379
g6580
sS'block_loop.thisRepN'
p7575
I2
sg6382
g6582
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7576
I2
sg6384
g6576
sg55
g11
sS'block_loop.thisTrial'
p7577
Nsg69
Vn
sS'block_loop.thisTrialN'
p7578
I0
sg39
F0.58353157248257048
sg34
g752
(S'\x07\xdf\n\x1a\x0f*\x1b\n=\x18'
tRp7579
sa(dp7580
S'trial_loop.thisTrialN'
p7581
I84
sg6370
g6773
sS'block_loop.thisIndex'
p7582
g6364
sg38
S'left'
p7583
sg58
g62
sS'trial_loop.thisN'
p7584
I84
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7585
g59
(g98
S'T\x00\x00\x00'
tRp7586
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7587
I0
sg6379
g6780
sS'block_loop.thisRepN'
p7588
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7589
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7590
Nsg69
Vn
sS'block_loop.thisTrialN'
p7591
I0
sg39
F2.6334313885372467
sg34
g752
(S'\x07\xdf\n\x1a\x0f*!\x04a\x18'
tRp7592
sa(dp7593
S'trial_loop.thisTrialN'
p7594
I85
sg6370
g6988
sS'block_loop.thisIndex'
p7595
g6364
sg38
S'left'
p7596
sg58
g62
sS'trial_loop.thisN'
p7597
I85
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7598
g59
(g98
S'U\x00\x00\x00'
tRp7599
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7600
I0
sg6379
g6995
sS'block_loop.thisRepN'
p7601
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7602
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7603
Nsg69
Vn
sS'block_loop.thisTrialN'
p7604
I0
sg39
F2.2165638217929882
sg34
g752
(S'\x07\xdf\n\x1a\x0f*(\x0es8'
tRp7605
sa(dp7606
S'trial_loop.thisTrialN'
p7607
I86
sg6370
g6442
sS'block_loop.thisIndex'
p7608
g6364
sg38
S'left'
p7609
sg58
g62
sS'trial_loop.thisN'
p7610
I86
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7611
g59
(g98
S'V\x00\x00\x00'
tRp7612
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7613
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7614
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7615
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7616
Nsg69
Vn
sS'block_loop.thisTrialN'
p7617
I0
sg39
F0.65024056691436272
sg34
g752
(S'\x07\xdf\n\x1a\x0f*0\x03\x11('
tRp7618
sa(dp7619
S'trial_loop.thisTrialN'
p7620
I87
sg6370
g7310
sS'block_loop.thisIndex'
p7621
g6364
sg38
S'left'
p7622
sg58
g62
sS'trial_loop.thisN'
p7623
I87
sg33
g7314
sg63
g64
sS'trial_loop.thisIndex'
p7624
g59
(g98
S'W\x00\x00\x00'
tRp7625
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7626
I0
sg6379
g7318
sS'block_loop.thisRepN'
p7627
I2
sg6382
g7314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7628
I2
sg6384
g7321
sg55
g11
sS'block_loop.thisTrial'
p7629
Nsg69
Vn
sS'block_loop.thisTrialN'
p7630
I0
sg39
F0.71688085237838095
sg34
g752
(S'\x07\xdf\n\x1a\x0f*5\ri\x98'
tRp7631
sa(dp7632
S'trial_loop.thisTrialN'
p7633
I88
sg6370
g6621
sS'block_loop.thisIndex'
p7634
g6364
sg38
S'right'
p7635
sg58
g62
sS'trial_loop.thisN'
p7636
I88
sg33
g6625
sg63
g64
sS'trial_loop.thisIndex'
p7637
g59
(g98
S'X\x00\x00\x00'
tRp7638
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7639
I0
sg6379
g6629
sS'block_loop.thisRepN'
p7640
I2
sg6382
g6625
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7641
I2
sg6384
g6632
sg55
g11
sS'block_loop.thisTrial'
p7642
Nsg69
Vn
sS'block_loop.thisTrialN'
p7643
I0
sg39
F1.3167700057128968
sg34
g752
(S'\x07\xdf\n\x1a\x0f*;\t\xb4`'
tRp7644
sa(dp7645
S'trial_loop.thisTrialN'
p7646
I89
sg6370
g6653
sS'block_loop.thisIndex'
p7647
g6364
sg38
S'left'
p7648
sg58
g62
sS'trial_loop.thisN'
p7649
I89
sg33
g6663
sg63
g64
sS'trial_loop.thisIndex'
p7650
g59
(g98
S'Y\x00\x00\x00'
tRp7651
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7652
I0
sg6379
g6661
sS'block_loop.thisRepN'
p7653
I2
sg6382
g6663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7654
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p7655
Nsg69
Vn
sS'block_loop.thisTrialN'
p7656
I0
sg39
F0.71677679107961012
sg34
g752
(S'\x07\xdf\n\x1a\x0f+\x05\x0f\x07\xa8'
tRp7657
sa(dp7658
S'trial_loop.thisTrialN'
p7659
I90
sg6370
g7327
sS'block_loop.thisIndex'
p7660
g6364
sg38
S'left'
p7661
sg58
g62
sS'trial_loop.thisN'
p7662
I90
sg33
g6792
sg63
g64
sS'trial_loop.thisIndex'
p7663
g59
(g98
S'Z\x00\x00\x00'
tRp7664
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7665
I0
sg6379
g7334
sS'block_loop.thisRepN'
p7666
I2
sg6382
g6792
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7667
I2
sg6384
g6799
sg55
g11
sS'block_loop.thisTrial'
p7668
Nsg69
Vn
sS'block_loop.thisTrialN'
p7669
I0
sg39
F0.63342026965801779
sg34
g752
(S'\x07\xdf\n\x1a\x0f+\x0b\x0b\x13\xf0'
tRp7670
sa(dp7671
S'trial_loop.thisTrialN'
p7672
I91
sg6370
g7310
sS'block_loop.thisIndex'
p7673
g6364
sg38
S'left'
p7674
sg58
g62
sS'trial_loop.thisN'
p7675
I91
sg33
g7321
sg63
g64
sS'trial_loop.thisIndex'
p7676
g59
(g98
S'[\x00\x00\x00'
tRp7677
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7678
I0
sg6379
g7318
sS'block_loop.thisRepN'
p7679
I2
sg6382
g7314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7680
I2
sg6384
g7321
sg55
g11
sS'block_loop.thisTrial'
p7681
Nsg69
Vn
sS'block_loop.thisTrialN'
p7682
I0
sg39
F1.5505914673158259
sg34
g752
(S'\x07\xdf\n\x1a\x0f+\x11\x06* '
tRp7683
sa(dp7684
S'trial_loop.thisTrialN'
p7685
I92
sg6370
g7463
sS'block_loop.thisIndex'
p7686
g6364
sg38
S'left'
p7687
sg58
g62
sS'trial_loop.thisN'
p7688
I92
sg33
g6625
sg63
g64
sS'trial_loop.thisIndex'
p7689
g59
(g98
S'\\\x00\x00\x00'
tRp7690
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7691
I0
sg6379
g7470
sS'block_loop.thisRepN'
p7692
I2
sg6382
g6625
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7693
I2
sg6384
g6632
sg55
g11
sS'block_loop.thisTrial'
p7694
Nsg69
Vn
sS'block_loop.thisTrialN'
p7695
I0
sg39
F1.2168623209145153
sg34
g752
(S'\x07\xdf\n\x1a\x0f+\x17\x0f\x0fx'
tRp7696
sa(dp7697
S'trial_loop.thisTrialN'
p7698
I93
sg6370
g6915
sS'block_loop.thisIndex'
p7699
g6364
sg38
S'left'
p7700
sg58
g62
sS'trial_loop.thisN'
p7701
I93
sg33
g6674
sg63
g64
sS'trial_loop.thisIndex'
p7702
g59
(g98
S']\x00\x00\x00'
tRp7703
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7704
I0
sg6379
g6922
sS'block_loop.thisRepN'
p7705
I2
sg6382
g6674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7706
I2
sg6384
g6681
sg55
g11
sS'block_loop.thisTrial'
p7707
Nsg69
Vn
sS'block_loop.thisTrialN'
p7708
I0
sg39
F0.73343458165072661
sg34
g752
(S'\x07\xdf\n\x1a\x0f+\x1e\x03v\xb8'
tRp7709
sa(dp7710
S'trial_loop.thisTrialN'
p7711
I94
sg6370
g7381
sS'block_loop.thisIndex'
p7712
g6364
sg38
S'left'
p7713
sg58
g62
sS'trial_loop.thisN'
p7714
I94
sg33
g6962
sg63
g64
sS'trial_loop.thisIndex'
p7715
g59
(g98
S'^\x00\x00\x00'
tRp7716
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7717
I0
sg6379
g7388
sS'block_loop.thisRepN'
p7718
I2
sg6382
g6962
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7719
I2
sg6384
g6969
sg55
g11
sS'block_loop.thisTrial'
p7720
Nsg69
Vn
sS'block_loop.thisTrialN'
p7721
I0
sg39
F0.80012561481726152
sg34
g752
(S'\x07\xdf\n\x1a\x0f+#\x0f>X'
tRp7722
sa(dp7723
S'trial_loop.thisTrialN'
p7724
I95
sg6370
g6506
sS'block_loop.thisIndex'
p7725
g6364
sg38
S'left'
p7726
sg58
g62
sS'trial_loop.thisN'
p7727
I95
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7728
g59
(g98
S'_\x00\x00\x00'
tRp7729
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7730
I0
sg6379
g6513
sS'block_loop.thisRepN'
p7731
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7732
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7733
Nsg69
Vn
sS'block_loop.thisTrialN'
p7734
I0
sg39
F1.1835233616184269
sg34
g752
(S'\x07\xdf\n\x1a\x0f+)\x0c\xb9\xd0'
tRp7735
sa(dp7736
S'trial_loop.thisTrialN'
p7737
I96
sg6370
g6604
sS'block_loop.thisIndex'
p7738
g6364
sg38
S'right'
p7739
sg58
g62
sS'trial_loop.thisN'
p7740
I96
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p7741
g59
(g98
S'`\x00\x00\x00'
tRp7742
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7743
I0
sg6379
g6612
sS'block_loop.thisRepN'
p7744
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7745
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p7746
Nsg69
Vn
sS'block_loop.thisTrialN'
p7747
I0
sg39
F0.61687395297212788
sg34
g752
(S'\x07\xdf\n\x1a\x0f+0\x00\xa7\xf8'
tRp7748
sa(dp7749
S'trial_loop.thisTrialN'
p7750
I97
sg6370
g7381
sS'block_loop.thisIndex'
p7751
g6364
sg38
S'left'
p7752
sg58
g62
sS'trial_loop.thisN'
p7753
I97
sg33
g6962
sg63
g64
sS'trial_loop.thisIndex'
p7754
g59
(g98
S'a\x00\x00\x00'
tRp7755
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7756
I0
sg6379
g7388
sS'block_loop.thisRepN'
p7757
I2
sg6382
g6962
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7758
I2
sg6384
g6969
sg55
g11
sS'block_loop.thisTrial'
p7759
Nsg69
Vn
sS'block_loop.thisTrialN'
p7760
I0
sg39
F0.73388931527097157
sg34
g752
(S'\x07\xdf\n\x1a\x0f+5\n\x87P'
tRp7761
sa(dp7762
S'trial_loop.thisTrialN'
p7763
I98
sg6370
g6425
sS'block_loop.thisIndex'
p7764
g6364
sg38
S'left'
p7765
sg58
g62
sS'trial_loop.thisN'
p7766
I98
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7767
g59
(g98
S'b\x00\x00\x00'
tRp7768
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7769
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7770
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7771
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7772
Nsg69
Vn
sS'block_loop.thisTrialN'
p7773
I0
sg39
F0.81670186694555014
sg34
g752
(S'\x07\xdf\n\x1a\x0f+;\x07\x0c\xb0'
tRp7774
sa(dp7775
S'trial_loop.thisTrialN'
p7776
I99
sg6370
g6687
sS'block_loop.thisIndex'
p7777
g6364
sg38
S'right'
p7778
sg58
g62
sS'trial_loop.thisN'
p7779
I99
sg33
g6663
sg63
g64
sS'trial_loop.thisIndex'
p7780
g59
(g98
S'c\x00\x00\x00'
tRp7781
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7782
I0
sg6379
g6694
sS'block_loop.thisRepN'
p7783
I2
sg6382
g6663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7784
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p7785
Nsg69
Vn
sS'block_loop.thisTrialN'
p7786
I0
sg39
F0.6335323137418527
sg34
g752
(S'\x07\xdf\n\x1a\x0f,\x05\x04\xc2\xc0'
tRp7787
sa(dp7788
S'trial_loop.thisTrialN'
p7789
I100
sg6370
g6538
sS'block_loop.thisIndex'
p7790
g6364
sg38
S'left'
p7791
sg58
g62
sS'trial_loop.thisN'
p7792
I100
sg33
g6549
sg63
g64
sS'trial_loop.thisIndex'
p7793
g59
(g98
S'd\x00\x00\x00'
tRp7794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7795
I0
sg6379
g6546
sS'block_loop.thisRepN'
p7796
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7797
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p7798
Nsg69
Vn
sS'block_loop.thisTrialN'
p7799
I0
sg39
F1.5835170324107821
sg34
g752
(S'\x07\xdf\n\x1a\x0f,\n\x0e\xe0\x98'
tRp7800
sa(dp7801
S'trial_loop.thisTrialN'
p7802
I101
sg6370
g6988
sS'block_loop.thisIndex'
p7803
g6364
sg38
S'left'
p7804
sg58
g62
sS'trial_loop.thisN'
p7805
I101
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7806
g59
(g98
S'e\x00\x00\x00'
tRp7807
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7808
I0
sg6379
g6995
sS'block_loop.thisRepN'
p7809
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7810
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7811
Nsg69
Vn
sS'block_loop.thisTrialN'
p7812
I0
sg39
F0.64968262729416892
sg34
g752
(S'\x07\xdf\n\x1a\x0f,\x11\t;H'
tRp7813
sa(dp7814
S'trial_loop.thisTrialN'
p7815
I102
sg6370
g6773
sS'block_loop.thisIndex'
p7816
g6364
sg38
S'left'
p7817
sg58
g62
sS'trial_loop.thisN'
p7818
I102
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7819
g59
(g98
S'f\x00\x00\x00'
tRp7820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7821
I0
sg6379
g6780
sS'block_loop.thisRepN'
p7822
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7823
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7824
Nsg69
Vn
sS'block_loop.thisTrialN'
p7825
I0
sg39
F0.95020823663708143
sg34
g752
(S'\x07\xdf\n\x1a\x0f,\x17\x04Qx'
tRp7826
sa(dp7827
S'trial_loop.thisTrialN'
p7828
I103
sg6370
g6687
sS'block_loop.thisIndex'
p7829
g6364
sg38
S'right'
p7830
sg58
g62
sS'trial_loop.thisN'
p7831
I103
sg33
g6663
sg63
g64
sS'trial_loop.thisIndex'
p7832
g59
(g98
S'g\x00\x00\x00'
tRp7833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7834
I0
sg6379
g6694
sS'block_loop.thisRepN'
p7835
I2
sg6382
g6663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7836
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p7837
Nsg69
Vn
sS'block_loop.thisTrialN'
p7838
I0
sg39
F0.7339933765697424
sg34
g752
(S'\x07\xdf\n\x1a\x0f,\x1d\x03\xef\xd0'
tRp7839
sa(dp7840
S'trial_loop.thisTrialN'
p7841
I104
sg6370
g6371
sS'block_loop.thisIndex'
p7842
g6364
sg38
S'right'
p7843
sg58
g62
sS'trial_loop.thisN'
p7844
I104
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7845
g59
(g98
S'h\x00\x00\x00'
tRp7846
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7847
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7848
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7849
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7850
Nsg69
Vn
sS'block_loop.thisTrialN'
p7851
I0
sg39
F1.6501849725227657
sg34
g752
(S'\x07\xdf\n\x1a\x0f,#\x00u0'
tRp7852
sa(dp7853
S'trial_loop.thisTrialN'
p7854
I105
sg6370
g6915
sS'block_loop.thisIndex'
p7855
g6364
sg38
S'left'
p7856
sg58
g62
sS'trial_loop.thisN'
p7857
I105
sg33
g6674
sg63
g64
sS'trial_loop.thisIndex'
p7858
g59
(g98
S'i\x00\x00\x00'
tRp7859
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7860
I0
sg6379
g6922
sS'block_loop.thisRepN'
p7861
I2
sg6382
g6674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7862
I2
sg6384
g6681
sg55
g11
sS'block_loop.thisTrial'
p7863
Nsg69
Vn
sS'block_loop.thisTrialN'
p7864
I0
sg39
F1.0168516581952645
sg34
g752
(S'\x07\xdf\n\x1a\x0f,)\n\xc9\xb8'
tRp7865
sa(dp7866
S'trial_loop.thisTrialN'
p7867
I106
sg6370
g6391
sS'block_loop.thisIndex'
p7868
g6364
sg38
S'right'
p7869
sg58
g62
sS'trial_loop.thisN'
p7870
I106
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7871
g59
(g98
S'j\x00\x00\x00'
tRp7872
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7873
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7874
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7875
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7876
Nsg69
Vn
sS'block_loop.thisTrialN'
p7877
I0
sg39
F0.83352473009654204
sg34
g752
(S'\x07\xdf\n\x1a\x0f,/\x0b\x94\xd8'
tRp7878
sa(dp7879
S'trial_loop.thisTrialN'
p7880
I107
sg6370
g7126
sS'block_loop.thisIndex'
p7881
g6364
sg38
S'left'
p7882
sg58
g62
sS'trial_loop.thisN'
p7883
I107
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p7884
g59
(g98
S'k\x00\x00\x00'
tRp7885
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7886
I0
sg6379
g7133
sS'block_loop.thisRepN'
p7887
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7888
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p7889
Nsg69
Vn
sS'block_loop.thisTrialN'
p7890
I0
sg39
F0.73354234924227057
sg34
g752
(S'\x07\xdf\n\x1a\x0f,5\t\x89h'
tRp7891
sa(dp7892
S'trial_loop.thisTrialN'
p7893
I108
sg6370
g6958
sS'block_loop.thisIndex'
p7894
g6364
sg38
S'right'
p7895
sg58
g62
sS'trial_loop.thisN'
p7896
I108
sg33
g6969
sg63
g64
sS'trial_loop.thisIndex'
p7897
g59
(g98
S'l\x00\x00\x00'
tRp7898
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7899
I0
sg6379
g6966
sS'block_loop.thisRepN'
p7900
I2
sg6382
g6962
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7901
I2
sg6384
g6969
sg55
g11
sS'block_loop.thisTrial'
p7902
Nsg69
Vn
sS'block_loop.thisTrialN'
p7903
I0
sg39
F1.0168852999295268
sg34
g752
(S'\x07\xdf\n\x1a\x0f,;\x06\x0e\xc8'
tRp7904
sa(dp7905
S'trial_loop.thisTrialN'
p7906
I109
sg6370
g6915
sS'block_loop.thisIndex'
p7907
g6364
sg38
S'left'
p7908
sg58
g62
sS'trial_loop.thisN'
p7909
I109
sg33
g6674
sg63
g64
sS'trial_loop.thisIndex'
p7910
g59
(g98
S'm\x00\x00\x00'
tRp7911
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7912
I0
sg6379
g6922
sS'block_loop.thisRepN'
p7913
I2
sg6382
g6674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7914
I2
sg6384
g6681
sg55
g11
sS'block_loop.thisTrial'
p7915
Nsg69
Vn
sS'block_loop.thisTrialN'
p7916
I0
sg39
F0.75018502954208088
sg34
g752
(S'\x07\xdf\n\x1a\x0f-\x05\x06\xdd\xd0'
tRp7917
sa(dp7918
S'trial_loop.thisTrialN'
p7919
I110
sg6370
g6408
sS'block_loop.thisIndex'
p7920
g6364
sg38
S'left'
p7921
sg58
g62
sS'trial_loop.thisN'
p7922
I110
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p7923
g59
(g98
S'n\x00\x00\x00'
tRp7924
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7925
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7926
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7927
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7928
Nsg69
Vn
sS'block_loop.thisTrialN'
p7929
I0
sg39
F0.85011951368869632
sg34
g752
(S'\x07\xdf\n\x1a\x0f-\x0b\x03\xa1\xb0'
tRp7930
sa(dp7931
S'trial_loop.thisTrialN'
p7932
I111
sg6370
S'16-skips_prawn.png'
p7933
sS'block_loop.thisIndex'
p7934
g6364
sg38
S'right'
p7935
sg58
g62
sS'trial_loop.thisN'
p7936
I111
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7937
g59
(g98
S'o\x00\x00\x00'
tRp7938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7939
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p7940
sS'block_loop.thisRepN'
p7941
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7942
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7943
Nsg69
Vn
sS'block_loop.thisTrialN'
p7944
I0
sg39
F0.60005850240668224
sg34
g752
(S'\x07\xdf\n\x1a\x0f-\x11\x01\xd0\xd8'
tRp7945
sa(dp7946
S'trial_loop.thisTrialN'
p7947
I112
sg6370
g6670
sS'block_loop.thisIndex'
p7948
g6364
sg38
S'right'
p7949
sg58
g62
sS'trial_loop.thisN'
p7950
I112
sg33
g6674
sg63
g64
sS'trial_loop.thisIndex'
p7951
g59
(g98
S'p\x00\x00\x00'
tRp7952
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7953
I0
sg6379
g6678
sS'block_loop.thisRepN'
p7954
I2
sg6382
g6674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7955
I2
sg6384
g6681
sg55
g11
sS'block_loop.thisTrial'
p7956
Nsg69
Vn
sS'block_loop.thisTrialN'
p7957
I0
sg39
F0.73346565749034198
sg34
g752
(S'\x07\xdf\n\x1a\x0f-\x16\x0bq\xb0'
tRp7958
sa(dp7959
S'trial_loop.thisTrialN'
p7960
I113
sg6370
S'2-steamed_puddings.png'
p7961
sS'block_loop.thisIndex'
p7962
g6364
sg38
S'left'
p7963
sg58
g62
sS'trial_loop.thisN'
p7964
I113
sg33
g6876
sg63
g64
sS'trial_loop.thisIndex'
p7965
g59
(g98
S'q\x00\x00\x00'
tRp7966
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7967
I0
sg6379
S'20-fruit_pastilles.png'
p7968
sS'block_loop.thisRepN'
p7969
I2
sg6382
g6876
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7970
I2
sg6384
g6883
sg55
g11
sS'block_loop.thisTrial'
p7971
Nsg69
Vn
sS'block_loop.thisTrialN'
p7972
I0
sg39
F0.68353932718855503
sg34
g752
(S'\x07\xdf\n\x1a\x0f-\x1c\x07\xbcx'
tRp7973
sa(dp7974
S'trial_loop.thisTrialN'
p7975
I114
sg6370
g7070
sS'block_loop.thisIndex'
p7976
g6364
sg38
S'right'
p7977
sg58
g62
sS'trial_loop.thisN'
p7978
I114
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p7979
g59
(g98
S'r\x00\x00\x00'
tRp7980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7981
I0
sg6379
g7077
sS'block_loop.thisRepN'
p7982
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7983
I2
sg6384
g6726
sg55
g11
sS'block_loop.thisTrial'
p7984
Nsg69
Vn
sS'block_loop.thisTrialN'
p7985
I0
sg39
F0.7002147939238057
sg34
g752
(S'\x07\xdf\n\x1a\x0f-"\x03\x8a@'
tRp7986
sa(dp7987
S'trial_loop.thisTrialN'
p7988
I115
sg6370
g7126
sS'block_loop.thisIndex'
p7989
g6364
sg38
S'left'
p7990
sg58
g62
sS'trial_loop.thisN'
p7991
I115
sg33
g6615
sg63
g64
sS'trial_loop.thisIndex'
p7992
g59
(g98
S's\x00\x00\x00'
tRp7993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7994
I0
sg6379
g7133
sS'block_loop.thisRepN'
p7995
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7996
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p7997
Nsg69
Vn
sS'block_loop.thisTrialN'
p7998
I0
sg39
F0.86679070393256552
sg34
g752
(S"\x07\xdf\n\x1a\x0f-'\x0e\x9aH"
tRp7999
sa(dp8000
S'trial_loop.thisTrialN'
p8001
I116
sg6370
g6589
sS'block_loop.thisIndex'
p8002
g6364
sg38
S'left'
p8003
sg58
g62
sS'trial_loop.thisN'
p8004
I116
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8005
g59
(g98
S't\x00\x00\x00'
tRp8006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8007
I0
sg6379
g6596
sS'block_loop.thisRepN'
p8008
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8009
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8010
Nsg69
Vn
sS'block_loop.thisTrialN'
p8011
I0
sg39
F1.0834449022513581
sg34
g752
(S'\x07\xdf\n\x1a\x0f--\rFp'
tRp8012
sa(dp8013
S'trial_loop.thisTrialN'
p8014
I117
sg6370
g7463
sS'block_loop.thisIndex'
p8015
g6364
sg38
S'left'
p8016
sg58
g62
sS'trial_loop.thisN'
p8017
I117
sg33
g6625
sg63
g64
sS'trial_loop.thisIndex'
p8018
g59
(g98
S'u\x00\x00\x00'
tRp8019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8020
I0
sg6379
g7470
sS'block_loop.thisRepN'
p8021
I2
sg6382
g6625
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8022
I2
sg6384
g6632
sg55
g11
sS'block_loop.thisTrial'
p8023
Nsg69
Vn
sS'block_loop.thisTrialN'
p8024
I0
sg39
F1.7335118436012635
sg34
g752
(S'\x07\xdf\n\x1a\x0f-3\x0f\x07\xa8'
tRp8025
sa(dp8026
S'trial_loop.thisTrialN'
p8027
I118
sg6370
g6391
sS'block_loop.thisIndex'
p8028
g6364
sg38
S'right'
p8029
sg58
g62
sS'trial_loop.thisN'
p8030
I118
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8031
g59
(g98
S'v\x00\x00\x00'
tRp8032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8033
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8034
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8035
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8036
Nsg69
Vn
sS'block_loop.thisTrialN'
p8037
I0
sg39
F1.6834221513154262
sg34
g752
(S'\x07\xdf\n\x1a\x0f-:\x0bJ\xa0'
tRp8038
sa(dp8039
S'trial_loop.thisTrialN'
p8040
I119
sg6370
g6687
sS'block_loop.thisIndex'
p8041
g6364
sg38
S'right'
p8042
sg58
g62
sS'trial_loop.thisN'
p8043
I119
sg33
g6663
sg63
g64
sS'trial_loop.thisIndex'
p8044
g59
(g98
S'w\x00\x00\x00'
tRp8045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8046
I0
sg6379
g6694
sS'block_loop.thisRepN'
p8047
I2
sg6382
g6663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8048
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p8049
Nsg69
Vn
sS'block_loop.thisTrialN'
p8050
I0
sg39
F0.63353659023414366
sg34
g752
(S'\x07\xdf\n\x1a\x0f.\x05\x07\x10\x98'
tRp8051
sa(dp8052
S'trial_loop.thisTrialN'
p8053
I120
sg6370
g6589
sS'block_loop.thisIndex'
p8054
g6364
sg38
S'right'
p8055
sg58
g62
sS'trial_loop.thisN'
p8056
I120
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8057
g59
(g98
S'x\x00\x00\x00'
tRp8058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8059
I0
sg6379
g6596
sS'block_loop.thisRepN'
p8060
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8061
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8062
Nsg69
Vn
sS'block_loop.thisTrialN'
p8063
I0
sg39
F1.2668445307090224
sg34
g752
(S'\x07\xdf\n\x1a\x0f.\x0b\x01\xec0'
tRp8064
sa(dp8065
S'trial_loop.thisTrialN'
p8066
I121
sg6370
g7111
sS'block_loop.thisIndex'
p8067
g6364
sg38
S'left'
p8068
sg58
g62
sS'trial_loop.thisN'
p8069
I121
sg33
g6566
sg63
g64
sS'trial_loop.thisIndex'
p8070
g59
(g98
S'y\x00\x00\x00'
tRp8071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8072
I0
sg6379
g7118
sS'block_loop.thisRepN'
p8073
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8074
I2
sg6384
g6566
sg55
g11
sS'block_loop.thisTrial'
p8075
Nsg69
Vn
sS'block_loop.thisTrialN'
p8076
I0
sg39
F0.9668543381303607
sg34
g752
(S'\x07\xdf\n\x1a\x0f.\x11\x06\x87\xe0'
tRp8077
sa(dp8078
S'trial_loop.thisTrialN'
p8079
I122
sg6370
g7042
sS'block_loop.thisIndex'
p8080
g6364
sg38
S'left'
p8081
sg58
g62
sS'trial_loop.thisN'
p8082
I122
sg33
g6582
sg63
g64
sS'trial_loop.thisIndex'
p8083
g59
(g98
S'z\x00\x00\x00'
tRp8084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8085
I0
sg6379
g7049
sS'block_loop.thisRepN'
p8086
I2
sg6382
g6582
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8087
I2
sg6384
g6576
sg55
g11
sS'block_loop.thisTrial'
p8088
Nsg69
Vn
sS'block_loop.thisTrialN'
p8089
I0
sg39
F0.80013331250211195
sg34
g752
(S'\x07\xdf\n\x1a\x0f.\x17\x06\x9fP'
tRp8090
sa(dp8091
S'trial_loop.thisTrialN'
p8092
I123
sg6370
g7961
sS'block_loop.thisIndex'
p8093
g6364
sg38
S'left'
p8094
sg58
g62
sS'trial_loop.thisN'
p8095
I123
sg33
g6876
sg63
g64
sS'trial_loop.thisIndex'
p8096
g59
(g98
S'{\x00\x00\x00'
tRp8097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8098
I0
sg6379
g7968
sS'block_loop.thisRepN'
p8099
I2
sg6382
g6876
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8100
I2
sg6384
g6883
sg55
g11
sS'block_loop.thisTrial'
p8101
Nsg69
Vn
sS'block_loop.thisTrialN'
p8102
I0
sg39
F0.85019905643548555
sg34
g752
(S'\x07\xdf\n\x1a\x0f.\x1d\x04\x1a\xc8'
tRp8103
sa(dp8104
S'trial_loop.thisTrialN'
p8105
I124
sg6370
g7435
sS'block_loop.thisIndex'
p8106
g6364
sg38
S'right'
p8107
sg58
g62
sS'trial_loop.thisN'
p8108
I124
sg33
g7314
sg63
g64
sS'trial_loop.thisIndex'
p8109
g59
(g98
S'|\x00\x00\x00'
tRp8110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8111
I0
sg6379
g7442
sS'block_loop.thisRepN'
p8112
I2
sg6382
g7314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8113
I2
sg6384
g7321
sg55
g11
sS'block_loop.thisTrial'
p8114
Nsg69
Vn
sS'block_loop.thisTrialN'
p8115
I0
sg39
F1.4668480659429406
sg34
g752
(S'\x07\xdf\n\x1a\x0f.#\x02I\xf0'
tRp8116
sa(dp8117
S'trial_loop.thisTrialN'
p8118
I125
sg6370
g7111
sS'block_loop.thisIndex'
p8119
g6364
sg38
S'left'
p8120
sg58
g62
sS'trial_loop.thisN'
p8121
I125
sg33
g6559
sg63
g64
sS'trial_loop.thisIndex'
p8122
g59
(g98
S'}\x00\x00\x00'
tRp8123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8124
I0
sg6379
g7118
sS'block_loop.thisRepN'
p8125
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8126
I2
sg6384
g6566
sg55
g11
sS'block_loop.thisTrial'
p8127
Nsg69
Vn
sS'block_loop.thisTrialN'
p8128
I0
sg39
F0.78354252030203497
sg34
g752
(S'\x07\xdf\n\x1a\x0f.)\t\xc4\x00'
tRp8129
sa(dp8130
S'trial_loop.thisTrialN'
p8131
I126
sg6370
g6506
sS'block_loop.thisIndex'
p8132
g6364
sg38
S'left'
p8133
sg58
g62
sS'trial_loop.thisN'
p8134
I126
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p8135
g59
(g98
S'~\x00\x00\x00'
tRp8136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8137
I0
sg6379
g6513
sS'block_loop.thisRepN'
p8138
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8139
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8140
Nsg69
Vn
sS'block_loop.thisTrialN'
p8141
I0
sg39
F1.4335051152547749
sg34
g752
(S'\x07\xdf\n\x1a\x0f./\x07\x00\xf8'
tRp8142
sa(dp8143
S'trial_loop.thisTrialN'
p8144
I127
sg6370
g7435
sS'block_loop.thisIndex'
p8145
g6364
sg38
S'right'
p8146
sg58
g62
sS'trial_loop.thisN'
p8147
I127
sg33
g7314
sg63
g64
sS'trial_loop.thisIndex'
p8148
g59
(g98
S'\x7f\x00\x00\x00'
tRp8149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8150
I0
sg6379
g7442
sS'block_loop.thisRepN'
p8151
I2
sg6382
g7314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8152
I2
sg6384
g7321
sg55
g11
sS'block_loop.thisTrial'
p8153
Nsg69
Vn
sS'block_loop.thisTrialN'
p8154
I0
sg39
F0.78352683983212046
sg34
g752
(S'\x07\xdf\n\x1a\x0f.5\x0e<\x88'
tRp8155
sa(dp8156
S'trial_loop.thisTrialN'
p8157
I128
sg6370
g6915
sS'block_loop.thisIndex'
p8158
g6364
sg38
S'left'
p8159
sg58
g62
sS'trial_loop.thisN'
p8160
I128
sg33
g6674
sg63
g64
sS'trial_loop.thisIndex'
p8161
g59
(g98
S'\x80\x00\x00\x00'
tRp8162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8163
I0
sg6379
g6922
sS'block_loop.thisRepN'
p8164
I2
sg6382
g6674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8165
I2
sg6384
g6681
sg55
g11
sS'block_loop.thisTrial'
p8166
Nsg69
Vn
sS'block_loop.thisTrialN'
p8167
I0
sg39
F0.63355084520571836
sg34
g752
(S'\x07\xdf\n\x1a\x0f.;\x0bu\x98'
tRp8168
sa(dp8169
S'trial_loop.thisTrialN'
p8170
I129
sg6370
g6572
sS'block_loop.thisIndex'
p8171
g6364
sg38
S'right'
p8172
sg58
g62
sS'trial_loop.thisN'
p8173
I129
sg33
g6582
sg63
g64
sS'trial_loop.thisIndex'
p8174
g59
(g98
S'\x81\x00\x00\x00'
tRp8175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8176
I0
sg6379
g6580
sS'block_loop.thisRepN'
p8177
I2
sg6382
g6582
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8178
I2
sg6384
g6576
sg55
g11
sS'block_loop.thisTrial'
p8179
Nsg69
Vn
sS'block_loop.thisTrialN'
p8180
I0
sg39
F0.650194095704137
sg34
g752
(S'\x07\xdf\n\x1a\x0f/\x05\x06Q0'
tRp8181
sa(dp8182
S'trial_loop.thisTrialN'
p8183
I130
sg6370
g7327
sS'block_loop.thisIndex'
p8184
g6364
sg38
S'left'
p8185
sg58
g62
sS'trial_loop.thisN'
p8186
I130
sg33
g6799
sg63
g64
sS'trial_loop.thisIndex'
p8187
g59
(g98
S'\x82\x00\x00\x00'
tRp8188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8189
I0
sg6379
g7334
sS'block_loop.thisRepN'
p8190
I2
sg6382
g6792
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8191
I2
sg6384
g6799
sg55
g11
sS'block_loop.thisTrial'
p8192
Nsg69
Vn
sS'block_loop.thisTrialN'
p8193
I0
sg39
F0.88354884950967971
sg34
g752
(S'\x07\xdf\n\x1a\x0f/\x0b\x01kH'
tRp8194
sa(dp8195
S'trial_loop.thisTrialN'
p8196
I131
sg6370
g7070
sS'block_loop.thisIndex'
p8197
g6364
sg38
S'right'
p8198
sg58
g62
sS'trial_loop.thisN'
p8199
I131
sg33
g6726
sg63
g64
sS'trial_loop.thisIndex'
p8200
g59
(g98
S'\x83\x00\x00\x00'
tRp8201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8202
I0
sg6379
g7077
sS'block_loop.thisRepN'
p8203
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8204
I2
sg6384
g6726
sg55
g11
sS'block_loop.thisTrial'
p8205
Nsg69
Vn
sS'block_loop.thisTrialN'
p8206
I0
sg39
F1.3168432762722659
sg34
g752
(S'\x07\xdf\n\x1a\x0f/\x11\x00\x13\x88'
tRp8207
sa(dp8208
S'trial_loop.thisTrialN'
p8209
I132
sg6370
g6788
sS'block_loop.thisIndex'
p8210
g6364
sg38
S'right'
p8211
sg58
g62
sS'trial_loop.thisN'
p8212
I132
sg33
g6792
sg63
g64
sS'trial_loop.thisIndex'
p8213
g59
(g98
S'\x84\x00\x00\x00'
tRp8214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8215
I0
sg6379
g6796
sS'block_loop.thisRepN'
p8216
I2
sg6382
g6792
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8217
I2
sg6384
g6799
sg55
g11
sS'block_loop.thisTrial'
p8218
Nsg69
Vn
sS'block_loop.thisTrialN'
p8219
I0
sg39
F0.66677719021936355
sg34
g752
(S'\x07\xdf\n\x1a\x0f/\x17\x05f\xd0'
tRp8220
sa(dp8221
S'trial_loop.thisTrialN'
p8222
I133
sg6370
g6943
sS'block_loop.thisIndex'
p8223
g6364
sg38
S'right'
p8224
sg58
g62
sS'trial_loop.thisN'
p8225
I133
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p8226
g59
(g98
S'\x85\x00\x00\x00'
tRp8227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8228
I0
sg6379
g6950
sS'block_loop.thisRepN'
p8229
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8230
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p8231
Nsg69
Vn
sS'block_loop.thisTrialN'
p8232
I0
sg39
F1.3334323578746989
sg34
g752
(S'\x07\xdf\n\x1a\x0f/\x1d\x00\xfa\x00'
tRp8233
sa(dp8234
S'trial_loop.thisTrialN'
p8235
I134
sg6370
g7463
sS'block_loop.thisIndex'
p8236
g6364
sg38
S'left'
p8237
sg58
g62
sS'trial_loop.thisN'
p8238
I134
sg33
g6632
sg63
g64
sS'trial_loop.thisIndex'
p8239
g59
(g98
S'\x86\x00\x00\x00'
tRp8240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8241
I0
sg6379
g7470
sS'block_loop.thisRepN'
p8242
I2
sg6382
g6625
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8243
I2
sg6384
g6632
sg55
g11
sS'block_loop.thisTrial'
p8244
Nsg69
Vn
sS'block_loop.thisTrialN'
p8245
I0
sg39
F0.78344701198602706
sg34
g752
(S'\x07\xdf\n\x1a\x0f/#\x06\x8b\xc8'
tRp8246
sa(dp8247
S'trial_loop.thisTrialN'
p8248
I135
sg6370
g6831
sS'block_loop.thisIndex'
p8249
g6364
sg38
S'right'
p8250
sg58
g62
sS'trial_loop.thisN'
p8251
I135
sg33
g6487
sg63
g64
sS'trial_loop.thisIndex'
p8252
g59
(g98
S'\x87\x00\x00\x00'
tRp8253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8254
I0
sg6379
g6838
sS'block_loop.thisRepN'
p8255
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8256
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8257
Nsg69
Vn
sS'block_loop.thisTrialN'
p8258
I0
sg39
F0.61687252747469756
sg34
g752
(S'\x07\xdf\n\x1a\x0f/)\x03\xc4\xd8'
tRp8259
sa(dp8260
S'trial_loop.thisTrialN'
p8261
I136
sg6370
g6638
sS'block_loop.thisIndex'
p8262
g6364
sg38
S'right'
p8263
sg58
g62
sS'trial_loop.thisN'
p8264
I136
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8265
g59
(g98
S'\x88\x00\x00\x00'
tRp8266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8267
I0
sg6379
g6645
sS'block_loop.thisRepN'
p8268
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8269
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8270
Nsg69
Vn
sS'block_loop.thisTrialN'
p8271
I0
sg39
F0.81682274911145214
sg34
g752
(S'\x07\xdf\n\x1a\x0f/.\r\xa8\x18'
tRp8272
sa(dp8273
S'trial_loop.thisTrialN'
p8274
I137
sg6370
g7126
sS'block_loop.thisIndex'
p8275
g6364
sg38
S'left'
p8276
sg58
g62
sS'trial_loop.thisN'
p8277
I137
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p8278
g59
(g98
S'\x89\x00\x00\x00'
tRp8279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8280
I0
sg6379
g7133
sS'block_loop.thisRepN'
p8281
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8282
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p8283
Nsg69
Vn
sS'block_loop.thisTrialN'
p8284
I0
sg39
F0.74997491124850058
sg34
g752
(S'\x07\xdf\n\x1a\x0f/4\x0b^('
tRp8285
sa(dp8286
S'trial_loop.thisTrialN'
p8287
I138
sg6370
g6521
sS'block_loop.thisIndex'
p8288
g6364
sg38
S'left'
p8289
sg58
g62
sS'trial_loop.thisN'
p8290
I138
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p8291
g59
(g98
S'\x8a\x00\x00\x00'
tRp8292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8293
I0
sg6379
g6529
sS'block_loop.thisRepN'
p8294
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8295
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p8296
Nsg69
Vn
sS'block_loop.thisTrialN'
p8297
I0
sg39
F0.80011021944665117
sg34
g752
(S'\x07\xdf\n\x1a\x0f/:\x08\x1e '
tRp8298
sa(dp8299
S'trial_loop.thisTrialN'
p8300
I139
sg6370
g7042
sS'block_loop.thisIndex'
p8301
g6364
sg38
S'left'
p8302
sg58
g62
sS'trial_loop.thisN'
p8303
I139
sg33
g6582
sg63
g64
sS'trial_loop.thisIndex'
p8304
g59
(g98
S'\x8b\x00\x00\x00'
tRp8305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8306
I0
sg6379
g7049
sS'block_loop.thisRepN'
p8307
I2
sg6382
g6582
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8308
I2
sg6384
g6576
sg55
g11
sS'block_loop.thisTrial'
p8309
Nsg69
Vn
sS'block_loop.thisTrialN'
p8310
I0
sg39
F1.1001890779543828
sg34
g752
(S'\x07\xdf\n\x1a\x0f0\x04\x05\x99\x98'
tRp8311
sa(dp8312
S'trial_loop.thisTrialN'
p8313
I140
sg6370
g6638
sS'block_loop.thisIndex'
p8314
g6364
sg38
S'right'
p8315
sg58
g62
sS'trial_loop.thisN'
p8316
I140
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8317
g59
(g98
S'\x8c\x00\x00\x00'
tRp8318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8319
I0
sg6379
g6645
sS'block_loop.thisRepN'
p8320
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8321
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8322
Nsg69
Vn
sS'block_loop.thisTrialN'
p8323
I0
sg39
F0.683440112579774
sg34
g752
(S'\x07\xdf\n\x1a\x0f0\n\x07\x95h'
tRp8324
sa(dp8325
S'trial_loop.thisTrialN'
p8326
I141
sg6370
g7961
sS'block_loop.thisIndex'
p8327
g6364
sg38
S'left'
p8328
sg58
g62
sS'trial_loop.thisN'
p8329
I141
sg33
g6876
sg63
g64
sS'trial_loop.thisIndex'
p8330
g59
(g98
S'\x8d\x00\x00\x00'
tRp8331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8332
I0
sg6379
g7968
sS'block_loop.thisRepN'
p8333
I2
sg6382
g6876
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8334
I2
sg6384
g6883
sg55
g11
sS'block_loop.thisTrial'
p8335
Nsg69
Vn
sS'block_loop.thisTrialN'
p8336
I0
sg39
F0.68345180165761121
sg34
g752
(S'\x07\xdf\n\x1a\x0f0\x10\x03(\x98'
tRp8337
sa(dp8338
S'trial_loop.thisTrialN'
p8339
I142
sg6370
g6670
sS'block_loop.thisIndex'
p8340
g6364
sg38
S'right'
p8341
sg58
g62
sS'trial_loop.thisN'
p8342
I142
sg33
g6674
sg63
g64
sS'trial_loop.thisIndex'
p8343
g59
(g98
S'\x8e\x00\x00\x00'
tRp8344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8345
I0
sg6379
g6678
sS'block_loop.thisRepN'
p8346
I2
sg6382
g6674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8347
I2
sg6384
g6681
sg55
g11
sS'block_loop.thisTrial'
p8348
Nsg69
Vn
sS'block_loop.thisTrialN'
p8349
I0
sg39
F0.96725034126393439
sg34
g752
(S'\x07\xdf\n\x1a\x0f0\x15\x0e8\xa0'
tRp8350
sa(dp8351
S'trial_loop.thisTrialN'
p8352
I143
sg6370
g6521
sS'block_loop.thisIndex'
p8353
g6364
sg38
S'left'
p8354
sg58
g62
sS'trial_loop.thisN'
p8355
I143
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p8356
g59
(g98
S'\x8f\x00\x00\x00'
tRp8357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8358
I0
sg6379
g6529
sS'block_loop.thisRepN'
p8359
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8360
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p8361
Nsg69
Vn
sS'block_loop.thisTrialN'
p8362
I0
sg39
F0.83344205125649751
sg34
g752
(S'\x07\xdf\n\x1a\x0f0\x1b\x0e\x15x'
tRp8363
sa(dp8364
S'trial_loop.thisTrialN'
p8365
I144
sg6370
g7070
sS'block_loop.thisIndex'
p8366
g6364
sg38
S'right'
p8367
sg58
g62
sS'trial_loop.thisN'
p8368
I144
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p8369
g59
(g98
S'\x90\x00\x00\x00'
tRp8370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8371
I0
sg6379
g7077
sS'block_loop.thisRepN'
p8372
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8373
I2
sg6384
g6726
sg55
g11
sS'block_loop.thisTrial'
p8374
Nsg69
Vn
sS'block_loop.thisTrialN'
p8375
I0
sg39
F1.2834116596550302
sg34
g752
(S'\x07\xdf\n\x1a\x0f0!\x0c\x06 '
tRp8376
sa(dp8377
S'trial_loop.thisTrialN'
p8378
I145
sg6370
g7126
sS'block_loop.thisIndex'
p8379
g6364
sg38
S'left'
p8380
sg58
g62
sS'trial_loop.thisN'
p8381
I145
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p8382
g59
(g98
S'\x91\x00\x00\x00'
tRp8383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8384
I0
sg6379
g7133
sS'block_loop.thisRepN'
p8385
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8386
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p8387
Nsg69
Vn
sS'block_loop.thisTrialN'
p8388
I0
sg39
F0.7335540383191983
sg34
g752
(S'\x07\xdf\n\x1a\x0f0(\x01\x9e\x10'
tRp8389
sa(dp8390
S'trial_loop.thisTrialN'
p8391
I146
sg6370
g6732
sS'block_loop.thisIndex'
p8392
g6364
sg38
S'right'
p8393
sg58
g62
sS'trial_loop.thisN'
p8394
I146
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p8395
g59
(g98
S'\x92\x00\x00\x00'
tRp8396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8397
I0
sg6379
g6739
sS'block_loop.thisRepN'
p8398
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8399
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p8400
Nsg69
Vn
sS'block_loop.thisTrialN'
p8401
I0
sg39
F3.4167187448329059
sg34
g752
(S'\x07\xdf\n\x1a\x0f0-\re\xb0'
tRp8402
sa(dp8403
S'trial_loop.thisTrialN'
p8404
I147
sg6370
g6555
sS'block_loop.thisIndex'
p8405
g6364
sg38
S'right'
p8406
sg58
g62
sS'trial_loop.thisN'
p8407
I147
sg33
g6559
sg63
g64
sS'trial_loop.thisIndex'
p8408
g59
(g98
S'\x93\x00\x00\x00'
tRp8409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8410
I0
sg6379
g6563
sS'block_loop.thisRepN'
p8411
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8412
I2
sg6384
g6566
sg55
g11
sS'block_loop.thisTrial'
p8413
Nsg69
Vn
sS'block_loop.thisTrialN'
p8414
I0
sg39
F0.80024336088899872
sg34
g752
(S'\x07\xdf\n\x1a\x0f06\x05\x18\xb0'
tRp8415
sa(dp8416
S'trial_loop.thisTrialN'
p8417
I148
sg6370
g6476
sS'block_loop.thisIndex'
p8418
g6364
sg38
S'left'
p8419
sg58
g62
sS'trial_loop.thisN'
p8420
I148
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p8421
g59
(g98
S'\x94\x00\x00\x00'
tRp8422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8423
I0
sg6379
g6484
sS'block_loop.thisRepN'
p8424
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8425
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vn
sS'block_loop.thisTrialN'
p8427
I0
sg39
F0.65012538673818199
sg34
g752
(S'\x07\xdf\n\x1a\x0f1\x00\x02\x90@'
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g7070
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'right'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g7077
sS'block_loop.thisRepN'
p8437
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8438
I2
sg6384
g6726
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vn
sS'block_loop.thisTrialN'
p8440
I0
sg39
F0.95019597736063588
sg34
g752
(S'\x07\xdf\n\x1a\x0f1\x05\x0c\xe8\xb0'
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g6442
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'left'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8451
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vn
sS'block_loop.thisTrialN'
p8453
I0
sg39
F0.61689904172362731
sg34
g752
(S'\x07\xdf\n\x1a\x0f1\x0b\x0c\x87\x08'
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g7111
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'left'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g6559
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g7118
sS'block_loop.thisRepN'
p8463
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8464
I2
sg6384
g6566
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vn
sS'block_loop.thisTrialN'
p8466
I0
sg39
F0.83345259993620857
sg34
g752
(S'\x07\xdf\n\x1a\x0f1\x11\x07b\xa0'
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g6538
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'left'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g6546
sS'block_loop.thisRepN'
p8476
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8477
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vn
sS'block_loop.thisTrialN'
p8479
I0
sg39
F1.4668540530310565
sg34
g752
(S'\x07\xdf\n\x1a\x0f1\x17\x05W0'
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g6476
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'left'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g6484
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8490
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vn
sS'block_loop.thisTrialN'
p8492
I0
sg39
F0.88370365851005772
sg34
g752
(S'\x07\xdf\n\x1a\x0f1\x1d\x0c\xcdX'
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g7042
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'left'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6576
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g7049
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6582
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8503
I2
sg6384
g6576
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vn
sS'block_loop.thisTrialN'
p8505
I0
sg39
F1.1667595140534104
sg34
g752
(S'\x07\xdf\n\x1a\x0f1#\x0b\xb4\x18'
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g7933
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'right'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g7940
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8516
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vn
sS'block_loop.thisTrialN'
p8518
I0
sg39
F0.80001186013669212
sg34
g752
(S'\x07\xdf\n\x1a\x0f1)\x0e\xa6\x00'
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g6572
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'left'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g6582
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g6580
sS'block_loop.thisRepN'
p8528
I2
sg6382
g6582
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8529
I2
sg6384
g6576
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vn
sS'block_loop.thisTrialN'
p8531
I0
sg39
F0.81677798849796091
sg34
g752
(S'\x07\xdf\n\x1a\x0f1/\x0c!x'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g6521
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'right'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6525
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g6529
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8542
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vn
sS'block_loop.thisTrialN'
p8544
I0
sg39
F0.58355209964338428
sg34
g752
(S'\x07\xdf\n\x1a\x0f15\t\xd7\x88'
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g7042
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'right'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g6576
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g7049
sS'block_loop.thisRepN'
p8554
I2
sg6382
g6582
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8555
I2
sg6384
g6576
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vn
sS'block_loop.thisTrialN'
p8557
I0
sg39
F1.0335259845332985
sg34
g752
(S'\x07\xdf\n\x1a\x0f1;\x03\xfb\x88'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g6732
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'right'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6532
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g6739
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8568
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vn
sS'block_loop.thisTrialN'
p8570
I0
sg39
F1.2836294756343705
sg34
g752
(S'\x07\xdf\n\x1a\x0f2\x05\x05\x05('
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g7933
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'right'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g7940
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8581
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vn
sS'block_loop.thisTrialN'
p8583
I0
sg39
F0.71675255762693268
sg34
g752
(S'\x07\xdf\n\x1a\x0f2\x0b\t\xdfX'
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g6391
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'right'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8593
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8594
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vn
sS'block_loop.thisTrialN'
p8596
I0
sg39
F1.5168137399696207
sg34
g752
(S'\x07\xdf\n\x1a\x0f2\x11\x05\xeb\xa0'
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g6604
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'right'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g6612
sS'block_loop.thisRepN'
p8606
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8607
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vn
sS'block_loop.thisTrialN'
p8609
I0
sg39
F0.60013234316465969
sg34
g752
(S'\x07\xdf\n\x1a\x0f2\x17\x0eW\xe0'
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g6621
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'right'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g6625
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g6629
sS'block_loop.thisRepN'
p8619
I2
sg6382
g6625
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8620
I2
sg6384
g6632
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vn
sS'block_loop.thisTrialN'
p8622
I0
sg39
F1.183407896342942
sg34
g752
(S'\x07\xdf\n\x1a\x0f2\x1d\x08\xba`'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g6521
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'left'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g6532
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g6529
sS'block_loop.thisRepN'
p8632
I2
sg6382
g6525
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8633
I2
sg6384
g6532
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vn
sS'block_loop.thisTrialN'
p8635
I0
sg39
F1.0502148509440303
sg34
g752
(S'\x07\xdf\n\x1a\x0f2#\x0c%`'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g6831
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'right'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g6838
sS'block_loop.thisRepN'
p8645
I2
sg6382
g6480
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8646
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vn
sS'block_loop.thisTrialN'
p8648
I0
sg39
F0.60025294023125753
sg34
g752
(S'\x07\xdf\n\x1a\x0f2)\rm\x80'
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g6872
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'right'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6876
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g6880
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6876
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8659
I2
sg6384
g6883
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vn
sS'block_loop.thisTrialN'
p8661
I0
sg39
F0.63330052789024194
sg34
g752
(S'\x07\xdf\n\x1a\x0f2/\x07\xd0\x00'
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g6621
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'right'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g6625
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g6629
sS'block_loop.thisRepN'
p8671
I2
sg6382
g6625
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8672
I2
sg6384
g6632
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vn
sS'block_loop.thisTrialN'
p8674
I0
sg39
F1.100098986528792
sg34
g752
(S'\x07\xdf\n\x1a\x0f25\x02\xab\x98'
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g7381
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'left'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g6962
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g7388
sS'block_loop.thisRepN'
p8684
I2
sg6382
g6962
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8685
I2
sg6384
g6969
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vn
sS'block_loop.thisTrialN'
p8687
I0
sg39
F0.71677251458913815
sg34
g752
(S'\x07\xdf\n\x1a\x0f2;\x04\xa7h'
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g6872
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'right'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g6883
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g6880
sS'block_loop.thisRepN'
p8697
I2
sg6382
g6876
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8698
I2
sg6384
g6883
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vn
sS'block_loop.thisTrialN'
p8700
I0
sg39
F0.66678032631352835
sg34
g752
(S'\x07\xdf\n\x1a\x0f3\x05\x00\xf20'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g7327
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'left'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6792
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g7334
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6792
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8711
I2
sg6384
g6799
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vn
sS'block_loop.thisTrialN'
p8713
I0
sg39
F0.78354480109737779
sg34
g752
(S'\x07\xdf\n\x1a\x0f3\n\x0b\x89 '
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g7933
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'right'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g7940
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8724
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vn
sS'block_loop.thisTrialN'
p8726
I0
sg39
F1.2999676697227187
sg34
g752
(S'\x07\xdf\n\x1a\x0f3\x10\x08\xc6\x18'
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g7961
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'left'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6883
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g7968
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6876
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8737
I2
sg6384
g6883
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vn
sS'block_loop.thisTrialN'
p8739
I0
sg39
F0.63354001142670313
sg34
g752
(S'\x07\xdf\n\x1a\x0f3\x16\r\xda\xe0'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g6943
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'right'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g6950
sS'block_loop.thisRepN'
p8749
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8750
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vn
sS'block_loop.thisTrialN'
p8752
I0
sg39
F1.0834477532453093
sg34
g752
(S'\x07\xdf\n\x1a\x0f3\x1c\x08\xb6x'
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g6589
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'right'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g6596
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8763
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vn
sS'block_loop.thisTrialN'
p8765
I0
sg39
F1.8500131715945827
sg34
g752
(S'\x07\xdf\n\x1a\x0f3"\nw\xb0'
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g6391
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'right'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8776
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vn
sS'block_loop.thisTrialN'
p8778
I0
sg39
F0.78389148202677461
sg34
g752
(S'\x07\xdf\n\x1a\x0f3)\x08\xdd\x88'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g6943
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'right'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g6950
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8789
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vn
sS'block_loop.thisTrialN'
p8791
I0
sg39
F0.7501074824922398
sg34
g752
(S'\x07\xdf\n\x1a\x0f3/\x06\x1a\x80'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g6958
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'right'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g6962
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g6966
sS'block_loop.thisRepN'
p8801
I2
sg6382
g6962
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8802
I2
sg6384
g6969
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vn
sS'block_loop.thisTrialN'
p8804
I0
sg39
F0.60021986869469401
sg34
g752
(S'\x07\xdf\n\x1a\x0f35\x02\x9f\xe0'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g6653
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'left'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6663
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g6661
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8815
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vn
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.61678386154653708
sg34
g752
(S'\x07\xdf\n\x1a\x0f3:\x0cD\xa0'
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g6773
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'left'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g6780
sS'block_loop.thisRepN'
p8827
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8828
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vn
sS'block_loop.thisTrialN'
p8830
I0
sg39
F0.93350825134803017
sg34
g752
(S'\x07\xdf\n\x1a\x0f4\x04\x07 8'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g6604
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'right'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6615
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g6612
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8841
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vn
sS'block_loop.thisTrialN'
p8843
I0
sg39
F0.65015161588689807
sg34
g752
(S'\x07\xdf\n\x1a\x0f4\n\x06\x80\x10'
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g6988
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'left'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g6995
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8854
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vn
sS'block_loop.thisTrialN'
p8856
I0
sg39
F1.2169173451084134
sg34
g752
(S'\x07\xdf\n\x1a\x0f4\x10\x01\x96@'
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g6872
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'right'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6876
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g6880
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6876
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8867
I2
sg6384
g6883
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vn
sS'block_loop.thisTrialN'
p8869
I0
sg39
F0.68354132288459368
sg34
g752
(S'\x07\xdf\n\x1a\x0f4\x16\x05~@'
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g7327
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'left'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g6792
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g7334
sS'block_loop.thisRepN'
p8879
I2
sg6382
g6792
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8880
I2
sg6384
g6799
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vn
sS'block_loop.thisTrialN'
p8882
I0
sg39
F1.0334441609920759
sg34
g752
(S'\x07\xdf\n\x1a\x0f4\x1c\x01\x11p'
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g6988
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'left'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g6995
sS'block_loop.thisRepN'
p8892
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8893
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vn
sS'block_loop.thisTrialN'
p8895
I0
sg39
F0.61650446408748394
sg34
g752
(S'\x07\xdf\n\x1a\x0f4"\x02\x1b\x10'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g6653
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'left'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g6663
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g6661
sS'block_loop.thisRepN'
p8905
I2
sg6382
g6663
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8906
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vn
sS'block_loop.thisTrialN'
p8908
I0
sg39
F0.61677559366216883
sg34
g752
(S"\x07\xdf\n\x1a\x0f4'\x0b\xfah"
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g6506
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'left'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g6513
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8919
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vn
sS'block_loop.thisTrialN'
p8921
I0
sg39
F1.2334365773467653
sg34
g752
(S'\x07\xdf\n\x1a\x0f4-\x06\xd6\x00'
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g7435
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'right'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g7314
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g7442
sS'block_loop.thisRepN'
p8931
I2
sg6382
g7314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8932
I2
sg6384
g7321
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vn
sS'block_loop.thisTrialN'
p8934
I0
sg39
F0.80021171485077502
sg34
g752
(S'\x07\xdf\n\x1a\x0f43\n\xbe\x00'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g6670
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'right'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6674
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g6678
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8945
I2
sg6384
g6681
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vn
sS'block_loop.thisTrialN'
p8947
I0
sg39
F0.76684567110714852
sg34
g752
(S'\x07\xdf\n\x1a\x0f49\x085\x90'
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g6555
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'right'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6559
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g6563
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6559
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8958
I2
sg6384
g6566
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vn
sS'block_loop.thisTrialN'
p8960
I0
sg39
F0.81675831663596909
sg34
g752
(S'\x07\xdf\n\x1a\x0f5\x03\x054\x08'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g7463
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'left'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g6632
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g7470
sS'block_loop.thisRepN'
p8970
I2
sg6382
g6625
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8971
I2
sg6384
g6632
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vn
sS'block_loop.thisTrialN'
p8973
I0
sg39
F1.7000728143993911
sg34
g752
(S'\x07\xdf\n\x1a\x0f5\t\x02\xea\x18'
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g6943
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'right'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g6549
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g6950
sS'block_loop.thisRepN'
p8983
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8984
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vn
sS'block_loop.thisTrialN'
p8986
I0
sg39
F1.1168186436789256
sg34
g752
(S'\x07\xdf\n\x1a\x0f5\x0f\x0e0\xd0'
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g6638
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'right'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g6645
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8997
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vn
sS'block_loop.thisTrialN'
p8999
I0
sg39
F0.81701005944887584
sg34
g752
(S'\x07\xdf\n\x1a\x0f5\x16\x01,\xc8'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g7961
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'left'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g6876
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g7968
sS'block_loop.thisRepN'
p9009
I2
sg6382
g6876
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9010
I2
sg6384
g6883
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vn
sS'block_loop.thisTrialN'
p9012
I0
sg39
F0.83346714000799693
sg34
g752
(S'\x07\xdf\n\x1a\x0f5\x1b\x0e%\x18'
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g6715
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'right'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g6723
sS'block_loop.thisRepN'
p9022
I2
sg6382
g6719
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9023
I2
sg6384
g6726
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vn
sS'block_loop.thisTrialN'
p9025
I0
sg39
F1.3000956793748628
sg34
g752
(S'\x07\xdf\n\x1a\x0f5!\x0c\x15\xc0'
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g7310
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'left'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g7314
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g7318
sS'block_loop.thisRepN'
p9035
I2
sg6382
g7314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9036
I2
sg6384
g7321
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vn
sS'block_loop.thisTrialN'
p9038
I0
sg39
F0.63344992000111233
sg34
g752
(S'\x07\xdf\n\x1a\x0f5(\x01\xec0'
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g6442
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'left'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g6450
sS'block_loop.thisRepN'
p9048
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9049
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vn
sS'block_loop.thisTrialN'
p9051
I0
sg39
F0.65017385364353686
sg34
g752
(S'\x07\xdf\n\x1a\x0f5-\x0c\n\x08'
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g7381
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'right'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6962
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g7388
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6962
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9062
I2
sg6384
g6969
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vn
sS'block_loop.thisTrialN'
p9064
I0
sg39
F0.83344917874183011
sg34
g752
(S'\x07\xdf\n\x1a\x0f53\x07 8'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g7310
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'left'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g7314
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g7318
sS'block_loop.thisRepN'
p9074
I2
sg6382
g7314
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9075
I2
sg6384
g7321
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vn
sS'block_loop.thisTrialN'
p9077
I0
sg39
F1.0501766476181729
sg34
g752
(S'\x07\xdf\n\x1a\x0f59\x05O`'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g7933
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'right'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g7940
sS'block_loop.thisRepN'
p9087
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9088
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vn
sS'block_loop.thisTrialN'
p9090
I0
sg39
F0.58343378337212926
sg34
g752
(S'\x07\xdf\n\x1a\x0f6\x03\x06\x97\x80'
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vr
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vn
sa(dp9098
g63
g64
sg43
I49
sg56
Vr
sg57
Vn
sg42
I551
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp9099
g63
g64
sg43
I49
sg55
g11
sg56
Vr
sg45
F0.64000000000000001
sg42
I551
sg49
F0.01
sg57
Vn
sg58
g62
sg44
I01
sg48
I25
sg47
g686
sg51
F29.869999999999997
sg46
F0.65999999999999948
sg65
g66
sg67
g68
sg50
I0
sg69
Vn
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I83102832
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'33\xb3?\x85\xeb\x91?\x00\x00\xc0?\x14\xaeG?)\\\x8f?q=\x8a?\xe1z\xd4?\x00\x00\x00\x00\x00\x00\x00\x0033\xb3?\\\x8fB?\xf6(\\?R\xb8\x9e?\x14\xaeG?\xaeGa?\x00\x00\x00\x00\x9a\x99\x99>=\n\xd7>\x9a\x99\x99?H\xe1z?\xb8\x1e\x05?\xcd\xcc\xcc=\xcd\xccL>\x14\xaeG?\xc3\xf5(?\x85\xeb\x91?{\x14\xae>\x00\x00\x00\x00\x1f\x85\xab?\x00\x00\x00\x00\xf6(\x9c?\xb8\x1e\xc5?\x00\x00\x00\x00\x14\xae\xc7?\n\xd7#?\x1f\x85\xab?H\xe1z?H\xe1z?\xecQ8>=\nW?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S'1\x08\x98@T\xe3\xad@B`\x9d@\xaa\xf1fA!\xb0:@\xbaI\xe4@\xbaID@\x96C#@\xbaI\x14@\xe9&\x91?^\xba\xf9?/\xdd<@\xee|\x8f@b\x10@@P\x8d\xf7?!\xb0j@\xdb\xf9\x1e@\xbaI4@\x87\x16\xa1@!\xb0:@\xbaI\x8c@D\x8b\xb8@\xdb\xf9>@B`\xb5?\x0e-"@d;\x83@\xa8\xc6+@u\x93(@\xdb\xf9\x1e@u\x93X@\xbaI$@d;\x83@!\xb0\x1a@w\xbe\xd3@\xcb\xa1\x99@w\xbe\x83@b\x10\x00@\xb2\x9d\x11A\xa8\xc6K@b\x10P@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x08B\x00\x00@A\x00\x00\xe8A\x00\x00\x00\x00\x00\x00\x04B\x00\x00\x80?\x00\x00\xa0A\x00\x00\x00B\x00\x00\xa8A\x00\x00\xd8A\x00\x00\xc8A\x00\x00\xf0A\x00\x00\x00A\x00\x00@@\x00\x000A\x00\x00\x14B\x00\x00\xa0@\x00\x00\x18B\x00\x00\x0cB\x00\x00\xd0A\x00\x00\x90A\x00\x00\xc0@\x00\x00\x88A\x00\x00`A\x00\x00\x80A\x00\x00\x80@\x00\x00\xe0@\x00\x00pA\x00\x00\x10A\x00\x00 A\x00\x00PA\x00\x00\x1cB\x00\x00\x10B\x00\x00\xf8A\x00\x00\xe0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\x98A\x00\x00\xb0A\x00\x00\x00@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'ff\xe6?\x00\x00\xc0?33\xf3?\x9a\x99\xd9?\x9a\x99\xd9?\x00\x00\xc0?33\xf3?\x00\x00\x00@ff\xe6?33\xb3?ff\xe6?33\xb3?\xcd\xcc\xcc?33\xb3?33\xb3?\x9a\x99\xd9?\x00\x00\xc0?\xcd\xcc\xcc?\x9a\x99\x99?33\xb3?33\xb3?\x00\x00\xc0?\x00\x00\xc0?\x00\x00\x80?ff\xa6?33\xb3?33\xb3?33\xf3?\x9a\x99\x99?\x9a\x99\xd9?\x9a\x99\xd9?ff\xa6?\x9a\x99\xd9?\xcd\xcc\xcc?\x9a\x99\xd9?\xcd\xcc\xcc?33\xf3?\x00\x00\x00@\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'\x03\x00\x00\x00\x05\x00\x00\x00\'\x00\x00\x00\r\x00\x00\x00\x19\x00\x00\x00\x10\x00\x00\x00\x15\x00\x00\x00\x1a\x00\x00\x00\x0c\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x0e\x00\x00\x00\x01\x00\x00\x00\x1e\x00\x00\x00\x17\x00\x00\x00\x1b\x00\x00\x00\x18\x00\x00\x00\x16\x00\x00\x00\x14\x00\x00\x00%\x00\x00\x00\x06\x00\x00\x00\x08\x00\x00\x00&\x00\x00\x00#\x00\x00\x00$\x00\x00\x00\n\x00\x00\x00\x13\x00\x00\x00\t\x00\x00\x00"\x00\x00\x00\x02\x00\x00\x00\x0b\x00\x00\x00!\x00\x00\x00\x07\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00 \x00\x00\x00\x0f\x00\x00\x00\x11\x00\x00\x00\x1f\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g340
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g186
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g305
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g102
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g333
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g109
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g242
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g326
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g249
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g291
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g277
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g312
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g158
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g123
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g179
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g361
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g137
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g368
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g347
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g284
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g228
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g144
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g221
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g200
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g214
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g130
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g151
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g207
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g165
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g172
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g193
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g375
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g354
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g319
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g298
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g263
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g270
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g235
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g256
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g116
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I83102832
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'33\xb3@\x00\x00\xc0@\x00\x00`@\x00\x00\x00@\x00\x00\xa0@\x00\x00\xc0@\x00\x00 @\x00\x00\xc0@\x00\x00\xc0@\x00\x00 @33\xb3?\x00\x00\x90@\xcd\xcc\xac@\x00\x00\xc0@33\x83@ff\xa6@\xcd\xcc\xac@\xcd\xcc\x9c@ff\x96@\x00\x00\xa0@\x9a\x99\xa9@\x00\x00\xc0@ff\xe6?\x9a\x99Y@\x9a\x99\xd9?\x00\x00\xc0@\xcd\xcc\x9c@\x00\x00\xc0@ff\xa6@\xcd\xcc\x9c@\x00\x00\xc0@\x00\x00@@\x00\x00\xc0@\x00\x00\xc0@33\x13@\x00\x00\x80@\xcd\xcc\xac@\x00\x00\x80@\x00\x00\xa0@33s@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S'\x7f#\xa2?\xa0\xbb\x9b?\x0f\xe8\xce?Pzw@?}\xb7?Z\x8a\xa8?[\x01\x88@\xdb\x02@@\xc9\x12\xb1?o\xbc{@\xe1\x99%A\x10\xc0\x9b?\xe3$\xe2?!\xf2\x8e?\xdb\xd0\xac?\xa1X\x95?\x89\x12\xa0?b\x03\xa0?\x8c\xf5\x8e?y\x88\x88?\xf4HD?p\xcf\x8c?\x18\xbd\x0b@XD\x14@!\xbd\xfb?=h\x86?\xcc#\xa2?y1b?\x8b{7?QV\x85@\xe2\x8cH?\xd5\xe7\xce?\xf6\x12\x91?wq\xa6?\xc7{\xf7?$\x14\xf1?\xb7\xb2\x8a?B\xad*@\x04\xe2]?M$\xa2?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80@\x00\x00`@33S@\xcd\xccl@ffF@\x00\x00\x80@\xcd\xccL@333@\x9a\x99y@33S@33\x83@\x9a\x99Y@\x00\x00`@\x00\x00`@33\x83@\x00\x00`@33S@\xcd\xccl@33\x83@33s@\x9a\x99y@ff\x86@\xcd\xccl@fff@\xcd\xccL@ffF@\x9a\x99Y@\x00\x00\x80@\xcd\xccl@\x9a\x999@fff@\x9a\x99Y@\x00\x00`@ffF@33\x83@ffF@\x9a\x99y@\x00\x00@@\x00\x00@@\xcd\xccl@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\xc0C\x9e\x0e`e\xd3\x0e\xc0\x06\xd3\x0e\xe0\x08\xd3\x0e\x80\x06\xd3\x0e\xa0\x02\xd3\x0e\x00\n\xd3\x0e\xa0\x04\xd3\x0e\xe0o\xd7\x0e\xa0\t\xd3\x0e\xa0o\xd7\x0e\xc0o\xd7\x0e`\t\xd3\x0e`\x02\xd3\x0e\xa0j\xd3\x0e\xc0j\xd3\x0e\x80f\xd3\x0e@c\xd3\x0e`i\xd3\x0e@e\xd3\x0e\x00e\xd3\x0e\xe0d\xd3\x0e e\xd3\x0e\xa0k\xd3\x0e\x00l\xd3\x0e\x80d\xd3\x0e\xa0\x11\xd8\x0e\xe0\xd6\xe4\x0e\x00\xd4\xe4\x0e\xc0\xd8\xe4\x0e\xc0\xd7\xe4\x0e`\xd2\xe4\x0e\xa0\xd3\xe4\x0e\xc0\xd5\xe4\x0e\xa0\xd2\xe4\x0e\x80\xd5\xe4\x0e\xe0\xd7\xe4\x0e \xd6\xe4\x0e`\xd5\xe4\x0e\xe0\xd5\xe4\x0e'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S'\xcb\xa1\xa1@\xdb\xf9\xae?\xbaI\x14@\xc9v\x16@\x83\xc0\x8a?P\x8d7?P\x8d\x97?\x89A@?\xe9&\x11?\xa8\xc6K@\xc9v6@\x91\xed\x8c?B`5@\x0e-2@!\xb0\x1a@\xd3M\xa2?\x91\xed\xac?+\x87\xe6?u\x93\xe8?\xa8\xc6\xbb?u\x93\xc8?\x83\xc0*?\x83\xc0\xaa?\xbaI\x04@\x1dZ\xe4?\xd3M"?\x83\xc0*?\x1dZ\x04?u\x93\x08@\x83\xc0j?\x06\x81\x15?P\x8dw?\x0c\x02+?\xd3M"?\xe9&\x91?T\xe3=@\xc5 \x80?\xbcts?\x83\xc0\xca?\xcb\xa1\x81@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I83102832
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'pP\x06\x0f`Q\x06\x0f\xc0P\x06\x0f L\xf5\x0e\x98P\x06\x0f\xe8P\x06\x0f\xc0P\x06\x0f\xc0K\xf5\x0e\xf0K\xf5\x0e\xe8P\x06\x0f03\x06\x0f\x10Q\x06\x0f\xf0K\xf5\x0e\xb0Q\x06\x0f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S'\x18\x8b\xf2\x04\xa8\x82\xf2\x04X\x8a\xf2\x04\xf0\x8b\xf2\x04\x00\x85\xf2\x04\xc8\x8f\xf2\x04\x80\x86\xf2\x04x\x82\xf2\x04\xf8\x80\xf2\x04x\x88\xf2\x04\xe8\x8d\xf2\x048\x8c\xf2\x04\xb0\x83\xf2\x04\xa8\x8b\xf2\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g743
sg82
g777
sg83
g748
sg84
g781
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g755
sg82
g786
sg83
g760
sg84
g790
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g795
sg82
g796
sg83
g800
sg84
g801
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g766
sg82
g806
sg83
g771
sg84
g810
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g815
sg82
g816
sg83
g820
sg84
g821
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g826
sg82
g827
sg83
g831
sg84
g832
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g795
sg82
g837
sg83
g800
sg84
g841
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g815
sg82
g846
sg83
g820
sg84
g850
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g855
sg82
g856
sg83
g860
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g826
sg82
g866
sg83
g831
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g855
sg82
g875
sg83
g860
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I83102832
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I83102832
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S'\xd0\xfa\x0e\x0f8a\x10\x0f\xc8G\x10\x0f8a\x10\x0f`a\x10\x0fpH\x10\x0f\x00\xfb\x0e\x0f\xd0\xfa\x0e\x0f\x88a\x10\x0f\xb0a\x10\x0f\xd8a\x10\x0f\xf0\xfb\x0e\x0f\xd0\xfa\x0e\x0f8H\x10\x0fpH\x10\x0f@c\x10\x0f@"\xd6\x0e(b\x10\x0f0\xfb\x0e\x0f\xa0+\xd6\x0eP\xfc\x0e\x0f\xb0a\x10\x0f\xe0*\xd6\x0e\x80\xfc\x0e\x0f8a\x10\x0fPb\x10\x0f\xa0+\xd6\x0e8H\x10\x0f8a\x10\x0f0\xfb\x0e\x0f\xd0\xfa\x0e\x0f`*\xd5\x0e\xd8a\x10\x0f\x00b\x10\x0f8a\x10\x0f`\xfb\x0e\x0f\xb0a\x10\x0fpH\x10\x0f\xd8a\x10\x0f\x00\xfb\x0e\x0f`\xfb\x0e\x0f\xc8G\x10\x0f8H\x10\x0f`\xfb\x0e\x0f\xc8G\x10\x0f8H\x10\x0f`\xfb\x0e\x0f`a\x10\x0f`*\xd5\x0e\xa0+\xd6\x0e\xd8a\x10\x0f\xb0a\x10\x0f\xb0\xfc\x0e\x0f(b\x10\x0f0\xfb\x0e\x0f`a\x10\x0f8H\x10\x0f\xa0+\xd6\x0e(b\x10\x0f\xc8G\x10\x0f8H\x10\x0f`\xfb\x0e\x0f\x00H\x10\x0fPb\x10\x0f\xc8G\x10\x0f\xd8a\x10\x0f\xd0\xfa\x0e\x0f8a\x10\x0f\xb0a\x10\x0f`\xfb\x0e\x0f\x00H\x10\x0f`*\xd5\x0e\xe0*\xd6\x0e8H\x10\x0f\x88a\x10\x0f0\xfb\x0e\x0fhc\x10\x0f\xe0*\xd6\x0e`*\xd5\x0e\xd8a\x10\x0f\xb0a\x10\x0f\x00\xfb\x0e\x0f`*\xd5\x0e\x00\xfb\x0e\x0f\xa0+\xd6\x0e\x88a\x10\x0f\x18I\x10\x0f\x00b\x10\x0f\xe0*\xd6\x0ePb\x10\x0f\x00H\x10\x0fxb\x10\x0f\xf0\xfb\x0e\x0fxb\x10\x0f`*\xd5\x0e0\xfb\x0e\x0fxb\x10\x0f\x88a\x10\x0f\xa0+\xd6\x0e\xe0\xfc\x0e\x0f\xc8G\x10\x0f8H\x10\x0f\xb0a\x10\x0f\xd8a\x10\x0f\x88a\x10\x0f(b\x10\x0f\xc8G\x10\x0f\xa0+\xd6\x0exb\x10\x0f\x90\xfb\x0e\x0f`a\x10\x0f@"\xd6\x0exb\x10\x0f\xe0*\xd6\x0ehc\x10\x0fpH\x10\x0f\xc0 \xd5\x0exb\x10\x0f\x90c\x10\x0f\x00b\x10\x0f\xd0\xfa\x0e\x0f\x88a\x10\x0f\xd8a\x10\x0fPb\x10\x0f\xe0*\xd6\x0e(b\x10\x0fPb\x10\x0fxb\x10\x0f\x00b\x10\x0f\xe0*\xd6\x0e0\xfb\x0e\x0fPb\x10\x0f`*\xd5\x0e`\xfb\x0e\x0f`a\x10\x0f\xd8a\x10\x0f`a\x10\x0f8a\x10\x0f\x00\xfb\x0e\x0f\xa0+\xd6\x0e\xd0\xfa\x0e\x0f(b\x10\x0f@"\xd6\x0e\x00H\x10\x0f\x00b\x10\x0f\x88a\x10\x0f\xa0+\xd6\x0e\x00\xfb\x0e\x0f\xe0*\xd6\x0ePb\x10\x0f8H\x10\x0f\xd0\xfa\x0e\x0fPb\x10\x0f \xfc\x0e\x0f8a\x10\x0f0\xfb\x0e\x0f@"\xd6\x0e \xfc\x0e\x0f\xa8H\x10\x0f\x80&\xd5\x0e0\xfb\x0e\x0f@"\xd6\x0e\x00b\x10\x0f\xe0*\xd6\x0e`a\x10\x0f\x00b\x10\x0f\xb0a\x10\x0f(b\x10\x0f`\xfb\x0e\x0f\xd0\xfa\x0e\x0f\xe0\xfc\x0e\x0f\x00H\x10\x0f`*\xd5\x0e\x00H\x10\x0f8H\x10\x0f@"\xd6\x0e\x00\xfb\x0e\x0f\xb0\xfc\x0e\x0f\x00b\x10\x0f@"\xd6\x0e`\xfb\x0e\x0f0\xfb\x0e\x0fxb\x10\x0f`a\x10\x0fhc\x10\x0f\xb0a\x10\x0f\x88a\x10\x0f\xc8G\x10\x0f\xe0H\x10\x0f\xb0a\x10\x0f8a\x10\x0f\x00\xfb\x0e\x0f\x00b\x10\x0f`a\x10\x0f8a\x10\x0f@"\xd6\x0e\x88a\x10\x0f`*\xd5\x0e\xe0H\x10\x0f\x88a\x10\x0f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S'\xc0\x00\xd7\x0e\x80>\x9c\x0e`?\x9c\x0e@?\x9c\x0e\xc0?\x9c\x0e@>\x9c\x0e`=\x9c\x0e\x80 \xd5\x0e\x00\xc8\xd5\x0e\xe0\xc1\xd5\x0e\xe0\xc9\xd5\x0e\xa0\xc8\xd5\x0e\x80<\x9c\x0e\x80+\x9f\x0e\x00*\x9f\x0e\xe0"\x9f\x0e\xc0.\x9f\x0e *\x9f\x0e`"\x9f\x0e`*\x9f\x0e@"\x9f\x0e@*\x9f\x0e +\x9f\x0e\xe0(\x9f\x0e@#\x9f\x0e\x80"\x9f\x0e\xc0!\x9f\x0e\x00$\x9f\x0e`$\x9f\x0e\xe0)\x9f\x0e `\xd7\x0e\xe0`\xd7\x0e`j\xd7\x0e\x00a\xd7\x0e b\xd7\x0e\xa0\xf2\x9f\x0e@\xf2\x9f\x0e@\xf0\x9f\x0e\x80\xf0\x9f\x0e\xe0\xf0\x9f\x0e\x80j\xd3\x0e\xc0n\xd7\x0e\xe0\x14\xd8\x0e\xa0\x19\xd8\x0e\xc0\x12\xd8\x0e\x00\x13\xd8\x0e\x80\x12\xd8\x0e\xe0\x19\xd8\x0e \x19\xd8\x0e\x00\x12\xd8\x0e\x80\x10\xd8\x0e\xc0\x14\xd8\x0e\xc0\x1b\xd8\x0e\xc0\x11\xd8\x0e\xc0\x1c\xd8\x0e@\x1d\xd8\x0e\x00\x18\xd8\x0e\x80\x1d\xd8\x0e\x00\x14\xd8\x0e@\x14\xd8\x0e\xa0\x1a\xd8\x0e`\x1a\xd8\x0e\x00\x19\xd8\x0e\xc0\x10\xd8\x0e \x1c\xd8\x0e@\x13\xd8\x0e\xc0\x1d\xd8\x0e\x80\x11\xd8\x0e@\x11\xd8\x0e@\x10\xd8\x0e@\x00\xd7\x0e\x00\xf1\x9f\x0e\x80\x06\xd7\x0e \x1b\xd8\x0e\x00\x11\xd8\x0e\x80\x1c\xd8\x0e\xe0\x1a\xd8\x0e@\x12\xd8\x0e\x80\x14\xd8\x0e`\x19\xd8\x0e`\x1b\xd8\x0e\xa0\x18\xd8\x0e\x00<\x9c\x0e\x80\x13\xd8\x0e`\x18\xd8\x0e\xc0`\xd7\x0e\x80:\x9c\x0e\xc0\x13\xd8\x0e`<\x9c\x0e\xc0\xd3\xd8\x0e\x00!\x9f\x0e`\xd3\xd8\x0e\xa0\xd3\xd8\x0e\x00\xd3\xd8\x0e \xf0\x9f\x0e\xa0j\x9d\x0e@`\x9d\x0e\xa0i\x9d\x0e `\x9d\x0e\x00j\x9d\x0e@f\x9d\x0e\xe0e\x9d\x0e \xc2\xd5\x0e\xe0f\x9d\x0e`f\x9d\x0e\xc0i\x9d\x0e`g\x9d\x0e\xe0`\x9d\x0e`b\x9d\x0e \x03\x9d\x0e@\x05\x9d\x0e\xe0\x00\x9d\x0e\x80\xd3\xd8\x0e`\x05\x9d\x0e \x00\x9d\x0e\xe0J\x9e\x0e\xa0K\x9e\x0e`G\x9e\x0e\xa0C\x9e\x0e\xa0I\x9e\x0e\xc0K\x9e\x0e\xa0G\x9e\x0e\x00K\x9e\x0e@I\x9e\x0e\xe0E\x9e\x0e\x80\x02\x9d\x0e\xa0\xd2\xf5\x0e\xe0\xd1\xf5\x0e@\xd0\xf5\x0e\xc0\xd2\xf5\x0e \xd3\xd8\x0e\x00\xd2\xf5\x0e \xd3\xf5\x0e\x80\xd3\xf5\x0e@\xd3\xf5\x0e\xa0\xd3\xf5\x0e\xa0\xd1\xf5\x0e\x00\xd3\xf5\x0e\xe0\xd3\xf5\x0e@\xd4\xf5\x0e`\xd0\xf5\x0e\xe0\xd4\xf5\x0e\x00J\x9e\x0e\xe0\x17\xd8\x0e\xc0\xd0\xf5\x0e\x80\xd1\xf5\x0e\xc0\xd4\xf5\x0e\x00\xd4\xf5\x0e\xc0\xd1\xf5\x0e\xc0\xd3\xf5\x0e\x80\xd5\xf5\x0e\xa0\xd5\xf5\x0e`\xd4\xf5\x0e@\xd2\xf5\x0e`\xd2\xf5\x0e \xd4\xf5\x0e\x80\xd0\xf5\x0e\x00\xd6\xf5\x0e \xd6\xf5\x0e@\xd5\xf5\x0e`\xd5\xf5\x0e\xe0\xd5\xf5\x0e\xa0\xd4\xf5\x0e\xe0\xd2\xf5\x0e\x80\xd2\xf5\x0e \xd5\xf5\x0e\xc0\xd6\xf5\x0e`\xd3\xf5\x0e\x80\xd4\xf5\x0e\xe0\xd6\xf5\x0e@\xd6\xf5\x0e`\xd6\xf5\x0e\xc0\xd7\xf5\x0e \xd0\xf5\x0e\x80\xd8\xf5\x0e\x00\xd7\xf5\x0e\xa0\xd6\xf5\x0e\xa0\xd7\xf5\x0e\x80\xd7\xf5\x0e \xd8\xf5\x0e`\xd1\xf5\x0e@\xd9\xf5\x0e\xc0\xd5\xf5\x0e\xa0\xd9\xf5\x0e@\xd8\xf5\x0e\x80\xd6\xf5\x0e`\xd8\xf5\x0e\xe0\xd9\xf5\x0e \xda\xf5\x0e`\xd9\xf5\x0e \xd9\xf5\x0e`\xd7\xf5\x0e\xc0\xd9\xf5\x0e\xa0\xd8\xf5\x0e\x00\xd5\xf5\x0e\x00\xd9\xf5\x0e \xdb\xf5\x0e`\xdb\xf5\x0e@\xd7\xf5\x0e\xc0\xd8\xf5\x0e'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S'\xceX\xb5?$k\xa6?\xcf\x9c\xb9?,i\xe6?J\xad\x99?\x06\xf5\xce?\xd9\x16\xd1?^i\xe6?\xb4\x8e\x88?Pz\x17@xl\x86?\x8d\xbe+@)6\xb3?r\xce\xac?\xae\xbc\xaa?\x94\xf0\xae?\xe5F\x14@8\xc2{?\xf5\x9f\xb9?\xd9\xaa\xf9?\x0e\xe1\xdd?P\x12!@`[\xd5?\xe6Z\xb5?\xa2\xbc\xca?|\xdb\xbd?\x94E\x14@\xbd\xee\x0e@\xdb\x8b\x88?\xda]\xd5?\x0f\xfcn?\x97\'\xe2?\x8a\xd3\xec?\x84\xabZ@\x18J\xe4?N\x8b\x08@\xcdF4@K\x8b\xc8?\xf9$\x82?\xe5\xe0\x1d@\'\xc5{?c\xae\xea?\xb92s?B\xb1*?\xfe\xee\xbd?\x80\xd1L?\xaf\xd9L?\x84D\xe4?r4\x13@q\xef\xfd?d\xf2\x8e?\xbeBD@\xe9\x0b\x91?a\x9c\xb9?\x8c\xd3\xcc?\x02\x17\xd1?$\x14Q?Z\xd0,@\x97\xbc[@\xedj\xe6?\xaf\x8dH?kbU?\xc0\xb0\x8a?\xf2\xeb\xee?\xfc\xfdn?:\r@?_RD?X4\x03@\x9c#\x12@\xad\xeb\x1d?\x94\x02\xc0?\x1a\xdc\xdd?\xad\x12\x11@\r\x89H?\xe5*\x02@e\x8b\xe8?L\x14\xb1?\xbb\x8c\xa8?\xd1\xd3L?\xbe\xd3\x8c?Rl\xc6?\xc1\xe0\xbd?1\x8b(@z[\xb5?\xee\x9f\xd9?w\xe4]?U\xfbn?\x94\x02\xa0?\xd9\x86w?\xbe\x86\xa8?2\xed>@G(\xa2?h|\xd7?\xebz\x97?\t\xce\xbb?\x87W\x15@xl\xc6?y\xd1\xcc?\xe9\xa2Y?\xcfx\x86?\x9fz\x97?\x9eF\xa4?\x84\xa9\n@\xbei\xa6?\xbeTD?\x94J\xa4?\xe8KD?\x03mf?\xbbj\x86?b\\U?>\xcd\x1c@7\xdf\r@\x99I\x84?\xb1l\x86?\xe6}\xf7?)6#@\xcf\xbe\x9b?\x0b6\x03@{\x9f\xb9?{y\x86?\x1aqf?U\x9e\x99?\xa4\xc1{?\x8f\xa5\x8a?t\x11o?!\xe4\xdd?\xfa\xf2??_\xbe\x9b?\xb1\x89(@\x80\xa2H?Wd\xe6?^,s?}i\x86?SB3?\x96\x88\xd7?z:3?`\x817?qG\xc4?\xac\x15\xb1?\xd9\x89\x97?\xeb\r@?\x1f\x02\xa0?\xf8\xa7j?\xd4\xb9\xfb?zsf?\x7f\xa6\x19?\xdf#b?&\x9cI@\x0c\xc8;?\x0f\xc7\xdb?\xae\xf4n?c~7?\xf2\x1db?\x1d\x13\x11@\xfb[\x95?F\x7f\xd7?2:s?k\xd0\x8c?\xc8\xf5.?=\xf5\x8e?\x06\xb0\xaa?\xa5\x95H?D\xd2\xec?\x08\x0e@?z\xbc\xaa?\xb2\x8b\x88?\x93$R@\xbf\xe0\xdd?\xfd("?\xa6I"?\xfc\xc8{?\x189\xf3?\xe1$"@\xff\x05\xa0?\xe9\xc6j?@(\x82?\x14j\x86?U\x06Q?\t.b?\xecbU?\xaeWs?\xc7z\xb7?\xbd\x14\x91?\x99\xe0\xfd?\x02s&?\xde,\xa2?\xbf;s?\x0e\xf5\xae?\x02of?\x1bG\x04@\xf1yU?Y6\x93?X:3?\xc7i\xa6?\x7fJ\x84?M\x8f\x88?;\x06\x80?&\xe1\x9d?:\x7f7?\xdaq&?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S' \x8f\xf2\x04h\x89\xf2\x04H.*\x05`.*\x05\xa0\'*\x05\x80&*\x05\xe8**\x05\x08/*\x058/*\x05\x00%*\x05\xb8-*\x050+*\x05\xc0%*\x05\xb0/*\x05\x90+*\x05\xe0/*\x05\x88**\x05\xa8.*\x05\xd8.*\x05\x90.*\x05x.*\x05\xc8)*\x05\xa0-*\x05 /*\x05\x98&*\x05p-*\x05H+*\x05\xe8-*\x05x+*\x05P/*\x05\x18.*\x05h/*\x05\xa0**\x05`+*\x05\x00.*\x05\xd8"*\x05\xf0(*\x05\xc0.*\x05\xf0.*\x05\xc8/*\x05\x80/*\x05\x98/*\x05\xc8\x7f\xf2\x04\xa8\xce\xf2\x03\x90{\xe1\x04\x80\x7f\xe1\x04h\x7f\xe1\x04P|\xe1\x04(}\xe1\x04xu\xe1\x04\xc0u\xe1\x04H\x82\xf2\x04@\x87\xf2\x04P\x8c\xf2\x04\xd8\x8e\xf2\x04\xc8\x83\xf2\x04\xb8\x84\xf2\x04\x88\x8d\xf2\x04X\x87\xf2\x048\x83\xf2\x04P\x89\xf2\x04\x08\x86\xf2\x04\xc8\x86\xf2\x04\xa0\x8a\xf2\x04\x90\x8e\xf2\x04\xf8\x86\xf2\x04h\x86\xf2\x04\xf0\x85\xf2\x04\x00\x88\xf2\x04\xb8\x87\xf2\x04x\x8b\xf2\x04p\x84\xf2\x04\x98\x89\xf2\x04\xa0\x84\xf2\x04\xe0\x86\xf2\x04\x98\x80\xf2\x04`\x88\xf2\x04\x18\x82\xf2\x04\x08,*\x05h,*\x05\xc8,*\x05h *\x05P *\x05\x80 *\x05\xf8 *\x05X**\x05\x98 *\x05\x10!*\x05p!*\x058 *\x05@!*\x05\xb8!*\x05\xe8!*\x05\xf8,*\x05  *\x050"*\x05P,*\x05\xf0"*\x05h#*\x05\x88!*\x05\x98#*\x05P#*\x05\xd0!*\x05H"*\x05\xb0#*\x05\xa8"*\x05\x18"*\x05\xe0#*\x05\x88$*\x05\xb8$*\x05\xe8$*\x050%*\x05X$*\x05\x18%*\x05\x80#*\x05\xe0 *\x05(!*\x05\x00"*\x05\x90%*\x05\x90"*\x05\xf0%*\x05p$*\x05@$*\x05\xa0$*\x05\xd0$*\x05\xc8&*\x05`"*\x05@\'*\x05X\'*\x05\xc8 *\x05\xe0,*\x05\x08#*\x05 #*\x05\xb0 *\x05x%*\x05\xd0\'*\x05\x00(*\x05($*\x058#*\x05\xf8#*\x05p\'*\x05\x18(*\x05P&*\x05x"*\x05\x10\'*\x05\xe0&*\x05H(*\x05(\'*\x05\x90(*\x05\xc8#*\x05\x88\'*\x05\xd8%*\x05\x08)*\x058)*\x05P)*\x05\x10$*\x05\xb0&*\x05h&*\x05h)*\x05\x98)*\x05\xc0"*\x05X!*\x05\xf8)*\x05`(*\x05\xb8\'*\x05\xf8&*\x05(**\x05 &*\x05\xa8(*\x058&*\x05 )*\x05\x08&*\x05\xb8**\x05\xe8\'*\x05\xd8(*\x05\xb0)*\x05`%*\x05\xd0**\x05\xa0!*\x05\xa8%*\x05@**\x05\xc0+*\x05p**\x05x(*\x05\xe0)*\x05\xa8+*\x05H%*\x05\x10-*\x05\xf0+*\x05\xc0(*\x050(*\x05\x80)*\x05\x00+*\x05@-*\x05(-*\x05X-*\x05\xd0-*\x05\x88-*\x05\x10**\x05\x18+*\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g966
sg894
g962
sg908
g973
sg903
g970
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g989
sg894
g979
sg908
g983
sg903
g987
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g1000
sg894
g996
sg908
g1007
sg903
g1004
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g899
sg894
g1013
sg908
g909
sg903
g1020
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g1066
sg894
g1062
sg908
g1073
sg903
g1070
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g899
sg894
g1013
sg908
g909
sg903
g1020
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g1109
sg894
g1105
sg908
g1116
sg903
g1113
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g989
sg894
g1122
sg908
g983
sg903
g1129
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g1147
sg894
g1137
sg908
g1141
sg903
g1145
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g1158
sg894
g1154
sg908
g1165
sg903
g1162
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g1175
sg894
g1171
sg908
g1182
sg903
g1179
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g1192
sg894
g1188
sg908
g1199
sg903
g1196
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g1209
sg894
g1205
sg908
g1216
sg903
g1213
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g1192
sg894
g1222
sg908
g1199
sg903
g1229
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g1254
sg894
g1250
sg908
g1261
sg903
g1258
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g1277
sg894
g1267
sg908
g1271
sg903
g1275
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g919
sg894
g1284
sg908
g926
sg903
g1291
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g1303
sg894
g1299
sg908
g1310
sg903
g1307
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g1209
sg894
g1316
sg908
g1216
sg903
g1323
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g1109
sg894
g1105
sg908
g1116
sg903
g1113
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g1192
sg894
g1222
sg908
g1199
sg903
g1229
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g1387
sg894
g1383
sg908
g1394
sg903
g1391
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g1066
sg894
g1062
sg908
g1073
sg903
g1070
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g1147
sg894
g1413
sg908
g1141
sg903
g1420
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g919
sg894
g1284
sg908
g926
sg903
g1291
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g1277
sg894
g1441
sg908
g1271
sg903
g1448
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g1049
sg894
g1456
sg908
g1056
sg903
g1463
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g989
sg894
g1122
sg908
g983
sg903
g1129
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g1066
sg894
g1484
sg908
g1073
sg903
g1491
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g1000
sg894
g996
sg908
g1007
sg903
g1004
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g1277
sg894
g1441
sg908
g1271
sg903
g1448
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g936
sg894
g1525
sg908
g943
sg903
g1532
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g1109
sg894
g1540
sg908
g1116
sg903
g1547
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g1277
sg894
g1267
sg908
g1271
sg903
g1275
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g1109
sg894
g1540
sg908
g1116
sg903
g1547
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g1277
sg894
g1267
sg908
g1271
sg903
g1275
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g966
sg894
g1607
sg908
g973
sg903
g1614
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g1387
sg894
g1383
sg908
g1394
sg903
g1391
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g1209
sg894
g1316
sg908
g1216
sg903
g1323
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g1066
sg894
g1484
sg908
g1073
sg903
g1491
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g1049
sg894
g1456
sg908
g1056
sg903
g1463
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g1303
sg894
g1674
sg908
g1310
sg903
g1681
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g1175
sg894
g1171
sg908
g1182
sg903
g1179
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g1192
sg894
g1188
sg908
g1199
sg903
g1196
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g966
sg894
g962
sg908
g973
sg903
g970
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g1109
sg894
g1105
sg908
g1116
sg903
g1113
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g1209
sg894
g1205
sg908
g1216
sg903
g1213
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g1175
sg894
g1754
sg908
g1182
sg903
g1761
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g1109
sg894
g1540
sg908
g1116
sg903
g1547
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g1277
sg894
g1441
sg908
g1271
sg903
g1448
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g989
sg894
g979
sg908
g983
sg903
g987
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g1303
sg894
g1299
sg908
g1310
sg903
g1307
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g936
sg894
g1525
sg908
g943
sg903
g1532
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g1066
sg894
g1484
sg908
g1073
sg903
g1491
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g1049
sg894
g1456
sg908
g1056
sg903
g1463
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g1277
sg894
g1441
sg908
g1271
sg903
g1448
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g989
sg894
g979
sg908
g983
sg903
g987
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g1387
sg894
g1383
sg908
g1394
sg903
g1391
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g1254
sg894
g1938
sg908
g1261
sg903
g1945
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g1109
sg894
g1105
sg908
g1116
sg903
g1113
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g1192
sg894
g1222
sg908
g1199
sg903
g1229
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g1175
sg894
g1171
sg908
g1182
sg903
g1179
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g1254
sg894
g1250
sg908
g1261
sg903
g1258
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g1387
sg894
g1383
sg908
g1394
sg903
g1391
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g1066
sg894
g1062
sg908
g1073
sg903
g1070
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g1000
sg894
g2057
sg908
g1007
sg903
g2064
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g1387
sg894
g2072
sg908
g1394
sg903
g2079
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g1000
sg894
g2057
sg908
g1007
sg903
g2064
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g1209
sg894
g1316
sg908
g1216
sg903
g1323
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g1254
sg894
g1938
sg908
g1261
sg903
g1945
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g1147
sg894
g1137
sg908
g1141
sg903
g1145
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g1254
sg894
g1250
sg908
g1261
sg903
g1258
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g1303
sg894
g1674
sg908
g1310
sg903
g1681
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g989
sg894
g979
sg908
g983
sg903
g987
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g2195
sg894
g2191
sg908
g2202
sg903
g2199
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g2195
sg894
g2221
sg908
g2202
sg903
g2228
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g1387
sg894
g2072
sg908
g1394
sg903
g2079
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g1192
sg894
g1188
sg908
g1199
sg903
g1196
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g2195
sg894
g2191
sg908
g2202
sg903
g2199
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g1032
sg894
g2275
sg908
g1039
sg903
g2282
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g1209
sg894
g1316
sg908
g1216
sg903
g1323
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g2195
sg894
g2221
sg908
g2202
sg903
g2228
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g936
sg894
g1525
sg908
g943
sg903
g1532
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g1109
sg894
g1540
sg908
g1116
sg903
g1547
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g1049
sg894
g1456
sg908
g1056
sg903
g1463
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g1066
sg894
g1062
sg908
g1073
sg903
g1070
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g1175
sg894
g1754
sg908
g1182
sg903
g1761
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g936
sg894
g1525
sg908
g943
sg903
g1532
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g1209
sg894
g1205
sg908
g1216
sg903
g1213
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g2195
sg894
g2221
sg908
g2202
sg903
g2228
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g899
sg894
g1013
sg908
g909
sg903
g1020
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g966
sg894
g1607
sg908
g973
sg903
g1614
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g1158
sg894
g1154
sg908
g1165
sg903
g1162
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g2195
sg894
g2221
sg908
g2202
sg903
g2228
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g1254
sg894
g1938
sg908
g1261
sg903
g1945
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g1175
sg894
g1171
sg908
g1182
sg903
g1179
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g989
sg894
g1122
sg908
g983
sg903
g1129
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g966
sg894
g1607
sg908
g973
sg903
g1614
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g2195
sg894
g2191
sg908
g2202
sg903
g2199
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g1387
sg894
g1383
sg908
g1394
sg903
g1391
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g1147
sg894
g1137
sg908
g1141
sg903
g1145
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g1032
sg894
g2275
sg908
g1039
sg903
g2282
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1066
sg894
g1484
sg908
g1073
sg903
g1491
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g1303
sg894
g1299
sg908
g1310
sg903
g1307
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g1254
sg894
g1250
sg908
g1261
sg903
g1258
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g1175
sg894
g1754
sg908
g1182
sg903
g1761
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g1303
sg894
g1674
sg908
g1310
sg903
g1681
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g2195
sg894
g2191
sg908
g2202
sg903
g2199
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g1147
sg894
g1413
sg908
g1141
sg903
g1420
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g1254
sg894
g1250
sg908
g1261
sg903
g1258
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g1192
sg894
g1222
sg908
g1199
sg903
g1229
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g1303
sg894
g1299
sg908
g1310
sg903
g1307
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g1387
sg894
g2072
sg908
g1394
sg903
g2079
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g1277
sg894
g1441
sg908
g1271
sg903
g1448
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g966
sg894
g1607
sg908
g973
sg903
g1614
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g1066
sg894
g1062
sg908
g1073
sg903
g1070
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g966
sg894
g962
sg908
g973
sg903
g970
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g919
sg894
g1284
sg908
g926
sg903
g1291
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g1000
sg894
g2057
sg908
g1007
sg903
g2064
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g1209
sg894
g1205
sg908
g1216
sg903
g1213
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g899
sg894
g1013
sg908
g909
sg903
g1020
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g1175
sg894
g1171
sg908
g1182
sg903
g1179
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g1158
sg894
g2862
sg908
g1165
sg903
g2869
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g989
sg894
g979
sg908
g983
sg903
g987
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g1147
sg894
g1137
sg908
g1141
sg903
g1145
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g1209
sg894
g1316
sg908
g1216
sg903
g1323
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g1000
sg894
g996
sg908
g1007
sg903
g1004
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g1254
sg894
g1938
sg908
g1261
sg903
g1945
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g1303
sg894
g1674
sg908
g1310
sg903
g1681
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g1109
sg894
g1540
sg908
g1116
sg903
g1547
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g899
sg894
g1013
sg908
g909
sg903
g1020
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g1303
sg894
g1299
sg908
g1310
sg903
g1307
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g1000
sg894
g2057
sg908
g1007
sg903
g2064
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g1192
sg894
g1188
sg908
g1199
sg903
g1196
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g1158
sg894
g1154
sg908
g1165
sg903
g1162
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1000
sg894
g2057
sg908
g1007
sg903
g2064
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g1066
sg894
g1484
sg908
g1073
sg903
g1491
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g1209
sg894
g1205
sg908
g1216
sg903
g1213
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g1192
sg894
g1188
sg908
g1199
sg903
g1196
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g1158
sg894
g2862
sg908
g1165
sg903
g2869
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g1147
sg894
g1137
sg908
g1141
sg903
g1145
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g1254
sg894
g1938
sg908
g1261
sg903
g1945
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g966
sg894
g962
sg908
g973
sg903
g970
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g1147
sg894
g1413
sg908
g1141
sg903
g1420
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g1175
sg894
g1754
sg908
g1182
sg903
g1761
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1277
sg894
g1267
sg908
g1271
sg903
g1275
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g2195
sg894
g2191
sg908
g2202
sg903
g2199
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g989
sg894
g1122
sg908
g983
sg903
g1129
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g1387
sg894
g2072
sg908
g1394
sg903
g2079
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g989
sg894
g1122
sg908
g983
sg903
g1129
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g1109
sg894
g1105
sg908
g1116
sg903
g1113
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g1158
sg894
g2862
sg908
g1165
sg903
g2869
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g1000
sg894
g996
sg908
g1007
sg903
g1004
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g1303
sg894
g1674
sg908
g1310
sg903
g1681
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1147
sg894
g1413
sg908
g1141
sg903
g1420
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g1158
sg894
g1154
sg908
g1165
sg903
g1162
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1277
sg894
g1267
sg908
g1271
sg903
g1275
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g1192
sg894
g1222
sg908
g1199
sg903
g1229
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g2195
sg894
g2221
sg908
g2202
sg903
g2228
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g966
sg894
g1607
sg908
g973
sg903
g1614
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g1175
sg894
g1754
sg908
g1182
sg903
g1761
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g1032
sg894
g2275
sg908
g1039
sg903
g2282
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g936
sg894
g1525
sg908
g943
sg903
g1532
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g1158
sg894
g1154
sg908
g1165
sg903
g1162
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g1049
sg894
g1456
sg908
g1056
sg903
g1463
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g919
sg894
g1284
sg908
g926
sg903
g1291
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g1000
sg894
g996
sg908
g1007
sg903
g1004
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g1147
sg894
g1413
sg908
g1141
sg903
g1420
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g966
sg894
g962
sg908
g973
sg903
g970
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g919
sg894
g1284
sg908
g926
sg903
g1291
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g1158
sg894
g2862
sg908
g1165
sg903
g2869
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g1032
sg894
g2275
sg908
g1039
sg903
g2282
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g1387
sg894
g2072
sg908
g1394
sg903
g2079
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g1158
sg894
g2862
sg908
g1165
sg903
g2869
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g1032
sg894
g2275
sg908
g1039
sg903
g2282
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I83102832
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'\x80\xd9\xf5\x0eP\xb9Y\x0fx\xdcY\x0f\xa0\xdcY\x0f\x90\xb8Y\x0f\xc8\xdcY\x0f\xf0\xdcY\x0f\xc0\xb8Y\x0f\x00\xdc\xf5\x0e\xf0\xb8Y\x0f \xdc\xf5\x0e@\xdc\xf5\x0eP\xdcY\x0f\x18\xddY\x0f`\xdc\xf5\x0e \xb9Y\x0f\xf0\xb8Y\x0f\xc0\xb8Y\x0f\xf0\xb8Y\x0fx\xdcY\x0f\x18\xddY\x0f \xb9Y\x0f\x18\xddY\x0f\xf0\xdcY\x0f\x90\xb8Y\x0f\x98\xf5Y\x0f\x80\xdeY\x0f\xc8\xdcY\x0f@\xddY\x0f\x00\xdc\xf5\x0e\xd0\xf5Y\x0f\x90\xb8Y\x0f \xb9Y\x0f\xa0\xdcY\x0f`\xdc\xf5\x0e@\xddY\x0fx\xdcY\x0f\x90\xb8Y\x0f \xb9Y\x0fx\xdcY\x0fP\xb9Y\x0f\x18\xddY\x0fx\xdcY\x0f\x00\xdc\xf5\x0e`\xdc\xf5\x0e\xe0\xb9Y\x0f\x00\xdc\xf5\x0e@\xdc\xf5\x0e\x08\xf6Y\x0f@\xdc\xf5\x0e \xb9Y\x0f@\xf6Y\x0f\x08\xf6Y\x0f\xf0\xdcY\x0f@\xddY\x0f\xf0\xb8Y\x0fh\xddY\x0f\x80\xd9\xf5\x0e\xc8\xdcY\x0f\x98\xf5Y\x0f\xd0\xf5Y\x0f\x80\xd9\xf5\x0eP\xdcY\x0f\x80\xd9\xf5\x0e\xc0\xb8Y\x0f\xf0\xdcY\x0f\xf0\xb8Y\x0f\x80\xdeY\x0fx\xdcY\x0f\xa0\xdcY\x0fx\xf6Y\x0f\x80\xd9\xf5\x0e\x98\xf5Y\x0f\x80\xb9Y\x0f\x80\xdc\xf5\x0e\xf0\xdcY\x0f\x08\xf6Y\x0fh\xddY\x0f\xc0\xb8Y\x0f\x00\xdc\xf5\x0eh\xddY\x0f\x90\xddY\x0f@\xddY\x0f\xc0\xb8Y\x0f\xc8\xdcY\x0f\x18\xddY\x0f\xa0\xdcY\x0f`\xdc\xf5\x0e\x90\xddY\x0fx\xf6Y\x0f\x98\xf5Y\x0fP\xb9Y\x0fx\xdcY\x0f`\xdc\xf5\x0e\x90\xddY\x0f \xb9Y\x0f\x90\xddY\x0f\xa0\xbaY\x0f\xf0\xdcY\x0f\xd0\xf5Y\x0f\xb0\xb9Y\x0f\xd0\xf5Y\x0f\xb0\xb9Y\x0f\xa0\xbaY\x0f\x00\xdc\xf5\x0eP\xdcY\x0f\x80\xd9\xf5\x0e\x90\xddY\x0f\xa0\xdcY\x0f\xc8\xdcY\x0f\x90\xddY\x0fP\xdcY\x0f\x18\xddY\x0f\xd0\xf5Y\x0f@\xdc\xf5\x0e\xc0\xb8Y\x0f\xb0\xf6Y\x0f\x98\xf5Y\x0f\xf0\xdcY\x0f\xe0\xb9Y\x0f\x98\xf5Y\x0f`\xdc\xf5\x0e\x90\xddY\x0f@\xdc\xf5\x0e\x08\xf6Y\x0f \xb9Y\x0f\xa0\xdcY\x0f\xe0\xb9Y\x0f \xb9Y\x0f\x90\xb8Y\x0f\xf0\xdcY\x0f\xc0\xb8Y\x0fh\xddY\x0fP\xdcY\x0f\xe0\xddY\x0f\x08\xf6Y\x0f\x90\xddY\x0f\xf0\xb8Y\x0f\x90\xddY\x0f\x90\xb8Y\x0f\x80\xd9\xf5\x0eP\xdcY\x0f@\xf6Y\x0f\xb0\xb9Y\x0f\xf0\xb8Y\x0f\x80\xd9\xf5\x0e \xb9Y\x0f \xdc\xf5\x0e\x18\xddY\x0fx\xdcY\x0f\xf0\xb8Y\x0f\xf0\xdcY\x0f \xb9Y\x0f\x98\xf5Y\x0fh\xddY\x0f\xc0\xb8Y\x0f\x18\xddY\x0fh\xddY\x0f@\xddY\x0f\x00\xdc\xf5\x0eP\xdcY\x0f\xd0\xf5Y\x0f`\xdc\xf5\x0e\xc8\xdcY\x0f@\xddY\x0f\x98\xf5Y\x0f\x08\xf6Y\x0f@\xdc\xf5\x0e\x08\xf6Y\x0f`\xdc\xf5\x0e\x90\xddY\x0f\x18\xddY\x0f\xd0\xf5Y\x0f\x80\xd9\xf5\x0e\x98\xf5Y\x0f\xd0\xf5Y\x0fh\xddY\x0f@\xbaY\x0f\x00\xdc\xf5\x0e\xb0\xf6Y\x0f\xc8\xdcY\x0f\xc0\xb8Y\x0f@\xddY\x0f\x18\xddY\x0f\xb0\xf6Y\x0f@\xddY\x0f\xa0\xdcY\x0f@\xf6Y\x0fh\xddY\x0f\x00\xdc\xf5\x0e\x10\xbaY\x0fh\xddY\x0f\x98\xf5Y\x0f\xf0\xb8Y\x0f\x90\xb8Y\x0f\xf0\xdcY\x0f@\xdc\xf5\x0ex\xdcY\x0fh\xddY\x0f\xc8\xdcY\x0f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S'@\xde\xf5\x0e`\xdd\xf5\x0e\xe0\xde\xf5\x0e`\xde\xf5\x0e\x00\xdf\xf5\x0e@\xdf\xf5\x0e@\xdd\xf5\x0e\x80\xde\xf5\x0e\x00\xdb\xf5\x0e \xdf\xf5\x0e\xa0\xdf\xf5\x0e\x80\xdf\xf5\x0e \xde\xf5\x0e \xdd\xf5\x0e\xe0\xdc\xf5\x0e\x00\xdd\xf5\x0e\xa0\xdd\xf5\x0e\xc0\xdc\xf5\x0e\x80\xdd\xf5\x0e\xe0\xd8\xf5\x0e\xa0\xde\xf5\x0e\x00\xde\xf5\x0e\xe0\xdd\xf5\x0e\xa0\xdc\xf5\x0e\xc0\xdd\xf5\x0e`\xdf\xf5\x0e\x00\x07\xd7\x0e\xc0\x07\xd7\x0e\xa0\xda\xf5\x0e\xa0\x03\xd7\x0e 0i\x0f\xe01i\x0f@1i\x0f\xc02i\x0f`2i\x0f@0i\x0f\x802i\x0f\xa02i\x0f\xe02i\x0f@3i\x0f 3i\x0f\x803i\x0f`3i\x0f`0i\x0f\xa03i\x0f\x004i\x0f 4i\x0f\x001i\x0f\xe00i\x0f\x804i\x0f`4i\x0f\xc00i\x0f\xa04i\x0f\xc04i\x0f\xe04i\x0f@5i\x0f`5i\x0f`1i\x0f\x003i\x0f\xc05i\x0f\xe05i\x0f\x006i\x0f\xe03i\x0f@6i\x0f 6i\x0f@4i\x0f\xc0\xde\xf5\x0e\xa05i\x0f\xc01i\x0f 1i\x0f\x800i\x0f\x007i\x0f`7i\x0f 5i\x0f\xa06i\x0f\xc06i\x0f\x008i\x0f`8i\x0f@8i\x0f\x807i\x0f\xa01i\x0f\xe06i\x0f 8i\x0f@2i\x0f 7i\x0f\xc03i\x0f@7i\x0f\xc08i\x0f\xa07i\x0f\x805i\x0f\x801i\x0f\xc09i\x0f\xa08i\x0f 9i\x0f@9i\x0f :i\x0f\x002i\x0f@:i\x0f\x80:i\x0f\xc0:i\x0f\xe0:i\x0f`9i\x0f ;i\x0f@;i\x0f\x005i\x0f`;i\x0f\xe08i\x0f\xa09i\x0f\x80;i\x0f\x806i\x0f\xa0;i\x0f\x808i\x0f`<i\x0f\x80<i\x0f <i\x0f\xa0:i\x0f\xa0<i\x0f\x00=i\x0f =i\x0f\x00:i\x0f\xe0<i\x0f\x009i\x0f@<i\x0f\xa0=i\x0f\xc0<i\x0f\x00>i\x0f`=i\x0f 2i\x0f\xa0h\x9d\x0e\xe0=i\x0f\x809i\x0f`:i\x0f\xc07i\x0f\x80>i\x0f\x00?i\x0f\xc0>i\x0f\x00<i\x0f\xe0>i\x0f\x80?i\x0f ?i\x0f\xe0?i\x0f\x00;i\x0f`>i\x0f\xa0>i\x0f\xc0?i\x0f`6i\x0f@>i\x0f@?i\x0f\xc0;i\x0f@=i\x0f\xe09i\x0f\xe07i\x0f\xa0?i\x0f`?i\x0f\x80=i\x0f\xa00i\x0f\xe0;i\x0f\x80\x00\r\x13\xe0\x01\r\x13@\x01\r\x13\xc0\x01\r\x13\x80\x02\r\x13\xc0\x02\r\x13\xa0\x00\r\x13\xa0\x02\r\x13 \x03\r\x13\x00\x03\r\x13 \x00\r\x13\x00\x02\r\x13\xe0\x03\r\x13\x80\x01\r\x13\xe0\x00\r\x13 \x04\r\x13@\x04\r\x13\xc0\x00\r\x13`\x04\r\x13\x00\x04\r\x13 \x01\r\x13\xc0\x04\r\x13\xa0\x04\r\x13\x00\x05\r\x13\xe0\x04\r\x13\xa0\x03\r\x13 \x05\r\x13\x80\x05\r\x13\xa0\x05\r\x13\xc0=i\x0f@\x02\r\x13\xe0\x02\r\x13 \x06\r\x13@\x00\r\x13`\x05\r\x13\x80\x06\r\x13`\x01\r\x13\xa0\x06\r\x13\x80\x04\r\x13\xe0\x06\r\x13@\x05\r\x13\x00\x07\r\x13\x80\x03\r\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'\xd8\xee\xd6@\x96\xf2\xae?\\\xc1{?Gu\x97?I/"?\x1e\xc0\xdb?\xcbs&?9\x06\x80?\xd2Cb?\xbd:s?v\xca;?\x07`\x15?\x88\xf5\x8e?e\xc3;?K\x03\x1e?\xde\x02\xc0? \xd3\x8c?\xb7\x9f\x19?\x9a\xeb]?\xbc\xf5\xae?l\xa0\x19?\x15\x12\x91@\xd1\xc8;?\xa9\x89\x88?\x1cI"?\x86""?e\xce\x0c@x%\xe2?\x93\xae\xca?\xdc\xc9{?\xfc~\xd7?\x15:3?}G\xc4?6\xf4\x7f?V\xbeY?\xac\x89(@a\xe4\x9d?.\xe8\x1d?\x08\xa0Y?\x0c\xe1{?\x16}\x97?\xd7n&?MHs?\xf2\xa0Y?R\x7fw?h\xfd.?\xf7\xc8;?\xa2\xd3\x8c?Qz\x17@\xba\n@?S\x9a\xa8?\xfd*b?\x9a\x8e\xc8?9\x17Q?c\xad\xea?\x1cRD?\xf8\x17Q?\xadi\x86?\x83\xd2\xac?\xb3\xff??i\xf1\xdd?a\xf6n?\xb9\xae\xaa?\x8e\x9a\x99@\x0b\xfan?c\x03\x1e?\x8d\xb9\x9b?\x1d\x14\x01@|(\x82?H\x9fj?/)\x82?\xa54\x03@\x164\x93?X\xe3\xdd?\x88\x03\xa0?\x93\xec]?76\xf3?\xfc\xad\xaa?\xd0\x847?\xd7aU?M\x9aw?*\xae\x8a?\xbbI\xa4?\x9e\x817?\xf2$\xc2?kQD?\xf1<D?\xbc\x06\x80?\x01\xb2*?\xd0KD?/\xde]?Z\x9a\xa8?\xdfl\xa6?\x06\xb1\x8a?\xfb%\x82?\x0b\x9d\x99?\xc7\x997?e\xfcn?\xc9\x837?\xdf\x8d\xe8?U=D?)\xa8Y?\xdd\x1c\x82?9.b?fQD?L\x04\xe0?\xe1\x80\x07@\'\xc7;?\x8e\xfb\x9f?\x14W\xd5?\x0f\xb0*?\x90\xb1\xca?\x0b\x18Q?2sf?\x88\x95H?\x02\x07@?\xdb\\5@\xd4\xb0j?\xe2\xd2\x8c?\x1fmf?\xb3\xee.?\xeft&?\x08\xec]?\xb5\x17Q?\xa7\xf3\xee?A\xc8;?\x8d\xd8\x9d?\xacV3?\xa7\xb8;?\xb9\xa0\x19?o\r@?\xafm&?\xb1\x02\xa0?\xde\xe3\xfd?X\x17\x91?\xf4X\x05@}\xfc.?!\x06\xa0?\xb3\xd4*?n\x857?^\xfbn?\x13&\xa2?\xcf\x06\xa0?`\x1eb?\xbf\x15Q?)E\xc4?K\xad\xca?\xd2\x83w?\xb1^\x95?\xd3\x8b\xa8?\xa2?s?\xa7\xf5\x8e?\x92\xf1\xee?\x98\xf5n?i\x01\x00@\x96)"?Tm&?8\xa2\x19?\x1a%\x12@7\x95H?\xf0z\x97??\xc7{?}\xc9;?\xc5\xc2\x9b?\x85\xad\x8a?\x8a\x89H?\xe2\x8e\xa8?\x02)b?\xf4LD?\xaf\xea]?$\xa6Y?\xebi\x86?\xaa\x95H?\xdf}\xb7?\xef\xef.?\xe0\xe4]?\x19i\xa6?\x7fl\x86?\xcdrf?\xde~\x07@\xb3QD?"\xc9{?\x95\xbc+@\xd5qf?\x15\xf5\xce?\nl\xc6?\xc9}\xa8?\rxw@2*\x82?qj\xe6?\xf9LD?\xf3\xc2{?jDD?\x99x\'@t\x13/?\xe9\xe4]?\xfdrf?\xfa\xac\x1a@\x18\xb6*?\x82}\xb7?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'0.*\x05\xd0\x8d\xf2\x04\x18k\xf2\x04\xb8d\xf2\x04\xc0k\xf2\x04(j\xf2\x04@j\xf2\x04Hh\xf2\x04\x90k\xf2\x04\xe0i\xf2\x04\x80i\xf2\x04Hk\xf2\x04Pi\xf2\x04xk\xf2\x04\xe8j\xf2\x04\xf0e\xf2\x04@g\xf2\x04\xe0f\xf2\x04(a\xf2\x048f\xf2\x04\x88j\xf2\x04Pf\xf2\x04`h\xf2\x04\xf8i\xf2\x04\x98i\xf2\x04hi\xf2\x04\xd8h\xf2\x04\xb8g\xf2\x04\x90h\xf2\x04\xc8f\xf2\x04`b\xf2\x04\xd8b\xf2\x04xh\xf2\x04\x08c\xf2\x04Xd\xf2\x040e\xf2\x04\x00h\xf2\x04\x18h\xf2\x04\xe8g\xf2\x04\x88g\xf2\x04\xa0g\xf2\x04pg\xf2\x04Xg\xf2\x04\x90e\xf2\x04\x18b\xf2\x04\xa8b\xf2\x04\xe8a\xf2\x04He\xf2\x04(g\xf2\x04\x98f\xf2\x04\xd8e\xf2\x04hc\xf2\x04\x80f\xf2\x04hf\xf2\x04 f\xf2\x04P`\xf2\x04\x08f\xf2\x04\xc0e\xf2\x04xe\xf2\x04`e\xf2\x04pa\xf2\x04\x18e\xf2\x04\xd0a\xf2\x04\x98`\xf2\x04\x00e\xf2\x04\x80c\xf2\x04\x98c\xf2\x04\x10a\xf2\x04\xe8d\xf2\x04\xd0d\xf2\x04\xa0d\xf2\x04\x88d\xf2\x04(d\xf2\x04@d\xf2\x040b\xf2\x04\x80`\xf2\x04\x10d\xf2\x04\xf8c\xf2\x04\xf8`\xf2\x04\xa0a\xf2\x04\xb0c\xf2\x048c\xf2\x04\xb0`\xf2\x04\x90b\xf2\x04xb\xf2\x04Hb\xf2\x04\x00b\xf2\x04\xb8a\xf2\x04h`\xf2\x04\x88a\xf2\x04Xa\xf2\x04\xc8`\xf2\x04 `\xf2\x04@a\xf2\x048`\xf2\x04 c\xf2\x04Pl\xf2\x04\x98l\xf2\x04\xd8n\xf2\x04\xb0f\xf2\x04\xf8f\xf2\x04\xc8o\xf2\x04\xc8i\x15\x05\x18k\x15\x050k\x15\x05\x10j\x15\x05\xf8f\x15\x05\xe8d\x15\x058l\x15\x05 o\x15\x05\xa8k\x15\x05 f\x15\x05\x08o\x15\x05\xd8n\x15\x05\x88m\x15\x05\xd8k\x15\x05\xf0h\x15\x05\x80i\x15\x05@j\x15\x05\xd0j\x15\x05\x08i\x15\x05hf\x15\x05xe\x15\x05\x00b\x15\x05xb\x15\x05\x10d\x15\x05Xa\x15\x05(a\x15\x05Pl\x15\x05\xf8i\x15\x05\xf0n\x15\x05(j\x15\x05\xb0`\x15\x05`h\x15\x05\x98`\x15\x05\xa0j\x15\x05\x00n\x15\x05\x10m\xf2\x04\x98o\xf2\x04\x08o\xf2\x04\xb0l\xf2\x04\x08i\xf2\x04\x80o\xf2\x04Pc\xf2\x04`n\xf2\x04pd\xf2\x04@m\xf2\x04\x08l\xf2\x04\xd8k\xf2\x04\x00n\xf2\x04\xd0m\xf2\x04\xb0o\xf2\x04\xe0o\xf2\x04\xd0g\xf2\x04\xf0h\xf2\x04xn\xf2\x04\x10g\xf2\x04Xm\xf2\x04\xc8l\xf2\x04\x00k\xf2\x048o\xf2\x04\xf0n\xf2\x04\xc0n\xf2\x04\x80l\xf2\x04 o\xf2\x04\xa8e\xf2\x04\xc8i\xf2\x04\xe8m\xf2\x04\x18n\xf2\x04\xc8c\xf2\x04ho\xf2\x04\xa0j\xf2\x04\xa0m\xf2\x04Xj\xf2\x04pm\xf2\x04Po\xf2\x04(m\xf2\x04\xb0i\xf2\x04\xa8n\xf2\x04\x90n\xf2\x04Hn\xf2\x04\xe0`\xf2\x040n\xf2\x04\xf0k\xf2\x04\xb8m\xf2\x04\xe0c\xf2\x04\x88m\xf2\x04pj\xf2\x04\xe0l\xf2\x040h\xf2\x040k\xf2\x04\xf8l\xf2\x04\xa8k\xf2\x04`k\xf2\x04\x10j\xf2\x04 l\xf2\x04\xd0j\xf2\x048l\xf2\x04\xc0h\xf2\x04\xb8j\xf2\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3663
sg3632
g3836
sg3646
g3657
sg3641
g3843
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3855
sg3632
g3851
sg3646
g3862
sg3641
g3859
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3872
sg3632
g3868
sg3646
g3879
sg3641
g3876
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3889
sg3632
g3885
sg3646
g3896
sg3641
g3893
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3793
sg3632
g3902
sg3646
g3800
sg3641
g3909
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3759
sg3632
g3917
sg3646
g3766
sg3641
g3924
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3793
sg3632
g3902
sg3646
g3800
sg3641
g3909
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3674
sg3632
g3945
sg3646
g3681
sg3641
g3952
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3855
sg3632
g3960
sg3646
g3862
sg3641
g3967
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3889
sg3632
g3975
sg3646
g3896
sg3641
g3982
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3855
sg3632
g3960
sg3646
g3862
sg3641
g3967
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g4033
sg3632
g4029
sg3646
g4040
sg3641
g4037
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g4056
sg3632
g4046
sg3646
g4050
sg3641
g4054
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g3725
sg3632
g4063
sg3646
g3732
sg3641
g4070
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g4056
sg3632
g4046
sg3646
g4050
sg3641
g4054
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g4108
sg3632
g4104
sg3646
g4115
sg3641
g4112
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g3889
sg3632
g3885
sg3646
g3896
sg3641
g3893
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g3691
sg3632
g4147
sg3646
g3698
sg3641
g4154
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3872
sg3632
g4162
sg3646
g3879
sg3641
g4169
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g4056
sg3632
g4046
sg3646
g4050
sg3641
g4054
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g3889
sg3632
g3885
sg3646
g3896
sg3641
g3893
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g3674
sg3632
g3945
sg3646
g3681
sg3641
g3952
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g3663
sg3632
g3836
sg3646
g3657
sg3641
g3843
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g3855
sg3632
g3960
sg3646
g3862
sg3641
g3967
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g3674
sg3632
g3945
sg3646
g3681
sg3641
g3952
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g3776
sg3632
g4281
sg3646
g3783
sg3641
g4288
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g3872
sg3632
g3868
sg3646
g3879
sg3641
g3876
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g3708
sg3632
g4309
sg3646
g3715
sg3641
g4316
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g3823
sg3632
g4337
sg3646
g3830
sg3641
g4344
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g4356
sg3632
g4352
sg3646
g4363
sg3641
g4360
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g3823
sg3632
g4337
sg3646
g3830
sg3641
g4344
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g3889
sg3632
g3975
sg3646
g3896
sg3641
g3982
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g4356
sg3632
g4408
sg3646
g4363
sg3641
g4415
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g4056
sg3632
g4436
sg3646
g4050
sg3641
g4443
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g3793
sg3632
g3902
sg3646
g3800
sg3641
g3909
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g4468
sg3632
g4464
sg3646
g4475
sg3641
g4472
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g3637
sg3632
g4481
sg3646
g3647
sg3641
g4488
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g4033
sg3632
g4029
sg3646
g4040
sg3641
g4037
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g4108
sg3632
g4522
sg3646
g4115
sg3641
g4529
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g3742
sg3632
g4589
sg3646
g3749
sg3641
g4596
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g4056
sg3632
g4436
sg3646
g4050
sg3641
g4443
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g3691
sg3632
g4147
sg3646
g3698
sg3641
g4154
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g3872
sg3632
g4162
sg3646
g3879
sg3641
g4169
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g3637
sg3632
g4481
sg3646
g3647
sg3641
g4488
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g4033
sg3632
g4682
sg3646
g4040
sg3641
g4689
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g3674
sg3632
g3945
sg3646
g3681
sg3641
g3952
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g4356
sg3632
g4352
sg3646
g4363
sg3641
g4360
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g4468
sg3632
g4749
sg3646
g4475
sg3641
g4756
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g3759
sg3632
g3917
sg3646
g3766
sg3641
g3924
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g3776
sg3632
g4281
sg3646
g3783
sg3641
g4288
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g4468
sg3632
g4464
sg3646
g4475
sg3641
g4472
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g4807
sg3632
g4803
sg3646
g4814
sg3641
g4811
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g4056
sg3632
g4436
sg3646
g4050
sg3641
g4443
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g3725
sg3632
g4063
sg3646
g3732
sg3641
g4070
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g3855
sg3632
g3851
sg3646
g3862
sg3641
g3859
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g3691
sg3632
g4147
sg3646
g3698
sg3641
g4154
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g3872
sg3632
g3868
sg3646
g3879
sg3641
g3876
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g4807
sg3632
g4803
sg3646
g4814
sg3641
g4811
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g3872
sg3632
g4162
sg3646
g3879
sg3641
g4169
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g4033
sg3632
g4682
sg3646
g4040
sg3641
g4689
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g3663
sg3632
g3836
sg3646
g3657
sg3641
g3843
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g3872
sg3632
g4162
sg3646
g3879
sg3641
g4169
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g4807
sg3632
g4976
sg3646
g4814
sg3641
g4983
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g3889
sg3632
g3975
sg3646
g3896
sg3641
g3982
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g4807
sg3632
g4976
sg3646
g4814
sg3641
g4983
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g4108
sg3632
g4522
sg3646
g4115
sg3641
g4529
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g3742
sg3632
g4589
sg3646
g3749
sg3641
g4596
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g4108
sg3632
g4104
sg3646
g4115
sg3641
g4112
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g4108
sg3632
g4522
sg3646
g4115
sg3641
g4529
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g4108
sg3632
g4522
sg3646
g4115
sg3641
g4529
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g3776
sg3632
g3772
sg3646
g3783
sg3641
g3780
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g3663
sg3632
g3836
sg3646
g3657
sg3641
g3843
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g4807
sg3632
g4803
sg3646
g4814
sg3641
g4811
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g3691
sg3632
g4147
sg3646
g3698
sg3641
g4154
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g4807
sg3632
g4803
sg3646
g4814
sg3641
g4811
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g3855
sg3632
g3960
sg3646
g3862
sg3641
g3967
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g4108
sg3632
g4522
sg3646
g4115
sg3641
g4529
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g3759
sg3632
g3917
sg3646
g3766
sg3641
g3924
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g4356
sg3632
g4352
sg3646
g4363
sg3641
g4360
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g4033
sg3632
g4682
sg3646
g4040
sg3641
g4689
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g3742
sg3632
g4589
sg3646
g3749
sg3641
g4596
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g3708
sg3632
g4309
sg3646
g3715
sg3641
g4316
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g4033
sg3632
g4029
sg3646
g4040
sg3641
g4037
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g3872
sg3632
g3868
sg3646
g3879
sg3641
g3876
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g4807
sg3632
g4976
sg3646
g4814
sg3641
g4983
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g4356
sg3632
g4408
sg3646
g4363
sg3641
g4415
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g3889
sg3632
g3975
sg3646
g3896
sg3641
g3982
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g3708
sg3632
g4309
sg3646
g3715
sg3641
g4316
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g3889
sg3632
g3975
sg3646
g3896
sg3641
g3982
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g3708
sg3632
g4309
sg3646
g3715
sg3641
g4316
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g3759
sg3632
g3917
sg3646
g3766
sg3641
g3924
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g4468
sg3632
g4464
sg3646
g4475
sg3641
g4472
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g3663
sg3632
g3836
sg3646
g3657
sg3641
g3843
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g3637
sg3632
g4481
sg3646
g3647
sg3641
g4488
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g4356
sg3632
g4408
sg3646
g4363
sg3641
g4415
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g4807
sg3632
g4976
sg3646
g4814
sg3641
g4983
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g3793
sg3632
g3902
sg3646
g3800
sg3641
g3909
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g4807
sg3632
g4976
sg3646
g4814
sg3641
g4983
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g3708
sg3632
g4309
sg3646
g3715
sg3641
g4316
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g3637
sg3632
g4481
sg3646
g3647
sg3641
g4488
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g3823
sg3632
g4337
sg3646
g3830
sg3641
g4344
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g3691
sg3632
g4147
sg3646
g3698
sg3641
g4154
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g3637
sg3632
g4481
sg3646
g3647
sg3641
g4488
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g3889
sg3632
g3885
sg3646
g3896
sg3641
g3893
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g3725
sg3632
g4063
sg3646
g3732
sg3641
g4070
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g3855
sg3632
g3960
sg3646
g3862
sg3641
g3967
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g3674
sg3632
g3945
sg3646
g3681
sg3641
g3952
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g3742
sg3632
g4589
sg3646
g3749
sg3641
g4596
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g3889
sg3632
g3885
sg3646
g3896
sg3641
g3893
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g4033
sg3632
g4029
sg3646
g4040
sg3641
g4037
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g4468
sg3632
g4464
sg3646
g4475
sg3641
g4472
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g3855
sg3632
g3851
sg3646
g3862
sg3641
g3859
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g4468
sg3632
g4749
sg3646
g4475
sg3641
g4756
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g4056
sg3632
g4046
sg3646
g4050
sg3641
g4054
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g3776
sg3632
g4281
sg3646
g3783
sg3641
g4288
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g4108
sg3632
g4104
sg3646
g4115
sg3641
g4112
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g3872
sg3632
g4162
sg3646
g3879
sg3641
g4169
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g3725
sg3632
g4063
sg3646
g3732
sg3641
g4070
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g4056
sg3632
g4436
sg3646
g4050
sg3641
g4443
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g4033
sg3632
g4682
sg3646
g4040
sg3641
g4689
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g4356
sg3632
g4408
sg3646
g4363
sg3641
g4415
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g4356
sg3632
g4408
sg3646
g4363
sg3641
g4415
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g3872
sg3632
g3868
sg3646
g3879
sg3641
g3876
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g4807
sg3632
g4803
sg3646
g4814
sg3641
g4811
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g3855
sg3632
g3851
sg3646
g3862
sg3641
g3859
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g4108
sg3632
g4104
sg3646
g4115
sg3641
g4112
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g4033
sg3632
g4029
sg3646
g4040
sg3641
g4037
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g4108
sg3632
g4104
sg3646
g4115
sg3641
g4112
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g4468
sg3632
g4464
sg3646
g4475
sg3641
g4472
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g3793
sg3632
g3789
sg3646
g3800
sg3641
g3797
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g3776
sg3632
g4281
sg3646
g3783
sg3641
g4288
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g4356
sg3632
g4352
sg3646
g4363
sg3641
g4360
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g3725
sg3632
g4063
sg3646
g3732
sg3641
g4070
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g3759
sg3632
g3917
sg3646
g3766
sg3641
g3924
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g4056
sg3632
g4046
sg3646
g4050
sg3641
g4054
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g3855
sg3632
g3851
sg3646
g3862
sg3641
g3859
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g4356
sg3632
g4352
sg3646
g4363
sg3641
g4360
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g4056
sg3632
g4436
sg3646
g4050
sg3641
g4443
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g3823
sg3632
g4337
sg3646
g3830
sg3641
g4344
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g4468
sg3632
g4749
sg3646
g4475
sg3641
g4756
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g3776
sg3632
g4281
sg3646
g3783
sg3641
g4288
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g4468
sg3632
g4749
sg3646
g4475
sg3641
g4756
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g4033
sg3632
g4682
sg3646
g4040
sg3641
g4689
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g3793
sg3632
g3902
sg3646
g3800
sg3641
g3909
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g3742
sg3632
g4589
sg3646
g3749
sg3641
g4596
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g3823
sg3632
g4337
sg3646
g3830
sg3641
g4344
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g4468
sg3632
g4749
sg3646
g4475
sg3641
g4756
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I83102832
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S' \xff\x15\x13\x00\x08\r\x13@\xfd\x1a\x13x\xfd\x1a\x13H/\x1b\x13p/\x1b\x13P\xff\x15\x13 \xff\x15\x13\x00\x08\r\x13\xb0\xfd\x1a\x13\x98/\x1b\x13\xc0/\x1b\x13`\x08\r\x13@\xfd\x1a\x13\xc0\x07\r\x13\x80\xff\x15\x13\xe8\xfd\x1a\x13\xb0a\x1b\x13 \x08\r\x13H`\x1b\x13p/\x1b\x13p`\x1b\x13\xb0\xfd\x1a\x13@\xfd\x1a\x13\xc0/\x1b\x13 \xff\x15\x13@\x08\r\x13\x88a\x1b\x13@\x08\r\x13\xb0p\x1b\x13\x98/\x1b\x13@\xfd\x1a\x13\xb0\xff\x15\x13p`\x1b\x13@\xfd\x1a\x13 \x08\r\x13\x80\xff\x15\x13\x98/\x1b\x13\x98`\x1b\x13\xb0\xfd\x1a\x13\x80p\x1b\x13 `\x1b\x13\x00\x08\r\x13H/\x1b\x13 `\x1b\x13\x98/\x1b\x13p`\x1b\x13pq\x1b\x13\xb0p\x1b\x13\xc0/\x1b\x13\xc0\x07\r\x13p/\x1b\x13\xc0/\x1b\x13\xb0\xfd\x1a\x13\x80\x08\r\x13 \xff\x15\x138a\x1b\x13p/\x1b\x13p`\x1b\x13Pp\x1b\x13X\xfe\x1a\x13\xb0a\x1b\x13 p\x1b\x13P\xff\x15\x13\xc0`\x1b\x13@\x08\r\x13H`\x1b\x13p`\x1b\x13\x80p\x1b\x13\x98`\x1b\x13 \x08\r\x13P\xff\x15\x13H/\x1b\x13\xd8a\x1b\x13P\xff\x15\x13\xe0p\x1b\x13@q\x1b\x138a\x1b\x13 \xff\x15\x13\x98`\x1b\x13\xd8a\x1b\x13@\x08\r\x13x\xfd\x1a\x13 `\x1b\x13 \xff\x15\x13p/\x1b\x13H/\x1b\x13\xc0`\x1b\x13\x80\xff\x15\x13H`\x1b\x13@\x08\r\x13\xd8a\x1b\x13\x80\xff\x15\x13 \x08\r\x13\x98`\x1b\x13\x00\x08\r\x13\xc0\x07\r\x13\x98`\x1b\x13x\xfd\x1a\x13H`\x1b\x13`a\x1b\x13p/\x1b\x13 \xff\x15\x13H`\x1b\x13 \xff\x15\x13 \x08\r\x13\x00\x08\r\x13\xc0\x07\r\x13pq\x1b\x13 \x08\r\x13Pp\x1b\x13x\xfd\x1a\x13 \x08\r\x13\xb0\xff\x15\x13p`\x1b\x13X\xfe\x1a\x13@\xfd\x1a\x13\x80\xff\x15\x13\x00\x08\r\x13H`\x1b\x13@\xfd\x1a\x13\x88a\x1b\x13 `\x1b\x13\xb0\xff\x15\x13\xc0`\x1b\x13\xc0/\x1b\x13\x10a\x1b\x13\xc0`\x1b\x13 \x08\r\x13 `\x1b\x13\x80\x08\r\x13\x10q\x1b\x13@\x08\r\x13\x98/\x1b\x13\xe0p\x1b\x13\xb0p\x1b\x13H/\x1b\x13\xc0\x07\r\x13\xb0\xfd\x1a\x13 `\x1b\x13H/\x1b\x13\xb0\xff\x15\x13 \x08\r\x13\xb0\xfd\x1a\x13p`\x1b\x13\xc0\x07\r\x13\xb0\xfd\x1a\x13\xc0/\x1b\x13P\xff\x15\x13p`\x1b\x13H/\x1b\x13\xc0/\x1b\x13\x98/\x1b\x13P\xff\x15\x13`\x08\r\x13x\xfd\x1a\x13 `\x1b\x13\xb0\xfd\x1a\x13`\x08\r\x13 \xfe\x1a\x13x\xfd\x1a\x13\x00\x08\r\x13\xc0\x07\r\x13\x80\xff\x15\x13 \xfe\x1a\x13P\xff\x15\x13\xb0\xff\x15\x13\x80\xff\x15\x13\x98`\x1b\x13@q\x1b\x13@\x08\r\x13x\xfd\x1a\x13@q\x1b\x13\x98/\x1b\x13@\xfd\x1a\x13\x00\x08\r\x13\x98/\x1b\x13\x98`\x1b\x13H`\x1b\x13 \xff\x15\x13X\xfe\x1a\x13p/\x1b\x13\xb0\xff\x15\x13@\x08\r\x13p/\x1b\x13H`\x1b\x13\x00\x08\r\x13\xc0`\x1b\x13 \x08\r\x13\xc0/\x1b\x13\xe0p\x1b\x13`a\x1b\x13\xe8\xfd\x1a\x13\xb0\xff\x15\x13p`\x1b\x13\xc0`\x1b\x13\xe8\xfd\x1a\x13\x98`\x1b\x13\xc0`\x1b\x13x\xfd\x1a\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x00\t\r\x13`\n\r\x13\xa0\x08\r\x13 \x0b\r\x13\xe0\t\r\x13\xe0\x08\r\x13\x80\x0b\r\x13\xc0\n\r\x13\xc0\x08\r\x13@\x0b\r\x13\x80\t\r\x13\xe0\x0b\r\x13 \n\r\x13\xc0\x03\r\x13`\x0b\r\x13\x80\n\r\x13\x80\x0c\r\x13\xa0\x01\r\x13\x00\x0c\r\x13\xe0\x0c\r\x13`\x0c\r\x13\x00\x0b\r\x13@\t\r\x13`\r\r\x13\xc0\x0c\r\x13\xa0\x0b\r\x13\xc0\t\r\x13\xa0\r\r\x13\xe0\r\r\x13\xc0\x05\r\x13\xe0\n\r\x13`\x0e\r\x13\x80\x0e\r\x13 \r\r\x13\xa0\x0e\r\x13\xa0\x0c\r\x13\x00\r\r\x13\x00\x0f\r\x13 \x0e\r\x13@\x0c\r\x13\x80\x0f\r\x13\xa0\n\r\x13\x00\n\r\x13@\n\r\x13\xe0\x0f\r\x13\xc0\r\r\x13`\t\r\x13\xc0\x0e\r\x13 \t\r\x13 \x0f\r\x13\x00\x0e\r\x13`\x0f\r\x13\xa0\x0f\r\x13\xc0\x0b\r\x13 \x0c\r\x13\x80\r\r\x13\xa0\t\r\x13\xc0\xdf\xf5\x0e@\r\r\x13\xe0\x0e\r\x13\xe0\x802\x13`\x802\x13\x00\x812\x13\xa0\x822\x13\xc0\x822\x13\xc0\x802\x13\x80\x822\x13\x00\x832\x13 \x832\x13@\x812\x13@\x822\x13@\x832\x13\xa0\x832\x13\x80\x832\x13@\x802\x13\x00\x842\x13 \x842\x13\x80\x812\x13\x80\x802\x13@\x842\x13`\x842\x13\x80\x842\x13\xa0\x842\x13\xc0\x842\x13 \x852\x13\x00\x852\x13`\x832\x13\x80\x852\x13`\x852\x13\xc0\x852\x13\xe0\x852\x13\xc0\x832\x13 \x802\x13@\x862\x13 \x862\x13`\x822\x13`\x862\x13\x80\x862\x13\xa0\x862\x13\xc0\x862\x13\xe0\x862\x13 >i\x0f \x872\x13\x80\x872\x13\xe0\x822\x13@\x872\x13\xa0\x872\x13\xa0\x852\x13\x00\x862\x13\x00\x872\x13\xe0\x842\x13\x80\x882\x13\xc0\x872\x13@\x882\x13 \x812\x13`\x882\x13\x00\x892\x13\xe0\x832\x13@\x892\x13\xa0\x812\x13\xa0\x892\x13\x00\x882\x13`\x872\x13\xe0\x872\x13`\x892\x13@\x8a2\x13\x80\x892\x13\xe0\x812\x13\x00\x822\x13 \x882\x13\x00\x8a2\x13\xe0\x892\x13 \x8b2\x13@\x8b2\x13\x80\x8a2\x13\xc0\x8a2\x13@\x852\x13\xa0\x8a2\x13\xe0\x8b2\x13\x00\x8c2\x13 \x8a2\x13`\x812\x13 \x892\x13\xa0\x882\x13\xa0\x8c2\x13\xc0\x882\x13`\x8c2\x13@\x8c2\x13 \x8d2\x13@\x8d2\x13\xe0\x8a2\x13\xc0\x892\x13\x80\x8b2\x13\xc0\x8d2\x13\xe0\x8d2\x13`\x8b2\x13\xc0\x812\x13@\x8e2\x13`\x8e2\x13\x00\x8e2\x13\x00\x8d2\x13\xe0\x8c2\x13\xa0\x8b2\x13\xa0\x802\x13 \x8f2\x13@\x8f2\x13@\x0f\r\x13\x80\x8e2\x13 \x8c2\x13\x00\x8b2\x13\xe0\x8f2\x13`\x8d2\x13\xc0\x8b2\x13`\x8a2\x13 \x8e2\x13\x80\x8f2\x13\xe0\x8e2\x13\xa0\x8f2\x13\xc0\x8c2\x13 \x822\x13\xa0\x8d2\x13\x00\x8f2\x13\x80\x8c2\x13\xe0\x882\x13@\x0e\r\x13\xa0\x8e2\x13\xc0\x8f2\x13@0a\x13\xe01a\x13@1a\x13\xc02a\x13\x802a\x13\xa00a\x13\xc00a\x13\xa02a\x13 3a\x13\x003a\x13`3a\x13@3a\x13\x801a\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S'\xfc\x8b\xa8?\x13\x17\x91?\xce\xeb]?@\x88H?icU?\x15\xb7{?R\xc3;?\xd4\x1eQ?\xcb\xcf\xac?F\xf0\xdd?\x9bf\x06@\xfc\xb1*?S\x03\x80?\x8ey7@\r\xf7\x8e?\x02\x06\xc0?v\xb1*?\xa1Y\xd5?\x8e\xa0Y?\xc3kD?9af?\x92qf?\x00]\x95?\xfe\x81w?W4\xc2?O\x16\xd1?.\xb5j?a\x07@?M\xc5{?\xba\xbc*?v\xae\xea?\x10\x16Q?H\xb8*?\x12\xe4\xdd?g:\xb3?^\xc8{?\x82\xaej?\x8e\xb1\x8a?\xea\x02\xa0?aV\x84?\xb0?D?\xfa\x8b\xa8?K\xd3L?\xa0)"?\x15;\x03@r\xcf\x0c@\x1b\x8f\x88?HLD?@:3?\ttf?"~\x97?\x85\xf5\x7f?\x8cQD?\xe4B\xa4?s\xc9;?L\xf2\x8e?\\\x9fY?Y\xfb\x7f?\xc3\x07\x80?pFb?\n\xc5;?u(\x82?\xc2~7?\xce\xa5Y?2\\U?\xba\x857?\xff\xfa.?\x8dsf?\xc2\x0e\x91?\xc8\xbf\xbb?\x81\x857?\n]\x15?I\xb2j?h\xfb.?\'\xda\x0c?\xd8\xb0\x8a?\x81\xcf*?\xe923?\t\x08@?\xad\x02 @\x7fm&?\x9b\x9fw?e73?Sb\x15?$\x8a(@/\xdc\r@*v&?\x81\x857?\xeb\x8b\xa8?\xaf~7?\xd5\'"?\xc8y\xc6?%\xc2\x9b?^\xc2;?\x08\xd5L?\xb2}\x97?t\xeb\x1d?,\xe0;?`\x13Q?,/"?\xb0\xb0\xca?\x9aQ&?\xd9@s?\xfd\xe6;?C9\xd3?2(\x82?\xe0aU?n\xc9;?L)\x82? \x0c@?o\xa1Y?o\x9d\x19?h\xc4;?o\xfc.?GA3?\xff\xe5]?S\xae\x8a?\xb7\xe3\xdd?az\xd7?t/"?\xf6\'\xa2?\xc4\x83w?\x89\xd5L?\xa5\xa6Y?\xad\xc1\xbb?>\x96H?\x18}\xb7?7\x95H?c0"?\x1fs&?B0b?R\x8e\xa8?\xe9\xb1*?\xe9\xad\xaa?\xfc\x8fH?\\\xeb\x1d?L\x1bQ?[\xfe??\x06\xd4L?\xff\xd2\x8c?\xee\xf5.?\xb3\xf6.?\xb8\x9dw?u\\U?\xd5F\xa4?3\xca;?\x85\xabZ@\xc0\xdcL?\x9en&?\x0b@s?\x18\xed\x1d?&]U?\xe0\xc1\xbb?g:b?`X\x95?\x94\xcdL?]\x18Q?\xacc\x15?\x94J\x84?\xf8M\xa4?\x18}7?\xf4&\xc2?F\xa2\x19?\xe9y\x97?qm\x86?-\xaa\x19?\xfc\x1f"?\x0b\xd0\x8c?g~7?\x1e\xb2*?d\x96H?We\xa6?\xae/"?j\xae\x8a?;\xcd\xec?\x1d\xadH?\x0b\x07@?\x02\xa8\x19?\x8c\xe5\x1d?f\xfan?Vp&?\xf3\xc3\x9b?\x90\xfc.?\xe6G\x84?=\xd3\x1d?\x01\xe5\x1d?@\xe1\x9d?\xad\xdaL?\xffOD?\x13\x17Q?\xfc\x9b\xd9?\xea\xf3\x8e?\x92\'Q?\x1a^U?\x89i\xa6?\xc6)"?\xcbq&?\xed\\U?0l\x86?\xeb[\x15?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S'\xa8h\xf2\x04\x00h\x15\x05\xc8\xaf\x00\x05\xd0\xa7\x00\x05\xe0\xaf\x00\x050\xae\x00\x05\xd0\xad\x00\x05\xd8\xae\x00\x05 \xa3\x00\x05\xf0\xae\x00\x05\x90\xa5\x00\x05\xa0\xa1\x00\x05\xa0\xa7\x00\x05 \xaf\x00\x05@\xa7\x00\x058\xaf\x00\x05\x00\xae\x00\x05H\xa5\x00\x05\xc0\xae\x00\x05\xc8\xa6\x00\x05P\xaf\x00\x05\xb0\xaf\x00\x05\xd8\xa8\x00\x05\xa0\xad\x00\x05\xc0\xa8\x00\x05\x80\xa9\x00\x05\x08\xa6\x00\x05H\xae\x00\x05\xf8\xa9\x00\x05\xa8\xae\x00\x05H\xa8\x00\x05x\xa8\x00\x05\xc8\xa9\x00\x05`\xa8\x00\x05\x98\xa9\x00\x050\xab\x00\x05\x90\xa8\x00\x05\x98\xaf\x00\x05`\xae\x00\x05h\xa9\x00\x05\xf0\xa5\x00\x05\x88\xad\x00\x050\xa8\x00\x05h\xaf\x00\x05\xf8\xa6\x00\x05X\xa7\x00\x05\xb8\xad\x00\x05\x18\xae\x00\x05\xe8\xa7\x00\x05\x80\xaf\x00\x05(\xa4\x00\x05\x88\xa4\x00\x05\xe0o\x15\x05`e\x15\x05 l\x15\x05\x80o\x15\x05xk\x15\x05\x18n\x15\x05Po\x15\x05(d\x15\x05\x80l\x15\x05\x98o\x15\x05\xe8m\x15\x05\x90k\x15\x05\xa8n\x15\x05@m\x15\x05\xc8l\x15\x05\xc8o\x15\x058o\x15\x05pj\x15\x05Hn\x15\x05xn\x15\x05\xb8m\x15\x05Xj\x15\x05\xc8`\x15\x05He\x15\x058i\x15\x05\xe0f\x15\x05\x10g\x15\x05\x90h\x15\x05\xd0g\x15\x05Hh\x15\x05(g\x15\x05\xe0c\x15\x05\x18h\x15\x05\xc8f\x15\x05\xf0e\x15\x05\x00e\x15\x05@g\x15\x05h`\x15\x05\xa0d\x15\x05\x08c\x15\x05\xd8b\x15\x05(\x8a\xf2\x04\xd0\x8a\xf2\x04\xf0\x88\xf2\x04X\x84\xf2\x04\xd8\x88\xf2\x04\xc0\x85\xf2\x04\xb0\x80\xf2\x04p\x87\xf2\x048\xa9\x00\x05\x90\xab\x00\x05\x08\xaf\x00\x05\x90\xae\x00\x05(\xaa\x00\x05x\xae\x00\x05\xb0\xa9\x00\x05\xe8\xad\x00\x05\x08\xa9\x00\x05 \xa9\x00\x05p\xad\x00\x05\xa0\xa4\x00\x05\xc0\xa5\x00\x05\xf8\xa3\x00\x05\xe0\xa9\x00\x05(\xa1\x00\x05\x18\xa8\x00\x05x\xa5\x00\x05X\xad\x00\x05\xa8\xa5\x00\x05H\xa2\x00\x05`\xa2\x00\x05\x80\xa3\x00\x05(\xa7\x00\x05\xe0\xa6\x00\x05\xe8\xa1\x00\x058\xa6\x00\x05\x00\xa8\x00\x05 \xa6\x00\x05X\xa4\x00\x05\x88\xa7\x00\x05P\xa9\x00\x05p\xa4\x00\x05\xa8\xa8\x00\x05\xb8\xa7\x00\x05p\xa7\x00\x05`\xa5\x00\x05\xf0\xa8\x00\x05\xe8\xa4\x00\x05\x98\xa3\x00\x050\xa5\x00\x05\x18\xa2\x00\x05\x00\xa2\x00\x05\xb8\xa4\x00\x05@\xa4\x00\x05\xe0\xa3\x00\x05x\xa2\x00\x05\xe0\xa0\x00\x05P\xa0\x00\x05\xd0\xa1\x00\x05\x10\xa7\x00\x05\xb0\xa6\x00\x05\x90\xa2\x00\x05\x18\xa5\x00\x05P\xa6\x00\x05\x98\xa6\x00\x05\x80\xa6\x00\x05h\xa3\x00\x05@\xa1\x00\x05h\xa6\x00\x058\xa3\x00\x058\xa0\x00\x05\xa8\xab\x00\x05h\xa0\x00\x05\xd8\xa5\x00\x05`\xab\x00\x05p\xa1\x00\x05\xb0\xa0\x00\x058\xac\x00\x05\x00\xa5\x00\x05\xd8\xab\x00\x05\xd0\xa4\x00\x05\xf0\xa2\x00\x05x\xab\x00\x05\xc0\xa2\x00\x05\xc8\xa3\x00\x05\x10\xa4\x00\x05\xb8\xa1\x00\x05\xe8\xaa\x00\x05P\xac\x00\x05\xb0\xa3\x00\x05 \xa0\x00\x050\xa2\x00\x05@\xaa\x00\x05P\xa3\x00\x05\x08\xa3\x00\x05\xd8\xa2\x00\x05\x98\xa0\x00\x05\x88\xa1\x00\x05X\xa1\x00\x05\x10\xa1\x00\x05\xf8\xa0\x00\x05\xc8\xa0\x00\x05\x80\xa0\x00\x05H\xab\x00\x05\x18\xab\x00\x05\x00\xab\x00\x05\x10\xaa\x00\x05p\xaa\x00\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6395
sg6370
g6506
sg6384
g6402
sg6379
g6513
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6559
sg6370
g6555
sg6384
g6566
sg6379
g6563
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6582
sg6370
g6572
sg6384
g6576
sg6379
g6580
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6412
sg6370
g6589
sg6384
g6419
sg6379
g6596
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6608
sg6370
g6604
sg6384
g6615
sg6379
g6612
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6625
sg6370
g6621
sg6384
g6632
sg6379
g6629
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6446
sg6370
g6638
sg6384
g6453
sg6379
g6645
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6663
sg6370
g6653
sg6384
g6657
sg6379
g6661
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6674
sg6370
g6670
sg6384
g6681
sg6379
g6678
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6663
sg6370
g6687
sg6384
g6657
sg6379
g6694
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6719
sg6370
g6715
sg6384
g6726
sg6379
g6723
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6525
sg6370
g6732
sg6384
g6532
sg6379
g6739
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6559
sg6370
g6555
sg6384
g6566
sg6379
g6563
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6375
sg6370
g6773
sg6384
g6385
sg6379
g6780
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6792
sg6370
g6788
sg6384
g6799
sg6379
g6796
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6559
sg6370
g6555
sg6384
g6566
sg6379
g6563
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6792
sg6370
g6788
sg6384
g6799
sg6379
g6796
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6480
sg6370
g6831
sg6384
g6487
sg6379
g6838
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6876
sg6370
g6872
sg6384
g6883
sg6379
g6880
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6719
sg6370
g6715
sg6384
g6726
sg6379
g6723
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6674
sg6370
g6915
sg6384
g6681
sg6379
g6922
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6625
sg6370
g6621
sg6384
g6632
sg6379
g6629
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6542
sg6370
g6943
sg6384
g6549
sg6379
g6950
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6962
sg6370
g6958
sg6384
g6969
sg6379
g6966
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6525
sg6370
g6732
sg6384
g6532
sg6379
g6739
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6463
sg6370
g6988
sg6384
g6470
sg6379
g6995
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6582
sg6370
g6572
sg6384
g6576
sg6379
g6580
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g6395
sg6370
g6506
sg6384
g6402
sg6379
g6513
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g6582
sg6370
g7042
sg6384
g6576
sg6379
g7049
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g6719
sg6370
g7070
sg6384
g6726
sg6379
g7077
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6962
sg6370
g6958
sg6384
g6969
sg6379
g6966
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6559
sg6370
g7111
sg6384
g6566
sg6379
g7118
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6608
sg6370
g7126
sg6384
g6615
sg6379
g7133
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g6559
sg6370
g7111
sg6384
g6566
sg6379
g7118
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6525
sg6370
g6732
sg6384
g6532
sg6379
g6739
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6792
sg6370
g6788
sg6384
g6799
sg6379
g6796
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6719
sg6370
g6715
sg6384
g6726
sg6379
g6723
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6412
sg6370
g6589
sg6384
g6419
sg6379
g6596
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g6608
sg6370
g6604
sg6384
g6615
sg6379
g6612
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g6663
sg6370
g6687
sg6384
g6657
sg6379
g6694
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g7314
sg6370
g7310
sg6384
g7321
sg6379
g7318
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6792
sg6370
g7327
sg6384
g6799
sg6379
g7334
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6663
sg6370
g6653
sg6384
g6657
sg6379
g6661
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g6719
sg6370
g6715
sg6384
g6726
sg6379
g6723
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g6962
sg6370
g7381
sg6384
g6969
sg6379
g7388
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6674
sg6370
g6670
sg6384
g6681
sg6379
g6678
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6480
sg6370
g6831
sg6384
g6487
sg6379
g6838
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6446
sg6370
g6638
sg6384
g6453
sg6379
g6645
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g7314
sg6370
g7435
sg6384
g7321
sg6379
g7442
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6480
sg6370
g6831
sg6384
g6487
sg6379
g6838
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6625
sg6370
g7463
sg6384
g6632
sg6379
g7470
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6876
sg6370
g6872
sg6384
g6883
sg6379
g6880
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6375
sg6370
g6773
sg6384
g6385
sg6379
g6780
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g6962
sg6370
g6958
sg6384
g6969
sg6379
g6966
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g7314
sg6370
g7435
sg6384
g7321
sg6379
g7442
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g6792
sg6370
g6788
sg6384
g6799
sg6379
g6796
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g6582
sg6370
g6572
sg6384
g6576
sg6379
g6580
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g6375
sg6370
g6773
sg6384
g6385
sg6379
g6780
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6463
sg6370
g6988
sg6384
g6470
sg6379
g6995
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g7314
sg6370
g7310
sg6384
g7321
sg6379
g7318
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g6625
sg6370
g6621
sg6384
g6632
sg6379
g6629
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6663
sg6370
g6653
sg6384
g6657
sg6379
g6661
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g6792
sg6370
g7327
sg6384
g6799
sg6379
g7334
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g7314
sg6370
g7310
sg6384
g7321
sg6379
g7318
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g6625
sg6370
g7463
sg6384
g6632
sg6379
g7470
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g6674
sg6370
g6915
sg6384
g6681
sg6379
g6922
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6962
sg6370
g7381
sg6384
g6969
sg6379
g7388
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g6395
sg6370
g6506
sg6384
g6402
sg6379
g6513
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g6608
sg6370
g6604
sg6384
g6615
sg6379
g6612
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6962
sg6370
g7381
sg6384
g6969
sg6379
g7388
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6663
sg6370
g6687
sg6384
g6657
sg6379
g6694
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g6463
sg6370
g6988
sg6384
g6470
sg6379
g6995
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6375
sg6370
g6773
sg6384
g6385
sg6379
g6780
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6663
sg6370
g6687
sg6384
g6657
sg6379
g6694
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g6674
sg6370
g6915
sg6384
g6681
sg6379
g6922
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g6608
sg6370
g7126
sg6384
g6615
sg6379
g7133
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g6962
sg6370
g6958
sg6384
g6969
sg6379
g6966
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6674
sg6370
g6915
sg6384
g6681
sg6379
g6922
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6429
sg6370
g7933
sg6384
g6436
sg6379
g7940
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g6674
sg6370
g6670
sg6384
g6681
sg6379
g6678
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g6876
sg6370
g7961
sg6384
g6883
sg6379
g7968
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6719
sg6370
g7070
sg6384
g6726
sg6379
g7077
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g6608
sg6370
g7126
sg6384
g6615
sg6379
g7133
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g6412
sg6370
g6589
sg6384
g6419
sg6379
g6596
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6625
sg6370
g7463
sg6384
g6632
sg6379
g7470
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g6663
sg6370
g6687
sg6384
g6657
sg6379
g6694
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g6412
sg6370
g6589
sg6384
g6419
sg6379
g6596
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g6559
sg6370
g7111
sg6384
g6566
sg6379
g7118
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6582
sg6370
g7042
sg6384
g6576
sg6379
g7049
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g6876
sg6370
g7961
sg6384
g6883
sg6379
g7968
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g7314
sg6370
g7435
sg6384
g7321
sg6379
g7442
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g6559
sg6370
g7111
sg6384
g6566
sg6379
g7118
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6395
sg6370
g6506
sg6384
g6402
sg6379
g6513
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g7314
sg6370
g7435
sg6384
g7321
sg6379
g7442
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g6674
sg6370
g6915
sg6384
g6681
sg6379
g6922
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6582
sg6370
g6572
sg6384
g6576
sg6379
g6580
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6792
sg6370
g7327
sg6384
g6799
sg6379
g7334
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g6719
sg6370
g7070
sg6384
g6726
sg6379
g7077
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g6792
sg6370
g6788
sg6384
g6799
sg6379
g6796
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6542
sg6370
g6943
sg6384
g6549
sg6379
g6950
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6625
sg6370
g7463
sg6384
g6632
sg6379
g7470
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6480
sg6370
g6831
sg6384
g6487
sg6379
g6838
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g6446
sg6370
g6638
sg6384
g6453
sg6379
g6645
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g6608
sg6370
g7126
sg6384
g6615
sg6379
g7133
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6582
sg6370
g7042
sg6384
g6576
sg6379
g7049
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g6446
sg6370
g6638
sg6384
g6453
sg6379
g6645
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g6876
sg6370
g7961
sg6384
g6883
sg6379
g7968
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6674
sg6370
g6670
sg6384
g6681
sg6379
g6678
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g6719
sg6370
g7070
sg6384
g6726
sg6379
g7077
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6608
sg6370
g7126
sg6384
g6615
sg6379
g7133
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6525
sg6370
g6732
sg6384
g6532
sg6379
g6739
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6559
sg6370
g6555
sg6384
g6566
sg6379
g6563
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6719
sg6370
g7070
sg6384
g6726
sg6379
g7077
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g6559
sg6370
g7111
sg6384
g6566
sg6379
g7118
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6582
sg6370
g7042
sg6384
g6576
sg6379
g7049
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6429
sg6370
g7933
sg6384
g6436
sg6379
g7940
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g6582
sg6370
g6572
sg6384
g6576
sg6379
g6580
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g6582
sg6370
g7042
sg6384
g6576
sg6379
g7049
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6525
sg6370
g6732
sg6384
g6532
sg6379
g6739
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6429
sg6370
g7933
sg6384
g6436
sg6379
g7940
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g6608
sg6370
g6604
sg6384
g6615
sg6379
g6612
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g6625
sg6370
g6621
sg6384
g6632
sg6379
g6629
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g6525
sg6370
g6521
sg6384
g6532
sg6379
g6529
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g6480
sg6370
g6831
sg6384
g6487
sg6379
g6838
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6876
sg6370
g6872
sg6384
g6883
sg6379
g6880
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g6625
sg6370
g6621
sg6384
g6632
sg6379
g6629
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g6962
sg6370
g7381
sg6384
g6969
sg6379
g7388
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g6876
sg6370
g6872
sg6384
g6883
sg6379
g6880
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6792
sg6370
g7327
sg6384
g6799
sg6379
g7334
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6429
sg6370
g7933
sg6384
g6436
sg6379
g7940
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6876
sg6370
g7961
sg6384
g6883
sg6379
g7968
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g6542
sg6370
g6943
sg6384
g6549
sg6379
g6950
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6412
sg6370
g6589
sg6384
g6419
sg6379
g6596
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6542
sg6370
g6943
sg6384
g6549
sg6379
g6950
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g6962
sg6370
g6958
sg6384
g6969
sg6379
g6966
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6663
sg6370
g6653
sg6384
g6657
sg6379
g6661
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g6375
sg6370
g6773
sg6384
g6385
sg6379
g6780
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6608
sg6370
g6604
sg6384
g6615
sg6379
g6612
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6463
sg6370
g6988
sg6384
g6470
sg6379
g6995
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6876
sg6370
g6872
sg6384
g6883
sg6379
g6880
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g6792
sg6370
g7327
sg6384
g6799
sg6379
g7334
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g6463
sg6370
g6988
sg6384
g6470
sg6379
g6995
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g6663
sg6370
g6653
sg6384
g6657
sg6379
g6661
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6395
sg6370
g6506
sg6384
g6402
sg6379
g6513
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g7314
sg6370
g7435
sg6384
g7321
sg6379
g7442
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6674
sg6370
g6670
sg6384
g6681
sg6379
g6678
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6559
sg6370
g6555
sg6384
g6566
sg6379
g6563
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g6625
sg6370
g7463
sg6384
g6632
sg6379
g7470
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g6542
sg6370
g6943
sg6384
g6549
sg6379
g6950
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6446
sg6370
g6638
sg6384
g6453
sg6379
g6645
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g6876
sg6370
g7961
sg6384
g6883
sg6379
g7968
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g6719
sg6370
g6715
sg6384
g6726
sg6379
g6723
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g7314
sg6370
g7310
sg6384
g7321
sg6379
g7318
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6962
sg6370
g7381
sg6384
g6969
sg6379
g7388
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g7314
sg6370
g7310
sg6384
g7321
sg6379
g7318
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g6429
sg6370
g7933
sg6384
g6436
sg6379
g7940
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.