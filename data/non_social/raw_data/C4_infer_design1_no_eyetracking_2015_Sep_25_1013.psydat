ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C4_infer_design1_no_eyetracking_2015_Sep_25_1013
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vr
sVcontacts
p57
Vn
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'[\xc0\xdb\x0e\x13\x00N@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Sep_25_1013
p66
sVparticipant
p67
VC4
p68
sVglasses
p69
Vn
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vr
sg15
F4.5833569014200748
sg14
S'space'
p88
sg58
g62
sg57
Vn
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp89
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F7.6000077546607372
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P5\x00'
tbsg69
Vn
sa(dp95
g63
g64
sg20
F10.834
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F0.15999999999999939
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x1a\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V35-raisins.png
p102
sg21
F1.1000000000000001
sg69
Vn
sa(dp103
g63
g64
sg20
F2.2509999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'\x1c\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p109
sg21
F1.1000000000000001
sg69
Vn
sa(dp110
g63
g64
sg20
F2.6509999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S'\t\x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p116
sg21
F2
sg69
Vn
sa(dp117
g63
g64
sg20
F6.7839999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F0.17999999999999849
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'!\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V44-crunch.png
p123
sg21
F1.8999999999999999
sg69
Vn
sa(dp124
g63
g64
sg20
F2.367
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'\x14\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p130
sg21
F1.2
sg69
Vn
sa(dp131
g63
g64
sg20
F1.9510000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'\x1b\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p137
sg21
F1.3999999999999999
sg69
Vn
sa(dp138
g63
g64
sg20
F1.9670000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'\x17\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p144
sg21
F1.5
sg69
Vn
sa(dp145
g63
g64
sg20
F1.984
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'\x07\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p151
sg21
F1.5
sg69
Vn
sa(dp152
g63
g64
sg20
F1.9670000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x1d\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V40-sardines.png
p158
sg21
F1.3
sg69
Vn
sa(dp159
g63
g64
sg20
F2.0169999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'%\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p165
sg21
F1.5
sg69
Vn
sa(dp166
g63
g64
sg20
F2.3340000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'\x1e\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p172
sg21
F1.8999999999999999
sg69
Vn
sa(dp173
g63
g64
sg20
F0.56699999999999995
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F1.8999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S'\x04\x00\x00\x00'
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p179
sg21
F1.8999999999999999
sg69
Vn
sa(dp180
g63
g64
sg20
F3.7170000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'\x08\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p186
sg21
F1.8999999999999999
sg69
Vn
sa(dp187
g63
g64
sg20
F2.3340000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'#\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p193
sg21
F1.2
sg69
Vn
sa(dp194
g63
g64
sg20
F2.1840000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'\x0f\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p200
sg21
F1.6000000000000001
sg69
Vn
sa(dp201
g63
g64
sg20
F2.101
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'\x02\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p207
sg21
F1.7
sg69
Vn
sa(dp208
g63
g64
sg20
F1.8340000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'\r\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p214
sg21
F1.2
sg69
Vn
sa(dp215
g63
g64
sg20
F1.2509999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'\x06\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V7-olives.png
p221
sg21
F1
sg69
Vn
sa(dp222
g63
g64
sg20
F1.5669999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x18\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p228
sg21
F1
sg69
Vn
sa(dp229
g63
g64
sg20
F2.734
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'\x11\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p235
sg21
F1.5
sg69
Vn
sa(dp236
g63
g64
sg20
F2.1840000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'\x13\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p242
sg21
F2
sg69
Vn
sa(dp243
g63
g64
sg20
F2.367
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'\x01\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p249
sg21
F1.8999999999999999
sg69
Vn
sa(dp250
g63
g64
sg20
F4.2679999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S'\x15\x00\x00\x00'
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V29-beans.png
p256
sg21
F1.1000000000000001
sg69
Vn
sa(dp257
g63
g64
sg20
F1.984
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'\x00\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p263
sg21
F1.5
sg69
Vn
sa(dp264
g63
g64
sg20
F3.3340000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F0.039999999999998717
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'\x03\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V4-corn.png
p270
sg21
F1.8
sg69
Vn
sa(dp271
g63
g64
sg20
F2.3340000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'\x0e\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p277
sg21
F1.7
sg69
Vn
sa(dp278
g63
g64
sg20
F1.901
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'\x10\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V22-daim.png
p284
sg21
F1.5
sg69
Vn
sa(dp285
g63
g64
sg20
F3.234
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S'$\x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V48-twix.png
p291
sg21
F1.8
sg69
Vn
sa(dp292
g63
g64
sg20
F3.117
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S'\x05\x00\x00\x00'
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p298
sg21
F1.8999999999999999
sg69
Vn
sa(dp299
g63
g64
sg20
F2.2170000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S'\x1f\x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p305
sg21
F1.6000000000000001
sg69
Vn
sa(dp306
g63
g64
sg20
F1.5840000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S'\x12\x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p312
sg21
F1.3999999999999999
sg69
Vn
sa(dp313
g63
g64
sg20
F1.4670000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S'\x0c\x00\x00\x00'
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V18-mms.png
p319
sg21
F1.2
sg69
Vn
sa(dp320
g63
g64
sg20
F1.867
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'\n\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p326
sg21
F1.3
sg69
Vn
sa(dp327
g63
g64
sg20
F2.5009999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S' \x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p333
sg21
F1.3
sg69
Vn
sa(dp334
g63
g64
sg20
F2.2170000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'"\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p340
sg21
F1.6000000000000001
sg69
Vn
sa(dp341
g63
g64
sg20
F1.784
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S"'\x00\x00\x00"
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V51-mars.png
p347
sg21
F1.2
sg69
Vn
sa(dp348
g63
g64
sg20
F1.5669999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S'&\x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V50-polo.png
p354
sg21
F1.5
sg69
Vn
sa(dp355
g63
g64
sg20
F2.117
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S'\x16\x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p361
sg21
F1.3
sg69
Vn
sa(dp362
g63
g64
sg20
F1.734
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'\x0b\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p368
sg21
F1.2
sg69
Vn
sa(dp369
g63
g64
sg20
F1.901
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\x19\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p375
sg21
F1.6000000000000001
sg69
Vn
sa(dp376
g63
g64
sg55
g11
sg56
Vr
sg23
F3.6334320532059792
sg57
Vn
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vn
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p380
sg26
F5.9999999999999973
sg28
F4
sg58
g62
sg57
Vn
sg80
S'4-corn.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vr
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'right'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F1.5833742923873615
sg27
F1.7509999999999999
sg69
Vn
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p389
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'23-crunchie_redo.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vr
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'right'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F1.066729426200709
sg27
F1.3839999999999999
sg69
Vn
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p398
sg26
F4.8000000000000016
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'13-mccoys_steak_crisps.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vr
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'left'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F2.3833590681633723
sg27
F4.9669999999999996
sg69
Vn
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'4-corn.png'
p407
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'10-bounty_redo.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vr
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'left'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F1.5000852442490213
sg27
F1.5840000000000001
sg69
Vn
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'35-raisins.png'
p416
sg26
F3.5999999999999996
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'49-yorkie.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vr
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'left'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F2.8834688308252225
sg27
F2.0169999999999999
sg69
Vn
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'29-beans.png'
p425
sg26
F1.9999999999999996
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'46-pistachios.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vr
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'left'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F4.6166965259119479
sg27
F2.0169999999999999
sg69
Vn
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p434
sg26
F5.5
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'42-mrkipling_lemon_slices.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vr
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'right'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F1.516659691273162
sg27
F1.8009999999999999
sg69
Vn
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p443
sg26
F2.6999999999999988
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'20-fruit_pastilles.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vr
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'left'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F5.2666374536431704
sg27
F1.3340000000000001
sg69
Vn
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p452
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'17-jacobs_mini_cheddars_redo.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vr
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'right'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F2.4667504664200806
sg27
F0.91700000000000004
sg69
Vn
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p461
sg26
F4
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'41-peanuts_redo.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vr
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'left'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F4.0333618621220921
sg27
F3.0840000000000001
sg69
Vn
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p470
sg26
F2.2999999999999989
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'2-steamed_puddings.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vr
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'right'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F3.0168176354670777
sg27
F1.5669999999999999
sg69
Vn
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p479
sg26
F1.399999999999999
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'18-mms.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vr
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'right'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F3.2667175661310921
sg27
F0.91700000000000004
sg69
Vn
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p488
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'33-ambrosia_rice.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vr
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'left'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F1.1500036492520849
sg27
F1.151
sg69
Vn
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p497
sg26
F3.8999999999999995
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'30-spaghetti_hoops.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vr
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'left'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F2.616717623150862
sg27
F2.6840000000000002
sg69
Vn
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'25-kitkat.png'
p506
sg26
F2.9999999999999996
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'31-hobnobs.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vr
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'right'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F5.4999843196196707
sg27
F1.351
sg69
Vn
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'49-yorkie.png'
p515
sg26
F2.6999999999999993
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'35-raisins.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vr
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'right'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F4.1000126013236695
sg27
F1.1839999999999999
sg69
Vn
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'40-sardines.png'
p524
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'5-pineapple.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vr
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'left'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F1.8000871258946063
sg27
F0.98399999999999999
sg69
Vn
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p533
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'8-liquorice_catherine_wheels.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vr
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'left'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F1.2833715554479568
sg27
F1.034
sg69
Vn
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'38-maltesers.png'
p542
sg26
F5.2000000000000011
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'6-sour_patch_kids.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vr
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'left'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F2.8163619351071247
sg27
F1.5169999999999999
sg69
Vn
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'46-pistachios.png'
p551
sg26
F2.2999999999999994
sg28
F3
sg58
g62
sg57
Vn
sg80
S'29-beans.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vr
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'left'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F3.7334660368665027
sg27
F1.4339999999999999
sg69
Vn
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p560
sg26
F4.3000000000000007
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'19-caramello_redo.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vr
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'right'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F2.333406793539325
sg27
F1.2170000000000001
sg69
Vn
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p569
sg26
F3.7000000000000006
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'38-maltesers.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vr
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'right'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F1.4664773427061846
sg27
F2.2509999999999999
sg69
Vn
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'44-crunch.png'
p578
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'26-walkers_smoky_bacon.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vr
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'left'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F1.433430513678104
sg27
F1.2010000000000001
sg69
Vn
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p587
sg26
F2.3999999999999986
sg28
F4
sg58
g62
sg57
Vn
sg80
S'36-fig_rolls.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vr
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'left'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F2.3334016617777706
sg27
F1.867
sg69
Vn
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p596
sg26
F5.2999999999999998
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'21-nakd_banana_crunch.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vr
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'left'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F2.5834957440597464
sg27
F1.117
sg69
Vn
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'50-polo.png'
p605
sg26
F3.2999999999999994
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'48-twix.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vr
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'right'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F1.5834136358866999
sg27
F2.1509999999999998
sg69
Vn
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'51-mars.png'
p614
sg26
F5.2000000000000011
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'27-hartleys_raspberries_jelly.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vr
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'left'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F1.8000765772753766
sg27
F1.284
sg69
Vn
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'22-daim.png'
p623
sg26
F5.2000000000000002
sg28
F4
sg58
g62
sg57
Vn
sg80
S'7-olives.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vr
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'left'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F1.1667035393184051
sg27
F1.5509999999999999
sg69
Vn
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'5-pineapple.png'
p632
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'40-sardines.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vr
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'right'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F1.2834234432516496
sg27
F1.167
sg69
Vn
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p641
sg26
F4.9000000000000021
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'1-treacle_cookies.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vr
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'right'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F2.3334022319741052
sg27
F1.867
sg69
Vn
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p650
sg26
F2.3999999999999986
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vr
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'right'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F2.3667455627373783
sg27
F1.7010000000000001
sg69
Vn
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p659
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'51-mars.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vr
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'right'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F0.95007937123364172
sg27
F1.3839999999999999
sg69
Vn
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'31-hobnobs.png'
p668
sg26
F4
sg28
F4
sg58
g62
sg57
Vn
sg80
S'25-kitkat.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vr
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'left'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F1.3001444305568839
sg27
F2.4510000000000001
sg69
Vn
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p677
sg26
F4.1000000000000014
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'16-skips_prawn.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vr
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'left'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F5.2165463363789968
sg27
F2.734
sg69
Vn
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p686
sg26
F5.0000000000000009
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'45-chewy_nougat_redo.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vr
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'right'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F1.4168560666535086
sg27
F1.2010000000000001
sg69
Vn
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'18-mms.png'
p695
sg26
F2.4999999999999996
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'43-mrporky_pork_crackles_redo.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vr
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'left'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F1.3334176272560399
sg27
F1.401
sg69
Vn
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p704
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'44-crunch.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vr
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'right'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F1.1501085652507754
sg27
F0.80100000000000005
sg69
Vn
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'48-twix.png'
p713
sg26
F2.6999999999999997
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'50-polo.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vr
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'left'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F0.98338820516119085
sg27
F1.3839999999999999
sg69
Vn
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p722
sg26
F2.7999999999999998
sg28
F3
sg58
g62
sg57
Vn
sg80
S'3-ellas_strawberries_apples.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vr
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'right'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F1.866703083162065
sg27
F2.234
sg69
Vn
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'7-olives.png'
p731
sg26
F5.2999999999999998
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'22-daim.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vr
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'right'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F1.8333694457242018
sg27
F1.3839999999999999
sg69
Vn
sa(dp738
g63
g64
sg56
Vr
sg29
S'space'
p739
sg57
Vn
sg58
g62
sg30
F332.05762425703506
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp740
g63
g64
sg56
Vr
sg57
Vn
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F8.4665987943785694
sg65
g66
sg67
g68
sg69
Vn
sa(dp742
g63
g64
sg81
S'11-snickers.png'
p743
sg82
S'11-snickers.png'
p744
sg56
Vr
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'54-frubes_yogurt.png'
p748
sg33
g748
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S'\x07\xdf\t\x19\n\x1a\x13\x0b\x10\x08'
tRp753
sa(dp754
g63
g64
sg81
S'53-cheestrings.png'
p755
sg82
S'53-cheestrings.png'
p756
sg56
Vr
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'47-picnic.png'
p760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S'\x07\xdf\t\x19\n\x1a\x1c\x0c\n\x08'
tRp764
sa(dp765
g63
g64
sg81
S'32-hovis_crackers.png'
p766
sg82
S'32-hovis_crackers.png'
p767
sg56
Vr
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S'\x07\xdf\t\x19\n\x1a$\x00*\xf8'
tRp775
sa(dp776
g63
g64
sg81
S'15-walnut_whip.png'
p777
sg82
S'28-maple_pecan.png'
p778
sg56
Vr
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p781
I0
sg83
S'28-maple_pecan.png'
p782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p783
sS'practice_loop.thisIndex'
p784
g59
(g98
S'\x03\x00\x00\x00'
tRp785
sg34
g752
(S'\x07\xdf\t\x19\n\x1a,\x0c\\\x10'
tRp786
sa(dp787
g63
g64
sg81
S'12-topic.png'
p788
sg82
S'12-topic.png'
p789
sg56
Vr
sS'practice_loop.thisN'
p790
I4
sS'practice_loop.thisTrialN'
p791
I4
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p792
I0
sg83
S'39-mackerel.png'
p793
sg33
g788
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p794
sS'practice_loop.thisIndex'
p795
g59
(g98
S'\x04\x00\x00\x00'
tRp796
sg34
g752
(S'\x07\xdf\t\x19\n\x1a5\x05\xf3p'
tRp797
sa(dp798
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p799
sg82
S'9-yu_mango_pieces.png'
p800
sg56
Vr
sS'practice_loop.thisN'
p801
I5
sS'practice_loop.thisTrialN'
p802
I5
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p803
I0
sg83
S'9-yu_mango_pieces.png'
p804
sg33
g804
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p805
sS'practice_loop.thisIndex'
p806
g59
(g98
S'\x05\x00\x00\x00'
tRp807
sg34
g752
(S'\x07\xdf\t\x19\n\x1b\x00\x06\xf9('
tRp808
sa(dp809
g63
g64
sg81
S'52-aero_mousse.png'
p810
sg82
S'14-discos_salt_vinegar.png'
p811
sg56
Vr
sS'practice_loop.thisN'
p812
I6
sS'practice_loop.thisTrialN'
p813
I6
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p814
I0
sg83
S'14-discos_salt_vinegar.png'
p815
sg33
g810
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p816
sS'practice_loop.thisIndex'
p817
g59
(g98
S'\x06\x00\x00\x00'
tRp818
sg34
g752
(S'\x07\xdf\t\x19\n\x1b\x07\x02\xbf '
tRp819
sa(dp820
g63
g64
sg81
g766
sg82
S'24-food_doctor_apple_walnut_bar.png'
p821
sg56
Vr
sS'practice_loop.thisN'
p822
I7
sS'practice_loop.thisTrialN'
p823
I7
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p824
I0
sg83
g771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p825
sS'practice_loop.thisIndex'
p826
g59
(g98
S'\x07\x00\x00\x00'
tRp827
sg34
g752
(S'\x07\xdf\t\x19\n\x1b\x0e\x00\xea`'
tRp828
sa(dp829
g63
g64
sg81
g810
sg82
S'52-aero_mousse.png'
p830
sg56
Vr
sS'practice_loop.thisN'
p831
I8
sS'practice_loop.thisTrialN'
p832
I8
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p833
I0
sg83
g815
sg33
g810
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p834
sS'practice_loop.thisIndex'
p835
g59
(g98
S'\x08\x00\x00\x00'
tRp836
sg34
g752
(S'\x07\xdf\t\x19\n\x1b\x16\x0cc\xe0'
tRp837
sa(dp838
g63
g64
sg81
g788
sg82
S'39-mackerel.png'
p839
sg56
Vr
sS'practice_loop.thisN'
p840
I9
sS'practice_loop.thisTrialN'
p841
I9
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p842
I0
sg83
g793
sg33
g788
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p843
sS'practice_loop.thisIndex'
p844
g59
(g98
S'\t\x00\x00\x00'
tRp845
sg34
g752
(S'\x07\xdf\t\x19\n\x1b\x1c\r\xe6\x98'
tRp846
sa(dp847
g63
g64
sg81
g755
sg82
S'47-picnic.png'
p848
sg56
Vr
sS'practice_loop.thisN'
p849
I10
sS'practice_loop.thisTrialN'
p850
I10
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p851
I0
sg83
g760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p852
sS'practice_loop.thisIndex'
p853
g59
(g98
S'\n\x00\x00\x00'
tRp854
sg34
g752
(S'\x07\xdf\t\x19\n\x1b#\rB\x88'
tRp855
sa(dp856
g63
g64
sg81
g777
sg82
S'15-walnut_whip.png'
p857
sg56
Vr
sS'practice_loop.thisN'
p858
I11
sS'practice_loop.thisTrialN'
p859
I11
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p860
I0
sg83
g782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\t\x19\n\x1b*\x0e\xfb\xf0'
tRp864
sa(dp865
g63
g64
sg81
g743
sg82
S'54-frubes_yogurt.png'
p866
sg56
Vr
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\t\x19\n\x1b1\x08\xa2\xf0'
tRp873
sa(dp874
g63
g64
sg81
g799
sg82
S'37-nakd_cashew_cookie.png'
p875
sg56
Vr
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g804
sg33
g799
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\t\x19\n\x1b8\x089x'
tRp882
sa(dp883
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F4.1500524009798028
sg65
g66
sg67
g68
sg69
Vn
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vr
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vn
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'30-spaghetti_hoops.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'right'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'19-caramello_redo.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'19-caramello_redo.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p907
I0
sS'img_wrong'
p908
S'30-spaghetti_hoops.png'
p909
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vn
sS'block_loop.thisTrialN'
p911
I0
sg39
F3.7166797621598562
sg34
g752
(S'\x07\xdf\t\x19\n\x1c\x0f\x07\xfe\xe0'
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'5-pineapple.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'right'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'5-pineapple.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'40-sardines.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p925
I0
sg908
S'40-sardines.png'
p926
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vn
sS'block_loop.thisTrialN'
p928
I0
sg39
F2.2334859937141118
sg34
g752
(S'\x07\xdf\t\x19\n\x1c\x18\x03\xf7\xa0'
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'50-polo.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'right'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
S'50-polo.png'
p936
sg63
g64
sS'trial_loop.thisIndex'
p937
g59
(g98
S'\x02\x00\x00\x00'
tRp938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p939
I0
sg903
S'48-twix.png'
p940
sS'block_loop.thisRepN'
p941
I0
sg906
S'48-twix.png'
p942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p943
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p944
Nsg69
Vn
sS'block_loop.thisTrialN'
p945
I0
sg39
F1.1334368998691389
sg34
g752
(S'\x07\xdf\t\x19\n\x1c\x1f\x08\x16P'
tRp946
sa(dp947
S'trial_loop.thisTrialN'
p948
I3
sg894
S'7-olives.png'
p949
sS'block_loop.thisIndex'
p950
g888
sg38
S'right'
p951
sg58
g62
sS'trial_loop.thisN'
p952
I3
sg33
S'22-daim.png'
p953
sg63
g64
sS'trial_loop.thisIndex'
p954
g59
(g98
S'\x03\x00\x00\x00'
tRp955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p956
I0
sg903
S'22-daim.png'
p957
sS'block_loop.thisRepN'
p958
I0
sg906
S'7-olives.png'
p959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p960
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p961
Nsg69
Vn
sS'block_loop.thisTrialN'
p962
I0
sg39
F1.2834188816868846
sg34
g752
(S'\x07\xdf\t\x19\n\x1c%\n\x8f '
tRp963
sa(dp964
S'trial_loop.thisTrialN'
p965
I4
sg894
S'25-kitkat.png'
p966
sS'block_loop.thisIndex'
p967
g888
sg38
S'right'
p968
sg58
g62
sS'trial_loop.thisN'
p969
I4
sg33
S'31-hobnobs.png'
p970
sg63
g64
sS'trial_loop.thisIndex'
p971
g59
(g98
S'\x04\x00\x00\x00'
tRp972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p973
I0
sg903
S'31-hobnobs.png'
p974
sS'block_loop.thisRepN'
p975
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p976
I0
sg908
S'25-kitkat.png'
p977
sg55
g11
sS'block_loop.thisTrial'
p978
Nsg69
Vn
sS'block_loop.thisTrialN'
p979
I0
sg39
F1.1834869630465619
sg34
g752
(S"\x07\xdf\t\x19\n\x1c,\x00'\x10"
tRp980
sa(dp981
S'trial_loop.thisTrialN'
p982
I5
sg894
S'36-fig_rolls.png'
p983
sS'block_loop.thisIndex'
p984
g888
sg38
S'right'
p985
sg58
g62
sS'trial_loop.thisN'
p986
I5
sg33
S'36-fig_rolls.png'
p987
sg63
g64
sS'trial_loop.thisIndex'
p988
g59
(g98
S'\x05\x00\x00\x00'
tRp989
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p990
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p991
sS'block_loop.thisRepN'
p992
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p993
I0
sg908
S'34-hula_hoops_bbq_beef_redo.png'
p994
sg55
g11
sS'block_loop.thisTrial'
p995
Nsg69
Vn
sS'block_loop.thisTrialN'
p996
I0
sg39
F1.100095279692141
sg34
g752
(S'\x07\xdf\t\x19\n\x1c2\x03\x92\x10'
tRp997
sa(dp998
S'trial_loop.thisTrialN'
p999
I6
sg894
S'10-bounty_redo.png'
p1000
sS'block_loop.thisIndex'
p1001
g888
sg38
S'right'
p1002
sg58
g62
sS'trial_loop.thisN'
p1003
I6
sg33
S'10-bounty_redo.png'
p1004
sg63
g64
sS'trial_loop.thisIndex'
p1005
g59
(g98
S'\x06\x00\x00\x00'
tRp1006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1007
I0
sg903
S'4-corn.png'
p1008
sS'block_loop.thisRepN'
p1009
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1010
I0
sg908
S'4-corn.png'
p1011
sg55
g11
sS'block_loop.thisTrial'
p1012
Nsg69
Vn
sS'block_loop.thisTrialN'
p1013
I0
sg39
F1.7001469394176638
sg34
g752
(S'\x07\xdf\t\x19\n\x1c8\x05\x91\xc8'
tRp1014
sa(dp1015
S'trial_loop.thisTrialN'
p1016
I7
sg894
S'22-daim.png'
p1017
sS'block_loop.thisIndex'
p1018
g888
sg38
S'left'
p1019
sg58
g62
sS'trial_loop.thisN'
p1020
I7
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1021
g59
(g98
S'\x07\x00\x00\x00'
tRp1022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1023
I0
sg903
S'7-olives.png'
p1024
sS'block_loop.thisRepN'
p1025
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1026
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p1027
Nsg69
Vn
sS'block_loop.thisTrialN'
p1028
I0
sg39
F1.1501248158265298
sg34
g752
(S'\x07\xdf\t\x19\n\x1d\x03\x01\x96@'
tRp1029
sa(dp1030
S'trial_loop.thisTrialN'
p1031
I8
sg894
S'44-crunch.png'
p1032
sS'block_loop.thisIndex'
p1033
g888
sg38
S'left'
p1034
sg58
g62
sS'trial_loop.thisN'
p1035
I8
sg33
S'44-crunch.png'
p1036
sg63
g64
sS'trial_loop.thisIndex'
p1037
g59
(g98
S'\x08\x00\x00\x00'
tRp1038
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1039
I0
sg903
S'26-walkers_smoky_bacon.png'
p1040
sS'block_loop.thisRepN'
p1041
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1042
I0
sg908
S'26-walkers_smoky_bacon.png'
p1043
sg55
g11
sS'block_loop.thisTrial'
p1044
Nsg69
Vn
sS'block_loop.thisTrialN'
p1045
I0
sg39
F1.1832959475054849
sg34
g752
(S'\x07\xdf\t\x19\n\x1d\t\x04M\x90'
tRp1046
sa(dp1047
S'trial_loop.thisTrialN'
p1048
I9
sg894
S'19-caramello_redo.png'
p1049
sS'block_loop.thisIndex'
p1050
g888
sg38
S'left'
p1051
sg58
g62
sS'trial_loop.thisN'
p1052
I9
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1053
g59
(g98
S'\t\x00\x00\x00'
tRp1054
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1055
I0
sg903
S'30-spaghetti_hoops.png'
p1056
sS'block_loop.thisRepN'
p1057
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1058
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1059
Nsg69
Vn
sS'block_loop.thisTrialN'
p1060
I0
sg39
F1.7334335357149939
sg34
g752
(S'\x07\xdf\t\x19\n\x1d\x0f\x07\xb8\x90'
tRp1061
sa(dp1062
S'trial_loop.thisTrialN'
p1063
I10
sg894
S'51-mars.png'
p1064
sS'block_loop.thisIndex'
p1065
g888
sg38
S'left'
p1066
sg58
g62
sS'trial_loop.thisN'
p1067
I10
sg33
S'51-mars.png'
p1068
sg63
g64
sS'trial_loop.thisIndex'
p1069
g59
(g98
S'\n\x00\x00\x00'
tRp1070
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1071
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p1072
sS'block_loop.thisRepN'
p1073
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1074
I0
sg908
S'27-hartleys_raspberries_jelly.png'
p1075
sg55
g11
sS'block_loop.thisTrial'
p1076
Nsg69
Vn
sS'block_loop.thisTrialN'
p1077
I0
sg39
F1.0667761822437569
sg34
g752
(S'\x07\xdf\t\x19\n\x1d\x16\x03\xfb\x88'
tRp1078
sa(dp1079
S'trial_loop.thisTrialN'
p1080
I11
sg894
g1017
sS'block_loop.thisIndex'
p1081
g888
sg38
S'left'
p1082
sg58
g62
sS'trial_loop.thisN'
p1083
I11
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p1084
g59
(g98
S'\x0b\x00\x00\x00'
tRp1085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1086
I0
sg903
g1024
sS'block_loop.thisRepN'
p1087
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1088
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p1089
Nsg69
Vn
sS'block_loop.thisTrialN'
p1090
I0
sg39
F1.0834849103425768
sg34
g752
(S'\x07\xdf\t\x19\n\x1d\x1c\x05\x82('
tRp1091
sa(dp1092
S'trial_loop.thisTrialN'
p1093
I12
sg894
S'23-crunchie_redo.png'
p1094
sS'block_loop.thisIndex'
p1095
g888
sg38
S'left'
p1096
sg58
g62
sS'trial_loop.thisN'
p1097
I12
sg33
S'23-crunchie_redo.png'
p1098
sg63
g64
sS'trial_loop.thisIndex'
p1099
g59
(g98
S'\x0c\x00\x00\x00'
tRp1100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1101
I0
sg903
S'33-ambrosia_rice.png'
p1102
sS'block_loop.thisRepN'
p1103
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1104
I0
sg908
S'33-ambrosia_rice.png'
p1105
sg55
g11
sS'block_loop.thisTrial'
p1106
Nsg69
Vn
sS'block_loop.thisTrialN'
p1107
I0
sg39
F0.91677880514362187
sg34
g752
(S'\x07\xdf\t\x19\n\x1d"\x07C`'
tRp1108
sa(dp1109
S'trial_loop.thisTrialN'
p1110
I13
sg894
g1032
sS'block_loop.thisIndex'
p1111
g888
sg38
S'left'
p1112
sg58
g62
sS'trial_loop.thisN'
p1113
I13
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p1114
g59
(g98
S'\r\x00\x00\x00'
tRp1115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1116
I0
sg903
g1040
sS'block_loop.thisRepN'
p1117
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1118
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p1119
Nsg69
Vn
sS'block_loop.thisTrialN'
p1120
I0
sg39
F0.96685680790778861
sg34
g752
(S'\x07\xdf\t\x19\n\x1d(\x06\xa38'
tRp1121
sa(dp1122
S'trial_loop.thisTrialN'
p1123
I14
sg894
S'21-nakd_banana_crunch.png'
p1124
sS'block_loop.thisIndex'
p1125
g888
sg38
S'right'
p1126
sg58
g62
sS'trial_loop.thisN'
p1127
I14
sg33
S'1-treacle_cookies.png'
p1128
sg63
g64
sS'trial_loop.thisIndex'
p1129
g59
(g98
S'\x0e\x00\x00\x00'
tRp1130
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1131
I0
sg903
S'1-treacle_cookies.png'
p1132
sS'block_loop.thisRepN'
p1133
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1134
I0
sg908
S'21-nakd_banana_crunch.png'
p1135
sg55
g11
sS'block_loop.thisTrial'
p1136
Nsg69
Vn
sS'block_loop.thisTrialN'
p1137
I0
sg39
F1.3500821651923616
sg34
g752
(S'\x07\xdf\t\x19\n\x1d.\x06|('
tRp1138
sa(dp1139
S'trial_loop.thisTrialN'
p1140
I15
sg894
g915
sS'block_loop.thisIndex'
p1141
g888
sg38
S'right'
p1142
sg58
g62
sS'trial_loop.thisN'
p1143
I15
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1144
g59
(g98
S'\x0f\x00\x00\x00'
tRp1145
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1146
I0
sg903
g923
sS'block_loop.thisRepN'
p1147
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1148
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1149
Nsg69
Vn
sS'block_loop.thisTrialN'
p1150
I0
sg39
F1.1834376411234189
sg34
g752
(S'\x07\xdf\t\x19\n\x1d4\x0c\x87\x08'
tRp1151
sa(dp1152
S'trial_loop.thisTrialN'
p1153
I16
sg894
S'42-mrkipling_lemon_slices.png'
p1154
sS'block_loop.thisIndex'
p1155
g888
sg38
S'left'
p1156
sg58
g62
sS'trial_loop.thisN'
p1157
I16
sg33
S'42-mrkipling_lemon_slices.png'
p1158
sg63
g64
sS'trial_loop.thisIndex'
p1159
g59
(g98
S'\x10\x00\x00\x00'
tRp1160
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1161
I0
sg903
S'16-skips_prawn.png'
p1162
sS'block_loop.thisRepN'
p1163
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1164
I0
sg908
S'16-skips_prawn.png'
p1165
sg55
g11
sS'block_loop.thisTrial'
p1166
Nsg69
Vn
sS'block_loop.thisTrialN'
p1167
I0
sg39
F1.3338110622516979
sg34
g752
(S'\x07\xdf\t\x19\n\x1d;\x00u0'
tRp1168
sa(dp1169
S'trial_loop.thisTrialN'
p1170
I17
sg894
S'27-hartleys_raspberries_jelly.png'
p1171
sS'block_loop.thisIndex'
p1172
g888
sg38
S'right'
p1173
sg58
g62
sS'trial_loop.thisN'
p1174
I17
sg33
g1068
sg63
g64
sS'trial_loop.thisIndex'
p1175
g59
(g98
S'\x11\x00\x00\x00'
tRp1176
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1177
I0
sg903
S'51-mars.png'
p1178
sS'block_loop.thisRepN'
p1179
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1180
I0
sg908
g1075
sg55
g11
sS'block_loop.thisTrial'
p1181
Nsg69
Vn
sS'block_loop.thisTrialN'
p1182
I0
sg39
F1.6833866086130911
sg34
g752
(S'\x07\xdf\t\x19\n\x1e\x05\x06\x06\xf8'
tRp1183
sa(dp1184
S'trial_loop.thisTrialN'
p1185
I18
sg894
S'17-jacobs_mini_cheddars_redo.png'
p1186
sS'block_loop.thisIndex'
p1187
g888
sg38
S'left'
p1188
sg58
g62
sS'trial_loop.thisN'
p1189
I18
sg33
S'8-liquorice_catherine_wheels.png'
p1190
sg63
g64
sS'trial_loop.thisIndex'
p1191
g59
(g98
S'\x12\x00\x00\x00'
tRp1192
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1193
I0
sg903
S'8-liquorice_catherine_wheels.png'
p1194
sS'block_loop.thisRepN'
p1195
I0
sg906
g1190
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1196
I0
sg908
S'17-jacobs_mini_cheddars_redo.png'
p1197
sg55
g11
sS'block_loop.thisTrial'
p1198
Nsg69
Vn
sS'block_loop.thisTrialN'
p1199
I0
sg39
F1.2167615852349627
sg34
g752
(S'\x07\xdf\t\x19\n\x1e\x0c\x01\xd0\xd8'
tRp1200
sa(dp1201
S'trial_loop.thisTrialN'
p1202
I19
sg894
g1171
sS'block_loop.thisIndex'
p1203
g888
sg38
S'right'
p1204
sg58
g62
sS'trial_loop.thisN'
p1205
I19
sg33
g1068
sg63
g64
sS'trial_loop.thisIndex'
p1206
g59
(g98
S'\x13\x00\x00\x00'
tRp1207
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1208
I0
sg903
g1178
sS'block_loop.thisRepN'
p1209
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1210
I0
sg908
g1075
sg55
g11
sS'block_loop.thisTrial'
p1211
Nsg69
Vn
sS'block_loop.thisTrialN'
p1212
I0
sg39
F1.1167489839112932
sg34
g752
(S'\x07\xdf\t\x19\n\x1e\x12\x05zX'
tRp1213
sa(dp1214
S'trial_loop.thisTrialN'
p1215
I20
sg894
S'38-maltesers.png'
p1216
sS'block_loop.thisIndex'
p1217
g888
sg38
S'left'
p1218
sg58
g62
sS'trial_loop.thisN'
p1219
I20
sg33
S'38-maltesers.png'
p1220
sg63
g64
sS'trial_loop.thisIndex'
p1221
g59
(g98
S'\x14\x00\x00\x00'
tRp1222
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1223
I0
sg903
S'6-sour_patch_kids.png'
p1224
sS'block_loop.thisRepN'
p1225
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1226
I0
sg908
S'6-sour_patch_kids.png'
p1227
sg55
g11
sS'block_loop.thisTrial'
p1228
Nsg69
Vn
sS'block_loop.thisTrialN'
p1229
I0
sg39
F1.2165814034110554
sg34
g752
(S'\x07\xdf\t\x19\n\x1e\x18\x07\xf3('
tRp1230
sa(dp1231
S'trial_loop.thisTrialN'
p1232
I21
sg894
S'2-steamed_puddings.png'
p1233
sS'block_loop.thisIndex'
p1234
g888
sg38
S'left'
p1235
sg58
g62
sS'trial_loop.thisN'
p1236
I21
sg33
S'2-steamed_puddings.png'
p1237
sg63
g64
sS'trial_loop.thisIndex'
p1238
g59
(g98
S'\x15\x00\x00\x00'
tRp1239
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1240
I0
sg903
S'20-fruit_pastilles.png'
p1241
sS'block_loop.thisRepN'
p1242
I0
sg906
g1237
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1243
I0
sg908
S'20-fruit_pastilles.png'
p1244
sg55
g11
sS'block_loop.thisTrial'
p1245
Nsg69
Vn
sS'block_loop.thisTrialN'
p1246
I0
sg39
F1.2335173544743157
sg34
g752
(S'\x07\xdf\t\x19\n\x1e\x1e\x0b\x9c\xa8'
tRp1247
sa(dp1248
S'trial_loop.thisTrialN'
p1249
I22
sg894
g1064
sS'block_loop.thisIndex'
p1250
g888
sg38
S'left'
p1251
sg58
g62
sS'trial_loop.thisN'
p1252
I22
sg33
g1068
sg63
g64
sS'trial_loop.thisIndex'
p1253
g59
(g98
S'\x16\x00\x00\x00'
tRp1254
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1255
I0
sg903
g1072
sS'block_loop.thisRepN'
p1256
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1257
I0
sg908
g1075
sg55
g11
sS'block_loop.thisTrial'
p1258
Nsg69
Vn
sS'block_loop.thisTrialN'
p1259
I0
sg39
F0.91679277493676636
sg34
g752
(S'\x07\xdf\t\x19\n\x1e%\x00}\x00'
tRp1260
sa(dp1261
S'trial_loop.thisTrialN'
p1262
I23
sg894
g1154
sS'block_loop.thisIndex'
p1263
g888
sg38
S'left'
p1264
sg58
g62
sS'trial_loop.thisN'
p1265
I23
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p1266
g59
(g98
S'\x17\x00\x00\x00'
tRp1267
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1268
I0
sg903
g1162
sS'block_loop.thisRepN'
p1269
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1270
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p1271
Nsg69
Vn
sS'block_loop.thisTrialN'
p1272
I0
sg39
F1.3666483443803372
sg34
g752
(S'\x07\xdf\t\x19\n\x1e*\x0e\xe0\x98'
tRp1273
sa(dp1274
S'trial_loop.thisTrialN'
p1275
I24
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p1276
sS'block_loop.thisIndex'
p1277
g888
sg38
S'left'
p1278
sg58
g62
sS'trial_loop.thisN'
p1279
I24
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1280
g59
(g98
S'\x18\x00\x00\x00'
tRp1281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1282
I0
sg903
S'36-fig_rolls.png'
p1283
sS'block_loop.thisRepN'
p1284
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1285
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p1286
Nsg69
Vn
sS'block_loop.thisTrialN'
p1287
I0
sg39
F1.0501107890136154
sg34
g752
(S'\x07\xdf\t\x19\n\x1e1\x05\xe7\xb8'
tRp1288
sa(dp1289
S'trial_loop.thisTrialN'
p1290
I25
sg894
S'20-fruit_pastilles.png'
p1291
sS'block_loop.thisIndex'
p1292
g888
sg38
S'right'
p1293
sg58
g62
sS'trial_loop.thisN'
p1294
I25
sg33
g1237
sg63
g64
sS'trial_loop.thisIndex'
p1295
g59
(g98
S'\x19\x00\x00\x00'
tRp1296
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1297
I0
sg903
S'2-steamed_puddings.png'
p1298
sS'block_loop.thisRepN'
p1299
I0
sg906
g1237
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1300
I0
sg908
g1244
sg55
g11
sS'block_loop.thisTrial'
p1301
Nsg69
Vn
sS'block_loop.thisTrialN'
p1302
I0
sg39
F0.90011569269654501
sg34
g752
(S'\x07\xdf\t\x19\n\x1e7\x07/\xd8'
tRp1303
sa(dp1304
S'trial_loop.thisTrialN'
p1305
I26
sg894
S'31-hobnobs.png'
p1306
sS'block_loop.thisIndex'
p1307
g888
sg38
S'left'
p1308
sg58
g62
sS'trial_loop.thisN'
p1309
I26
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1310
g59
(g98
S'\x1a\x00\x00\x00'
tRp1311
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1312
I0
sg903
S'25-kitkat.png'
p1313
sS'block_loop.thisRepN'
p1314
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1315
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1316
Nsg69
Vn
sS'block_loop.thisTrialN'
p1317
I0
sg39
F1.2335381666157446
sg34
g752
(S'\x07\xdf\t\x19\n\x1f\x01\x06\x16\x98'
tRp1318
sa(dp1319
S'trial_loop.thisTrialN'
p1320
I27
sg894
g1171
sS'block_loop.thisIndex'
p1321
g888
sg38
S'right'
p1322
sg58
g62
sS'trial_loop.thisN'
p1323
I27
sg33
g1068
sg63
g64
sS'trial_loop.thisIndex'
p1324
g59
(g98
S'\x1b\x00\x00\x00'
tRp1325
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1326
I0
sg903
g1178
sS'block_loop.thisRepN'
p1327
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1328
I0
sg908
g1075
sg55
g11
sS'block_loop.thisTrial'
p1329
Nsg69
Vn
sS'block_loop.thisTrialN'
p1330
I0
sg39
F1.0834210484304094
sg34
g752
(S'\x07\xdf\t\x19\n\x1f\x07\n90'
tRp1331
sa(dp1332
S'trial_loop.thisTrialN'
p1333
I28
sg894
g1017
sS'block_loop.thisIndex'
p1334
g888
sg38
S'left'
p1335
sg58
g62
sS'trial_loop.thisN'
p1336
I28
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1337
g59
(g98
S'\x1c\x00\x00\x00'
tRp1338
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1339
I0
sg903
g1024
sS'block_loop.thisRepN'
p1340
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1341
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p1342
Nsg69
Vn
sS'block_loop.thisTrialN'
p1343
I0
sg39
F1.2167610150395376
sg34
g752
(S'\x07\xdf\t\x19\n\x1f\r\x0b\xfeP'
tRp1344
sa(dp1345
S'trial_loop.thisTrialN'
p1346
I29
sg894
g1291
sS'block_loop.thisIndex'
p1347
g888
sg38
S'right'
p1348
sg58
g62
sS'trial_loop.thisN'
p1349
I29
sg33
g1237
sg63
g64
sS'trial_loop.thisIndex'
p1350
g59
(g98
S'\x1d\x00\x00\x00'
tRp1351
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1352
I0
sg903
g1298
sS'block_loop.thisRepN'
p1353
I0
sg906
g1237
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1354
I0
sg908
g1244
sg55
g11
sS'block_loop.thisTrial'
p1355
Nsg69
Vn
sS'block_loop.thisTrialN'
p1356
I0
sg39
F0.96677355934389198
sg34
g752
(S'\x07\xdf\t\x19\n\x1f\x14\x00e\x90'
tRp1357
sa(dp1358
S'trial_loop.thisTrialN'
p1359
I30
sg894
S'29-beans.png'
p1360
sS'block_loop.thisIndex'
p1361
g888
sg38
S'right'
p1362
sg58
g62
sS'trial_loop.thisN'
p1363
I30
sg33
S'46-pistachios.png'
p1364
sg63
g64
sS'trial_loop.thisIndex'
p1365
g59
(g98
S'\x1e\x00\x00\x00'
tRp1366
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1367
I0
sg903
S'46-pistachios.png'
p1368
sS'block_loop.thisRepN'
p1369
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1370
I0
sg908
S'29-beans.png'
p1371
sg55
g11
sS'block_loop.thisTrial'
p1372
Nsg69
Vn
sS'block_loop.thisTrialN'
p1373
I0
sg39
F4.350000627215195
sg34
g752
(S'\x07\xdf\t\x19\n\x1f\x1a\x00}\x00'
tRp1374
sa(dp1375
S'trial_loop.thisTrialN'
p1376
I31
sg894
S'4-corn.png'
p1377
sS'block_loop.thisIndex'
p1378
g888
sg38
S'left'
p1379
sg58
g62
sS'trial_loop.thisN'
p1380
I31
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p1381
g59
(g98
S'\x1f\x00\x00\x00'
tRp1382
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1383
I0
sg903
S'10-bounty_redo.png'
p1384
sS'block_loop.thisRepN'
p1385
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1386
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p1387
Nsg69
Vn
sS'block_loop.thisTrialN'
p1388
I0
sg39
F1.0502062967843813
sg34
g752
(S'\x07\xdf\t\x19\n\x1f#\x065\xd8'
tRp1389
sa(dp1390
S'trial_loop.thisTrialN'
p1391
I32
sg894
S'13-mccoys_steak_crisps.png'
p1392
sS'block_loop.thisIndex'
p1393
g888
sg38
S'right'
p1394
sg58
g62
sS'trial_loop.thisN'
p1395
I32
sg33
S'13-mccoys_steak_crisps.png'
p1396
sg63
g64
sS'trial_loop.thisIndex'
p1397
g59
(g98
S' \x00\x00\x00'
tRp1398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1399
I0
sg903
S'3-ellas_strawberries_apples.png'
p1400
sS'block_loop.thisRepN'
p1401
I0
sg906
g1396
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1402
I0
sg908
S'3-ellas_strawberries_apples.png'
p1403
sg55
g11
sS'block_loop.thisTrial'
p1404
Nsg69
Vn
sS'block_loop.thisTrialN'
p1405
I0
sg39
F1.400099157022396
sg34
g752
(S'\x07\xdf\t\x19\n\x1f)\x07}\xf8'
tRp1406
sa(dp1407
S'trial_loop.thisTrialN'
p1408
I33
sg894
g1094
sS'block_loop.thisIndex'
p1409
g888
sg38
S'left'
p1410
sg58
g62
sS'trial_loop.thisN'
p1411
I33
sg33
g1098
sg63
g64
sS'trial_loop.thisIndex'
p1412
g59
(g98
S'!\x00\x00\x00'
tRp1413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1414
I0
sg903
g1102
sS'block_loop.thisRepN'
p1415
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1416
I0
sg908
g1105
sg55
g11
sS'block_loop.thisTrial'
p1417
Nsg69
Vn
sS'block_loop.thisTrialN'
p1418
I0
sg39
F0.93341882466711468
sg34
g752
(S'\x07\xdf\t\x19\n\x1f/\x0e@p'
tRp1419
sa(dp1420
S'trial_loop.thisTrialN'
p1421
I34
sg894
g1216
sS'block_loop.thisIndex'
p1422
g888
sg38
S'left'
p1423
sg58
g62
sS'trial_loop.thisN'
p1424
I34
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p1425
g59
(g98
S'"\x00\x00\x00'
tRp1426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1427
I0
sg903
g1224
sS'block_loop.thisRepN'
p1428
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1429
I0
sg908
g1227
sg55
g11
sS'block_loop.thisTrial'
p1430
Nsg69
Vn
sS'block_loop.thisTrialN'
p1431
I0
sg39
F1.1831762064198301
sg34
g752
(S'\x07\xdf\t\x19\n\x1f5\r\xa0H'
tRp1432
sa(dp1433
S'trial_loop.thisTrialN'
p1434
I35
sg894
g895
sS'block_loop.thisIndex'
p1435
g888
sg38
S'right'
p1436
sg58
g62
sS'trial_loop.thisN'
p1437
I35
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1438
g59
(g98
S'#\x00\x00\x00'
tRp1439
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1440
I0
sg903
g904
sS'block_loop.thisRepN'
p1441
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1442
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1443
Nsg69
Vn
sS'block_loop.thisTrialN'
p1444
I0
sg39
F1.4000980166315458
sg34
g752
(S'\x07\xdf\t\x19\n \x00\x01\xcc\xf0'
tRp1445
sa(dp1446
S'trial_loop.thisTrialN'
p1447
I36
sg894
S'45-chewy_nougat_redo.png'
p1448
sS'block_loop.thisIndex'
p1449
g888
sg38
S'left'
p1450
sg58
g62
sS'trial_loop.thisN'
p1451
I36
sg33
S'41-peanuts_redo.png'
p1452
sg63
g64
sS'trial_loop.thisIndex'
p1453
g59
(g98
S'$\x00\x00\x00'
tRp1454
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1455
I0
sg903
S'41-peanuts_redo.png'
p1456
sS'block_loop.thisRepN'
p1457
I0
sg906
g1452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1458
I0
sg908
S'45-chewy_nougat_redo.png'
p1459
sg55
g11
sS'block_loop.thisTrial'
p1460
Nsg69
Vn
sS'block_loop.thisTrialN'
p1461
I0
sg39
F1.9001838310759922
sg34
g752
(S'\x07\xdf\t\x19\n \x06\x08P\xe8'
tRp1462
sa(dp1463
S'trial_loop.thisTrialN'
p1464
I37
sg894
g1360
sS'block_loop.thisIndex'
p1465
g888
sg38
S'right'
p1466
sg58
g62
sS'trial_loop.thisN'
p1467
I37
sg33
g1364
sg63
g64
sS'trial_loop.thisIndex'
p1468
g59
(g98
S'%\x00\x00\x00'
tRp1469
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1470
I0
sg903
g1368
sS'block_loop.thisRepN'
p1471
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1472
I0
sg908
g1371
sg55
g11
sS'block_loop.thisTrial'
p1473
Nsg69
Vn
sS'block_loop.thisTrialN'
p1474
I0
sg39
F1.1834339348515641
sg34
g752
(S'\x07\xdf\t\x19\n \r\x07nX'
tRp1475
sa(dp1476
S'trial_loop.thisTrialN'
p1477
I38
sg894
S'18-mms.png'
p1478
sS'block_loop.thisIndex'
p1479
g888
sg38
S'left'
p1480
sg58
g62
sS'trial_loop.thisN'
p1481
I38
sg33
S'18-mms.png'
p1482
sg63
g64
sS'trial_loop.thisIndex'
p1483
g59
(g98
S'&\x00\x00\x00'
tRp1484
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1485
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p1486
sS'block_loop.thisRepN'
p1487
I0
sg906
g1482
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1488
I0
sg908
S'43-mrporky_pork_crackles_redo.png'
p1489
sg55
g11
sS'block_loop.thisTrial'
p1490
Nsg69
Vn
sS'block_loop.thisTrialN'
p1491
I0
sg39
F1.933415688590685
sg34
g752
(S'\x07\xdf\t\x19\n \x13\n\x9e\xc0'
tRp1492
sa(dp1493
S'trial_loop.thisTrialN'
p1494
I39
sg894
g1017
sS'block_loop.thisIndex'
p1495
g888
sg38
S'left'
p1496
sg58
g62
sS'trial_loop.thisN'
p1497
I39
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p1498
g59
(g98
S"'\x00\x00\x00"
tRp1499
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1500
I0
sg903
g1024
sS'block_loop.thisRepN'
p1501
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1502
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p1503
Nsg69
Vn
sS'block_loop.thisTrialN'
p1504
I0
sg39
F1.1834265223087641
sg34
g752
(S'\x07\xdf\t\x19\n \x1a\n5H'
tRp1505
sa(dp1506
S'trial_loop.thisTrialN'
p1507
I40
sg894
S'49-yorkie.png'
p1508
sS'block_loop.thisIndex'
p1509
g888
sg38
S'right'
p1510
sg58
g62
sS'trial_loop.thisN'
p1511
I40
sg33
S'35-raisins.png'
p1512
sg63
g64
sS'trial_loop.thisIndex'
p1513
g59
(g98
S'(\x00\x00\x00'
tRp1514
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1515
I0
sg903
S'35-raisins.png'
p1516
sS'block_loop.thisRepN'
p1517
I0
sg906
g1512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1518
I0
sg908
S'49-yorkie.png'
p1519
sg55
g11
sS'block_loop.thisTrial'
p1520
Nsg69
Vn
sS'block_loop.thisTrialN'
p1521
I0
sg39
F1.8501178024203
sg34
g752
(S'\x07\xdf\t\x19\n  \re\xb0'
tRp1522
sa(dp1523
S'trial_loop.thisTrialN'
p1524
I41
sg894
g1276
sS'block_loop.thisIndex'
p1525
g888
sg38
S'left'
p1526
sg58
g62
sS'trial_loop.thisN'
p1527
I41
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1528
g59
(g98
S')\x00\x00\x00'
tRp1529
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1530
I0
sg903
g1283
sS'block_loop.thisRepN'
p1531
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1532
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p1533
Nsg69
Vn
sS'block_loop.thisTrialN'
p1534
I0
sg39
F0.95016575587442276
sg34
g752
(S"\x07\xdf\t\x19\n '\x0b\x8d\x08"
tRp1535
sa(dp1536
S'trial_loop.thisTrialN'
p1537
I42
sg894
S'16-skips_prawn.png'
p1538
sS'block_loop.thisIndex'
p1539
g888
sg38
S'right'
p1540
sg58
g62
sS'trial_loop.thisN'
p1541
I42
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p1542
g59
(g98
S'*\x00\x00\x00'
tRp1543
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1544
I0
sg903
S'42-mrkipling_lemon_slices.png'
p1545
sS'block_loop.thisRepN'
p1546
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1547
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p1548
Nsg69
Vn
sS'block_loop.thisTrialN'
p1549
I0
sg39
F1.3166695556578816
sg34
g752
(S'\x07\xdf\t\x19\n -\x0bi\xe0'
tRp1550
sa(dp1551
S'trial_loop.thisTrialN'
p1552
I43
sg894
S'1-treacle_cookies.png'
p1553
sS'block_loop.thisIndex'
p1554
g888
sg38
S'left'
p1555
sg58
g62
sS'trial_loop.thisN'
p1556
I43
sg33
g1128
sg63
g64
sS'trial_loop.thisIndex'
p1557
g59
(g98
S'+\x00\x00\x00'
tRp1558
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1559
I0
sg903
S'21-nakd_banana_crunch.png'
p1560
sS'block_loop.thisRepN'
p1561
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1562
I0
sg908
g1135
sg55
g11
sS'block_loop.thisTrial'
p1563
Nsg69
Vn
sS'block_loop.thisTrialN'
p1564
I0
sg39
F1.1667534314374279
sg34
g752
(S'\x07\xdf\t\x19\n 4\x01z\xe8'
tRp1565
sa(dp1566
S'trial_loop.thisTrialN'
p1567
I44
sg894
g1448
sS'block_loop.thisIndex'
p1568
g888
sg38
S'left'
p1569
sg58
g62
sS'trial_loop.thisN'
p1570
I44
sg33
g1452
sg63
g64
sS'trial_loop.thisIndex'
p1571
g59
(g98
S',\x00\x00\x00'
tRp1572
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1573
I0
sg903
g1456
sS'block_loop.thisRepN'
p1574
I0
sg906
g1452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1575
I0
sg908
g1459
sg55
g11
sS'block_loop.thisTrial'
p1576
Nsg69
Vn
sS'block_loop.thisTrialN'
p1577
I0
sg39
F2.366725320792284
sg34
g752
(S'\x07\xdf\t\x19\n :\x04l\xd0'
tRp1578
sa(dp1579
S'trial_loop.thisTrialN'
p1580
I45
sg894
g895
sS'block_loop.thisIndex'
p1581
g888
sg38
S'right'
p1582
sg58
g62
sS'trial_loop.thisN'
p1583
I45
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1584
g59
(g98
S'-\x00\x00\x00'
tRp1585
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1586
I0
sg903
g904
sS'block_loop.thisRepN'
p1587
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1588
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1589
Nsg69
Vn
sS'block_loop.thisTrialN'
p1590
I0
sg39
F1.6167609580202225
sg34
g752
(S'\x07\xdf\t\x19\n!\x05\n\xae`'
tRp1591
sa(dp1592
S'trial_loop.thisTrialN'
p1593
I46
sg894
S'48-twix.png'
p1594
sS'block_loop.thisIndex'
p1595
g888
sg38
S'left'
p1596
sg58
g62
sS'trial_loop.thisN'
p1597
I46
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p1598
g59
(g98
S'.\x00\x00\x00'
tRp1599
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1600
I0
sg903
S'50-polo.png'
p1601
sS'block_loop.thisRepN'
p1602
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1603
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p1604
Nsg69
Vn
sS'block_loop.thisTrialN'
p1605
I0
sg39
F1.1006418122187824
sg34
g752
(S'\x07\xdf\t\x19\n!\x0c\x05G\x90'
tRp1606
sa(dp1607
S'trial_loop.thisTrialN'
p1608
I47
sg894
g1049
sS'block_loop.thisIndex'
p1609
g888
sg38
S'left'
p1610
sg58
g62
sS'trial_loop.thisN'
p1611
I47
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1612
g59
(g98
S'/\x00\x00\x00'
tRp1613
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1614
I0
sg903
g1056
sS'block_loop.thisRepN'
p1615
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1616
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1617
Nsg69
Vn
sS'block_loop.thisTrialN'
p1618
I0
sg39
F1.7334167149433597
sg34
g752
(S'\x07\xdf\t\x19\n!\x12\x07GH'
tRp1619
sa(dp1620
S'trial_loop.thisTrialN'
p1621
I48
sg894
S'8-liquorice_catherine_wheels.png'
p1622
sS'block_loop.thisIndex'
p1623
g888
sg38
S'right'
p1624
sg58
g62
sS'trial_loop.thisN'
p1625
I48
sg33
g1197
sg63
g64
sS'trial_loop.thisIndex'
p1626
g59
(g98
S'0\x00\x00\x00'
tRp1627
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1628
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p1629
sS'block_loop.thisRepN'
p1630
I0
sg906
g1190
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1631
I0
sg908
g1197
sg55
g11
sS'block_loop.thisTrial'
p1632
Nsg69
Vn
sS'block_loop.thisTrialN'
p1633
I0
sg39
F1.8500890075401912
sg34
g752
(S'\x07\xdf\t\x19\n!\x19\x03\xc4\xd8'
tRp1634
sa(dp1635
S'trial_loop.thisTrialN'
p1636
I49
sg894
g1538
sS'block_loop.thisIndex'
p1637
g888
sg38
S'right'
p1638
sg58
g62
sS'trial_loop.thisN'
p1639
I49
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p1640
g59
(g98
S'1\x00\x00\x00'
tRp1641
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1642
I0
sg903
g1545
sS'block_loop.thisRepN'
p1643
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1644
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p1645
Nsg69
Vn
sS'block_loop.thisTrialN'
p1646
I0
sg39
F1.1167201890311844
sg34
g752
(S'\x07\xdf\t\x19\n! \x01\xf0\x18'
tRp1647
sa(dp1648
S'trial_loop.thisTrialN'
p1649
I50
sg894
g915
sS'block_loop.thisIndex'
p1650
g888
sg38
S'right'
p1651
sg58
g62
sS'trial_loop.thisN'
p1652
I50
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p1653
g59
(g98
S'2\x00\x00\x00'
tRp1654
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1655
I0
sg903
g923
sS'block_loop.thisRepN'
p1656
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1657
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1658
Nsg69
Vn
sS'block_loop.thisTrialN'
p1659
I0
sg39
F1.1834307987755892
sg34
g752
(S'\x07\xdf\t\x19\n!&\x04*h'
tRp1660
sa(dp1661
S'trial_loop.thisTrialN'
p1662
I51
sg894
S'41-peanuts_redo.png'
p1663
sS'block_loop.thisIndex'
p1664
g888
sg38
S'right'
p1665
sg58
g62
sS'trial_loop.thisN'
p1666
I51
sg33
g1452
sg63
g64
sS'trial_loop.thisIndex'
p1667
g59
(g98
S'3\x00\x00\x00'
tRp1668
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1669
I0
sg903
S'45-chewy_nougat_redo.png'
p1670
sS'block_loop.thisRepN'
p1671
I0
sg906
g1452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1672
I0
sg908
g1459
sg55
g11
sS'block_loop.thisTrial'
p1673
Nsg69
Vn
sS'block_loop.thisTrialN'
p1674
I0
sg39
F1.2168485400711688
sg34
g752
(S'\x07\xdf\t\x19\n!,\x07\x95h'
tRp1675
sa(dp1676
S'trial_loop.thisTrialN'
p1677
I52
sg894
g1478
sS'block_loop.thisIndex'
p1678
g888
sg38
S'left'
p1679
sg58
g62
sS'trial_loop.thisN'
p1680
I52
sg33
g1482
sg63
g64
sS'trial_loop.thisIndex'
p1681
g59
(g98
S'4\x00\x00\x00'
tRp1682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1683
I0
sg903
g1486
sS'block_loop.thisRepN'
p1684
I0
sg906
g1482
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1685
I0
sg908
g1489
sg55
g11
sS'block_loop.thisTrial'
p1686
Nsg69
Vn
sS'block_loop.thisTrialN'
p1687
I0
sg39
F1.1834464791559185
sg34
g752
(S'\x07\xdf\t\x19\n!2\x0b}h'
tRp1688
sa(dp1689
S'trial_loop.thisTrialN'
p1690
I53
sg894
g1171
sS'block_loop.thisIndex'
p1691
g888
sg38
S'right'
p1692
sg58
g62
sS'trial_loop.thisN'
p1693
I53
sg33
g1068
sg63
g64
sS'trial_loop.thisIndex'
p1694
g59
(g98
S'5\x00\x00\x00'
tRp1695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1696
I0
sg903
g1178
sS'block_loop.thisRepN'
p1697
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1698
I0
sg908
g1075
sg55
g11
sS'block_loop.thisTrial'
p1699
Nsg69
Vn
sS'block_loop.thisTrialN'
p1700
I0
sg39
F1.0834187676473448
sg34
g752
(S'\x07\xdf\t\x19\n!8\x0e\xad\xd0'
tRp1701
sa(dp1702
S'trial_loop.thisTrialN'
p1703
I54
sg894
g949
sS'block_loop.thisIndex'
p1704
g888
sg38
S'left'
p1705
sg58
g62
sS'trial_loop.thisN'
p1706
I54
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p1707
g59
(g98
S'6\x00\x00\x00'
tRp1708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1709
I0
sg903
g957
sS'block_loop.thisRepN'
p1710
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1711
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p1712
Nsg69
Vn
sS'block_loop.thisTrialN'
p1713
I0
sg39
F2.0834008064844056
sg34
g752
(S'\x07\xdf\t\x19\n"\x03\x01,\xc8'
tRp1714
sa(dp1715
S'trial_loop.thisTrialN'
p1716
I55
sg894
g1049
sS'block_loop.thisIndex'
p1717
g888
sg38
S'left'
p1718
sg58
g62
sS'trial_loop.thisN'
p1719
I55
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p1720
g59
(g98
S'7\x00\x00\x00'
tRp1721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1722
I0
sg903
g1056
sS'block_loop.thisRepN'
p1723
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1724
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1725
Nsg69
Vn
sS'block_loop.thisTrialN'
p1726
I0
sg39
F1.1500375758932933
sg34
g752
(S'\x07\xdf\t\x19\n"\n\x02\xea\x18'
tRp1727
sa(dp1728
S'trial_loop.thisTrialN'
p1729
I56
sg894
g1306
sS'block_loop.thisIndex'
p1730
g888
sg38
S'left'
p1731
sg58
g62
sS'trial_loop.thisN'
p1732
I56
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p1733
g59
(g98
S'8\x00\x00\x00'
tRp1734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1735
I0
sg903
g1313
sS'block_loop.thisRepN'
p1736
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1737
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1738
Nsg69
Vn
sS'block_loop.thisTrialN'
p1739
I0
sg39
F0.96684226791921901
sg34
g752
(S'\x07\xdf\t\x19\n"\x10\x05\xdc\x00'
tRp1740
sa(dp1741
S'trial_loop.thisTrialN'
p1742
I57
sg894
S'40-sardines.png'
p1743
sS'block_loop.thisIndex'
p1744
g888
sg38
S'right'
p1745
sg58
g62
sS'trial_loop.thisN'
p1746
I57
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1747
g59
(g98
S'9\x00\x00\x00'
tRp1748
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1749
I0
sg903
S'5-pineapple.png'
p1750
sS'block_loop.thisRepN'
p1751
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1752
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1753
Nsg69
Vn
sS'block_loop.thisTrialN'
p1754
I0
sg39
F1.3000942533403759
sg34
g752
(S'\x07\xdf\t\x19\n"\x16\x05\xb4\xf0'
tRp1755
sa(dp1756
S'trial_loop.thisTrialN'
p1757
I58
sg894
g1622
sS'block_loop.thisIndex'
p1758
g888
sg38
S'left'
p1759
sg58
g62
sS'trial_loop.thisN'
p1760
I58
sg33
g1190
sg63
g64
sS'trial_loop.thisIndex'
p1761
g59
(g98
S':\x00\x00\x00'
tRp1762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1763
I0
sg903
g1629
sS'block_loop.thisRepN'
p1764
I0
sg906
g1190
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1765
I0
sg908
g1197
sg55
g11
sS'block_loop.thisTrial'
p1766
Nsg69
Vn
sS'block_loop.thisTrialN'
p1767
I0
sg39
F2.4334764144273322
sg34
g752
(S'\x07\xdf\t\x19\n"\x1c\n\xcd\xa0'
tRp1768
sa(dp1769
S'trial_loop.thisTrialN'
p1770
I59
sg894
g1508
sS'block_loop.thisIndex'
p1771
g888
sg38
S'right'
p1772
sg58
g62
sS'trial_loop.thisN'
p1773
I59
sg33
g1512
sg63
g64
sS'trial_loop.thisIndex'
p1774
g59
(g98
S';\x00\x00\x00'
tRp1775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1776
I0
sg903
g1516
sS'block_loop.thisRepN'
p1777
I0
sg906
g1512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1778
I0
sg908
g1519
sg55
g11
sS'block_loop.thisTrial'
p1779
Nsg69
Vn
sS'block_loop.thisTrialN'
p1780
I0
sg39
F0.93344191759069872
sg34
g752
(S'\x07\xdf\t\x19\n"$\x02\xbf '
tRp1781
sa(dp1782
S'trial_loop.thisTrialN'
p1783
I60
sg894
g1064
sS'block_loop.thisIndex'
p1784
g888
sg38
S'left'
p1785
sg58
g62
sS'trial_loop.thisN'
p1786
I60
sg33
g1075
sg63
g64
sS'trial_loop.thisIndex'
p1787
g59
(g98
S'<\x00\x00\x00'
tRp1788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1789
I0
sg903
g1072
sS'block_loop.thisRepN'
p1790
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1791
I0
sg908
g1075
sg55
g11
sS'block_loop.thisTrial'
p1792
Nsg69
Vn
sS'block_loop.thisTrialN'
p1793
I0
sg39
F1.3334287460716041
sg34
g752
(S'\x07\xdf\t\x19\n"*\x02\x1e\xf8'
tRp1794
sa(dp1795
S'trial_loop.thisTrialN'
p1796
I61
sg894
g1032
sS'block_loop.thisIndex'
p1797
g888
sg38
S'left'
p1798
sg58
g62
sS'trial_loop.thisN'
p1799
I61
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p1800
g59
(g98
S'=\x00\x00\x00'
tRp1801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1802
I0
sg903
g1040
sS'block_loop.thisRepN'
p1803
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1804
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p1805
Nsg69
Vn
sS'block_loop.thisTrialN'
p1806
I0
sg39
F1.1168784183228126
sg34
g752
(S'\x07\xdf\t\x19\n"0\x07\xef@'
tRp1807
sa(dp1808
S'trial_loop.thisTrialN'
p1809
I62
sg894
S'46-pistachios.png'
p1810
sS'block_loop.thisIndex'
p1811
g888
sg38
S'left'
p1812
sg58
g62
sS'trial_loop.thisN'
p1813
I62
sg33
g1364
sg63
g64
sS'trial_loop.thisIndex'
p1814
g59
(g98
S'>\x00\x00\x00'
tRp1815
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1816
I0
sg903
S'29-beans.png'
p1817
sS'block_loop.thisRepN'
p1818
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1819
I0
sg908
g1371
sg55
g11
sS'block_loop.thisTrial'
p1820
Nsg69
Vn
sS'block_loop.thisTrialN'
p1821
I0
sg39
F0.8001122145028603
sg34
g752
(S'\x07\xdf\t\x19\n"6\n)\x90'
tRp1822
sa(dp1823
S'trial_loop.thisTrialN'
p1824
I63
sg894
g1064
sS'block_loop.thisIndex'
p1825
g888
sg38
S'left'
p1826
sg58
g62
sS'trial_loop.thisN'
p1827
I63
sg33
g1068
sg63
g64
sS'trial_loop.thisIndex'
p1828
g59
(g98
S'?\x00\x00\x00'
tRp1829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1830
I0
sg903
g1072
sS'block_loop.thisRepN'
p1831
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1832
I0
sg908
g1075
sg55
g11
sS'block_loop.thisTrial'
p1833
Nsg69
Vn
sS'block_loop.thisTrialN'
p1834
I0
sg39
F1.5167352421963187
sg34
g752
(S'\x07\xdf\t\x19\n#\x00\x07\xa5\x08'
tRp1835
sa(dp1836
S'trial_loop.thisTrialN'
p1837
I64
sg894
S'26-walkers_smoky_bacon.png'
p1838
sS'block_loop.thisIndex'
p1839
g888
sg38
S'right'
p1840
sg58
g62
sS'trial_loop.thisN'
p1841
I64
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p1842
g59
(g98
S'@\x00\x00\x00'
tRp1843
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1844
I0
sg903
S'44-crunch.png'
p1845
sS'block_loop.thisRepN'
p1846
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1847
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p1848
Nsg69
Vn
sS'block_loop.thisTrialN'
p1849
I0
sg39
F1.15012224994598
sg34
g752
(S'\x07\xdf\t\x19\n#\x07\x00\xcf\x08'
tRp1850
sa(dp1851
S'trial_loop.thisTrialN'
p1852
I65
sg894
g915
sS'block_loop.thisIndex'
p1853
g888
sg38
S'left'
p1854
sg58
g62
sS'trial_loop.thisN'
p1855
I65
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1856
g59
(g98
S'A\x00\x00\x00'
tRp1857
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1858
I0
sg903
g923
sS'block_loop.thisRepN'
p1859
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1860
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1861
Nsg69
Vn
sS'block_loop.thisTrialN'
p1862
I0
sg39
F1.5000863846403263
sg34
g752
(S'\x07\xdf\t\x19\n#\r\x03\x82p'
tRp1863
sa(dp1864
S'trial_loop.thisTrialN'
p1865
I66
sg894
g1810
sS'block_loop.thisIndex'
p1866
g888
sg38
S'left'
p1867
sg58
g62
sS'trial_loop.thisN'
p1868
I66
sg33
g1364
sg63
g64
sS'trial_loop.thisIndex'
p1869
g59
(g98
S'B\x00\x00\x00'
tRp1870
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1871
I0
sg903
g1817
sS'block_loop.thisRepN'
p1872
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1873
I0
sg908
g1371
sg55
g11
sS'block_loop.thisTrial'
p1874
Nsg69
Vn
sS'block_loop.thisTrialN'
p1875
I0
sg39
F0.81689250215549691
sg34
g752
(S'\x07\xdf\t\x19\n#\x13\x0b\xb4\x18'
tRp1876
sa(dp1877
S'trial_loop.thisTrialN'
p1878
I67
sg894
g895
sS'block_loop.thisIndex'
p1879
g888
sg38
S'right'
p1880
sg58
g62
sS'trial_loop.thisN'
p1881
I67
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1882
g59
(g98
S'C\x00\x00\x00'
tRp1883
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1884
I0
sg903
g904
sS'block_loop.thisRepN'
p1885
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1886
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1887
Nsg69
Vn
sS'block_loop.thisTrialN'
p1888
I0
sg39
F1.6500945954576309
sg34
g752
(S'\x07\xdf\t\x19\n#\x19\tj('
tRp1889
sa(dp1890
S'trial_loop.thisTrialN'
p1891
I68
sg894
S'35-raisins.png'
p1892
sS'block_loop.thisIndex'
p1893
g888
sg38
S'left'
p1894
sg58
g62
sS'trial_loop.thisN'
p1895
I68
sg33
g1519
sg63
g64
sS'trial_loop.thisIndex'
p1896
g59
(g98
S'D\x00\x00\x00'
tRp1897
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1898
I0
sg903
S'49-yorkie.png'
p1899
sS'block_loop.thisRepN'
p1900
I0
sg906
g1512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1901
I0
sg908
g1519
sg55
g11
sS'block_loop.thisTrial'
p1902
Nsg69
Vn
sS'block_loop.thisTrialN'
p1903
I0
sg39
F0.83343416292973416
sg34
g752
(S'\x07\xdf\t\x19\n# \x04|p'
tRp1904
sa(dp1905
S'trial_loop.thisTrialN'
p1906
I69
sg894
g1553
sS'block_loop.thisIndex'
p1907
g888
sg38
S'left'
p1908
sg58
g62
sS'trial_loop.thisN'
p1909
I69
sg33
g1128
sg63
g64
sS'trial_loop.thisIndex'
p1910
g59
(g98
S'E\x00\x00\x00'
tRp1911
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1912
I0
sg903
g1560
sS'block_loop.thisRepN'
p1913
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1914
I0
sg908
g1135
sg55
g11
sS'block_loop.thisTrial'
p1915
Nsg69
Vn
sS'block_loop.thisTrialN'
p1916
I0
sg39
F0.83342703548441932
sg34
g752
(S'\x07\xdf\t\x19\n#&\x02m\x18'
tRp1917
sa(dp1918
S'trial_loop.thisTrialN'
p1919
I70
sg894
g1538
sS'block_loop.thisIndex'
p1920
g888
sg38
S'right'
p1921
sg58
g62
sS'trial_loop.thisN'
p1922
I70
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p1923
g59
(g98
S'F\x00\x00\x00'
tRp1924
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1925
I0
sg903
g1545
sS'block_loop.thisRepN'
p1926
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1927
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p1928
Nsg69
Vn
sS'block_loop.thisTrialN'
p1929
I0
sg39
F0.98336283145499692
sg34
g752
(S'\x07\xdf\t\x19\n#,\x00a\xa8'
tRp1930
sa(dp1931
S'trial_loop.thisTrialN'
p1932
I71
sg894
g1233
sS'block_loop.thisIndex'
p1933
g888
sg38
S'left'
p1934
sg58
g62
sS'trial_loop.thisN'
p1935
I71
sg33
g1237
sg63
g64
sS'trial_loop.thisIndex'
p1936
g59
(g98
S'G\x00\x00\x00'
tRp1937
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1938
I0
sg903
g1241
sS'block_loop.thisRepN'
p1939
I0
sg906
g1237
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1940
I0
sg908
g1244
sg55
g11
sS'block_loop.thisTrial'
p1941
Nsg69
Vn
sS'block_loop.thisTrialN'
p1942
I0
sg39
F0.80021199874090598
sg34
g752
(S'\x07\xdf\t\x19\n#2\x00\xb3\xb0'
tRp1943
sa(dp1944
S'trial_loop.thisTrialN'
p1945
I72
sg894
g949
sS'block_loop.thisIndex'
p1946
g888
sg38
S'left'
p1947
sg58
g62
sS'trial_loop.thisN'
p1948
I72
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p1949
g59
(g98
S'H\x00\x00\x00'
tRp1950
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1951
I0
sg903
g957
sS'block_loop.thisRepN'
p1952
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1953
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p1954
Nsg69
Vn
sS'block_loop.thisTrialN'
p1955
I0
sg39
F1.516752918261318
sg34
g752
(S'\x07\xdf\t\x19\n#7\rqh'
tRp1956
sa(dp1957
S'trial_loop.thisTrialN'
p1958
I73
sg894
S'33-ambrosia_rice.png'
p1959
sS'block_loop.thisIndex'
p1960
g888
sg38
S'right'
p1961
sg58
g62
sS'trial_loop.thisN'
p1962
I73
sg33
g1098
sg63
g64
sS'trial_loop.thisIndex'
p1963
g59
(g98
S'I\x00\x00\x00'
tRp1964
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1965
I0
sg903
S'23-crunchie_redo.png'
p1966
sS'block_loop.thisRepN'
p1967
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1968
I0
sg908
g1105
sg55
g11
sS'block_loop.thisTrial'
p1969
Nsg69
Vn
sS'block_loop.thisTrialN'
p1970
I0
sg39
F1.1501008676095807
sg34
g752
(S'\x07\xdf\t\x19\n$\x02\x06\x9bh'
tRp1971
sa(dp1972
S'trial_loop.thisTrialN'
p1973
I74
sg894
g1508
sS'block_loop.thisIndex'
p1974
g888
sg38
S'right'
p1975
sg58
g62
sS'trial_loop.thisN'
p1976
I74
sg33
g1512
sg63
g64
sS'trial_loop.thisIndex'
p1977
g59
(g98
S'J\x00\x00\x00'
tRp1978
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1979
I0
sg903
g1516
sS'block_loop.thisRepN'
p1980
I0
sg906
g1512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1981
I0
sg908
g1519
sg55
g11
sS'block_loop.thisTrial'
p1982
Nsg69
Vn
sS'block_loop.thisTrialN'
p1983
I0
sg39
F2.3000740113948268
sg34
g752
(S'\x07\xdf\t\x19\n$\x08\tN\xd0'
tRp1984
sa(dp1985
S'trial_loop.thisTrialN'
p1986
I75
sg894
g1838
sS'block_loop.thisIndex'
p1987
g888
sg38
S'right'
p1988
sg58
g62
sS'trial_loop.thisN'
p1989
I75
sg33
g1043
sg63
g64
sS'trial_loop.thisIndex'
p1990
g59
(g98
S'K\x00\x00\x00'
tRp1991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1992
I0
sg903
g1845
sS'block_loop.thisRepN'
p1993
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1994
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p1995
Nsg69
Vn
sS'block_loop.thisTrialN'
p1996
I0
sg39
F0.91677452867634202
sg34
g752
(S'\x07\xdf\t\x19\n$\x0f\x0e_\xb0'
tRp1997
sa(dp1998
S'trial_loop.thisTrialN'
p1999
I76
sg894
g1216
sS'block_loop.thisIndex'
p2000
g888
sg38
S'left'
p2001
sg58
g62
sS'trial_loop.thisN'
p2002
I76
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p2003
g59
(g98
S'L\x00\x00\x00'
tRp2004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2005
I0
sg903
g1224
sS'block_loop.thisRepN'
p2006
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2007
I0
sg908
g1227
sg55
g11
sS'block_loop.thisTrial'
p2008
Nsg69
Vn
sS'block_loop.thisTrialN'
p2009
I0
sg39
F1.1500752088059016
sg34
g752
(S'\x07\xdf\t\x19\n$\x15\r\xc3p'
tRp2010
sa(dp2011
S'trial_loop.thisTrialN'
p2012
I77
sg894
g1032
sS'block_loop.thisIndex'
p2013
g888
sg38
S'left'
p2014
sg58
g62
sS'trial_loop.thisN'
p2015
I77
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p2016
g59
(g98
S'M\x00\x00\x00'
tRp2017
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2018
I0
sg903
g1040
sS'block_loop.thisRepN'
p2019
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2020
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p2021
Nsg69
Vn
sS'block_loop.thisTrialN'
p2022
I0
sg39
F1.0668702645248231
sg34
g752
(S'\x07\xdf\t\x19\n$\x1c\x014\x98'
tRp2023
sa(dp2024
S'trial_loop.thisTrialN'
p2025
I78
sg894
g1622
sS'block_loop.thisIndex'
p2026
g888
sg38
S'left'
p2027
sg58
g62
sS'trial_loop.thisN'
p2028
I78
sg33
g1190
sg63
g64
sS'trial_loop.thisIndex'
p2029
g59
(g98
S'N\x00\x00\x00'
tRp2030
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2031
I0
sg903
g1629
sS'block_loop.thisRepN'
p2032
I0
sg906
g1190
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2033
I0
sg908
g1197
sg55
g11
sS'block_loop.thisTrial'
p2034
Nsg69
Vn
sS'block_loop.thisTrialN'
p2035
I0
sg39
F1.6000878671488863
sg34
g752
(S'\x07\xdf\t\x19\n$"\x02\xbb8'
tRp2036
sa(dp2037
S'trial_loop.thisTrialN'
p2038
I79
sg894
g1892
sS'block_loop.thisIndex'
p2039
g888
sg38
S'left'
p2040
sg58
g62
sS'trial_loop.thisN'
p2041
I79
sg33
g1519
sg63
g64
sS'trial_loop.thisIndex'
p2042
g59
(g98
S'O\x00\x00\x00'
tRp2043
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2044
I0
sg903
g1899
sS'block_loop.thisRepN'
p2045
I0
sg906
g1512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2046
I0
sg908
g1519
sg55
g11
sS'block_loop.thisTrial'
p2047
Nsg69
Vn
sS'block_loop.thisTrialN'
p2048
I0
sg39
F0.80012675449188464
sg34
g752
(S'\x07\xdf\t\x19\n$(\x0cX('
tRp2049
sa(dp2050
S'trial_loop.thisTrialN'
p2051
I80
sg894
S'6-sour_patch_kids.png'
p2052
sS'block_loop.thisIndex'
p2053
g888
sg38
S'right'
p2054
sg58
g62
sS'trial_loop.thisN'
p2055
I80
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p2056
g59
(g98
S'P\x00\x00\x00'
tRp2057
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2058
I0
sg903
S'38-maltesers.png'
p2059
sS'block_loop.thisRepN'
p2060
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2061
I0
sg908
g1227
sg55
g11
sS'block_loop.thisTrial'
p2062
Nsg69
Vn
sS'block_loop.thisTrialN'
p2063
I0
sg39
F0.99996607335879162
sg34
g752
(S'\x07\xdf\t\x19\n$.\t\xcf\xb8'
tRp2064
sa(dp2065
S'trial_loop.thisTrialN'
p2066
I81
sg894
g1186
sS'block_loop.thisIndex'
p2067
g888
sg38
S'right'
p2068
sg58
g62
sS'trial_loop.thisN'
p2069
I81
sg33
g1197
sg63
g64
sS'trial_loop.thisIndex'
p2070
g59
(g98
S'Q\x00\x00\x00'
tRp2071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2072
I0
sg903
g1194
sS'block_loop.thisRepN'
p2073
I0
sg906
g1190
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2074
I0
sg908
g1197
sg55
g11
sS'block_loop.thisTrial'
p2075
Nsg69
Vn
sS'block_loop.thisTrialN'
p2076
I0
sg39
F2.167102961368073
sg34
g752
(S'\x07\xdf\t\x19\n$4\nd('
tRp2077
sa(dp2078
S'trial_loop.thisTrialN'
p2079
I82
sg894
g1743
sS'block_loop.thisIndex'
p2080
g888
sg38
S'right'
p2081
sg58
g62
sS'trial_loop.thisN'
p2082
I82
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2083
g59
(g98
S'R\x00\x00\x00'
tRp2084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2085
I0
sg903
g1750
sS'block_loop.thisRepN'
p2086
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2087
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2088
Nsg69
Vn
sS'block_loop.thisTrialN'
p2089
I0
sg39
F0.90012481582698456
sg34
g752
(S'\x07\xdf\t\x19\n$;\rN@'
tRp2090
sa(dp2091
S'trial_loop.thisTrialN'
p2092
I83
sg894
g1377
sS'block_loop.thisIndex'
p2093
g888
sg38
S'left'
p2094
sg58
g62
sS'trial_loop.thisN'
p2095
I83
sg33
g1011
sg63
g64
sS'trial_loop.thisIndex'
p2096
g59
(g98
S'S\x00\x00\x00'
tRp2097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2098
I0
sg903
g1384
sS'block_loop.thisRepN'
p2099
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2100
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2101
Nsg69
Vn
sS'block_loop.thisTrialN'
p2102
I0
sg39
F1.8834061093043601
sg34
g752
(S'\x07\xdf\t\x19\n%\x05\x0cs\x80'
tRp2103
sa(dp2104
S'trial_loop.thisTrialN'
p2105
I84
sg894
g1276
sS'block_loop.thisIndex'
p2106
g888
sg38
S'right'
p2107
sg58
g62
sS'trial_loop.thisN'
p2108
I84
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2109
g59
(g98
S'T\x00\x00\x00'
tRp2110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2111
I0
sg903
g1283
sS'block_loop.thisRepN'
p2112
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2113
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2114
Nsg69
Vn
sS'block_loop.thisTrialN'
p2115
I0
sg39
F1.0334425448058937
sg34
g752
(S'\x07\xdf\t\x19\n%\x0c\x0b\x17\xd8'
tRp2116
sa(dp2117
S'trial_loop.thisTrialN'
p2118
I85
sg894
g1154
sS'block_loop.thisIndex'
p2119
g888
sg38
S'left'
p2120
sg58
g62
sS'trial_loop.thisN'
p2121
I85
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p2122
g59
(g98
S'U\x00\x00\x00'
tRp2123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2124
I0
sg903
g1162
sS'block_loop.thisRepN'
p2125
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2126
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p2127
Nsg69
Vn
sS'block_loop.thisTrialN'
p2128
I0
sg39
F1.4166234268304834
sg34
g752
(S'\x07\xdf\t\x19\n%\x12\x0c!x'
tRp2129
sa(dp2130
S'trial_loop.thisTrialN'
p2131
I86
sg894
g1094
sS'block_loop.thisIndex'
p2132
g888
sg38
S'left'
p2133
sg58
g62
sS'trial_loop.thisN'
p2134
I86
sg33
g1098
sg63
g64
sS'trial_loop.thisIndex'
p2135
g59
(g98
S'V\x00\x00\x00'
tRp2136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2137
I0
sg903
g1102
sS'block_loop.thisRepN'
p2138
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2139
I0
sg908
g1105
sg55
g11
sS'block_loop.thisTrial'
p2140
Nsg69
Vn
sS'block_loop.thisTrialN'
p2141
I0
sg39
F1.5668756813838627
sg34
g752
(S'\x07\xdf\t\x19\n%\x19\x03\xa1\xb0'
tRp2142
sa(dp2143
S'trial_loop.thisTrialN'
p2144
I87
sg894
g1186
sS'block_loop.thisIndex'
p2145
g888
sg38
S'right'
p2146
sg58
g62
sS'trial_loop.thisN'
p2147
I87
sg33
g1190
sg63
g64
sS'trial_loop.thisIndex'
p2148
g59
(g98
S'W\x00\x00\x00'
tRp2149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2150
I0
sg903
g1194
sS'block_loop.thisRepN'
p2151
I0
sg906
g1190
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2152
I0
sg908
g1197
sg55
g11
sS'block_loop.thisTrial'
p2153
Nsg69
Vn
sS'block_loop.thisTrialN'
p2154
I0
sg39
F1.4000307335454636
sg34
g752
(S'\x07\xdf\t\x19\n%\x1f\x0c\xc5\x88'
tRp2155
sa(dp2156
S'trial_loop.thisTrialN'
p2157
I88
sg894
g966
sS'block_loop.thisIndex'
p2158
g888
sg38
S'right'
p2159
sg58
g62
sS'trial_loop.thisN'
p2160
I88
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p2161
g59
(g98
S'X\x00\x00\x00'
tRp2162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2163
I0
sg903
g974
sS'block_loop.thisRepN'
p2164
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2165
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2166
Nsg69
Vn
sS'block_loop.thisTrialN'
p2167
I0
sg39
F1.4334102717321002
sg34
g752
(S'\x07\xdf\t\x19\n%&\x04A\xd8'
tRp2168
sa(dp2169
S'trial_loop.thisTrialN'
p2170
I89
sg894
g1171
sS'block_loop.thisIndex'
p2171
g888
sg38
S'right'
p2172
sg58
g62
sS'trial_loop.thisN'
p2173
I89
sg33
g1068
sg63
g64
sS'trial_loop.thisIndex'
p2174
g59
(g98
S'Y\x00\x00\x00'
tRp2175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2176
I0
sg903
g1178
sS'block_loop.thisRepN'
p2177
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2178
I0
sg908
g1075
sg55
g11
sS'block_loop.thisTrial'
p2179
Nsg69
Vn
sS'block_loop.thisTrialN'
p2180
I0
sg39
F1.0834193378432246
sg34
g752
(S'\x07\xdf\t\x19\n%,\x0bB\xd0'
tRp2181
sa(dp2182
S'trial_loop.thisTrialN'
p2183
I90
sg894
g2052
sS'block_loop.thisIndex'
p2184
g888
sg38
S'right'
p2185
sg58
g62
sS'trial_loop.thisN'
p2186
I90
sg33
g1227
sg63
g64
sS'trial_loop.thisIndex'
p2187
g59
(g98
S'Z\x00\x00\x00'
tRp2188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2189
I0
sg903
g2059
sS'block_loop.thisRepN'
p2190
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2191
I0
sg908
g1227
sg55
g11
sS'block_loop.thisTrial'
p2192
Nsg69
Vn
sS'block_loop.thisTrialN'
p2193
I0
sg39
F1.0831584733355157
sg34
g752
(S'\x07\xdf\t\x19\n%2\r\x04\x08'
tRp2194
sa(dp2195
S'trial_loop.thisTrialN'
p2196
I91
sg894
g1959
sS'block_loop.thisIndex'
p2197
g888
sg38
S'right'
p2198
sg58
g62
sS'trial_loop.thisN'
p2199
I91
sg33
g1098
sg63
g64
sS'trial_loop.thisIndex'
p2200
g59
(g98
S'[\x00\x00\x00'
tRp2201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2202
I0
sg903
g1966
sS'block_loop.thisRepN'
p2203
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2204
I0
sg908
g1105
sg55
g11
sS'block_loop.thisTrial'
p2205
Nsg69
Vn
sS'block_loop.thisTrialN'
p2206
I0
sg39
F1.433549684567879
sg34
g752
(S'\x07\xdf\t\x19\n%8\x0f\x03\xc0'
tRp2207
sa(dp2208
S'trial_loop.thisTrialN'
p2209
I92
sg894
g1594
sS'block_loop.thisIndex'
p2210
g888
sg38
S'left'
p2211
sg58
g62
sS'trial_loop.thisN'
p2212
I92
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p2213
g59
(g98
S'\\\x00\x00\x00'
tRp2214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2215
I0
sg903
g1601
sS'block_loop.thisRepN'
p2216
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2217
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p2218
Nsg69
Vn
sS'block_loop.thisTrialN'
p2219
I0
sg39
F1.1667808008287466
sg34
g752
(S'\x07\xdf\t\x19\n&\x03\x06\xbe\x90'
tRp2220
sa(dp2221
S'trial_loop.thisTrialN'
p2222
I93
sg894
S'43-mrporky_pork_crackles_redo.png'
p2223
sS'block_loop.thisIndex'
p2224
g888
sg38
S'right'
p2225
sg58
g62
sS'trial_loop.thisN'
p2226
I93
sg33
g1482
sg63
g64
sS'trial_loop.thisIndex'
p2227
g59
(g98
S']\x00\x00\x00'
tRp2228
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2229
I0
sg903
S'18-mms.png'
p2230
sS'block_loop.thisRepN'
p2231
I0
sg906
g1482
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2232
I0
sg908
g1489
sg55
g11
sS'block_loop.thisTrial'
p2233
Nsg69
Vn
sS'block_loop.thisTrialN'
p2234
I0
sg39
F0.95021222681907602
sg34
g752
(S'\x07\xdf\t\x19\n&\t\t\xee\xf8'
tRp2235
sa(dp2236
S'trial_loop.thisTrialN'
p2237
I94
sg894
g1276
sS'block_loop.thisIndex'
p2238
g888
sg38
S'right'
p2239
sg58
g62
sS'trial_loop.thisN'
p2240
I94
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2241
g59
(g98
S'^\x00\x00\x00'
tRp2242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2243
I0
sg903
g1283
sS'block_loop.thisRepN'
p2244
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2245
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2246
Nsg69
Vn
sS'block_loop.thisTrialN'
p2247
I0
sg39
F0.9834150043561749
sg34
g752
(S'\x07\xdf\t\x19\n&\x0f\t\x8dP'
tRp2248
sa(dp2249
S'trial_loop.thisTrialN'
p2250
I95
sg894
g1810
sS'block_loop.thisIndex'
p2251
g888
sg38
S'left'
p2252
sg58
g62
sS'trial_loop.thisN'
p2253
I95
sg33
g1364
sg63
g64
sS'trial_loop.thisIndex'
p2254
g59
(g98
S'_\x00\x00\x00'
tRp2255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2256
I0
sg903
g1817
sS'block_loop.thisRepN'
p2257
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2258
I0
sg908
g1371
sg55
g11
sS'block_loop.thisTrial'
p2259
Nsg69
Vn
sS'block_loop.thisTrialN'
p2260
I0
sg39
F1.1666063209609092
sg34
g752
(S'\x07\xdf\t\x19\n&\x15\t\xdfX'
tRp2261
sa(dp2262
S'trial_loop.thisTrialN'
p2263
I96
sg894
g1154
sS'block_loop.thisIndex'
p2264
g888
sg38
S'left'
p2265
sg58
g62
sS'trial_loop.thisN'
p2266
I96
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p2267
g59
(g98
S'`\x00\x00\x00'
tRp2268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2269
I0
sg903
g1162
sS'block_loop.thisRepN'
p2270
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2271
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p2272
Nsg69
Vn
sS'block_loop.thisTrialN'
p2273
I0
sg39
F1.2167667169960623
sg34
g752
(S'\x07\xdf\t\x19\n&\x1b\x0c\xd5('
tRp2274
sa(dp2275
S'trial_loop.thisTrialN'
p2276
I97
sg894
g1094
sS'block_loop.thisIndex'
p2277
g888
sg38
S'left'
p2278
sg58
g62
sS'trial_loop.thisN'
p2279
I97
sg33
g1105
sg63
g64
sS'trial_loop.thisIndex'
p2280
g59
(g98
S'a\x00\x00\x00'
tRp2281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2282
I0
sg903
g1102
sS'block_loop.thisRepN'
p2283
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2284
I0
sg908
g1105
sg55
g11
sS'block_loop.thisTrial'
p2285
Nsg69
Vn
sS'block_loop.thisTrialN'
p2286
I0
sg39
F1.5000815379771666
sg34
g752
(S'\x07\xdf\t\x19\n&"\x01w\x00'
tRp2287
sa(dp2288
S'trial_loop.thisTrialN'
p2289
I98
sg894
g1216
sS'block_loop.thisIndex'
p2290
g888
sg38
S'left'
p2291
sg58
g62
sS'trial_loop.thisN'
p2292
I98
sg33
g1227
sg63
g64
sS'trial_loop.thisIndex'
p2293
g59
(g98
S'b\x00\x00\x00'
tRp2294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2295
I0
sg903
g1224
sS'block_loop.thisRepN'
p2296
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2297
I0
sg908
g1227
sg55
g11
sS'block_loop.thisTrial'
p2298
Nsg69
Vn
sS'block_loop.thisTrialN'
p2299
I0
sg39
F1.0331870971567696
sg34
g752
(S'\x07\xdf\t\x19\n&(\t\xa8\xa8'
tRp2300
sa(dp2301
S'trial_loop.thisTrialN'
p2302
I99
sg894
g1000
sS'block_loop.thisIndex'
p2303
g888
sg38
S'right'
p2304
sg58
g62
sS'trial_loop.thisN'
p2305
I99
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2306
g59
(g98
S'c\x00\x00\x00'
tRp2307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2308
I0
sg903
g1008
sS'block_loop.thisRepN'
p2309
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2310
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2311
Nsg69
Vn
sS'block_loop.thisTrialN'
p2312
I0
sg39
F1.1167352992160886
sg34
g752
(S'\x07\xdf\t\x19\n&.\nw\xb0'
tRp2313
sa(dp2314
S'trial_loop.thisTrialN'
p2315
I100
sg894
g1663
sS'block_loop.thisIndex'
p2316
g888
sg38
S'left'
p2317
sg58
g62
sS'trial_loop.thisN'
p2318
I100
sg33
g1452
sg63
g64
sS'trial_loop.thisIndex'
p2319
g59
(g98
S'd\x00\x00\x00'
tRp2320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2321
I0
sg903
g1670
sS'block_loop.thisRepN'
p2322
I0
sg906
g1452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2323
I0
sg908
g1459
sg55
g11
sS'block_loop.thisTrial'
p2324
Nsg69
Vn
sS'block_loop.thisTrialN'
p2325
I0
sg39
F5.133320294859459
sg34
g752
(S'\x07\xdf\t\x19\n&4\x0c\xf0\x80'
tRp2326
sa(dp2327
S'trial_loop.thisTrialN'
p2328
I101
sg894
g1360
sS'block_loop.thisIndex'
p2329
g888
sg38
S'right'
p2330
sg58
g62
sS'trial_loop.thisN'
p2331
I101
sg33
g1364
sg63
g64
sS'trial_loop.thisIndex'
p2332
g59
(g98
S'e\x00\x00\x00'
tRp2333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2334
I0
sg903
g1368
sS'block_loop.thisRepN'
p2335
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2336
I0
sg908
g1371
sg55
g11
sS'block_loop.thisTrial'
p2337
Nsg69
Vn
sS'block_loop.thisTrialN'
p2338
I0
sg39
F0.95021878406942051
sg34
g752
(S"\x07\xdf\t\x19\n'\x03\x00\x0b\xb8"
tRp2339
sa(dp2340
S'trial_loop.thisTrialN'
p2341
I102
sg894
g1233
sS'block_loop.thisIndex'
p2342
g888
sg38
S'left'
p2343
sg58
g62
sS'trial_loop.thisN'
p2344
I102
sg33
g1237
sg63
g64
sS'trial_loop.thisIndex'
p2345
g59
(g98
S'f\x00\x00\x00'
tRp2346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2347
I0
sg903
g1241
sS'block_loop.thisRepN'
p2348
I0
sg906
g1237
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2349
I0
sg908
g1244
sg55
g11
sS'block_loop.thisTrial'
p2350
Nsg69
Vn
sS'block_loop.thisTrialN'
p2351
I0
sg39
F1.0169085816723964
sg34
g752
(S"\x07\xdf\t\x19\n'\x08\x0f*\xd0"
tRp2352
sa(dp2353
S'trial_loop.thisTrialN'
p2354
I103
sg894
g1306
sS'block_loop.thisIndex'
p2355
g888
sg38
S'left'
p2356
sg58
g62
sS'trial_loop.thisN'
p2357
I103
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2358
g59
(g98
S'g\x00\x00\x00'
tRp2359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2360
I0
sg903
g1313
sS'block_loop.thisRepN'
p2361
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2362
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2363
Nsg69
Vn
sS'block_loop.thisTrialN'
p2364
I0
sg39
F0.80010651254679033
sg34
g752
(S"\x07\xdf\t\x19\n'\x0f\x00\xb3\xb0"
tRp2365
sa(dp2366
S'trial_loop.thisTrialN'
p2367
I104
sg894
g1553
sS'block_loop.thisIndex'
p2368
g888
sg38
S'left'
p2369
sg58
g62
sS'trial_loop.thisN'
p2370
I104
sg33
g1135
sg63
g64
sS'trial_loop.thisIndex'
p2371
g59
(g98
S'h\x00\x00\x00'
tRp2372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2373
I0
sg903
g1560
sS'block_loop.thisRepN'
p2374
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2375
I0
sg908
g1135
sg55
g11
sS'block_loop.thisTrial'
p2376
Nsg69
Vn
sS'block_loop.thisTrialN'
p2377
I0
sg39
F1.0667681995046223
sg34
g752
(S"\x07\xdf\t\x19\n'\x14\rqh"
tRp2378
sa(dp2379
S'trial_loop.thisTrialN'
p2380
I105
sg894
S'3-ellas_strawberries_apples.png'
p2381
sS'block_loop.thisIndex'
p2382
g888
sg38
S'right'
p2383
sg58
g62
sS'trial_loop.thisN'
p2384
I105
sg33
g1396
sg63
g64
sS'trial_loop.thisIndex'
p2385
g59
(g98
S'i\x00\x00\x00'
tRp2386
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2387
I0
sg903
S'13-mccoys_steak_crisps.png'
p2388
sS'block_loop.thisRepN'
p2389
I0
sg906
g1396
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2390
I0
sg908
g1403
sg55
g11
sS'block_loop.thisTrial'
p2391
Nsg69
Vn
sS'block_loop.thisTrialN'
p2392
I0
sg39
F3.1168168371932552
sg34
g752
(S"\x07\xdf\t\x19\n'\x1a\x0e\xf4 "
tRp2393
sa(dp2394
S'trial_loop.thisTrialN'
p2395
I106
sg894
g1553
sS'block_loop.thisIndex'
p2396
g888
sg38
S'right'
p2397
sg58
g62
sS'trial_loop.thisN'
p2398
I106
sg33
g1128
sg63
g64
sS'trial_loop.thisIndex'
p2399
g59
(g98
S'j\x00\x00\x00'
tRp2400
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2401
I0
sg903
g1560
sS'block_loop.thisRepN'
p2402
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2403
I0
sg908
g1135
sg55
g11
sS'block_loop.thisTrial'
p2404
Nsg69
Vn
sS'block_loop.thisTrialN'
p2405
I0
sg39
F2.0001790414330571
sg34
g752
(S"\x07\xdf\t\x19\n'#\x01\xe4`"
tRp2406
sa(dp2407
S'trial_loop.thisTrialN'
p2408
I107
sg894
g1216
sS'block_loop.thisIndex'
p2409
g888
sg38
S'left'
p2410
sg58
g62
sS'trial_loop.thisN'
p2411
I107
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p2412
g59
(g98
S'k\x00\x00\x00'
tRp2413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2414
I0
sg903
g1224
sS'block_loop.thisRepN'
p2415
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2416
I0
sg908
g1227
sg55
g11
sS'block_loop.thisTrial'
p2417
Nsg69
Vn
sS'block_loop.thisTrialN'
p2418
I0
sg39
F0.89996687163329625
sg34
g752
(S"\x07\xdf\t\x19\n'*\x02m\x18"
tRp2419
sa(dp2420
S'trial_loop.thisTrialN'
p2421
I108
sg894
g1377
sS'block_loop.thisIndex'
p2422
g888
sg38
S'left'
p2423
sg58
g62
sS'trial_loop.thisN'
p2424
I108
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2425
g59
(g98
S'l\x00\x00\x00'
tRp2426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2427
I0
sg903
g1384
sS'block_loop.thisRepN'
p2428
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2429
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2430
Nsg69
Vn
sS'block_loop.thisTrialN'
p2431
I0
sg39
F2.8333754327782117
sg34
g752
(S"\x07\xdf\t\x19\n'0\x01S\xd8"
tRp2432
sa(dp2433
S'trial_loop.thisTrialN'
p2434
I109
sg894
g1663
sS'block_loop.thisIndex'
p2435
g888
sg38
S'left'
p2436
sg58
g62
sS'trial_loop.thisN'
p2437
I109
sg33
g1452
sg63
g64
sS'trial_loop.thisIndex'
p2438
g59
(g98
S'm\x00\x00\x00'
tRp2439
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2440
I0
sg903
g1670
sS'block_loop.thisRepN'
p2441
I0
sg906
g1452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2442
I0
sg908
g1459
sg55
g11
sS'block_loop.thisTrial'
p2443
Nsg69
Vn
sS'block_loop.thisTrialN'
p2444
I0
sg39
F2.0000681383799019
sg34
g752
(S"\x07\xdf\t\x19\n'7\x0e\xb9\x88"
tRp2445
sa(dp2446
S'trial_loop.thisTrialN'
p2447
I110
sg894
g1594
sS'block_loop.thisIndex'
p2448
g888
sg38
S'left'
p2449
sg58
g62
sS'trial_loop.thisN'
p2450
I110
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p2451
g59
(g98
S'n\x00\x00\x00'
tRp2452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2453
I0
sg903
g1601
sS'block_loop.thisRepN'
p2454
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2455
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p2456
Nsg69
Vn
sS'block_loop.thisTrialN'
p2457
I0
sg39
F1.0334300005019941
sg34
g752
(S'\x07\xdf\t\x19\n(\x02\x0f\x07\xa8'
tRp2458
sa(dp2459
S'trial_loop.thisTrialN'
p2460
I111
sg894
g2381
sS'block_loop.thisIndex'
p2461
g888
sg38
S'right'
p2462
sg58
g62
sS'trial_loop.thisN'
p2463
I111
sg33
g1396
sg63
g64
sS'trial_loop.thisIndex'
p2464
g59
(g98
S'o\x00\x00\x00'
tRp2465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2466
I0
sg903
g2388
sS'block_loop.thisRepN'
p2467
I0
sg906
g1396
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2468
I0
sg908
g1403
sg55
g11
sS'block_loop.thisTrial'
p2469
Nsg69
Vn
sS'block_loop.thisTrialN'
p2470
I0
sg39
F1.4001838310764469
sg34
g752
(S'\x07\xdf\t\x19\n(\t\x00\xd2\xf0'
tRp2471
sa(dp2472
S'trial_loop.thisTrialN'
p2473
I112
sg894
g2052
sS'block_loop.thisIndex'
p2474
g888
sg38
S'right'
p2475
sg58
g62
sS'trial_loop.thisN'
p2476
I112
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p2477
g59
(g98
S'p\x00\x00\x00'
tRp2478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2479
I0
sg903
g2059
sS'block_loop.thisRepN'
p2480
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2481
I0
sg908
g1227
sg55
g11
sS'block_loop.thisTrial'
p2482
Nsg69
Vn
sS'block_loop.thisTrialN'
p2483
I0
sg39
F0.89985254740577147
sg34
g752
(S'\x07\xdf\t\x19\n(\x0f\x07\x91\x80'
tRp2484
sa(dp2485
S'trial_loop.thisTrialN'
p2486
I113
sg894
g1000
sS'block_loop.thisIndex'
p2487
g888
sg38
S'right'
p2488
sg58
g62
sS'trial_loop.thisN'
p2489
I113
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2490
g59
(g98
S'q\x00\x00\x00'
tRp2491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2492
I0
sg903
g1008
sS'block_loop.thisRepN'
p2493
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2494
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2495
Nsg69
Vn
sS'block_loop.thisTrialN'
p2496
I0
sg39
F1.9667447644637832
sg34
g752
(S'\x07\xdf\t\x19\n(\x15\x06x@'
tRp2497
sa(dp2498
S'trial_loop.thisTrialN'
p2499
I114
sg894
g1538
sS'block_loop.thisIndex'
p2500
g888
sg38
S'right'
p2501
sg58
g62
sS'trial_loop.thisN'
p2502
I114
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p2503
g59
(g98
S'r\x00\x00\x00'
tRp2504
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2505
I0
sg903
g1545
sS'block_loop.thisRepN'
p2506
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2507
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p2508
Nsg69
Vn
sS'block_loop.thisTrialN'
p2509
I0
sg39
F0.89997856064337611
sg34
g752
(S'\x07\xdf\t\x19\n(\x1c\x06\x8b\xc8'
tRp2510
sa(dp2511
S'trial_loop.thisTrialN'
p2512
I115
sg894
g1032
sS'block_loop.thisIndex'
p2513
g888
sg38
S'left'
p2514
sg58
g62
sS'trial_loop.thisN'
p2515
I115
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p2516
g59
(g98
S's\x00\x00\x00'
tRp2517
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2518
I0
sg903
g1040
sS'block_loop.thisRepN'
p2519
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2520
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p2521
Nsg69
Vn
sS'block_loop.thisTrialN'
p2522
I0
sg39
F1.5334114691431751
sg34
g752
(S'\x07\xdf\t\x19\n("\x05r\x88'
tRp2523
sa(dp2524
S'trial_loop.thisTrialN'
p2525
I116
sg894
g1124
sS'block_loop.thisIndex'
p2526
g888
sg38
S'right'
p2527
sg58
g62
sS'trial_loop.thisN'
p2528
I116
sg33
g1128
sg63
g64
sS'trial_loop.thisIndex'
p2529
g59
(g98
S't\x00\x00\x00'
tRp2530
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2531
I0
sg903
g1132
sS'block_loop.thisRepN'
p2532
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2533
I0
sg908
g1135
sg55
g11
sS'block_loop.thisTrial'
p2534
Nsg69
Vn
sS'block_loop.thisTrialN'
p2535
I0
sg39
F1.0168706636618481
sg34
g752
(S'\x07\xdf\t\x19\n((\x0e\x1dH'
tRp2536
sa(dp2537
S'trial_loop.thisTrialN'
p2538
I117
sg894
g983
sS'block_loop.thisIndex'
p2539
g888
sg38
S'left'
p2540
sg58
g62
sS'trial_loop.thisN'
p2541
I117
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2542
g59
(g98
S'u\x00\x00\x00'
tRp2543
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2544
I0
sg903
g991
sS'block_loop.thisRepN'
p2545
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2546
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2547
Nsg69
Vn
sS'block_loop.thisTrialN'
p2548
I0
sg39
F1.0167791472608769
sg34
g752
(S'\x07\xdf\t\x19\n(.\x0e\xe8h'
tRp2549
sa(dp2550
S'trial_loop.thisTrialN'
p2551
I118
sg894
g1448
sS'block_loop.thisIndex'
p2552
g888
sg38
S'right'
p2553
sg58
g62
sS'trial_loop.thisN'
p2554
I118
sg33
g1459
sg63
g64
sS'trial_loop.thisIndex'
p2555
g59
(g98
S'v\x00\x00\x00'
tRp2556
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2557
I0
sg903
g1456
sS'block_loop.thisRepN'
p2558
I0
sg906
g1452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2559
I0
sg908
g1459
sg55
g11
sS'block_loop.thisTrial'
p2560
Nsg69
Vn
sS'block_loop.thisTrialN'
p2561
I0
sg39
F1.5500723008080968
sg34
g752
(S'\x07\xdf\t\x19\n(5\x00u0'
tRp2562
sa(dp2563
S'trial_loop.thisTrialN'
p2564
I119
sg894
g1377
sS'block_loop.thisIndex'
p2565
g888
sg38
S'right'
p2566
sg58
g62
sS'trial_loop.thisN'
p2567
I119
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2568
g59
(g98
S'w\x00\x00\x00'
tRp2569
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2570
I0
sg903
g1384
sS'block_loop.thisRepN'
p2571
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2572
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2573
Nsg69
Vn
sS'block_loop.thisTrialN'
p2574
I0
sg39
F1.3834420316297837
sg34
g752
(S'\x07\xdf\t\x19\n(;\tZ\x88'
tRp2575
sa(dp2576
S'trial_loop.thisTrialN'
p2577
I120
sg894
g1186
sS'block_loop.thisIndex'
p2578
g888
sg38
S'right'
p2579
sg58
g62
sS'trial_loop.thisN'
p2580
I120
sg33
g1190
sg63
g64
sS'trial_loop.thisIndex'
p2581
g59
(g98
S'x\x00\x00\x00'
tRp2582
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2583
I0
sg903
g1194
sS'block_loop.thisRepN'
p2584
I0
sg906
g1190
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2585
I0
sg908
g1197
sg55
g11
sS'block_loop.thisTrial'
p2586
Nsg69
Vn
sS'block_loop.thisTrialN'
p2587
I0
sg39
F1.0334434000997135
sg34
g752
(S'\x07\xdf\t\x19\n)\x06\x00a\xa8'
tRp2588
sa(dp2589
S'trial_loop.thisTrialN'
p2590
I121
sg894
g2381
sS'block_loop.thisIndex'
p2591
g888
sg38
S'right'
p2592
sg58
g62
sS'trial_loop.thisN'
p2593
I121
sg33
g1396
sg63
g64
sS'trial_loop.thisIndex'
p2594
g59
(g98
S'y\x00\x00\x00'
tRp2595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2596
I0
sg903
g2388
sS'block_loop.thisRepN'
p2597
I0
sg906
g1396
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2598
I0
sg908
g1403
sg55
g11
sS'block_loop.thisTrial'
p2599
Nsg69
Vn
sS'block_loop.thisTrialN'
p2600
I0
sg39
F1.4504919077835439
sg34
g752
(S'\x07\xdf\t\x19\n)\x0c\x01kH'
tRp2601
sa(dp2602
S'trial_loop.thisTrialN'
p2603
I122
sg894
g1233
sS'block_loop.thisIndex'
p2604
g888
sg38
S'left'
p2605
sg58
g62
sS'trial_loop.thisN'
p2606
I122
sg33
g1237
sg63
g64
sS'trial_loop.thisIndex'
p2607
g59
(g98
S'z\x00\x00\x00'
tRp2608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2609
I0
sg903
g1241
sS'block_loop.thisRepN'
p2610
I0
sg906
g1237
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2611
I0
sg908
g1244
sg55
g11
sS'block_loop.thisTrial'
p2612
Nsg69
Vn
sS'block_loop.thisTrialN'
p2613
I0
sg39
F0.80009910000308082
sg34
g752
(S'\x07\xdf\t\x19\n)\x12\x08\xa6\xd8'
tRp2614
sa(dp2615
S'trial_loop.thisTrialN'
p2616
I123
sg894
g2052
sS'block_loop.thisIndex'
p2617
g888
sg38
S'right'
p2618
sg58
g62
sS'trial_loop.thisN'
p2619
I123
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p2620
g59
(g98
S'{\x00\x00\x00'
tRp2621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2622
I0
sg903
g2059
sS'block_loop.thisRepN'
p2623
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2624
I0
sg908
g1227
sg55
g11
sS'block_loop.thisTrial'
p2625
Nsg69
Vn
sS'block_loop.thisTrialN'
p2626
I0
sg39
F1.7331418806420515
sg34
g752
(S'\x07\xdf\t\x19\n)\x18\x06"P'
tRp2627
sa(dp2628
S'trial_loop.thisTrialN'
p2629
I124
sg894
g1000
sS'block_loop.thisIndex'
p2630
g888
sg38
S'left'
p2631
sg58
g62
sS'trial_loop.thisN'
p2632
I124
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2633
g59
(g98
S'|\x00\x00\x00'
tRp2634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2635
I0
sg903
g1008
sS'block_loop.thisRepN'
p2636
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2637
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2638
Nsg69
Vn
sS'block_loop.thisTrialN'
p2639
I0
sg39
F1.2667569096306579
sg34
g752
(S'\x07\xdf\t\x19\n)\x1f\x02\x9f\xe0'
tRp2640
sa(dp2641
S'trial_loop.thisTrialN'
p2642
I125
sg894
g1508
sS'block_loop.thisIndex'
p2643
g888
sg38
S'right'
p2644
sg58
g62
sS'trial_loop.thisN'
p2645
I125
sg33
g1512
sg63
g64
sS'trial_loop.thisIndex'
p2646
g59
(g98
S'}\x00\x00\x00'
tRp2647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2648
I0
sg903
g1516
sS'block_loop.thisRepN'
p2649
I0
sg906
g1512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2650
I0
sg908
g1519
sg55
g11
sS'block_loop.thisTrial'
p2651
Nsg69
Vn
sS'block_loop.thisTrialN'
p2652
I0
sg39
F1.2835294996420998
sg34
g752
(S'\x07\xdf\t\x19\n)%\x07?x'
tRp2653
sa(dp2654
S'trial_loop.thisTrialN'
p2655
I126
sg894
g1186
sS'block_loop.thisIndex'
p2656
g888
sg38
S'right'
p2657
sg58
g62
sS'trial_loop.thisN'
p2658
I126
sg33
g1190
sg63
g64
sS'trial_loop.thisIndex'
p2659
g59
(g98
S'~\x00\x00\x00'
tRp2660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2661
I0
sg903
g1194
sS'block_loop.thisRepN'
p2662
I0
sg906
g1190
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2663
I0
sg908
g1197
sg55
g11
sS'block_loop.thisTrial'
p2664
Nsg69
Vn
sS'block_loop.thisTrialN'
p2665
I0
sg39
F1.0502308151972102
sg34
g752
(S'\x07\xdf\t\x19\n)+\x0c\x19\xa8'
tRp2666
sa(dp2667
S'trial_loop.thisTrialN'
p2668
I127
sg894
g1892
sS'block_loop.thisIndex'
p2669
g888
sg38
S'left'
p2670
sg58
g62
sS'trial_loop.thisN'
p2671
I127
sg33
g1519
sg63
g64
sS'trial_loop.thisIndex'
p2672
g59
(g98
S'\x7f\x00\x00\x00'
tRp2673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2674
I0
sg903
g1899
sS'block_loop.thisRepN'
p2675
I0
sg906
g1512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2676
I0
sg908
g1519
sg55
g11
sS'block_loop.thisTrial'
p2677
Nsg69
Vn
sS'block_loop.thisTrialN'
p2678
I0
sg39
F0.98329326758630486
sg34
g752
(S'\x07\xdf\t\x19\n)1\ra\xc8'
tRp2679
sa(dp2680
S'trial_loop.thisTrialN'
p2681
I128
sg894
g966
sS'block_loop.thisIndex'
p2682
g888
sg38
S'right'
p2683
sg58
g62
sS'trial_loop.thisN'
p2684
I128
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2685
g59
(g98
S'\x80\x00\x00\x00'
tRp2686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2687
I0
sg903
g974
sS'block_loop.thisRepN'
p2688
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2689
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2690
Nsg69
Vn
sS'block_loop.thisTrialN'
p2691
I0
sg39
F1.3667646642916225
sg34
g752
(S'\x07\xdf\t\x19\n)7\r\xb3\xd0'
tRp2692
sa(dp2693
S'trial_loop.thisTrialN'
p2694
I129
sg894
g1594
sS'block_loop.thisIndex'
p2695
g888
sg38
S'left'
p2696
sg58
g62
sS'trial_loop.thisN'
p2697
I129
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2698
g59
(g98
S'\x81\x00\x00\x00'
tRp2699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2700
I0
sg903
g1601
sS'block_loop.thisRepN'
p2701
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2702
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p2703
Nsg69
Vn
sS'block_loop.thisTrialN'
p2704
I0
sg39
F0.8667626686069525
sg34
g752
(S'\x07\xdf\t\x19\n*\x02\x04|p'
tRp2705
sa(dp2706
S'trial_loop.thisTrialN'
p2707
I130
sg894
g1810
sS'block_loop.thisIndex'
p2708
g888
sg38
S'left'
p2709
sg58
g62
sS'trial_loop.thisN'
p2710
I130
sg33
g1364
sg63
g64
sS'trial_loop.thisIndex'
p2711
g59
(g98
S'\x82\x00\x00\x00'
tRp2712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2713
I0
sg903
g1817
sS'block_loop.thisRepN'
p2714
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2715
I0
sg908
g1371
sg55
g11
sS'block_loop.thisTrial'
p2716
Nsg69
Vn
sS'block_loop.thisTrialN'
p2717
I0
sg39
F0.71677355934343723
sg34
g752
(S'\x07\xdf\t\x19\n*\x08\x02\xea\x18'
tRp2718
sa(dp2719
S'trial_loop.thisTrialN'
p2720
I131
sg894
g1448
sS'block_loop.thisIndex'
p2721
g888
sg38
S'right'
p2722
sg58
g62
sS'trial_loop.thisN'
p2723
I131
sg33
g1452
sg63
g64
sS'trial_loop.thisIndex'
p2724
g59
(g98
S'\x83\x00\x00\x00'
tRp2725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2726
I0
sg903
g1456
sS'block_loop.thisRepN'
p2727
I0
sg906
g1452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2728
I0
sg908
g1459
sg55
g11
sS'block_loop.thisTrial'
p2729
Nsg69
Vn
sS'block_loop.thisTrialN'
p2730
I0
sg39
F1.6501992263588363
sg34
g752
(S'\x07\xdf\t\x19\n*\r\x0es8'
tRp2731
sa(dp2732
S'trial_loop.thisTrialN'
p2733
I132
sg894
g1124
sS'block_loop.thisIndex'
p2734
g888
sg38
S'right'
p2735
sg58
g62
sS'trial_loop.thisN'
p2736
I132
sg33
g1128
sg63
g64
sS'trial_loop.thisIndex'
p2737
g59
(g98
S'\x84\x00\x00\x00'
tRp2738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2739
I0
sg903
g1132
sS'block_loop.thisRepN'
p2740
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2741
I0
sg908
g1135
sg55
g11
sS'block_loop.thisTrial'
p2742
Nsg69
Vn
sS'block_loop.thisTrialN'
p2743
I0
sg39
F0.78343741304524883
sg34
g752
(S'\x07\xdf\t\x19\n*\x14\t\x85\x80'
tRp2744
sa(dp2745
S'trial_loop.thisTrialN'
p2746
I133
sg894
g1959
sS'block_loop.thisIndex'
p2747
g888
sg38
S'right'
p2748
sg58
g62
sS'trial_loop.thisN'
p2749
I133
sg33
g1098
sg63
g64
sS'trial_loop.thisIndex'
p2750
g59
(g98
S'\x85\x00\x00\x00'
tRp2751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2752
I0
sg903
g1966
sS'block_loop.thisRepN'
p2753
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2754
I0
sg908
g1105
sg55
g11
sS'block_loop.thisTrial'
p2755
Nsg69
Vn
sS'block_loop.thisTrialN'
p2756
I0
sg39
F1.5334225879582846
sg34
g752
(S'\x07\xdf\t\x19\n*\x1a\x06\xc2x'
tRp2757
sa(dp2758
S'trial_loop.thisTrialN'
p2759
I134
sg894
g949
sS'block_loop.thisIndex'
p2760
g888
sg38
S'left'
p2761
sg58
g62
sS'trial_loop.thisN'
p2762
I134
sg33
g959
sg63
g64
sS'trial_loop.thisIndex'
p2763
g59
(g98
S'\x86\x00\x00\x00'
tRp2764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2765
I0
sg903
g957
sS'block_loop.thisRepN'
p2766
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2767
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p2768
Nsg69
Vn
sS'block_loop.thisTrialN'
p2769
I0
sg39
F2.0501700893610177
sg34
g752
(S'\x07\xdf\t\x19\n*!\x00*\xf8'
tRp2770
sa(dp2771
S'trial_loop.thisTrialN'
p2772
I135
sg894
g1291
sS'block_loop.thisIndex'
p2773
g888
sg38
S'right'
p2774
sg58
g62
sS'trial_loop.thisN'
p2775
I135
sg33
g1237
sg63
g64
sS'trial_loop.thisIndex'
p2776
g59
(g98
S'\x87\x00\x00\x00'
tRp2777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2778
I0
sg903
g1298
sS'block_loop.thisRepN'
p2779
I0
sg906
g1237
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2780
I0
sg908
g1244
sg55
g11
sS'block_loop.thisTrial'
p2781
Nsg69
Vn
sS'block_loop.thisTrialN'
p2782
I0
sg39
F1.6001004114532407
sg34
g752
(S'\x07\xdf\t\x19\n*(\x01kH'
tRp2783
sa(dp2784
S'trial_loop.thisTrialN'
p2785
I136
sg894
g1392
sS'block_loop.thisIndex'
p2786
g888
sg38
S'left'
p2787
sg58
g62
sS'trial_loop.thisN'
p2788
I136
sg33
g1396
sg63
g64
sS'trial_loop.thisIndex'
p2789
g59
(g98
S'\x88\x00\x00\x00'
tRp2790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2791
I0
sg903
g1400
sS'block_loop.thisRepN'
p2792
I0
sg906
g1396
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2793
I0
sg908
g1403
sg55
g11
sS'block_loop.thisTrial'
p2794
Nsg69
Vn
sS'block_loop.thisTrialN'
p2795
I0
sg39
F1.3668764226381427
sg34
g752
(S'\x07\xdf\t\x19\n*.\x0b\x088'
tRp2796
sa(dp2797
S'trial_loop.thisTrialN'
p2798
I137
sg894
g949
sS'block_loop.thisIndex'
p2799
g888
sg38
S'left'
p2800
sg58
g62
sS'trial_loop.thisN'
p2801
I137
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2802
g59
(g98
S'\x89\x00\x00\x00'
tRp2803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2804
I0
sg903
g957
sS'block_loop.thisRepN'
p2805
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2806
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p2807
Nsg69
Vn
sS'block_loop.thisTrialN'
p2808
I0
sg39
F0.91677253299167205
sg34
g752
(S'\x07\xdf\t\x19\n*5\x01\xd0\xd8'
tRp2809
sa(dp2810
S'trial_loop.thisTrialN'
p2811
I138
sg894
g1049
sS'block_loop.thisIndex'
p2812
g888
sg38
S'left'
p2813
sg58
g62
sS'trial_loop.thisN'
p2814
I138
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2815
g59
(g98
S'\x8a\x00\x00\x00'
tRp2816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2817
I0
sg903
g1056
sS'block_loop.thisRepN'
p2818
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2819
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2820
Nsg69
Vn
sS'block_loop.thisTrialN'
p2821
I0
sg39
F1.1169046473223716
sg34
g752
(S'\x07\xdf\t\x19\n*;\x010\xb0'
tRp2822
sa(dp2823
S'trial_loop.thisTrialN'
p2824
I139
sg894
g1959
sS'block_loop.thisIndex'
p2825
g888
sg38
S'right'
p2826
sg58
g62
sS'trial_loop.thisN'
p2827
I139
sg33
g1098
sg63
g64
sS'trial_loop.thisIndex'
p2828
g59
(g98
S'\x8b\x00\x00\x00'
tRp2829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2830
I0
sg903
g1966
sS'block_loop.thisRepN'
p2831
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2832
I0
sg908
g1105
sg55
g11
sS'block_loop.thisTrial'
p2833
Nsg69
Vn
sS'block_loop.thisTrialN'
p2834
I0
sg39
F1.083433877832249
sg34
g752
(S'\x07\xdf\t\x19\n+\x05\x03n\xe8'
tRp2835
sa(dp2836
S'trial_loop.thisTrialN'
p2837
I140
sg894
g1594
sS'block_loop.thisIndex'
p2838
g888
sg38
S'left'
p2839
sg58
g62
sS'trial_loop.thisN'
p2840
I140
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2841
g59
(g98
S'\x8c\x00\x00\x00'
tRp2842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2843
I0
sg903
g1601
sS'block_loop.thisRepN'
p2844
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2845
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p2846
Nsg69
Vn
sS'block_loop.thisTrialN'
p2847
I0
sg39
F0.68345303640580823
sg34
g752
(S'\x07\xdf\t\x19\n+\x0b\x050 '
tRp2848
sa(dp2849
S'trial_loop.thisTrialN'
p2850
I141
sg894
g1959
sS'block_loop.thisIndex'
p2851
g888
sg38
S'right'
p2852
sg58
g62
sS'trial_loop.thisN'
p2853
I141
sg33
g1098
sg63
g64
sS'trial_loop.thisIndex'
p2854
g59
(g98
S'\x8d\x00\x00\x00'
tRp2855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2856
I0
sg903
g1966
sS'block_loop.thisRepN'
p2857
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2858
I0
sg908
g1105
sg55
g11
sS'block_loop.thisTrial'
p2859
Nsg69
Vn
sS'block_loop.thisTrialN'
p2860
I0
sg39
F0.683432509362774
sg34
g752
(S'\x07\xdf\t\x19\n+\x11\x00\xc3P'
tRp2861
sa(dp2862
S'trial_loop.thisTrialN'
p2863
I142
sg894
g1233
sS'block_loop.thisIndex'
p2864
g888
sg38
S'left'
p2865
sg58
g62
sS'trial_loop.thisN'
p2866
I142
sg33
g1244
sg63
g64
sS'trial_loop.thisIndex'
p2867
g59
(g98
S'\x8e\x00\x00\x00'
tRp2868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2869
I0
sg903
g1241
sS'block_loop.thisRepN'
p2870
I0
sg906
g1237
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2871
I0
sg908
g1244
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vn
sS'block_loop.thisTrialN'
p2873
I0
sg39
F0.71688303690780231
sg34
g752
(S'\x07\xdf\t\x19\n+\x16\x0b\xd3X'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g2223
sS'block_loop.thisIndex'
p2877
g888
sg38
S'right'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g1482
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g2230
sS'block_loop.thisRepN'
p2883
I0
sg906
g1482
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2884
I0
sg908
g1489
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vn
sS'block_loop.thisTrialN'
p2886
I0
sg39
F1.4834218467040046
sg34
g752
(S'\x07\xdf\t\x19\n+\x1c\x08\x1a8'
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g1124
sS'block_loop.thisIndex'
p2890
g888
sg38
S'right'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g1128
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g1132
sS'block_loop.thisRepN'
p2896
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2897
I0
sg908
g1135
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vn
sS'block_loop.thisTrialN'
p2899
I0
sg39
F0.75011489442249513
sg34
g752
(S'\x07\xdf\t\x19\n+#\x00\x8c\xa0'
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g1448
sS'block_loop.thisIndex'
p2903
g888
sg38
S'right'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g1452
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g1456
sS'block_loop.thisRepN'
p2909
I0
sg906
g1452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2910
I0
sg908
g1459
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vn
sS'block_loop.thisTrialN'
p2912
I0
sg39
F1.4665990794765094
sg34
g752
(S'\x07\xdf\t\x19\n+(\x0c\x92\xc0'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g1276
sS'block_loop.thisIndex'
p2916
g888
sg38
S'right'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g1283
sS'block_loop.thisRepN'
p2922
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2923
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vn
sS'block_loop.thisTrialN'
p2925
I0
sg39
F0.75010406070532554
sg34
g752
(S'\x07\xdf\t\x19\n+/\x05\x05('
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g1478
sS'block_loop.thisIndex'
p2929
g888
sg38
S'left'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g1489
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g1486
sS'block_loop.thisRepN'
p2935
I0
sg906
g1482
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2936
I0
sg908
g1489
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vn
sS'block_loop.thisTrialN'
p2938
I0
sg39
F0.9168968356420919
sg34
g752
(S'\x07\xdf\t\x19\n+5\x01\x8a\x88'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g1743
sS'block_loop.thisIndex'
p2942
g888
sg38
S'right'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g1750
sS'block_loop.thisRepN'
p2948
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2949
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vn
sS'block_loop.thisTrialN'
p2951
I0
sg39
F1.2332884209231452
sg34
g752
(S'\x07\xdf\t\x19\n+;\x00\xea`'
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g1892
sS'block_loop.thisIndex'
p2955
g888
sg38
S'left'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g1512
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g1899
sS'block_loop.thisRepN'
p2961
I0
sg906
g1512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2962
I0
sg908
g1519
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vn
sS'block_loop.thisTrialN'
p2964
I0
sg39
F0.95009647710321588
sg34
g752
(S'\x07\xdf\t\x19\n,\x05\x04\xd2`'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g932
sS'block_loop.thisIndex'
p2968
g888
sg38
S'right'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g940
sS'block_loop.thisRepN'
p2974
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2975
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vn
sS'block_loop.thisTrialN'
p2977
I0
sg39
F1.2835195212182953
sg34
g752
(S'\x07\xdf\t\x19\n,\x0b\x04\xabP'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g1553
sS'block_loop.thisIndex'
p2981
g888
sg38
S'left'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g1128
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g1560
sS'block_loop.thisRepN'
p2987
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2988
I0
sg908
g1135
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vn
sS'block_loop.thisTrialN'
p2990
I0
sg39
F0.75010292031402059
sg34
g752
(S'\x07\xdf\t\x19\n,\x11\t\x85\x80'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g895
sS'block_loop.thisIndex'
p2994
g888
sg38
S'right'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g904
sS'block_loop.thisRepN'
p3000
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3001
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vn
sS'block_loop.thisTrialN'
p3003
I0
sg39
F1.6335366841071846
sg34
g752
(S'\x07\xdf\t\x19\n,\x17\x06I`'
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g1360
sS'block_loop.thisIndex'
p3007
g888
sg38
S'right'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g1364
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g1368
sS'block_loop.thisRepN'
p3013
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3014
I0
sg908
g1371
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vn
sS'block_loop.thisTrialN'
p3016
I0
sg39
F0.73346717725780763
sg34
g752
(S'\x07\xdf\t\x19\n,\x1e\x01\x1d('
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g1049
sS'block_loop.thisIndex'
p3020
g888
sg38
S'left'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g1056
sS'block_loop.thisRepN'
p3026
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3027
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vn
sS'block_loop.thisTrialN'
p3029
I0
sg39
F1.0167916915652313
sg34
g752
(S'\x07\xdf\t\x19\n,#\x0c\xe4\xc8'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g1392
sS'block_loop.thisIndex'
p3033
g888
sg38
S'left'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g1403
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g1400
sS'block_loop.thisRepN'
p3039
I0
sg906
g1396
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3040
I0
sg908
g1403
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vn
sS'block_loop.thisTrialN'
p3042
I0
sg39
F2.1333949904887959
sg34
g752
(S'\x07\xdf\t\x19\n,)\ry8'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g1306
sS'block_loop.thisIndex'
p3046
g888
sg38
S'left'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g1313
sS'block_loop.thisRepN'
p3052
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3053
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vn
sS'block_loop.thisTrialN'
p3055
I0
sg39
F1.1334331935972841
sg34
g752
(S'\x07\xdf\t\x19\n,1\x00\xe6x'
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g2381
sS'block_loop.thisIndex'
p3059
g888
sg38
S'right'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1396
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g2388
sS'block_loop.thisRepN'
p3065
I0
sg906
g1396
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3066
I0
sg908
g1403
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vn
sS'block_loop.thisTrialN'
p3068
I0
sg39
F1.2002045291778813
sg34
g752
(S'\x07\xdf\t\x19\n,7\x03_H'
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1663
sS'block_loop.thisIndex'
p3072
g888
sg38
S'left'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g1459
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1670
sS'block_loop.thisRepN'
p3078
I0
sg906
g1452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3079
I0
sg908
g1459
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vn
sS'block_loop.thisTrialN'
p3081
I0
sg39
F1.7167439091699634
sg34
g752
(S'\x07\xdf\t\x19\n-\x01\x07\x08\xc8'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g1017
sS'block_loop.thisIndex'
p3085
g888
sg38
S'right'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g1024
sS'block_loop.thisRepN'
p3091
I0
sg906
g959
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3092
I0
sg908
g953
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vn
sS'block_loop.thisTrialN'
p3094
I0
sg39
F1.450096192005276
sg34
g752
(S'\x07\xdf\t\x19\n-\x08\x03\r@'
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g1838
sS'block_loop.thisIndex'
p3098
g888
sg38
S'right'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g1043
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g1845
sS'block_loop.thisRepN'
p3104
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3105
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vn
sS'block_loop.thisTrialN'
p3107
I0
sg39
F1.3334335927347638
sg34
g752
(S'\x07\xdf\t\x19\n-\x0e\n\x83h'
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g1478
sS'block_loop.thisIndex'
p3111
g888
sg38
S'left'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g1482
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g1486
sS'block_loop.thisRepN'
p3117
I0
sg906
g1482
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3118
I0
sg908
g1489
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vn
sS'block_loop.thisTrialN'
p3120
I0
sg39
F1.7834134648282998
sg34
g752
(S'\x07\xdf\t\x19\n-\x15\x00\xd2\xf0'
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g1838
sS'block_loop.thisIndex'
p3124
g888
sg38
S'right'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g1043
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g1845
sS'block_loop.thisRepN'
p3130
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3131
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vn
sS'block_loop.thisTrialN'
p3133
I0
sg39
F1.1172322247207376
sg34
g752
(S'\x07\xdf\t\x19\n-\x1b\rJX'
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g1392
sS'block_loop.thisIndex'
p3137
g888
sg38
S'left'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g1396
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g1400
sS'block_loop.thisRepN'
p3143
I0
sg906
g1396
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3144
I0
sg908
g1403
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vn
sS'block_loop.thisTrialN'
p3146
I0
sg39
F1.0667203030707242
sg34
g752
(S'\x07\xdf\t\x19\n-"\x00FP'
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g915
sS'block_loop.thisIndex'
p3150
g888
sg38
S'left'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g923
sS'block_loop.thisRepN'
p3156
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3157
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vn
sS'block_loop.thisTrialN'
p3159
I0
sg39
F0.90011170132720508
sg34
g752
(S'\x07\xdf\t\x19\n-(\x01\xc9\x08'
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g2223
sS'block_loop.thisIndex'
p3163
g888
sg38
S'right'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g1489
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g2230
sS'block_loop.thisRepN'
p3169
I0
sg906
g1482
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3170
I0
sg908
g1489
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vn
sS'block_loop.thisTrialN'
p3172
I0
sg39
F0.76683417114099939
sg34
g752
(S'\x07\xdf\t\x19\n-.\x00\xeeH'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g966
sS'block_loop.thisIndex'
p3176
g888
sg38
S'right'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g974
sS'block_loop.thisRepN'
p3182
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3183
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vn
sS'block_loop.thisTrialN'
p3185
I0
sg39
F0.80009368314449603
sg34
g752
(S'\x07\xdf\t\x19\n-3\x0c\xf4h'
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g1743
sS'block_loop.thisIndex'
p3189
g888
sg38
S'right'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g1750
sS'block_loop.thisRepN'
p3195
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3196
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vn
sS'block_loop.thisTrialN'
p3198
I0
sg39
F1.0334308557953591
sg34
g752
(S'\x07\xdf\t\x19\n-9\nk\xf8'
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g1622
sS'block_loop.thisIndex'
p3202
g888
sg38
S'left'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1190
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g1629
sS'block_loop.thisRepN'
p3208
I0
sg906
g1190
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3209
I0
sg908
g1197
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vn
sS'block_loop.thisTrialN'
p3211
I0
sg39
F1.1835365700680995
sg34
g752
(S'\x07\xdf\t\x19\n.\x03\x0bu\x98'
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g1064
sS'block_loop.thisIndex'
p3215
g888
sg38
S'left'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g1068
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g1072
sS'block_loop.thisRepN'
p3221
I0
sg906
g1068
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3222
I0
sg908
g1075
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vn
sS'block_loop.thisTrialN'
p3224
I0
sg39
F0.93351347714406074
sg34
g752
(S'\x07\xdf\t\x19\n.\t\x0e\xe4\x80'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g1743
sS'block_loop.thisIndex'
p3228
g888
sg38
S'right'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g1750
sS'block_loop.thisRepN'
p3234
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3235
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vn
sS'block_loop.thisTrialN'
p3237
I0
sg39
F0.85020304666932134
sg34
g752
(S'\x07\xdf\t\x19\n.\x0f\x0eDX'
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g1838
sS'block_loop.thisIndex'
p3241
g888
sg38
S'right'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g1845
sS'block_loop.thisRepN'
p3247
I0
sg906
g1036
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3248
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vn
sS'block_loop.thisTrialN'
p3250
I0
sg39
F0.85010924948574029
sg34
g752
(S'\x07\xdf\t\x19\n.\x15\x0cs\x80'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g2223
sS'block_loop.thisIndex'
p3254
g888
sg38
S'right'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g1482
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g2230
sS'block_loop.thisRepN'
p3260
I0
sg906
g1482
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3261
I0
sg908
g1489
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vn
sS'block_loop.thisTrialN'
p3263
I0
sg39
F0.90021291105404089
sg34
g752
(S'\x07\xdf\t\x19\n.\x1b\n\xe1('
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g1000
sS'block_loop.thisIndex'
p3267
g888
sg38
S'right'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g1008
sS'block_loop.thisRepN'
p3273
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3274
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vn
sS'block_loop.thisTrialN'
p3276
I0
sg39
F1.9001439173812287
sg34
g752
(S'\x07\xdf\t\x19\n.!\t\xc7\xe8'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g1306
sS'block_loop.thisIndex'
p3280
g888
sg38
S'left'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g1313
sS'block_loop.thisRepN'
p3286
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3287
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vn
sS'block_loop.thisTrialN'
p3289
I0
sg39
F1.0667585061783029
sg34
g752
(S'\x07\xdf\t\x19\n.(\x08\xaa\xc0'
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g983
sS'block_loop.thisIndex'
p3293
g888
sg38
S'left'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g994
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g991
sS'block_loop.thisRepN'
p3299
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3300
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vn
sS'block_loop.thisTrialN'
p3302
I0
sg39
F0.76675719472859782
sg34
g752
(S'\x07\xdf\t\x19\n..\n-x'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g1810
sS'block_loop.thisIndex'
p3306
g888
sg38
S'left'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g1364
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g1817
sS'block_loop.thisRepN'
p3312
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3313
I0
sg908
g1371
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vn
sS'block_loop.thisTrialN'
p3315
I0
sg39
F0.73345434785596808
sg34
g752
(S'\x07\xdf\t\x19\n.4\x07+\xf0'
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g1392
sS'block_loop.thisIndex'
p3319
g888
sg38
S'left'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g1396
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g1400
sS'block_loop.thisRepN'
p3325
I0
sg906
g1396
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3326
I0
sg908
g1403
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vn
sS'block_loop.thisTrialN'
p3328
I0
sg39
F0.9835387368116244
sg34
g752
(S'\x07\xdf\t\x19\n.:\x03\xb1P'
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1538
sS'block_loop.thisIndex'
p3332
g888
sg38
S'right'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1545
sS'block_loop.thisRepN'
p3338
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3339
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vn
sS'block_loop.thisTrialN'
p3341
I0
sg39
F1.3333794241480064
sg34
g752
(S'\x07\xdf\t\x19\n/\x04\x03\xc8\xc0'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1291
sS'block_loop.thisIndex'
p3345
g888
sg38
S'right'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g1237
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1298
sS'block_loop.thisRepN'
p3351
I0
sg906
g1237
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3352
I0
sg908
g1244
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vn
sS'block_loop.thisTrialN'
p3354
I0
sg39
F0.80009197255731124
sg34
g752
(S'\x07\xdf\t\x19\n/\n\t\x99\x08'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g932
sS'block_loop.thisIndex'
p3358
g888
sg38
S'right'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g940
sS'block_loop.thisRepN'
p3364
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3365
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vn
sS'block_loop.thisTrialN'
p3367
I0
sg39
F0.90009516565305603
sg34
g752
(S'\x07\xdf\t\x19\n/\x10\x06\xd6\x00'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g1377
sS'block_loop.thisIndex'
p3371
g888
sg38
S'right'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g1384
sS'block_loop.thisRepN'
p3377
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3378
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vn
sS'block_loop.thisTrialN'
p3380
I0
sg39
F1.8333962449191858
sg34
g752
(S'\x07\xdf\t\x19\n/\x16\x05\xf7X'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g1360
sS'block_loop.thisIndex'
p3384
g888
sg38
S'right'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g1364
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g1368
sS'block_loop.thisRepN'
p3390
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3391
I0
sg908
g1371
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vn
sS'block_loop.thisTrialN'
p3393
I0
sg39
F0.73344151845367378
sg34
g752
(S'\x07\xdf\t\x19\n/\x1d\x03\xe4\x18'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g1154
sS'block_loop.thisIndex'
p3397
g888
sg38
S'left'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g1162
sS'block_loop.thisRepN'
p3403
I0
sg906
g1158
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3404
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vn
sS'block_loop.thisTrialN'
p3406
I0
sg39
F0.9171089484220829
sg34
g752
(S'\x07\xdf\t\x19\n/#\x00ix'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g1124
sS'block_loop.thisIndex'
p3410
g888
sg38
S'right'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g1135
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g1132
sS'block_loop.thisRepN'
p3416
I0
sg906
g1128
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3417
I0
sg908
g1135
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vn
sS'block_loop.thisTrialN'
p3419
I0
sg39
F0.71678524835442659
sg34
g752
(S'\x07\xdf\t\x19\n/(\x0e\xd0\xf8'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g1478
sS'block_loop.thisIndex'
p3423
g888
sg38
S'left'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g1489
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g1486
sS'block_loop.thisRepN'
p3429
I0
sg906
g1482
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3430
I0
sg908
g1489
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vn
sS'block_loop.thisTrialN'
p3432
I0
sg39
F1.1501037185880705
sg34
g752
(S'\x07\xdf\t\x19\n/.\x0b\x17\xd8'
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g2381
sS'block_loop.thisIndex'
p3436
g888
sg38
S'right'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g1396
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g2388
sS'block_loop.thisRepN'
p3442
I0
sg906
g1396
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3443
I0
sg908
g1403
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vn
sS'block_loop.thisTrialN'
p3445
I0
sg39
F0.88344231672772366
sg34
g752
(S'\x07\xdf\t\x19\n/4\r\xcf('
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g932
sS'block_loop.thisIndex'
p3449
g888
sg38
S'right'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g940
sS'block_loop.thisRepN'
p3455
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3456
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vn
sS'block_loop.thisTrialN'
p3458
I0
sg39
F0.666755997317523
sg34
g752
(S'\x07\xdf\t\x19\n/:\x0cwh'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g1508
sS'block_loop.thisIndex'
p3462
g888
sg38
S'right'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g1512
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g1516
sS'block_loop.thisRepN'
p3468
I0
sg906
g1512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3469
I0
sg908
g1519
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vn
sS'block_loop.thisTrialN'
p3471
I0
sg39
F0.7334466502147734
sg34
g752
(S'\x07\xdf\t\x19\n0\x04\x08\n\x98'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g1663
sS'block_loop.thisIndex'
p3475
g888
sg38
S'left'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g1452
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g1670
sS'block_loop.thisRepN'
p3481
I0
sg906
g1452
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3482
I0
sg908
g1459
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vn
sS'block_loop.thisTrialN'
p3484
I0
sg39
F1.5335329208160147
sg34
g752
(S'\x07\xdf\t\x19\n0\n\x04Qx'
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g983
sS'block_loop.thisIndex'
p3488
g888
sg38
S'left'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g994
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g991
sS'block_loop.thisRepN'
p3494
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3495
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vn
sS'block_loop.thisTrialN'
p3497
I0
sg39
F0.75008723993369131
sg34
g752
(S'\x07\xdf\t\x19\n0\x10\x0c\xfc8'
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g1622
sS'block_loop.thisIndex'
p3501
g888
sg38
S'left'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g1190
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g1629
sS'block_loop.thisRepN'
p3507
I0
sg906
g1190
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3508
I0
sg908
g1197
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vn
sS'block_loop.thisTrialN'
p3510
I0
sg39
F0.71679494168029123
sg34
g752
(S'\x07\xdf\t\x19\n0\x16\t\xc0\x18'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g2223
sS'block_loop.thisIndex'
p3514
g888
sg38
S'right'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g1482
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g2230
sS'block_loop.thisRepN'
p3520
I0
sg906
g1482
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3521
I0
sg908
g1489
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vn
sS'block_loop.thisTrialN'
p3523
I0
sg39
F1.3167590763741828
sg34
g752
(S'\x07\xdf\t\x19\n0\x1c\x06\x06\xf8'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g983
sS'block_loop.thisIndex'
p3527
g888
sg38
S'left'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g994
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g991
sS'block_loop.thisRepN'
p3533
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3534
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vn
sS'block_loop.thisTrialN'
p3536
I0
sg39
F0.75011574971586015
sg34
g752
(S'\x07\xdf\t\x19\n0"\x0bZ@'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g1892
sS'block_loop.thisIndex'
p3540
g888
sg38
S'left'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g1512
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g1899
sS'block_loop.thisRepN'
p3546
I0
sg906
g1512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3547
I0
sg908
g1519
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vn
sS'block_loop.thisTrialN'
p3549
I0
sg39
F0.91676740123057243
sg34
g752
(S'\x07\xdf\t\x19\n0(\x07\xdf\xa0'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g2052
sS'block_loop.thisIndex'
p3553
g888
sg38
S'right'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g2059
sS'block_loop.thisRepN'
p3559
I0
sg906
g1220
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3560
I0
sg908
g1227
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vn
sS'block_loop.thisTrialN'
p3562
I0
sg39
F0.91662029075405371
sg34
g752
(S'\x07\xdf\t\x19\n0.\x07?x'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g932
sS'block_loop.thisIndex'
p3566
g888
sg38
S'left'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g942
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g940
sS'block_loop.thisRepN'
p3572
I0
sg906
g942
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3573
I0
sg908
g936
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vn
sS'block_loop.thisTrialN'
p3575
I0
sg39
F1.6334326234014043
sg34
g752
(S'\x07\xdf\t\x19\n04\x06d\xb8'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g966
sS'block_loop.thisIndex'
p3579
g888
sg38
S'right'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g974
sS'block_loop.thisRepN'
p3585
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3586
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vn
sS'block_loop.thisTrialN'
p3588
I0
sg39
F1.3000623223838375
sg34
g752
(S'\x07\xdf\t\x19\n0;\x018\x80'
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g1094
sS'block_loop.thisIndex'
p3592
g888
sg38
S'left'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g1098
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g1102
sS'block_loop.thisRepN'
p3598
I0
sg906
g1098
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3599
I0
sg908
g1105
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vn
sS'block_loop.thisTrialN'
p3601
I0
sg39
F1.0000880952275111
sg34
g752
(S'\x07\xdf\t\x19\n1\x05\x06Q0'
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g1291
sS'block_loop.thisIndex'
p3605
g888
sg38
S'right'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g1237
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g1298
sS'block_loop.thisRepN'
p3611
I0
sg906
g1237
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3612
I0
sg908
g1244
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vn
sS'block_loop.thisTrialN'
p3614
I0
sg39
F0.68343878151472381
sg34
g752
(S'\x07\xdf\t\x19\n1\x0b\x06\xe1\xb8'
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F0.96692751216778561
sg56
Vr
sS'block_loop.thisIndex'
p3618
g888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vn
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vr
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vn
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'36-fig_rolls.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'left'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'34-hula_hoops_bbq_beef_redo.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
S'36-fig_rolls.png'
p3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vn
sS'block_loop.thisTrialN'
p3649
I0
sg39
F0.78345109774045341
sg34
g752
(S'\x07\xdf\t\x19\n1\x17\x02\xc6\xf0'
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'20-fruit_pastilles.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'right'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'2-steamed_puddings.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'2-steamed_puddings.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3663
I1
sg3647
S'20-fruit_pastilles.png'
p3664
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vn
sS'block_loop.thisTrialN'
p3666
I0
sg39
F0.75020241945412636
sg34
g752
(S'\x07\xdf\t\x19\n1\x1c\x0f\x07\xa8'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'38-maltesers.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'left'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
S'38-maltesers.png'
p3674
sg63
g64
sS'trial_loop.thisIndex'
p3675
g59
(g98
S'\x02\x00\x00\x00'
tRp3676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3677
I0
sg3641
S'6-sour_patch_kids.png'
p3678
sS'block_loop.thisRepN'
p3679
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3680
I1
sg3647
S'6-sour_patch_kids.png'
p3681
sg55
g11
sS'block_loop.thisTrial'
p3682
Nsg69
Vn
sS'block_loop.thisTrialN'
p3683
I0
sg39
F0.66650881750547342
sg34
g752
(S'\x07\xdf\t\x19\n1"\x0b\xcb\x88'
tRp3684
sa(dp3685
S'trial_loop.thisTrialN'
p3686
I3
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p3687
sS'block_loop.thisIndex'
p3688
g3626
sg38
S'right'
p3689
sg58
g62
sS'trial_loop.thisN'
p3690
I3
sg33
S'8-liquorice_catherine_wheels.png'
p3691
sg63
g64
sS'trial_loop.thisIndex'
p3692
g59
(g98
S'\x03\x00\x00\x00'
tRp3693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3694
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3697
I1
sg3647
S'17-jacobs_mini_cheddars_redo.png'
p3698
sg55
g11
sS'block_loop.thisTrial'
p3699
Nsg69
Vn
sS'block_loop.thisTrialN'
p3700
I0
sg39
F0.65012453072904464
sg34
g752
(S'\x07\xdf\t\x19\n1(\x07 8'
tRp3701
sa(dp3702
S'trial_loop.thisTrialN'
p3703
I4
sg3632
S'30-spaghetti_hoops.png'
p3704
sS'block_loop.thisIndex'
p3705
g3626
sg38
S'right'
p3706
sg58
g62
sS'trial_loop.thisN'
p3707
I4
sg33
S'19-caramello_redo.png'
p3708
sg63
g64
sS'trial_loop.thisIndex'
p3709
g59
(g98
S'\x04\x00\x00\x00'
tRp3710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3711
I0
sg3641
S'19-caramello_redo.png'
p3712
sS'block_loop.thisRepN'
p3713
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3714
I1
sg3647
S'30-spaghetti_hoops.png'
p3715
sg55
g11
sS'block_loop.thisTrial'
p3716
Nsg69
Vn
sS'block_loop.thisTrialN'
p3717
I0
sg39
F0.95009220063593602
sg34
g752
(S'\x07\xdf\t\x19\n1.\x02t\xe8'
tRp3718
sa(dp3719
S'trial_loop.thisTrialN'
p3720
I5
sg3632
S'50-polo.png'
p3721
sS'block_loop.thisIndex'
p3722
g3626
sg38
S'left'
p3723
sg58
g62
sS'trial_loop.thisN'
p3724
I5
sg33
S'48-twix.png'
p3725
sg63
g64
sS'trial_loop.thisIndex'
p3726
g59
(g98
S'\x05\x00\x00\x00'
tRp3727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3728
I0
sg3641
S'48-twix.png'
p3729
sS'block_loop.thisRepN'
p3730
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3731
I1
sg3647
S'50-polo.png'
p3732
sg55
g11
sS'block_loop.thisTrial'
p3733
Nsg69
Vn
sS'block_loop.thisTrialN'
p3734
I0
sg39
F0.80055440122623622
sg34
g752
(S'\x07\xdf\t\x19\n14\x02\x13@'
tRp3735
sa(dp3736
S'trial_loop.thisTrialN'
p3737
I6
sg3632
S'51-mars.png'
p3738
sS'block_loop.thisIndex'
p3739
g3626
sg38
S'left'
p3740
sg58
g62
sS'trial_loop.thisN'
p3741
I6
sg33
S'51-mars.png'
p3742
sg63
g64
sS'trial_loop.thisIndex'
p3743
g59
(g98
S'\x06\x00\x00\x00'
tRp3744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3745
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p3746
sS'block_loop.thisRepN'
p3747
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3748
I1
sg3647
S'27-hartleys_raspberries_jelly.png'
p3749
sg55
g11
sS'block_loop.thisTrial'
p3750
Nsg69
Vn
sS'block_loop.thisTrialN'
p3751
I0
sg39
F0.91678137102417168
sg34
g752
(S'\x07\xdf\t\x19\n19\x0e\xcd\x10'
tRp3752
sa(dp3753
S'trial_loop.thisTrialN'
p3754
I7
sg3632
S'4-corn.png'
p3755
sS'block_loop.thisIndex'
p3756
g3626
sg38
S'right'
p3757
sg58
g62
sS'trial_loop.thisN'
p3758
I7
sg33
S'10-bounty_redo.png'
p3759
sg63
g64
sS'trial_loop.thisIndex'
p3760
g59
(g98
S'\x07\x00\x00\x00'
tRp3761
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3762
I0
sg3641
S'10-bounty_redo.png'
p3763
sS'block_loop.thisRepN'
p3764
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3765
I1
sg3647
S'4-corn.png'
p3766
sg55
g11
sS'block_loop.thisTrial'
p3767
Nsg69
Vn
sS'block_loop.thisTrialN'
p3768
I0
sg39
F1.0167609010004526
sg34
g752
(S'\x07\xdf\t\x19\n2\x03\r\xf2P'
tRp3769
sa(dp3770
S'trial_loop.thisTrialN'
p3771
I8
sg3632
S'43-mrporky_pork_crackles_redo.png'
p3772
sS'block_loop.thisIndex'
p3773
g3626
sg38
S'right'
p3774
sg58
g62
sS'trial_loop.thisN'
p3775
I8
sg33
S'18-mms.png'
p3776
sg63
g64
sS'trial_loop.thisIndex'
p3777
g59
(g98
S'\x08\x00\x00\x00'
tRp3778
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3779
I0
sg3641
S'18-mms.png'
p3780
sS'block_loop.thisRepN'
p3781
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3782
I1
sg3647
S'43-mrporky_pork_crackles_redo.png'
p3783
sg55
g11
sS'block_loop.thisTrial'
p3784
Nsg69
Vn
sS'block_loop.thisTrialN'
p3785
I0
sg39
F1.0168555534773986
sg34
g752
(S'\x07\xdf\t\x19\n2\t\x0e\xc1X'
tRp3786
sa(dp3787
S'trial_loop.thisTrialN'
p3788
I9
sg3632
S'41-peanuts_redo.png'
p3789
sS'block_loop.thisIndex'
p3790
g3626
sg38
S'left'
p3791
sg58
g62
sS'trial_loop.thisN'
p3792
I9
sg33
S'45-chewy_nougat_redo.png'
p3793
sg63
g64
sS'trial_loop.thisIndex'
p3794
g59
(g98
S'\t\x00\x00\x00'
tRp3795
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3796
I0
sg3641
S'45-chewy_nougat_redo.png'
p3797
sS'block_loop.thisRepN'
p3798
I1
sg3644
S'41-peanuts_redo.png'
p3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3800
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p3801
Nsg69
Vn
sS'block_loop.thisTrialN'
p3802
I0
sg39
F0.96662388298682345
sg34
g752
(S'\x07\xdf\t\x19\n2\x10\x00N '
tRp3803
sa(dp3804
S'trial_loop.thisTrialN'
p3805
I10
sg3632
S'8-liquorice_catherine_wheels.png'
p3806
sS'block_loop.thisIndex'
p3807
g3626
sg38
S'left'
p3808
sg58
g62
sS'trial_loop.thisN'
p3809
I10
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p3810
g59
(g98
S'\n\x00\x00\x00'
tRp3811
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3812
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p3813
sS'block_loop.thisRepN'
p3814
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3815
I1
sg3647
g3698
sg55
g11
sS'block_loop.thisTrial'
p3816
Nsg69
Vn
sS'block_loop.thisTrialN'
p3817
I0
sg39
F0.83344271586474861
sg34
g752
(S'\x07\xdf\t\x19\n2\x16\x00e\x90'
tRp3818
sa(dp3819
S'trial_loop.thisTrialN'
p3820
I11
sg3632
S'5-pineapple.png'
p3821
sS'block_loop.thisIndex'
p3822
g3626
sg38
S'left'
p3823
sg58
g62
sS'trial_loop.thisN'
p3824
I11
sg33
S'5-pineapple.png'
p3825
sg63
g64
sS'trial_loop.thisIndex'
p3826
g59
(g98
S'\x0b\x00\x00\x00'
tRp3827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3828
I0
sg3641
S'40-sardines.png'
p3829
sS'block_loop.thisRepN'
p3830
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3831
I1
sg3647
S'40-sardines.png'
p3832
sg55
g11
sS'block_loop.thisTrial'
p3833
Nsg69
Vn
sS'block_loop.thisTrialN'
p3834
I0
sg39
F0.96676899777821745
sg34
g752
(S'\x07\xdf\t\x19\n2\x1b\r\x98x'
tRp3835
sa(dp3836
S'trial_loop.thisTrialN'
p3837
I12
sg3632
g3704
sS'block_loop.thisIndex'
p3838
g3626
sg38
S'right'
p3839
sg58
g62
sS'trial_loop.thisN'
p3840
I12
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p3841
g59
(g98
S'\x0c\x00\x00\x00'
tRp3842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3843
I0
sg3641
g3712
sS'block_loop.thisRepN'
p3844
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3845
I1
sg3647
g3715
sg55
g11
sS'block_loop.thisTrial'
p3846
Nsg69
Vn
sS'block_loop.thisTrialN'
p3847
I0
sg39
F1.1334195089020795
sg34
g752
(S'\x07\xdf\t\x19\n2!\ruP'
tRp3848
sa(dp3849
S'trial_loop.thisTrialN'
p3850
I13
sg3632
g3738
sS'block_loop.thisIndex'
p3851
g3626
sg38
S'left'
p3852
sg58
g62
sS'trial_loop.thisN'
p3853
I13
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p3854
g59
(g98
S'\r\x00\x00\x00'
tRp3855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3856
I0
sg3641
g3746
sS'block_loop.thisRepN'
p3857
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3858
I1
sg3647
g3749
sg55
g11
sS'block_loop.thisTrial'
p3859
Nsg69
Vn
sS'block_loop.thisTrialN'
p3860
I0
sg39
F1.3667569666504278
sg34
g752
(S'\x07\xdf\t\x19\n2(\x00\xe6x'
tRp3861
sa(dp3862
S'trial_loop.thisTrialN'
p3863
I14
sg3632
S'1-treacle_cookies.png'
p3864
sS'block_loop.thisIndex'
p3865
g3626
sg38
S'left'
p3866
sg58
g62
sS'trial_loop.thisN'
p3867
I14
sg33
S'1-treacle_cookies.png'
p3868
sg63
g64
sS'trial_loop.thisIndex'
p3869
g59
(g98
S'\x0e\x00\x00\x00'
tRp3870
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3871
I0
sg3641
S'21-nakd_banana_crunch.png'
p3872
sS'block_loop.thisRepN'
p3873
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3874
I1
sg3647
S'21-nakd_banana_crunch.png'
p3875
sg55
g11
sS'block_loop.thisTrial'
p3876
Nsg69
Vn
sS'block_loop.thisTrialN'
p3877
I0
sg39
F0.70017858527580756
sg34
g752
(S'\x07\xdf\t\x19\n2.\x06\xf1X'
tRp3878
sa(dp3879
S'trial_loop.thisTrialN'
p3880
I15
sg3632
S'18-mms.png'
p3881
sS'block_loop.thisIndex'
p3882
g3626
sg38
S'left'
p3883
sg58
g62
sS'trial_loop.thisN'
p3884
I15
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p3885
g59
(g98
S'\x0f\x00\x00\x00'
tRp3886
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3887
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p3888
sS'block_loop.thisRepN'
p3889
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3890
I1
sg3647
g3783
sg55
g11
sS'block_loop.thisTrial'
p3891
Nsg69
Vn
sS'block_loop.thisTrialN'
p3892
I0
sg39
F0.83353337697235474
sg34
g752
(S'\x07\xdf\t\x19\n24\x02\xbf '
tRp3893
sa(dp3894
S'trial_loop.thisTrialN'
p3895
I16
sg3632
S'45-chewy_nougat_redo.png'
p3896
sS'block_loop.thisIndex'
p3897
g3626
sg38
S'right'
p3898
sg58
g62
sS'trial_loop.thisN'
p3899
I16
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p3900
g59
(g98
S'\x10\x00\x00\x00'
tRp3901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3902
I0
sg3641
S'41-peanuts_redo.png'
p3903
sS'block_loop.thisRepN'
p3904
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3905
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p3906
Nsg69
Vn
sS'block_loop.thisTrialN'
p3907
I0
sg39
F1.63341038577164
sg34
g752
(S'\x07\xdf\t\x19\n2:\x00\xb3\xb0'
tRp3908
sa(dp3909
S'trial_loop.thisTrialN'
p3910
I17
sg3632
S'3-ellas_strawberries_apples.png'
p3911
sS'block_loop.thisIndex'
p3912
g3626
sg38
S'right'
p3913
sg58
g62
sS'trial_loop.thisN'
p3914
I17
sg33
S'13-mccoys_steak_crisps.png'
p3915
sg63
g64
sS'trial_loop.thisIndex'
p3916
g59
(g98
S'\x11\x00\x00\x00'
tRp3917
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3918
I0
sg3641
S'13-mccoys_steak_crisps.png'
p3919
sS'block_loop.thisRepN'
p3920
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3921
I1
sg3647
S'3-ellas_strawberries_apples.png'
p3922
sg55
g11
sS'block_loop.thisTrial'
p3923
Nsg69
Vn
sS'block_loop.thisTrialN'
p3924
I0
sg39
F1.8167405450158185
sg34
g752
(S'\x07\xdf\t\x19\n3\x04\x0b\x088'
tRp3925
sa(dp3926
S'trial_loop.thisTrialN'
p3927
I18
sg3632
g3821
sS'block_loop.thisIndex'
p3928
g3626
sg38
S'left'
p3929
sg58
g62
sS'trial_loop.thisN'
p3930
I18
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p3931
g59
(g98
S'\x12\x00\x00\x00'
tRp3932
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3933
I0
sg3641
g3829
sS'block_loop.thisRepN'
p3934
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3935
I1
sg3647
g3832
sg55
g11
sS'block_loop.thisTrial'
p3936
Nsg69
Vn
sS'block_loop.thisTrialN'
p3937
I0
sg39
F0.90013023268511461
sg34
g752
(S'\x07\xdf\t\x19\n3\x0b\x08\xb6x'
tRp3938
sa(dp3939
S'trial_loop.thisTrialN'
p3940
I19
sg3632
S'49-yorkie.png'
p3941
sS'block_loop.thisIndex'
p3942
g3626
sg38
S'right'
p3943
sg58
g62
sS'trial_loop.thisN'
p3944
I19
sg33
S'35-raisins.png'
p3945
sg63
g64
sS'trial_loop.thisIndex'
p3946
g59
(g98
S'\x13\x00\x00\x00'
tRp3947
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3948
I0
sg3641
S'35-raisins.png'
p3949
sS'block_loop.thisRepN'
p3950
I1
sg3644
g3945
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3951
I1
sg3647
S'49-yorkie.png'
p3952
sg55
g11
sS'block_loop.thisTrial'
p3953
Nsg69
Vn
sS'block_loop.thisTrialN'
p3954
I0
sg39
F0.71678553345191176
sg34
g752
(S'\x07\xdf\t\x19\n3\x11\x07\x9d8'
tRp3955
sa(dp3956
S'trial_loop.thisTrialN'
p3957
I20
sg3632
S'40-sardines.png'
p3958
sS'block_loop.thisIndex'
p3959
g3626
sg38
S'right'
p3960
sg58
g62
sS'trial_loop.thisN'
p3961
I20
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p3962
g59
(g98
S'\x14\x00\x00\x00'
tRp3963
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3964
I0
sg3641
S'5-pineapple.png'
p3965
sS'block_loop.thisRepN'
p3966
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3967
I1
sg3647
g3832
sg55
g11
sS'block_loop.thisTrial'
p3968
Nsg69
Vn
sS'block_loop.thisTrialN'
p3969
I0
sg39
F0.63355378997630396
sg34
g752
(S'\x07\xdf\t\x19\n3\x17\x03\xe8\x00'
tRp3970
sa(dp3971
S'trial_loop.thisTrialN'
p3972
I21
sg3632
S'26-walkers_smoky_bacon.png'
p3973
sS'block_loop.thisIndex'
p3974
g3626
sg38
S'right'
p3975
sg58
g62
sS'trial_loop.thisN'
p3976
I21
sg33
S'26-walkers_smoky_bacon.png'
p3977
sg63
g64
sS'trial_loop.thisIndex'
p3978
g59
(g98
S'\x15\x00\x00\x00'
tRp3979
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3980
I0
sg3641
S'44-crunch.png'
p3981
sS'block_loop.thisRepN'
p3982
I1
sg3644
S'44-crunch.png'
p3983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3984
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p3985
Nsg69
Vn
sS'block_loop.thisTrialN'
p3986
I0
sg39
F1.9000800554686066
sg34
g752
(S'\x07\xdf\t\x19\n3\x1c\x0e\x01\xf0'
tRp3987
sa(dp3988
S'trial_loop.thisTrialN'
p3989
I22
sg3632
S'46-pistachios.png'
p3990
sS'block_loop.thisIndex'
p3991
g3626
sg38
S'left'
p3992
sg58
g62
sS'trial_loop.thisN'
p3993
I22
sg33
S'46-pistachios.png'
p3994
sg63
g64
sS'trial_loop.thisIndex'
p3995
g59
(g98
S'\x16\x00\x00\x00'
tRp3996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3997
I0
sg3641
S'29-beans.png'
p3998
sS'block_loop.thisRepN'
p3999
I1
sg3644
g3994
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4000
I1
sg3647
S'29-beans.png'
p4001
sg55
g11
sS'block_loop.thisTrial'
p4002
Nsg69
Vn
sS'block_loop.thisTrialN'
p4003
I0
sg39
F0.78351695533774546
sg34
g752
(S'\x07\xdf\t\x19\n3#\x0c\xe4\xc8'
tRp4004
sa(dp4005
S'trial_loop.thisTrialN'
p4006
I23
sg3632
g3958
sS'block_loop.thisIndex'
p4007
g3626
sg38
S'right'
p4008
sg58
g62
sS'trial_loop.thisN'
p4009
I23
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p4010
g59
(g98
S'\x17\x00\x00\x00'
tRp4011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4012
I0
sg3641
g3965
sS'block_loop.thisRepN'
p4013
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4014
I1
sg3647
g3832
sg55
g11
sS'block_loop.thisTrial'
p4015
Nsg69
Vn
sS'block_loop.thisTrialN'
p4016
I0
sg39
F0.78343228128460396
sg34
g752
(S'\x07\xdf\t\x19\n3)\n!\xc0'
tRp4017
sa(dp4018
S'trial_loop.thisTrialN'
p4019
I24
sg3632
S'42-mrkipling_lemon_slices.png'
p4020
sS'block_loop.thisIndex'
p4021
g3626
sg38
S'left'
p4022
sg58
g62
sS'trial_loop.thisN'
p4023
I24
sg33
S'42-mrkipling_lemon_slices.png'
p4024
sg63
g64
sS'trial_loop.thisIndex'
p4025
g59
(g98
S'\x18\x00\x00\x00'
tRp4026
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4027
I0
sg3641
S'16-skips_prawn.png'
p4028
sS'block_loop.thisRepN'
p4029
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4030
I1
sg3647
S'16-skips_prawn.png'
p4031
sg55
g11
sS'block_loop.thisTrial'
p4032
Nsg69
Vn
sS'block_loop.thisTrialN'
p4033
I0
sg39
F1.1166415020320528
sg34
g752
(S'\x07\xdf\t\x19\n3/\x07Z\xd0'
tRp4034
sa(dp4035
S'trial_loop.thisTrialN'
p4036
I25
sg3632
g3633
sS'block_loop.thisIndex'
p4037
g3626
sg38
S'left'
p4038
sg58
g62
sS'trial_loop.thisN'
p4039
I25
sg33
g3645
sg63
g64
sS'trial_loop.thisIndex'
p4040
g59
(g98
S'\x19\x00\x00\x00'
tRp4041
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4042
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4043
I1
sg3644
g3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4044
I1
sg3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p4045
Nsg69
Vn
sS'block_loop.thisTrialN'
p4046
I0
sg39
F1.1835456931985391
sg34
g752
(S'\x07\xdf\t\x19\n35\t\x99\x08'
tRp4047
sa(dp4048
S'trial_loop.thisTrialN'
p4049
I26
sg3632
g3755
sS'block_loop.thisIndex'
p4050
g3626
sg38
S'right'
p4051
sg58
g62
sS'trial_loop.thisN'
p4052
I26
sg33
g3766
sg63
g64
sS'trial_loop.thisIndex'
p4053
g59
(g98
S'\x1a\x00\x00\x00'
tRp4054
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4055
I0
sg3641
g3763
sS'block_loop.thisRepN'
p4056
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4057
I1
sg3647
g3766
sg55
g11
sS'block_loop.thisTrial'
p4058
Nsg69
Vn
sS'block_loop.thisTrialN'
p4059
I0
sg39
F0.8668564657909883
sg34
g752
(S'\x07\xdf\t\x19\n3;\r\x04\x08'
tRp4060
sa(dp4061
S'trial_loop.thisTrialN'
p4062
I27
sg3632
g3864
sS'block_loop.thisIndex'
p4063
g3626
sg38
S'left'
p4064
sg58
g62
sS'trial_loop.thisN'
p4065
I27
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p4066
g59
(g98
S'\x1b\x00\x00\x00'
tRp4067
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4068
I0
sg3641
g3872
sS'block_loop.thisRepN'
p4069
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4070
I1
sg3647
g3875
sg55
g11
sS'block_loop.thisTrial'
p4071
Nsg69
Vn
sS'block_loop.thisTrialN'
p4072
I0
sg39
F0.70013696099431399
sg34
g752
(S'\x07\xdf\t\x19\n4\x05\x0bq\xb0'
tRp4073
sa(dp4074
S'trial_loop.thisTrialN'
p4075
I28
sg3632
S'13-mccoys_steak_crisps.png'
p4076
sS'block_loop.thisIndex'
p4077
g3626
sg38
S'left'
p4078
sg58
g62
sS'trial_loop.thisN'
p4079
I28
sg33
g3915
sg63
g64
sS'trial_loop.thisIndex'
p4080
g59
(g98
S'\x1c\x00\x00\x00'
tRp4081
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4082
I0
sg3641
S'3-ellas_strawberries_apples.png'
p4083
sS'block_loop.thisRepN'
p4084
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4085
I1
sg3647
g3922
sg55
g11
sS'block_loop.thisTrial'
p4086
Nsg69
Vn
sS'block_loop.thisTrialN'
p4087
I0
sg39
F2.6333958457826157
sg34
g752
(S'\x07\xdf\t\x19\n4\x0b\x07}\xf8'
tRp4088
sa(dp4089
S'trial_loop.thisTrialN'
p4090
I29
sg3632
g3941
sS'block_loop.thisIndex'
p4091
g3626
sg38
S'right'
p4092
sg58
g62
sS'trial_loop.thisN'
p4093
I29
sg33
g3952
sg63
g64
sS'trial_loop.thisIndex'
p4094
g59
(g98
S'\x1d\x00\x00\x00'
tRp4095
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4096
I0
sg3641
g3949
sS'block_loop.thisRepN'
p4097
I1
sg3644
g3945
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4098
I1
sg3647
g3952
sg55
g11
sS'block_loop.thisTrial'
p4099
Nsg69
Vn
sS'block_loop.thisTrialN'
p4100
I0
sg39
F0.80010537215548538
sg34
g752
(S'\x07\xdf\t\x19\n4\x13\x02M\xd8'
tRp4101
sa(dp4102
S'trial_loop.thisTrialN'
p4103
I30
sg3632
S'31-hobnobs.png'
p4104
sS'block_loop.thisIndex'
p4105
g3626
sg38
S'left'
p4106
sg58
g62
sS'trial_loop.thisN'
p4107
I30
sg33
S'31-hobnobs.png'
p4108
sg63
g64
sS'trial_loop.thisIndex'
p4109
g59
(g98
S'\x1e\x00\x00\x00'
tRp4110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4111
I0
sg3641
S'25-kitkat.png'
p4112
sS'block_loop.thisRepN'
p4113
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4114
I1
sg3647
S'25-kitkat.png'
p4115
sg55
g11
sS'block_loop.thisTrial'
p4116
Nsg69
Vn
sS'block_loop.thisTrialN'
p4117
I0
sg39
F0.76688292286871729
sg34
g752
(S'\x07\xdf\t\x19\n4\x18\x0f\x07\xa8'
tRp4118
sa(dp4119
S'trial_loop.thisTrialN'
p4120
I31
sg3632
S'35-raisins.png'
p4121
sS'block_loop.thisIndex'
p4122
g3626
sg38
S'left'
p4123
sg58
g62
sS'trial_loop.thisN'
p4124
I31
sg33
g3945
sg63
g64
sS'trial_loop.thisIndex'
p4125
g59
(g98
S'\x1f\x00\x00\x00'
tRp4126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4127
I0
sg3641
S'49-yorkie.png'
p4128
sS'block_loop.thisRepN'
p4129
I1
sg3644
g3945
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4130
I1
sg3647
g3952
sg55
g11
sS'block_loop.thisTrial'
p4131
Nsg69
Vn
sS'block_loop.thisTrialN'
p4132
I0
sg39
F0.75006671288974758
sg34
g752
(S'\x07\xdf\t\x19\n4\x1e\x0c\x06 '
tRp4133
sa(dp4134
S'trial_loop.thisTrialN'
p4135
I32
sg3632
g3821
sS'block_loop.thisIndex'
p4136
g3626
sg38
S'left'
p4137
sg58
g62
sS'trial_loop.thisN'
p4138
I32
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p4139
g59
(g98
S' \x00\x00\x00'
tRp4140
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4141
I0
sg3641
g3829
sS'block_loop.thisRepN'
p4142
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4143
I1
sg3647
g3832
sg55
g11
sS'block_loop.thisTrial'
p4144
Nsg69
Vn
sS'block_loop.thisTrialN'
p4145
I0
sg39
F1.4500864986794113
sg34
g752
(S'\x07\xdf\t\x19\n4$\x08\xca\x00'
tRp4146
sa(dp4147
S'trial_loop.thisTrialN'
p4148
I33
sg3632
g3738
sS'block_loop.thisIndex'
p4149
g3626
sg38
S'left'
p4150
sg58
g62
sS'trial_loop.thisN'
p4151
I33
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4152
g59
(g98
S'!\x00\x00\x00'
tRp4153
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4154
I0
sg3641
g3746
sS'block_loop.thisRepN'
p4155
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4156
I1
sg3647
g3749
sg55
g11
sS'block_loop.thisTrial'
p4157
Nsg69
Vn
sS'block_loop.thisTrialN'
p4158
I0
sg39
F0.88341124106500502
sg34
g752
(S'\x07\xdf\t\x19\n4+\x00\xc3P'
tRp4159
sa(dp4160
S'trial_loop.thisTrialN'
p4161
I34
sg3632
S'2-steamed_puddings.png'
p4162
sS'block_loop.thisIndex'
p4163
g3626
sg38
S'left'
p4164
sg58
g62
sS'trial_loop.thisN'
p4165
I34
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4166
g59
(g98
S'"\x00\x00\x00'
tRp4167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4168
I0
sg3641
S'20-fruit_pastilles.png'
p4169
sS'block_loop.thisRepN'
p4170
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4171
I1
sg3647
g3664
sg55
g11
sS'block_loop.thisTrial'
p4172
Nsg69
Vn
sS'block_loop.thisTrialN'
p4173
I0
sg39
F0.78346506753405265
sg34
g752
(S'\x07\xdf\t\x19\n40\x0e\xad\xd0'
tRp4174
sa(dp4175
S'trial_loop.thisTrialN'
p4176
I35
sg3632
S'7-olives.png'
p4177
sS'block_loop.thisIndex'
p4178
g3626
sg38
S'left'
p4179
sg58
g62
sS'trial_loop.thisN'
p4180
I35
sg33
S'7-olives.png'
p4181
sg63
g64
sS'trial_loop.thisIndex'
p4182
g59
(g98
S'#\x00\x00\x00'
tRp4183
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4184
I0
sg3641
S'22-daim.png'
p4185
sS'block_loop.thisRepN'
p4186
I1
sg3644
g4181
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4187
I1
sg3647
S'22-daim.png'
p4188
sg55
g11
sS'block_loop.thisTrial'
p4189
Nsg69
Vn
sS'block_loop.thisTrialN'
p4190
I0
sg39
F0.98352077564868523
sg34
g752
(S'\x07\xdf\t\x19\n46\x0b\xea\xc8'
tRp4191
sa(dp4192
S'trial_loop.thisTrialN'
p4193
I36
sg3632
S'29-beans.png'
p4194
sS'block_loop.thisIndex'
p4195
g3626
sg38
S'right'
p4196
sg58
g62
sS'trial_loop.thisN'
p4197
I36
sg33
g4001
sg63
g64
sS'trial_loop.thisIndex'
p4198
g59
(g98
S'$\x00\x00\x00'
tRp4199
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4200
I0
sg3641
S'46-pistachios.png'
p4201
sS'block_loop.thisRepN'
p4202
I1
sg3644
g3994
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4203
I1
sg3647
g4001
sg55
g11
sS'block_loop.thisTrial'
p4204
Nsg69
Vn
sS'block_loop.thisTrialN'
p4205
I0
sg39
F0.71677897620156727
sg34
g752
(S'\x07\xdf\t\x19\n5\x00\x0c@\xb8'
tRp4206
sa(dp4207
S'trial_loop.thisTrialN'
p4208
I37
sg3632
g3896
sS'block_loop.thisIndex'
p4209
g3626
sg38
S'right'
p4210
sg58
g62
sS'trial_loop.thisN'
p4211
I37
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p4212
g59
(g98
S'%\x00\x00\x00'
tRp4213
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4214
I0
sg3641
g3903
sS'block_loop.thisRepN'
p4215
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4216
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p4217
Nsg69
Vn
sS'block_loop.thisTrialN'
p4218
I0
sg39
F2.3000583310140428
sg34
g752
(S'\x07\xdf\t\x19\n5\x06\x08\x87\x98'
tRp4219
sa(dp4220
S'trial_loop.thisTrialN'
p4221
I38
sg3632
g3721
sS'block_loop.thisIndex'
p4222
g3626
sg38
S'left'
p4223
sg58
g62
sS'trial_loop.thisN'
p4224
I38
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4225
g59
(g98
S'&\x00\x00\x00'
tRp4226
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4227
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4228
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4229
I1
sg3647
g3732
sg55
g11
sS'block_loop.thisTrial'
p4230
Nsg69
Vn
sS'block_loop.thisTrialN'
p4231
I0
sg39
F1.1167575368463076
sg34
g752
(S'\x07\xdf\t\x19\n5\r\r\x98x'
tRp4232
sa(dp4233
S'trial_loop.thisTrialN'
p4234
I39
sg3632
S'6-sour_patch_kids.png'
p4235
sS'block_loop.thisIndex'
p4236
g3626
sg38
S'right'
p4237
sg58
g62
sS'trial_loop.thisN'
p4238
I39
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4239
g59
(g98
S"'\x00\x00\x00"
tRp4240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4241
I0
sg3641
S'38-maltesers.png'
p4242
sS'block_loop.thisRepN'
p4243
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4244
I1
sg3647
g3681
sg55
g11
sS'block_loop.thisTrial'
p4245
Nsg69
Vn
sS'block_loop.thisTrialN'
p4246
I0
sg39
F0.91651394926611829
sg34
g752
(S'\x07\xdf\t\x19\n5\x14\x00\x90\x88'
tRp4247
sa(dp4248
S'trial_loop.thisTrialN'
p4249
I40
sg3632
g4162
sS'block_loop.thisIndex'
p4250
g3626
sg38
S'left'
p4251
sg58
g62
sS'trial_loop.thisN'
p4252
I40
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4253
g59
(g98
S'(\x00\x00\x00'
tRp4254
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4255
I0
sg3641
g4169
sS'block_loop.thisRepN'
p4256
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4257
I1
sg3647
g3664
sg55
g11
sS'block_loop.thisTrial'
p4258
Nsg69
Vn
sS'block_loop.thisTrialN'
p4259
I0
sg39
F0.70020310368818173
sg34
g752
(S'\x07\xdf\t\x19\n5\x19\x0e\xf8\x08'
tRp4260
sa(dp4261
S'trial_loop.thisTrialN'
p4262
I41
sg3632
g4020
sS'block_loop.thisIndex'
p4263
g3626
sg38
S'left'
p4264
sg58
g62
sS'trial_loop.thisN'
p4265
I41
sg33
g4031
sg63
g64
sS'trial_loop.thisIndex'
p4266
g59
(g98
S')\x00\x00\x00'
tRp4267
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4268
I0
sg3641
g4028
sS'block_loop.thisRepN'
p4269
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4270
I1
sg3647
g4031
sg55
g11
sS'block_loop.thisTrial'
p4271
Nsg69
Vn
sS'block_loop.thisTrialN'
p4272
I0
sg39
F1.0666835254514808
sg34
g752
(S'\x07\xdf\t\x19\n5\x1f\x0b\x04P'
tRp4273
sa(dp4274
S'trial_loop.thisTrialN'
p4275
I42
sg3632
g3789
sS'block_loop.thisIndex'
p4276
g3626
sg38
S'left'
p4277
sg58
g62
sS'trial_loop.thisN'
p4278
I42
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p4279
g59
(g98
S'*\x00\x00\x00'
tRp4280
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4281
I0
sg3641
g3797
sS'block_loop.thisRepN'
p4282
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4283
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p4284
Nsg69
Vn
sS'block_loop.thisTrialN'
p4285
I0
sg39
F2.3334207633324695
sg34
g752
(S'\x07\xdf\t\x19\n5%\x0c\x87\x08'
tRp4286
sa(dp4287
S'trial_loop.thisTrialN'
p4288
I43
sg3632
S'23-crunchie_redo.png'
p4289
sS'block_loop.thisIndex'
p4290
g3626
sg38
S'left'
p4291
sg58
g62
sS'trial_loop.thisN'
p4292
I43
sg33
S'23-crunchie_redo.png'
p4293
sg63
g64
sS'trial_loop.thisIndex'
p4294
g59
(g98
S'+\x00\x00\x00'
tRp4295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4296
I0
sg3641
S'33-ambrosia_rice.png'
p4297
sS'block_loop.thisRepN'
p4298
I1
sg3644
g4293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4299
I1
sg3647
S'33-ambrosia_rice.png'
p4300
sg55
g11
sS'block_loop.thisTrial'
p4301
Nsg69
Vn
sS'block_loop.thisTrialN'
p4302
I0
sg39
F0.85019392353933654
sg34
g752
(S'\x07\xdf\t\x19\n5-\x02\xd2\xa8'
tRp4303
sa(dp4304
S'trial_loop.thisTrialN'
p4305
I44
sg3632
g3789
sS'block_loop.thisIndex'
p4306
g3626
sg38
S'left'
p4307
sg58
g62
sS'trial_loop.thisN'
p4308
I44
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p4309
g59
(g98
S',\x00\x00\x00'
tRp4310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4311
I0
sg3641
g3797
sS'block_loop.thisRepN'
p4312
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4313
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p4314
Nsg69
Vn
sS'block_loop.thisTrialN'
p4315
I0
sg39
F1.6167469882266232
sg34
g752
(S'\x07\xdf\t\x19\n53\x01\x01\xd0'
tRp4316
sa(dp4317
S'trial_loop.thisTrialN'
p4318
I45
sg3632
g4104
sS'block_loop.thisIndex'
p4319
g3626
sg38
S'left'
p4320
sg58
g62
sS'trial_loop.thisN'
p4321
I45
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p4322
g59
(g98
S'-\x00\x00\x00'
tRp4323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4324
I0
sg3641
g4112
sS'block_loop.thisRepN'
p4325
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4326
I1
sg3647
g4115
sg55
g11
sS'block_loop.thisTrial'
p4327
Nsg69
Vn
sS'block_loop.thisTrialN'
p4328
I0
sg39
F0.78352465297939489
sg34
g752
(S'\x07\xdf\t\x19\n59\n\xdd@'
tRp4329
sa(dp4330
S'trial_loop.thisTrialN'
p4331
I46
sg3632
g4020
sS'block_loop.thisIndex'
p4332
g3626
sg38
S'left'
p4333
sg58
g62
sS'trial_loop.thisN'
p4334
I46
sg33
g4024
sg63
g64
sS'trial_loop.thisIndex'
p4335
g59
(g98
S'.\x00\x00\x00'
tRp4336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4337
I0
sg3641
g4028
sS'block_loop.thisRepN'
p4338
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4339
I1
sg3647
g4031
sg55
g11
sS'block_loop.thisTrial'
p4340
Nsg69
Vn
sS'block_loop.thisTrialN'
p4341
I0
sg39
F0.79997337186341611
sg34
g752
(S'\x07\xdf\t\x19\n6\x03\x08\x16P'
tRp4342
sa(dp4343
S'trial_loop.thisTrialN'
p4344
I47
sg3632
g3881
sS'block_loop.thisIndex'
p4345
g3626
sg38
S'left'
p4346
sg58
g62
sS'trial_loop.thisN'
p4347
I47
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p4348
g59
(g98
S'/\x00\x00\x00'
tRp4349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4350
I0
sg3641
g3888
sS'block_loop.thisRepN'
p4351
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4352
I1
sg3647
g3783
sg55
g11
sS'block_loop.thisTrial'
p4353
Nsg69
Vn
sS'block_loop.thisTrialN'
p4354
I0
sg39
F1.5335403333592694
sg34
g752
(S'\x07\xdf\t\x19\n6\t\x05\x91\xc8'
tRp4355
sa(dp4356
S'trial_loop.thisTrialN'
p4357
I48
sg3632
S'19-caramello_redo.png'
p4358
sS'block_loop.thisIndex'
p4359
g3626
sg38
S'left'
p4360
sg58
g62
sS'trial_loop.thisN'
p4361
I48
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4362
g59
(g98
S'0\x00\x00\x00'
tRp4363
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4364
I0
sg3641
S'30-spaghetti_hoops.png'
p4365
sS'block_loop.thisRepN'
p4366
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4367
I1
sg3647
g3715
sg55
g11
sS'block_loop.thisTrial'
p4368
Nsg69
Vn
sS'block_loop.thisTrialN'
p4369
I0
sg39
F1.0334231581537097
sg34
g752
(S'\x07\xdf\t\x19\n6\x0f\x0e8\xa0'
tRp4370
sa(dp4371
S'trial_loop.thisTrialN'
p4372
I49
sg3632
S'22-daim.png'
p4373
sS'block_loop.thisIndex'
p4374
g3626
sg38
S'left'
p4375
sg58
g62
sS'trial_loop.thisN'
p4376
I49
sg33
g4188
sg63
g64
sS'trial_loop.thisIndex'
p4377
g59
(g98
S'1\x00\x00\x00'
tRp4378
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4379
I0
sg3641
S'7-olives.png'
p4380
sS'block_loop.thisRepN'
p4381
I1
sg3644
g4181
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4382
I1
sg3647
g4188
sg55
g11
sS'block_loop.thisTrial'
p4383
Nsg69
Vn
sS'block_loop.thisTrialN'
p4384
I0
sg39
F0.700101608863406
sg34
g752
(S'\x07\xdf\t\x19\n6\x16\x00\x03\xe8'
tRp4385
sa(dp4386
S'trial_loop.thisTrialN'
p4387
I50
sg3632
S'10-bounty_redo.png'
p4388
sS'block_loop.thisIndex'
p4389
g3626
sg38
S'left'
p4390
sg58
g62
sS'trial_loop.thisN'
p4391
I50
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4392
g59
(g98
S'2\x00\x00\x00'
tRp4393
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4394
I0
sg3641
S'4-corn.png'
p4395
sS'block_loop.thisRepN'
p4396
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4397
I1
sg3647
g3766
sg55
g11
sS'block_loop.thisTrial'
p4398
Nsg69
Vn
sS'block_loop.thisTrialN'
p4399
I0
sg39
F1.233898530264014
sg34
g752
(S'\x07\xdf\t\x19\n6\x1b\x0bRp'
tRp4400
sa(dp4401
S'trial_loop.thisTrialN'
p4402
I51
sg3632
g3670
sS'block_loop.thisIndex'
p4403
g3626
sg38
S'left'
p4404
sg58
g62
sS'trial_loop.thisN'
p4405
I51
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4406
g59
(g98
S'3\x00\x00\x00'
tRp4407
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4408
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4409
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4410
I1
sg3647
g3681
sg55
g11
sS'block_loop.thisTrial'
p4411
Nsg69
Vn
sS'block_loop.thisTrialN'
p4412
I0
sg39
F1.1998353274975671
sg34
g752
(S'\x07\xdf\t\x19\n6!\x0f6\x88'
tRp4413
sa(dp4414
S'trial_loop.thisTrialN'
p4415
I52
sg3632
g3973
sS'block_loop.thisIndex'
p4416
g3626
sg38
S'right'
p4417
sg58
g62
sS'trial_loop.thisN'
p4418
I52
sg33
g3983
sg63
g64
sS'trial_loop.thisIndex'
p4419
g59
(g98
S'4\x00\x00\x00'
tRp4420
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4421
I0
sg3641
g3981
sS'block_loop.thisRepN'
p4422
I1
sg3644
g3983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4423
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p4424
Nsg69
Vn
sS'block_loop.thisTrialN'
p4425
I0
sg39
F1.1001229341809449
sg34
g752
(S'\x07\xdf\t\x19\n6(\x03\x9d\xc8'
tRp4426
sa(dp4427
S'trial_loop.thisTrialN'
p4428
I53
sg3632
g3806
sS'block_loop.thisIndex'
p4429
g3626
sg38
S'left'
p4430
sg58
g62
sS'trial_loop.thisN'
p4431
I53
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4432
g59
(g98
S'5\x00\x00\x00'
tRp4433
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4434
I0
sg3641
g3813
sS'block_loop.thisRepN'
p4435
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4436
I1
sg3647
g3698
sg55
g11
sS'block_loop.thisTrial'
p4437
Nsg69
Vn
sS'block_loop.thisTrialN'
p4438
I0
sg39
F1.1500977315336058
sg34
g752
(S'\x07\xdf\t\x19\n6.\x05\x9d\x80'
tRp4439
sa(dp4440
S'trial_loop.thisTrialN'
p4441
I54
sg3632
g3896
sS'block_loop.thisIndex'
p4442
g3626
sg38
S'right'
p4443
sg58
g62
sS'trial_loop.thisN'
p4444
I54
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p4445
g59
(g98
S'6\x00\x00\x00'
tRp4446
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4447
I0
sg3641
g3903
sS'block_loop.thisRepN'
p4448
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4449
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p4450
Nsg69
Vn
sS'block_loop.thisTrialN'
p4451
I0
sg39
F1.6167498392051129
sg34
g752
(S'\x07\xdf\t\x19\n64\x08T\xd0'
tRp4452
sa(dp4453
S'trial_loop.thisTrialN'
p4454
I55
sg3632
g4121
sS'block_loop.thisIndex'
p4455
g3626
sg38
S'left'
p4456
sg58
g62
sS'trial_loop.thisN'
p4457
I55
sg33
g3952
sg63
g64
sS'trial_loop.thisIndex'
p4458
g59
(g98
S'7\x00\x00\x00'
tRp4459
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4460
I0
sg3641
g4128
sS'block_loop.thisRepN'
p4461
I1
sg3644
g3945
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4462
I1
sg3647
g3952
sg55
g11
sS'block_loop.thisTrial'
p4463
Nsg69
Vn
sS'block_loop.thisTrialN'
p4464
I0
sg39
F0.83354021932063915
sg34
g752
(S'\x07\xdf\t\x19\n6;\x03(\x98'
tRp4465
sa(dp4466
S'trial_loop.thisTrialN'
p4467
I56
sg3632
S'27-hartleys_raspberries_jelly.png'
p4468
sS'block_loop.thisIndex'
p4469
g3626
sg38
S'right'
p4470
sg58
g62
sS'trial_loop.thisN'
p4471
I56
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4472
g59
(g98
S'8\x00\x00\x00'
tRp4473
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4474
I0
sg3641
S'51-mars.png'
p4475
sS'block_loop.thisRepN'
p4476
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4477
I1
sg3647
g3749
sg55
g11
sS'block_loop.thisTrial'
p4478
Nsg69
Vn
sS'block_loop.thisTrialN'
p4479
I0
sg39
F0.86675611135706276
sg34
g752
(S'\x07\xdf\t\x19\n7\x05\x01\x19@'
tRp4480
sa(dp4481
S'trial_loop.thisTrialN'
p4482
I57
sg3632
g3806
sS'block_loop.thisIndex'
p4483
g3626
sg38
S'left'
p4484
sg58
g62
sS'trial_loop.thisN'
p4485
I57
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4486
g59
(g98
S'9\x00\x00\x00'
tRp4487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4488
I0
sg3641
g3813
sS'block_loop.thisRepN'
p4489
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4490
I1
sg3647
g3698
sg55
g11
sS'block_loop.thisTrial'
p4491
Nsg69
Vn
sS'block_loop.thisTrialN'
p4492
I0
sg39
F0.8335376534396346
sg34
g752
(S'\x07\xdf\t\x19\n7\n\x0e\xc9('
tRp4493
sa(dp4494
S'trial_loop.thisTrialN'
p4495
I58
sg3632
g4162
sS'block_loop.thisIndex'
p4496
g3626
sg38
S'left'
p4497
sg58
g62
sS'trial_loop.thisN'
p4498
I58
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p4499
g59
(g98
S':\x00\x00\x00'
tRp4500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4501
I0
sg3641
g4169
sS'block_loop.thisRepN'
p4502
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4503
I1
sg3647
g3664
sg55
g11
sS'block_loop.thisTrial'
p4504
Nsg69
Vn
sS'block_loop.thisTrialN'
p4505
I0
sg39
F0.95011928492840525
sg34
g752
(S'\x07\xdf\t\x19\n7\x10\x0c\xbd\xb8'
tRp4506
sa(dp4507
S'trial_loop.thisTrialN'
p4508
I59
sg3632
g4076
sS'block_loop.thisIndex'
p4509
g3626
sg38
S'left'
p4510
sg58
g62
sS'trial_loop.thisN'
p4511
I59
sg33
g3915
sg63
g64
sS'trial_loop.thisIndex'
p4512
g59
(g98
S';\x00\x00\x00'
tRp4513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4514
I0
sg3641
g4083
sS'block_loop.thisRepN'
p4515
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4516
I1
sg3647
g3922
sg55
g11
sS'block_loop.thisTrial'
p4517
Nsg69
Vn
sS'block_loop.thisTrialN'
p4518
I0
sg39
F1.4834218467040046
sg34
g752
(S'\x07\xdf\t\x19\n7\x16\x0c\\\x10'
tRp4519
sa(dp4520
S'trial_loop.thisTrialN'
p4521
I60
sg3632
g3990
sS'block_loop.thisIndex'
p4522
g3626
sg38
S'left'
p4523
sg58
g62
sS'trial_loop.thisN'
p4524
I60
sg33
g3994
sg63
g64
sS'trial_loop.thisIndex'
p4525
g59
(g98
S'<\x00\x00\x00'
tRp4526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4527
I0
sg3641
g3998
sS'block_loop.thisRepN'
p4528
I1
sg3644
g3994
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4529
I1
sg3647
g4001
sg55
g11
sS'block_loop.thisTrial'
p4530
Nsg69
Vn
sS'block_loop.thisTrialN'
p4531
I0
sg39
F0.73329953973825468
sg34
g752
(S'\x07\xdf\t\x19\n7\x1d\x05\t\x10'
tRp4532
sa(dp4533
S'trial_loop.thisTrialN'
p4534
I61
sg3632
g4104
sS'block_loop.thisIndex'
p4535
g3626
sg38
S'left'
p4536
sg58
g62
sS'trial_loop.thisN'
p4537
I61
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p4538
g59
(g98
S'=\x00\x00\x00'
tRp4539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4540
I0
sg3641
g4112
sS'block_loop.thisRepN'
p4541
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4542
I1
sg3647
g4115
sg55
g11
sS'block_loop.thisTrial'
p4543
Nsg69
Vn
sS'block_loop.thisTrialN'
p4544
I0
sg39
F0.88348793237946666
sg34
g752
(S'\x07\xdf\t\x19\n7#\x01\x8ep'
tRp4545
sa(dp4546
S'trial_loop.thisTrialN'
p4547
I62
sg3632
g3738
sS'block_loop.thisIndex'
p4548
g3626
sg38
S'left'
p4549
sg58
g62
sS'trial_loop.thisN'
p4550
I62
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4551
g59
(g98
S'>\x00\x00\x00'
tRp4552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4553
I0
sg3641
g3746
sS'block_loop.thisRepN'
p4554
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4555
I1
sg3647
g3749
sg55
g11
sS'block_loop.thisTrial'
p4556
Nsg69
Vn
sS'block_loop.thisTrialN'
p4557
I0
sg39
F2.5166696696978761
sg34
g752
(S'\x07\xdf\t\x19\n7)\x00:\x98'
tRp4558
sa(dp4559
S'trial_loop.thisTrialN'
p4560
I63
sg3632
S'25-kitkat.png'
p4561
sS'block_loop.thisIndex'
p4562
g3626
sg38
S'right'
p4563
sg58
g62
sS'trial_loop.thisN'
p4564
I63
sg33
g4115
sg63
g64
sS'trial_loop.thisIndex'
p4565
g59
(g98
S'?\x00\x00\x00'
tRp4566
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4567
I0
sg3641
S'31-hobnobs.png'
p4568
sS'block_loop.thisRepN'
p4569
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4570
I1
sg3647
g4115
sg55
g11
sS'block_loop.thisTrial'
p4571
Nsg69
Vn
sS'block_loop.thisTrialN'
p4572
I0
sg39
F0.85025094310276472
sg34
g752
(S'\x07\xdf\t\x19\n70\x08\x9f\x08'
tRp4573
sa(dp4574
S'trial_loop.thisTrialN'
p4575
I64
sg3632
g3772
sS'block_loop.thisIndex'
p4576
g3626
sg38
S'right'
p4577
sg58
g62
sS'trial_loop.thisN'
p4578
I64
sg33
g3783
sg63
g64
sS'trial_loop.thisIndex'
p4579
g59
(g98
S'@\x00\x00\x00'
tRp4580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4581
I0
sg3641
g3780
sS'block_loop.thisRepN'
p4582
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4583
I1
sg3647
g3783
sg55
g11
sS'block_loop.thisTrial'
p4584
Nsg69
Vn
sS'block_loop.thisTrialN'
p4585
I0
sg39
F1.0001128987378252
sg34
g752
(S'\x07\xdf\t\x19\n76\x06\xd2\x18'
tRp4586
sa(dp4587
S'trial_loop.thisTrialN'
p4588
I65
sg3632
g3990
sS'block_loop.thisIndex'
p4589
g3626
sg38
S'left'
p4590
sg58
g62
sS'trial_loop.thisN'
p4591
I65
sg33
g4001
sg63
g64
sS'trial_loop.thisIndex'
p4592
g59
(g98
S'A\x00\x00\x00'
tRp4593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4594
I0
sg3641
g3998
sS'block_loop.thisRepN'
p4595
I1
sg3644
g3994
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4596
I1
sg3647
g4001
sg55
g11
sS'block_loop.thisTrial'
p4597
Nsg69
Vn
sS'block_loop.thisTrialN'
p4598
I0
sg39
F0.70021536289550568
sg34
g752
(S'\x07\xdf\t\x19\n8\x00\x07b\xa0'
tRp4599
sa(dp4600
S'trial_loop.thisTrialN'
p4601
I66
sg3632
g3911
sS'block_loop.thisIndex'
p4602
g3626
sg38
S'right'
p4603
sg58
g62
sS'trial_loop.thisN'
p4604
I66
sg33
g3922
sg63
g64
sS'trial_loop.thisIndex'
p4605
g59
(g98
S'B\x00\x00\x00'
tRp4606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4607
I0
sg3641
g3919
sS'block_loop.thisRepN'
p4608
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4609
I1
sg3647
g3922
sg55
g11
sS'block_loop.thisTrial'
p4610
Nsg69
Vn
sS'block_loop.thisTrialN'
p4611
I0
sg39
F0.78346164636059257
sg34
g752
(S'\x07\xdf\t\x19\n8\x06\x030h'
tRp4612
sa(dp4613
S'trial_loop.thisTrialN'
p4614
I67
sg3632
g4468
sS'block_loop.thisIndex'
p4615
g3626
sg38
S'right'
p4616
sg58
g62
sS'trial_loop.thisN'
p4617
I67
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4618
g59
(g98
S'C\x00\x00\x00'
tRp4619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4620
I0
sg3641
g4475
sS'block_loop.thisRepN'
p4621
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4622
I1
sg3647
g3749
sg55
g11
sS'block_loop.thisTrial'
p4623
Nsg69
Vn
sS'block_loop.thisTrialN'
p4624
I0
sg39
F0.76678000255469669
sg34
g752
(S'\x07\xdf\t\x19\n8\x0c\x00m`'
tRp4625
sa(dp4626
S'trial_loop.thisTrialN'
p4627
I68
sg3632
S'48-twix.png'
p4628
sS'block_loop.thisIndex'
p4629
g3626
sg38
S'right'
p4630
sg58
g62
sS'trial_loop.thisN'
p4631
I68
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4632
g59
(g98
S'D\x00\x00\x00'
tRp4633
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4634
I0
sg3641
S'50-polo.png'
p4635
sS'block_loop.thisRepN'
p4636
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4637
I1
sg3647
g3732
sg55
g11
sS'block_loop.thisTrial'
p4638
Nsg69
Vn
sS'block_loop.thisTrialN'
p4639
I0
sg39
F2.3001082231330656
sg34
g752
(S'\x07\xdf\t\x19\n8\x11\x0c\xae\x18'
tRp4640
sa(dp4641
S'trial_loop.thisTrialN'
p4642
I69
sg3632
g3653
sS'block_loop.thisIndex'
p4643
g3626
sg38
S'right'
p4644
sg58
g62
sS'trial_loop.thisN'
p4645
I69
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4646
g59
(g98
S'E\x00\x00\x00'
tRp4647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4648
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4649
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4650
I1
sg3647
g3664
sg55
g11
sS'block_loop.thisTrial'
p4651
Nsg69
Vn
sS'block_loop.thisTrialN'
p4652
I0
sg39
F0.83343672881073871
sg34
g752
(S'\x07\xdf\t\x19\n8\x19\x02|\xb8'
tRp4653
sa(dp4654
S'trial_loop.thisTrialN'
p4655
I70
sg3632
g4194
sS'block_loop.thisIndex'
p4656
g3626
sg38
S'right'
p4657
sg58
g62
sS'trial_loop.thisN'
p4658
I70
sg33
g3994
sg63
g64
sS'trial_loop.thisIndex'
p4659
g59
(g98
S'F\x00\x00\x00'
tRp4660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4661
I0
sg3641
g4201
sS'block_loop.thisRepN'
p4662
I1
sg3644
g3994
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4663
I1
sg3647
g4001
sg55
g11
sS'block_loop.thisTrial'
p4664
Nsg69
Vn
sS'block_loop.thisTrialN'
p4665
I0
sg39
F0.86692888063680584
sg34
g752
(S'\x07\xdf\t\x19\n8\x1f\x00qH'
tRp4666
sa(dp4667
S'trial_loop.thisTrialN'
p4668
I71
sg3632
g3806
sS'block_loop.thisIndex'
p4669
g3626
sg38
S'left'
p4670
sg58
g62
sS'trial_loop.thisN'
p4671
I71
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4672
g59
(g98
S'G\x00\x00\x00'
tRp4673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4674
I0
sg3641
g3813
sS'block_loop.thisRepN'
p4675
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4676
I1
sg3647
g3698
sg55
g11
sS'block_loop.thisTrial'
p4677
Nsg69
Vn
sS'block_loop.thisTrialN'
p4678
I0
sg39
F1.5501048019596055
sg34
g752
(S'\x07\xdf\t\x19\n8$\x0e\x1dH'
tRp4679
sa(dp4680
S'trial_loop.thisTrialN'
p4681
I72
sg3632
g3973
sS'block_loop.thisIndex'
p4682
g3626
sg38
S'right'
p4683
sg58
g62
sS'trial_loop.thisN'
p4684
I72
sg33
g3983
sg63
g64
sS'trial_loop.thisIndex'
p4685
g59
(g98
S'H\x00\x00\x00'
tRp4686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4687
I0
sg3641
g3981
sS'block_loop.thisRepN'
p4688
I1
sg3644
g3983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4689
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p4690
Nsg69
Vn
sS'block_loop.thisTrialN'
p4691
I0
sg39
F1.8167385493316033
sg34
g752
(S'\x07\xdf\t\x19\n8+\x08w\xf8'
tRp4692
sa(dp4693
S'trial_loop.thisTrialN'
p4694
I73
sg3632
g4162
sS'block_loop.thisIndex'
p4695
g3626
sg38
S'left'
p4696
sg58
g62
sS'trial_loop.thisN'
p4697
I73
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4698
g59
(g98
S'I\x00\x00\x00'
tRp4699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4700
I0
sg3641
g4169
sS'block_loop.thisRepN'
p4701
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4702
I1
sg3647
g3664
sg55
g11
sS'block_loop.thisTrial'
p4703
Nsg69
Vn
sS'block_loop.thisTrialN'
p4704
I0
sg39
F0.78346050596883288
sg34
g752
(S'\x07\xdf\t\x19\n82\x06* '
tRp4705
sa(dp4706
S'trial_loop.thisTrialN'
p4707
I74
sg3632
g4194
sS'block_loop.thisIndex'
p4708
g3626
sg38
S'right'
p4709
sg58
g62
sS'trial_loop.thisN'
p4710
I74
sg33
g3994
sg63
g64
sS'trial_loop.thisIndex'
p4711
g59
(g98
S'J\x00\x00\x00'
tRp4712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4713
I0
sg3641
g4201
sS'block_loop.thisRepN'
p4714
I1
sg3644
g3994
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4715
I1
sg3647
g4001
sg55
g11
sS'block_loop.thisTrial'
p4716
Nsg69
Vn
sS'block_loop.thisTrialN'
p4717
I0
sg39
F0.75010890736848523
sg34
g752
(S'\x07\xdf\t\x19\n88\x03g\x18'
tRp4718
sa(dp4719
S'trial_loop.thisTrialN'
p4720
I75
sg3632
g4121
sS'block_loop.thisIndex'
p4721
g3626
sg38
S'left'
p4722
sg58
g62
sS'trial_loop.thisN'
p4723
I75
sg33
g3945
sg63
g64
sS'trial_loop.thisIndex'
p4724
g59
(g98
S'K\x00\x00\x00'
tRp4725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4726
I0
sg3641
g4128
sS'block_loop.thisRepN'
p4727
I1
sg3644
g3945
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4728
I1
sg3647
g3952
sg55
g11
sS'block_loop.thisTrial'
p4729
Nsg69
Vn
sS'block_loop.thisTrialN'
p4730
I0
sg39
F0.9002160471300158
sg34
g752
(S'\x07\xdf\t\x19\n9\x01\x0f.\xb8'
tRp4731
sa(dp4732
S'trial_loop.thisTrialN'
p4733
I76
sg3632
g4020
sS'block_loop.thisIndex'
p4734
g3626
sg38
S'left'
p4735
sg58
g62
sS'trial_loop.thisN'
p4736
I76
sg33
g4031
sg63
g64
sS'trial_loop.thisIndex'
p4737
g59
(g98
S'L\x00\x00\x00'
tRp4738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4739
I0
sg3641
g4028
sS'block_loop.thisRepN'
p4740
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4741
I1
sg3647
g4031
sg55
g11
sS'block_loop.thisTrial'
p4742
Nsg69
Vn
sS'block_loop.thisTrialN'
p4743
I0
sg39
F0.9333301592441785
sg34
g752
(S'\x07\xdf\t\x19\n9\x07\x0eP\x10'
tRp4744
sa(dp4745
S'trial_loop.thisTrialN'
p4746
I77
sg3632
S'33-ambrosia_rice.png'
p4747
sS'block_loop.thisIndex'
p4748
g3626
sg38
S'right'
p4749
sg58
g62
sS'trial_loop.thisN'
p4750
I77
sg33
g4293
sg63
g64
sS'trial_loop.thisIndex'
p4751
g59
(g98
S'M\x00\x00\x00'
tRp4752
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4753
I0
sg3641
S'23-crunchie_redo.png'
p4754
sS'block_loop.thisRepN'
p4755
I1
sg3644
g4293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4756
I1
sg3647
g4300
sg55
g11
sS'block_loop.thisTrial'
p4757
Nsg69
Vn
sS'block_loop.thisTrialN'
p4758
I0
sg39
F0.91678137102371693
sg34
g752
(S'\x07\xdf\t\x19\n9\r\r\xaf\xe8'
tRp4759
sa(dp4760
S'trial_loop.thisTrialN'
p4761
I78
sg3632
g4561
sS'block_loop.thisIndex'
p4762
g3626
sg38
S'right'
p4763
sg58
g62
sS'trial_loop.thisN'
p4764
I78
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p4765
g59
(g98
S'N\x00\x00\x00'
tRp4766
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4767
I0
sg3641
g4568
sS'block_loop.thisRepN'
p4768
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4769
I1
sg3647
g4115
sg55
g11
sS'block_loop.thisTrial'
p4770
Nsg69
Vn
sS'block_loop.thisTrialN'
p4771
I0
sg39
F0.93342481172112457
sg34
g752
(S'\x07\xdf\t\x19\n9\x13\r\x13\xa8'
tRp4772
sa(dp4773
S'trial_loop.thisTrialN'
p4774
I79
sg3632
g4628
sS'block_loop.thisIndex'
p4775
g3626
sg38
S'left'
p4776
sg58
g62
sS'trial_loop.thisN'
p4777
I79
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p4778
g59
(g98
S'O\x00\x00\x00'
tRp4779
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4780
I0
sg3641
g4635
sS'block_loop.thisRepN'
p4781
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4782
I1
sg3647
g3732
sg55
g11
sS'block_loop.thisTrial'
p4783
Nsg69
Vn
sS'block_loop.thisTrialN'
p4784
I0
sg39
F1.9668325745924449
sg34
g752
(S'\x07\xdf\t\x19\n9\x19\x0cs\x80'
tRp4785
sa(dp4786
S'trial_loop.thisTrialN'
p4787
I80
sg3632
g3653
sS'block_loop.thisIndex'
p4788
g3626
sg38
S'right'
p4789
sg58
g62
sS'trial_loop.thisN'
p4790
I80
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p4791
g59
(g98
S'P\x00\x00\x00'
tRp4792
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4793
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4794
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4795
I1
sg3647
g3664
sg55
g11
sS'block_loop.thisTrial'
p4796
Nsg69
Vn
sS'block_loop.thisTrialN'
p4797
I0
sg39
F0.8172676908898211
sg34
g752
(S'\x07\xdf\t\x19\n9 \x0c\x83 '
tRp4798
sa(dp4799
S'trial_loop.thisTrialN'
p4800
I81
sg3632
S'21-nakd_banana_crunch.png'
p4801
sS'block_loop.thisIndex'
p4802
g3626
sg38
S'right'
p4803
sg58
g62
sS'trial_loop.thisN'
p4804
I81
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p4805
g59
(g98
S'Q\x00\x00\x00'
tRp4806
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4807
I0
sg3641
S'1-treacle_cookies.png'
p4808
sS'block_loop.thisRepN'
p4809
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4810
I1
sg3647
g3875
sg55
g11
sS'block_loop.thisTrial'
p4811
Nsg69
Vn
sS'block_loop.thisTrialN'
p4812
I0
sg39
F0.73342726356258936
sg34
g752
(S'\x07\xdf\t\x19\n9&\n90'
tRp4813
sa(dp4814
S'trial_loop.thisTrialN'
p4815
I82
sg3632
g3789
sS'block_loop.thisIndex'
p4816
g3626
sg38
S'left'
p4817
sg58
g62
sS'trial_loop.thisN'
p4818
I82
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p4819
g59
(g98
S'R\x00\x00\x00'
tRp4820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4821
I0
sg3641
g3797
sS'block_loop.thisRepN'
p4822
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4823
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p4824
Nsg69
Vn
sS'block_loop.thisTrialN'
p4825
I0
sg39
F1.2667563394352328
sg34
g752
(S'\x07\xdf\t\x19\n9,\x06\x83\xf8'
tRp4826
sa(dp4827
S'trial_loop.thisTrialN'
p4828
I83
sg3632
g3687
sS'block_loop.thisIndex'
p4829
g3626
sg38
S'right'
p4830
sg58
g62
sS'trial_loop.thisN'
p4831
I83
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p4832
g59
(g98
S'S\x00\x00\x00'
tRp4833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4834
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4835
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4836
I1
sg3647
g3698
sg55
g11
sS'block_loop.thisTrial'
p4837
Nsg69
Vn
sS'block_loop.thisTrialN'
p4838
I0
sg39
F0.86678062976898218
sg34
g752
(S'\x07\xdf\t\x19\n92\x0b\x1f\xa8'
tRp4839
sa(dp4840
S'trial_loop.thisTrialN'
p4841
I84
sg3632
g4388
sS'block_loop.thisIndex'
p4842
g3626
sg38
S'left'
p4843
sg58
g62
sS'trial_loop.thisN'
p4844
I84
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4845
g59
(g98
S'T\x00\x00\x00'
tRp4846
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4847
I0
sg3641
g4395
sS'block_loop.thisRepN'
p4848
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4849
I1
sg3647
g3766
sg55
g11
sS'block_loop.thisTrial'
p4850
Nsg69
Vn
sS'block_loop.thisTrialN'
p4851
I0
sg39
F1.0834410052775638
sg34
g752
(S'\x07\xdf\t\x19\n98\t\x8dP'
tRp4852
sa(dp4853
S'trial_loop.thisTrialN'
p4854
I85
sg3632
g4289
sS'block_loop.thisIndex'
p4855
g3626
sg38
S'left'
p4856
sg58
g62
sS'trial_loop.thisN'
p4857
I85
sg33
g4293
sg63
g64
sS'trial_loop.thisIndex'
p4858
g59
(g98
S'U\x00\x00\x00'
tRp4859
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4860
I0
sg3641
g4297
sS'block_loop.thisRepN'
p4861
I1
sg3644
g4293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4862
I1
sg3647
g4300
sg55
g11
sS'block_loop.thisTrial'
p4863
Nsg69
Vn
sS'block_loop.thisTrialN'
p4864
I0
sg39
F0.93353229360036494
sg34
g752
(S'\x07\xdf\t\x19\n:\x02\x0bN\x88'
tRp4865
sa(dp4866
S'trial_loop.thisTrialN'
p4867
I86
sg3632
g3755
sS'block_loop.thisIndex'
p4868
g3626
sg38
S'right'
p4869
sg58
g62
sS'trial_loop.thisN'
p4870
I86
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4871
g59
(g98
S'V\x00\x00\x00'
tRp4872
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4873
I0
sg3641
g3763
sS'block_loop.thisRepN'
p4874
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4875
I1
sg3647
g3766
sg55
g11
sS'block_loop.thisTrial'
p4876
Nsg69
Vn
sS'block_loop.thisTrialN'
p4877
I0
sg39
F0.73338991574837564
sg34
g752
(S'\x07\xdf\t\x19\n:\x08\n\xec\xe0'
tRp4878
sa(dp4879
S'trial_loop.thisTrialN'
p4880
I87
sg3632
g3687
sS'block_loop.thisIndex'
p4881
g3626
sg38
S'right'
p4882
sg58
g62
sS'trial_loop.thisN'
p4883
I87
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p4884
g59
(g98
S'W\x00\x00\x00'
tRp4885
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4886
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4887
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4888
I1
sg3647
g3698
sg55
g11
sS'block_loop.thisTrial'
p4889
Nsg69
Vn
sS'block_loop.thisTrialN'
p4890
I0
sg39
F0.76677772177208681
sg34
g752
(S'\x07\xdf\t\x19\n:\x0e\x07r@'
tRp4891
sa(dp4892
S'trial_loop.thisTrialN'
p4893
I88
sg3632
g3821
sS'block_loop.thisIndex'
p4894
g3626
sg38
S'left'
p4895
sg58
g62
sS'trial_loop.thisN'
p4896
I88
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p4897
g59
(g98
S'X\x00\x00\x00'
tRp4898
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4899
I0
sg3641
g3829
sS'block_loop.thisRepN'
p4900
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4901
I1
sg3647
g3832
sg55
g11
sS'block_loop.thisTrial'
p4902
Nsg69
Vn
sS'block_loop.thisTrialN'
p4903
I0
sg39
F1.0002007088678511
sg34
g752
(S'\x07\xdf\t\x19\n:\x14\x046 '
tRp4904
sa(dp4905
S'trial_loop.thisTrialN'
p4906
I89
sg3632
g4358
sS'block_loop.thisIndex'
p4907
g3626
sg38
S'left'
p4908
sg58
g62
sS'trial_loop.thisN'
p4909
I89
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4910
g59
(g98
S'Y\x00\x00\x00'
tRp4911
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4912
I0
sg3641
g4365
sS'block_loop.thisRepN'
p4913
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4914
I1
sg3647
g3715
sg55
g11
sS'block_loop.thisTrial'
p4915
Nsg69
Vn
sS'block_loop.thisTrialN'
p4916
I0
sg39
F1.1500903189898963
sg34
g752
(S'\x07\xdf\t\x19\n:\x1a\x04\xc6\xa8'
tRp4917
sa(dp4918
S'trial_loop.thisTrialN'
p4919
I90
sg3632
g4235
sS'block_loop.thisIndex'
p4920
g3626
sg38
S'right'
p4921
sg58
g62
sS'trial_loop.thisN'
p4922
I90
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4923
g59
(g98
S'Z\x00\x00\x00'
tRp4924
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4925
I0
sg3641
g4242
sS'block_loop.thisRepN'
p4926
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4927
I1
sg3647
g3681
sg55
g11
sS'block_loop.thisTrial'
p4928
Nsg69
Vn
sS'block_loop.thisTrialN'
p4929
I0
sg39
F1.7331766625766249
sg34
g752
(S'\x07\xdf\t\x19\n: \x07\xb8\x90'
tRp4930
sa(dp4931
S'trial_loop.thisTrialN'
p4932
I91
sg3632
g4358
sS'block_loop.thisIndex'
p4933
g3626
sg38
S'left'
p4934
sg58
g62
sS'trial_loop.thisN'
p4935
I91
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4936
g59
(g98
S'[\x00\x00\x00'
tRp4937
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4938
I0
sg3641
g4365
sS'block_loop.thisRepN'
p4939
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4940
I1
sg3647
g3715
sg55
g11
sS'block_loop.thisTrial'
p4941
Nsg69
Vn
sS'block_loop.thisTrialN'
p4942
I0
sg39
F0.8834317681075845
sg34
g752
(S"\x07\xdf\t\x19\n:'\x03\xfb\x88"
tRp4943
sa(dp4944
S'trial_loop.thisTrialN'
p4945
I92
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p4946
sS'block_loop.thisIndex'
p4947
g3626
sg38
S'right'
p4948
sg58
g62
sS'trial_loop.thisN'
p4949
I92
sg33
g3645
sg63
g64
sS'trial_loop.thisIndex'
p4950
g59
(g98
S'\\\x00\x00\x00'
tRp4951
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4952
I0
sg3641
S'36-fig_rolls.png'
p4953
sS'block_loop.thisRepN'
p4954
I1
sg3644
g3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4955
I1
sg3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p4956
Nsg69
Vn
sS'block_loop.thisTrialN'
p4957
I0
sg39
F1.0500999552969006
sg34
g752
(S'\x07\xdf\t\x19\n:-\x02\xe2H'
tRp4958
sa(dp4959
S'trial_loop.thisTrialN'
p4960
I93
sg3632
g4177
sS'block_loop.thisIndex'
p4961
g3626
sg38
S'left'
p4962
sg58
g62
sS'trial_loop.thisN'
p4963
I93
sg33
g4181
sg63
g64
sS'trial_loop.thisIndex'
p4964
g59
(g98
S']\x00\x00\x00'
tRp4965
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4966
I0
sg3641
g4185
sS'block_loop.thisRepN'
p4967
I1
sg3644
g4181
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4968
I1
sg3647
g4188
sg55
g11
sS'block_loop.thisTrial'
p4969
Nsg69
Vn
sS'block_loop.thisTrialN'
p4970
I0
sg39
F0.93342253093851468
sg34
g752
(S'\x07\xdf\t\x19\n:3\x03\xeb\xe8'
tRp4971
sa(dp4972
S'trial_loop.thisTrialN'
p4973
I94
sg3632
g3704
sS'block_loop.thisIndex'
p4974
g3626
sg38
S'right'
p4975
sg58
g62
sS'trial_loop.thisN'
p4976
I94
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4977
g59
(g98
S'^\x00\x00\x00'
tRp4978
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4979
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4980
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4981
I1
sg3647
g3715
sg55
g11
sS'block_loop.thisTrial'
p4982
Nsg69
Vn
sS'block_loop.thisTrialN'
p4983
I0
sg39
F0.86676694507423235
sg34
g752
(S'\x07\xdf\t\x19\n:9\x03\x8a@'
tRp4984
sa(dp4985
S'trial_loop.thisTrialN'
p4986
I95
sg3632
g3911
sS'block_loop.thisIndex'
p4987
g3626
sg38
S'right'
p4988
sg58
g62
sS'trial_loop.thisN'
p4989
I95
sg33
g3915
sg63
g64
sS'trial_loop.thisIndex'
p4990
g59
(g98
S'_\x00\x00\x00'
tRp4991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4992
I0
sg3641
g3919
sS'block_loop.thisRepN'
p4993
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4994
I1
sg3647
g3922
sg55
g11
sS'block_loop.thisTrial'
p4995
Nsg69
Vn
sS'block_loop.thisTrialN'
p4996
I0
sg39
F1.016758335119448
sg34
g752
(S'\x07\xdf\t\x19\n;\x03\x01\xf7\xe8'
tRp4997
sa(dp4998
S'trial_loop.thisTrialN'
p4999
I96
sg3632
g4628
sS'block_loop.thisIndex'
p5000
g3626
sg38
S'right'
p5001
sg58
g62
sS'trial_loop.thisN'
p5002
I96
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5003
g59
(g98
S'`\x00\x00\x00'
tRp5004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5005
I0
sg3641
g4635
sS'block_loop.thisRepN'
p5006
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5007
I1
sg3647
g3732
sg55
g11
sS'block_loop.thisTrial'
p5008
Nsg69
Vn
sS'block_loop.thisTrialN'
p5009
I0
sg39
F1.2834476765665386
sg34
g752
(S'\x07\xdf\t\x19\n;\t\x02\xc6\xf0'
tRp5010
sa(dp5011
S'trial_loop.thisTrialN'
p5012
I97
sg3632
g3864
sS'block_loop.thisIndex'
p5013
g3626
sg38
S'left'
p5014
sg58
g62
sS'trial_loop.thisN'
p5015
I97
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p5016
g59
(g98
S'a\x00\x00\x00'
tRp5017
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5018
I0
sg3641
g3872
sS'block_loop.thisRepN'
p5019
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5020
I1
sg3647
g3875
sg55
g11
sS'block_loop.thisTrial'
p5021
Nsg69
Vn
sS'block_loop.thisTrialN'
p5022
I0
sg39
F0.73344294394337339
sg34
g752
(S'\x07\xdf\t\x19\n;\x0f\x07\xa1 '
tRp5023
sa(dp5024
S'trial_loop.thisTrialN'
p5025
I98
sg3632
g4289
sS'block_loop.thisIndex'
p5026
g3626
sg38
S'left'
p5027
sg58
g62
sS'trial_loop.thisN'
p5028
I98
sg33
g4293
sg63
g64
sS'trial_loop.thisIndex'
p5029
g59
(g98
S'b\x00\x00\x00'
tRp5030
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5031
I0
sg3641
g4297
sS'block_loop.thisRepN'
p5032
I1
sg3644
g4293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5033
I1
sg3647
g4300
sg55
g11
sS'block_loop.thisTrial'
p5034
Nsg69
Vn
sS'block_loop.thisTrialN'
p5035
I0
sg39
F1.1501259562182895
sg34
g752
(S'\x07\xdf\t\x19\n;\x15\x04&\x80'
tRp5036
sa(dp5037
S'trial_loop.thisTrialN'
p5038
I99
sg3632
g4388
sS'block_loop.thisIndex'
p5039
g3626
sg38
S'left'
p5040
sg58
g62
sS'trial_loop.thisN'
p5041
I99
sg33
g3766
sg63
g64
sS'trial_loop.thisIndex'
p5042
g59
(g98
S'c\x00\x00\x00'
tRp5043
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5044
I0
sg3641
g4395
sS'block_loop.thisRepN'
p5045
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5046
I1
sg3647
g3766
sg55
g11
sS'block_loop.thisTrial'
p5047
Nsg69
Vn
sS'block_loop.thisTrialN'
p5048
I0
sg39
F0.96677127856128209
sg34
g752
(S'\x07\xdf\t\x19\n;\x1b\x06\xd9\xe8'
tRp5049
sa(dp5050
S'trial_loop.thisTrialN'
p5051
I100
sg3632
g4194
sS'block_loop.thisIndex'
p5052
g3626
sg38
S'right'
p5053
sg58
g62
sS'trial_loop.thisN'
p5054
I100
sg33
g3994
sg63
g64
sS'trial_loop.thisIndex'
p5055
g59
(g98
S'd\x00\x00\x00'
tRp5056
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5057
I0
sg3641
g4201
sS'block_loop.thisRepN'
p5058
I1
sg3644
g3994
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5059
I1
sg3647
g4001
sg55
g11
sS'block_loop.thisTrial'
p5060
Nsg69
Vn
sS'block_loop.thisTrialN'
p5061
I0
sg39
F0.80011934194862988
sg34
g752
(S'\x07\xdf\t\x19\n;!\x06\xf1X'
tRp5062
sa(dp5063
S'trial_loop.thisTrialN'
p5064
I101
sg3632
g3670
sS'block_loop.thisIndex'
p5065
g3626
sg38
S'left'
p5066
sg58
g62
sS'trial_loop.thisN'
p5067
I101
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5068
g59
(g98
S'e\x00\x00\x00'
tRp5069
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5070
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5071
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5072
I1
sg3647
g3681
sg55
g11
sS'block_loop.thisTrial'
p5073
Nsg69
Vn
sS'block_loop.thisTrialN'
p5074
I0
sg39
F1.3998089274391532
sg34
g752
(S"\x07\xdf\t\x19\n;'\x04.P"
tRp5075
sa(dp5076
S'trial_loop.thisTrialN'
p5077
I102
sg3632
S'16-skips_prawn.png'
p5078
sS'block_loop.thisIndex'
p5079
g3626
sg38
S'right'
p5080
sg58
g62
sS'trial_loop.thisN'
p5081
I102
sg33
g4024
sg63
g64
sS'trial_loop.thisIndex'
p5082
g59
(g98
S'f\x00\x00\x00'
tRp5083
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5084
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p5085
sS'block_loop.thisRepN'
p5086
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5087
I1
sg3647
g4031
sg55
g11
sS'block_loop.thisTrial'
p5088
Nsg69
Vn
sS'block_loop.thisTrialN'
p5089
I0
sg39
F0.8499843766394406
sg34
g752
(S'\x07\xdf\t\x19\n;-\n\xf0\xc8'
tRp5090
sa(dp5091
S'trial_loop.thisTrialN'
p5092
I103
sg3632
g4373
sS'block_loop.thisIndex'
p5093
g3626
sg38
S'right'
p5094
sg58
g62
sS'trial_loop.thisN'
p5095
I103
sg33
g4188
sg63
g64
sS'trial_loop.thisIndex'
p5096
g59
(g98
S'g\x00\x00\x00'
tRp5097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5098
I0
sg3641
g4380
sS'block_loop.thisRepN'
p5099
I1
sg3644
g4181
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5100
I1
sg3647
g4188
sg55
g11
sS'block_loop.thisTrial'
p5101
Nsg69
Vn
sS'block_loop.thisTrialN'
p5102
I0
sg39
F1.4168535007729588
sg34
g752
(S'\x07\xdf\t\x19\n;3\t\x1f\xf0'
tRp5103
sa(dp5104
S'trial_loop.thisTrialN'
p5105
I104
sg3632
g4801
sS'block_loop.thisIndex'
p5106
g3626
sg38
S'right'
p5107
sg58
g62
sS'trial_loop.thisN'
p5108
I104
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p5109
g59
(g98
S'h\x00\x00\x00'
tRp5110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5111
I0
sg3641
g4808
sS'block_loop.thisRepN'
p5112
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5113
I1
sg3647
g3875
sg55
g11
sS'block_loop.thisTrial'
p5114
Nsg69
Vn
sS'block_loop.thisTrialN'
p5115
I0
sg39
F0.71676187033335736
sg34
g752
(S'\x07\xdf\t\x19\n;:\x00\xa0('
tRp5116
sa(dp5117
S'trial_loop.thisTrialN'
p5118
I105
sg3632
g3670
sS'block_loop.thisIndex'
p5119
g3626
sg38
S'left'
p5120
sg58
g62
sS'trial_loop.thisN'
p5121
I105
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5122
g59
(g98
S'i\x00\x00\x00'
tRp5123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5124
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5125
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5126
I1
sg3647
g3681
sg55
g11
sS'block_loop.thisTrial'
p5127
Nsg69
Vn
sS'block_loop.thisTrialN'
p5128
I0
sg39
F0.85034673597237997
sg34
g752
(S'\x07\xdf\t\x19\x0b\x00\x03\x0c)H'
tRp5129
sa(dp5130
S'trial_loop.thisTrialN'
p5131
I106
sg3632
g3941
sS'block_loop.thisIndex'
p5132
g3626
sg38
S'right'
p5133
sg58
g62
sS'trial_loop.thisN'
p5134
I106
sg33
g3952
sg63
g64
sS'trial_loop.thisIndex'
p5135
g59
(g98
S'j\x00\x00\x00'
tRp5136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5137
I0
sg3641
g3949
sS'block_loop.thisRepN'
p5138
I1
sg3644
g3945
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5139
I1
sg3647
g3952
sg55
g11
sS'block_loop.thisTrial'
p5140
Nsg69
Vn
sS'block_loop.thisTrialN'
p5141
I0
sg39
F0.80011563567677513
sg34
g752
(S'\x07\xdf\t\x19\x0b\x00\t\n\\X'
tRp5142
sa(dp5143
S'trial_loop.thisTrialN'
p5144
I107
sg3632
g4235
sS'block_loop.thisIndex'
p5145
g3626
sg38
S'right'
p5146
sg58
g62
sS'trial_loop.thisN'
p5147
I107
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5148
g59
(g98
S'k\x00\x00\x00'
tRp5149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5150
I0
sg3641
g4242
sS'block_loop.thisRepN'
p5151
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5152
I1
sg3647
g3681
sg55
g11
sS'block_loop.thisTrial'
p5153
Nsg69
Vn
sS'block_loop.thisTrialN'
p5154
I0
sg39
F1.0331665701132806
sg34
g752
(S'\x07\xdf\t\x19\x0b\x00\x0f\x07\xd3\xe8'
tRp5155
sa(dp5156
S'trial_loop.thisTrialN'
p5157
I108
sg3632
g4561
sS'block_loop.thisIndex'
p5158
g3626
sg38
S'right'
p5159
sg58
g62
sS'trial_loop.thisN'
p5160
I108
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p5161
g59
(g98
S'l\x00\x00\x00'
tRp5162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5163
I0
sg3641
g4568
sS'block_loop.thisRepN'
p5164
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5165
I1
sg3647
g4115
sg55
g11
sS'block_loop.thisTrial'
p5166
Nsg69
Vn
sS'block_loop.thisTrialN'
p5167
I0
sg39
F1.5167318210224039
sg34
g752
(S'\x07\xdf\t\x19\x0b\x00\x15\x08\xdd\x88'
tRp5168
sa(dp5169
S'trial_loop.thisTrialN'
p5170
I109
sg3632
g5078
sS'block_loop.thisIndex'
p5171
g3626
sg38
S'right'
p5172
sg58
g62
sS'trial_loop.thisN'
p5173
I109
sg33
g4031
sg63
g64
sS'trial_loop.thisIndex'
p5174
g59
(g98
S'm\x00\x00\x00'
tRp5175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5176
I0
sg3641
g5085
sS'block_loop.thisRepN'
p5177
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5178
I1
sg3647
g4031
sg55
g11
sS'block_loop.thisTrial'
p5179
Nsg69
Vn
sS'block_loop.thisTrialN'
p5180
I0
sg39
F0.99999629372814525
sg34
g752
(S'\x07\xdf\t\x19\x0b\x00\x1c\x02\x07\x88'
tRp5181
sa(dp5182
S'trial_loop.thisTrialN'
p5183
I110
sg3632
g4121
sS'block_loop.thisIndex'
p5184
g3626
sg38
S'left'
p5185
sg58
g62
sS'trial_loop.thisN'
p5186
I110
sg33
g3945
sg63
g64
sS'trial_loop.thisIndex'
p5187
g59
(g98
S'n\x00\x00\x00'
tRp5188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5189
I0
sg3641
g4128
sS'block_loop.thisRepN'
p5190
I1
sg3644
g3945
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5191
I1
sg3647
g3952
sg55
g11
sS'block_loop.thisTrial'
p5192
Nsg69
Vn
sS'block_loop.thisTrialN'
p5193
I0
sg39
F1.1833173298418842
sg34
g752
(S'\x07\xdf\t\x19\x0b\x00"\x02\x9b\xf8'
tRp5194
sa(dp5195
S'trial_loop.thisTrialN'
p5196
I111
sg3632
g3864
sS'block_loop.thisIndex'
p5197
g3626
sg38
S'left'
p5198
sg58
g62
sS'trial_loop.thisN'
p5199
I111
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p5200
g59
(g98
S'o\x00\x00\x00'
tRp5201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5202
I0
sg3641
g3872
sS'block_loop.thisRepN'
p5203
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5204
I1
sg3647
g3875
sg55
g11
sS'block_loop.thisTrial'
p5205
Nsg69
Vn
sS'block_loop.thisTrialN'
p5206
I0
sg39
F1.9000686515555572
sg34
g752
(S'\x07\xdf\t\x19\x0b\x00(\x05\xc8x'
tRp5207
sa(dp5208
S'trial_loop.thisTrialN'
p5209
I112
sg3632
g3911
sS'block_loop.thisIndex'
p5210
g3626
sg38
S'right'
p5211
sg58
g62
sS'trial_loop.thisN'
p5212
I112
sg33
g3915
sg63
g64
sS'trial_loop.thisIndex'
p5213
g59
(g98
S'p\x00\x00\x00'
tRp5214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5215
I0
sg3641
g3919
sS'block_loop.thisRepN'
p5216
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5217
I1
sg3647
g3922
sg55
g11
sS'block_loop.thisTrial'
p5218
Nsg69
Vn
sS'block_loop.thisTrialN'
p5219
I0
sg39
F0.70011785944006988
sg34
g752
(S'\x07\xdf\t\x19\x0b\x00/\x04\xe5\xe8'
tRp5220
sa(dp5221
S'trial_loop.thisTrialN'
p5222
I113
sg3632
g4373
sS'block_loop.thisIndex'
p5223
g3626
sg38
S'right'
p5224
sg58
g62
sS'trial_loop.thisN'
p5225
I113
sg33
g4181
sg63
g64
sS'trial_loop.thisIndex'
p5226
g59
(g98
S'q\x00\x00\x00'
tRp5227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5228
I0
sg3641
g4380
sS'block_loop.thisRepN'
p5229
I1
sg3644
g4181
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5230
I1
sg3647
g4188
sg55
g11
sS'block_loop.thisTrial'
p5231
Nsg69
Vn
sS'block_loop.thisTrialN'
p5232
I0
sg39
F1.0167708794233477
sg34
g752
(S'\x07\xdf\t\x19\x0b\x005\x00\xb7\x98'
tRp5233
sa(dp5234
S'trial_loop.thisTrialN'
p5235
I114
sg3632
g4076
sS'block_loop.thisIndex'
p5236
g3626
sg38
S'left'
p5237
sg58
g62
sS'trial_loop.thisN'
p5238
I114
sg33
g3915
sg63
g64
sS'trial_loop.thisIndex'
p5239
g59
(g98
S'r\x00\x00\x00'
tRp5240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5241
I0
sg3641
g4083
sS'block_loop.thisRepN'
p5242
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5243
I1
sg3647
g3922
sg55
g11
sS'block_loop.thisTrial'
p5244
Nsg69
Vn
sS'block_loop.thisTrialN'
p5245
I0
sg39
F0.68345047052571317
sg34
g752
(S'\x07\xdf\t\x19\x0b\x00;\x01\x82\xb8'
tRp5246
sa(dp5247
S'trial_loop.thisTrialN'
p5248
I115
sg3632
g4747
sS'block_loop.thisIndex'
p5249
g3626
sg38
S'right'
p5250
sg58
g62
sS'trial_loop.thisN'
p5251
I115
sg33
g4293
sg63
g64
sS'trial_loop.thisIndex'
p5252
g59
(g98
S's\x00\x00\x00'
tRp5253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5254
I0
sg3641
g4754
sS'block_loop.thisRepN'
p5255
I1
sg3644
g4293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5256
I1
sg3647
g4300
sg55
g11
sS'block_loop.thisTrial'
p5257
Nsg69
Vn
sS'block_loop.thisTrialN'
p5258
I0
sg39
F1.0168586895533736
sg34
g752
(S'\x07\xdf\t\x19\x0b\x01\x04\x0cX('
tRp5259
sa(dp5260
S'trial_loop.thisTrialN'
p5261
I116
sg3632
g3881
sS'block_loop.thisIndex'
p5262
g3626
sg38
S'left'
p5263
sg58
g62
sS'trial_loop.thisN'
p5264
I116
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5265
g59
(g98
S't\x00\x00\x00'
tRp5266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5267
I0
sg3641
g3888
sS'block_loop.thisRepN'
p5268
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5269
I1
sg3647
g3783
sg55
g11
sS'block_loop.thisTrial'
p5270
Nsg69
Vn
sS'block_loop.thisTrialN'
p5271
I0
sg39
F0.93344220268863864
sg34
g752
(S"\x07\xdf\t\x19\x0b\x01\n\r'0"
tRp5272
sa(dp5273
S'trial_loop.thisTrialN'
p5274
I117
sg3632
g4177
sS'block_loop.thisIndex'
p5275
g3626
sg38
S'left'
p5276
sg58
g62
sS'trial_loop.thisN'
p5277
I117
sg33
g4181
sg63
g64
sS'trial_loop.thisIndex'
p5278
g59
(g98
S'u\x00\x00\x00'
tRp5279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5280
I0
sg3641
g4185
sS'block_loop.thisRepN'
p5281
I1
sg3644
g4181
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5282
I1
sg3647
g4188
sg55
g11
sS'block_loop.thisTrial'
p5283
Nsg69
Vn
sS'block_loop.thisTrialN'
p5284
I0
sg39
F0.91675884829601273
sg34
g752
(S'\x07\xdf\t\x19\x0b\x01\x10\x0c\xc5\x88'
tRp5285
sa(dp5286
S'trial_loop.thisTrialN'
p5287
I118
sg3632
g3755
sS'block_loop.thisIndex'
p5288
g3626
sg38
S'right'
p5289
sg58
g62
sS'trial_loop.thisN'
p5290
I118
sg33
g3766
sg63
g64
sS'trial_loop.thisIndex'
p5291
g59
(g98
S'v\x00\x00\x00'
tRp5292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5293
I0
sg3641
g3763
sS'block_loop.thisRepN'
p5294
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5295
I1
sg3647
g3766
sg55
g11
sS'block_loop.thisTrial'
p5296
Nsg69
Vn
sS'block_loop.thisTrialN'
p5297
I0
sg39
F1.5000994991405605
sg34
g752
(S'\x07\xdf\t\x19\x0b\x01\x16\x0b\xe6\xe0'
tRp5298
sa(dp5299
S'trial_loop.thisTrialN'
p5300
I119
sg3632
g3896
sS'block_loop.thisIndex'
p5301
g3626
sg38
S'right'
p5302
sg58
g62
sS'trial_loop.thisN'
p5303
I119
sg33
g3793
sg63
g64
sS'trial_loop.thisIndex'
p5304
g59
(g98
S'w\x00\x00\x00'
tRp5305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5306
I0
sg3641
g3903
sS'block_loop.thisRepN'
p5307
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5308
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p5309
Nsg69
Vn
sS'block_loop.thisTrialN'
p5310
I0
sg39
F1.6334217896837799
sg34
g752
(S'\x07\xdf\t\x19\x0b\x01\x1d\x04\xd6H'
tRp5311
sa(dp5312
S'trial_loop.thisTrialN'
p5313
I120
sg3632
g3772
sS'block_loop.thisIndex'
p5314
g3626
sg38
S'right'
p5315
sg58
g62
sS'trial_loop.thisN'
p5316
I120
sg33
g3783
sg63
g64
sS'trial_loop.thisIndex'
p5317
g59
(g98
S'x\x00\x00\x00'
tRp5318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5319
I0
sg3641
g3780
sS'block_loop.thisRepN'
p5320
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5321
I1
sg3647
g3783
sg55
g11
sS'block_loop.thisTrial'
p5322
Nsg69
Vn
sS'block_loop.thisTrialN'
p5323
I0
sg39
F1.2502086916065309
sg34
g752
(S'\x07\xdf\t\x19\x0b\x01#\x0e\xecP'
tRp5324
sa(dp5325
S'trial_loop.thisTrialN'
p5326
I121
sg3632
g4801
sS'block_loop.thisIndex'
p5327
g3626
sg38
S'right'
p5328
sg58
g62
sS'trial_loop.thisN'
p5329
I121
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p5330
g59
(g98
S'y\x00\x00\x00'
tRp5331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5332
I0
sg3641
g4808
sS'block_loop.thisRepN'
p5333
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5334
I1
sg3647
g3875
sg55
g11
sS'block_loop.thisTrial'
p5335
Nsg69
Vn
sS'block_loop.thisTrialN'
p5336
I0
sg39
F0.6999621960294462
sg34
g752
(S'\x07\xdf\t\x19\x0b\x01*\x04\x0b('
tRp5337
sa(dp5338
S'trial_loop.thisTrialN'
p5339
I122
sg3632
g3990
sS'block_loop.thisIndex'
p5340
g3626
sg38
S'left'
p5341
sg58
g62
sS'trial_loop.thisN'
p5342
I122
sg33
g4001
sg63
g64
sS'trial_loop.thisIndex'
p5343
g59
(g98
S'z\x00\x00\x00'
tRp5344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5345
I0
sg3641
g3998
sS'block_loop.thisRepN'
p5346
I1
sg3644
g3994
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5347
I1
sg3647
g4001
sg55
g11
sS'block_loop.thisTrial'
p5348
Nsg69
Vn
sS'block_loop.thisTrialN'
p5349
I0
sg39
F0.71673820721298398
sg34
g752
(S'\x07\xdf\t\x19\x0b\x01/\x0f\x1b0'
tRp5350
sa(dp5351
S'trial_loop.thisTrialN'
p5352
I123
sg3632
g4177
sS'block_loop.thisIndex'
p5353
g3626
sg38
S'left'
p5354
sg58
g62
sS'trial_loop.thisN'
p5355
I123
sg33
g4181
sg63
g64
sS'trial_loop.thisIndex'
p5356
g59
(g98
S'{\x00\x00\x00'
tRp5357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5358
I0
sg3641
g4185
sS'block_loop.thisRepN'
p5359
I1
sg3644
g4181
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5360
I1
sg3647
g4188
sg55
g11
sS'block_loop.thisTrial'
p5361
Nsg69
Vn
sS'block_loop.thisTrialN'
p5362
I0
sg39
F0.81677561204833182
sg34
g752
(S'\x07\xdf\t\x19\x0b\x015\x0bb\x10'
tRp5363
sa(dp5364
S'trial_loop.thisTrialN'
p5365
I124
sg3632
g3896
sS'block_loop.thisIndex'
p5366
g3626
sg38
S'right'
p5367
sg58
g62
sS'trial_loop.thisN'
p5368
I124
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p5369
g59
(g98
S'|\x00\x00\x00'
tRp5370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5371
I0
sg3641
g3903
sS'block_loop.thisRepN'
p5372
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5373
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p5374
Nsg69
Vn
sS'block_loop.thisTrialN'
p5375
I0
sg39
F1.2834391236328884
sg34
g752
(S'\x07\xdf\t\x19\x0b\x01;\t\x18 '
tRp5376
sa(dp5377
S'trial_loop.thisTrialN'
p5378
I125
sg3632
g4747
sS'block_loop.thisIndex'
p5379
g3626
sg38
S'right'
p5380
sg58
g62
sS'trial_loop.thisN'
p5381
I125
sg33
g4293
sg63
g64
sS'trial_loop.thisIndex'
p5382
g59
(g98
S'}\x00\x00\x00'
tRp5383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5384
I0
sg3641
g4754
sS'block_loop.thisRepN'
p5385
I1
sg3644
g4293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5386
I1
sg3647
g4300
sg55
g11
sS'block_loop.thisTrial'
p5387
Nsg69
Vn
sS'block_loop.thisTrialN'
p5388
I0
sg39
F0.81676677401537745
sg34
g752
(S'\x07\xdf\t\x19\x0b\x02\x05\r\xf2P'
tRp5389
sa(dp5390
S'trial_loop.thisTrialN'
p5391
I126
sg3632
g4076
sS'block_loop.thisIndex'
p5392
g3626
sg38
S'left'
p5393
sg58
g62
sS'trial_loop.thisN'
p5394
I126
sg33
g3915
sg63
g64
sS'trial_loop.thisIndex'
p5395
g59
(g98
S'~\x00\x00\x00'
tRp5396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5397
I0
sg3641
g4083
sS'block_loop.thisRepN'
p5398
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5399
I1
sg3647
g3922
sg55
g11
sS'block_loop.thisTrial'
p5400
Nsg69
Vn
sS'block_loop.thisTrialN'
p5401
I0
sg39
F1.0005362690044421
sg34
g752
(S'\x07\xdf\t\x19\x0b\x02\x0b\x0b\xa8`'
tRp5402
sa(dp5403
S'trial_loop.thisTrialN'
p5404
I127
sg3632
g3755
sS'block_loop.thisIndex'
p5405
g3626
sg38
S'right'
p5406
sg58
g62
sS'trial_loop.thisN'
p5407
I127
sg33
g3766
sg63
g64
sS'trial_loop.thisIndex'
p5408
g59
(g98
S'\x7f\x00\x00\x00'
tRp5409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5410
I0
sg3641
g3763
sS'block_loop.thisRepN'
p5411
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5412
I1
sg3647
g3766
sg55
g11
sS'block_loop.thisTrial'
p5413
Nsg69
Vn
sS'block_loop.thisTrialN'
p5414
I0
sg39
F2.0667502383421379
sg34
g752
(S'\x07\xdf\t\x19\x0b\x02\x11\x0c<\xd0'
tRp5415
sa(dp5416
S'trial_loop.thisTrialN'
p5417
I128
sg3632
g3958
sS'block_loop.thisIndex'
p5418
g3626
sg38
S'right'
p5419
sg58
g62
sS'trial_loop.thisN'
p5420
I128
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p5421
g59
(g98
S'\x80\x00\x00\x00'
tRp5422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5423
I0
sg3641
g3965
sS'block_loop.thisRepN'
p5424
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5425
I1
sg3647
g3832
sg55
g11
sS'block_loop.thisTrial'
p5426
Nsg69
Vn
sS'block_loop.thisTrialN'
p5427
I0
sg39
F0.90014192169564922
sg34
g752
(S'\x07\xdf\t\x19\x0b\x02\x18\r\xbb\xa0'
tRp5428
sa(dp5429
S'trial_loop.thisTrialN'
p5430
I129
sg3632
g4289
sS'block_loop.thisIndex'
p5431
g3626
sg38
S'left'
p5432
sg58
g62
sS'trial_loop.thisN'
p5433
I129
sg33
g4293
sg63
g64
sS'trial_loop.thisIndex'
p5434
g59
(g98
S'\x81\x00\x00\x00'
tRp5435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5436
I0
sg3641
g4297
sS'block_loop.thisRepN'
p5437
I1
sg3644
g4293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5438
I1
sg3647
g4300
sg55
g11
sS'block_loop.thisTrial'
p5439
Nsg69
Vn
sS'block_loop.thisTrialN'
p5440
I0
sg39
F1.4167597035902872
sg34
g752
(S'\x07\xdf\t\x19\x0b\x02\x1e\x0c\xa2`'
tRp5441
sa(dp5442
S'trial_loop.thisTrialN'
p5443
I130
sg3632
g3704
sS'block_loop.thisIndex'
p5444
g3626
sg38
S'right'
p5445
sg58
g62
sS'trial_loop.thisN'
p5446
I130
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5447
g59
(g98
S'\x82\x00\x00\x00'
tRp5448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5449
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5450
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5451
I1
sg3647
g3715
sg55
g11
sS'block_loop.thisTrial'
p5452
Nsg69
Vn
sS'block_loop.thisTrialN'
p5453
I0
sg39
F0.98348741920290195
sg34
g752
(S'\x07\xdf\t\x19\x0b\x02%\x04]0'
tRp5454
sa(dp5455
S'trial_loop.thisTrialN'
p5456
I131
sg3632
g4121
sS'block_loop.thisIndex'
p5457
g3626
sg38
S'left'
p5458
sg58
g62
sS'trial_loop.thisN'
p5459
I131
sg33
g3945
sg63
g64
sS'trial_loop.thisIndex'
p5460
g59
(g98
S'\x83\x00\x00\x00'
tRp5461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5462
I0
sg3641
g4128
sS'block_loop.thisRepN'
p5463
I1
sg3644
g3945
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5464
I1
sg3647
g3952
sg55
g11
sS'block_loop.thisTrial'
p5465
Nsg69
Vn
sS'block_loop.thisTrialN'
p5466
I0
sg39
F0.73350053370359092
sg34
g752
(S'\x07\xdf\t\x19\x0b\x02+\x04t\xa0'
tRp5467
sa(dp5468
S'trial_loop.thisTrialN'
p5469
I132
sg3632
g4104
sS'block_loop.thisIndex'
p5470
g3626
sg38
S'left'
p5471
sg58
g62
sS'trial_loop.thisN'
p5472
I132
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p5473
g59
(g98
S'\x84\x00\x00\x00'
tRp5474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5475
I0
sg3641
g4112
sS'block_loop.thisRepN'
p5476
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5477
I1
sg3647
g4115
sg55
g11
sS'block_loop.thisTrial'
p5478
Nsg69
Vn
sS'block_loop.thisTrialN'
p5479
I0
sg39
F1.6667471592854781
sg34
g752
(S'\x07\xdf\t\x19\x0b\x021\x00\xfa\x00'
tRp5480
sa(dp5481
S'trial_loop.thisTrialN'
p5482
I133
sg3632
g5078
sS'block_loop.thisIndex'
p5483
g3626
sg38
S'right'
p5484
sg58
g62
sS'trial_loop.thisN'
p5485
I133
sg33
g4024
sg63
g64
sS'trial_loop.thisIndex'
p5486
g59
(g98
S'\x85\x00\x00\x00'
tRp5487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5488
I0
sg3641
g5085
sS'block_loop.thisRepN'
p5489
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5490
I1
sg3647
g4031
sg55
g11
sS'block_loop.thisTrial'
p5491
Nsg69
Vn
sS'block_loop.thisTrialN'
p5492
I0
sg39
F1.0166585508814023
sg34
g752
(S'\x07\xdf\t\x19\x0b\x027\x0b\x89 '
tRp5493
sa(dp5494
S'trial_loop.thisTrialN'
p5495
I134
sg3632
g3633
sS'block_loop.thisIndex'
p5496
g3626
sg38
S'left'
p5497
sg58
g62
sS'trial_loop.thisN'
p5498
I134
sg33
g3645
sg63
g64
sS'trial_loop.thisIndex'
p5499
g59
(g98
S'\x86\x00\x00\x00'
tRp5500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5501
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5502
I1
sg3644
g3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5503
I1
sg3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p5504
Nsg69
Vn
sS'block_loop.thisTrialN'
p5505
I0
sg39
F0.98346831764865783
sg34
g752
(S'\x07\xdf\t\x19\x0b\x03\x01\x0cX('
tRp5506
sa(dp5507
S'trial_loop.thisTrialN'
p5508
I135
sg3632
g4628
sS'block_loop.thisIndex'
p5509
g3626
sg38
S'left'
p5510
sg58
g62
sS'trial_loop.thisN'
p5511
I135
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5512
g59
(g98
S'\x87\x00\x00\x00'
tRp5513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5514
I0
sg3641
g4635
sS'block_loop.thisRepN'
p5515
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5516
I1
sg3647
g3732
sg55
g11
sS'block_loop.thisTrial'
p5517
Nsg69
Vn
sS'block_loop.thisTrialN'
p5518
I0
sg39
F1.4334219607426348
sg34
g752
(S'\x07\xdf\t\x19\x0b\x03\x07\x0c\xae\x18'
tRp5519
sa(dp5520
S'trial_loop.thisTrialN'
p5521
I136
sg3632
S'44-crunch.png'
p5522
sS'block_loop.thisIndex'
p5523
g3626
sg38
S'left'
p5524
sg58
g62
sS'trial_loop.thisN'
p5525
I136
sg33
g3983
sg63
g64
sS'trial_loop.thisIndex'
p5526
g59
(g98
S'\x88\x00\x00\x00'
tRp5527
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5528
I0
sg3641
S'26-walkers_smoky_bacon.png'
p5529
sS'block_loop.thisRepN'
p5530
I1
sg3644
g3983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5531
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p5532
Nsg69
Vn
sS'block_loop.thisTrialN'
p5533
I0
sg39
F1.0002007088669416
sg34
g752
(S'\x07\xdf\t\x19\x0b\x03\x0e\x04h\xe8'
tRp5534
sa(dp5535
S'trial_loop.thisTrialN'
p5536
I137
sg3632
g3958
sS'block_loop.thisIndex'
p5537
g3626
sg38
S'right'
p5538
sg58
g62
sS'trial_loop.thisN'
p5539
I137
sg33
g3832
sg63
g64
sS'trial_loop.thisIndex'
p5540
g59
(g98
S'\x89\x00\x00\x00'
tRp5541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5542
I0
sg3641
g3965
sS'block_loop.thisRepN'
p5543
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5544
I1
sg3647
g3832
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vn
sS'block_loop.thisTrialN'
p5546
I0
sg39
F0.71686735652747302
sg34
g752
(S'\x07\xdf\t\x19\x0b\x03\x14\x04\xf9p'
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g4747
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'right'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g4293
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g4754
sS'block_loop.thisRepN'
p5556
I1
sg3644
g4293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5557
I1
sg3647
g4300
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vn
sS'block_loop.thisTrialN'
p5559
I0
sg39
F0.70012071041855961
sg34
g752
(S'\x07\xdf\t\x19\x0b\x03\x1a\x01D8'
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g4946
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'right'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g3645
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g4953
sS'block_loop.thisRepN'
p5569
I1
sg3644
g3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5570
I1
sg3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vn
sS'block_loop.thisTrialN'
p5572
I0
sg39
F1.1000964200839007
sg34
g752
(S'\x07\xdf\t\x19\x0b\x03\x1f\x0cT@'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g4373
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'right'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g4188
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g4380
sS'block_loop.thisRepN'
p5582
I1
sg3644
g4181
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5583
I1
sg3647
g4188
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vn
sS'block_loop.thisTrialN'
p5585
I0
sg39
F0.9667903801155262
sg34
g752
(S'\x07\xdf\t\x19\x0b\x03%\x0eS\xf8'
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g3789
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'left'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g3799
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g3797
sS'block_loop.thisRepN'
p5595
I1
sg3644
g3799
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5596
I1
sg3647
g3793
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vn
sS'block_loop.thisTrialN'
p5598
I0
sg39
F1.0500936831440413
sg34
g752
(S'\x07\xdf\t\x19\x0b\x03+\x0ekh'
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g3806
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'left'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g3813
sS'block_loop.thisRepN'
p5608
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5609
I1
sg3647
g3698
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vn
sS'block_loop.thisTrialN'
p5611
I0
sg39
F0.76688292286780779
sg34
g752
(S'\x07\xdf\t\x19\x0b\x032\x00qH'
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g4388
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'left'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g4395
sS'block_loop.thisRepN'
p5621
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5622
I1
sg3647
g3766
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vn
sS'block_loop.thisTrialN'
p5624
I0
sg39
F0.9834418035516137
sg34
g752
(S'\x07\xdf\t\x19\x0b\x037\x0c\xb2\x00'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g4561
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'right'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g4568
sS'block_loop.thisRepN'
p5634
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5635
I1
sg3647
g4115
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vn
sS'block_loop.thisTrialN'
p5637
I0
sg39
F1.833412495495395
sg34
g752
(S'\x07\xdf\t\x19\x0b\x04\x01\x0c\xc9p'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g4235
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'right'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g4242
sS'block_loop.thisRepN'
p5647
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5648
I1
sg3647
g3681
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vn
sS'block_loop.thisTrialN'
p5650
I0
sg39
F0.89994206812207267
sg34
g752
(S'\x07\xdf\t\x19\x0b\x04\x08\n\xf4\xb0'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g3941
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'right'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g3945
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g3949
sS'block_loop.thisRepN'
p5660
I1
sg3644
g3945
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5661
I1
sg3647
g3952
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vn
sS'block_loop.thisTrialN'
p5663
I0
sg39
F0.76680537626089063
sg34
g752
(S'\x07\xdf\t\x19\x0b\x04\x0e\t\xdbp'
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g5522
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'left'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g3983
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g5529
sS'block_loop.thisRepN'
p5673
I1
sg3644
g3983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5674
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vn
sS'block_loop.thisTrialN'
p5676
I0
sg39
F0.85023041606018523
sg34
g752
(S'\x07\xdf\t\x19\x0b\x04\x14\x06\xd9\xe8'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g3687
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'right'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5686
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5687
I1
sg3647
g3698
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vn
sS'block_loop.thisTrialN'
p5689
I0
sg39
F0.86687214617086283
sg34
g752
(S'\x07\xdf\t\x19\x0b\x04\x1a\x05\t\x10'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g5522
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'left'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g3977
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g5529
sS'block_loop.thisRepN'
p5699
I1
sg3644
g3983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5700
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vn
sS'block_loop.thisTrialN'
p5702
I0
sg39
F0.9668548122226639
sg34
g752
(S'\x07\xdf\t\x19\x0b\x04 \x03v\xb8'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g3721
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'right'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5712
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5713
I1
sg3647
g3732
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vn
sS'block_loop.thisTrialN'
p5715
I0
sg39
F0.91677538396925229
sg34
g752
(S'\x07\xdf\t\x19\x0b\x04&\x03\x8e('
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g4468
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'right'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g4475
sS'block_loop.thisRepN'
p5725
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5726
I1
sg3647
g3749
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vn
sS'block_loop.thisTrialN'
p5728
I0
sg39
F0.70010274925516569
sg34
g752
(S'\x07\xdf\t\x19\x0b\x04,\x02\xb3h'
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g3633
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'left'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g3645
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5738
I1
sg3644
g3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5739
I1
sg3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vn
sS'block_loop.thisTrialN'
p5741
I0
sg39
F0.75011090305270045
sg34
g752
(S'\x07\xdf\t\x19\x0b\x041\r\xfe\x08'
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g3653
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'right'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5751
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5752
I1
sg3647
g3664
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vn
sS'block_loop.thisTrialN'
p5754
I0
sg39
F1.0335366270874147
sg34
g752
(S'\x07\xdf\t\x19\x0b\x047\n\x83h'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g3941
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'right'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g3952
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g3949
sS'block_loop.thisRepN'
p5764
I1
sg3644
g3945
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5765
I1
sg3647
g3952
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vn
sS'block_loop.thisTrialN'
p5767
I0
sg39
F0.68343536034080898
sg34
g752
(S'\x07\xdf\t\x19\x0b\x05\x01\x0b\x90\xf0'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g5522
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'left'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g3983
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g5529
sS'block_loop.thisRepN'
p5777
I1
sg3644
g3983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5778
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vn
sS'block_loop.thisTrialN'
p5780
I0
sg39
F0.98342298709485476
sg34
g752
(S'\x07\xdf\t\x19\x0b\x05\x07\x07^\xb8'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g4946
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'right'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g3645
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g4953
sS'block_loop.thisRepN'
p5790
I1
sg3644
g3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5791
I1
sg3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vn
sS'block_loop.thisTrialN'
p5793
I0
sg39
F0.71678410796357639
sg34
g752
(S'\x07\xdf\t\x19\x0b\x05\r\x07v('
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g3973
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'right'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g3983
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g3981
sS'block_loop.thisRepN'
p5803
I1
sg3644
g3983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5804
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vn
sS'block_loop.thisTrialN'
p5806
I0
sg39
F1.7500815379771666
sg34
g752
(S'\x07\xdf\t\x19\x0b\x05\x13\x03\xbd\x08'
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g3670
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'left'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5816
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5817
I1
sg3647
g3681
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vn
sS'block_loop.thisTrialN'
p5819
I0
sg39
F0.64987991679754487
sg34
g752
(S'\x07\xdf\t\x19\x0b\x05\x1a\x00}\x00'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g4628
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'left'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g4635
sS'block_loop.thisRepN'
p5829
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5830
I1
sg3647
g3732
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vn
sS'block_loop.thisTrialN'
p5832
I0
sg39
F1.7833886613170762
sg34
g752
(S'\x07\xdf\t\x19\x0b\x05\x1f\n\xd5p'
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g4162
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'left'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g4169
sS'block_loop.thisRepN'
p5842
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5843
I1
sg3647
g3664
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vn
sS'block_loop.thisTrialN'
p5845
I0
sg39
F0.7334375270847886
sg34
g752
(S'\x07\xdf\t\x19\x0b\x05&\x08\n\x98'
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g3990
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'left'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g3994
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g3998
sS'block_loop.thisRepN'
p5855
I1
sg3644
g3994
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5856
I1
sg3647
g4001
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vn
sS'block_loop.thisTrialN'
p5858
I0
sg39
F0.7834485318599036
sg34
g752
(S'\x07\xdf\t\x19\x0b\x05,\x04\x8f\xf8'
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g3633
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'left'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g3645
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5868
I1
sg3644
g3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5869
I1
sg3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vn
sS'block_loop.thisTrialN'
p5871
I0
sg39
F1.8167462469718885
sg34
g752
(S'\x07\xdf\t\x19\x0b\x052\x01\xcc\xf0'
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g3772
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'right'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g3780
sS'block_loop.thisRepN'
p5881
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5882
I1
sg3647
g3783
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vn
sS'block_loop.thisTrialN'
p5884
I0
sg39
F1.2835317804247097
sg34
g752
(S'\x07\xdf\t\x19\x0b\x058\x0e\xbdp'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g3738
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'left'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g3746
sS'block_loop.thisRepN'
p5894
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5895
I1
sg3647
g3749
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vn
sS'block_loop.thisTrialN'
p5897
I0
sg39
F0.86675953253143234
sg34
g752
(S'\x07\xdf\t\x19\x0b\x06\x03\x04U`'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g4388
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'left'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g4395
sS'block_loop.thisRepN'
p5907
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5908
I1
sg3647
g3766
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vn
sS'block_loop.thisTrialN'
p5910
I0
sg39
F0.86675154979184299
sg34
g752
(S'\x07\xdf\t\x19\x0b\x06\t\x02\xc3\x08'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g3704
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'right'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5920
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5921
I1
sg3647
g3715
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vn
sS'block_loop.thisTrialN'
p5923
I0
sg39
F0.98341585964953993
sg34
g752
(S'\x07\xdf\t\x19\x0b\x06\x0f\x010\xb0'
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g4946
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'right'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g4953
sS'block_loop.thisRepN'
p5933
I1
sg3644
g3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5934
I1
sg3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vn
sS'block_loop.thisTrialN'
p5936
I0
sg39
F0.70012641237462958
sg34
g752
(S'\x07\xdf\t\x19\x0b\x06\x15\x01\x86\xa0'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g3653
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'right'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5946
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5947
I1
sg3647
g3664
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vn
sS'block_loop.thisTrialN'
p5949
I0
sg39
F0.8001030913728755
sg34
g752
(S'\x07\xdf\t\x19\x0b\x06\x1a\x0c\x96\xa8'
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g3973
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'right'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g3983
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g3981
sS'block_loop.thisRepN'
p5959
I1
sg3644
g3983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5960
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vn
sS'block_loop.thisTrialN'
p5962
I0
sg39
F1.3168822386332977
sg34
g752
(S'\x07\xdf\t\x19\x0b\x06 \n\x0e8'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g3721
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'right'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5972
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5973
I1
sg3647
g3732
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vn
sS'block_loop.thisTrialN'
p5975
I0
sg39
F2.2335130780065811
sg34
g752
(S"\x07\xdf\t\x19\x0b\x06'\x00\x1f@"
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g4801
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'right'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g3875
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g4808
sS'block_loop.thisRepN'
p5985
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5986
I1
sg3647
g3875
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vn
sS'block_loop.thisTrialN'
p5988
I0
sg39
F0.73344750550859317
sg34
g752
(S'\x07\xdf\t\x19\x0b\x06.\x04=\xf0'
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g4289
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'left'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g4293
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g4297
sS'block_loop.thisRepN'
p5998
I1
sg3644
g4293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5999
I1
sg3647
g4300
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vn
sS'block_loop.thisTrialN'
p6001
I0
sg39
F1.6834151183957147
sg34
g752
(S'\x07\xdf\t\x19\x0b\x064\x00\xc3P'
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g3821
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'left'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g3829
sS'block_loop.thisRepN'
p6011
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6012
I1
sg3647
g3832
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vn
sS'block_loop.thisTrialN'
p6014
I0
sg39
F0.88327781528369087
sg34
g752
(S'\x07\xdf\t\x19\x0b\x06:\x0b\x90\xf0'
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g4020
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'left'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g4031
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g4028
sS'block_loop.thisRepN'
p6024
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6025
I1
sg3647
g4031
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vn
sS'block_loop.thisTrialN'
p6027
I0
sg39
F0.78342686442556442
sg34
g752
(S'\x07\xdf\t\x19\x0b\x07\x04\n90'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g4801
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'right'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g3875
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g4808
sS'block_loop.thisRepN'
p6037
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6038
I1
sg3647
g3875
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vn
sS'block_loop.thisTrialN'
p6040
I0
sg39
F0.80012817998158425
sg34
g752
(S'\x07\xdf\t\x19\x0b\x07\n\x07v('
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g4561
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'right'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g4568
sS'block_loop.thisRepN'
p6050
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6051
I1
sg3647
g4115
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vn
sS'block_loop.thisTrialN'
p6053
I0
sg39
F2.3000594714058025
sg34
g752
(S'\x07\xdf\t\x19\x0b\x07\x10\x04\xf1\xa0'
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g4358
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'left'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g4365
sS'block_loop.thisRepN'
p6063
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6064
I1
sg3647
g3715
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vn
sS'block_loop.thisTrialN'
p6066
I0
sg39
F1.9167514357523032
sg34
g752
(S'\x07\xdf\t\x19\x0b\x07\x17\n\x02\x80'
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g4373
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'right'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g4181
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g4380
sS'block_loop.thisRepN'
p6076
I1
sg3644
g4181
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6077
I1
sg3647
g4188
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vn
sS'block_loop.thisTrialN'
p6079
I0
sg39
F0.83343245234300412
sg34
g752
(S'\x07\xdf\t\x19\x0b\x07\x1e\tZ\x88'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g4468
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'right'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g4475
sS'block_loop.thisRepN'
p6089
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6090
I1
sg3647
g3749
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vn
sS'block_loop.thisTrialN'
p6092
I0
sg39
F0.8668875414532522
sg34
g752
(S'\x07\xdf\t\x19\x0b\x07$\x07O\x18'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g3772
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'right'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g3780
sS'block_loop.thisRepN'
p6102
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6103
I1
sg3647
g3783
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vn
sS'block_loop.thisTrialN'
p6105
I0
sg39
F0.88354609233465453
sg34
g752
(S'\x07\xdf\t\x19\x0b\x07*\x05\xbc\xc0'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g3721
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'right'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g3729
sS'block_loop.thisRepN'
p6115
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6116
I1
sg3647
g3732
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vn
sS'block_loop.thisTrialN'
p6118
I0
sg39
F1.1167623835090126
sg34
g752
(S'\x07\xdf\t\x19\x0b\x070\x04e\x00'
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g4468
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'right'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g4475
sS'block_loop.thisRepN'
p6128
I1
sg3644
g3742
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6129
I1
sg3647
g3749
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vn
sS'block_loop.thisTrialN'
p6131
I0
sg39
F0.73343524630217871
sg34
g752
(S'\x07\xdf\t\x19\x0b\x076\x06\xdd\xd0'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g3864
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'left'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g3868
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g3872
sS'block_loop.thisRepN'
p6141
I1
sg3644
g3868
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6142
I1
sg3647
g3875
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vn
sS'block_loop.thisTrialN'
p6144
I0
sg39
F0.95009419632060599
sg34
g752
(S'\x07\xdf\t\x19\x0b\x08\x00\x03(\x98'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g4358
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'left'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g4365
sS'block_loop.thisRepN'
p6154
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6155
I1
sg3647
g3715
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vn
sS'block_loop.thisTrialN'
p6157
I0
sg39
F1.1167355843135738
sg34
g752
(S'\x07\xdf\t\x19\x0b\x08\x06\x03\x01\x88'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g5078
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'right'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g4024
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g5085
sS'block_loop.thisRepN'
p6167
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6168
I1
sg3647
g4031
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vn
sS'block_loop.thisTrialN'
p6170
I0
sg39
F0.76667195047957648
sg34
g752
(S'\x07\xdf\t\x19\x0b\x08\x0c\x05;\xd8'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g4177
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'left'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g4181
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g4185
sS'block_loop.thisRepN'
p6180
I1
sg3644
g4181
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6181
I1
sg3647
g4188
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vn
sS'block_loop.thisTrialN'
p6183
I0
sg39
F0.8334079339301752
sg34
g752
(S'\x07\xdf\t\x19\x0b\x08\x12\x02>8'
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g3881
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'left'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g3888
sS'block_loop.thisRepN'
p6193
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6194
I1
sg3647
g3783
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vn
sS'block_loop.thisTrialN'
p6196
I0
sg39
F0.88352841627056478
sg34
g752
(S'\x07\xdf\t\x19\x0b\x08\x18\x00.\xe0'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g5522
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'left'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g3983
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g5529
sS'block_loop.thisRepN'
p6206
I1
sg3644
g3983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6207
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vn
sS'block_loop.thisTrialN'
p6209
I0
sg39
F0.86678519133420195
sg34
g752
(S'\x07\xdf\t\x19\x0b\x08\x1d\x0e\x1dH'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g3958
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'right'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g3965
sS'block_loop.thisRepN'
p6219
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6220
I1
sg3647
g3832
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vn
sS'block_loop.thisTrialN'
p6222
I0
sg39
F1.3167636379394025
sg34
g752
(S'\x07\xdf\t\x19\x0b\x08#\x0c\x87\x08'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g4194
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'right'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g4001
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g4201
sS'block_loop.thisRepN'
p6232
I1
sg3644
g3994
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6233
I1
sg3647
g4001
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vn
sS'block_loop.thisTrialN'
p6235
I0
sg39
F0.96687619456042739
sg34
g752
(S'\x07\xdf\t\x19\x0b\x08*\x02\x9b\xf8'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g4104
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'left'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g4108
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g4112
sS'block_loop.thisRepN'
p6245
I1
sg3644
g4108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6246
I1
sg3647
g4115
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vn
sS'block_loop.thisTrialN'
p6248
I0
sg39
F0.81676278264603752
sg34
g752
(S'\x07\xdf\t\x19\x0b\x080\x02\xb3h'
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g3911
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'right'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g3915
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g3919
sS'block_loop.thisRepN'
p6258
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6259
I1
sg3647
g3922
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vn
sS'block_loop.thisTrialN'
p6261
I0
sg39
F1.2834396938278587
sg34
g752
(S'\x07\xdf\t\x19\x0b\x086\x00ix'
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g3881
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'left'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g3776
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g3888
sS'block_loop.thisRepN'
p6271
I1
sg3644
g3776
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6272
I1
sg3647
g3783
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vn
sS'block_loop.thisTrialN'
p6274
I0
sg39
F0.9667658617017878
sg34
g752
(S'\x07\xdf\t\x19\x0b\t\x00\x05C\xa8'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g4747
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'right'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g4293
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g4754
sS'block_loop.thisRepN'
p6284
I1
sg3644
g4293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6285
I1
sg3647
g4300
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vn
sS'block_loop.thisTrialN'
p6287
I0
sg39
F0.68352830223102501
sg34
g752
(S'\x07\xdf\t\x19\x0b\t\x06\x05\x1c\x98'
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g5078
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'right'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g4024
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g5085
sS'block_loop.thisRepN'
p6297
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6298
I1
sg3647
g4031
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vn
sS'block_loop.thisTrialN'
p6300
I0
sg39
F0.95000153952787514
sg34
g752
(S'\x07\xdf\t\x19\x0b\t\x0c\x00\xea`'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g4076
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'left'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g3915
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g4083
sS'block_loop.thisRepN'
p6310
I1
sg3644
g3915
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6311
I1
sg3647
g3922
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vn
sS'block_loop.thisTrialN'
p6313
I0
sg39
F0.76678028765218187
sg34
g752
(S'\x07\xdf\t\x19\x0b\t\x12\x00\x88\xb8'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g4235
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'right'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g4242
sS'block_loop.thisRepN'
p6323
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6324
I1
sg3647
g3681
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vn
sS'block_loop.thisTrialN'
p6326
I0
sg39
F0.73316782454367058
sg34
g752
(S'\x07\xdf\t\x19\x0b\t\x17\x0c\xc9p'
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g3687
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'right'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g3695
sS'block_loop.thisRepN'
p6336
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6337
I1
sg3647
g3698
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vn
sS'block_loop.thisTrialN'
p6339
I0
sg39
F0.76679682332542143
sg34
g752
(S'\x07\xdf\t\x19\x0b\t\x1d\tN\xd0'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g4946
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'right'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g3645
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g4953
sS'block_loop.thisRepN'
p6349
I1
sg3644
g3645
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6350
I1
sg3647
g3637
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vn
sS'block_loop.thisTrialN'
p6352
I0
sg39
F0.650090604088291
sg34
g752
(S'\x07\xdf\t\x19\x0b\t#\x06Q0'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F0.15019865616341121
sg56
Vr
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vn
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vr
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vn
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'4-corn.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'right'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'10-bounty_redo.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'10-bounty_redo.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6383
I2
sS'img_wrong'
p6384
S'4-corn.png'
p6385
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vn
sS'block_loop.thisTrialN'
p6387
I0
sg39
F1.066915595079081
sg34
g752
(S'\x07\xdf\t\x19\x0b\t.\x04a\x18'
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'44-crunch.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'left'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'26-walkers_smoky_bacon.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'26-walkers_smoky_bacon.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
S'44-crunch.png'
p6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6402
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vn
sS'block_loop.thisTrialN'
p6404
I0
sg39
F0.96695630704743962
sg34
g752
(S'\x07\xdf\t\x19\x0b\t4\x05\xa98'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'46-pistachios.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'left'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'46-pistachios.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'29-beans.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6418
I2
sg6384
S'29-beans.png'
p6419
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vn
sS'block_loop.thisTrialN'
p6421
I0
sg39
F0.70019255506940681
sg34
g752
(S'\x07\xdf\t\x19\x0b\t:\x05\xc0\xa8'
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
S'3-ellas_strawberries_apples.png'
p6425
sS'block_loop.thisIndex'
p6426
g6364
sg38
S'right'
p6427
sg58
g62
sS'trial_loop.thisN'
p6428
I3
sg33
S'13-mccoys_steak_crisps.png'
p6429
sg63
g64
sS'trial_loop.thisIndex'
p6430
g59
(g98
S'\x03\x00\x00\x00'
tRp6431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6432
I0
sg6379
S'13-mccoys_steak_crisps.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6435
I2
sg6384
S'3-ellas_strawberries_apples.png'
p6436
sg55
g11
sS'block_loop.thisTrial'
p6437
Nsg69
Vn
sS'block_loop.thisTrialN'
p6438
I0
sg39
F0.68343764112341887
sg34
g752
(S'\x07\xdf\t\x19\x0b\n\x04\x01\x8ep'
tRp6439
sa(dp6440
S'trial_loop.thisTrialN'
p6441
I4
sg6370
S'29-beans.png'
p6442
sS'block_loop.thisIndex'
p6443
g6364
sg38
S'right'
p6444
sg58
g62
sS'trial_loop.thisN'
p6445
I4
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6446
g59
(g98
S'\x04\x00\x00\x00'
tRp6447
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6448
I0
sg6379
S'46-pistachios.png'
p6449
sS'block_loop.thisRepN'
p6450
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6451
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6452
Nsg69
Vn
sS'block_loop.thisTrialN'
p6453
I0
sg39
F0.68355225044797407
sg34
g752
(S'\x07\xdf\t\x19\x0b\n\t\x0c\x9ex'
tRp6454
sa(dp6455
S'trial_loop.thisTrialN'
p6456
I5
sg6370
S'17-jacobs_mini_cheddars_redo.png'
p6457
sS'block_loop.thisIndex'
p6458
g6364
sg38
S'right'
p6459
sg58
g62
sS'trial_loop.thisN'
p6460
I5
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6461
sg63
g64
sS'trial_loop.thisIndex'
p6462
g59
(g98
S'\x05\x00\x00\x00'
tRp6463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6464
I0
sg6379
S'8-liquorice_catherine_wheels.png'
p6465
sS'block_loop.thisRepN'
p6466
I2
sg6382
S'8-liquorice_catherine_wheels.png'
p6467
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6468
I2
sg6384
g6461
sg55
g11
sS'block_loop.thisTrial'
p6469
Nsg69
Vn
sS'block_loop.thisTrialN'
p6470
I0
sg39
F0.71690670002681145
sg34
g752
(S'\x07\xdf\t\x19\x0b\n\x0f\x081\xa8'
tRp6471
sa(dp6472
S'trial_loop.thisTrialN'
p6473
I6
sg6370
S'41-peanuts_redo.png'
p6474
sS'block_loop.thisIndex'
p6475
g6364
sg38
S'left'
p6476
sg58
g62
sS'trial_loop.thisN'
p6477
I6
sg33
S'41-peanuts_redo.png'
p6478
sg63
g64
sS'trial_loop.thisIndex'
p6479
g59
(g98
S'\x06\x00\x00\x00'
tRp6480
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6481
I0
sg6379
S'45-chewy_nougat_redo.png'
p6482
sS'block_loop.thisRepN'
p6483
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6484
I2
sg6384
S'45-chewy_nougat_redo.png'
p6485
sg55
g11
sS'block_loop.thisTrial'
p6486
Nsg69
Vn
sS'block_loop.thisTrialN'
p6487
I0
sg39
F0.86722880354682275
sg34
g752
(S'\x07\xdf\t\x19\x0b\n\x15\x04x\x88'
tRp6488
sa(dp6489
S'trial_loop.thisTrialN'
p6490
I7
sg6370
S'42-mrkipling_lemon_slices.png'
p6491
sS'block_loop.thisIndex'
p6492
g6364
sg38
S'left'
p6493
sg58
g62
sS'trial_loop.thisN'
p6494
I7
sg33
S'42-mrkipling_lemon_slices.png'
p6495
sg63
g64
sS'trial_loop.thisIndex'
p6496
g59
(g98
S'\x07\x00\x00\x00'
tRp6497
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6498
I0
sg6379
S'16-skips_prawn.png'
p6499
sS'block_loop.thisRepN'
p6500
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6501
I2
sg6384
S'16-skips_prawn.png'
p6502
sg55
g11
sS'block_loop.thisTrial'
p6503
Nsg69
Vn
sS'block_loop.thisTrialN'
p6504
I0
sg39
F0.95000496070224472
sg34
g752
(S'\x07\xdf\t\x19\x0b\n\x1b\x02\xe60'
tRp6505
sa(dp6506
S'trial_loop.thisTrialN'
p6507
I8
sg6370
S'5-pineapple.png'
p6508
sS'block_loop.thisIndex'
p6509
g6364
sg38
S'left'
p6510
sg58
g62
sS'trial_loop.thisN'
p6511
I8
sg33
S'5-pineapple.png'
p6512
sg63
g64
sS'trial_loop.thisIndex'
p6513
g59
(g98
S'\x08\x00\x00\x00'
tRp6514
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6515
I0
sg6379
S'40-sardines.png'
p6516
sS'block_loop.thisRepN'
p6517
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6518
I2
sg6384
S'40-sardines.png'
p6519
sg55
g11
sS'block_loop.thisTrial'
p6520
Nsg69
Vn
sS'block_loop.thisTrialN'
p6521
I0
sg39
F1.2001070257229003
sg34
g752
(S'\x07\xdf\t\x19\x0b\n!\x02\xbf '
tRp6522
sa(dp6523
S'trial_loop.thisTrialN'
p6524
I9
sg6370
g6425
sS'block_loop.thisIndex'
p6525
g6364
sg38
S'right'
p6526
sg58
g62
sS'trial_loop.thisN'
p6527
I9
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6528
g59
(g98
S'\t\x00\x00\x00'
tRp6529
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6530
I0
sg6379
g6433
sS'block_loop.thisRepN'
p6531
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6532
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p6533
Nsg69
Vn
sS'block_loop.thisTrialN'
p6534
I0
sg39
F0.88343404889110388
sg34
g752
(S"\x07\xdf\t\x19\x0b\n'\x06.\x08"
tRp6535
sa(dp6536
S'trial_loop.thisTrialN'
p6537
I10
sg6370
S'19-caramello_redo.png'
p6538
sS'block_loop.thisIndex'
p6539
g6364
sg38
S'left'
p6540
sg58
g62
sS'trial_loop.thisN'
p6541
I10
sg33
S'19-caramello_redo.png'
p6542
sg63
g64
sS'trial_loop.thisIndex'
p6543
g59
(g98
S'\n\x00\x00\x00'
tRp6544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6545
I0
sg6379
S'30-spaghetti_hoops.png'
p6546
sS'block_loop.thisRepN'
p6547
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6548
I2
sg6384
S'30-spaghetti_hoops.png'
p6549
sg55
g11
sS'block_loop.thisTrial'
p6550
Nsg69
Vn
sS'block_loop.thisTrialN'
p6551
I0
sg39
F1.8500798844097517
sg34
g752
(S'\x07\xdf\t\x19\x0b\n-\x04\xd6H'
tRp6552
sa(dp6553
S'trial_loop.thisTrialN'
p6554
I11
sg6370
g6442
sS'block_loop.thisIndex'
p6555
g6364
sg38
S'right'
p6556
sg58
g62
sS'trial_loop.thisN'
p6557
I11
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6558
g59
(g98
S'\x0b\x00\x00\x00'
tRp6559
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6560
I0
sg6379
g6449
sS'block_loop.thisRepN'
p6561
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6562
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6563
Nsg69
Vn
sS'block_loop.thisTrialN'
p6564
I0
sg39
F0.7168804710272525
sg34
g752
(S'\x07\xdf\t\x19\x0b\n4\x03< '
tRp6565
sa(dp6566
S'trial_loop.thisTrialN'
p6567
I12
sg6370
S'26-walkers_smoky_bacon.png'
p6568
sS'block_loop.thisIndex'
p6569
g6364
sg38
S'right'
p6570
sg58
g62
sS'trial_loop.thisN'
p6571
I12
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p6572
g59
(g98
S'\x0c\x00\x00\x00'
tRp6573
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6574
I0
sg6379
S'44-crunch.png'
p6575
sS'block_loop.thisRepN'
p6576
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6577
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p6578
Nsg69
Vn
sS'block_loop.thisTrialN'
p6579
I0
sg39
F0.78353235062058957
sg34
g752
(S'\x07\xdf\t\x19\x0b\n9\x0e\x8a\xa8'
tRp6580
sa(dp6581
S'trial_loop.thisTrialN'
p6582
I13
sg6370
S'30-spaghetti_hoops.png'
p6583
sS'block_loop.thisIndex'
p6584
g6364
sg38
S'right'
p6585
sg58
g62
sS'trial_loop.thisN'
p6586
I13
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p6587
g59
(g98
S'\r\x00\x00\x00'
tRp6588
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6589
I0
sg6379
S'19-caramello_redo.png'
p6590
sS'block_loop.thisRepN'
p6591
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6592
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p6593
Nsg69
Vn
sS'block_loop.thisTrialN'
p6594
I0
sg39
F0.80009225765479641
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0b\x03\x0b\xc7\xa0'
tRp6595
sa(dp6596
S'trial_loop.thisTrialN'
p6597
I14
sg6370
S'2-steamed_puddings.png'
p6598
sS'block_loop.thisIndex'
p6599
g6364
sg38
S'left'
p6600
sg58
g62
sS'trial_loop.thisN'
p6601
I14
sg33
S'2-steamed_puddings.png'
p6602
sg63
g64
sS'trial_loop.thisIndex'
p6603
g59
(g98
S'\x0e\x00\x00\x00'
tRp6604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6605
I0
sg6379
S'20-fruit_pastilles.png'
p6606
sS'block_loop.thisRepN'
p6607
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6608
I2
sg6384
S'20-fruit_pastilles.png'
p6609
sg55
g11
sS'block_loop.thisTrial'
p6610
Nsg69
Vn
sS'block_loop.thisTrialN'
p6611
I0
sg39
F0.73345064158365858
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0b\t\tC\x18'
tRp6612
sa(dp6613
S'trial_loop.thisTrialN'
p6614
I15
sg6370
g6508
sS'block_loop.thisIndex'
p6615
g6364
sg38
S'left'
p6616
sg58
g62
sS'trial_loop.thisN'
p6617
I15
sg33
g6512
sg63
g64
sS'trial_loop.thisIndex'
p6618
g59
(g98
S'\x0f\x00\x00\x00'
tRp6619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6620
I0
sg6379
g6516
sS'block_loop.thisRepN'
p6621
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6622
I2
sg6384
g6519
sg55
g11
sS'block_loop.thisTrial'
p6623
Nsg69
Vn
sS'block_loop.thisTrialN'
p6624
I0
sg39
F0.96675075151779311
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0b\x0f\x05\xc8x'
tRp6625
sa(dp6626
S'trial_loop.thisTrialN'
p6627
I16
sg6370
S'10-bounty_redo.png'
p6628
sS'block_loop.thisIndex'
p6629
g6364
sg38
S'left'
p6630
sg58
g62
sS'trial_loop.thisN'
p6631
I16
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6632
g59
(g98
S'\x10\x00\x00\x00'
tRp6633
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6634
I0
sg6379
S'4-corn.png'
p6635
sS'block_loop.thisRepN'
p6636
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6637
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6638
Nsg69
Vn
sS'block_loop.thisTrialN'
p6639
I0
sg39
F1.5167512076741332
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0b\x15\x05\xa1h'
tRp6640
sa(dp6641
S'trial_loop.thisTrialN'
p6642
I17
sg6370
S'31-hobnobs.png'
p6643
sS'block_loop.thisIndex'
p6644
g6364
sg38
S'left'
p6645
sg58
g62
sS'trial_loop.thisN'
p6646
I17
sg33
S'31-hobnobs.png'
p6647
sg63
g64
sS'trial_loop.thisIndex'
p6648
g59
(g98
S'\x11\x00\x00\x00'
tRp6649
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6650
I0
sg6379
S'25-kitkat.png'
p6651
sS'block_loop.thisRepN'
p6652
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6653
I2
sg6384
S'25-kitkat.png'
p6654
sg55
g11
sS'block_loop.thisTrial'
p6655
Nsg69
Vn
sS'block_loop.thisTrialN'
p6656
I0
sg39
F1.2001914146776471
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0b\x1b\x0e\r\xa8'
tRp6657
sa(dp6658
S'trial_loop.thisTrialN'
p6659
I18
sg6370
S'35-raisins.png'
p6660
sS'block_loop.thisIndex'
p6661
g6364
sg38
S'left'
p6662
sg58
g62
sS'trial_loop.thisN'
p6663
I18
sg33
S'35-raisins.png'
p6664
sg63
g64
sS'trial_loop.thisIndex'
p6665
g59
(g98
S'\x12\x00\x00\x00'
tRp6666
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6667
I0
sg6379
S'49-yorkie.png'
p6668
sS'block_loop.thisRepN'
p6669
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6670
I2
sg6384
S'49-yorkie.png'
p6671
sg55
g11
sS'block_loop.thisTrial'
p6672
Nsg69
Vn
sS'block_loop.thisTrialN'
p6673
I0
sg39
F0.75010947756436508
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0b"\x02t\xe8'
tRp6674
sa(dp6675
S'trial_loop.thisTrialN'
p6676
I19
sg6370
g6568
sS'block_loop.thisIndex'
p6677
g6364
sg38
S'right'
p6678
sg58
g62
sS'trial_loop.thisN'
p6679
I19
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p6680
g59
(g98
S'\x13\x00\x00\x00'
tRp6681
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6682
I0
sg6379
g6575
sS'block_loop.thisRepN'
p6683
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6684
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p6685
Nsg69
Vn
sS'block_loop.thisTrialN'
p6686
I0
sg39
F0.86679916112825595
sg34
g752
(S"\x07\xdf\t\x19\x0b\x0b'\x0e{\x08"
tRp6687
sa(dp6688
S'trial_loop.thisTrialN'
p6689
I20
sg6370
g6474
sS'block_loop.thisIndex'
p6690
g6364
sg38
S'left'
p6691
sg58
g62
sS'trial_loop.thisN'
p6692
I20
sg33
g6485
sg63
g64
sS'trial_loop.thisIndex'
p6693
g59
(g98
S'\x14\x00\x00\x00'
tRp6694
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6695
I0
sg6379
g6482
sS'block_loop.thisRepN'
p6696
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6697
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p6698
Nsg69
Vn
sS'block_loop.thisTrialN'
p6699
I0
sg39
F1.116759817628008
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0b-\x0c\xe4\xc8'
tRp6700
sa(dp6701
S'trial_loop.thisTrialN'
p6702
I21
sg6370
g6538
sS'block_loop.thisIndex'
p6703
g6364
sg38
S'left'
p6704
sg58
g62
sS'trial_loop.thisN'
p6705
I21
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p6706
g59
(g98
S'\x15\x00\x00\x00'
tRp6707
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6708
I0
sg6379
g6546
sS'block_loop.thisRepN'
p6709
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6710
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p6711
Nsg69
Vn
sS'block_loop.thisTrialN'
p6712
I0
sg39
F0.76676802844667691
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0b3\x0f#\x00'
tRp6713
sa(dp6714
S'trial_loop.thisTrialN'
p6715
I22
sg6370
S'49-yorkie.png'
p6716
sS'block_loop.thisIndex'
p6717
g6364
sg38
S'right'
p6718
sg58
g62
sS'trial_loop.thisN'
p6719
I22
sg33
g6664
sg63
g64
sS'trial_loop.thisIndex'
p6720
g59
(g98
S'\x16\x00\x00\x00'
tRp6721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6722
I0
sg6379
S'35-raisins.png'
p6723
sS'block_loop.thisRepN'
p6724
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6725
I2
sg6384
g6671
sg55
g11
sS'block_loop.thisTrial'
p6726
Nsg69
Vn
sS'block_loop.thisTrialN'
p6727
I0
sg39
F0.71689729179888673
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0b9\x0c!x'
tRp6728
sa(dp6729
S'trial_loop.thisTrialN'
p6730
I23
sg6370
g6474
sS'block_loop.thisIndex'
p6731
g6364
sg38
S'left'
p6732
sg58
g62
sS'trial_loop.thisN'
p6733
I23
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p6734
g59
(g98
S'\x17\x00\x00\x00'
tRp6735
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6736
I0
sg6379
g6482
sS'block_loop.thisRepN'
p6737
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6738
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p6739
Nsg69
Vn
sS'block_loop.thisTrialN'
p6740
I0
sg39
F1.4000304484479784
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0c\x03\x08-\xc0'
tRp6741
sa(dp6742
S'trial_loop.thisTrialN'
p6743
I24
sg6370
S'36-fig_rolls.png'
p6744
sS'block_loop.thisIndex'
p6745
g6364
sg38
S'left'
p6746
sg58
g62
sS'trial_loop.thisN'
p6747
I24
sg33
S'36-fig_rolls.png'
p6748
sg63
g64
sS'trial_loop.thisIndex'
p6749
g59
(g98
S'\x18\x00\x00\x00'
tRp6750
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6751
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p6752
sS'block_loop.thisRepN'
p6753
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6754
I2
sg6384
S'34-hula_hoops_bbq_beef_redo.png'
p6755
sg55
g11
sS'block_loop.thisTrial'
p6756
Nsg69
Vn
sS'block_loop.thisTrialN'
p6757
I0
sg39
F1.050094823535801
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0c\t\x0e\xf08'
tRp6758
sa(dp6759
S'trial_loop.thisTrialN'
p6760
I25
sg6370
S'16-skips_prawn.png'
p6761
sS'block_loop.thisIndex'
p6762
g6364
sg38
S'right'
p6763
sg58
g62
sS'trial_loop.thisN'
p6764
I25
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p6765
g59
(g98
S'\x19\x00\x00\x00'
tRp6766
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6767
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p6768
sS'block_loop.thisRepN'
p6769
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6770
I2
sg6384
g6502
sg55
g11
sS'block_loop.thisTrial'
p6771
Nsg69
Vn
sS'block_loop.thisTrialN'
p6772
I0
sg39
F0.88333283916381333
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0c\x10\x00\xf6\x18'
tRp6773
sa(dp6774
S'trial_loop.thisTrialN'
p6775
I26
sg6370
S'48-twix.png'
p6776
sS'block_loop.thisIndex'
p6777
g6364
sg38
S'left'
p6778
sg58
g62
sS'trial_loop.thisN'
p6779
I26
sg33
S'50-polo.png'
p6780
sg63
g64
sS'trial_loop.thisIndex'
p6781
g59
(g98
S'\x1a\x00\x00\x00'
tRp6782
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6783
I0
sg6379
S'50-polo.png'
p6784
sS'block_loop.thisRepN'
p6785
I2
sg6382
S'48-twix.png'
p6786
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6787
I2
sg6384
g6780
sg55
g11
sS'block_loop.thisTrial'
p6788
Nsg69
Vn
sS'block_loop.thisTrialN'
p6789
I0
sg39
F1.3334621025169326
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0c\x15\x0e\xe0\x98'
tRp6790
sa(dp6791
S'trial_loop.thisTrialN'
p6792
I27
sg6370
g6660
sS'block_loop.thisIndex'
p6793
g6364
sg38
S'left'
p6794
sg58
g62
sS'trial_loop.thisN'
p6795
I27
sg33
g6664
sg63
g64
sS'trial_loop.thisIndex'
p6796
g59
(g98
S'\x1b\x00\x00\x00'
tRp6797
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6798
I0
sg6379
g6668
sS'block_loop.thisRepN'
p6799
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6800
I2
sg6384
g6671
sg55
g11
sS'block_loop.thisTrial'
p6801
Nsg69
Vn
sS'block_loop.thisTrialN'
p6802
I0
sg39
F0.70061392965089908
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0c\x1c\x050 '
tRp6803
sa(dp6804
S'trial_loop.thisTrialN'
p6805
I28
sg6370
g6425
sS'block_loop.thisIndex'
p6806
g6364
sg38
S'right'
p6807
sg58
g62
sS'trial_loop.thisN'
p6808
I28
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p6809
g59
(g98
S'\x1c\x00\x00\x00'
tRp6810
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6811
I0
sg6379
g6433
sS'block_loop.thisRepN'
p6812
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6813
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p6814
Nsg69
Vn
sS'block_loop.thisTrialN'
p6815
I0
sg39
F0.80011677606762532
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0c"\x01<h'
tRp6816
sa(dp6817
S'trial_loop.thisTrialN'
p6818
I29
sg6370
S'51-mars.png'
p6819
sS'block_loop.thisIndex'
p6820
g6364
sg38
S'left'
p6821
sg58
g62
sS'trial_loop.thisN'
p6822
I29
sg33
S'27-hartleys_raspberries_jelly.png'
p6823
sg63
g64
sS'trial_loop.thisIndex'
p6824
g59
(g98
S'\x1d\x00\x00\x00'
tRp6825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6826
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p6827
sS'block_loop.thisRepN'
p6828
I2
sg6382
S'51-mars.png'
p6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6830
I2
sg6384
g6823
sg55
g11
sS'block_loop.thisTrial'
p6831
Nsg69
Vn
sS'block_loop.thisTrialN'
p6832
I0
sg39
F0.75010235011814075
sg34
g752
(S"\x07\xdf\t\x19\x0b\x0c'\r\xb7\xb8"
tRp6833
sa(dp6834
S'trial_loop.thisTrialN'
p6835
I30
sg6370
S'8-liquorice_catherine_wheels.png'
p6836
sS'block_loop.thisIndex'
p6837
g6364
sg38
S'left'
p6838
sg58
g62
sS'trial_loop.thisN'
p6839
I30
sg33
g6467
sg63
g64
sS'trial_loop.thisIndex'
p6840
g59
(g98
S'\x1e\x00\x00\x00'
tRp6841
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6842
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p6843
sS'block_loop.thisRepN'
p6844
I2
sg6382
g6467
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6845
I2
sg6384
g6461
sg55
g11
sS'block_loop.thisTrial'
p6846
Nsg69
Vn
sS'block_loop.thisTrialN'
p6847
I0
sg39
F0.75011831559640996
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0c-\n{\x98'
tRp6848
sa(dp6849
S'trial_loop.thisTrialN'
p6850
I31
sg6370
g6583
sS'block_loop.thisIndex'
p6851
g6364
sg38
S'right'
p6852
sg58
g62
sS'trial_loop.thisN'
p6853
I31
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p6854
g59
(g98
S'\x1f\x00\x00\x00'
tRp6855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6856
I0
sg6379
g6590
sS'block_loop.thisRepN'
p6857
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6858
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p6859
Nsg69
Vn
sS'block_loop.thisTrialN'
p6860
I0
sg39
F1.0000955077703111
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0c3\x07?x'
tRp6861
sa(dp6862
S'trial_loop.thisTrialN'
p6863
I32
sg6370
g6408
sS'block_loop.thisIndex'
p6864
g6364
sg38
S'left'
p6865
sg58
g62
sS'trial_loop.thisN'
p6866
I32
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6867
g59
(g98
S' \x00\x00\x00'
tRp6868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6869
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6870
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6871
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6872
Nsg69
Vn
sS'block_loop.thisTrialN'
p6873
I0
sg39
F0.66677139259991236
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0c9\x07\xd0\x00'
tRp6874
sa(dp6875
S'trial_loop.thisTrialN'
p6876
I33
sg6370
S'27-hartleys_raspberries_jelly.png'
p6877
sS'block_loop.thisIndex'
p6878
g6364
sg38
S'right'
p6879
sg58
g62
sS'trial_loop.thisN'
p6880
I33
sg33
g6829
sg63
g64
sS'trial_loop.thisIndex'
p6881
g59
(g98
S'!\x00\x00\x00'
tRp6882
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6883
I0
sg6379
S'51-mars.png'
p6884
sS'block_loop.thisRepN'
p6885
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6886
I2
sg6384
g6823
sg55
g11
sS'block_loop.thisTrial'
p6887
Nsg69
Vn
sS'block_loop.thisTrialN'
p6888
I0
sg39
F0.71688189651649736
sg34
g752
(S'\x07\xdf\t\x19\x0b\r\x03\x03$\xb0'
tRp6889
sa(dp6890
S'trial_loop.thisTrialN'
p6891
I34
sg6370
S'20-fruit_pastilles.png'
p6892
sS'block_loop.thisIndex'
p6893
g6364
sg38
S'right'
p6894
sg58
g62
sS'trial_loop.thisN'
p6895
I34
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p6896
g59
(g98
S'"\x00\x00\x00'
tRp6897
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6898
I0
sg6379
S'2-steamed_puddings.png'
p6899
sS'block_loop.thisRepN'
p6900
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6901
I2
sg6384
g6609
sg55
g11
sS'block_loop.thisTrial'
p6902
Nsg69
Vn
sS'block_loop.thisTrialN'
p6903
I0
sg39
F0.71680235422445548
sg34
g752
(S'\x07\xdf\t\x19\x0b\r\x08\x0e\xad\xd0'
tRp6904
sa(dp6905
S'trial_loop.thisTrialN'
p6906
I35
sg6370
S'1-treacle_cookies.png'
p6907
sS'block_loop.thisIndex'
p6908
g6364
sg38
S'left'
p6909
sg58
g62
sS'trial_loop.thisN'
p6910
I35
sg33
S'1-treacle_cookies.png'
p6911
sg63
g64
sS'trial_loop.thisIndex'
p6912
g59
(g98
S'#\x00\x00\x00'
tRp6913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6914
I0
sg6379
S'21-nakd_banana_crunch.png'
p6915
sS'block_loop.thisRepN'
p6916
I2
sg6382
g6911
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6917
I2
sg6384
S'21-nakd_banana_crunch.png'
p6918
sg55
g11
sS'block_loop.thisTrial'
p6919
Nsg69
Vn
sS'block_loop.thisTrialN'
p6920
I0
sg39
F0.66678336670884164
sg34
g752
(S'\x07\xdf\t\x19\x0b\r\x0e\n\xba\x18'
tRp6921
sa(dp6922
S'trial_loop.thisTrialN'
p6923
I36
sg6370
g6442
sS'block_loop.thisIndex'
p6924
g6364
sg38
S'right'
p6925
sg58
g62
sS'trial_loop.thisN'
p6926
I36
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6927
g59
(g98
S'$\x00\x00\x00'
tRp6928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6929
I0
sg6379
g6449
sS'block_loop.thisRepN'
p6930
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6931
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6932
Nsg69
Vn
sS'block_loop.thisTrialN'
p6933
I0
sg39
F1.2001033194510455
sg34
g752
(S'\x07\xdf\t\x19\x0b\r\x14\x06MH'
tRp6934
sa(dp6935
S'trial_loop.thisTrialN'
p6936
I37
sg6370
S'22-daim.png'
p6937
sS'block_loop.thisIndex'
p6938
g6364
sg38
S'right'
p6939
sg58
g62
sS'trial_loop.thisN'
p6940
I37
sg33
S'7-olives.png'
p6941
sg63
g64
sS'trial_loop.thisIndex'
p6942
g59
(g98
S'%\x00\x00\x00'
tRp6943
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6944
I0
sg6379
S'7-olives.png'
p6945
sS'block_loop.thisRepN'
p6946
I2
sg6382
g6941
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6947
I2
sg6384
S'22-daim.png'
p6948
sg55
g11
sS'block_loop.thisTrial'
p6949
Nsg69
Vn
sS'block_loop.thisTrialN'
p6950
I0
sg39
F0.75018816456304194
sg34
g752
(S'\x07\xdf\t\x19\x0b\r\x1a\t\xb8H'
tRp6951
sa(dp6952
S'trial_loop.thisTrialN'
p6953
I38
sg6370
S'45-chewy_nougat_redo.png'
p6954
sS'block_loop.thisIndex'
p6955
g6364
sg38
S'right'
p6956
sg58
g62
sS'trial_loop.thisN'
p6957
I38
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p6958
g59
(g98
S'&\x00\x00\x00'
tRp6959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6960
I0
sg6379
S'41-peanuts_redo.png'
p6961
sS'block_loop.thisRepN'
p6962
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6963
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p6964
Nsg69
Vn
sS'block_loop.thisTrialN'
p6965
I0
sg39
F0.78344710637156822
sg34
g752
(S'\x07\xdf\t\x19\x0b\r \x06|('
tRp6966
sa(dp6967
S'trial_loop.thisTrialN'
p6968
I39
sg6370
g6457
sS'block_loop.thisIndex'
p6969
g6364
sg38
S'right'
p6970
sg58
g62
sS'trial_loop.thisN'
p6971
I39
sg33
g6467
sg63
g64
sS'trial_loop.thisIndex'
p6972
g59
(g98
S"'\x00\x00\x00"
tRp6973
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6974
I0
sg6379
g6465
sS'block_loop.thisRepN'
p6975
I2
sg6382
g6467
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6976
I2
sg6384
g6461
sg55
g11
sS'block_loop.thisTrial'
p6977
Nsg69
Vn
sS'block_loop.thisTrialN'
p6978
I0
sg39
F0.78349101143612643
sg34
g752
(S'\x07\xdf\t\x19\x0b\r&\x03\xb9 '
tRp6979
sa(dp6980
S'trial_loop.thisTrialN'
p6981
I40
sg6370
S'18-mms.png'
p6982
sS'block_loop.thisIndex'
p6983
g6364
sg38
S'left'
p6984
sg58
g62
sS'trial_loop.thisN'
p6985
I40
sg33
S'18-mms.png'
p6986
sg63
g64
sS'trial_loop.thisIndex'
p6987
g59
(g98
S'(\x00\x00\x00'
tRp6988
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6989
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p6990
sS'block_loop.thisRepN'
p6991
I2
sg6382
g6986
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6992
I2
sg6384
S'43-mrporky_pork_crackles_redo.png'
p6993
sg55
g11
sS'block_loop.thisTrial'
p6994
Nsg69
Vn
sS'block_loop.thisTrialN'
p6995
I0
sg39
F0.86678576153099129
sg34
g752
(S'\x07\xdf\t\x19\x0b\r,\x00\xf20'
tRp6996
sa(dp6997
S'trial_loop.thisTrialN'
p6998
I41
sg6370
S'50-polo.png'
p6999
sS'block_loop.thisIndex'
p7000
g6364
sg38
S'right'
p7001
sg58
g62
sS'trial_loop.thisN'
p7002
I41
sg33
g6780
sg63
g64
sS'trial_loop.thisIndex'
p7003
g59
(g98
S')\x00\x00\x00'
tRp7004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7005
I0
sg6379
S'48-twix.png'
p7006
sS'block_loop.thisRepN'
p7007
I2
sg6382
g6786
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7008
I2
sg6384
g6780
sg55
g11
sS'block_loop.thisTrial'
p7009
Nsg69
Vn
sS'block_loop.thisTrialN'
p7010
I0
sg39
F1.1501772738256477
sg34
g752
(S'\x07\xdf\t\x19\x0b\r1\x0e\xa2\x18'
tRp7011
sa(dp7012
S'trial_loop.thisTrialN'
p7013
I42
sg6370
S'23-crunchie_redo.png'
p7014
sS'block_loop.thisIndex'
p7015
g6364
sg38
S'left'
p7016
sg58
g62
sS'trial_loop.thisN'
p7017
I42
sg33
S'23-crunchie_redo.png'
p7018
sg63
g64
sS'trial_loop.thisIndex'
p7019
g59
(g98
S'*\x00\x00\x00'
tRp7020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7021
I0
sg6379
S'33-ambrosia_rice.png'
p7022
sS'block_loop.thisRepN'
p7023
I2
sg6382
g7018
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7024
I2
sg6384
S'33-ambrosia_rice.png'
p7025
sg55
g11
sS'block_loop.thisTrial'
p7026
Nsg69
Vn
sS'block_loop.thisTrialN'
p7027
I0
sg39
F0.78343427696927392
sg34
g752
(S'\x07\xdf\t\x19\x0b\r8\x02\x17('
tRp7028
sa(dp7029
S'trial_loop.thisTrialN'
p7030
I43
sg6370
g6999
sS'block_loop.thisIndex'
p7031
g6364
sg38
S'right'
p7032
sg58
g62
sS'trial_loop.thisN'
p7033
I43
sg33
g6786
sg63
g64
sS'trial_loop.thisIndex'
p7034
g59
(g98
S'+\x00\x00\x00'
tRp7035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7036
I0
sg6379
g7006
sS'block_loop.thisRepN'
p7037
I2
sg6382
g6786
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7038
I2
sg6384
g6780
sg55
g11
sS'block_loop.thisTrial'
p7039
Nsg69
Vn
sS'block_loop.thisTrialN'
p7040
I0
sg39
F0.95011215748309041
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0e\x01\x0e\x96`'
tRp7041
sa(dp7042
S'trial_loop.thisTrialN'
p7043
I44
sg6370
g6877
sS'block_loop.thisIndex'
p7044
g6364
sg38
S'right'
p7045
sg58
g62
sS'trial_loop.thisN'
p7046
I44
sg33
g6823
sg63
g64
sS'trial_loop.thisIndex'
p7047
g59
(g98
S',\x00\x00\x00'
tRp7048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7049
I0
sg6379
g6884
sS'block_loop.thisRepN'
p7050
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7051
I2
sg6384
g6823
sg55
g11
sS'block_loop.thisTrial'
p7052
Nsg69
Vn
sS'block_loop.thisTrialN'
p7053
I0
sg39
F0.75011717520555976
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0e\x07\x0eoP'
tRp7054
sa(dp7055
S'trial_loop.thisTrialN'
p7056
I45
sg6370
S'21-nakd_banana_crunch.png'
p7057
sS'block_loop.thisIndex'
p7058
g6364
sg38
S'right'
p7059
sg58
g62
sS'trial_loop.thisN'
p7060
I45
sg33
g6911
sg63
g64
sS'trial_loop.thisIndex'
p7061
g59
(g98
S'-\x00\x00\x00'
tRp7062
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7063
I0
sg6379
S'1-treacle_cookies.png'
p7064
sS'block_loop.thisRepN'
p7065
I2
sg6382
g6911
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7066
I2
sg6384
g6918
sg55
g11
sS'block_loop.thisTrial'
p7067
Nsg69
Vn
sS'block_loop.thisTrialN'
p7068
I0
sg39
F0.68359244924158702
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0e\r\n\xf4\xb0'
tRp7069
sa(dp7070
S'trial_loop.thisTrialN'
p7071
I46
sg6370
g6877
sS'block_loop.thisIndex'
p7072
g6364
sg38
S'right'
p7073
sg58
g62
sS'trial_loop.thisN'
p7074
I46
sg33
g6823
sg63
g64
sS'trial_loop.thisIndex'
p7075
g59
(g98
S'.\x00\x00\x00'
tRp7076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7077
I0
sg6379
g6884
sS'block_loop.thisRepN'
p7078
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7079
I2
sg6384
g6823
sg55
g11
sS'block_loop.thisTrial'
p7080
Nsg69
Vn
sS'block_loop.thisTrialN'
p7081
I0
sg39
F0.71674248368162807
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0e\x13\x06\xc2x'
tRp7082
sa(dp7083
S'trial_loop.thisTrialN'
p7084
I47
sg6370
g6716
sS'block_loop.thisIndex'
p7085
g6364
sg38
S'right'
p7086
sg58
g62
sS'trial_loop.thisN'
p7087
I47
sg33
g6664
sg63
g64
sS'trial_loop.thisIndex'
p7088
g59
(g98
S'/\x00\x00\x00'
tRp7089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7090
I0
sg6379
g6723
sS'block_loop.thisRepN'
p7091
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7092
I2
sg6384
g6671
sg55
g11
sS'block_loop.thisTrial'
p7093
Nsg69
Vn
sS'block_loop.thisTrialN'
p7094
I0
sg39
F0.65009545075099595
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0e\x19\x02\xce\xc0'
tRp7095
sa(dp7096
S'trial_loop.thisTrialN'
p7097
I48
sg6370
S'43-mrporky_pork_crackles_redo.png'
p7098
sS'block_loop.thisIndex'
p7099
g6364
sg38
S'right'
p7100
sg58
g62
sS'trial_loop.thisN'
p7101
I48
sg33
g6986
sg63
g64
sS'trial_loop.thisIndex'
p7102
g59
(g98
S'0\x00\x00\x00'
tRp7103
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7104
I0
sg6379
S'18-mms.png'
p7105
sS'block_loop.thisRepN'
p7106
I2
sg6382
g6986
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7107
I2
sg6384
g6993
sg55
g11
sS'block_loop.thisTrial'
p7108
Nsg69
Vn
sS'block_loop.thisTrialN'
p7109
I0
sg39
F0.76678912568422675
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0e\x1e\re\xb0'
tRp7110
sa(dp7111
S'trial_loop.thisTrialN'
p7112
I49
sg6370
S'40-sardines.png'
p7113
sS'block_loop.thisIndex'
p7114
g6364
sg38
S'right'
p7115
sg58
g62
sS'trial_loop.thisN'
p7116
I49
sg33
g6512
sg63
g64
sS'trial_loop.thisIndex'
p7117
g59
(g98
S'1\x00\x00\x00'
tRp7118
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7119
I0
sg6379
S'5-pineapple.png'
p7120
sS'block_loop.thisRepN'
p7121
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7122
I2
sg6384
g6519
sg55
g11
sS'block_loop.thisTrial'
p7123
Nsg69
Vn
sS'block_loop.thisTrialN'
p7124
I0
sg39
F0.88343119791261415
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0e$\n)\x90'
tRp7125
sa(dp7126
S'trial_loop.thisTrialN'
p7127
I50
sg6370
g6744
sS'block_loop.thisIndex'
p7128
g6364
sg38
S'left'
p7129
sg58
g62
sS'trial_loop.thisN'
p7130
I50
sg33
g6748
sg63
g64
sS'trial_loop.thisIndex'
p7131
g59
(g98
S'2\x00\x00\x00'
tRp7132
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7133
I0
sg6379
g6752
sS'block_loop.thisRepN'
p7134
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7135
I2
sg6384
g6755
sg55
g11
sS'block_loop.thisTrial'
p7136
Nsg69
Vn
sS'block_loop.thisTrialN'
p7137
I0
sg39
F1.7167575938656228
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0e*\t\x10P'
tRp7138
sa(dp7139
S'trial_loop.thisTrialN'
p7140
I51
sg6370
g6907
sS'block_loop.thisIndex'
p7141
g6364
sg38
S'left'
p7142
sg58
g62
sS'trial_loop.thisN'
p7143
I51
sg33
g6911
sg63
g64
sS'trial_loop.thisIndex'
p7144
g59
(g98
S'3\x00\x00\x00'
tRp7145
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7146
I0
sg6379
g6915
sS'block_loop.thisRepN'
p7147
I2
sg6382
g6911
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7148
I2
sg6384
g6918
sg55
g11
sS'block_loop.thisTrial'
p7149
Nsg69
Vn
sS'block_loop.thisTrialN'
p7150
I0
sg39
F0.63346426926000277
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0e1\x05\x14\xc8'
tRp7151
sa(dp7152
S'trial_loop.thisTrialN'
p7153
I52
sg6370
g6491
sS'block_loop.thisIndex'
p7154
g6364
sg38
S'left'
p7155
sg58
g62
sS'trial_loop.thisN'
p7156
I52
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p7157
g59
(g98
S'4\x00\x00\x00'
tRp7158
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7159
I0
sg6379
g6499
sS'block_loop.thisRepN'
p7160
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7161
I2
sg6384
g6502
sg55
g11
sS'block_loop.thisTrial'
p7162
Nsg69
Vn
sS'block_loop.thisTrialN'
p7163
I0
sg39
F0.83333323830083827
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0e7\x00*\xf8'
tRp7164
sa(dp7165
S'trial_loop.thisTrialN'
p7166
I53
sg6370
g6391
sS'block_loop.thisIndex'
p7167
g6364
sg38
S'left'
p7168
sg58
g62
sS'trial_loop.thisN'
p7169
I53
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p7170
g59
(g98
S'5\x00\x00\x00'
tRp7171
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7172
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7173
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7174
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p7175
Nsg69
Vn
sS'block_loop.thisTrialN'
p7176
I0
sg39
F0.683436215634174
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0f\x00\ra\xc8'
tRp7177
sa(dp7178
S'trial_loop.thisTrialN'
p7179
I54
sg6370
g6954
sS'block_loop.thisIndex'
p7180
g6364
sg38
S'right'
p7181
sg58
g62
sS'trial_loop.thisN'
p7182
I54
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p7183
g59
(g98
S'6\x00\x00\x00'
tRp7184
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7185
I0
sg6379
g6961
sS'block_loop.thisRepN'
p7186
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7187
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p7188
Nsg69
Vn
sS'block_loop.thisTrialN'
p7189
I0
sg39
F0.86686986538825295
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0f\x06\x08\xf4\xf8'
tRp7190
sa(dp7191
S'trial_loop.thisTrialN'
p7192
I55
sg6370
g6583
sS'block_loop.thisIndex'
p7193
g6364
sg38
S'right'
p7194
sg58
g62
sS'trial_loop.thisN'
p7195
I55
sg33
g6549
sg63
g64
sS'trial_loop.thisIndex'
p7196
g59
(g98
S'7\x00\x00\x00'
tRp7197
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7198
I0
sg6379
g6590
sS'block_loop.thisRepN'
p7199
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7200
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p7201
Nsg69
Vn
sS'block_loop.thisTrialN'
p7202
I0
sg39
F0.96677355934389198
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0f\x0c\x07^\xb8'
tRp7203
sa(dp7204
S'trial_loop.thisTrialN'
p7205
I56
sg6370
g6716
sS'block_loop.thisIndex'
p7206
g6364
sg38
S'right'
p7207
sg58
g62
sS'trial_loop.thisN'
p7208
I56
sg33
g6671
sg63
g64
sS'trial_loop.thisIndex'
p7209
g59
(g98
S'8\x00\x00\x00'
tRp7210
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7211
I0
sg6379
g6723
sS'block_loop.thisRepN'
p7212
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7213
I2
sg6384
g6671
sg55
g11
sS'block_loop.thisTrial'
p7214
Nsg69
Vn
sS'block_loop.thisTrialN'
p7215
I0
sg39
F0.96687676475539774
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0f\x12\x07v('
tRp7216
sa(dp7217
S'trial_loop.thisTrialN'
p7218
I57
sg6370
g6568
sS'block_loop.thisIndex'
p7219
g6364
sg38
S'right'
p7220
sg58
g62
sS'trial_loop.thisN'
p7221
I57
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p7222
g59
(g98
S'9\x00\x00\x00'
tRp7223
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7224
I0
sg6379
g6575
sS'block_loop.thisRepN'
p7225
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7226
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p7227
Nsg69
Vn
sS'block_loop.thisTrialN'
p7228
I0
sg39
F0.7167903801155262
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0f\x18\x07\x8d\x98'
tRp7229
sa(dp7230
S'trial_loop.thisTrialN'
p7231
I58
sg6370
g6408
sS'block_loop.thisIndex'
p7232
g6364
sg38
S'left'
p7233
sg58
g62
sS'trial_loop.thisN'
p7234
I58
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7235
g59
(g98
S':\x00\x00\x00'
tRp7236
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7237
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7238
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7239
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7240
Nsg69
Vn
sS'block_loop.thisTrialN'
p7241
I0
sg39
F0.68343250936322875
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0f\x1e\x03\x99\xe0'
tRp7242
sa(dp7243
S'trial_loop.thisTrialN'
p7244
I59
sg6370
g6954
sS'block_loop.thisIndex'
p7245
g6364
sg38
S'right'
p7246
sg58
g62
sS'trial_loop.thisN'
p7247
I59
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p7248
g59
(g98
S';\x00\x00\x00'
tRp7249
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7250
I0
sg6379
g6961
sS'block_loop.thisRepN'
p7251
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7252
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p7253
Nsg69
Vn
sS'block_loop.thisTrialN'
p7254
I0
sg39
F0.85009870086651063
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0f#\x0e\xa9\xe8'
tRp7255
sa(dp7256
S'trial_loop.thisTrialN'
p7257
I60
sg6370
g7014
sS'block_loop.thisIndex'
p7258
g6364
sg38
S'left'
p7259
sg58
g62
sS'trial_loop.thisN'
p7260
I60
sg33
g7018
sg63
g64
sS'trial_loop.thisIndex'
p7261
g59
(g98
S'<\x00\x00\x00'
tRp7262
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7263
I0
sg6379
g7022
sS'block_loop.thisRepN'
p7264
I2
sg6382
g7018
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7265
I2
sg6384
g7025
sg55
g11
sS'block_loop.thisTrial'
p7266
Nsg69
Vn
sS'block_loop.thisTrialN'
p7267
I0
sg39
F1.0334331365775142
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0f)\x0c\xdc\xf8'
tRp7268
sa(dp7269
S'trial_loop.thisTrialN'
p7270
I61
sg6370
g6442
sS'block_loop.thisIndex'
p7271
g6364
sg38
S'right'
p7272
sg58
g62
sS'trial_loop.thisN'
p7273
I61
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7274
g59
(g98
S'=\x00\x00\x00'
tRp7275
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7276
I0
sg6379
g6449
sS'block_loop.thisRepN'
p7277
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7278
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7279
Nsg69
Vn
sS'block_loop.thisTrialN'
p7280
I0
sg39
F0.80021114344708622
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0f/\r\xe6\x98'
tRp7281
sa(dp7282
S'trial_loop.thisTrialN'
p7283
I62
sg6370
g6877
sS'block_loop.thisIndex'
p7284
g6364
sg38
S'right'
p7285
sg58
g62
sS'trial_loop.thisN'
p7286
I62
sg33
g6829
sg63
g64
sS'trial_loop.thisIndex'
p7287
g59
(g98
S'>\x00\x00\x00'
tRp7288
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7289
I0
sg6379
g6884
sS'block_loop.thisRepN'
p7290
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7291
I2
sg6384
g6823
sg55
g11
sS'block_loop.thisTrial'
p7292
Nsg69
Vn
sS'block_loop.thisTrialN'
p7293
I0
sg39
F0.63345486103116855
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0f5\x0b^('
tRp7294
sa(dp7295
S'trial_loop.thisTrialN'
p7296
I63
sg6370
g6892
sS'block_loop.thisIndex'
p7297
g6364
sg38
S'right'
p7298
sg58
g62
sS'trial_loop.thisN'
p7299
I63
sg33
g6609
sg63
g64
sS'trial_loop.thisIndex'
p7300
g59
(g98
S'?\x00\x00\x00'
tRp7301
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7302
I0
sg6379
g6899
sS'block_loop.thisRepN'
p7303
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7304
I2
sg6384
g6609
sg55
g11
sS'block_loop.thisTrial'
p7305
Nsg69
Vn
sS'block_loop.thisTrialN'
p7306
I0
sg39
F0.73343467610538937
sg34
g752
(S'\x07\xdf\t\x19\x0b\x0f;\x069\xc0'
tRp7307
sa(dp7308
S'trial_loop.thisTrialN'
p7309
I64
sg6370
g6491
sS'block_loop.thisIndex'
p7310
g6364
sg38
S'left'
p7311
sg58
g62
sS'trial_loop.thisN'
p7312
I64
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p7313
g59
(g98
S'@\x00\x00\x00'
tRp7314
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7315
I0
sg6379
g6499
sS'block_loop.thisRepN'
p7316
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7317
I2
sg6384
g6502
sg55
g11
sS'block_loop.thisTrial'
p7318
Nsg69
Vn
sS'block_loop.thisTrialN'
p7319
I0
sg39
F0.88332485642513348
sg34
g752
(S'\x07\xdf\t\x19\x0b\x10\x05\x02\x84\x88'
tRp7320
sa(dp7321
S'trial_loop.thisTrialN'
p7322
I65
sg6370
g6628
sS'block_loop.thisIndex'
p7323
g6364
sg38
S'left'
p7324
sg58
g62
sS'trial_loop.thisN'
p7325
I65
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p7326
g59
(g98
S'A\x00\x00\x00'
tRp7327
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7328
I0
sg6379
g6635
sS'block_loop.thisRepN'
p7329
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7330
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7331
Nsg69
Vn
sS'block_loop.thisTrialN'
p7332
I0
sg39
F1.9501304037439695
sg34
g752
(S'\x07\xdf\t\x19\x0b\x10\x0b\x01kH'
tRp7333
sa(dp7334
S'trial_loop.thisTrialN'
p7335
I66
sg6370
g7014
sS'block_loop.thisIndex'
p7336
g6364
sg38
S'left'
p7337
sg58
g62
sS'trial_loop.thisN'
p7338
I66
sg33
g7025
sg63
g64
sS'trial_loop.thisIndex'
p7339
g59
(g98
S'B\x00\x00\x00'
tRp7340
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7341
I0
sg6379
g7022
sS'block_loop.thisRepN'
p7342
I2
sg6382
g7018
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7343
I2
sg6384
g7025
sg55
g11
sS'block_loop.thisTrial'
p7344
Nsg69
Vn
sS'block_loop.thisTrialN'
p7345
I0
sg39
F1.100072186768557
sg34
g752
(S'\x07\xdf\t\x19\x0b\x10\x12\x01\x01\xd0'
tRp7346
sa(dp7347
S'trial_loop.thisTrialN'
p7348
I67
sg6370
S'6-sour_patch_kids.png'
p7349
sS'block_loop.thisIndex'
p7350
g6364
sg38
S'right'
p7351
sg58
g62
sS'trial_loop.thisN'
p7352
I67
sg33
S'6-sour_patch_kids.png'
p7353
sg63
g64
sS'trial_loop.thisIndex'
p7354
g59
(g98
S'C\x00\x00\x00'
tRp7355
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7356
I0
sg6379
S'38-maltesers.png'
p7357
sS'block_loop.thisRepN'
p7358
I2
sg6382
S'38-maltesers.png'
p7359
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7360
I2
sg6384
g7353
sg55
g11
sS'block_loop.thisTrial'
p7361
Nsg69
Vn
sS'block_loop.thisTrialN'
p7362
I0
sg39
F0.81656920122441079
sg34
g752
(S'\x07\xdf\t\x19\x0b\x10\x18\x03< '
tRp7363
sa(dp7364
S'trial_loop.thisTrialN'
p7365
I68
sg6370
g6474
sS'block_loop.thisIndex'
p7366
g6364
sg38
S'left'
p7367
sg58
g62
sS'trial_loop.thisN'
p7368
I68
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p7369
g59
(g98
S'D\x00\x00\x00'
tRp7370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7371
I0
sg6379
g6482
sS'block_loop.thisRepN'
p7372
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7373
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p7374
Nsg69
Vn
sS'block_loop.thisTrialN'
p7375
I0
sg39
F0.86672503569479886
sg34
g752
(S'\x07\xdf\t\x19\x0b\x10\x1e\x00\xb7\x98'
tRp7376
sa(dp7377
S'trial_loop.thisTrialN'
p7378
I69
sg6370
g6836
sS'block_loop.thisIndex'
p7379
g6364
sg38
S'left'
p7380
sg58
g62
sS'trial_loop.thisN'
p7381
I69
sg33
g6467
sg63
g64
sS'trial_loop.thisIndex'
p7382
g59
(g98
S'E\x00\x00\x00'
tRp7383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7384
I0
sg6379
g6843
sS'block_loop.thisRepN'
p7385
I2
sg6382
g6467
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7386
I2
sg6384
g6461
sg55
g11
sS'block_loop.thisTrial'
p7387
Nsg69
Vn
sS'block_loop.thisTrialN'
p7388
I0
sg39
F0.76681706527142524
sg34
g752
(S'\x07\xdf\t\x19\x0b\x10#\x0e\xa2\x18'
tRp7389
sa(dp7390
S'trial_loop.thisTrialN'
p7391
I70
sg6370
g7014
sS'block_loop.thisIndex'
p7392
g6364
sg38
S'left'
p7393
sg58
g62
sS'trial_loop.thisN'
p7394
I70
sg33
g7018
sg63
g64
sS'trial_loop.thisIndex'
p7395
g59
(g98
S'F\x00\x00\x00'
tRp7396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7397
I0
sg6379
g7022
sS'block_loop.thisRepN'
p7398
I2
sg6382
g7018
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7399
I2
sg6384
g7025
sg55
g11
sS'block_loop.thisTrial'
p7400
Nsg69
Vn
sS'block_loop.thisTrialN'
p7401
I0
sg39
F1.8500619232472673
sg34
g752
(S'\x07\xdf\t\x19\x0b\x10)\x0b\xa0\x90'
tRp7402
sa(dp7403
S'trial_loop.thisTrialN'
p7404
I71
sg6370
S'25-kitkat.png'
p7405
sS'block_loop.thisIndex'
p7406
g6364
sg38
S'right'
p7407
sg58
g62
sS'trial_loop.thisN'
p7408
I71
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p7409
g59
(g98
S'G\x00\x00\x00'
tRp7410
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7411
I0
sg6379
S'31-hobnobs.png'
p7412
sS'block_loop.thisRepN'
p7413
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7414
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p7415
Nsg69
Vn
sS'block_loop.thisTrialN'
p7416
I0
sg39
F0.70008621358192613
sg34
g752
(S'\x07\xdf\t\x19\x0b\x100\t\xcb\xd0'
tRp7417
sa(dp7418
S'trial_loop.thisTrialN'
p7419
I72
sg6370
g7057
sS'block_loop.thisIndex'
p7420
g6364
sg38
S'right'
p7421
sg58
g62
sS'trial_loop.thisN'
p7422
I72
sg33
g6911
sg63
g64
sS'trial_loop.thisIndex'
p7423
g59
(g98
S'H\x00\x00\x00'
tRp7424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7425
I0
sg6379
g7064
sS'block_loop.thisRepN'
p7426
I2
sg6382
g6911
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7427
I2
sg6384
g6918
sg55
g11
sS'block_loop.thisTrial'
p7428
Nsg69
Vn
sS'block_loop.thisTrialN'
p7429
I0
sg39
F0.71683656596269429
sg34
g752
(S'\x07\xdf\t\x19\x0b\x106\x05\x99\x98'
tRp7430
sa(dp7431
S'trial_loop.thisTrialN'
p7432
I73
sg6370
S'13-mccoys_steak_crisps.png'
p7433
sS'block_loop.thisIndex'
p7434
g6364
sg38
S'left'
p7435
sg58
g62
sS'trial_loop.thisN'
p7436
I73
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7437
g59
(g98
S'I\x00\x00\x00'
tRp7438
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7439
I0
sg6379
S'3-ellas_strawberries_apples.png'
p7440
sS'block_loop.thisRepN'
p7441
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7442
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7443
Nsg69
Vn
sS'block_loop.thisTrialN'
p7444
I0
sg39
F0.90012481582743931
sg34
g752
(S'\x07\xdf\t\x19\x0b\x11\x00\x01\xe4`'
tRp7445
sa(dp7446
S'trial_loop.thisTrialN'
p7447
I74
sg6370
g6583
sS'block_loop.thisIndex'
p7448
g6364
sg38
S'right'
p7449
sg58
g62
sS'trial_loop.thisN'
p7450
I74
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p7451
g59
(g98
S'J\x00\x00\x00'
tRp7452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7453
I0
sg6379
g6590
sS'block_loop.thisRepN'
p7454
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7455
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p7456
Nsg69
Vn
sS'block_loop.thisTrialN'
p7457
I0
sg39
F1.1334368998686841
sg34
g752
(S'\x07\xdf\t\x19\x0b\x11\x06\x00\xcb '
tRp7458
sa(dp7459
S'trial_loop.thisTrialN'
p7460
I75
sg6370
g7433
sS'block_loop.thisIndex'
p7461
g6364
sg38
S'left'
p7462
sg58
g62
sS'trial_loop.thisN'
p7463
I75
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7464
g59
(g98
S'K\x00\x00\x00'
tRp7465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7466
I0
sg6379
g7440
sS'block_loop.thisRepN'
p7467
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7468
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7469
Nsg69
Vn
sS'block_loop.thisTrialN'
p7470
I0
sg39
F0.98345121177953843
sg34
g752
(S'\x07\xdf\t\x19\x0b\x11\x0c\x03C\xf0'
tRp7471
sa(dp7472
S'trial_loop.thisTrialN'
p7473
I76
sg6370
g6892
sS'block_loop.thisIndex'
p7474
g6364
sg38
S'right'
p7475
sg58
g62
sS'trial_loop.thisN'
p7476
I76
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p7477
g59
(g98
S'L\x00\x00\x00'
tRp7478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7479
I0
sg6379
g6899
sS'block_loop.thisRepN'
p7480
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7481
I2
sg6384
g6609
sg55
g11
sS'block_loop.thisTrial'
p7482
Nsg69
Vn
sS'block_loop.thisTrialN'
p7483
I0
sg39
F0.83344100527756382
sg34
g752
(S'\x07\xdf\t\x19\x0b\x11\x12\x03\x95\xf8'
tRp7484
sa(dp7485
S'trial_loop.thisTrialN'
p7486
I77
sg6370
g6371
sS'block_loop.thisIndex'
p7487
g6364
sg38
S'right'
p7488
sg58
g62
sS'trial_loop.thisN'
p7489
I77
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7490
g59
(g98
S'M\x00\x00\x00'
tRp7491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7492
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7493
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7494
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7495
Nsg69
Vn
sS'block_loop.thisTrialN'
p7496
I0
sg39
F1.3335293856034696
sg34
g752
(S'\x07\xdf\t\x19\x0b\x11\x18\x01\x8a\x88'
tRp7497
sa(dp7498
S'trial_loop.thisTrialN'
p7499
I78
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p7500
sS'block_loop.thisIndex'
p7501
g6364
sg38
S'right'
p7502
sg58
g62
sS'trial_loop.thisN'
p7503
I78
sg33
g6748
sg63
g64
sS'trial_loop.thisIndex'
p7504
g59
(g98
S'N\x00\x00\x00'
tRp7505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7506
I0
sg6379
S'36-fig_rolls.png'
p7507
sS'block_loop.thisRepN'
p7508
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7509
I2
sg6384
g6755
sg55
g11
sS'block_loop.thisTrial'
p7510
Nsg69
Vn
sS'block_loop.thisTrialN'
p7511
I0
sg39
F0.61686530382303317
sg34
g752
(S'\x07\xdf\t\x19\x0b\x11\x1e\x07\x1cP'
tRp7512
sa(dp7513
S'trial_loop.thisTrialN'
p7514
I79
sg6370
g6425
sS'block_loop.thisIndex'
p7515
g6364
sg38
S'right'
p7516
sg58
g62
sS'trial_loop.thisN'
p7517
I79
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7518
g59
(g98
S'O\x00\x00\x00'
tRp7519
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7520
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7521
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7522
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7523
Nsg69
Vn
sS'block_loop.thisTrialN'
p7524
I0
sg39
F0.76685669386824884
sg34
g752
(S'\x07\xdf\t\x19\x0b\x11$\x01\xf4\x00'
tRp7525
sa(dp7526
S'trial_loop.thisTrialN'
p7527
I80
sg6370
g6391
sS'block_loop.thisIndex'
p7528
g6364
sg38
S'left'
p7529
sg58
g62
sS'trial_loop.thisN'
p7530
I80
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7531
g59
(g98
S'P\x00\x00\x00'
tRp7532
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7533
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7534
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7535
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p7536
Nsg69
Vn
sS'block_loop.thisTrialN'
p7537
I0
sg39
F1.0833050136161546
sg34
g752
(S'\x07\xdf\t\x19\x0b\x11)\r\xfa '
tRp7538
sa(dp7539
S'trial_loop.thisTrialN'
p7540
I81
sg6370
S'38-maltesers.png'
p7541
sS'block_loop.thisIndex'
p7542
g6364
sg38
S'left'
p7543
sg58
g62
sS'trial_loop.thisN'
p7544
I81
sg33
g7359
sg63
g64
sS'trial_loop.thisIndex'
p7545
g59
(g98
S'Q\x00\x00\x00'
tRp7546
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7547
I0
sg6379
S'6-sour_patch_kids.png'
p7548
sS'block_loop.thisRepN'
p7549
I2
sg6382
g7359
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7550
I2
sg6384
g7353
sg55
g11
sS'block_loop.thisTrial'
p7551
Nsg69
Vn
sS'block_loop.thisTrialN'
p7552
I0
sg39
F0.63328123645715095
sg34
g752
(S'\x07\xdf\t\x19\x0b\x110\x00y\x18'
tRp7553
sa(dp7554
S'trial_loop.thisTrialN'
p7555
I82
sg6370
g6999
sS'block_loop.thisIndex'
p7556
g6364
sg38
S'right'
p7557
sg58
g62
sS'trial_loop.thisN'
p7558
I82
sg33
g6786
sg63
g64
sS'trial_loop.thisIndex'
p7559
g59
(g98
S'R\x00\x00\x00'
tRp7560
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7561
I0
sg6379
g7006
sS'block_loop.thisRepN'
p7562
I2
sg6382
g6786
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7563
I2
sg6384
g6780
sg55
g11
sS'block_loop.thisTrial'
p7564
Nsg69
Vn
sS'block_loop.thisTrialN'
p7565
I0
sg39
F2.3005270318353723
sg34
g752
(S'\x07\xdf\t\x19\x0b\x115\n\xd5p'
tRp7566
sa(dp7567
S'trial_loop.thisTrialN'
p7568
I83
sg6370
S'7-olives.png'
p7569
sS'block_loop.thisIndex'
p7570
g6364
sg38
S'left'
p7571
sg58
g62
sS'trial_loop.thisN'
p7572
I83
sg33
g6941
sg63
g64
sS'trial_loop.thisIndex'
p7573
g59
(g98
S'S\x00\x00\x00'
tRp7574
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7575
I0
sg6379
S'22-daim.png'
p7576
sS'block_loop.thisRepN'
p7577
I2
sg6382
g6941
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7578
I2
sg6384
g6948
sg55
g11
sS'block_loop.thisTrial'
p7579
Nsg69
Vn
sS'block_loop.thisTrialN'
p7580
I0
sg39
F0.86678604662756698
sg34
g752
(S'\x07\xdf\t\x19\x0b\x12\x01\x00\xa4\x10'
tRp7581
sa(dp7582
S'trial_loop.thisTrialN'
p7583
I84
sg6370
g6819
sS'block_loop.thisIndex'
p7584
g6364
sg38
S'left'
p7585
sg58
g62
sS'trial_loop.thisN'
p7586
I84
sg33
g6829
sg63
g64
sS'trial_loop.thisIndex'
p7587
g59
(g98
S'T\x00\x00\x00'
tRp7588
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7589
I0
sg6379
g6827
sS'block_loop.thisRepN'
p7590
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7591
I2
sg6384
g6823
sg55
g11
sS'block_loop.thisTrial'
p7592
Nsg69
Vn
sS'block_loop.thisTrialN'
p7593
I0
sg39
F0.78343399187178875
sg34
g752
(S'\x07\xdf\t\x19\x0b\x12\x06\x0eP\x10'
tRp7594
sa(dp7595
S'trial_loop.thisTrialN'
p7596
I85
sg6370
g6628
sS'block_loop.thisIndex'
p7597
g6364
sg38
S'left'
p7598
sg58
g62
sS'trial_loop.thisN'
p7599
I85
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7600
g59
(g98
S'U\x00\x00\x00'
tRp7601
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7602
I0
sg6379
g6635
sS'block_loop.thisRepN'
p7603
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7604
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7605
Nsg69
Vn
sS'block_loop.thisTrialN'
p7606
I0
sg39
F1.1334197939995647
sg34
g752
(S'\x07\xdf\t\x19\x0b\x12\x0c\x0b\x8d\x08'
tRp7607
sa(dp7608
S'trial_loop.thisTrialN'
p7609
I86
sg6370
g7541
sS'block_loop.thisIndex'
p7610
g6364
sg38
S'left'
p7611
sg58
g62
sS'trial_loop.thisN'
p7612
I86
sg33
g7359
sg63
g64
sS'trial_loop.thisIndex'
p7613
g59
(g98
S'V\x00\x00\x00'
tRp7614
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7615
I0
sg6379
g7548
sS'block_loop.thisRepN'
p7616
I2
sg6382
g7359
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7617
I2
sg6384
g7353
sg55
g11
sS'block_loop.thisTrial'
p7618
Nsg69
Vn
sS'block_loop.thisTrialN'
p7619
I0
sg39
F0.86657535933682084
sg34
g752
(S'\x07\xdf\t\x19\x0b\x12\x12\x0e\x05\xd8'
tRp7620
sa(dp7621
S'trial_loop.thisTrialN'
p7622
I87
sg6370
g6568
sS'block_loop.thisIndex'
p7623
g6364
sg38
S'right'
p7624
sg58
g62
sS'trial_loop.thisN'
p7625
I87
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7626
g59
(g98
S'W\x00\x00\x00'
tRp7627
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7628
I0
sg6379
g6575
sS'block_loop.thisRepN'
p7629
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7630
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p7631
Nsg69
Vn
sS'block_loop.thisTrialN'
p7632
I0
sg39
F0.73342498277997947
sg34
g752
(S'\x07\xdf\t\x19\x0b\x12\x18\x0cs\x80'
tRp7633
sa(dp7634
S'trial_loop.thisTrialN'
p7635
I88
sg6370
g6716
sS'block_loop.thisIndex'
p7636
g6364
sg38
S'right'
p7637
sg58
g62
sS'trial_loop.thisN'
p7638
I88
sg33
g6664
sg63
g64
sS'trial_loop.thisIndex'
p7639
g59
(g98
S'X\x00\x00\x00'
tRp7640
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7641
I0
sg6379
g6723
sS'block_loop.thisRepN'
p7642
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7643
I2
sg6384
g6671
sg55
g11
sS'block_loop.thisTrial'
p7644
Nsg69
Vn
sS'block_loop.thisTrialN'
p7645
I0
sg39
F0.90020863458721578
sg34
g752
(S'\x07\xdf\t\x19\x0b\x12\x1e\x08\xf8\xe0'
tRp7646
sa(dp7647
S'trial_loop.thisTrialN'
p7648
I89
sg6370
g6937
sS'block_loop.thisIndex'
p7649
g6364
sg38
S'right'
p7650
sg58
g62
sS'trial_loop.thisN'
p7651
I89
sg33
g6941
sg63
g64
sS'trial_loop.thisIndex'
p7652
g59
(g98
S'Y\x00\x00\x00'
tRp7653
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7654
I0
sg6379
g6945
sS'block_loop.thisRepN'
p7655
I2
sg6382
g6941
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7656
I2
sg6384
g6948
sg55
g11
sS'block_loop.thisTrial'
p7657
Nsg69
Vn
sS'block_loop.thisTrialN'
p7658
I0
sg39
F1.016787985294286
sg34
g752
(S'\x07\xdf\t\x19\x0b\x12$\x07\xdf\xa0'
tRp7659
sa(dp7660
S'trial_loop.thisTrialN'
p7661
I90
sg6370
g6999
sS'block_loop.thisIndex'
p7662
g6364
sg38
S'right'
p7663
sg58
g62
sS'trial_loop.thisN'
p7664
I90
sg33
g6786
sg63
g64
sS'trial_loop.thisIndex'
p7665
g59
(g98
S'Z\x00\x00\x00'
tRp7666
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7667
I0
sg6379
g7006
sS'block_loop.thisRepN'
p7668
I2
sg6382
g6786
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7669
I2
sg6384
g6780
sg55
g11
sS'block_loop.thisTrial'
p7670
Nsg69
Vn
sS'block_loop.thisTrialN'
p7671
I0
sg39
F1.0834210484299547
sg34
g752
(S'\x07\xdf\t\x19\x0b\x12*\x08\xae\xa8'
tRp7672
sa(dp7673
S'trial_loop.thisTrialN'
p7674
I91
sg6370
g6660
sS'block_loop.thisIndex'
p7675
g6364
sg38
S'left'
p7676
sg58
g62
sS'trial_loop.thisN'
p7677
I91
sg33
g6664
sg63
g64
sS'trial_loop.thisIndex'
p7678
g59
(g98
S'[\x00\x00\x00'
tRp7679
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7680
I0
sg6379
g6668
sS'block_loop.thisRepN'
p7681
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7682
I2
sg6384
g6671
sg55
g11
sS'block_loop.thisTrial'
p7683
Nsg69
Vn
sS'block_loop.thisTrialN'
p7684
I0
sg39
F0.66677994553447206
sg34
g752
(S'\x07\xdf\t\x19\x0b\x120\no\xe0'
tRp7685
sa(dp7686
S'trial_loop.thisTrialN'
p7687
I92
sg6370
g7098
sS'block_loop.thisIndex'
p7688
g6364
sg38
S'right'
p7689
sg58
g62
sS'trial_loop.thisN'
p7690
I92
sg33
g6986
sg63
g64
sS'trial_loop.thisIndex'
p7691
g59
(g98
S'\\\x00\x00\x00'
tRp7692
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7693
I0
sg6379
g7105
sS'block_loop.thisRepN'
p7694
I2
sg6382
g6986
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7695
I2
sg6384
g6993
sg55
g11
sS'block_loop.thisTrial'
p7696
Nsg69
Vn
sS'block_loop.thisTrialN'
p7697
I0
sg39
F0.70011728924419003
sg34
g752
(S'\x07\xdf\t\x19\x0b\x126\x06\x03\x10'
tRp7698
sa(dp7699
S'trial_loop.thisTrialN'
p7700
I93
sg6370
g6761
sS'block_loop.thisIndex'
p7701
g6364
sg38
S'right'
p7702
sg58
g62
sS'trial_loop.thisN'
p7703
I93
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p7704
g59
(g98
S']\x00\x00\x00'
tRp7705
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7706
I0
sg6379
g6768
sS'block_loop.thisRepN'
p7707
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7708
I2
sg6384
g6502
sg55
g11
sS'block_loop.thisTrial'
p7709
Nsg69
Vn
sS'block_loop.thisTrialN'
p7710
I0
sg39
F0.86666402476021176
sg34
g752
(S'\x07\xdf\t\x19\x0b\x13\x00\x01\xd0\xd8'
tRp7711
sa(dp7712
S'trial_loop.thisTrialN'
p7713
I94
sg6370
g7569
sS'block_loop.thisIndex'
p7714
g6364
sg38
S'left'
p7715
sg58
g62
sS'trial_loop.thisN'
p7716
I94
sg33
g6941
sg63
g64
sS'trial_loop.thisIndex'
p7717
g59
(g98
S'^\x00\x00\x00'
tRp7718
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7719
I0
sg6379
g7576
sS'block_loop.thisRepN'
p7720
I2
sg6382
g6941
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7721
I2
sg6384
g6948
sg55
g11
sS'block_loop.thisTrial'
p7722
Nsg69
Vn
sS'block_loop.thisTrialN'
p7723
I0
sg39
F0.75021467866099556
sg34
g752
(S'\x07\xdf\t\x19\x0b\x13\x06\x00>\x80'
tRp7724
sa(dp7725
S'trial_loop.thisTrialN'
p7726
I95
sg6370
g6598
sS'block_loop.thisIndex'
p7727
g6364
sg38
S'left'
p7728
sg58
g62
sS'trial_loop.thisN'
p7729
I95
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p7730
g59
(g98
S'_\x00\x00\x00'
tRp7731
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7732
I0
sg6379
g6606
sS'block_loop.thisRepN'
p7733
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7734
I2
sg6384
g6609
sg55
g11
sS'block_loop.thisTrial'
p7735
Nsg69
Vn
sS'block_loop.thisTrialN'
p7736
I0
sg39
F1.2501858837804321
sg34
g752
(S'\x07\xdf\t\x19\x0b\x13\x0b\x0c@\xb8'
tRp7737
sa(dp7738
S'trial_loop.thisTrialN'
p7739
I96
sg6370
g7569
sS'block_loop.thisIndex'
p7740
g6364
sg38
S'left'
p7741
sg58
g62
sS'trial_loop.thisN'
p7742
I96
sg33
g6941
sg63
g64
sS'trial_loop.thisIndex'
p7743
g59
(g98
S'`\x00\x00\x00'
tRp7744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7745
I0
sg6379
g7576
sS'block_loop.thisRepN'
p7746
I2
sg6382
g6941
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7747
I2
sg6384
g6948
sg55
g11
sS'block_loop.thisTrial'
p7748
Nsg69
Vn
sS'block_loop.thisTrialN'
p7749
I0
sg39
F0.73344094825824868
sg34
g752
(S'\x07\xdf\t\x19\x0b\x13\x12\x01_\x90'
tRp7750
sa(dp7751
S'trial_loop.thisTrialN'
p7752
I97
sg6370
g7433
sS'block_loop.thisIndex'
p7753
g6364
sg38
S'left'
p7754
sg58
g62
sS'trial_loop.thisN'
p7755
I97
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7756
g59
(g98
S'a\x00\x00\x00'
tRp7757
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7758
I0
sg6379
g7440
sS'block_loop.thisRepN'
p7759
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7760
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7761
Nsg69
Vn
sS'block_loop.thisTrialN'
p7762
I0
sg39
F1.1334520100544978
sg34
g752
(S'\x07\xdf\t\x19\x0b\x13\x17\x0c\xec\x98'
tRp7763
sa(dp7764
S'trial_loop.thisTrialN'
p7765
I98
sg6370
g6474
sS'block_loop.thisIndex'
p7766
g6364
sg38
S'left'
p7767
sg58
g62
sS'trial_loop.thisN'
p7768
I98
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p7769
g59
(g98
S'b\x00\x00\x00'
tRp7770
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7771
I0
sg6379
g6482
sS'block_loop.thisRepN'
p7772
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7773
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p7774
Nsg69
Vn
sS'block_loop.thisTrialN'
p7775
I0
sg39
F1.1334474484883685
sg34
g752
(S'\x07\xdf\t\x19\x0b\x13\x1e\x00]\xc0'
tRp7776
sa(dp7777
S'trial_loop.thisTrialN'
p7778
I99
sg6370
g6937
sS'block_loop.thisIndex'
p7779
g6364
sg38
S'right'
p7780
sg58
g62
sS'trial_loop.thisN'
p7781
I99
sg33
g6941
sg63
g64
sS'trial_loop.thisIndex'
p7782
g59
(g98
S'c\x00\x00\x00'
tRp7783
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7784
I0
sg6379
g6945
sS'block_loop.thisRepN'
p7785
I2
sg6382
g6941
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7786
I2
sg6384
g6948
sg55
g11
sS'block_loop.thisTrial'
p7787
Nsg69
Vn
sS'block_loop.thisTrialN'
p7788
I0
sg39
F0.75022408688892028
sg34
g752
(S'\x07\xdf\t\x19\x0b\x13$\x02\xd6\x90'
tRp7789
sa(dp7790
S'trial_loop.thisTrialN'
p7791
I100
sg6370
g6391
sS'block_loop.thisIndex'
p7792
g6364
sg38
S'left'
p7793
sg58
g62
sS'trial_loop.thisN'
p7794
I100
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p7795
g59
(g98
S'd\x00\x00\x00'
tRp7796
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7797
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7798
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7799
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p7800
Nsg69
Vn
sS'block_loop.thisTrialN'
p7801
I0
sg39
F1.1501000123162157
sg34
g752
(S'\x07\xdf\t\x19\x0b\x13)\x0e\xdc\xb0'
tRp7802
sa(dp7803
S'trial_loop.thisTrialN'
p7804
I101
sg6370
g6442
sS'block_loop.thisIndex'
p7805
g6364
sg38
S'right'
p7806
sg58
g62
sS'trial_loop.thisN'
p7807
I101
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7808
g59
(g98
S'e\x00\x00\x00'
tRp7809
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7810
I0
sg6379
g6449
sS'block_loop.thisRepN'
p7811
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7812
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7813
Nsg69
Vn
sS'block_loop.thisTrialN'
p7814
I0
sg39
F0.80011078901407018
sg34
g752
(S'\x07\xdf\t\x19\x0b\x130\x02M\xd8'
tRp7815
sa(dp7816
S'trial_loop.thisTrialN'
p7817
I102
sg6370
g7500
sS'block_loop.thisIndex'
p7818
g6364
sg38
S'right'
p7819
sg58
g62
sS'trial_loop.thisN'
p7820
I102
sg33
g6748
sg63
g64
sS'trial_loop.thisIndex'
p7821
g59
(g98
S'f\x00\x00\x00'
tRp7822
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7823
I0
sg6379
g7507
sS'block_loop.thisRepN'
p7824
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7825
I2
sg6384
g6755
sg55
g11
sS'block_loop.thisTrial'
p7826
Nsg69
Vn
sS'block_loop.thisTrialN'
p7827
I0
sg39
F0.7167872440386418
sg34
g752
(S'\x07\xdf\t\x19\x0b\x135\x0f\x0b\x90'
tRp7828
sa(dp7829
S'trial_loop.thisTrialN'
p7830
I103
sg6370
g6568
sS'block_loop.thisIndex'
p7831
g6364
sg38
S'right'
p7832
sg58
g62
sS'trial_loop.thisN'
p7833
I103
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7834
g59
(g98
S'g\x00\x00\x00'
tRp7835
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7836
I0
sg6379
g6575
sS'block_loop.thisRepN'
p7837
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7838
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p7839
Nsg69
Vn
sS'block_loop.thisTrialN'
p7840
I0
sg39
F0.68343707092753903
sg34
g752
(S'\x07\xdf\t\x19\x0b\x13;\x0bRp'
tRp7841
sa(dp7842
S'trial_loop.thisTrialN'
p7843
I104
sg6370
g6982
sS'block_loop.thisIndex'
p7844
g6364
sg38
S'left'
p7845
sg58
g62
sS'trial_loop.thisN'
p7846
I104
sg33
g6986
sg63
g64
sS'trial_loop.thisIndex'
p7847
g59
(g98
S'h\x00\x00\x00'
tRp7848
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7849
I0
sg6379
g6990
sS'block_loop.thisRepN'
p7850
I2
sg6382
g6986
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7851
I2
sg6384
g6993
sg55
g11
sS'block_loop.thisTrial'
p7852
Nsg69
Vn
sS'block_loop.thisTrialN'
p7853
I0
sg39
F0.86692602965922561
sg34
g752
(S'\x07\xdf\t\x19\x0b\x14\x05\x06\xe5\xa0'
tRp7854
sa(dp7855
S'trial_loop.thisTrialN'
p7856
I105
sg6370
g7349
sS'block_loop.thisIndex'
p7857
g6364
sg38
S'right'
p7858
sg58
g62
sS'trial_loop.thisN'
p7859
I105
sg33
g7359
sg63
g64
sS'trial_loop.thisIndex'
p7860
g59
(g98
S'i\x00\x00\x00'
tRp7861
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7862
I0
sg6379
g7357
sS'block_loop.thisRepN'
p7863
I2
sg6382
g7359
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7864
I2
sg6384
g7353
sg55
g11
sS'block_loop.thisTrial'
p7865
Nsg69
Vn
sS'block_loop.thisTrialN'
p7866
I0
sg39
F1.3498977069011744
sg34
g752
(S'\x07\xdf\t\x19\x0b\x14\x0b\x05SH'
tRp7867
sa(dp7868
S'trial_loop.thisTrialN'
p7869
I106
sg6370
g6538
sS'block_loop.thisIndex'
p7870
g6364
sg38
S'left'
p7871
sg58
g62
sS'trial_loop.thisN'
p7872
I106
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p7873
g59
(g98
S'j\x00\x00\x00'
tRp7874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7875
I0
sg6379
g6546
sS'block_loop.thisRepN'
p7876
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7877
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p7878
Nsg69
Vn
sS'block_loop.thisTrialN'
p7879
I0
sg39
F0.78340320130610053
sg34
g752
(S'\x07\xdf\t\x19\x0b\x14\x11\x0b\x1f\xa8'
tRp7880
sa(dp7881
S'trial_loop.thisTrialN'
p7882
I107
sg6370
S'33-ambrosia_rice.png'
p7883
sS'block_loop.thisIndex'
p7884
g6364
sg38
S'right'
p7885
sg58
g62
sS'trial_loop.thisN'
p7886
I107
sg33
g7018
sg63
g64
sS'trial_loop.thisIndex'
p7887
g59
(g98
S'k\x00\x00\x00'
tRp7888
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7889
I0
sg6379
S'23-crunchie_redo.png'
p7890
sS'block_loop.thisRepN'
p7891
I2
sg6382
g7018
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7892
I2
sg6384
g7025
sg55
g11
sS'block_loop.thisTrial'
p7893
Nsg69
Vn
sS'block_loop.thisTrialN'
p7894
I0
sg39
F0.68349437559027137
sg34
g752
(S'\x07\xdf\t\x19\x0b\x14\x17\x08\\\xa0'
tRp7895
sa(dp7896
S'trial_loop.thisTrialN'
p7897
I108
sg6370
g7541
sS'block_loop.thisIndex'
p7898
g6364
sg38
S'left'
p7899
sg58
g62
sS'trial_loop.thisN'
p7900
I108
sg33
g7353
sg63
g64
sS'trial_loop.thisIndex'
p7901
g59
(g98
S'l\x00\x00\x00'
tRp7902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7903
I0
sg6379
g7548
sS'block_loop.thisRepN'
p7904
I2
sg6382
g7359
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7905
I2
sg6384
g7353
sg55
g11
sS'block_loop.thisTrial'
p7906
Nsg69
Vn
sS'block_loop.thisTrialN'
p7907
I0
sg39
F0.79986389429905103
sg34
g752
(S'\x07\xdf\t\x19\x0b\x14\x1d\x04*h'
tRp7908
sa(dp7909
S'trial_loop.thisTrialN'
p7910
I109
sg6370
g6744
sS'block_loop.thisIndex'
p7911
g6364
sg38
S'left'
p7912
sg58
g62
sS'trial_loop.thisN'
p7913
I109
sg33
g6748
sg63
g64
sS'trial_loop.thisIndex'
p7914
g59
(g98
S'm\x00\x00\x00'
tRp7915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7916
I0
sg6379
g6752
sS'block_loop.thisRepN'
p7917
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7918
I2
sg6384
g6755
sg55
g11
sS'block_loop.thisTrial'
p7919
Nsg69
Vn
sS'block_loop.thisTrialN'
p7920
I0
sg39
F0.66677424357840209
sg34
g752
(S'\x07\xdf\t\x19\x0b\x14#\x01\xa5\xe0'
tRp7921
sa(dp7922
S'trial_loop.thisTrialN'
p7923
I110
sg6370
g6643
sS'block_loop.thisIndex'
p7924
g6364
sg38
S'left'
p7925
sg58
g62
sS'trial_loop.thisN'
p7926
I110
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p7927
g59
(g98
S'n\x00\x00\x00'
tRp7928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7929
I0
sg6379
g6651
sS'block_loop.thisRepN'
p7930
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7931
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p7932
Nsg69
Vn
sS'block_loop.thisTrialN'
p7933
I0
sg39
F0.8334432860601737
sg34
g752
(S'\x07\xdf\t\x19\x0b\x14(\x0c<\xd0'
tRp7934
sa(dp7935
S'trial_loop.thisTrialN'
p7936
I111
sg6370
g7883
sS'block_loop.thisIndex'
p7937
g6364
sg38
S'right'
p7938
sg58
g62
sS'trial_loop.thisN'
p7939
I111
sg33
g7018
sg63
g64
sS'trial_loop.thisIndex'
p7940
g59
(g98
S'o\x00\x00\x00'
tRp7941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7942
I0
sg6379
g7890
sS'block_loop.thisRepN'
p7943
I2
sg6382
g7018
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7944
I2
sg6384
g7025
sg55
g11
sS'block_loop.thisTrial'
p7945
Nsg69
Vn
sS'block_loop.thisTrialN'
p7946
I0
sg39
F0.78332109313396359
sg34
g752
(S'\x07\xdf\t\x19\x0b\x14.\n-x'
tRp7947
sa(dp7948
S'trial_loop.thisTrialN'
p7949
I112
sg6370
g6598
sS'block_loop.thisIndex'
p7950
g6364
sg38
S'left'
p7951
sg58
g62
sS'trial_loop.thisN'
p7952
I112
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p7953
g59
(g98
S'p\x00\x00\x00'
tRp7954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7955
I0
sg6379
g6606
sS'block_loop.thisRepN'
p7956
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7957
I2
sg6384
g6609
sg55
g11
sS'block_loop.thisTrial'
p7958
Nsg69
Vn
sS'block_loop.thisTrialN'
p7959
I0
sg39
F0.75011118815109512
sg34
g752
(S'\x07\xdf\t\x19\x0b\x144\x07jp'
tRp7960
sa(dp7961
S'trial_loop.thisTrialN'
p7962
I113
sg6370
g7349
sS'block_loop.thisIndex'
p7963
g6364
sg38
S'right'
p7964
sg58
g62
sS'trial_loop.thisN'
p7965
I113
sg33
g7359
sg63
g64
sS'trial_loop.thisIndex'
p7966
g59
(g98
S'q\x00\x00\x00'
tRp7967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7968
I0
sg6379
g7357
sS'block_loop.thisRepN'
p7969
I2
sg6382
g7359
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7970
I2
sg6384
g7353
sg55
g11
sS'block_loop.thisTrial'
p7971
Nsg69
Vn
sS'block_loop.thisTrialN'
p7972
I0
sg39
F0.88316662713350524
sg34
g752
(S'\x07\xdf\t\x19\x0b\x14:\x04.P'
tRp7973
sa(dp7974
S'trial_loop.thisTrialN'
p7975
I114
sg6370
g7113
sS'block_loop.thisIndex'
p7976
g6364
sg38
S'right'
p7977
sg58
g62
sS'trial_loop.thisN'
p7978
I114
sg33
g6519
sg63
g64
sS'trial_loop.thisIndex'
p7979
g59
(g98
S'r\x00\x00\x00'
tRp7980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7981
I0
sg6379
g7120
sS'block_loop.thisRepN'
p7982
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7983
I2
sg6384
g6519
sg55
g11
sS'block_loop.thisTrial'
p7984
Nsg69
Vn
sS'block_loop.thisTrialN'
p7985
I0
sg39
F1.3667538305744529
sg34
g752
(S'\x07\xdf\t\x19\x0b\x15\x04\x02\xd6\x90'
tRp7986
sa(dp7987
S'trial_loop.thisTrialN'
p7988
I115
sg6370
g6776
sS'block_loop.thisIndex'
p7989
g6364
sg38
S'left'
p7990
sg58
g62
sS'trial_loop.thisN'
p7991
I115
sg33
g6786
sg63
g64
sS'trial_loop.thisIndex'
p7992
g59
(g98
S's\x00\x00\x00'
tRp7993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7994
I0
sg6379
g6784
sS'block_loop.thisRepN'
p7995
I2
sg6382
g6786
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7996
I2
sg6384
g6780
sg55
g11
sS'block_loop.thisTrial'
p7997
Nsg69
Vn
sS'block_loop.thisTrialN'
p7998
I0
sg39
F0.76676090099954308
sg34
g752
(S'\x07\xdf\t\x19\x0b\x15\n\x08\xe1p'
tRp7999
sa(dp8000
S'trial_loop.thisTrialN'
p8001
I116
sg6370
g7405
sS'block_loop.thisIndex'
p8002
g6364
sg38
S'right'
p8003
sg58
g62
sS'trial_loop.thisN'
p8004
I116
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p8005
g59
(g98
S't\x00\x00\x00'
tRp8006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8007
I0
sg6379
g7412
sS'block_loop.thisRepN'
p8008
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8009
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p8010
Nsg69
Vn
sS'block_loop.thisTrialN'
p8011
I0
sg39
F1.0001080520751202
sg34
g752
(S'\x07\xdf\t\x19\x0b\x15\x10\x05\xdf\xe8'
tRp8012
sa(dp8013
S'trial_loop.thisTrialN'
p8014
I117
sg6370
g6907
sS'block_loop.thisIndex'
p8015
g6364
sg38
S'left'
p8016
sg58
g62
sS'trial_loop.thisN'
p8017
I117
sg33
g6911
sg63
g64
sS'trial_loop.thisIndex'
p8018
g59
(g98
S'u\x00\x00\x00'
tRp8019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8020
I0
sg6379
g6915
sS'block_loop.thisRepN'
p8021
I2
sg6382
g6911
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8022
I2
sg6384
g6918
sg55
g11
sS'block_loop.thisTrial'
p8023
Nsg69
Vn
sS'block_loop.thisTrialN'
p8024
I0
sg39
F0.63354409665043931
sg34
g752
(S'\x07\xdf\t\x19\x0b\x15\x16\x06pp'
tRp8025
sa(dp8026
S'trial_loop.thisTrialN'
p8027
I118
sg6370
g7014
sS'block_loop.thisIndex'
p8028
g6364
sg38
S'left'
p8029
sg58
g62
sS'trial_loop.thisN'
p8030
I118
sg33
g7025
sg63
g64
sS'trial_loop.thisIndex'
p8031
g59
(g98
S'v\x00\x00\x00'
tRp8032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8033
I0
sg6379
g7022
sS'block_loop.thisRepN'
p8034
I2
sg6382
g7018
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8035
I2
sg6384
g7025
sg55
g11
sS'block_loop.thisTrial'
p8036
Nsg69
Vn
sS'block_loop.thisTrialN'
p8037
I0
sg39
F1.3501026922358506
sg34
g752
(S'\x07\xdf\t\x19\x0b\x15\x1c\x01L\x08'
tRp8038
sa(dp8039
S'trial_loop.thisTrialN'
p8040
I119
sg6370
g6892
sS'block_loop.thisIndex'
p8041
g6364
sg38
S'right'
p8042
sg58
g62
sS'trial_loop.thisN'
p8043
I119
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p8044
g59
(g98
S'w\x00\x00\x00'
tRp8045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8046
I0
sg6379
g6899
sS'block_loop.thisRepN'
p8047
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8048
I2
sg6384
g6609
sg55
g11
sS'block_loop.thisTrial'
p8049
Nsg69
Vn
sS'block_loop.thisTrialN'
p8050
I0
sg39
F0.75011090305270045
sg34
g752
(S'\x07\xdf\t\x19\x0b\x15"\x07\x1cP'
tRp8051
sa(dp8052
S'trial_loop.thisTrialN'
p8053
I120
sg6370
g7883
sS'block_loop.thisIndex'
p8054
g6364
sg38
S'right'
p8055
sg58
g62
sS'trial_loop.thisN'
p8056
I120
sg33
g7018
sg63
g64
sS'trial_loop.thisIndex'
p8057
g59
(g98
S'x\x00\x00\x00'
tRp8058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8059
I0
sg6379
g7890
sS'block_loop.thisRepN'
p8060
I2
sg6382
g7018
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8061
I2
sg6384
g7025
sg55
g11
sS'block_loop.thisTrial'
p8062
Nsg69
Vn
sS'block_loop.thisTrialN'
p8063
I0
sg39
F0.88350361275934119
sg34
g752
(S'\x07\xdf\t\x19\x0b\x15(\x03\xdcH'
tRp8064
sa(dp8065
S'trial_loop.thisTrialN'
p8066
I121
sg6370
g6836
sS'block_loop.thisIndex'
p8067
g6364
sg38
S'left'
p8068
sg58
g62
sS'trial_loop.thisN'
p8069
I121
sg33
g6467
sg63
g64
sS'trial_loop.thisIndex'
p8070
g59
(g98
S'y\x00\x00\x00'
tRp8071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8072
I0
sg6379
g6843
sS'block_loop.thisRepN'
p8073
I2
sg6382
g6467
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8074
I2
sg6384
g6461
sg55
g11
sS'block_loop.thisTrial'
p8075
Nsg69
Vn
sS'block_loop.thisTrialN'
p8076
I0
sg39
F1.0834236143109592
sg34
g752
(S'\x07\xdf\t\x19\x0b\x15.\x02\x88p'
tRp8077
sa(dp8078
S'trial_loop.thisTrialN'
p8079
I122
sg6370
g7569
sS'block_loop.thisIndex'
p8080
g6364
sg38
S'left'
p8081
sg58
g62
sS'trial_loop.thisN'
p8082
I122
sg33
g6948
sg63
g64
sS'trial_loop.thisIndex'
p8083
g59
(g98
S'z\x00\x00\x00'
tRp8084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8085
I0
sg6379
g7576
sS'block_loop.thisRepN'
p8086
I2
sg6382
g6941
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8087
I2
sg6384
g6948
sg55
g11
sS'block_loop.thisTrial'
p8088
Nsg69
Vn
sS'block_loop.thisTrialN'
p8089
I0
sg39
F0.86687870342029782
sg34
g752
(S'\x07\xdf\t\x19\x0b\x154\x04I\xa8'
tRp8090
sa(dp8091
S'trial_loop.thisTrialN'
p8092
I123
sg6370
g6408
sS'block_loop.thisIndex'
p8093
g6364
sg38
S'left'
p8094
sg58
g62
sS'trial_loop.thisN'
p8095
I123
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8096
g59
(g98
S'{\x00\x00\x00'
tRp8097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8098
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8099
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8100
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8101
Nsg69
Vn
sS'block_loop.thisTrialN'
p8102
I0
sg39
F0.63341580263022479
sg34
g752
(S'\x07\xdf\t\x19\x0b\x15:\x02\xb7P'
tRp8103
sa(dp8104
S'trial_loop.thisTrialN'
p8105
I124
sg6370
g6598
sS'block_loop.thisIndex'
p8106
g6364
sg38
S'left'
p8107
sg58
g62
sS'trial_loop.thisN'
p8108
I124
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p8109
g59
(g98
S'|\x00\x00\x00'
tRp8110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8111
I0
sg6379
g6606
sS'block_loop.thisRepN'
p8112
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8113
I2
sg6384
g6609
sg55
g11
sS'block_loop.thisTrial'
p8114
Nsg69
Vn
sS'block_loop.thisTrialN'
p8115
I0
sg39
F0.66675742280676786
sg34
g752
(S'\x07\xdf\t\x19\x0b\x16\x03\r\x0f\xc0'
tRp8116
sa(dp8117
S'trial_loop.thisTrialN'
p8118
I125
sg6370
g6744
sS'block_loop.thisIndex'
p8119
g6364
sg38
S'left'
p8120
sg58
g62
sS'trial_loop.thisN'
p8121
I125
sg33
g6748
sg63
g64
sS'trial_loop.thisIndex'
p8122
g59
(g98
S'}\x00\x00\x00'
tRp8123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8124
I0
sg6379
g6752
sS'block_loop.thisRepN'
p8125
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8126
I2
sg6384
g6755
sg55
g11
sS'block_loop.thisTrial'
p8127
Nsg69
Vn
sS'block_loop.thisTrialN'
p8128
I0
sg39
F0.71678410796357639
sg34
g752
(S'\x07\xdf\t\x19\x0b\x16\t\x08dp'
tRp8129
sa(dp8130
S'trial_loop.thisTrialN'
p8131
I126
sg6370
g7405
sS'block_loop.thisIndex'
p8132
g6364
sg38
S'right'
p8133
sg58
g62
sS'trial_loop.thisN'
p8134
I126
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p8135
g59
(g98
S'~\x00\x00\x00'
tRp8136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8137
I0
sg6379
g7412
sS'block_loop.thisRepN'
p8138
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8139
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p8140
Nsg69
Vn
sS'block_loop.thisTrialN'
p8141
I0
sg39
F1.1001166620289951
sg34
g752
(S'\x07\xdf\t\x19\x0b\x16\x0f\x04\xabP'
tRp8142
sa(dp8143
S'trial_loop.thisTrialN'
p8144
I127
sg6370
g6836
sS'block_loop.thisIndex'
p8145
g6364
sg38
S'left'
p8146
sg58
g62
sS'trial_loop.thisN'
p8147
I127
sg33
g6467
sg63
g64
sS'trial_loop.thisIndex'
p8148
g59
(g98
S'\x7f\x00\x00\x00'
tRp8149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8150
I0
sg6379
g6843
sS'block_loop.thisRepN'
p8151
I2
sg6382
g6467
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8152
I2
sg6384
g6461
sg55
g11
sS'block_loop.thisTrial'
p8153
Nsg69
Vn
sS'block_loop.thisTrialN'
p8154
I0
sg39
F0.88344174653229857
sg34
g752
(S'\x07\xdf\t\x19\x0b\x16\x15\x06\xab\x08'
tRp8155
sa(dp8156
S'trial_loop.thisTrialN'
p8157
I128
sg6370
g6643
sS'block_loop.thisIndex'
p8158
g6364
sg38
S'left'
p8159
sg58
g62
sS'trial_loop.thisN'
p8160
I128
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p8161
g59
(g98
S'\x80\x00\x00\x00'
tRp8162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8163
I0
sg6379
g6651
sS'block_loop.thisRepN'
p8164
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8165
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p8166
Nsg69
Vn
sS'block_loop.thisTrialN'
p8167
I0
sg39
F1.0002092618024108
sg34
g752
(S'\x07\xdf\t\x19\x0b\x16\x1b\x05W0'
tRp8168
sa(dp8169
S'trial_loop.thisTrialN'
p8170
I129
sg6370
g6819
sS'block_loop.thisIndex'
p8171
g6364
sg38
S'left'
p8172
sg58
g62
sS'trial_loop.thisN'
p8173
I129
sg33
g6823
sg63
g64
sS'trial_loop.thisIndex'
p8174
g59
(g98
S'\x81\x00\x00\x00'
tRp8175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8176
I0
sg6379
g6827
sS'block_loop.thisRepN'
p8177
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8178
I2
sg6384
g6823
sg55
g11
sS'block_loop.thisTrial'
p8179
Nsg69
Vn
sS'block_loop.thisTrialN'
p8180
I0
sg39
F0.95011272767897026
sg34
g752
(S'\x07\xdf\t\x19\x0b\x16!\x05\xe7\xb8'
tRp8181
sa(dp8182
S'trial_loop.thisTrialN'
p8183
I130
sg6370
g6954
sS'block_loop.thisIndex'
p8184
g6364
sg38
S'right'
p8185
sg58
g62
sS'trial_loop.thisN'
p8186
I130
sg33
g6478
sg63
g64
sS'trial_loop.thisIndex'
p8187
g59
(g98
S'\x82\x00\x00\x00'
tRp8188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8189
I0
sg6379
g6961
sS'block_loop.thisRepN'
p8190
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8191
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p8192
Nsg69
Vn
sS'block_loop.thisTrialN'
p8193
I0
sg39
F0.88342150458629476
sg34
g752
(S"\x07\xdf\t\x19\x0b\x16'\x05\x86\x10"
tRp8194
sa(dp8195
S'trial_loop.thisTrialN'
p8196
I131
sg6370
g6776
sS'block_loop.thisIndex'
p8197
g6364
sg38
S'left'
p8198
sg58
g62
sS'trial_loop.thisN'
p8199
I131
sg33
g6780
sg63
g64
sS'trial_loop.thisIndex'
p8200
g59
(g98
S'\x83\x00\x00\x00'
tRp8201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8202
I0
sg6379
g6784
sS'block_loop.thisRepN'
p8203
I2
sg6382
g6786
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8204
I2
sg6384
g6780
sg55
g11
sS'block_loop.thisTrial'
p8205
Nsg69
Vn
sS'block_loop.thisTrialN'
p8206
I0
sg39
F0.76676831354416208
sg34
g752
(S'\x07\xdf\t\x19\x0b\x16-\x04l\xd0'
tRp8207
sa(dp8208
S'trial_loop.thisTrialN'
p8209
I132
sg6370
g6508
sS'block_loop.thisIndex'
p8210
g6364
sg38
S'left'
p8211
sg58
g62
sS'trial_loop.thisN'
p8212
I132
sg33
g6512
sg63
g64
sS'trial_loop.thisIndex'
p8213
g59
(g98
S'\x84\x00\x00\x00'
tRp8214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8215
I0
sg6379
g6516
sS'block_loop.thisRepN'
p8216
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8217
I2
sg6384
g6519
sg55
g11
sS'block_loop.thisTrial'
p8218
Nsg69
Vn
sS'block_loop.thisTrialN'
p8219
I0
sg39
F0.91676968201318232
sg34
g752
(S'\x07\xdf\t\x19\x0b\x163\x01,\xc8'
tRp8220
sa(dp8221
S'trial_loop.thisTrialN'
p8222
I133
sg6370
g7057
sS'block_loop.thisIndex'
p8223
g6364
sg38
S'right'
p8224
sg58
g62
sS'trial_loop.thisN'
p8225
I133
sg33
g6911
sg63
g64
sS'trial_loop.thisIndex'
p8226
g59
(g98
S'\x85\x00\x00\x00'
tRp8227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8228
I0
sg6379
g7064
sS'block_loop.thisRepN'
p8229
I2
sg6382
g6911
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8230
I2
sg6384
g6918
sg55
g11
sS'block_loop.thisTrial'
p8231
Nsg69
Vn
sS'block_loop.thisTrialN'
p8232
I0
sg39
F1.5172264657448977
sg34
g752
(S'\x07\xdf\t\x19\x0b\x169\x00\x90\x88'
tRp8233
sa(dp8234
S'trial_loop.thisTrialN'
p8235
I134
sg6370
g6836
sS'block_loop.thisIndex'
p8236
g6364
sg38
S'left'
p8237
sg58
g62
sS'trial_loop.thisN'
p8238
I134
sg33
g6467
sg63
g64
sS'trial_loop.thisIndex'
p8239
g59
(g98
S'\x86\x00\x00\x00'
tRp8240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8241
I0
sg6379
g6843
sS'block_loop.thisRepN'
p8242
I2
sg6382
g6467
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8243
I2
sg6384
g6461
sg55
g11
sS'block_loop.thisTrial'
p8244
Nsg69
Vn
sS'block_loop.thisTrialN'
p8245
I0
sg39
F0.78346221655647241
sg34
g752
(S'\x07\xdf\t\x19\x0b\x17\x03\x08\xfc\xc8'
tRp8246
sa(dp8247
S'trial_loop.thisTrialN'
p8248
I135
sg6370
g7098
sS'block_loop.thisIndex'
p8249
g6364
sg38
S'right'
p8250
sg58
g62
sS'trial_loop.thisN'
p8251
I135
sg33
g6986
sg63
g64
sS'trial_loop.thisIndex'
p8252
g59
(g98
S'\x87\x00\x00\x00'
tRp8253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8254
I0
sg6379
g7105
sS'block_loop.thisRepN'
p8255
I2
sg6382
g6986
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8256
I2
sg6384
g6993
sg55
g11
sS'block_loop.thisTrial'
p8257
Nsg69
Vn
sS'block_loop.thisTrialN'
p8258
I0
sg39
F0.65014391738077393
sg34
g752
(S'\x07\xdf\t\x19\x0b\x17\t\x065\xd8'
tRp8259
sa(dp8260
S'trial_loop.thisTrialN'
p8261
I136
sg6370
g6761
sS'block_loop.thisIndex'
p8262
g6364
sg38
S'right'
p8263
sg58
g62
sS'trial_loop.thisN'
p8264
I136
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p8265
g59
(g98
S'\x88\x00\x00\x00'
tRp8266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8267
I0
sg6379
g6768
sS'block_loop.thisRepN'
p8268
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8269
I2
sg6384
g6502
sg55
g11
sS'block_loop.thisTrial'
p8270
Nsg69
Vn
sS'block_loop.thisTrialN'
p8271
I0
sg39
F0.80000102635221992
sg34
g752
(S'\x07\xdf\t\x19\x0b\x17\x0f\x01O\xf0'
tRp8272
sa(dp8273
S'trial_loop.thisTrialN'
p8274
I137
sg6370
g7057
sS'block_loop.thisIndex'
p8275
g6364
sg38
S'right'
p8276
sg58
g62
sS'trial_loop.thisN'
p8277
I137
sg33
g6918
sg63
g64
sS'trial_loop.thisIndex'
p8278
g59
(g98
S'\x89\x00\x00\x00'
tRp8279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8280
I0
sg6379
g7064
sS'block_loop.thisRepN'
p8281
I2
sg6382
g6911
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8282
I2
sg6384
g6918
sg55
g11
sS'block_loop.thisTrial'
p8283
Nsg69
Vn
sS'block_loop.thisTrialN'
p8284
I0
sg39
F0.7500932269877012
sg34
g752
(S'\x07\xdf\t\x19\x0b\x17\x14\x0e\t\xc0'
tRp8285
sa(dp8286
S'trial_loop.thisTrialN'
p8287
I138
sg6370
g6391
sS'block_loop.thisIndex'
p8288
g6364
sg38
S'left'
p8289
sg58
g62
sS'trial_loop.thisN'
p8290
I138
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8291
g59
(g98
S'\x8a\x00\x00\x00'
tRp8292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8293
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8294
I2
sg6382
g6401
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8295
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8296
Nsg69
Vn
sS'block_loop.thisTrialN'
p8297
I0
sg39
F0.70011130219063489
sg34
g752
(S'\x07\xdf\t\x19\x0b\x17\x1a\n\xcd\xa0'
tRp8298
sa(dp8299
S'trial_loop.thisTrialN'
p8300
I139
sg6370
g6877
sS'block_loop.thisIndex'
p8301
g6364
sg38
S'right'
p8302
sg58
g62
sS'trial_loop.thisN'
p8303
I139
sg33
g6829
sg63
g64
sS'trial_loop.thisIndex'
p8304
g59
(g98
S'\x8b\x00\x00\x00'
tRp8305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8306
I0
sg6379
g6884
sS'block_loop.thisRepN'
p8307
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8308
I2
sg6384
g6823
sg55
g11
sS'block_loop.thisTrial'
p8309
Nsg69
Vn
sS'block_loop.thisTrialN'
p8310
I0
sg39
F0.63355207938911917
sg34
g752
(S'\x07\xdf\t\x19\x0b\x17 \x06\x9bh'
tRp8311
sa(dp8312
S'trial_loop.thisTrialN'
p8313
I140
sg6370
g7349
sS'block_loop.thisIndex'
p8314
g6364
sg38
S'right'
p8315
sg58
g62
sS'trial_loop.thisN'
p8316
I140
sg33
g7359
sg63
g64
sS'trial_loop.thisIndex'
p8317
g59
(g98
S'\x8c\x00\x00\x00'
tRp8318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8319
I0
sg6379
g7357
sS'block_loop.thisRepN'
p8320
I2
sg6382
g7359
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8321
I2
sg6384
g7353
sg55
g11
sS'block_loop.thisTrial'
p8322
Nsg69
Vn
sS'block_loop.thisTrialN'
p8323
I0
sg39
F0.64986623210188554
sg34
g752
(S'\x07\xdf\t\x19\x0b\x17&\x01w\x00'
tRp8324
sa(dp8325
S'trial_loop.thisTrialN'
p8326
I141
sg6370
g6371
sS'block_loop.thisIndex'
p8327
g6364
sg38
S'right'
p8328
sg58
g62
sS'trial_loop.thisN'
p8329
I141
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8330
g59
(g98
S'\x8d\x00\x00\x00'
tRp8331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8332
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8333
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8334
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8335
Nsg69
Vn
sS'block_loop.thisTrialN'
p8336
I0
sg39
F1.9667413432889589
sg34
g752
(S'\x07\xdf\t\x19\x0b\x17+\x0c\r\xf0'
tRp8337
sa(dp8338
S'trial_loop.thisTrialN'
p8339
I142
sg6370
g6907
sS'block_loop.thisIndex'
p8340
g6364
sg38
S'left'
p8341
sg58
g62
sS'trial_loop.thisN'
p8342
I142
sg33
g6911
sg63
g64
sS'trial_loop.thisIndex'
p8343
g59
(g98
S'\x8e\x00\x00\x00'
tRp8344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8345
I0
sg6379
g6915
sS'block_loop.thisRepN'
p8346
I2
sg6382
g6911
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8347
I2
sg6384
g6918
sg55
g11
sS'block_loop.thisTrial'
p8348
Nsg69
Vn
sS'block_loop.thisTrialN'
p8349
I0
sg39
F0.70012042532107444
sg34
g752
(S'\x07\xdf\t\x19\x0b\x172\x0b\xe2\xf8'
tRp8350
sa(dp8351
S'trial_loop.thisTrialN'
p8352
I143
sg6370
g6716
sS'block_loop.thisIndex'
p8353
g6364
sg38
S'right'
p8354
sg58
g62
sS'trial_loop.thisN'
p8355
I143
sg33
g6671
sg63
g64
sS'trial_loop.thisIndex'
p8356
g59
(g98
S'\x8f\x00\x00\x00'
tRp8357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8358
I0
sg6379
g6723
sS'block_loop.thisRepN'
p8359
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8360
I2
sg6384
g6671
sg55
g11
sS'block_loop.thisTrial'
p8361
Nsg69
Vn
sS'block_loop.thisTrialN'
p8362
I0
sg39
F0.80010024039438576
sg34
g752
(S'\x07\xdf\t\x19\x0b\x178\x07\xebX'
tRp8363
sa(dp8364
S'trial_loop.thisTrialN'
p8365
I144
sg6370
g6982
sS'block_loop.thisIndex'
p8366
g6364
sg38
S'left'
p8367
sg58
g62
sS'trial_loop.thisN'
p8368
I144
sg33
g6986
sg63
g64
sS'trial_loop.thisIndex'
p8369
g59
(g98
S'\x90\x00\x00\x00'
tRp8370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8371
I0
sg6379
g6990
sS'block_loop.thisRepN'
p8372
I2
sg6382
g6986
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8373
I2
sg6384
g6993
sg55
g11
sS'block_loop.thisTrial'
p8374
Nsg69
Vn
sS'block_loop.thisTrialN'
p8375
I0
sg39
F1.3168856598067578
sg34
g752
(S'\x07\xdf\t\x19\x0b\x18\x02\x05f\xd0'
tRp8376
sa(dp8377
S'trial_loop.thisTrialN'
p8378
I145
sg6370
g7057
sS'block_loop.thisIndex'
p8379
g6364
sg38
S'right'
p8380
sg58
g62
sS'trial_loop.thisN'
p8381
I145
sg33
g6911
sg63
g64
sS'trial_loop.thisIndex'
p8382
g59
(g98
S'\x91\x00\x00\x00'
tRp8383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8384
I0
sg6379
g7064
sS'block_loop.thisRepN'
p8385
I2
sg6382
g6911
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8386
I2
sg6384
g6918
sg55
g11
sS'block_loop.thisTrial'
p8387
Nsg69
Vn
sS'block_loop.thisTrialN'
p8388
I0
sg39
F0.85010725380016083
sg34
g752
(S'\x07\xdf\t\x19\x0b\x18\x08\n\xba\x18'
tRp8389
sa(dp8390
S'trial_loop.thisTrialN'
p8391
I146
sg6370
g6982
sS'block_loop.thisIndex'
p8392
g6364
sg38
S'left'
p8393
sg58
g62
sS'trial_loop.thisN'
p8394
I146
sg33
g6986
sg63
g64
sS'trial_loop.thisIndex'
p8395
g59
(g98
S'\x92\x00\x00\x00'
tRp8396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8397
I0
sg6379
g6990
sS'block_loop.thisRepN'
p8398
I2
sg6382
g6986
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8399
I2
sg6384
g6993
sg55
g11
sS'block_loop.thisTrial'
p8400
Nsg69
Vn
sS'block_loop.thisTrialN'
p8401
I0
sg39
F1.2001902742867969
sg34
g752
(S'\x07\xdf\t\x19\x0b\x18\x0e\x08\xe9@'
tRp8402
sa(dp8403
S'trial_loop.thisTrialN'
p8404
I147
sg6370
g7433
sS'block_loop.thisIndex'
p8405
g6364
sg38
S'left'
p8406
sg58
g62
sS'trial_loop.thisN'
p8407
I147
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8408
g59
(g98
S'\x93\x00\x00\x00'
tRp8409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8410
I0
sg6379
g7440
sS'block_loop.thisRepN'
p8411
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8412
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8413
Nsg69
Vn
sS'block_loop.thisTrialN'
p8414
I0
sg39
F0.98344522472598328
sg34
g752
(S'\x07\xdf\t\x19\x0b\x18\x14\x0c\x92\xc0'
tRp8415
sa(dp8416
S'trial_loop.thisTrialN'
p8417
I148
sg6370
g6954
sS'block_loop.thisIndex'
p8418
g6364
sg38
S'right'
p8419
sg58
g62
sS'trial_loop.thisN'
p8420
I148
sg33
g6485
sg63
g64
sS'trial_loop.thisIndex'
p8421
g59
(g98
S'\x94\x00\x00\x00'
tRp8422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8423
I0
sg6379
g6961
sS'block_loop.thisRepN'
p8424
I2
sg6382
g6478
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8425
I2
sg6384
g6485
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vn
sS'block_loop.thisTrialN'
p8427
I0
sg39
F0.86675126469344832
sg34
g752
(S'\x07\xdf\t\x19\x0b\x18\x1a\x0c\xaa0'
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g7113
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'right'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g6512
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g7120
sS'block_loop.thisRepN'
p8437
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8438
I2
sg6384
g6519
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vn
sS'block_loop.thisTrialN'
p8440
I0
sg39
F0.65010913544665527
sg34
g752
(S'\x07\xdf\t\x19\x0b\x18 \x0b\x17\xd8'
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g7405
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'right'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g7412
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8451
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vn
sS'block_loop.thisTrialN'
p8453
I0
sg39
F0.63354495194380434
sg34
g752
(S'\x07\xdf\t\x19\x0b\x18&\x06l\x88'
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g6660
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'left'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g6664
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g6668
sS'block_loop.thisRepN'
p8463
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8464
I2
sg6384
g6671
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vn
sS'block_loop.thisTrialN'
p8466
I0
sg39
F0.71678154208257183
sg34
g752
(S'\x07\xdf\t\x19\x0b\x18,\x01H '
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g7113
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'right'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g6512
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g7120
sS'block_loop.thisRepN'
p8476
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8477
I2
sg6384
g6519
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vn
sS'block_loop.thisTrialN'
p8479
I0
sg39
F0.61675981762800802
sg34
g752
(S'\x07\xdf\t\x19\x0b\x181\x0c\xd1@'
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g7500
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'right'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6748
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g7507
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8490
I2
sg6384
g6755
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vn
sS'block_loop.thisTrialN'
p8492
I0
sg39
F0.73346261569258786
sg34
g752
(S'\x07\xdf\t\x19\x0b\x187\x07r@'
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g6371
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'right'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8503
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vn
sS'block_loop.thisTrialN'
p8505
I0
sg39
F1.05011877175275
sg34
g752
(S'\x07\xdf\t\x19\x0b\x19\x01\x03\xb9 '
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g7569
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'left'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6941
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g7576
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6941
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8516
I2
sg6384
g6948
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vn
sS'block_loop.thisTrialN'
p8518
I0
sg39
F0.81675451480896299
sg34
g752
(S'\x07\xdf\t\x19\x0b\x19\x07\x05\x01@'
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g7113
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'right'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g6512
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g7120
sS'block_loop.thisRepN'
p8528
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8529
I2
sg6384
g6519
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vn
sS'block_loop.thisTrialN'
p8531
I0
sg39
F0.70021165662274143
sg34
g752
(S'\x07\xdf\t\x19\x0b\x19\r\x02\xb7P'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g6761
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'right'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g6768
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8542
I2
sg6384
g6502
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vn
sS'block_loop.thisTrialN'
p8544
I0
sg39
F1.0833406508445478
sg34
g752
(S'\x07\xdf\t\x19\x0b\x19\x12\x0e\x05\xd8'
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g6819
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'left'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g6823
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g6827
sS'block_loop.thisRepN'
p8554
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8555
I2
sg6384
g6823
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vn
sS'block_loop.thisTrialN'
p8557
I0
sg39
F0.70023047308040987
sg34
g752
(S'\x07\xdf\t\x19\x0b\x19\x19\x00\x84\xd0'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g6538
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'left'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g6546
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8568
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vn
sS'block_loop.thisTrialN'
p8570
I0
sg39
F1.2167983628542061
sg34
g752
(S'\x07\xdf\t\x19\x0b\x19\x1e\x0b\x94\xd8'
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g6508
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'left'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6512
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g6516
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8581
I2
sg6384
g6519
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vn
sS'block_loop.thisTrialN'
p8583
I0
sg39
F0.7334246976824943
sg34
g752
(S'\x07\xdf\t\x19\x0b\x19%\x00:\x98'
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g6598
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'left'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g6602
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g6606
sS'block_loop.thisRepN'
p8593
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8594
I2
sg6384
g6609
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vn
sS'block_loop.thisTrialN'
p8596
I0
sg39
F0.6334585673039328
sg34
g752
(S'\x07\xdf\t\x19\x0b\x19*\x0c\x028'
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g7541
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'left'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g7359
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g7548
sS'block_loop.thisRepN'
p8606
I2
sg6382
g7359
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8607
I2
sg6384
g7353
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vn
sS'block_loop.thisTrialN'
p8609
I0
sg39
F0.68334070786386292
sg34
g752
(S'\x07\xdf\t\x19\x0b\x190\x06\xdd\xd0'
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g7500
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'right'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g6755
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g7507
sS'block_loop.thisRepN'
p8619
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8620
I2
sg6384
g6755
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vn
sS'block_loop.thisTrialN'
p8622
I0
sg39
F0.86674014587879356
sg34
g752
(S'\x07\xdf\t\x19\x0b\x196\x02m\x18'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g7883
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'right'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g7018
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g7890
sS'block_loop.thisRepN'
p8632
I2
sg6382
g7018
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8633
I2
sg6384
g7025
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vn
sS'block_loop.thisTrialN'
p8635
I0
sg39
F0.76672127240362897
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1a\x00\x01\x19@'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g6371
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'right'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8645
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8646
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vn
sS'block_loop.thisTrialN'
p8648
I0
sg39
F1.5000872399341461
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1a\x05\r\x1bx'
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g6508
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'left'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6512
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g6516
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6512
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8659
I2
sg6384
g6519
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vn
sS'block_loop.thisTrialN'
p8661
I0
sg39
F0.7002033887865764
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1a\x0c\x06\n\xe0'
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g6999
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'right'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g6780
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g7006
sS'block_loop.thisRepN'
p8671
I2
sg6382
g6786
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8672
I2
sg6384
g6780
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vn
sS'block_loop.thisTrialN'
p8674
I0
sg39
F3.0834814891686619
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1a\x12\x02\x17('
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g6538
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'left'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g6546
sS'block_loop.thisRepN'
p8684
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8685
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vn
sS'block_loop.thisTrialN'
p8687
I0
sg39
F2.2000622653649771
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1a\x1a\x03\xcc\xa8'
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g6660
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'left'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g6664
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g6668
sS'block_loop.thisRepN'
p8697
I2
sg6382
g6664
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8698
I2
sg6384
g6671
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vn
sS'block_loop.thisTrialN'
p8700
I0
sg39
F0.85006192324726726
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1a!\x07nX'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g6457
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'right'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6467
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g6465
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6467
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8711
I2
sg6384
g6461
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vn
sS'block_loop.thisTrialN'
p8713
I0
sg39
F0.81675936147166794
sg34
g752
(S"\x07\xdf\t\x19\x0b\x1a'\x05\x9d\x80"
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g6744
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'left'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6748
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g6752
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8724
I2
sg6384
g6755
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vn
sS'block_loop.thisTrialN'
p8726
I0
sg39
F0.70011586375494517
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1a-\x03S\x90'
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g6937
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'right'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6941
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g6945
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6941
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8737
I2
sg6384
g6948
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vn
sS'block_loop.thisTrialN'
p8739
I0
sg39
F0.95025613188408897
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1a2\x0ec\x98'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g7541
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'left'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g7359
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g7548
sS'block_loop.thisRepN'
p8749
I2
sg6382
g7359
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8750
I2
sg6384
g7353
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vn
sS'block_loop.thisTrialN'
p8752
I0
sg39
F0.71649758465082414
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1a8\x0e@p'
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g6907
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'left'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6911
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g6915
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6911
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8763
I2
sg6384
g6918
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vn
sS'block_loop.thisTrialN'
p8765
I0
sg39
F0.73349996350771107
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1b\x02\nL\xb8'
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g6491
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'left'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g6499
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8776
I2
sg6384
g6502
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vn
sS'block_loop.thisTrialN'
p8778
I0
sg39
F0.73332576873781363
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1b\x08\x06\xd2\x18'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g7405
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'right'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g7412
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8789
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vn
sS'block_loop.thisTrialN'
p8791
I0
sg39
F0.65019437969567662
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1b\x0e\x03Wx'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g6583
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'right'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g6542
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g6590
sS'block_loop.thisRepN'
p8801
I2
sg6382
g6542
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8802
I2
sg6384
g6549
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vn
sS'block_loop.thisTrialN'
p8804
I0
sg39
F1.2000981876899459
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1b\x13\r\xaf\xe8'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g6776
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'left'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6786
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g6784
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6786
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8815
I2
sg6384
g6780
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vn
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.85020675294072134
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1b\x1a\x02\x17('
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g7883
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'right'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g7018
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g7890
sS'block_loop.thisRepN'
p8827
I2
sg6382
g7018
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8828
I2
sg6384
g7025
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vn
sS'block_loop.thisTrialN'
p8830
I0
sg39
F0.8334378692024984
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1b \x00FP'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g6491
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'left'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g6499
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8841
I2
sg6384
g6502
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vn
sS'block_loop.thisTrialN'
p8843
I0
sg39
F0.76664315559992247
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1b%\r} '
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g6628
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'left'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g6635
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8854
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vn
sS'block_loop.thisTrialN'
p8856
I0
sg39
F1.3500810248015114
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1b+\n{\x98'
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g6643
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'left'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g6651
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8867
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vn
sS'block_loop.thisTrialN'
p8869
I0
sg39
F0.83346951505973266
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1b2\x01\x05\xb8'
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g6761
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'right'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g6502
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g6768
sS'block_loop.thisRepN'
p8879
I2
sg6382
g6495
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8880
I2
sg6384
g6502
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vn
sS'block_loop.thisTrialN'
p8882
I0
sg39
F0.98330923306366458
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1b7\x0e<\x88'
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g7098
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'right'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g6986
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g7105
sS'block_loop.thisRepN'
p8892
I2
sg6382
g6986
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8893
I2
sg6384
g6993
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vn
sS'block_loop.thisTrialN'
p8895
I0
sg39
F0.81679357321081625
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1c\x01\x0e\x92x'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g6457
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'right'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g6467
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g6465
sS'block_loop.thisRepN'
p8905
I2
sg6382
g6467
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8906
I2
sg6384
g6461
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vn
sS'block_loop.thisTrialN'
p8908
I0
sg39
F1.3000979596117759
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1c\x07\x0cH\x88'
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g6819
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'left'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6829
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g6827
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6829
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8919
I2
sg6384
g6823
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vn
sS'block_loop.thisTrialN'
p8921
I0
sg39
F0.66673518517654884
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1c\x0e\x02\x1b\x10'
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g6628
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'left'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g6635
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8932
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vn
sS'block_loop.thisTrialN'
p8934
I0
sg39
F1.066747102266163
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1c\x13\x0c\xb2\x00'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g7098
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'right'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6986
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g7105
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6986
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8945
I2
sg6384
g6993
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vn
sS'block_loop.thisTrialN'
p8947
I0
sg39
F0.68343364975407894
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1c\x19\x0e8\xa0'
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g6892
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'right'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6609
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g6899
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6602
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8958
I2
sg6384
g6609
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vn
sS'block_loop.thisTrialN'
p8960
I0
sg39
F0.75021667434612027
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1c\x1f\t\xcb\xd0'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g7500
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'right'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g6748
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g7507
sS'block_loop.thisRepN'
p8970
I2
sg6382
g6748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8971
I2
sg6384
g6755
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vn
sS'block_loop.thisTrialN'
p8973
I0
sg39
F0.63343718496707879
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1c%\x06\x8b\xc8'
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g7349
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'right'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g7353
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g7357
sS'block_loop.thisRepN'
p8983
I2
sg6382
g7359
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8984
I2
sg6384
g7353
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vn
sS'block_loop.thisTrialN'
p8986
I0
sg39
F0.84987318848834548
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1c+\x01g`'
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g7433
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'left'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g7440
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8997
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vn
sS'block_loop.thisTrialN'
p8999
I0
sg39
F1.1668506497953786
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1c0\x0e\xd8\xc8'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g6776
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'left'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g6786
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g6784
sS'block_loop.thisRepN'
p9009
I2
sg6382
g6786
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9010
I2
sg6384
g6780
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vn
sS'block_loop.thisTrialN'
p9012
I0
sg39
F1.6667651204479625
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1c7\x02\xc6\xf0'
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g6425
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'right'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g6433
sS'block_loop.thisRepN'
p9022
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9023
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vn
sS'block_loop.thisTrialN'
p9025
I0
sg39
F0.75022636767153017
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1d\x01\rV\x10'
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g6408
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'left'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g6416
sS'block_loop.thisRepN'
p9035
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9036
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vn
sS'block_loop.thisTrialN'
p9038
I0
sg39
F0.70011415316821513
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1d\x07\n\x19\xf0'
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g6457
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'right'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g6467
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g6465
sS'block_loop.thisRepN'
p9048
I2
sg6382
g6467
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9049
I2
sg6384
g6461
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vn
sS'block_loop.thisTrialN'
p9051
I0
sg39
F0.76677971745630202
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1d\r\x06&8'
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g6643
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'left'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g6651
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6647
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9062
I2
sg6384
g6654
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vn
sS'block_loop.thisTrialN'
p9064
I0
sg39
F0.68346158934036794
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1d\x13\x02\xe60'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g6982
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'left'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g6986
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g6990
sS'block_loop.thisRepN'
p9074
I2
sg6382
g6986
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9075
I2
sg6384
g6993
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vn
sS'block_loop.thisTrialN'
p9077
I0
sg39
F0.81680440692798584
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1d\x18\r\xfa '
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g6937
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'right'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g6941
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g6945
sS'block_loop.thisRepN'
p9087
I2
sg6382
g6941
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9088
I2
sg6384
g6948
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vn
sS'block_loop.thisTrialN'
p9090
I0
sg39
F1.0167697390324975
sg34
g752
(S'\x07\xdf\t\x19\x0b\x1d\x1e\x0b\xb00'
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vr
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vn
sa(dp9098
g63
g64
sg43
I31
sg56
Vr
sg57
Vn
sg42
I569
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp9099
g63
g64
sg43
I31
sg55
g11
sg56
Vr
sg45
F2.3500000000000001
sg42
I569
sg49
F0.01
sg57
Vn
sg58
g62
sg44
I00
sg48
I25
sg47
g488
sg51
F30.690000000000001
sg46
F0
sg65
g66
sg67
g68
sg50
I0
sg69
Vn
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I80790352
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\xd7#=33\xf3?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\xd7#>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xecQ8>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S'\xb6\xf3\xfd?\xee|\x17@\xc9v\x06@B`U@\xe9&\x11?\xee|G@\xc5 \xa0?\xb6\xf3\xfd?T\xe3m@\xfc\xa9)@\xdb\xf9\xee?\xb6\xf3\xdd?\xa8\xc6\xbb?\x83\xc0\xea?B`\x15@\xa8\xc6\x0b@\xf8S\xf3?\xdb\xf9.@\x83\xc0\xca?\xa8\xc6\x0b@\xee|\x17@u\x93\x88@\xee|\x07@\xa8\xc6\xfb?u\x93\xc8?\xf8S\xf3?\x10X-A^\xba\xf9?b\x10\x10@\xa8\xc6\xfb?B`\x15@T\xe3\r@b\x10 @\x87\x16\xd9@T\xe3\r@B`\x15@\xdb\xf9N@\x87\x16\x01@u\x93\xc8?\x1dZ\xe4?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xb8A\x00\x00\xa8A\x00\x00pA\x00\x00\xc0A\x00\x000A\x00\x00\xe0A\x00\x00\x88A\x00\x00\xe0@\x00\x00@A\x00\x00\x00@\x00\x00\x00B\x00\x00\x18B\x00\x00\xf8A\x00\x00\x80A\x00\x00\xc8A\x00\x00`A\x00\x00\xd0A\x00\x00\x98A\x00\x00\xf0A\x00\x00\xa0A\x00\x00\x80@\x00\x00\xb0A\x00\x00\x14B\x00\x00\xc0@\x00\x00\x90A\x00\x00\x1cB\x00\x00\x00\x00\x00\x00\xa0@\x00\x00\x80?\x00\x00\x00A\x00\x00 A\x00\x00\xe8A\x00\x00\x04B\x00\x00@@\x00\x00\x08B\x00\x00PA\x00\x00\xd8A\x00\x00\x10A\x00\x00\x10B\x00\x00\x0cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xc0?33\xf3?\x9a\x99\xd9?ff\xe6?33\xf3?33\xf3?\x00\x00\x80?\x00\x00\xc0?33\xf3?\x00\x00\x00@ff\xa6?\x9a\x99\x99?\x9a\x99\x99?\x9a\x99\x99?\x9a\x99\xd9?\xcd\xcc\xcc?\x00\x00\xc0?\x00\x00\xc0?33\xb3?\x00\x00\x00@\x9a\x99\x99?\xcd\xcc\x8c?ff\xa6?\x00\x00\xc0?\x00\x00\x80?\xcd\xcc\xcc?\xcd\xcc\x8c?33\xb3?\xcd\xcc\x8c?ff\xa6?33\xf3?\xcd\xcc\xcc?ff\xa6?33\xf3?\xcd\xcc\xcc?\x9a\x99\x99?ff\xe6?\x00\x00\xc0?\x00\x00\xc0?\x9a\x99\x99?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'\x1a\x00\x00\x00\x1c\x00\x00\x00\t\x00\x00\x00!\x00\x00\x00\x14\x00\x00\x00\x1b\x00\x00\x00\x17\x00\x00\x00\x07\x00\x00\x00\x1d\x00\x00\x00%\x00\x00\x00\x1e\x00\x00\x00\x04\x00\x00\x00\x08\x00\x00\x00#\x00\x00\x00\x0f\x00\x00\x00\x02\x00\x00\x00\r\x00\x00\x00\x06\x00\x00\x00\x18\x00\x00\x00\x11\x00\x00\x00\x13\x00\x00\x00\x01\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x0e\x00\x00\x00\x10\x00\x00\x00$\x00\x00\x00\x05\x00\x00\x00\x1f\x00\x00\x00\x12\x00\x00\x00\x0c\x00\x00\x00\n\x00\x00\x00 \x00\x00\x00"\x00\x00\x00\'\x00\x00\x00&\x00\x00\x00\x16\x00\x00\x00\x0b\x00\x00\x00\x19\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g263
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g249
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g207
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g270
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g179
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g298
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g221
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g151
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g186
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g116
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g326
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g368
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g319
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g214
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g277
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g200
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g284
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g235
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g312
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g242
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g130
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g256
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g361
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g144
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g228
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g375
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g102
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g137
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g109
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g158
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g172
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g305
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g333
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g123
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g340
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g193
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g291
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g165
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g354
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g347
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I80790352
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xc0@\x00\x00\xc0@\x9a\x99\x99@\x00\x00\xc0@fff@\x00\x00\x00@\x00\x00\xb0@\xcd\xcc,@\x00\x00\xc0@\x00\x00\x80@33\x13@33\xb3?\x00\x00\xc0@\x9a\x99y@\x00\x00@@\xcd\xcc,@\x00\x00\xc0@\x00\x00\xc0@ff\xa6@33\x13@\x9a\x99\x89@\xcd\xccl@\x00\x00\xc0@\x9a\x99\x19@\x9a\x99\xa9@33S@ff\xa6@ff\xa6@\x00\x00\xc0@\xcd\xcc\x9c@\x9a\x99\x19@\x00\x00\xc0@\x00\x00\x80@33\x83@\x00\x00\xa0@\x00\x00 @\x00\x00\xc0@\xcd\xcc,@333@\x9a\x99\xa9@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S'\x02\xac\xca?\x97\x8a\x88?\xf4\x88\x18@\xcb\x02\xc0?\xc1\x8a8@\xfa\xbb\x93@\xe8!\xc2?K\x88\xa8@=\xdf\x1d@M\x11\x81@\x8a\x13A@\xe7\x11Q@R3\x93?Mx\'@\xdf\xff\xaf@N3\x83@Ai\xe6?\x85E\xa4?F?4@\x1c\xf1n@\x89V\x15@\x88\xb5\xbb?\xa7z\xb7?tV\x15@\xffW%@L\xad\xca?\xe9h\xe6?\x8bV\x95?8G\xa4?vV\x15@\xc2x\x17@g8s?"k\xa6?\xf3\xed\xa6@\x8a[\xb5?n\xad\xaa?\xc26\x93?T\xbf{? \xf0\xee?\xda\xab\xea?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80@33S@\xcd\xcc,@33S@ff\x86@333@\xcd\xccL@\x9a\x99y@fff@fff@\x00\x00`@33S@\x9a\x999@\x9a\x99\x89@\x9a\x99Y@33S@\x9a\x99\x89@ff\x86@\xcd\xcc,@\x00\x00@@\x00\x00`@\xcd\xccL@ffF@\x00\x00\x80@33s@\x9a\x99y@\xcd\xcc,@\x00\x00\x80@\xcd\xccL@\x9a\x999@33s@333@\x00\x00\x80@ffF@33S@\x9a\x999@\xcd\xccL@\xcd\xccL@\x00\x00@@ff\x86@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\x00\xf5i\r\xc0f\x96\r`\x8f\x94\r`\xc0g\r`\x8c\x94\r g\x96\r\x80b\x96\r\xc0e\x96\r\x80\xc0g\r\xe0?g\r\xc0\xc0g\r\xa0\x8f\x94\r@\tg\x04@\x8f\x94\r\x80:g\r\xe0>g\r\x80?g\r\xc0\x8d\x94\r ?g\r\xe0`\x96\r\x00f\x96\r\x80`\x96\r@[h\r\x00Sh\r\x80!i\x04\x00!i\x04\x80"i\x04\xa0!i\x04\xe0!i\x04@!i\x04@"i\x04\xc0!i\x04\xe0"i\x04 #i\x04\x80 i\x04` i\x04 !i\x04`"i\x04\xa0"i\x04@#i\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S'\xc5 \xe0?\xe9&\xb1?\xaa\xf1\x9e@\x83\xc0\xca?\x87\x16\x01@\x87\x16\x01@+\x87\xe6?\x83\xc0\xaa?\x83\xc0j?B`E@u\x93\xc8?\x83\xc0j?\xf8S\x93?\xa8\xc6+@\x91\xed\xac?P\x8d\x97?m\xe7{?\x1dZ\x84?\x0e-\xc2?P\x8d\xb7?\xa8\xc6\x9b?b\x10\x10@^\xba\x99?\xdb\xf9\xee?\xdb\xf9\x8e?\xfc\xa9\t@\x1dZ\xa4?+\x87\xc6?B`\x95?\xdb\xf9\xee?^\xba\xd9?\xe9&\xb1?/\xdd\x1c@\xdb\xf9.@^\xba\x99?\xf8S\xb3?V\x0eM?\xe9&\xb1?\xdb\xf9\x0e@\xe9&\xb1?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I80790352
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S' \xe6h\x04\xd0\xbe\xd2\r\x80\xe6h\x04\xf8\xbe\xd2\r \xbf\xd2\r\xf0\xe5h\x04H\xbf\xd2\r\x80\xe6h\x04H\xbf\xd2\r \xbf\xd2\r\xd0\xbe\xd2\r\xf8\xbe\xd2\r\xa8\xbe\xd2\rP\xe6h\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S'h\xc9K\x02\xa8k6\x04\xb8w\x97\x04\xf0\x85\x96\x04P\x89\x96\x048\x80\x96\x04\xd8\x88\x96\x04X\x81\x96\x04\xd8\x8e\x96\x048\x83\x96\x04\xb8\x84\x96\x04\xe0\x83\x96\x04\xf8\x8c\x96\x04\x10\x8a\x96\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g777
sg82
g778
sg83
g782
sg84
g783
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g788
sg82
g789
sg83
g793
sg84
g794
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g799
sg82
g800
sg83
g804
sg84
g805
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g810
sg82
g811
sg83
g815
sg84
g816
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g766
sg82
g821
sg83
g771
sg84
g825
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g810
sg82
g830
sg83
g815
sg84
g834
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g788
sg82
g839
sg83
g793
sg84
g843
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g755
sg82
g848
sg83
g760
sg84
g852
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g777
sg82
g857
sg83
g782
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g743
sg82
g866
sg83
g748
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g799
sg82
g875
sg83
g804
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I80790352
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I80790352
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S'\xe0 \xd5\rp\xdf\xd4\r\xe0\xeaf\x04\xc0\xe3f\x04\xc0\xdf\xd4\r 0\xd5\rH0\xd5\r\xc0\xe3f\x04p0\xd5\r\xe0 \xd5\r\x80\xb8\x96\r\x98\xdf\xd4\r\x10!\xd5\rp0\xd5\r@!\xd5\rp\xdf\xd4\r\x08\xe6\xd4\r\x80\xb8\x96\r@\xe6\xd4\r\x80\xb8\x96\r\x980\xd5\rp!\xd5\r\x80\xb8\x96\r\x08\xe6\xd4\r 0\xd5\rp!\xd5\r\xc0\xdf\xd4\r\x80\xb8\x96\r\xc0\xe3f\x04p!\xd5\r\xc00\xd5\rH0\xd5\r\xa0!\xd5\r\x10!\xd5\r\x980\xd5\r\xe0 \xd5\r\xe80\xd5\r\xc00\xd5\r\xc0\xeaf\x04\x98\xdf\xd4\r\x101\xd5\r 0\xd5\r\x08\xe6\xd4\r@!\xd5\r\xe80\xd5\r\xe0 \xd5\r\xe0\xb9\x96\r\xe0 \xd5\r\xe8\xe6\xd4\r\x08\xe6\xd4\r`1\xd5\r\xe80\xd5\r\xc0\xeaf\x04\x80\xb8\x96\r\x98\xdf\xd4\r\xd0!\xd5\r\x881\xd5\rp\xdf\xd4\r@\xe6\xd4\r\x101\xd5\r\xb0\xe6\xd4\rp0\xd5\r\xc00\xd5\r\x80\xb8\x96\rp0\xd5\rp\xdf\xd4\r\xc00\xd5\r\xe0 \xd5\r\x002\xd5\r@!\xd5\r\x08\xe6\xd4\rp!\xd5\r\x98\xdf\xd4\r\x10!\xd5\r\x101\xd5\r\x00"\xd5\r\x980\xd5\rp0\xd5\r@\xe6\xd4\r\x002\xd5\r\x980\xd5\r\xe8\xe6\xd4\rp\xdf\xd4\r\xa0\xe3f\x04 0\xd5\r\x08\xe6\xd4\r\x10!\xd5\r@\xe6\xd4\r\x881\xd5\r\x80\xb8\x96\r\x90"\xd5\r\x10!\xd5\r\xe0\xb9\x96\r\xc0\xeaf\x04 0\xd5\r\xc00\xd5\r\x08\xe6\xd4\r0"\xd5\r\x90"\xd5\rH0\xd5\r\xe80\xd5\r\xc00\xd5\rp!\xd5\r\xc0\xdf\xd4\r`"\xd5\r\xa0!\xd5\r@!\xd5\r\x980\xd5\rH0\xd5\r\xe80\xd5\r\xe0\xb9\x96\r\xa0!\xd5\r\x980\xd5\rH0\xd5\r\x08\xe6\xd4\rp0\xd5\r@!\xd5\r 0\xd5\r\xf0"\xd5\rH0\xd5\r@\xe6\xd4\r\xa0!\xd5\rp!\xd5\r\x980\xd5\rH0\xd5\r\x101\xd5\r@\xe6\xd4\r\x002\xd5\r\xc0\xdf\xd4\r\xe0\xeaf\x04\xc00\xd5\r\xe80\xd5\r@!\xd5\r\x10!\xd5\r\x98\xdf\xd4\rp!\xd5\r\xa0!\xd5\r\xc0\xe3f\x04\xe0 \xd5\r\x10!\xd5\r\xe0\xeaf\x04\x10!\xd5\r\xc0"\xd5\r\xc0\xeaf\x04@!\xd5\r\xe80\xd5\r 0\xd5\rX\xe7\xd4\rp\xdf\xd4\r\x101\xd5\r\xe0\xb9\x96\r@!\xd5\r\xd0!\xd5\r\xc00\xd5\r\xe0 \xd5\r \xe7\xd4\r\xc0\xdf\xd4\r\xa0!\xd5\r\xf0"\xd5\r\xc0\xe3f\x04\x00"\xd5\r\xc0\xeaf\x04\x00"\xd5\r\xa0!\xd5\rp\xdf\xd4\rX\xe7\xd4\r\xc0\xdf\xd4\rp\xdf\xd4\r@\xe6\xd4\r\x80\xb8\x96\rp\xdf\xd4\rp0\xd5\r\xc0\xeaf\x04H0\xd5\r\xc0\xdf\xd4\rx\xe6\xd4\r\xc00\xd5\r\xa0!\xd5\r\x08\xe6\xd4\rp!\xd5\r\xe0\xeaf\x04H0\xd5\r\xc00\xd5\r\x08\xe6\xd4\r`"\xd5\rX\xe7\xd4\r\xa0!\xd5\r\xe0\xeaf\x04\x101\xd5\r\xe80\xd5\rx\xe6\xd4\r@\xe6\xd4\r\xc0\xeaf\x04x\xe6\xd4\r\x101\xd5\r\x980\xd5\r\xe0\xb9\x96\r\xc0\xdf\xd4\r\x10!\xd5\rp!\xd5\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S'\x00\x0cg\x04\xa0dh\x04\x00eh\x04\x00nh\x04\xa0oh\x04\x80oh\x04@hh\x04`oh\x04\xa0\xc1g\r\xc0ch\x04\x80fh\x04 fh\x04\xe0dh\x04@eh\x04 dh\x04\xe0lh\x04`hh\x04`dh\x04\xc0oh\x04`ih\x04\xc0hh\x04@lh\x04\xa0nh\x04 oh\x04 lh\x04\xa0hh\x04@jh\x04\x80mh\x04 kh\x04\xc0jh\x04\x00lh\x04\xa0kh\x04\x00ih\x04@ih\x04\x80ih\x04\xe0oh\x04\xc0ih\x04`jh\x04\x00kh\x04@fh\x04 ch\x04\x80jh\x04@kh\x04@ch\x04 ih\x04\xe0kh\x04\xa0jh\x04\xa0`h\x04`fh\x04\xa0ih\x04\x80lh\x04@oh\x04\xc0kh\x04\xe0ih\x04\x00jh\x04\x80nh\x04\xe0jh\x04`kh\x04`mh\x04\xe0\xe2l\r\x00\xe3l\r`\xe2l\r \xe7l\r \xe0l\r\x80\xe3l\r`\xe7l\r\x80\xe7l\r\xa0\xe7l\r\x00\xebl\r\xe0\xe7l\r\xe0\xe6l\r\x80\xebl\r@\xebl\r\x80\xe2l\r\x00\xecl\r`\xecl\r@\xe3l\r\x80\xe6l\r\x80\xecl\r@\xedl\r \xedl\r\xc0\xe2l\r\xc0\xebl\r\xa0\xe3l\r`\xe6l\r`\xedl\r\xe0\xebl\r\xa0\xecl\r@\xe7l\r\xa0\xe6l\r\xe0\xefl\r@\xe0l\r\xa0\xe2l\r\x00\xe6l\r\xc0\xe7l\r \xebl\r\x00\xe7l\r \tg\x04 \xe6l\r\xa02\xa0\x04@2\xa0\x04\xe02\xa0\x04\x003\xa0\x04\x802\xa0\x04\xe00\xa0\x04 3\xa0\x04@3\xa0\x04`3\xa0\x04\x803\xa0\x04\xe03\xa0\x04\x004\xa0\x04 2\xa0\x04@1\xa0\x04 4\xa0\x04@4\xa0\x04\xa04\xa0\x04\x804\xa0\x04\xe04\xa0\x04\x005\xa0\x04 5\xa0\x04@5\xa0\x04 1\xa0\x04\xa00\xa0\x04`5\xa0\x04\x805\xa0\x04\xa05\xa0\x04\x006\xa0\x04 "i\x04\xa01\xa0\x04\xc03\xa0\x04`4\xa0\x04\xc05\xa0\x04`1\xa0\x04`2\xa0\x04\xe06\xa0\x04\xe01\xa0\x04@7\xa0\x04\xc00\xa0\x04\xc02\xa0\x04\xa07\xa0\x04\xe05\xa0\x04\xc04\xa0\x04`7\xa0\x04\x002\xa0\x04\x807\xa0\x04`8\xa0\x04\xc07\xa0\x04\xa03\xa0\x04@\xe6l\r\xe08\xa0\x04\x806\xa0\x04\xa06\xa0\x04\xa08\xa0\x04\x808\xa0\x04\xc06\xa0\x04@9\xa0\x04@8\xa0\x04 7\xa0\x04\x009\xa0\x04\x00:\xa0\x04\xa09\xa0\x04`:\xa0\x04\x80:\xa0\x04\xe09\xa0\x04 ;\xa0\x04@6\xa0\x04\xc09\xa0\x04\xe0:\xa0\x04\x801\xa0\x04@:\xa0\x04\xc0:\xa0\x04`6\xa0\x04 8\xa0\x04`9\xa0\x04\x001\xa0\x04\xe07\xa0\x04@;\xa0\x04`;\xa0\x04\xc08\xa0\x04\x007\xa0\x04\x008\xa0\x04\xa0<\xa0\x04 <\xa0\x04\x80<\xa0\x04\xe0<\xa0\x04 :\xa0\x04\xa0;\xa0\x04\xe0;\xa0\x04\x80=\xa0\x04@=\xa0\x04\xc0=\xa0\x04@<\xa0\x04 >\xa0\x04\xc0<\xa0\x04 9\xa0\x04\x00>\xa0\x04`=\xa0\x04 6\xa0\x04\xa0=\xa0\x04\xe0=\xa0\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S"\x15\xdem@o\xf1\x0e@v\x14\x91?\x12G\xa4?\x80|\x97?\xec\xcf\x8c?j\x9e\xd9?J7\x93?>v\x97?&\xe1\xdd?\x1f\x8c\x88?\xa2\xaf\x8a?\x04\xb2j?\xee\x83w?~\xcf\xac?\xe2z\x97?R\xba\xaa?6y\xd7?\xd8\xbe\x9b?\xa1\xf1\x8e?\xf0\xb8\x9b?\xe6\xe3\x9d?\xee\xb2j?U\xee\xae?\x08j\x86?\xfbmf?\x94\xe4\x9d?\x8a\xad\x8a?\xd3\xbe\x9b?y~w?53\x8b@)m\x86?s6\xb3?\x89\xf4n?Qr\x97?i6\xb3?99\xf3?\xc3z\x97?*z\xf7?\x85z\x97?\xa9\xd0\xec?\x10>s?\xa1\x88\xa8?-X\x95?mx\x17@\x06\xf2\xce?\xd5\xe1\x8c?\x99\xe0\xdd?\xb7\xcf\xec?\xb0\xf0\x8e?\xa9z\x97?\xb1\xc1\x9b?-{\x97?w\xad\x8a?pV\x05@n4\x93?\xfa\x82w?}i\xa6?\x14\xbe\x1b@\r\xf6n?\xcb\xad\xaa?\xdf\xf5\x8e?'\xd4L?a$\xc2?57\x93?\xd5\x02\xc0?\xde\x1fQ?M6\xd3?\xf1[U?y[U?\xab\xbd{?\xb2\xdaL?\xf6$\xc2?\x816\x93?j4\x13@\xbc\xb1j?\xaa5\x93?4\x8f\x88?\xae\xcf\xcc?\x1b\xd5L?\xc7\xfd\x7f?\xd1\xb1\n@\x94nf?t\x13\xf1?\xd8G\x84?\xebS\xb5?b\x8f\xc8?54\xb3?\xfdy\xb7?|\xad\x8a?\xf0\xa4\x8a?\x8e~\xb7?\x13Y\x95?\x1cAs?\x16\xc1{?[S\x95?\x03\xbf\x9b?\xac\x02\xc0?z?\x84?/\xf1\x8e?)D\xa4@\x8aAs?\x0f*\x82?\xc8\xd3L?\xdc\x8b\x88?\xedyG@\xef\x02\x00@;df?\x06V5@\x1e\x01\x00@oG\x84?99\xb3?\xbd\\f?K\xbe\xfb?\xffdf?\xd4F\xc4?\xd1(\x82?\xd2%\x82?\xc5h\xc6?\xa1\x14\xb1?\xe0G\x84?\xb8\xa9\xb9?K\xd3L?\x98\xd7\xdd?\x17%\xa2?\xb2J\xa4?\xf7m\x86?\x1c\xb9{?%\xf2\xae?)\xe4]?y~7?\xba9\xd3?[\x8fH?1G\xc4?\xfd5\x03@\x17\xd0\xcc?\xce\xf5\xae?\x9b\xb1j?\xbb\xf6\x8e?\xf6\xad\x8a?\xc7\xf6.?o\xf5.?\xa6\x857?\xc4\xe0\xbd?\x88\x07@?\x85\xb9\xbb?\xd2\x06@?\xc0\xb9j?e\xdc\x9d?\x869s?^J\xa4?\xbf\x06@?\xbb\x17\xd1?\x81\xc4;?;&\x82?\x8b\x89\x08@W\x14\x91?M\xa0\x99?D\xbe\xdb?\xc1\x9c\xb9?\xf4\xad\xaa?\xe4F\xe4?w\x01\x8f?J\x8a\x88?\xb8mf??OD?\xf1\xd2L?vG\x84? ~\x97?\xbd\xfan?\xe8\xa6Y?\xc3\xa0Y?Ztf?\xea7\xf3?\x8b\x8b\x88?3JD?\xaa\xc3;?2\xc9{?-\xac\xaa?\xd4\xd2L?\xa3lf?\xba\xac\xea?\xd3\xc2;?\xa7\xc7j?=\x7f7?\x996\x93?G)b?\x85\xb0*?)\xc3;?\xcfJ\xc4?\xb8\x05@?\xe0\x7f7?\x90\x8b\xa8?\x96\x07@?E\xb1j?\xa1\xa7j?R\x14\xd1?qh\xa6?\xe3\x02\x80?\xd8\xf5.?"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S'\x18\x8e\x96\x04\x10\x87\x96\x048\x10\xc0\x04\xe0\x16\xc0\x04\xe0\x1f\xc0\x04\xa0\x1a\xc0\x04`\x12\xc0\x04@\x17\xc0\x04(\x14\xc0\x04\xd0\x17\xc0\x04\xd0\x1a\xc0\x04P\x1c\xc0\x04@\x14\xc0\x048\x1f\xc0\x04\xd8\x18\xc0\x04\x18\x15\xc0\x04 \x1c\xc0\x04\xb0\x10\xc0\x04\x10\x1a\xc0\x04\x10\x11\xc0\x04 \x19\xc0\x04x\x12\xc0\x04P\x19\xc0\x04\x80\x16\xc0\x04\xc0\x12\xc0\x04\xa0\x11\xc0\x04`\x1b\xc0\x04(\x1d\xc0\x04\xe8\x14\xc0\x04\xc8\x1f\xc0\x04\x00\x1e\xc0\x04\x88\x1a\xc0\x04\xb0\x1f\xc0\x04\xe0\x13\xc0\x04\xc8\x10\xc0\x04\x08\x13\xc0\x04\x18\x1e\xc0\x04(\x1a\xc0\x04@\x1a\xc0\x04\xc8\x19\xc0\x04h\x16\xc0\x04\x00\x1b\xc0\x04X\x1a\xc0\x04h\x10\xc0\x04\xb8\x1a\xc0\x04\x98\x10\xc0\x04\xb8\x11\xc0\x04\x90\x18\xc0\x04h\x1c\xc0\x04\x88\x17\xc0\x04\x88\x1d\xc0\x04\xc0\x1b\xc0\x040\x18\xc0\x040\x1b\xc0\x04X\x11\xc0\x04\xb8\x1d\xc0\x04(\x11\xc0\x048\x13\xc0\x04\xe0\x19\xc0\x04\x00\x18\xc0\x04H\x15\xc0\x04\xc8\x16\xc0\x04\x80\x10\xc0\x04x\x1e\xc0\x04\xc8\x13\xc0\x04h\x19\xc0\x04`\x1e\xc0\x04\xb8\x14\xc0\x04p\x17\xc0\x04\xb0\x1c\xc0\x04\x98\x1f\xc0\x040\x1e\xc0\x040\x15\xc0\x04\xd8\x1e\xc0\x04\x90\x12\xc0\x04\x90\x1b\xc0\x04X\x14\xc0\x04\xb0\x19\xc0\x04 \x1f\xc0\x048\x1c\xc0\x04\x18\x1b\xc0\x04\x10\x14\xc0\x04\xf8\x16\xc0\x048\x16\xc0\x04\xa8\x1e\xc0\x04X\x17\xc0\x04@\x1d\xc0\x04\xf0\x12\xc0\x04 \x13\xc0\x04\xa0\x17\xc0\x04\xc0\x1e\xc0\x04P\x16\xc0\x04x\x1b\xc0\x04x\x18\xc0\x04\x08\x19\xc0\x04\xc8\x1c\xc0\x04\xf8\x1c\xc0\x04\xd0\x14\xc0\x04\x80\x1c\xc0\x04p\x1a\xc0\x04\x18\x12\xc0\x04\xf0\x1b\xc0\x04\xa8\x18\xc0\x04\xf0\x18\xc0\x04\x98\x13\xc0\x04p\x1d\xc0\x04\x90\x1e\xc0\x04\x88\x11\xc0\x04h\x13\xc0\x04\x08\x1c\xc0\x04\xe0\x1c\xc0\x04\xd8\x1b\xc0\x04\xd0\x11\xc0\x04H\x1e\xc0\x04\xe8\x17\xc0\x04\xa8\x1b\xc0\x04P\x1f\xc0\x04P\x10\xc0\x04h\x1f\xc0\x04\x80\x19\xc0\x04H\x12\xc0\x04\x98\x1c\xc0\x04\xc0\x18\xc0\x04X\x1d\xc0\x04\xa0\x1d\xc0\x04\xf8\x10\xc0\x04\x00\x15\xc0\x04H\x18\xc0\x04(\x17\xc0\x04P\x13\xc0\x04\xd8\x12\xc0\x04\x80\x1f\xc0\x04\xf8\x13\xc0\x04`\x18\xc0\x04\xf0\x1e\xc0\x04\xf8\x19\xc0\x04@\xad\xc0\x04\xf8\xc0\x96\x04\xb0\xcf\x96\x04P\xc9\x96\x04@\xc7\x96\x040\xce\x96\x04\x08\xc9\x96\x040\xc2\x96\x04\x80\xcf\x96\x048\xc9\x96\x04h\xc6\x96\x04\xd0\xc4\x96\x04\xc0\xce\x96\x04X\xc7\x96\x04\x18\xce\x96\x04\xc8\xc3\x96\x04P\xcf\x96\x04 \xc9\x96\x04\xe0\xc3\x96\x04 \xcf\x96\x04\xf0\xc2\x96\x04\x10\xc4\x96\x04\xa0\xc1\x96\x04\xc0\xc8\x96\x04P\xc6\x96\x04\x98\xc6\x96\x04@\xca\x96\x04(\xcd\x96\x04`\xcb\x96\x04x\xc5\x96\x04\x88\xca\x96\x04h\xcf\x96\x04X\xca\x96\x04\xe8\xcd\x96\x048\xc0\x96\x04\xa0\xca\x96\x04\xc0\xc2\x96\x04p\xca\x96\x04\x98\xc9\x96\x04\xb8\xc1\x96\x04x\xce\x96\x04 \xc0\x96\x04\xc8\xcf\x96\x04\x88\xc7\x96\x04\xa8\xc8\x96\x04\xd0\xc7\x96\x040\xc5\x96\x04\x80\xc0\x96\x04X\xcd\x96\x04H\xc8\x96\x04\xf8\xcc\x96\x04\x18\xc2\x96\x04 \xc6\x96\x04\xe8\x1d\xc0\x040\x12\xc0\x04H\x1b\xc0\x04p\x14\xc0\x04\x08\x1f\xc0\x04\xe8\x11\xc0\x04\x00\x12\xc0\x04\xb0\x16\xc0\x04@\x11\xc0\x04\xe0\x10\xc0\x04\xb8\x17\xc0\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g942
sg894
g932
sg908
g936
sg903
g940
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g959
sg894
g949
sg908
g953
sg903
g957
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g959
sg894
g1017
sg908
g953
sg903
g1024
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g899
sg894
g1049
sg908
g909
sg903
g1056
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g1068
sg894
g1064
sg908
g1075
sg903
g1072
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g959
sg894
g1017
sg908
g953
sg903
g1024
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g1098
sg894
g1094
sg908
g1105
sg903
g1102
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g1128
sg894
g1124
sg908
g1135
sg903
g1132
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g1158
sg894
g1154
sg908
g1165
sg903
g1162
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g1068
sg894
g1171
sg908
g1075
sg903
g1178
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g1190
sg894
g1186
sg908
g1197
sg903
g1194
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g1068
sg894
g1171
sg908
g1075
sg903
g1178
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g1220
sg894
g1216
sg908
g1227
sg903
g1224
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g1237
sg894
g1233
sg908
g1244
sg903
g1241
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g1068
sg894
g1064
sg908
g1075
sg903
g1072
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g1158
sg894
g1154
sg908
g1165
sg903
g1162
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g987
sg894
g1276
sg908
g994
sg903
g1283
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g1237
sg894
g1291
sg908
g1244
sg903
g1298
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g970
sg894
g1306
sg908
g977
sg903
g1313
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g1068
sg894
g1171
sg908
g1075
sg903
g1178
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g959
sg894
g1017
sg908
g953
sg903
g1024
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g1237
sg894
g1291
sg908
g1244
sg903
g1298
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g1364
sg894
g1360
sg908
g1371
sg903
g1368
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g1004
sg894
g1377
sg908
g1011
sg903
g1384
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g1396
sg894
g1392
sg908
g1403
sg903
g1400
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g1098
sg894
g1094
sg908
g1105
sg903
g1102
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g1220
sg894
g1216
sg908
g1227
sg903
g1224
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g1452
sg894
g1448
sg908
g1459
sg903
g1456
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g1364
sg894
g1360
sg908
g1371
sg903
g1368
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g1482
sg894
g1478
sg908
g1489
sg903
g1486
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g959
sg894
g1017
sg908
g953
sg903
g1024
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g1512
sg894
g1508
sg908
g1519
sg903
g1516
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g987
sg894
g1276
sg908
g994
sg903
g1283
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g1158
sg894
g1538
sg908
g1165
sg903
g1545
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g1128
sg894
g1553
sg908
g1135
sg903
g1560
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g1452
sg894
g1448
sg908
g1459
sg903
g1456
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g942
sg894
g1594
sg908
g936
sg903
g1601
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g899
sg894
g1049
sg908
g909
sg903
g1056
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g1190
sg894
g1622
sg908
g1197
sg903
g1629
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g1158
sg894
g1538
sg908
g1165
sg903
g1545
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g1452
sg894
g1663
sg908
g1459
sg903
g1670
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g1482
sg894
g1478
sg908
g1489
sg903
g1486
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g1068
sg894
g1171
sg908
g1075
sg903
g1178
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g959
sg894
g949
sg908
g953
sg903
g957
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g899
sg894
g1049
sg908
g909
sg903
g1056
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g970
sg894
g1306
sg908
g977
sg903
g1313
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g919
sg894
g1743
sg908
g926
sg903
g1750
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g1190
sg894
g1622
sg908
g1197
sg903
g1629
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g1512
sg894
g1508
sg908
g1519
sg903
g1516
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g1068
sg894
g1064
sg908
g1075
sg903
g1072
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g1364
sg894
g1810
sg908
g1371
sg903
g1817
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g1068
sg894
g1064
sg908
g1075
sg903
g1072
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g1036
sg894
g1838
sg908
g1043
sg903
g1845
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g1364
sg894
g1810
sg908
g1371
sg903
g1817
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g1512
sg894
g1892
sg908
g1519
sg903
g1899
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g1128
sg894
g1553
sg908
g1135
sg903
g1560
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g1158
sg894
g1538
sg908
g1165
sg903
g1545
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g1237
sg894
g1233
sg908
g1244
sg903
g1241
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g959
sg894
g949
sg908
g953
sg903
g957
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g1098
sg894
g1959
sg908
g1105
sg903
g1966
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g1512
sg894
g1508
sg908
g1519
sg903
g1516
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g1036
sg894
g1838
sg908
g1043
sg903
g1845
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g1220
sg894
g1216
sg908
g1227
sg903
g1224
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g1190
sg894
g1622
sg908
g1197
sg903
g1629
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g1512
sg894
g1892
sg908
g1519
sg903
g1899
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g1220
sg894
g2052
sg908
g1227
sg903
g2059
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g1190
sg894
g1186
sg908
g1197
sg903
g1194
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g919
sg894
g1743
sg908
g926
sg903
g1750
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g1004
sg894
g1377
sg908
g1011
sg903
g1384
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g987
sg894
g1276
sg908
g994
sg903
g1283
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g1158
sg894
g1154
sg908
g1165
sg903
g1162
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g1098
sg894
g1094
sg908
g1105
sg903
g1102
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g1190
sg894
g1186
sg908
g1197
sg903
g1194
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g1068
sg894
g1171
sg908
g1075
sg903
g1178
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g1220
sg894
g2052
sg908
g1227
sg903
g2059
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g1098
sg894
g1959
sg908
g1105
sg903
g1966
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g942
sg894
g1594
sg908
g936
sg903
g1601
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g1482
sg894
g2223
sg908
g1489
sg903
g2230
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g987
sg894
g1276
sg908
g994
sg903
g1283
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g1364
sg894
g1810
sg908
g1371
sg903
g1817
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g1158
sg894
g1154
sg908
g1165
sg903
g1162
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g1098
sg894
g1094
sg908
g1105
sg903
g1102
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g1220
sg894
g1216
sg908
g1227
sg903
g1224
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g1452
sg894
g1663
sg908
g1459
sg903
g1670
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g1364
sg894
g1360
sg908
g1371
sg903
g1368
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g1237
sg894
g1233
sg908
g1244
sg903
g1241
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g970
sg894
g1306
sg908
g977
sg903
g1313
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g1128
sg894
g1553
sg908
g1135
sg903
g1560
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g1396
sg894
g2381
sg908
g1403
sg903
g2388
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g1128
sg894
g1553
sg908
g1135
sg903
g1560
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g1220
sg894
g1216
sg908
g1227
sg903
g1224
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g1004
sg894
g1377
sg908
g1011
sg903
g1384
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g1452
sg894
g1663
sg908
g1459
sg903
g1670
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g942
sg894
g1594
sg908
g936
sg903
g1601
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g1396
sg894
g2381
sg908
g1403
sg903
g2388
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g1220
sg894
g2052
sg908
g1227
sg903
g2059
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g1158
sg894
g1538
sg908
g1165
sg903
g1545
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g1128
sg894
g1124
sg908
g1135
sg903
g1132
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g1452
sg894
g1448
sg908
g1459
sg903
g1456
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g1004
sg894
g1377
sg908
g1011
sg903
g1384
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g1190
sg894
g1186
sg908
g1197
sg903
g1194
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g1396
sg894
g2381
sg908
g1403
sg903
g2388
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1237
sg894
g1233
sg908
g1244
sg903
g1241
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g1220
sg894
g2052
sg908
g1227
sg903
g2059
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g1512
sg894
g1508
sg908
g1519
sg903
g1516
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g1190
sg894
g1186
sg908
g1197
sg903
g1194
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g1512
sg894
g1892
sg908
g1519
sg903
g1899
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g942
sg894
g1594
sg908
g936
sg903
g1601
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g1364
sg894
g1810
sg908
g1371
sg903
g1817
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g1452
sg894
g1448
sg908
g1459
sg903
g1456
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g1128
sg894
g1124
sg908
g1135
sg903
g1132
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g1098
sg894
g1959
sg908
g1105
sg903
g1966
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g959
sg894
g949
sg908
g953
sg903
g957
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g1237
sg894
g1291
sg908
g1244
sg903
g1298
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g1396
sg894
g1392
sg908
g1403
sg903
g1400
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g959
sg894
g949
sg908
g953
sg903
g957
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g899
sg894
g1049
sg908
g909
sg903
g1056
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g1098
sg894
g1959
sg908
g1105
sg903
g1966
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g942
sg894
g1594
sg908
g936
sg903
g1601
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g1098
sg894
g1959
sg908
g1105
sg903
g1966
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g1237
sg894
g1233
sg908
g1244
sg903
g1241
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g1482
sg894
g2223
sg908
g1489
sg903
g2230
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g1128
sg894
g1124
sg908
g1135
sg903
g1132
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g1452
sg894
g1448
sg908
g1459
sg903
g1456
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g987
sg894
g1276
sg908
g994
sg903
g1283
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g1482
sg894
g1478
sg908
g1489
sg903
g1486
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g919
sg894
g1743
sg908
g926
sg903
g1750
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g1512
sg894
g1892
sg908
g1519
sg903
g1899
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g942
sg894
g932
sg908
g936
sg903
g940
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g1128
sg894
g1553
sg908
g1135
sg903
g1560
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g1364
sg894
g1360
sg908
g1371
sg903
g1368
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g899
sg894
g1049
sg908
g909
sg903
g1056
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g1396
sg894
g1392
sg908
g1403
sg903
g1400
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g970
sg894
g1306
sg908
g977
sg903
g1313
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1396
sg894
g2381
sg908
g1403
sg903
g2388
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g1452
sg894
g1663
sg908
g1459
sg903
g1670
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g959
sg894
g1017
sg908
g953
sg903
g1024
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g1036
sg894
g1838
sg908
g1043
sg903
g1845
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g1482
sg894
g1478
sg908
g1489
sg903
g1486
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g1036
sg894
g1838
sg908
g1043
sg903
g1845
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g1396
sg894
g1392
sg908
g1403
sg903
g1400
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g1482
sg894
g2223
sg908
g1489
sg903
g2230
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g919
sg894
g1743
sg908
g926
sg903
g1750
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1190
sg894
g1622
sg908
g1197
sg903
g1629
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g1068
sg894
g1064
sg908
g1075
sg903
g1072
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g919
sg894
g1743
sg908
g926
sg903
g1750
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g1036
sg894
g1838
sg908
g1043
sg903
g1845
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g1482
sg894
g2223
sg908
g1489
sg903
g2230
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g970
sg894
g1306
sg908
g977
sg903
g1313
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g1364
sg894
g1810
sg908
g1371
sg903
g1817
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g1396
sg894
g1392
sg908
g1403
sg903
g1400
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1158
sg894
g1538
sg908
g1165
sg903
g1545
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g1237
sg894
g1291
sg908
g1244
sg903
g1298
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g942
sg894
g932
sg908
g936
sg903
g940
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g1004
sg894
g1377
sg908
g1011
sg903
g1384
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g1364
sg894
g1360
sg908
g1371
sg903
g1368
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g1158
sg894
g1154
sg908
g1165
sg903
g1162
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g1128
sg894
g1124
sg908
g1135
sg903
g1132
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g1482
sg894
g1478
sg908
g1489
sg903
g1486
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g1396
sg894
g2381
sg908
g1403
sg903
g2388
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g942
sg894
g932
sg908
g936
sg903
g940
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g1512
sg894
g1508
sg908
g1519
sg903
g1516
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g1452
sg894
g1663
sg908
g1459
sg903
g1670
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g1190
sg894
g1622
sg908
g1197
sg903
g1629
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g1482
sg894
g2223
sg908
g1489
sg903
g2230
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g1512
sg894
g1892
sg908
g1519
sg903
g1899
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g1220
sg894
g2052
sg908
g1227
sg903
g2059
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g942
sg894
g932
sg908
g936
sg903
g940
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g1098
sg894
g1094
sg908
g1105
sg903
g1102
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g1237
sg894
g1291
sg908
g1244
sg903
g1298
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I80790352
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'\xf0K\r\x13p\x87\r\x13@\xb3\r\x13\x80K\r\x13\xa0\x87\r\x13@?\xa0\x04`>\xa0\x04h\xb3\r\x13\xc01\xa0\x04\xf0\x88\r\x13\x80K\r\x13\xb8\xb3\r\x13\xa0\x87\r\x13`>\xa0\x04\xd0\x87\r\x13\xc01\xa0\x04\xf0\x88\r\x13\x00\x88\r\x13\xb8\xb3\r\x13\xe0\xb3\r\x13\xb8\xb3\r\x13P\x89\r\x130\xb4\r\x13\xb8\xb3\r\x13\xb8K\r\x13\x18\xb3\r\x13\xa0?\xa0\x04\xd0\x87\r\x13\x00\x88\r\x13\xf8\xb4\r\x13X\xb4\r\x13\xe0\xb3\r\x13\xb8\xb3\r\x13`>\xa0\x04p\x87\r\x13\x80\xb4\r\x13 \xb5\r\x13\x90\xb3\r\x13@?\xa0\x04@\xb3\r\x13p\x87\r\x13H\xb5\r\x13\x90\xb3\r\x130\x88\r\x13\x90\xb3\r\x13X\xb4\r\x13\xb8K\r\x13\xc01\xa0\x04\xa0\x87\r\x13\xc0?\xa0\x04h\xb3\r\x13@\xb3\r\x13\x08\xb4\r\x13\x80K\r\x13\x90\xb3\r\x13\xf8\xb4\r\x13`>\xa0\x04\x80K\r\x13`\x88\r\x13\x00\x88\r\x130\xb4\r\x13X\xb4\r\x13`>\xa0\x04p\xb5\r\x13\x98L\r\x13 \xb5\r\x13\xd0L\r\x13`>\xa0\x04@?\xa0\x04p\x87\r\x130\xb4\r\x13\x80K\r\x13\x08\xb4\r\x13p\x87\r\x130\xb4\r\x13\xe0\xb3\r\x13H\xb5\r\x130\x88\r\x13X\xb4\r\x13`?\xa0\x04`\x88\r\x13\xd0\x87\r\x13\x90\xb3\r\x13(L\r\x13h\xb3\r\x130\x88\r\x13h\xb3\r\x13(L\r\x13\xb8\xb3\r\x13\xa0\x87\r\x13@\xb3\r\x13\xa0\x87\r\x13\x18\xb3\r\x13\x80\xb4\r\x13\xa0\x87\r\x13\x00\x88\r\x13@?\xa0\x04\xd0\x87\r\x130\x88\r\x13\xa0?\xa0\x040\xb4\r\x13@\xb3\r\x13\xb8K\r\x13\xc0?\xa0\x04\xd0\x87\r\x13@\xb3\r\x13\xf8\xb4\r\x13@\xb3\r\x13X\xb4\r\x13H\xb5\r\x13\xe0\xb3\r\x13\xd0\x87\r\x13\x00\x88\r\x13\x80\xb4\r\x13\x00\x88\r\x130\x88\r\x13\xc01\xa0\x04\x80\xb4\r\x13\xa0?\xa0\x04\xf0\x88\r\x13\x98L\r\x13\xd0\x87\r\x13 \xb5\r\x13\x80\xb4\r\x13\x90\xb3\r\x130\x88\r\x13\x00\x88\r\x13\xa0?\xa0\x04\xb8\xb3\r\x130\x88\r\x13\xa0\x87\r\x13\xe0\xb3\r\x13X\xb4\r\x13\xb8K\r\x13\x18\xb3\r\x13@?\xa0\x04\x08\xb4\r\x13\xd0\xb4\r\x130\x88\r\x13\x18\xb3\r\x13\xc0?\xa0\x04\x90\xb3\r\x13\x80K\r\x13h\xb3\r\x13X\xb4\r\x13@\xb3\r\x13\xe0\xb3\r\x13\x08\xb4\r\x13\x80K\r\x13P\x89\r\x13@?\xa0\x04`>\xa0\x04\x18\xb3\r\x13p\x87\r\x13\xf8\xb4\r\x13\x08\xb4\r\x13\x18\xb3\r\x13\x08\xb4\r\x13\x90\x88\r\x13@?\xa0\x04p\x87\r\x130\xb4\r\x13\x18\xb3\r\x13\xc01\xa0\x04`>\xa0\x04h\xb3\r\x13\xa0\x87\r\x13\xf0K\r\x13p\x87\r\x13\x08\xb4\r\x13@?\xa0\x04 \x89\r\x130\x88\r\x13\xb8\xb3\r\x13H\xb5\r\x13 \x89\r\x13X\xb4\r\x13\xa0\x87\r\x13\x80\xb4\r\x13`>\xa0\x04\xc01\xa0\x04@?\xa0\x04`>\xa0\x04\xd0\x87\r\x13\xc0\x88\r\x13\xb8K\r\x13\x80\xb4\r\x13\xc01\xa0\x04\x08\xb4\r\x13\xb8\xb3\r\x13 \xb5\r\x13X\xb4\r\x13\x00\x88\r\x13\xc01\xa0\x040\x88\r\x13\xb8K\r\x13\x00\x88\r\x13@\xb3\r\x13\x80K\r\x13\x18\xb3\r\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S'\x80?\xa0\x04\x00\x02g\x04\x80\xc2\r\x13\x80\xc1\r\x13@\xc0\r\x13\xa0\xc2\r\x13`\xc2\r\x13@\xc1\r\x13\x00\xc3\r\x13\x00;\xa0\x04@\xc2\r\x13\x80\xc3\r\x13\x00\xc1\r\x13@\xc3\r\x13`\xc0\r\x13\xe0\xc1\r\x13\xc0\xc3\r\x13\xe0\xc3\r\x13\xa0\xc0\r\x13\xe0\xc0\r\x13@\xc4\r\x13 \xc4\r\x13\x00\xc2\r\x13`\xc4\r\x13\x80\xc4\r\x13\xa0\xc4\r\x13\x00\xc5\r\x13 \xc5\r\x13 \xc1\r\x13`\xc5\r\x13\x80\xc5\r\x13`\xc3\r\x13\xe0\xc2\r\x13\xa0\xc5\r\x13\xc0\xc5\r\x13\xe0\xc5\r\x13\x00\xc6\r\x13`\xc6\r\x13\x80\xc6\r\x13\xc0\xc1\r\x13\xa0\xc1\r\x13\xa0\xc6\r\x13\xc0\xc6\r\x13 \xc7\r\x13@\xc7\r\x13`\xc7\r\x13\x00\xc4\r\x13\xc0\xc2\r\x13\xc0\xc7\r\x13\xa0\xc7\r\x13`\xc1\r\x13\xe0\xc7\r\x13\x00\xc8\r\x13 \xc8\r\x13\x80\xc8\r\x13\xa0\xc8\r\x13\xe0\xc4\r\x13\xc0\xc4\r\x13\x00\xc9\r\x13\xe0\xc8\r\x13\x00\x01g\x04 \xc9\r\x13\x80\xc9\r\x13\xc0\xc0\r\x13 \xc6\r\x13\xe0\xc6\r\x13\x80\xc7\r\x13 \xca\r\x13`\xc9\r\x13\xa0\xc3\r\x13\x80\xca\r\x13\x80\xc0\r\x13\x00mh\x04 jh\x04\xa0\xcdg\x04 \xceg\x04@\xceg\x04\xc0\xccg\x04\x00\xc2g\x04`\xcfg\x04\xe0\xc9g\x04\x00\xcbg\x04`\xcbg\x04\xa0\xcbg\x04\x80\xcfg\x04\x00\xc9g\x04`\xccg\x04\xa0\xccg\x04@\xcbg\x04\xe0\xceg\x04\xe0\xccg\x04 \xcdg\x04`\xcdg\x04\xa0\xceg\x04\x00\xcdg\x04\x80\xccg\x04\xc0mh\x04\x00\xceg\x04\xa0\xc9g\x04@\xcfg\x04@\xccg\x04@\xcdg\x04\xa0\xcfg\x04\xe0\xcfg\x04\x80\xedl\r\xa0mh\x04\xa0Wh\r@Rh\r\xe0\xcdg\x04\x80\xcbg\x04\xe0\xef\x9d\x04`\xceg\x04 \xcfg\x04\x00\xccg\x04 \xcbg\x04\xe0\xcbg\x04 \xccg\x04\x80\xc5g\x04@mh\x04\xc0\xcdg\x04\xc0\xcfg\x04\xc0\xc9g\x04\x00Ri\r\x00[i\r\xa0[i\r\x80\\i\r\xc0Ui\r`Xi\r\xe0Ui\r Xi\r\x80Zi\r`Zi\r\xc0Yi\r\xa0Ti\r\x00Ti\r Ui\r\x80\xcdg\x04@[i\r\x00Zi\r\x00\xfci\r\xe0\xf4i\r\xc0\xf2i\r\xe0\xf6i\r`\xf3i\r\x80\xf3i\r\x00\xf1i\r`\xfei\r\xe0\xf1i\r\xa0\xfbi\r\x80\xf9i\r\x00\xf2i\r\xc0\xf4i\r\xa0\xf1i\r@\xf2i\r \xf1i\r \xfci\r \xf3i\r\x00\xfbi\r\xe0\xfbi\r\x00\xf3i\r\x80\xf4i\r\xe0\xffi\r\xe0mh\x04\xe0\xf3i\r\x00\x87\x93\r\xa0\x82\x93\r\xe0\x80\x93\r \x83\x93\r`\x8a\x93\r\xc0\x80\x93\r`\x81\x93\r\xc0\x8a\x93\r\x00\x8b\x93\r\xc0\xf7i\r\x00\x89\x93\r@\x80\x93\r@\x83\x93\r\xa0\x80\x93\r@\x81\x93\r\x00\x83\x93\r\xe0\x82\x93\r\x80\x80\x93\r\x80\xcag\x04\xe0f\x96\r``\x96\r\xa0`\x96\r\xc0d\x96\r\xe0b\x96\r\x00g\x96\r@`\x96\r\xc0\x82\x93\r o\x96\r`i\x96\r \xe2l\r\xa0\xb9\x96\r@\xb7\x96\r\xc0`\x96\r\xc0\xb9\x96\r\xc0\xb6\x96\r \xbb\x96\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'@\x90H?D\r@?R\xa0*?\x90n&?>9s?"\xf1L?/\xb2j?9%\x82?S(\x82?\xaatw?\x80\\U?,~w?\xe4\x13\x91?\xe4\xf1\xae?\xe7>3?rbU?\x97\x13\xd1?\xf4\x8a\xe8?\xefnf?B\x7f7?\x950"?\xd35\xf3?\x91\x94H?\x05\x8fH?\x1c\xee\x8e?m~\x97?N\xea]?-<3?\x8f\x89(@\xb5\xd3L?pRD?_\x04@?o\x9c\xb9?=\'b?+\x91H?\x04\xc8{?\xd4~7?(4\x13@\xe9\xf1\x8e?\xa8\xa0j?\x83@3?\x16\x89\x88?\xc4V\x15@O\xa6Y?\x91\xf1\xce?\x12\x95H?\x0e\xcbL?\rK\xc4?6G\x84?\xdc93?c\xf0\x9d?4\x94\x99?\xd4\xd0\x8c?g6\x93?\xa9\xf1\xce?\xe4bU?\xba\xe3]?\xb9bU?\x04;s?\xc4\xe0\xbd?\x85\xb9;?D,b?\x1e\x11!@\x0c\xaaY?\xb3\x03\x80?PA3?\xf1\x90H?\xb2KD?\xf94\x13@\x1c\\U?\r\xef]?\xd6i\xc6?\xe4\x8a\xe8?\xde\x90H?#\x07@?\x8ftf?\xba\xeen?/\xb2j?\xee\xf4n?+\xc1\xfb?u8Q?\xe4\xc1;?\x12%\xa2?V\xe5]?2\xae\x8a?\xf9\xfbn?q\xbf;?\x8bKD?\x94\x06\x80?)6\x93?\xbc\xd8\xdd?\x96(b?\xadi\x86?\xc7\xf4n?p\xe4]?#%\x82?\x03H\xa4?\xeb\xc2;?T7\x93?S~w?\x9f\xd4L?\xf0,\xb3?\x93\x98Y?u[\xb5?\xb5}7?S\xb0Y?a\xd4L?\xcd>\x84?E$\xc2?\xc2\xff\x7f?\xf1v\x97?s5\xf3?\xed:3?\x8c%\x82?\x9c\xf6.?m(\x82?\x11\xf6n?\xb5\xb0j?C\x03\xc0?\xf7\x13\xd1?\xd7\x06\xa0?\xb903?(|7?5\x18Q?\xbcG\xa4?\xa1\x17Q?\x93\x11\x80?\xa3E\x04@\xb3of?bX\xb5?\xd5\xc5{?\xb1\xc6;?\xf9W\xd5?\xde!\x82?\x94\xc4{?_z\xb7?\x94\x06\x80?\x9e\x847?\x1c;3?\xf6\xcf\x8c?\x93\x7fw?xi\x86?pRD?\xd8\xc2{?C\xad\xea?\x9abf?[MD?\xb3\xa8Y?U\xeb]?\xcc\x83w?\xcb\xb1j?\xef93?E\x07@?\xeeJ\x84?\x9f\xf5.?\x9c\xc1{?*\x7f7?\xac\x02\xe0?\x88^&?\x14F\xe4?\x90\xc2;?\x15\x90H?$\x8b\xe8?\xc5J\xa4?\xf4\xe3]?n\xe3]?$\xc1{?|;3?\x8e\xd3L?\x99\x8f\xa8?\xe1\xf1\x0e@7\xc3;?&z\xd7?\x7f\x1eb?\xaa\x8eH?3\xd5L?-4\x13@\x1cX\xf5?\xd4[U?X\xec]?\x140b?\x12\xf2\x8e?j\xc2;?`9s?1\xf1\x8e?\x9dDD?9ZU?\xeb.b?\xa2\xe5]?\xb6\x8b\xa8?3\x85w?^\x17Q?\xc0G\xa4?\xf8}w?\xb6\xfb.?M3s?\xb7KD?\xe3\xb0;?\xccLD?Vl&?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'H\xa5\xc0\x04P\xa3\xc0\x04\xe0\xe0\x91\x04(\xe7\x91\x04`\xe8\x91\x04\x98\xe6\x91\x04`\xee\x91\x04@\xe1\x91\x04\x08\xe6\x91\x04@\xea\x91\x04\xa0\xed\x91\x04\xe8\xed\x91\x04x\xee\x91\x04X\xe1\x91\x04\xa8\xeb\x91\x04h\xec\x91\x04\x90\xe2\x91\x04\xf0\xe5\x91\x04\xe8\xea\x91\x04\xb0\xe6\x91\x04 \xef\x91\x040\xee\x91\x04P\xe9\x91\x04h\xe3\x91\x048\xe6\x91\x04\xd0\xe7\x91\x04\x18\xe8\x91\x04X\xea\x91\x04\xf8\xe9\x91\x04\x00\xe2\x91\x04\xc8\xef\x91\x04X\xe4\x91\x04x\xeb\x91\x04h\xe0\x91\x04\xf0\xeb\x91\x04\x90\xe8\x91\x048\xe0\x91\x04(\xed\x91\x048\xec\x91\x04\xa8\xee\x91\x04\xa8\xe8\x91\x04H\xee\x91\x04P\xe0\x91\x04\x98\xef\x91\x04\xe0\xef\x91\x04\x08\xec\x91\x04\xe8\xe7\x91\x04\x18\xe2\x91\x048\xef\x91\x04\xe0\xec\x91\x04h\xef\x91\x04\x88\xed\x91\x04@\xe7\x91\x04\xd0\xe1\x91\x04@\xed\x91\x04p\xed\x91\x04\xc0\xeb\x91\x04h\xe6\x91\x04P\xec\x91\x04\x88\xea\x91\x04\xc0\xee\x91\x04\xb0\xec\x91\x04\xb8\xed\x91\x04\x80\xef\x91\x04\xd8\xe8\x91\x04\x80\xe0\x91\x04H\xeb\x91\x04\xf8\xec\x91\x04p\xe1\x91\x04\x90\xee\x91\x04P\xef\x91\x04\x18\xee\x91\x04\xc8\xec\x91\x04\xf0\xee\x91\x04\x80\xe9\x91\x04\xe0\xe9\x91\x04\x00\xee\x91\x04X\xed\x91\x04\x08\xef\x91\x04\xb8\xea\x91\x04\xd8\xeb\x91\x04P\xe3\x91\x04\xb0\xef\x91\x040>\xbd\x04\xc8<\xbd\x04\xb8=\xbd\x04\x00>\xbd\x04\xf8<\xbd\x04\xb0?\xbd\x04\xf02\xbd\x04\xc8?\xbd\x04H>\xbd\x04(=\xbd\x04h9\xbd\x04\xe03\xbd\x04\xe09\xbd\x04\x98?\xbd\x0408\xbd\x04\xf89\xbd\x04\x104\xbd\x04\x089\xbd\x04 ?\xbd\x04\x80?\xbd\x04\x884\xbd\x04\x002\xbd\x04p7\xbd\x04\x90;\xbd\x04x5\xbd\x04\x10=\xbd\x048?\xbd\x04\xe87\xbd\x04\xc8\x8c\x96\x04\x08\x83\x96\x04x\x85\x96\x04\xe8\x8d\x96\x04(\x84\x96\x04X\x8a\x96\x04\xb8\x87\x96\x04\xc8\x86\x96\x04X\x8d\x96\x04\xc0\x8e\x96\x04 \x89\x96\x04\xd8\x82\x96\x04\xb8\x81\x96\x04\xe8\x87\x96\x048\x8f\x96\x04\x90\x8e\x96\x04h\x86\x96\x048\x89\x96\x04\x18\x82\x96\x04\x00\x85\x96\x04\x80\x89\x96\x04\xa0\x8d\x96\x04\x88\x87\x96\x04\x00\xe8\x91\x04\xf0\xe8\x91\x04\xe0\xe6\x91\x04`\xe2\x91\x048\xe9\x91\x04 \xe3\x91\x04\x10\xea\x91\x04\xd0\xea\x91\x04\xf8\xe6\x91\x04\x10\xe7\x91\x04\xb0\xe9\x91\x04\x98\xe0\x91\x04\xf8\xe0\x91\x04\x80\xec\x91\x04\xc0\xe8\x91\x04\x08\xe9\x91\x04\x80\xe6\x91\x04\x98\xec\x91\x04 \xec\x91\x04\x88\xe7\x91\x04\xc8\xe3\x91\x04 \xe0\x91\x04\xe8\xe1\x91\x04\xd0\xed\x91\x04 \xe9\x91\x04\x88\xe1\x91\x04(\xea\x91\x04h\xe9\x91\x04X\xe7\x91\x040\xe8\x91\x04\x10\xed\x91\x04\xb8\xe7\x91\x04\xb0\xe0\x91\x04x\xe5\x91\x04\xf8\xe3\x91\x04\xb8\xe1\x91\x04\xa8\xe5\x91\x04\x10\xe1\x91\x04P\xe6\x91\x04p\xea\x91\x04\xc8\xe0\x91\x04\x98\xe9\x91\x04\x98\xe3\x91\x04p\xe7\x91\x04\x18\xeb\x91\x040\xeb\x91\x04\xb0\xe3\x91\x04\x90\xeb\x91\x04\xa0\xea\x91\x04H\xe8\x91\x04\xc0\xe5\x91\x04x\xe8\x91\x04\xa0\xe7\x91\x048\xe3\x91\x040\xe2\x91\x04\x00\xeb\x91\x04(\xe1\x91\x04\xc8\xe9\x91\x04\x90\xe5\x91\x04\xc8\xe6\x91\x04\xd8\xe5\x91\x04\xa0\xe1\x91\x04\x08\xe3\x91\x04H\xe2\x91\x04\x80\xe3\x91\x04 \xe6\x91\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3645
sg3632
g3633
sg3647
g3637
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3657
sg3632
g3653
sg3647
g3664
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3674
sg3632
g3670
sg3647
g3681
sg3641
g3678
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3691
sg3632
g3687
sg3647
g3698
sg3641
g3695
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3708
sg3632
g3704
sg3647
g3715
sg3641
g3712
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3725
sg3632
g3721
sg3647
g3732
sg3641
g3729
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3742
sg3632
g3738
sg3647
g3749
sg3641
g3746
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3759
sg3632
g3755
sg3647
g3766
sg3641
g3763
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3776
sg3632
g3772
sg3647
g3783
sg3641
g3780
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3799
sg3632
g3789
sg3647
g3793
sg3641
g3797
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3691
sg3632
g3806
sg3647
g3698
sg3641
g3813
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3825
sg3632
g3821
sg3647
g3832
sg3641
g3829
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3708
sg3632
g3704
sg3647
g3715
sg3641
g3712
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3742
sg3632
g3738
sg3647
g3749
sg3641
g3746
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3868
sg3632
g3864
sg3647
g3875
sg3641
g3872
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3776
sg3632
g3881
sg3647
g3783
sg3641
g3888
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3799
sg3632
g3896
sg3647
g3793
sg3641
g3903
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3915
sg3632
g3911
sg3647
g3922
sg3641
g3919
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3825
sg3632
g3821
sg3647
g3832
sg3641
g3829
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3945
sg3632
g3941
sg3647
g3952
sg3641
g3949
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3825
sg3632
g3958
sg3647
g3832
sg3641
g3965
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3983
sg3632
g3973
sg3647
g3977
sg3641
g3981
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3994
sg3632
g3990
sg3647
g4001
sg3641
g3998
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g3825
sg3632
g3958
sg3647
g3832
sg3641
g3965
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g4024
sg3632
g4020
sg3647
g4031
sg3641
g4028
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g3645
sg3632
g3633
sg3647
g3637
sg3641
g3642
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g3759
sg3632
g3755
sg3647
g3766
sg3641
g3763
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g3868
sg3632
g3864
sg3647
g3875
sg3641
g3872
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g3915
sg3632
g4076
sg3647
g3922
sg3641
g4083
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g3945
sg3632
g3941
sg3647
g3952
sg3641
g3949
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g4108
sg3632
g4104
sg3647
g4115
sg3641
g4112
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g3945
sg3632
g4121
sg3647
g3952
sg3641
g4128
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g3825
sg3632
g3821
sg3647
g3832
sg3641
g3829
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g3742
sg3632
g3738
sg3647
g3749
sg3641
g3746
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3657
sg3632
g4162
sg3647
g3664
sg3641
g4169
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g4181
sg3632
g4177
sg3647
g4188
sg3641
g4185
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g3994
sg3632
g4194
sg3647
g4001
sg3641
g4201
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g3799
sg3632
g3896
sg3647
g3793
sg3641
g3903
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g3725
sg3632
g3721
sg3647
g3732
sg3641
g3729
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g3674
sg3632
g4235
sg3647
g3681
sg3641
g4242
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g3657
sg3632
g4162
sg3647
g3664
sg3641
g4169
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g4024
sg3632
g4020
sg3647
g4031
sg3641
g4028
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g3799
sg3632
g3789
sg3647
g3793
sg3641
g3797
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g4293
sg3632
g4289
sg3647
g4300
sg3641
g4297
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g3799
sg3632
g3789
sg3647
g3793
sg3641
g3797
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g4108
sg3632
g4104
sg3647
g4115
sg3641
g4112
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g4024
sg3632
g4020
sg3647
g4031
sg3641
g4028
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g3776
sg3632
g3881
sg3647
g3783
sg3641
g3888
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g3708
sg3632
g4358
sg3647
g3715
sg3641
g4365
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g4181
sg3632
g4373
sg3647
g4188
sg3641
g4380
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g3759
sg3632
g4388
sg3647
g3766
sg3641
g4395
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g3674
sg3632
g3670
sg3647
g3681
sg3641
g3678
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g3983
sg3632
g3973
sg3647
g3977
sg3641
g3981
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g3691
sg3632
g3806
sg3647
g3698
sg3641
g3813
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g3799
sg3632
g3896
sg3647
g3793
sg3641
g3903
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g3945
sg3632
g4121
sg3647
g3952
sg3641
g4128
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g3742
sg3632
g4468
sg3647
g3749
sg3641
g4475
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g3691
sg3632
g3806
sg3647
g3698
sg3641
g3813
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g3657
sg3632
g4162
sg3647
g3664
sg3641
g4169
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g3915
sg3632
g4076
sg3647
g3922
sg3641
g4083
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g3994
sg3632
g3990
sg3647
g4001
sg3641
g3998
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g4108
sg3632
g4104
sg3647
g4115
sg3641
g4112
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g3742
sg3632
g3738
sg3647
g3749
sg3641
g3746
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g4108
sg3632
g4561
sg3647
g4115
sg3641
g4568
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g3776
sg3632
g3772
sg3647
g3783
sg3641
g3780
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g3994
sg3632
g3990
sg3647
g4001
sg3641
g3998
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g3915
sg3632
g3911
sg3647
g3922
sg3641
g3919
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g3742
sg3632
g4468
sg3647
g3749
sg3641
g4475
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g3725
sg3632
g4628
sg3647
g3732
sg3641
g4635
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g3657
sg3632
g3653
sg3647
g3664
sg3641
g3661
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g3994
sg3632
g4194
sg3647
g4001
sg3641
g4201
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g3691
sg3632
g3806
sg3647
g3698
sg3641
g3813
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g3983
sg3632
g3973
sg3647
g3977
sg3641
g3981
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g3657
sg3632
g4162
sg3647
g3664
sg3641
g4169
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g3994
sg3632
g4194
sg3647
g4001
sg3641
g4201
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g3945
sg3632
g4121
sg3647
g3952
sg3641
g4128
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g4024
sg3632
g4020
sg3647
g4031
sg3641
g4028
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g4293
sg3632
g4747
sg3647
g4300
sg3641
g4754
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g4108
sg3632
g4561
sg3647
g4115
sg3641
g4568
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g3725
sg3632
g4628
sg3647
g3732
sg3641
g4635
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g3657
sg3632
g3653
sg3647
g3664
sg3641
g3661
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g3868
sg3632
g4801
sg3647
g3875
sg3641
g4808
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g3799
sg3632
g3789
sg3647
g3793
sg3641
g3797
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g3691
sg3632
g3687
sg3647
g3698
sg3641
g3695
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g3759
sg3632
g4388
sg3647
g3766
sg3641
g4395
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g4293
sg3632
g4289
sg3647
g4300
sg3641
g4297
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g3759
sg3632
g3755
sg3647
g3766
sg3641
g3763
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g3691
sg3632
g3687
sg3647
g3698
sg3641
g3695
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g3825
sg3632
g3821
sg3647
g3832
sg3641
g3829
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g3708
sg3632
g4358
sg3647
g3715
sg3641
g4365
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g3674
sg3632
g4235
sg3647
g3681
sg3641
g4242
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g3708
sg3632
g4358
sg3647
g3715
sg3641
g4365
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g3645
sg3632
g4946
sg3647
g3637
sg3641
g4953
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g4181
sg3632
g4177
sg3647
g4188
sg3641
g4185
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g3708
sg3632
g3704
sg3647
g3715
sg3641
g3712
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g3915
sg3632
g3911
sg3647
g3922
sg3641
g3919
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g3725
sg3632
g4628
sg3647
g3732
sg3641
g4635
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g3868
sg3632
g3864
sg3647
g3875
sg3641
g3872
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g4293
sg3632
g4289
sg3647
g4300
sg3641
g4297
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g3759
sg3632
g4388
sg3647
g3766
sg3641
g4395
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g3994
sg3632
g4194
sg3647
g4001
sg3641
g4201
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g3674
sg3632
g3670
sg3647
g3681
sg3641
g3678
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g4024
sg3632
g5078
sg3647
g4031
sg3641
g5085
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g4181
sg3632
g4373
sg3647
g4188
sg3641
g4380
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g3868
sg3632
g4801
sg3647
g3875
sg3641
g4808
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g3674
sg3632
g3670
sg3647
g3681
sg3641
g3678
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g3945
sg3632
g3941
sg3647
g3952
sg3641
g3949
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g3674
sg3632
g4235
sg3647
g3681
sg3641
g4242
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g4108
sg3632
g4561
sg3647
g4115
sg3641
g4568
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g4024
sg3632
g5078
sg3647
g4031
sg3641
g5085
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g3945
sg3632
g4121
sg3647
g3952
sg3641
g4128
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g3868
sg3632
g3864
sg3647
g3875
sg3641
g3872
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g3915
sg3632
g3911
sg3647
g3922
sg3641
g3919
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g4181
sg3632
g4373
sg3647
g4188
sg3641
g4380
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g3915
sg3632
g4076
sg3647
g3922
sg3641
g4083
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g4293
sg3632
g4747
sg3647
g4300
sg3641
g4754
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g3776
sg3632
g3881
sg3647
g3783
sg3641
g3888
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g4181
sg3632
g4177
sg3647
g4188
sg3641
g4185
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g3759
sg3632
g3755
sg3647
g3766
sg3641
g3763
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g3799
sg3632
g3896
sg3647
g3793
sg3641
g3903
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g3776
sg3632
g3772
sg3647
g3783
sg3641
g3780
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g3868
sg3632
g4801
sg3647
g3875
sg3641
g4808
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g3994
sg3632
g3990
sg3647
g4001
sg3641
g3998
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g4181
sg3632
g4177
sg3647
g4188
sg3641
g4185
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g3799
sg3632
g3896
sg3647
g3793
sg3641
g3903
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g4293
sg3632
g4747
sg3647
g4300
sg3641
g4754
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g3915
sg3632
g4076
sg3647
g3922
sg3641
g4083
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g3759
sg3632
g3755
sg3647
g3766
sg3641
g3763
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g3825
sg3632
g3958
sg3647
g3832
sg3641
g3965
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g4293
sg3632
g4289
sg3647
g4300
sg3641
g4297
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g3708
sg3632
g3704
sg3647
g3715
sg3641
g3712
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g3945
sg3632
g4121
sg3647
g3952
sg3641
g4128
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g4108
sg3632
g4104
sg3647
g4115
sg3641
g4112
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g4024
sg3632
g5078
sg3647
g4031
sg3641
g5085
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g3645
sg3632
g3633
sg3647
g3637
sg3641
g3642
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g3725
sg3632
g4628
sg3647
g3732
sg3641
g4635
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g3983
sg3632
g5522
sg3647
g3977
sg3641
g5529
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g3825
sg3632
g3958
sg3647
g3832
sg3641
g3965
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g4293
sg3632
g4747
sg3647
g4300
sg3641
g4754
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g3645
sg3632
g4946
sg3647
g3637
sg3641
g4953
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g4181
sg3632
g4373
sg3647
g4188
sg3641
g4380
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g3799
sg3632
g3789
sg3647
g3793
sg3641
g3797
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g3691
sg3632
g3806
sg3647
g3698
sg3641
g3813
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g3759
sg3632
g4388
sg3647
g3766
sg3641
g4395
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g4108
sg3632
g4561
sg3647
g4115
sg3641
g4568
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g3674
sg3632
g4235
sg3647
g3681
sg3641
g4242
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g3945
sg3632
g3941
sg3647
g3952
sg3641
g3949
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g3983
sg3632
g5522
sg3647
g3977
sg3641
g5529
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g3691
sg3632
g3687
sg3647
g3698
sg3641
g3695
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g3983
sg3632
g5522
sg3647
g3977
sg3641
g5529
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g3725
sg3632
g3721
sg3647
g3732
sg3641
g3729
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g3742
sg3632
g4468
sg3647
g3749
sg3641
g4475
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g3645
sg3632
g3633
sg3647
g3637
sg3641
g3642
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g3657
sg3632
g3653
sg3647
g3664
sg3641
g3661
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g3945
sg3632
g3941
sg3647
g3952
sg3641
g3949
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g3983
sg3632
g5522
sg3647
g3977
sg3641
g5529
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g3645
sg3632
g4946
sg3647
g3637
sg3641
g4953
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g3983
sg3632
g3973
sg3647
g3977
sg3641
g3981
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g3674
sg3632
g3670
sg3647
g3681
sg3641
g3678
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g3725
sg3632
g4628
sg3647
g3732
sg3641
g4635
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g3657
sg3632
g4162
sg3647
g3664
sg3641
g4169
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g3994
sg3632
g3990
sg3647
g4001
sg3641
g3998
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g3645
sg3632
g3633
sg3647
g3637
sg3641
g3642
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g3776
sg3632
g3772
sg3647
g3783
sg3641
g3780
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g3742
sg3632
g3738
sg3647
g3749
sg3641
g3746
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g3759
sg3632
g4388
sg3647
g3766
sg3641
g4395
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g3708
sg3632
g3704
sg3647
g3715
sg3641
g3712
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g3645
sg3632
g4946
sg3647
g3637
sg3641
g4953
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g3657
sg3632
g3653
sg3647
g3664
sg3641
g3661
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g3983
sg3632
g3973
sg3647
g3977
sg3641
g3981
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g3725
sg3632
g3721
sg3647
g3732
sg3641
g3729
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g3868
sg3632
g4801
sg3647
g3875
sg3641
g4808
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g4293
sg3632
g4289
sg3647
g4300
sg3641
g4297
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g3825
sg3632
g3821
sg3647
g3832
sg3641
g3829
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g4024
sg3632
g4020
sg3647
g4031
sg3641
g4028
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g3868
sg3632
g4801
sg3647
g3875
sg3641
g4808
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g4108
sg3632
g4561
sg3647
g4115
sg3641
g4568
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g3708
sg3632
g4358
sg3647
g3715
sg3641
g4365
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g4181
sg3632
g4373
sg3647
g4188
sg3641
g4380
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g3742
sg3632
g4468
sg3647
g3749
sg3641
g4475
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g3776
sg3632
g3772
sg3647
g3783
sg3641
g3780
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g3725
sg3632
g3721
sg3647
g3732
sg3641
g3729
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g3742
sg3632
g4468
sg3647
g3749
sg3641
g4475
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g3868
sg3632
g3864
sg3647
g3875
sg3641
g3872
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g3708
sg3632
g4358
sg3647
g3715
sg3641
g4365
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g4024
sg3632
g5078
sg3647
g4031
sg3641
g5085
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g4181
sg3632
g4177
sg3647
g4188
sg3641
g4185
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g3776
sg3632
g3881
sg3647
g3783
sg3641
g3888
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g3983
sg3632
g5522
sg3647
g3977
sg3641
g5529
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g3825
sg3632
g3958
sg3647
g3832
sg3641
g3965
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g3994
sg3632
g4194
sg3647
g4001
sg3641
g4201
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g4108
sg3632
g4104
sg3647
g4115
sg3641
g4112
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g3915
sg3632
g3911
sg3647
g3922
sg3641
g3919
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g3776
sg3632
g3881
sg3647
g3783
sg3641
g3888
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g4293
sg3632
g4747
sg3647
g4300
sg3641
g4754
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g4024
sg3632
g5078
sg3647
g4031
sg3641
g5085
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g3915
sg3632
g4076
sg3647
g3922
sg3641
g4083
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g3674
sg3632
g4235
sg3647
g3681
sg3641
g4242
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g3691
sg3632
g3687
sg3647
g3698
sg3641
g3695
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g3645
sg3632
g4946
sg3647
g3637
sg3641
g4953
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I80790352
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S'\x10+N\x13\x10mM\x13`+N\x13 lM\x13`+N\x13`UN\x13\x88+N\x13\xf0TN\x13\xb0+N\x13 lM\x13PlM\x13`+N\x138+N\x13PlM\x13\x80lM\x13\xb0+N\x13\x10+N\x13\xd8+N\x13\x00,N\x138+N\x13@mM\x13PlM\x13\x00,N\x13\x88+N\x13(,N\x13\xf0TN\x13 \xecf\x04\x00,N\x13(UN\x13\xd0UN\x13\xb8TN\x13PlM\x13`+N\x13\x80\xedf\x04\x80lM\x13\xb0lM\x13`+N\x13P,N\x13\x88+N\x13\xb8TN\x13`\xecf\x04 \xecf\x04\xe0lM\x13\x00\xecf\x04\xd0UN\x13\xb0lM\x13\xd0UN\x13\x00,N\x13`\xecf\x04\xb0+N\x13(,N\x13\xb0lM\x13\xf0TN\x138+N\x13\x88+N\x13pmM\x13h-N\x138+N\x13`+N\x13\x88+N\x13\xe0lM\x13`+N\x13\x80\xedf\x04\xa0mM\x13\xf0TN\x13`\xe7f\x04\x00nM\x130nM\x13\x88+N\x13\xb8TN\x13\xe0lM\x13\xd8+N\x13\xb0lM\x13 lM\x13PlM\x13 lM\x13\x80lM\x13\x10+N\x13(,N\x13 lM\x13\x10mM\x13x,N\x13\x00\xecf\x04P,N\x13\x80\xedf\x04\x10+N\x13x,N\x13\x10mM\x13\x00,N\x13P,N\x13\x00\xecf\x04\x00,N\x13`\xecf\x04\xf0TN\x13P,N\x13\x80lM\x13P,N\x13 lM\x13\x88+N\x13P,N\x138+N\x13`+N\x13(,N\x13\x10mM\x13`\xecf\x04x,N\x13PlM\x13\xe0lM\x130nM\x13(,N\x13\xd8+N\x13\xe0lM\x13\x80lM\x13x,N\x13\x18-N\x13\x00\xecf\x04\xd8+N\x13\xb0lM\x13\x00nM\x13\x80lM\x13\xe0lM\x13\xb8TN\x13@\xeef\x04`+N\x13\x80lM\x13(,N\x13\xd8+N\x13\xb8TN\x13\xd8+N\x13\xd0UN\x13\x88+N\x13 \xecf\x04\xb0+N\x13\xb0lM\x13\xb8TN\x13`\xecf\x04\xf0TN\x13\xd0mM\x13\x10mM\x13\x80\xedf\x04x,N\x13\x10+N\x13\xb0lM\x13h-N\x13`\xecf\x04\xb0lM\x13`\xecf\x04 lM\x13@mM\x13\xb0+N\x13\xd8+N\x13\x00,N\x13\xb0+N\x13(,N\x13\x10+N\x13P,N\x13\xb0+N\x13\xf0TN\x13\xd0UN\x13PlM\x13\xb0+N\x13\x80lM\x13x,N\x13\x98UN\x13\xe0lM\x13\x10+N\x13\xb0+N\x13 \xecf\x04PlM\x13\x00,N\x13\xb8TN\x13(,N\x13P,N\x13x,N\x13\xb0lM\x13\xf0TN\x13\xd8+N\x13PlM\x13\x00\xecf\x04\xe0lM\x13\xf0TN\x13\x10+N\x13\xd8+N\x13\xf0,N\x13`\xecf\x04\xb8TN\x13\x80\xedf\x04\x10+N\x13`\xecf\x04\xa0mM\x13(,N\x130nM\x13 lM\x13\x00\xecf\x04 lM\x13`+N\x13\xb8TN\x13\xd8+N\x13`\xecf\x04P,N\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x00<O\x13@<O\x13\xc0\x01g\x04`;O\x13\xa0<O\x13\x80:O\x13 =O\x13@=O\x13\xc0<O\x13 ;O\x13\xe0<O\x13`=O\x13\xc0=O\x13\xa0=O\x13\x00>O\x13\xe0=O\x13`:O\x13 >O\x13@>O\x13`>O\x13\x80>O\x13\xe0>O\x13\xc0>O\x13 ?O\x13@?O\x13`?O\x13\x80?O\x13\xe0;O\x13 <O\x13\xa0>O\x13\xa0:O\x13\xa0?O\x13@;O\x13`<O\x13\xe0:O\x13\x80=O\x13\xc0:O\x13\xa0;O\x13\xc0?O\x13\x00=O\x13\xc0;O\x13\x00;O\x13\x80;O\x13\xe0?O\x13\xc0\xe5f\x04\x00<\xa0\x04\xc01c\x13 1c\x13\xa02c\x13@2c\x13\x800c\x13\xc02c\x13\x802c\x13 0c\x13\xe02c\x13@3c\x13`3c\x13\x803c\x13\xe00c\x13 2c\x13\xe03c\x13\x004c\x13 4c\x13\xa00c\x13\xa01c\x13@4c\x13`4c\x13\xc04c\x13\xa04c\x13\x005c\x13 5c\x13@5c\x13`5c\x13\x805c\x13\xa05c\x13\xc05c\x13\xe05c\x13\xc03c\x13 6c\x13\x006c\x13@\xb0\x96\r@6c\x13\xa06c\x13\xe01c\x13 3c\x13\xc06c\x13\xe06c\x13@7c\x13`6c\x13\x807c\x13\xa07c\x13@0c\x13\xe04c\x13\x804c\x13\xa03c\x13\x008c\x13@1c\x13\x801c\x13 8c\x13\xc08c\x13\xe08c\x13`2c\x13\x009c\x13`7c\x13`8c\x13\x001c\x13\x002c\x13\xc09c\x13`0c\x13`1c\x13\x00:c\x13\x80\xe9f\x04 7c\x13`:c\x13\xc07c\x13\x003c\x13\x806c\x13\x00;c\x13\x808c\x13\x80:c\x13\xa0:c\x13@:c\x13\x80;c\x13@;c\x13`9c\x13\xa09c\x13@8c\x13@9c\x13\xa08c\x13`;c\x13\xa0;c\x13\xc00c\x13\xe0;c\x13\xc0;c\x13\xa0<c\x13\x007c\x13\xc0:c\x13\xc0<c\x13\x00=c\x13\x00<c\x13\x809c\x13@=c\x13@<c\x13`<c\x13\xc0=c\x13`>c\x13 :c\x13\xa0>c\x13 9c\x13\xe0>c\x13\xe0:c\x13 ;c\x13\xc0>c\x13 =c\x13\x00>c\x13 >c\x13\x80>c\x13\xe0?c\x13\x80=c\x13`?c\x13\xe09c\x13@>c\x13\xa0=c\x13\xc0?c\x13\x80<c\x13`=c\x13\xe07c\x13 <c\x13 ?c\x13\xa0?c\x13\x80?c\x13\x00?c\x13\xa0f\x96\r\xe0\xd0\x89\x13`\xd0\x89\x13\x00\xd1\x89\x13 \xd0\x89\x13\x80\xd2\x89\x13`\xd2\x89\x13@\xd1\x89\x13\x00\xd3\x89\x13\xe0\xd2\x89\x13\x00\xd2\x89\x13 \xd3\x89\x13\x80\xd3\x89\x13`\xd3\x89\x13\xa0\xd1\x89\x13\xa0\xd3\x89\x13\xc0\xd3\x89\x13\xe0\xd3\x89\x13\x00\xd4\x89\x13 \xd4\x89\x13@\xd4\x89\x13\xa0\xd4\x89\x13\x80\xd4\x89\x13\xc0\xd0\x89\x13\xc0\xd4\x89\x13\xe0\xd4\x89\x13\x00\xd5\x89\x13`\xd5\x89\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S'\xb1\x90\x88?s\x8aw?\xd2?3?\xc5\xf5.?H\xfd.?3\x877?\xb5\x02^?\x863s?\x1b\x9d\x99?\xbc(b?k\xcf\xec?{\x857?\x93\x95H?\xd9\xd2L?l\xc3;?\xfa|w?\xe7$\xc2?\xdf\x9f\x99?-\x07@?\x8d\xe6]?\xfc\xf1\x8e?\xe9JD?\x95\x867?34\xb3?\x82i\x86?\x1a"b?\xe3\xae\xaa?o[3?t\xd4L?\xb5\x06@?\xc1\x07@?!\x03\x80?\x88\xb1*?\x92\x857?\\\x807?Q\xb2*?\xfc\x9c\x99?U\x0c@?\xfd\x8fH?\xde\x92H?\xac\xe5]?\x029\x93?&\x8fH?\x8d:s?\xae\x07@?\xea\xff.?o|7?\xa8l&?KLD?\x8c(b?\xb6\xbe\xdb?\xb7*"?TUU?\xad\xf5.?/\xeb]?y~w?<\x85w?\x93\x7f7?o\xf5.?\x12\xa0Y?\x89G\x84?\xa3\xdaL?\x19*"?`\xc2;?\x94!b?\xe0\x9d\xf9?*\xcf\x8c?\xae\nQ?\xb1\xe1]? ND?\xd4\xce\xec?\xda83?\x9a\x827?\x94nf?v\x14\x91?u\xc3{?d\\U?\x17\xb1\xaa?\xe2\xea\x1d?\xb8PD?\xbd\xa9\x8a?\xb8\x1e"?\xd6;\x13@\xb1\xe5]?!\x8fH?\xe6\x13\x91?\xe2\xd7]?\xbd\xc1;?\x13tf?\x1c&\x82?\x8a\xad\x8a?\x17\xb2*?\xe3:3?\xb2\xdd]?\x12\x0e@?\x17\x06\xa0?\xc9\xc2;?\xf5\x14\x91?\xce\x14\x91?\xb0\x0e@?z6\x93?\x10\xd4L?^\x7f7?\xbb\xf5.?\xdd\xee]?s\xc9\xac?\x1d\x8dH?}\xf9.?\xe1\xc3L?\xb8\xb1*?\x8a\\U?\xbb\x87H?I\x07@?5\x17b?\xca\xf1\xae?qJD?\x8a\x03\x80?\xf2/"?*\xd0\xac?E\x07@?K-b?\xa0\xad\x8a?\xc3\xeb]?\x8a\'"?\x9d\xb0*?*\x7f7?\x9f\xd0\x8c?=)b?\xdb\x06\x80?\x96:s?\xe9\'b?\xeeJD?k\xb1j?z4\xc2?\xfb\x90H?\xd5o&?\xde\xccL?\x1c\x06@?\x7f:3?x0"?\xa2]&?.\xbe\xfb?\x18;3?_\xd3L?\xb6\x8f\xa8?\xa1\xa0Y?\xd6\x9f\x99?\x11\xc3{?i\xe3]?\x8dm&?\x010"?\xff~7?\xf9\xe3\x1d?5\xc4;?Kj\x86?\xd3\x16Q?\x12A3?\xe8\xaa\x8a?NB3?\x0c\xc0\x9b?\xb9\xc1;?W*"?k\xef.?\xaf\xe2]?\xd8GD?\xdc\x02\xc0?\x87@3?\xc3WE@\xd2\xcd\x0c@\xa8\x9dY?$\x17Q?\xcb:3?\xfcCs?cl7?\xa7\xc6;?=\xbb;?$s&?\xd1\x9c\x99?&\xa7Y?/\\U?\xbaBD?t\xcf\xac?B^U?\'\xba{?b\x19Q?\x9ci\xa6?(\xaf*?+\x8b\x88?\x82\xf5.?3\x0e@?\xf0("?J\x91Y?][\x95?\x8fX\xd5?\xd6\x0e@?\xae:3?\xadKD?W\xf7.?\x18\x1aQ?\x83%\x82?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S'80\xbd\x04\x80<\xbd\x04\xe0\xb0\xbf\x04X\xb1\xbf\x04\xc8\xbf\xbf\x04P\xbc\xbf\x04\x90\xb8\xbf\x040\xb8\xbf\x04 \xbf\xbf\x04\xe8\xba\xbf\x04\xe8\xbd\xbf\x04\x98\xb9\xbf\x048\xb9\xbf\x04\x80\xb9\xbf\x04\xd8\xb2\xbf\x04@\xba\xbf\x04\x80\xb3\xbf\x04\x18\xbb\xbf\x048\xbf\xbf\x04H\xb8\xbf\x04\xd0\xb7\xbf\x04\x98\xbc\xbf\x04`\xb5\xbf\x04`\xb8\xbf\x04@\xb7\xbf\x04p\xbd\xbf\x04p\xb7\xbf\x04P\xb9\xbf\x04x\xbe\xbf\x04\xf8\xb0\xbf\x04x\xb2\xbf\x040\xbe\xbf\x04P\xb3\xbf\x04H\xbe\xbf\x04h\xb0\xbf\x04\xc0\xbe\xbf\x04\x18\xb8\xbf\x04\xb8\xb4\xbf\x04\x98\xbf\xbf\x04\x80\xb6\xbf\x04\xc8v\xe2\x04\xf8p\xe2\x04 |\xe2\x04H~\xe2\x04\xa0t\xe2\x04\xf8y\xe2\x048\x7f\xe2\x04\x88t\xe2\x04\x18u\xe2\x04\x80v\xe2\x04\xc8\x7f\xe2\x048p\xe2\x04(q\xe2\x04\xb0v\xe2\x04\xe8t\xe2\x040u\xe2\x04\x08y\xe2\x04pz\xe2\x04\x10}\xe2\x04xr\xe2\x04\xc8y\xe2\x04\xf8|\xe2\x04\xb0p\xe2\x04\xa0q\xe2\x04\xd0q\xe2\x04xu\xe2\x04\x88}\xe2\x04\x08s\xe2\x04Pv\xe2\x04Ps\xe2\x04 p\xe2\x04\x80y\xe2\x04\x98p\xe2\x04\x88q\xe2\x04Xq\xe2\x04\xc0{\xe2\x04\xd8x\xe2\x04\xb8t\xe2\x04\x90u\xe2\x04\x98v\xe2\x040{\xe2\x040r\xe2\x04\x10q\xe2\x04Hx\xe2\x04\xd0w\xe2\x04\xd8r\xe2\x04\xe8q\xe2\x04\xa8u\xe2\x04\x80|\xe2\x04\xd0z\xe2\x04\x90r\xe2\x04\x18x\xe2\x04 \x7f\xe2\x04h|\xe2\x04\xa0w\xe2\x04@w\xe2\x04@q\xe2\x04hv\xe2\x04\xc0x\xe2\x04\x80p\xe2\x04\x80\x7f\xe2\x04Xw\xe2\x048|\xe2\x04\xf0u\xe2\x04\xb8}\xe2\x04\x00~\xe2\x04@}\xe2\x04\x88z\xe2\x04\xb8z\xe2\x04\xa8x\xe2\x04\xb8w\xe2\x04\xa8~\xe2\x04Hu\xe2\x04\x90x\xe2\x04(w\xe2\x04pw\xe2\x04\x08|\xe2\x04\x98\x7f\xe2\x04hy\xe2\x04`{\xe2\x04\xa0z\xe2\x040~\xe2\x04`x\xe2\x04\xa8{\xe2\x04\x18r\xe2\x04\x98|\xe2\x04h\x7f\xe2\x04\xd8~\xe2\x04\xd0}\xe2\x04H{\xe2\x04\xe0|\xe2\x04\xb8q\xe2\x04\xa0}\xe2\x04`~\xe2\x04\xb0|\xe2\x048v\xe2\x04\xe8w\xe2\x04\x00{\xe2\x04\xb0\x7f\xe2\x04\xb0y\xe2\x04(}\xe2\x04P|\xe2\x04Xz\xe2\x04\x18~\xe2\x04Pp\xe2\x04\x08v\xe2\x04xx\xe2\x04\xe0\x7f\xe2\x04\xd8{\xe2\x04\xc0u\xe2\x04\xf8v\xe2\x04\x18{\xe2\x04\xd0t\xe2\x04\xe0v\xe2\x04\xf0~\xe2\x04\x98y\xe2\x04p}\xe2\x048y\xe2\x04\x10z\xe2\x04X}\xe2\x04\xf0{\xe2\x04\x88w\xe2\x04\xe0y\xe2\x04\xa8r\xe2\x04(t\xe2\x04@z\xe2\x04Xt\xe2\x04 v\xe2\x04\xf0x\xe2\x04x~\xe2\x04\x00u\xe2\x04P\x7f\xe2\x04(z\xe2\x04 y\xe2\x04\xe8}\xe2\x04\x08\x7f\xe2\x040x\xe2\x04h\xb9\xbf\x04\x90\xb5\xbf\x04\x88\xbd\xbf\x04\x00\xb2\xbf\x04\xf0\xb5\xbf\x04p\xb4\xbf\x04\xb0\xbc\xbf\x04\x10\xb4\xbf\x04\x10\xbd\xbf\x04\xe8\xb7\xbf\x04\x98\xb0\xbf\x04\xa8\xb2\xbf\x04\xa0\xb1\xbf\x04\xd0\xb1\xbf\x04\xc8\xb0\xbf\x04\xe0\xb6\xbf\x04(\xbd\xbf\x04\xc0\xb2\xbf\x04X\xbd\xbf\x04\x08\xbf\xbf\x04\xf8\xb6\xbf\x04h\xb6\xbf\x04\x10\xb7\xbf\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6412
sg6370
g6442
sg6384
g6419
sg6379
g6449
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6467
sg6370
g6457
sg6384
g6461
sg6379
g6465
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6478
sg6370
g6474
sg6384
g6485
sg6379
g6482
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6495
sg6370
g6491
sg6384
g6502
sg6379
g6499
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6512
sg6370
g6508
sg6384
g6519
sg6379
g6516
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6412
sg6370
g6442
sg6384
g6419
sg6379
g6449
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6401
sg6370
g6568
sg6384
g6395
sg6379
g6575
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6542
sg6370
g6583
sg6384
g6549
sg6379
g6590
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6602
sg6370
g6598
sg6384
g6609
sg6379
g6606
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6512
sg6370
g6508
sg6384
g6519
sg6379
g6516
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6375
sg6370
g6628
sg6384
g6385
sg6379
g6635
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6647
sg6370
g6643
sg6384
g6654
sg6379
g6651
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6664
sg6370
g6660
sg6384
g6671
sg6379
g6668
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6401
sg6370
g6568
sg6384
g6395
sg6379
g6575
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6478
sg6370
g6474
sg6384
g6485
sg6379
g6482
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6664
sg6370
g6716
sg6384
g6671
sg6379
g6723
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6478
sg6370
g6474
sg6384
g6485
sg6379
g6482
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6748
sg6370
g6744
sg6384
g6755
sg6379
g6752
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6495
sg6370
g6761
sg6384
g6502
sg6379
g6768
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6786
sg6370
g6776
sg6384
g6780
sg6379
g6784
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6664
sg6370
g6660
sg6384
g6671
sg6379
g6668
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6829
sg6370
g6819
sg6384
g6823
sg6379
g6827
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6467
sg6370
g6836
sg6384
g6461
sg6379
g6843
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6542
sg6370
g6583
sg6384
g6549
sg6379
g6590
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6829
sg6370
g6877
sg6384
g6823
sg6379
g6884
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6602
sg6370
g6892
sg6384
g6609
sg6379
g6899
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6911
sg6370
g6907
sg6384
g6918
sg6379
g6915
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6412
sg6370
g6442
sg6384
g6419
sg6379
g6449
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6941
sg6370
g6937
sg6384
g6948
sg6379
g6945
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6478
sg6370
g6954
sg6384
g6485
sg6379
g6961
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6467
sg6370
g6457
sg6384
g6461
sg6379
g6465
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6986
sg6370
g6982
sg6384
g6993
sg6379
g6990
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6786
sg6370
g6999
sg6384
g6780
sg6379
g7006
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g7018
sg6370
g7014
sg6384
g7025
sg6379
g7022
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6786
sg6370
g6999
sg6384
g6780
sg6379
g7006
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g6829
sg6370
g6877
sg6384
g6823
sg6379
g6884
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6911
sg6370
g7057
sg6384
g6918
sg6379
g7064
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g6829
sg6370
g6877
sg6384
g6823
sg6379
g6884
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6664
sg6370
g6716
sg6384
g6671
sg6379
g6723
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6986
sg6370
g7098
sg6384
g6993
sg6379
g7105
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6512
sg6370
g7113
sg6384
g6519
sg6379
g7120
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6748
sg6370
g6744
sg6384
g6755
sg6379
g6752
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6911
sg6370
g6907
sg6384
g6918
sg6379
g6915
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g6495
sg6370
g6491
sg6384
g6502
sg6379
g6499
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6478
sg6370
g6954
sg6384
g6485
sg6379
g6961
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6542
sg6370
g6583
sg6384
g6549
sg6379
g6590
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g6664
sg6370
g6716
sg6384
g6671
sg6379
g6723
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6401
sg6370
g6568
sg6384
g6395
sg6379
g6575
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6478
sg6370
g6954
sg6384
g6485
sg6379
g6961
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g7018
sg6370
g7014
sg6384
g7025
sg6379
g7022
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g6412
sg6370
g6442
sg6384
g6419
sg6379
g6449
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6829
sg6370
g6877
sg6384
g6823
sg6379
g6884
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g6602
sg6370
g6892
sg6384
g6609
sg6379
g6899
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g6495
sg6370
g6491
sg6384
g6502
sg6379
g6499
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6375
sg6370
g6628
sg6384
g6385
sg6379
g6635
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g7018
sg6370
g7014
sg6384
g7025
sg6379
g7022
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g7359
sg6370
g7349
sg6384
g7353
sg6379
g7357
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6478
sg6370
g6474
sg6384
g6485
sg6379
g6482
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g6467
sg6370
g6836
sg6384
g6461
sg6379
g6843
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g7018
sg6370
g7014
sg6384
g7025
sg6379
g7022
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6647
sg6370
g7405
sg6384
g6654
sg6379
g7412
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6911
sg6370
g7057
sg6384
g6918
sg6379
g7064
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g6429
sg6370
g7433
sg6384
g6436
sg6379
g7440
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6542
sg6370
g6583
sg6384
g6549
sg6379
g6590
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6429
sg6370
g7433
sg6384
g6436
sg6379
g7440
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6602
sg6370
g6892
sg6384
g6609
sg6379
g6899
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6748
sg6370
g7500
sg6384
g6755
sg6379
g7507
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g7359
sg6370
g7541
sg6384
g7353
sg6379
g7548
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g6786
sg6370
g6999
sg6384
g6780
sg6379
g7006
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g6941
sg6370
g7569
sg6384
g6948
sg6379
g7576
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g6829
sg6370
g6819
sg6384
g6823
sg6379
g6827
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6375
sg6370
g6628
sg6384
g6385
sg6379
g6635
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g7359
sg6370
g7541
sg6384
g7353
sg6379
g7548
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g6401
sg6370
g6568
sg6384
g6395
sg6379
g6575
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g6664
sg6370
g6716
sg6384
g6671
sg6379
g6723
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6941
sg6370
g6937
sg6384
g6948
sg6379
g6945
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g6786
sg6370
g6999
sg6384
g6780
sg6379
g7006
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g6664
sg6370
g6660
sg6384
g6671
sg6379
g6668
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g6986
sg6370
g7098
sg6384
g6993
sg6379
g7105
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g6495
sg6370
g6761
sg6384
g6502
sg6379
g6768
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6941
sg6370
g7569
sg6384
g6948
sg6379
g7576
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g6602
sg6370
g6598
sg6384
g6609
sg6379
g6606
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g6941
sg6370
g7569
sg6384
g6948
sg6379
g7576
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6429
sg6370
g7433
sg6384
g6436
sg6379
g7440
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g6478
sg6370
g6474
sg6384
g6485
sg6379
g6482
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6941
sg6370
g6937
sg6384
g6948
sg6379
g6945
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g6412
sg6370
g6442
sg6384
g6419
sg6379
g6449
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6748
sg6370
g7500
sg6384
g6755
sg6379
g7507
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6401
sg6370
g6568
sg6384
g6395
sg6379
g6575
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g6986
sg6370
g6982
sg6384
g6993
sg6379
g6990
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g7359
sg6370
g7349
sg6384
g7353
sg6379
g7357
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g7018
sg6370
g7883
sg6384
g7025
sg6379
g7890
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g7359
sg6370
g7541
sg6384
g7353
sg6379
g7548
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6748
sg6370
g6744
sg6384
g6755
sg6379
g6752
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g6647
sg6370
g6643
sg6384
g6654
sg6379
g6651
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g7018
sg6370
g7883
sg6384
g7025
sg6379
g7890
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g6602
sg6370
g6598
sg6384
g6609
sg6379
g6606
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g7359
sg6370
g7349
sg6384
g7353
sg6379
g7357
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6512
sg6370
g7113
sg6384
g6519
sg6379
g7120
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g6786
sg6370
g6776
sg6384
g6780
sg6379
g6784
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g6647
sg6370
g7405
sg6384
g6654
sg6379
g7412
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6911
sg6370
g6907
sg6384
g6918
sg6379
g6915
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g7018
sg6370
g7014
sg6384
g7025
sg6379
g7022
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g6602
sg6370
g6892
sg6384
g6609
sg6379
g6899
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g7018
sg6370
g7883
sg6384
g7025
sg6379
g7890
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g6467
sg6370
g6836
sg6384
g6461
sg6379
g6843
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6941
sg6370
g7569
sg6384
g6948
sg6379
g7576
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g6602
sg6370
g6598
sg6384
g6609
sg6379
g6606
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g6748
sg6370
g6744
sg6384
g6755
sg6379
g6752
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6647
sg6370
g7405
sg6384
g6654
sg6379
g7412
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g6467
sg6370
g6836
sg6384
g6461
sg6379
g6843
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g6647
sg6370
g6643
sg6384
g6654
sg6379
g6651
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6829
sg6370
g6819
sg6384
g6823
sg6379
g6827
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6478
sg6370
g6954
sg6384
g6485
sg6379
g6961
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g6786
sg6370
g6776
sg6384
g6780
sg6379
g6784
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g6512
sg6370
g6508
sg6384
g6519
sg6379
g6516
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6911
sg6370
g7057
sg6384
g6918
sg6379
g7064
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6467
sg6370
g6836
sg6384
g6461
sg6379
g6843
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6986
sg6370
g7098
sg6384
g6993
sg6379
g7105
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g6495
sg6370
g6761
sg6384
g6502
sg6379
g6768
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g6911
sg6370
g7057
sg6384
g6918
sg6379
g7064
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6829
sg6370
g6877
sg6384
g6823
sg6379
g6884
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g7359
sg6370
g7349
sg6384
g7353
sg6379
g7357
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6911
sg6370
g6907
sg6384
g6918
sg6379
g6915
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g6664
sg6370
g6716
sg6384
g6671
sg6379
g6723
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g6986
sg6370
g6982
sg6384
g6993
sg6379
g6990
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6911
sg6370
g7057
sg6384
g6918
sg6379
g7064
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6986
sg6370
g6982
sg6384
g6993
sg6379
g6990
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6429
sg6370
g7433
sg6384
g6436
sg6379
g7440
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6478
sg6370
g6954
sg6384
g6485
sg6379
g6961
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6512
sg6370
g7113
sg6384
g6519
sg6379
g7120
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6647
sg6370
g7405
sg6384
g6654
sg6379
g7412
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g6664
sg6370
g6660
sg6384
g6671
sg6379
g6668
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g6512
sg6370
g7113
sg6384
g6519
sg6379
g7120
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6748
sg6370
g7500
sg6384
g6755
sg6379
g7507
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6941
sg6370
g7569
sg6384
g6948
sg6379
g7576
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g6512
sg6370
g7113
sg6384
g6519
sg6379
g7120
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6495
sg6370
g6761
sg6384
g6502
sg6379
g6768
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g6829
sg6370
g6819
sg6384
g6823
sg6379
g6827
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6512
sg6370
g6508
sg6384
g6519
sg6379
g6516
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g6602
sg6370
g6598
sg6384
g6609
sg6379
g6606
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g7359
sg6370
g7541
sg6384
g7353
sg6379
g7548
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g6748
sg6370
g7500
sg6384
g6755
sg6379
g7507
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g7018
sg6370
g7883
sg6384
g7025
sg6379
g7890
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6512
sg6370
g6508
sg6384
g6519
sg6379
g6516
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g6786
sg6370
g6999
sg6384
g6780
sg6379
g7006
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g6542
sg6370
g6538
sg6384
g6549
sg6379
g6546
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g6664
sg6370
g6660
sg6384
g6671
sg6379
g6668
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6467
sg6370
g6457
sg6384
g6461
sg6379
g6465
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6748
sg6370
g6744
sg6384
g6755
sg6379
g6752
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6941
sg6370
g6937
sg6384
g6948
sg6379
g6945
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g7359
sg6370
g7541
sg6384
g7353
sg6379
g7548
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6911
sg6370
g6907
sg6384
g6918
sg6379
g6915
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6495
sg6370
g6491
sg6384
g6502
sg6379
g6499
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6647
sg6370
g7405
sg6384
g6654
sg6379
g7412
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g6542
sg6370
g6583
sg6384
g6549
sg6379
g6590
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6786
sg6370
g6776
sg6384
g6780
sg6379
g6784
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g7018
sg6370
g7883
sg6384
g7025
sg6379
g7890
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6495
sg6370
g6491
sg6384
g6502
sg6379
g6499
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6375
sg6370
g6628
sg6384
g6385
sg6379
g6635
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6647
sg6370
g6643
sg6384
g6654
sg6379
g6651
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g6495
sg6370
g6761
sg6384
g6502
sg6379
g6768
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g6986
sg6370
g7098
sg6384
g6993
sg6379
g7105
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g6467
sg6370
g6457
sg6384
g6461
sg6379
g6465
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6829
sg6370
g6819
sg6384
g6823
sg6379
g6827
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6375
sg6370
g6628
sg6384
g6385
sg6379
g6635
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6986
sg6370
g7098
sg6384
g6993
sg6379
g7105
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6602
sg6370
g6892
sg6384
g6609
sg6379
g6899
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g6748
sg6370
g7500
sg6384
g6755
sg6379
g7507
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g7359
sg6370
g7349
sg6384
g7353
sg6379
g7357
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6429
sg6370
g7433
sg6384
g6436
sg6379
g7440
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g6786
sg6370
g6776
sg6384
g6780
sg6379
g6784
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g6467
sg6370
g6457
sg6384
g6461
sg6379
g6465
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6647
sg6370
g6643
sg6384
g6654
sg6379
g6651
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g6986
sg6370
g6982
sg6384
g6993
sg6379
g6990
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g6941
sg6370
g6937
sg6384
g6948
sg6379
g6945
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.