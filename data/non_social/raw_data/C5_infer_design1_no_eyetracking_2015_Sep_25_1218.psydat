ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C5_infer_design1_no_eyetracking_2015_Sep_25_1218
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vl
sVcontacts
p57
Vn
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x1c-\x81\x9a\xf3\x04N@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Sep_25_1218
p66
sVparticipant
p67
VC5
p68
sVglasses
p69
Vy
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vl
sg15
F0.75012430264905561
sg14
S'space'
p88
sg58
g62
sg57
Vn
sg55
g11
sg65
g66
sg67
g68
sg69
Vy
sa(dp89
g63
g64
sg56
Vl
sg57
Vn
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F14.583125116891097
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P4\x00'
tbsg69
Vy
sa(dp95
g63
g64
sg20
F7.4500000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F0.49999999999999933
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x0f\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p102
sg21
F1.3
sg69
Vy
sa(dp103
g63
g64
sg20
F7.5010000000000003
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F0.97999999999999932
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'$\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V48-twix.png
p109
sg21
F1.8
sg69
Vy
sa(dp110
g63
g64
sg20
F3.1669999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F0.1399999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S' \x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p116
sg21
F1.1000000000000001
sg69
Vy
sa(dp117
g63
g64
sg20
F7.984
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F1.5
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'\x0b\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p123
sg21
F1.5
sg69
Vy
sa(dp124
g63
g64
sg20
F3.1339999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'\x01\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p130
sg21
F1.6000000000000001
sg69
Vy
sa(dp131
g63
g64
sg20
F2.984
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'\n\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p137
sg21
F1.8
sg69
Vy
sa(dp138
g63
g64
sg20
F8.1839999999999993
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F0.7999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'\x1f\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p144
sg21
F1.2
sg69
Vy
sa(dp145
g63
g64
sg20
F2.0009999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F1.5000000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'\x1c\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p151
sg21
F1.2
sg69
Vy
sa(dp152
g63
g64
sg20
F10.351000000000001
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F1.4799999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x13\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p158
sg21
F2
sg69
Vy
sa(dp159
g63
g64
sg20
F2.0169999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F0.97999999999999932
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'\t\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p165
sg21
F1.7
sg69
Vy
sa(dp166
g63
g64
sg20
F2.4670000000000001
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F0.49999999999999889
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'\r\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p172
sg21
F1.7
sg69
Vy
sa(dp173
g63
g64
sg20
F3.3839999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F0.019999999999998717
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S'\x06\x00\x00\x00'
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V7-olives.png
p179
sg21
F1.8
sg69
Vy
sa(dp180
g63
g64
sg20
F3.3010000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F0.49999999999999889
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'\x00\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p186
sg21
F1.7
sg69
Vy
sa(dp187
g63
g64
sg20
F4.601
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F1.0399999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'\x19\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p193
sg21
F1.2
sg69
Vy
sa(dp194
g63
g64
sg20
F1.901
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F0.7999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'&\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V50-polo.png
p200
sg21
F1.3
sg69
Vy
sa(dp201
g63
g64
sg20
F5.9009999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F0.49999999999999911
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'\x10\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V22-daim.png
p207
sg21
F1.5
sg69
Vy
sa(dp208
g63
g64
sg20
F5.7169999999999996
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F1.02
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'\x05\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p214
sg21
F1.1000000000000001
sg69
Vy
sa(dp215
g63
g64
sg20
F1.917
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F1.4599999999999997
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'\x1e\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p221
sg21
F1.8
sg69
Vy
sa(dp222
g63
g64
sg20
F3.0339999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F0.019999999999998717
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x1d\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V40-sardines.png
p228
sg21
F1.7
sg69
Vy
sa(dp229
g63
g64
sg20
F2.6339999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F0.41999999999999882
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'%\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p235
sg21
F1.7
sg69
Vy
sa(dp236
g63
g64
sg20
F3.3010000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F0.95999999999999974
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'\x15\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V29-beans.png
p242
sg21
F1.2
sg69
Vy
sa(dp243
g63
g64
sg20
F2.7509999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'\x07\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p249
sg21
F1.3999999999999999
sg69
Vy
sa(dp250
g63
g64
sg20
F3.234
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F1.5799999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S'\x0c\x00\x00\x00'
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V18-mms.png
p256
sg21
F1.8999999999999999
sg69
Vy
sa(dp257
g63
g64
sg20
F2.2669999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F0.23999999999999869
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'\x18\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p263
sg21
F1.8
sg69
Vy
sa(dp264
g63
g64
sg20
F2.0169999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F0.99999999999999978
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'\x03\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V4-corn.png
p270
sg21
F1.3
sg69
Vy
sa(dp271
g63
g64
sg20
F5.3010000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F1.0799999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'\x12\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p277
sg21
F1.6000000000000001
sg69
Vy
sa(dp278
g63
g64
sg20
F2.1339999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F0.49999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'\x02\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p284
sg21
F1.1000000000000001
sg69
Vy
sa(dp285
g63
g64
sg20
F2.0670000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F1.0199999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S'\x0e\x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p291
sg21
F1.6000000000000001
sg69
Vy
sa(dp292
g63
g64
sg20
F3.0339999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F0.93999999999999928
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S'\x1a\x00\x00\x00'
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V35-raisins.png
p298
sg21
F1.8
sg69
Vy
sa(dp299
g63
g64
sg20
F2.6339999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F1.0399999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S'!\x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V44-crunch.png
p305
sg21
F1.8
sg69
Vy
sa(dp306
g63
g64
sg20
F1.2669999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F1.5
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S"'\x00\x00\x00"
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V51-mars.png
p312
sg21
F1.5
sg69
Vy
sa(dp313
g63
g64
sg20
F3.1840000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F0.65999999999999925
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S'"\x00\x00\x00'
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p319
sg21
F1.6000000000000001
sg69
Vy
sa(dp320
g63
g64
sg20
F3.234
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'\x14\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p326
sg21
F1.7
sg69
Vy
sa(dp327
g63
g64
sg20
F3.2839999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F1.0199999999999991
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'\x1b\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p333
sg21
F1.8999999999999999
sg69
Vy
sa(dp334
g63
g64
sg20
F2.117
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F0.45999999999999908
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'\x04\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p340
sg21
F1.6000000000000001
sg69
Vy
sa(dp341
g63
g64
sg20
F2.3839999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F0.079999999999998725
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S'\x08\x00\x00\x00'
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p347
sg21
F1.7
sg69
Vy
sa(dp348
g63
g64
sg20
F3.9340000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F1.0999999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S'\x17\x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p354
sg21
F1.7
sg69
Vy
sa(dp355
g63
g64
sg20
F3.851
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F0.89999999999999969
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S'\x11\x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p361
sg21
F1.3
sg69
Vy
sa(dp362
g63
g64
sg20
F2.4670000000000001
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F0.099999999999999173
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'\x16\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p368
sg21
F1.2
sg69
Vy
sa(dp369
g63
g64
sg20
F5.2839999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F2.5600000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'#\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p375
sg21
F1.8
sg69
Vy
sa(dp376
g63
g64
sg55
g11
sg56
Vl
sg23
F2.5501056572538801
sg57
Vn
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vy
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p380
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'30-spaghetti_hoops.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vl
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'left'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F3.3999856880891457
sg27
F8.7170000000000005
sg69
Vy
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'4-corn.png'
p389
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'10-bounty_redo.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vl
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'left'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F2.2833433307641826
sg27
F1.151
sg69
Vy
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'49-yorkie.png'
p398
sg26
F4.1000000000000014
sg28
F3
sg58
g62
sg57
Vn
sg80
S'35-raisins.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vl
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'right'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F2.2333648271396669
sg27
F1.367
sg69
Vy
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'48-twix.png'
p407
sg26
F2.0999999999999992
sg28
F3
sg58
g62
sg57
Vn
sg80
S'50-polo.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vl
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'right'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F6.1166375106622581
sg27
F1.401
sg69
Vy
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p416
sg26
F5.2999999999999998
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'45-chewy_nougat_redo.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vl
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'left'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F2.3334780679942924
sg27
F1.1839999999999999
sg69
Vy
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p425
sg26
F4.8000000000000007
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'42-mrkipling_lemon_slices.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vl
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'right'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F2.0833383700610284
sg27
F0.98399999999999999
sg69
Vy
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p434
sg26
F1.399999999999999
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'21-nakd_banana_crunch.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vl
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'left'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F7.516398256570028
sg27
F1.234
sg69
Vy
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p443
sg26
F5.5999999999999996
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'20-fruit_pastilles.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vl
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'right'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F1.783457369892858
sg27
F1.034
sg69
Vy
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p452
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'19-caramello_redo.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vl
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'right'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F3.0334282899148093
sg27
F0.86699999999999999
sg69
Vy
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p461
sg26
F3.9000000000000008
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'38-maltesers.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vl
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'right'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F3.5665147475392587
sg27
F0.90100000000000002
sg69
Vy
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'7-olives.png'
p470
sg26
F2.8999999999999995
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'22-daim.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vl
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'right'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F2.166777379654377
sg27
F0.83399999999999996
sg69
Vy
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p479
sg26
F5.0000000000000009
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'33-ambrosia_rice.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vl
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'left'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F2.2001765895911376
sg27
F1.867
sg69
Vy
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'22-daim.png'
p488
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'7-olives.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vl
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'left'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F1.3501274957452551
sg27
F1.9670000000000001
sg69
Vy
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p497
sg26
F4.7000000000000011
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'2-steamed_puddings.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vl
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'left'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F1.6834464791554637
sg27
F0.93400000000000005
sg69
Vy
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p506
sg26
F5.5999999999999996
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'51-mars.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vl
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'right'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F1.3833704720764217
sg27
F0.78400000000000003
sg69
Vy
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p515
sg26
F2.7999999999999994
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'23-crunchie_redo.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vl
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'right'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F2.3333389402578177
sg27
F1.1339999999999999
sg69
Vy
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p524
sg26
F4.9000000000000012
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'13-mccoys_steak_crisps.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vl
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'right'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F1.4667413432889589
sg27
F0.65100000000000002
sg69
Vy
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'46-pistachios.png'
p533
sg26
F5.9999999999999982
sg28
F3
sg58
g62
sg57
Vn
sg80
S'29-beans.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vl
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'left'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F1.1338032505700539
sg27
F0.86699999999999999
sg69
Vy
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'25-kitkat.png'
p542
sg26
F1.399999999999999
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'31-hobnobs.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vl
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'left'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F11.583190404291599
sg27
F0.55100000000000005
sg69
Vy
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p551
sg26
F4.9000000000000012
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'4-corn.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vl
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'right'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F2.3000953937316808
sg27
F0.61799999999999999
sg69
Vy
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'18-mms.png'
p560
sg26
F5.6999999999999984
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'43-mrporky_pork_crackles_redo.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vl
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'left'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F1.6333565022832772
sg27
F0.45100000000000001
sg69
Vy
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'44-crunch.png'
p569
sg26
F5.3000000000000007
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'26-walkers_smoky_bacon.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vl
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'right'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F1.3166410458761675
sg27
F0.76700000000000002
sg69
Vy
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'40-sardines.png'
p578
sg26
F2.4999999999999996
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'5-pineapple.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vl
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'right'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F1.5333302162653126
sg27
F0.60099999999999998
sg69
Vy
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'50-polo.png'
p587
sg26
F1.0999999999999994
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'48-twix.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vl
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'left'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F2.7667244084805134
sg27
F0.45100000000000001
sg69
Vy
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'38-maltesers.png'
p596
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'6-sour_patch_kids.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vl
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'left'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F1.4164460959837015
sg27
F0.66700000000000004
sg69
Vy
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p605
sg26
F4.5000000000000009
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'36-fig_rolls.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vl
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'left'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F2.5166693846003909
sg27
F0.58399999999999996
sg69
Vy
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'5-pineapple.png'
p614
sg26
F1.9999999999999991
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'40-sardines.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vl
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'left'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F2.8499498798028071
sg27
F2.234
sg69
Vy
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p623
sg26
F2.9999999999999991
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'16-skips_prawn.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vl
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'left'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F2.0837531873930857
sg27
F3.1179999999999999
sg69
Vy
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p632
sg26
F4.9000000000000021
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'18-mms.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vl
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'right'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F2.133405539108935
sg27
F1.7509999999999999
sg69
Vy
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p641
sg26
F4.2000000000000011
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'8-liquorice_catherine_wheels.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vl
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'left'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F3.0166882010562404
sg27
F2.4169999999999998
sg69
Vy
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'51-mars.png'
p650
sg26
F5.5
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'27-hartleys_raspberries_jelly.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vl
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'left'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F6.133333124260389
sg27
F0.93400000000000005
sg69
Vy
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p659
sg26
F3.8999999999999999
sg28
F4
sg58
g62
sg57
Vn
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vl
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'right'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F3.2000622653649771
sg27
F2.0339999999999998
sg69
Vy
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'35-raisins.png'
p668
sg26
F2.9999999999999991
sg28
F4
sg58
g62
sg57
Vn
sg80
S'49-yorkie.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vl
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'left'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F2.8500479534541228
sg27
F0.80100000000000005
sg69
Vy
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p677
sg26
F5.1000000000000005
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'17-jacobs_mini_cheddars_redo.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vl
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'right'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F1.8500818800948764
sg27
F1.234
sg69
Vy
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'29-beans.png'
p686
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'46-pistachios.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vl
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'right'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F1.0167207022077491
sg27
F1.284
sg69
Vy
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p695
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'3-ellas_strawberries_apples.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vl
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'left'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F1.1667388914484036
sg27
F1.234
sg69
Vy
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'31-hobnobs.png'
p704
sg26
F1
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'25-kitkat.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vl
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'left'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F8.4667410581914737
sg27
F1.5840000000000001
sg69
Vy
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p713
sg26
F5
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'44-crunch.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vl
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'left'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F1.5499431514945172
sg27
F1.0669999999999999
sg69
Vy
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p722
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'41-peanuts_redo.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vl
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'right'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F2.233516214084375
sg27
F1.117
sg69
Vy
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p731
sg26
F1.8999999999999992
sg28
F3
sg58
g62
sg57
Vn
sg80
S'1-treacle_cookies.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vl
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'right'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F4.2167664318985771
sg27
F0.80100000000000005
sg69
Vy
sa(dp738
g63
g64
sg56
Vl
sg29
S'space'
p739
sg57
Vn
sg58
g62
sg30
F415.62183740985165
sg55
g11
sg65
g66
sg67
g68
sg69
Vy
sa(dp740
g63
g64
sg56
Vl
sg57
Vn
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F3.7001266974730243
sg65
g66
sg67
g68
sg69
Vy
sa(dp742
g63
g64
sg81
S'12-topic.png'
p743
sg82
S'12-topic.png'
p744
sg56
Vl
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'39-mackerel.png'
p748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S'\x07\xdf\t\x19\x0c!,\x01(\xe0'
tRp753
sa(dp754
g63
g64
sg81
S'52-aero_mousse.png'
p755
sg82
S'52-aero_mousse.png'
p756
sg56
Vl
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'14-discos_salt_vinegar.png'
p760
sg33
g760
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S'\x07\xdf\t\x19\x0c!4\x0e\xc5@'
tRp764
sa(dp765
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p766
sg82
S'9-yu_mango_pieces.png'
p767
sg56
Vl
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'9-yu_mango_pieces.png'
p771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S'\x07\xdf\t\x19\x0c"\x00\r\xda\xe0'
tRp775
sa(dp776
g63
g64
sg81
S'15-walnut_whip.png'
p777
sg82
S'28-maple_pecan.png'
p778
sg56
Vl
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p781
I0
sg83
S'28-maple_pecan.png'
p782
sg33
g782
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p783
sS'practice_loop.thisIndex'
p784
g59
(g98
S'\x03\x00\x00\x00'
tRp785
sg34
g752
(S'\x07\xdf\t\x19\x0c"\t\x08hX'
tRp786
sa(dp787
g63
g64
sg81
g755
sg82
S'14-discos_salt_vinegar.png'
p788
sg56
Vl
sS'practice_loop.thisN'
p789
I4
sS'practice_loop.thisTrialN'
p790
I4
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p791
I0
sg83
g760
sg33
g760
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p792
sS'practice_loop.thisIndex'
p793
g59
(g98
S'\x04\x00\x00\x00'
tRp794
sg34
g752
(S'\x07\xdf\t\x19\x0c"\x10\x0c\xc1\xa0'
tRp795
sa(dp796
g63
g64
sg81
S'32-hovis_crackers.png'
p797
sg82
S'32-hovis_crackers.png'
p798
sg56
Vl
sS'practice_loop.thisN'
p799
I5
sS'practice_loop.thisTrialN'
p800
I5
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p801
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p802
sg33
g797
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p803
sS'practice_loop.thisIndex'
p804
g59
(g98
S'\x05\x00\x00\x00'
tRp805
sg34
g752
(S'\x07\xdf\t\x19\x0c"\x18\x0e\xb5\xa0'
tRp806
sa(dp807
g63
g64
sg81
S'53-cheestrings.png'
p808
sg82
S'47-picnic.png'
p809
sg56
Vl
sS'practice_loop.thisN'
p810
I6
sS'practice_loop.thisTrialN'
p811
I6
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p812
I0
sg83
S'47-picnic.png'
p813
sg33
g808
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p814
sS'practice_loop.thisIndex'
p815
g59
(g98
S'\x06\x00\x00\x00'
tRp816
sg34
g752
(S'\x07\xdf\t\x19\x0c" \x03\x8e('
tRp817
sa(dp818
g63
g64
sg81
S'11-snickers.png'
p819
sg82
S'54-frubes_yogurt.png'
p820
sg56
Vl
sS'practice_loop.thisN'
p821
I7
sS'practice_loop.thisTrialN'
p822
I7
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p823
I0
sg83
S'54-frubes_yogurt.png'
p824
sg33
g819
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p825
sS'practice_loop.thisIndex'
p826
g59
(g98
S'\x07\x00\x00\x00'
tRp827
sg34
g752
(S'\x07\xdf\t\x19\x0c"\'\x03\xdcH'
tRp828
sa(dp829
g63
g64
sg81
g797
sg82
S'24-food_doctor_apple_walnut_bar.png'
p830
sg56
Vl
sS'practice_loop.thisN'
p831
I8
sS'practice_loop.thisTrialN'
p832
I8
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p833
I0
sg83
g802
sg33
g802
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p834
sS'practice_loop.thisIndex'
p835
g59
(g98
S'\x08\x00\x00\x00'
tRp836
sg34
g752
(S'\x07\xdf\t\x19\x0c".\x08\xb2\x90'
tRp837
sa(dp838
g63
g64
sg81
g777
sg82
S'15-walnut_whip.png'
p839
sg56
Vl
sS'practice_loop.thisN'
p840
I9
sS'practice_loop.thisTrialN'
p841
I9
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p842
I0
sg83
g782
sg33
g782
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p843
sS'practice_loop.thisIndex'
p844
g59
(g98
S'\t\x00\x00\x00'
tRp845
sg34
g752
(S'\x07\xdf\t\x19\x0c"5\x0f.\xb8'
tRp846
sa(dp847
g63
g64
sg81
g766
sg82
S'37-nakd_cashew_cookie.png'
p848
sg56
Vl
sS'practice_loop.thisN'
p849
I10
sS'practice_loop.thisTrialN'
p850
I10
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p851
I0
sg83
g771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p852
sS'practice_loop.thisIndex'
p853
g59
(g98
S'\n\x00\x00\x00'
tRp854
sg34
g752
(S'\x07\xdf\t\x19\x0c#\x02\x01(\xe0'
tRp855
sa(dp856
g63
g64
sg81
g808
sg82
S'53-cheestrings.png'
p857
sg56
Vl
sS'practice_loop.thisN'
p858
I11
sS'practice_loop.thisTrialN'
p859
I11
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p860
I0
sg83
g813
sg33
g808
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\t\x19\x0c#\x08\x08\xa2\xf0'
tRp864
sa(dp865
g63
g64
sg81
g819
sg82
S'11-snickers.png'
p866
sg56
Vl
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g824
sg33
g819
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\t\x19\x0c#\x0e\x08\x02\xc8'
tRp873
sa(dp874
g63
g64
sg81
g743
sg82
S'39-mackerel.png'
p875
sg56
Vl
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\t\x19\x0c#\x15\x00\xeeH'
tRp882
sa(dp883
g63
g64
sg56
Vl
sg57
Vn
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F5.7837943555186939
sg65
g66
sg67
g68
sg69
Vy
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vl
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vy
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'23-crunchie_redo.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'left'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'23-crunchie_redo.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'33-ambrosia_rice.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
S'33-ambrosia_rice.png'
p907
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
g899
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vy
sS'block_loop.thisTrialN'
p911
I0
sg39
F2.7501408383250237
sg34
g752
(S'\x07\xdf\t\x19\x0c#+\x01\x96@'
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'2-steamed_puddings.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'right'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'20-fruit_pastilles.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'20-fruit_pastilles.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p925
I0
sg909
S'2-steamed_puddings.png'
p926
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vy
sS'block_loop.thisTrialN'
p928
I0
sg39
F1.8167297112977394
sg34
g752
(S'\x07\xdf\t\x19\x0c#2\rR('
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'27-hartleys_raspberries_jelly.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'right'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
S'27-hartleys_raspberries_jelly.png'
p936
sg63
g64
sS'trial_loop.thisIndex'
p937
g59
(g98
S'\x02\x00\x00\x00'
tRp938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p939
I0
sg903
S'51-mars.png'
p940
sS'block_loop.thisRepN'
p941
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p942
I0
sg909
S'51-mars.png'
p943
sg55
g11
sS'block_loop.thisTrial'
p944
Nsg69
Vy
sS'block_loop.thisTrialN'
p945
I0
sg39
F1.1667616992745025
sg34
g752
(S'\x07\xdf\t\x19\x0c#9\x0b\x00h'
tRp946
sa(dp947
S'trial_loop.thisTrialN'
p948
I3
sg894
S'33-ambrosia_rice.png'
p949
sS'block_loop.thisIndex'
p950
g888
sg38
S'right'
p951
sg58
g62
sS'trial_loop.thisN'
p952
I3
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p953
g59
(g98
S'\x03\x00\x00\x00'
tRp954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p955
I0
sg903
S'23-crunchie_redo.png'
p956
sS'block_loop.thisRepN'
p957
I0
sg906
g907
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p958
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p959
Nsg69
Vy
sS'block_loop.thisTrialN'
p960
I0
sg39
F1.5667328473737143
sg34
g752
(S'\x07\xdf\t\x19\x0c$\x03\x0e0\xd0'
tRp961
sa(dp962
S'trial_loop.thisTrialN'
p963
I4
sg894
S'25-kitkat.png'
p964
sS'block_loop.thisIndex'
p965
g888
sg38
S'left'
p966
sg58
g62
sS'trial_loop.thisN'
p967
I4
sg33
S'25-kitkat.png'
p968
sg63
g64
sS'trial_loop.thisIndex'
p969
g59
(g98
S'\x04\x00\x00\x00'
tRp970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p971
I0
sg903
S'31-hobnobs.png'
p972
sS'block_loop.thisRepN'
p973
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p974
I0
sg909
S'31-hobnobs.png'
p975
sg55
g11
sS'block_loop.thisTrial'
p976
Nsg69
Vy
sS'block_loop.thisTrialN'
p977
I0
sg39
F2.3501870811924164
sg34
g752
(S'\x07\xdf\t\x19\x0c$\n\x08\x12h'
tRp978
sa(dp979
S'trial_loop.thisTrialN'
p980
I5
sg894
S'16-skips_prawn.png'
p981
sS'block_loop.thisIndex'
p982
g888
sg38
S'right'
p983
sg58
g62
sS'trial_loop.thisN'
p984
I5
sg33
S'42-mrkipling_lemon_slices.png'
p985
sg63
g64
sS'trial_loop.thisIndex'
p986
g59
(g98
S'\x05\x00\x00\x00'
tRp987
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p988
I0
sg903
S'42-mrkipling_lemon_slices.png'
p989
sS'block_loop.thisRepN'
p990
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p991
I0
sg909
S'16-skips_prawn.png'
p992
sg55
g11
sS'block_loop.thisTrial'
p993
Nsg69
Vy
sS'block_loop.thisTrialN'
p994
I0
sg39
F3.3833431026851031
sg34
g752
(S'\x07\xdf\t\x19\x0c$\x11\r\xda\xe0'
tRp995
sa(dp996
S'trial_loop.thisTrialN'
p997
I6
sg894
S'48-twix.png'
p998
sS'block_loop.thisIndex'
p999
g888
sg38
S'left'
p1000
sg58
g62
sS'trial_loop.thisN'
p1001
I6
sg33
S'48-twix.png'
p1002
sg63
g64
sS'trial_loop.thisIndex'
p1003
g59
(g98
S'\x06\x00\x00\x00'
tRp1004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1005
I0
sg903
S'50-polo.png'
p1006
sS'block_loop.thisRepN'
p1007
I0
sg906
S'50-polo.png'
p1008
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1009
I0
sg909
g1002
sg55
g11
sS'block_loop.thisTrial'
p1010
Nsg69
Vy
sS'block_loop.thisTrialN'
p1011
I0
sg39
F2.2834237283495895
sg34
g752
(S'\x07\xdf\t\x19\x0c$\x1a\x05\x10\xe0'
tRp1012
sa(dp1013
S'trial_loop.thisTrialN'
p1014
I7
sg894
S'45-chewy_nougat_redo.png'
p1015
sS'block_loop.thisIndex'
p1016
g888
sg38
S'right'
p1017
sg58
g62
sS'trial_loop.thisN'
p1018
I7
sg33
S'41-peanuts_redo.png'
p1019
sg63
g64
sS'trial_loop.thisIndex'
p1020
g59
(g98
S'\x07\x00\x00\x00'
tRp1021
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1022
I0
sg903
S'41-peanuts_redo.png'
p1023
sS'block_loop.thisRepN'
p1024
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1025
I0
sg909
S'45-chewy_nougat_redo.png'
p1026
sg55
g11
sS'block_loop.thisTrial'
p1027
Nsg69
Vy
sS'block_loop.thisTrialN'
p1028
I0
sg39
F1.250177615944267
sg34
g752
(S'\x07\xdf\t\x19\x0c$!\t\xe3@'
tRp1029
sa(dp1030
S'trial_loop.thisTrialN'
p1031
I8
sg894
S'8-liquorice_catherine_wheels.png'
p1032
sS'block_loop.thisIndex'
p1033
g888
sg38
S'right'
p1034
sg58
g62
sS'trial_loop.thisN'
p1035
I8
sg33
S'8-liquorice_catherine_wheels.png'
p1036
sg63
g64
sS'trial_loop.thisIndex'
p1037
g59
(g98
S'\x08\x00\x00\x00'
tRp1038
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1039
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p1040
sS'block_loop.thisRepN'
p1041
I0
sg906
S'17-jacobs_mini_cheddars_redo.png'
p1042
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1043
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p1044
Nsg69
Vy
sS'block_loop.thisTrialN'
p1045
I0
sg39
F2.3001507027092885
sg34
g752
(S"\x07\xdf\t\x19\x0c$'\x0e\t\xc0"
tRp1046
sa(dp1047
S'trial_loop.thisTrialN'
p1048
I9
sg894
S'26-walkers_smoky_bacon.png'
p1049
sS'block_loop.thisIndex'
p1050
g888
sg38
S'left'
p1051
sg58
g62
sS'trial_loop.thisN'
p1052
I9
sg33
S'44-crunch.png'
p1053
sg63
g64
sS'trial_loop.thisIndex'
p1054
g59
(g98
S'\t\x00\x00\x00'
tRp1055
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1056
I0
sg903
S'44-crunch.png'
p1057
sS'block_loop.thisRepN'
p1058
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1059
I0
sg909
S'26-walkers_smoky_bacon.png'
p1060
sg55
g11
sS'block_loop.thisTrial'
p1061
Nsg69
Vy
sS'block_loop.thisTrialN'
p1062
I0
sg39
F1.1501091354457458
sg34
g752
(S'\x07\xdf\t\x19\x0c$/\x03\xd8`'
tRp1063
sa(dp1064
S'trial_loop.thisTrialN'
p1065
I10
sg894
S'6-sour_patch_kids.png'
p1066
sS'block_loop.thisIndex'
p1067
g888
sg38
S'right'
p1068
sg58
g62
sS'trial_loop.thisN'
p1069
I10
sg33
S'6-sour_patch_kids.png'
p1070
sg63
g64
sS'trial_loop.thisIndex'
p1071
g59
(g98
S'\n\x00\x00\x00'
tRp1072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1073
I0
sg903
S'38-maltesers.png'
p1074
sS'block_loop.thisRepN'
p1075
I0
sg906
S'38-maltesers.png'
p1076
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1077
I0
sg909
g1070
sg55
g11
sS'block_loop.thisTrial'
p1078
Nsg69
Vy
sS'block_loop.thisTrialN'
p1079
I0
sg39
F1.4665432003039314
sg34
g752
(S'\x07\xdf\t\x19\x0c$5\x06\xcaH'
tRp1080
sa(dp1081
S'trial_loop.thisTrialN'
p1082
I11
sg894
S'44-crunch.png'
p1083
sS'block_loop.thisIndex'
p1084
g888
sg38
S'left'
p1085
sg58
g62
sS'trial_loop.thisN'
p1086
I11
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p1087
g59
(g98
S'\x0b\x00\x00\x00'
tRp1088
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1089
I0
sg903
S'26-walkers_smoky_bacon.png'
p1090
sS'block_loop.thisRepN'
p1091
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1092
I0
sg909
g1060
sg55
g11
sS'block_loop.thisTrial'
p1093
Nsg69
Vy
sS'block_loop.thisTrialN'
p1094
I0
sg39
F2.6667357553724287
sg34
g752
(S'\x07\xdf\t\x19\x0c$;\x0e@p'
tRp1095
sa(dp1096
S'trial_loop.thisTrialN'
p1097
I12
sg894
g932
sS'block_loop.thisIndex'
p1098
g888
sg38
S'left'
p1099
sg58
g62
sS'trial_loop.thisN'
p1100
I12
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1101
g59
(g98
S'\x0c\x00\x00\x00'
tRp1102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1103
I0
sg903
g940
sS'block_loop.thisRepN'
p1104
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1105
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p1106
Nsg69
Vy
sS'block_loop.thisTrialN'
p1107
I0
sg39
F1.1335038978577359
sg34
g752
(S'\x07\xdf\t\x19\x0c%\x07\t\xc7\xe8'
tRp1108
sa(dp1109
S'trial_loop.thisTrialN'
p1110
I13
sg894
S'40-sardines.png'
p1111
sS'block_loop.thisIndex'
p1112
g888
sg38
S'right'
p1113
sg58
g62
sS'trial_loop.thisN'
p1114
I13
sg33
S'5-pineapple.png'
p1115
sg63
g64
sS'trial_loop.thisIndex'
p1116
g59
(g98
S'\r\x00\x00\x00'
tRp1117
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1118
I0
sg903
S'5-pineapple.png'
p1119
sS'block_loop.thisRepN'
p1120
I0
sg906
g1115
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1121
I0
sg909
S'40-sardines.png'
p1122
sg55
g11
sS'block_loop.thisTrial'
p1123
Nsg69
Vy
sS'block_loop.thisTrialN'
p1124
I0
sg39
F1.4834506415845681
sg34
g752
(S'\x07\xdf\t\x19\x0c%\r\x0c@\xb8'
tRp1125
sa(dp1126
S'trial_loop.thisTrialN'
p1127
I14
sg894
S'38-maltesers.png'
p1128
sS'block_loop.thisIndex'
p1129
g888
sg38
S'right'
p1130
sg58
g62
sS'trial_loop.thisN'
p1131
I14
sg33
g1076
sg63
g64
sS'trial_loop.thisIndex'
p1132
g59
(g98
S'\x0e\x00\x00\x00'
tRp1133
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1134
I0
sg903
S'6-sour_patch_kids.png'
p1135
sS'block_loop.thisRepN'
p1136
I0
sg906
g1076
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1137
I0
sg909
g1070
sg55
g11
sS'block_loop.thisTrial'
p1138
Nsg69
Vy
sS'block_loop.thisTrialN'
p1139
I0
sg39
F1.3332608234541112
sg34
g752
(S'\x07\xdf\t\x19\x0c%\x14\x04\xf1\xa0'
tRp1140
sa(dp1141
S'trial_loop.thisTrialN'
p1142
I15
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p1143
sS'block_loop.thisIndex'
p1144
g888
sg38
S'left'
p1145
sg58
g62
sS'trial_loop.thisN'
p1146
I15
sg33
S'36-fig_rolls.png'
p1147
sg63
g64
sS'trial_loop.thisIndex'
p1148
g59
(g98
S'\x0f\x00\x00\x00'
tRp1149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1150
I0
sg903
S'36-fig_rolls.png'
p1151
sS'block_loop.thisRepN'
p1152
I0
sg906
g1147
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1153
I0
sg909
S'34-hula_hoops_bbq_beef_redo.png'
p1154
sg55
g11
sS'block_loop.thisTrial'
p1155
Nsg69
Vy
sS'block_loop.thisTrialN'
p1156
I0
sg39
F1.3668470575612446
sg34
g752
(S'\x07\xdf\t\x19\x0c%\x1a\n\x7f\x80'
tRp1157
sa(dp1158
S'trial_loop.thisTrialN'
p1159
I16
sg894
S'41-peanuts_redo.png'
p1160
sS'block_loop.thisIndex'
p1161
g888
sg38
S'left'
p1162
sg58
g62
sS'trial_loop.thisN'
p1163
I16
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p1164
g59
(g98
S'\x10\x00\x00\x00'
tRp1165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1166
I0
sg903
S'45-chewy_nougat_redo.png'
p1167
sS'block_loop.thisRepN'
p1168
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1169
I0
sg909
g1026
sg55
g11
sS'block_loop.thisTrial'
p1170
Nsg69
Vy
sS'block_loop.thisTrialN'
p1171
I0
sg39
F1.0001260132376046
sg34
g752
(S'\x07\xdf\t\x19\x0c%!\x01H '
tRp1172
sa(dp1173
S'trial_loop.thisTrialN'
p1174
I17
sg894
S'42-mrkipling_lemon_slices.png'
p1175
sS'block_loop.thisIndex'
p1176
g888
sg38
S'left'
p1177
sg58
g62
sS'trial_loop.thisN'
p1178
I17
sg33
g985
sg63
g64
sS'trial_loop.thisIndex'
p1179
g59
(g98
S'\x11\x00\x00\x00'
tRp1180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1181
I0
sg903
S'16-skips_prawn.png'
p1182
sS'block_loop.thisRepN'
p1183
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1184
I0
sg909
g992
sg55
g11
sS'block_loop.thisTrial'
p1185
Nsg69
Vy
sS'block_loop.thisTrialN'
p1186
I0
sg39
F3.116594460891065
sg34
g752
(S"\x07\xdf\t\x19\x0c%'\x01\xdc\x90"
tRp1187
sa(dp1188
S'trial_loop.thisTrialN'
p1189
I18
sg894
S'51-mars.png'
p1190
sS'block_loop.thisIndex'
p1191
g888
sg38
S'right'
p1192
sg58
g62
sS'trial_loop.thisN'
p1193
I18
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p1194
g59
(g98
S'\x12\x00\x00\x00'
tRp1195
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1196
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p1197
sS'block_loop.thisRepN'
p1198
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1199
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p1200
Nsg69
Vy
sS'block_loop.thisTrialN'
p1201
I0
sg39
F1.6001026922349411
sg34
g752
(S'\x07\xdf\t\x19\x0c%/\x04E\xc0'
tRp1202
sa(dp1203
S'trial_loop.thisTrialN'
p1204
I19
sg894
g1083
sS'block_loop.thisIndex'
p1205
g888
sg38
S'left'
p1206
sg58
g62
sS'trial_loop.thisN'
p1207
I19
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p1208
g59
(g98
S'\x13\x00\x00\x00'
tRp1209
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1210
I0
sg903
g1090
sS'block_loop.thisRepN'
p1211
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1212
I0
sg909
g1060
sg55
g11
sS'block_loop.thisTrial'
p1213
Nsg69
Vy
sS'block_loop.thisTrialN'
p1214
I0
sg39
F1.4337794734128693
sg34
g752
(S'\x07\xdf\t\x19\x0c%5\r\xe2\xb0'
tRp1215
sa(dp1216
S'trial_loop.thisTrialN'
p1217
I20
sg894
S'19-caramello_redo.png'
p1218
sS'block_loop.thisIndex'
p1219
g888
sg38
S'left'
p1220
sg58
g62
sS'trial_loop.thisN'
p1221
I20
sg33
S'19-caramello_redo.png'
p1222
sg63
g64
sS'trial_loop.thisIndex'
p1223
g59
(g98
S'\x14\x00\x00\x00'
tRp1224
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1225
I0
sg903
S'30-spaghetti_hoops.png'
p1226
sS'block_loop.thisRepN'
p1227
I0
sg906
g1222
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1228
I0
sg909
S'30-spaghetti_hoops.png'
p1229
sg55
g11
sS'block_loop.thisTrial'
p1230
Nsg69
Vy
sS'block_loop.thisTrialN'
p1231
I0
sg39
F1.7834054820887104
sg34
g752
(S'\x07\xdf\t\x19\x0c&\x00\x05\xa1h'
tRp1232
sa(dp1233
S'trial_loop.thisTrialN'
p1234
I21
sg894
S'18-mms.png'
p1235
sS'block_loop.thisIndex'
p1236
g888
sg38
S'left'
p1237
sg58
g62
sS'trial_loop.thisN'
p1238
I21
sg33
S'18-mms.png'
p1239
sg63
g64
sS'trial_loop.thisIndex'
p1240
g59
(g98
S'\x15\x00\x00\x00'
tRp1241
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1242
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p1243
sS'block_loop.thisRepN'
p1244
I0
sg906
g1239
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1245
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p1246
sg55
g11
sS'block_loop.thisTrial'
p1247
Nsg69
Vy
sS'block_loop.thisTrialN'
p1248
I0
sg39
F1.1001970596153114
sg34
g752
(S'\x07\xdf\t\x19\x0c&\x07\x02\xd6\x90'
tRp1249
sa(dp1250
S'trial_loop.thisTrialN'
p1251
I22
sg894
g1190
sS'block_loop.thisIndex'
p1252
g888
sg38
S'right'
p1253
sg58
g62
sS'trial_loop.thisN'
p1254
I22
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1255
g59
(g98
S'\x16\x00\x00\x00'
tRp1256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1257
I0
sg903
g1197
sS'block_loop.thisRepN'
p1258
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1259
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p1260
Nsg69
Vy
sS'block_loop.thisTrialN'
p1261
I0
sg39
F1.4501845723298175
sg34
g752
(S'\x07\xdf\t\x19\x0c&\r\x04\xd6H'
tRp1262
sa(dp1263
S'trial_loop.thisTrialN'
p1264
I23
sg894
S'3-ellas_strawberries_apples.png'
p1265
sS'block_loop.thisIndex'
p1266
g888
sg38
S'right'
p1267
sg58
g62
sS'trial_loop.thisN'
p1268
I23
sg33
S'13-mccoys_steak_crisps.png'
p1269
sg63
g64
sS'trial_loop.thisIndex'
p1270
g59
(g98
S'\x17\x00\x00\x00'
tRp1271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1272
I0
sg903
S'13-mccoys_steak_crisps.png'
p1273
sS'block_loop.thisRepN'
p1274
I0
sg906
S'3-ellas_strawberries_apples.png'
p1275
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1276
I0
sg909
g1269
sg55
g11
sS'block_loop.thisTrial'
p1277
Nsg69
Vy
sS'block_loop.thisTrialN'
p1278
I0
sg39
F1.5002081214097416
sg34
g752
(S'\x07\xdf\t\x19\x0c&\x13\x0cPX'
tRp1279
sa(dp1280
S'trial_loop.thisTrialN'
p1281
I24
sg894
S'36-fig_rolls.png'
p1282
sS'block_loop.thisIndex'
p1283
g888
sg38
S'left'
p1284
sg58
g62
sS'trial_loop.thisN'
p1285
I24
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p1286
g59
(g98
S'\x18\x00\x00\x00'
tRp1287
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1288
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p1289
sS'block_loop.thisRepN'
p1290
I0
sg906
g1147
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1291
I0
sg909
g1154
sg55
g11
sS'block_loop.thisTrial'
p1292
Nsg69
Vy
sS'block_loop.thisTrialN'
p1293
I0
sg39
F1.7834687738049979
sg34
g752
(S'\x07\xdf\t\x19\x0c&\x1a\x05;\xd8'
tRp1294
sa(dp1295
S'trial_loop.thisTrialN'
p1296
I25
sg894
S'7-olives.png'
p1297
sS'block_loop.thisIndex'
p1298
g888
sg38
S'right'
p1299
sg58
g62
sS'trial_loop.thisN'
p1300
I25
sg33
S'7-olives.png'
p1301
sg63
g64
sS'trial_loop.thisIndex'
p1302
g59
(g98
S'\x19\x00\x00\x00'
tRp1303
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1304
I0
sg903
S'22-daim.png'
p1305
sS'block_loop.thisRepN'
p1306
I0
sg906
g1301
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1307
I0
sg909
S'22-daim.png'
p1308
sg55
g11
sS'block_loop.thisTrial'
p1309
Nsg69
Vy
sS'block_loop.thisTrialN'
p1310
I0
sg39
F1.3835432413561648
sg34
g752
(S'\x07\xdf\t\x19\x0c&!\x02q\x00'
tRp1311
sa(dp1312
S'trial_loop.thisTrialN'
p1313
I26
sg894
S'49-yorkie.png'
p1314
sS'block_loop.thisIndex'
p1315
g888
sg38
S'right'
p1316
sg58
g62
sS'trial_loop.thisN'
p1317
I26
sg33
S'49-yorkie.png'
p1318
sg63
g64
sS'trial_loop.thisIndex'
p1319
g59
(g98
S'\x1a\x00\x00\x00'
tRp1320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1321
I0
sg903
S'35-raisins.png'
p1322
sS'block_loop.thisRepN'
p1323
I0
sg906
S'35-raisins.png'
p1324
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1325
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p1326
Nsg69
Vy
sS'block_loop.thisTrialN'
p1327
I0
sg39
F1.5167264041647286
sg34
g752
(S"\x07\xdf\t\x19\x0c&'\x08\xba`"
tRp1328
sa(dp1329
S'trial_loop.thisTrialN'
p1330
I27
sg894
S'21-nakd_banana_crunch.png'
p1331
sS'block_loop.thisIndex'
p1332
g888
sg38
S'right'
p1333
sg58
g62
sS'trial_loop.thisN'
p1334
I27
sg33
S'1-treacle_cookies.png'
p1335
sg63
g64
sS'trial_loop.thisIndex'
p1336
g59
(g98
S'\x1b\x00\x00\x00'
tRp1337
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1338
I0
sg903
S'1-treacle_cookies.png'
p1339
sS'block_loop.thisRepN'
p1340
I0
sg906
g1335
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1341
I0
sg909
S'21-nakd_banana_crunch.png'
p1342
sg55
g11
sS'block_loop.thisTrial'
p1343
Nsg69
Vy
sS'block_loop.thisTrialN'
p1344
I0
sg39
F1.8334532644839783
sg34
g752
(S'\x07\xdf\t\x19\x0c&.\x01\xe4`'
tRp1345
sa(dp1346
S'trial_loop.thisTrialN'
p1347
I28
sg894
g1066
sS'block_loop.thisIndex'
p1348
g888
sg38
S'left'
p1349
sg58
g62
sS'trial_loop.thisN'
p1350
I28
sg33
g1076
sg63
g64
sS'trial_loop.thisIndex'
p1351
g59
(g98
S'\x1c\x00\x00\x00'
tRp1352
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1353
I0
sg903
g1074
sS'block_loop.thisRepN'
p1354
I0
sg906
g1076
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1355
I0
sg909
g1070
sg55
g11
sS'block_loop.thisTrial'
p1356
Nsg69
Vy
sS'block_loop.thisTrialN'
p1357
I0
sg39
F2.333117419248083
sg34
g752
(S'\x07\xdf\t\x19\x0c&4\x0f\x13`'
tRp1358
sa(dp1359
S'trial_loop.thisTrialN'
p1360
I29
sg894
g964
sS'block_loop.thisIndex'
p1361
g888
sg38
S'left'
p1362
sg58
g62
sS'trial_loop.thisN'
p1363
I29
sg33
g975
sg63
g64
sS'trial_loop.thisIndex'
p1364
g59
(g98
S'\x1d\x00\x00\x00'
tRp1365
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1366
I0
sg903
g972
sS'block_loop.thisRepN'
p1367
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1368
I0
sg909
g975
sg55
g11
sS'block_loop.thisTrial'
p1369
Nsg69
Vy
sS'block_loop.thisTrialN'
p1370
I0
sg39
F1.5001875943671621
sg34
g752
(S"\x07\xdf\t\x19\x0c'\x00\x05[\x18"
tRp1371
sa(dp1372
S'trial_loop.thisTrialN'
p1373
I30
sg894
g1015
sS'block_loop.thisIndex'
p1374
g888
sg38
S'right'
p1375
sg58
g62
sS'trial_loop.thisN'
p1376
I30
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p1377
g59
(g98
S'\x1e\x00\x00\x00'
tRp1378
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1379
I0
sg903
g1023
sS'block_loop.thisRepN'
p1380
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1381
I0
sg909
g1026
sg55
g11
sS'block_loop.thisTrial'
p1382
Nsg69
Vy
sS'block_loop.thisTrialN'
p1383
I0
sg39
F1.1001534396491479
sg34
g752
(S"\x07\xdf\t\x19\x0c'\x06\r\x88\xd8"
tRp1384
sa(dp1385
S'trial_loop.thisTrialN'
p1386
I31
sg894
S'13-mccoys_steak_crisps.png'
p1387
sS'block_loop.thisIndex'
p1388
g888
sg38
S'left'
p1389
sg58
g62
sS'trial_loop.thisN'
p1390
I31
sg33
g1275
sg63
g64
sS'trial_loop.thisIndex'
p1391
g59
(g98
S'\x1f\x00\x00\x00'
tRp1392
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1393
I0
sg903
S'3-ellas_strawberries_apples.png'
p1394
sS'block_loop.thisRepN'
p1395
I0
sg906
g1275
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1396
I0
sg909
g1269
sg55
g11
sS'block_loop.thisTrial'
p1397
Nsg69
Vy
sS'block_loop.thisTrialN'
p1398
I0
sg39
F2.1001665541480179
sg34
g752
(S"\x07\xdf\t\x19\x0c'\r\x00FP"
tRp1399
sa(dp1400
S'trial_loop.thisTrialN'
p1401
I32
sg894
S'4-corn.png'
p1402
sS'block_loop.thisIndex'
p1403
g888
sg38
S'left'
p1404
sg58
g62
sS'trial_loop.thisN'
p1405
I32
sg33
S'10-bounty_redo.png'
p1406
sg63
g64
sS'trial_loop.thisIndex'
p1407
g59
(g98
S' \x00\x00\x00'
tRp1408
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1409
I0
sg903
S'10-bounty_redo.png'
p1410
sS'block_loop.thisRepN'
p1411
I0
sg906
g1406
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1412
I0
sg909
S'4-corn.png'
p1413
sg55
g11
sS'block_loop.thisTrial'
p1414
Nsg69
Vy
sS'block_loop.thisTrialN'
p1415
I0
sg39
F1.3001783571980923
sg34
g752
(S"\x07\xdf\t\x19\x0c'\x14\x02|\xb8"
tRp1416
sa(dp1417
S'trial_loop.thisTrialN'
p1418
I33
sg894
g1066
sS'block_loop.thisIndex'
p1419
g888
sg38
S'right'
p1420
sg58
g62
sS'trial_loop.thisN'
p1421
I33
sg33
g1070
sg63
g64
sS'trial_loop.thisIndex'
p1422
g59
(g98
S'!\x00\x00\x00'
tRp1423
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1424
I0
sg903
g1074
sS'block_loop.thisRepN'
p1425
I0
sg906
g1076
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1426
I0
sg909
g1070
sg55
g11
sS'block_loop.thisTrial'
p1427
Nsg69
Vy
sS'block_loop.thisTrialN'
p1428
I0
sg39
F1.3998314501659479
sg34
g752
(S"\x07\xdf\t\x19\x0c'\x1a\x07\x95h"
tRp1429
sa(dp1430
S'trial_loop.thisTrialN'
p1431
I34
sg894
g932
sS'block_loop.thisIndex'
p1432
g888
sg38
S'left'
p1433
sg58
g62
sS'trial_loop.thisN'
p1434
I34
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1435
g59
(g98
S'"\x00\x00\x00'
tRp1436
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1437
I0
sg903
g940
sS'block_loop.thisRepN'
p1438
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1439
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p1440
Nsg69
Vy
sS'block_loop.thisTrialN'
p1441
I0
sg39
F2.5003828863755189
sg34
g752
(S"\x07\xdf\t\x19\x0c' \x0e\x19`"
tRp1442
sa(dp1443
S'trial_loop.thisTrialN'
p1444
I35
sg894
g1032
sS'block_loop.thisIndex'
p1445
g888
sg38
S'right'
p1446
sg58
g62
sS'trial_loop.thisN'
p1447
I35
sg33
g1042
sg63
g64
sS'trial_loop.thisIndex'
p1448
g59
(g98
S'#\x00\x00\x00'
tRp1449
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1450
I0
sg903
g1040
sS'block_loop.thisRepN'
p1451
I0
sg906
g1042
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1452
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p1453
Nsg69
Vy
sS'block_loop.thisTrialN'
p1454
I0
sg39
F1.7835314953263151
sg34
g752
(S"\x07\xdf\t\x19\x0c'(\x07\x00\xf8"
tRp1455
sa(dp1456
S'trial_loop.thisTrialN'
p1457
I36
sg894
S'46-pistachios.png'
p1458
sS'block_loop.thisIndex'
p1459
g888
sg38
S'left'
p1460
sg58
g62
sS'trial_loop.thisN'
p1461
I36
sg33
S'29-beans.png'
p1462
sg63
g64
sS'trial_loop.thisIndex'
p1463
g59
(g98
S'$\x00\x00\x00'
tRp1464
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1465
I0
sg903
S'29-beans.png'
p1466
sS'block_loop.thisRepN'
p1467
I0
sg906
g1462
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1468
I0
sg909
S'46-pistachios.png'
p1469
sg55
g11
sS'block_loop.thisTrial'
p1470
Nsg69
Vy
sS'block_loop.thisTrialN'
p1471
I0
sg39
F1.950157488035984
sg34
g752
(S"\x07\xdf\t\x19\x0c'/\x046 "
tRp1472
sa(dp1473
S'trial_loop.thisTrialN'
p1474
I37
sg894
g1331
sS'block_loop.thisIndex'
p1475
g888
sg38
S'left'
p1476
sg58
g62
sS'trial_loop.thisN'
p1477
I37
sg33
g1335
sg63
g64
sS'trial_loop.thisIndex'
p1478
g59
(g98
S'%\x00\x00\x00'
tRp1479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1480
I0
sg903
g1339
sS'block_loop.thisRepN'
p1481
I0
sg906
g1335
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1482
I0
sg909
g1342
sg55
g11
sS'block_loop.thisTrial'
p1483
Nsg69
Vy
sS'block_loop.thisTrialN'
p1484
I0
sg39
F1.9500956218089414
sg34
g752
(S"\x07\xdf\t\x19\x0c'6\x04\x0b("
tRp1485
sa(dp1486
S'trial_loop.thisTrialN'
p1487
I38
sg894
S'22-daim.png'
p1488
sS'block_loop.thisIndex'
p1489
g888
sg38
S'left'
p1490
sg58
g62
sS'trial_loop.thisN'
p1491
I38
sg33
g1301
sg63
g64
sS'trial_loop.thisIndex'
p1492
g59
(g98
S'&\x00\x00\x00'
tRp1493
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1494
I0
sg903
S'7-olives.png'
p1495
sS'block_loop.thisRepN'
p1496
I0
sg906
g1301
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1497
I0
sg909
g1308
sg55
g11
sS'block_loop.thisTrial'
p1498
Nsg69
Vy
sS'block_loop.thisTrialN'
p1499
I0
sg39
F1.7500798273904365
sg34
g752
(S'\x07\xdf\t\x19\x0c(\x01\x03\xa1\xb0'
tRp1500
sa(dp1501
S'trial_loop.thisTrialN'
p1502
I39
sg894
g1218
sS'block_loop.thisIndex'
p1503
g888
sg38
S'left'
p1504
sg58
g62
sS'trial_loop.thisN'
p1505
I39
sg33
g1222
sg63
g64
sS'trial_loop.thisIndex'
p1506
g59
(g98
S"'\x00\x00\x00"
tRp1507
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1508
I0
sg903
g1226
sS'block_loop.thisRepN'
p1509
I0
sg906
g1222
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1510
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p1511
Nsg69
Vy
sS'block_loop.thisTrialN'
p1512
I0
sg39
F1.083541644809884
sg34
g752
(S'\x07\xdf\t\x19\x0c(\x08\x00]\xc0'
tRp1513
sa(dp1514
S'trial_loop.thisTrialN'
p1515
I40
sg894
g1402
sS'block_loop.thisIndex'
p1516
g888
sg38
S'right'
p1517
sg58
g62
sS'trial_loop.thisN'
p1518
I40
sg33
g1406
sg63
g64
sS'trial_loop.thisIndex'
p1519
g59
(g98
S'(\x00\x00\x00'
tRp1520
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1521
I0
sg903
g1410
sS'block_loop.thisRepN'
p1522
I0
sg906
g1406
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1523
I0
sg909
g1413
sg55
g11
sS'block_loop.thisTrial'
p1524
Nsg69
Vy
sS'block_loop.thisTrialN'
p1525
I0
sg39
F1.2001352504066745
sg34
g752
(S'\x07\xdf\t\x19\x0c(\x0e\x02\x1e\xf8'
tRp1526
sa(dp1527
S'trial_loop.thisTrialN'
p1528
I41
sg894
g1218
sS'block_loop.thisIndex'
p1529
g888
sg38
S'left'
p1530
sg58
g62
sS'trial_loop.thisN'
p1531
I41
sg33
g1222
sg63
g64
sS'trial_loop.thisIndex'
p1532
g59
(g98
S')\x00\x00\x00'
tRp1533
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1534
I0
sg903
g1226
sS'block_loop.thisRepN'
p1535
I0
sg906
g1222
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1536
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p1537
Nsg69
Vy
sS'block_loop.thisTrialN'
p1538
I0
sg39
F1.6334160877268005
sg34
g752
(S'\x07\xdf\t\x19\x0c(\x14\x05\xc8x'
tRp1539
sa(dp1540
S'trial_loop.thisTrialN'
p1541
I42
sg894
g1297
sS'block_loop.thisIndex'
p1542
g888
sg38
S'right'
p1543
sg58
g62
sS'trial_loop.thisN'
p1544
I42
sg33
g1301
sg63
g64
sS'trial_loop.thisIndex'
p1545
g59
(g98
S'*\x00\x00\x00'
tRp1546
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1547
I0
sg903
g1305
sS'block_loop.thisRepN'
p1548
I0
sg906
g1301
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1549
I0
sg909
g1308
sg55
g11
sS'block_loop.thisTrial'
p1550
Nsg69
Vy
sS'block_loop.thisTrialN'
p1551
I0
sg39
F1.4000814809587609
sg34
g752
(S'\x07\xdf\t\x19\x0c(\x1b\x00\x9c@'
tRp1552
sa(dp1553
S'trial_loop.thisTrialN'
p1554
I43
sg894
S'35-raisins.png'
p1555
sS'block_loop.thisIndex'
p1556
g888
sg38
S'right'
p1557
sg58
g62
sS'trial_loop.thisN'
p1558
I43
sg33
g1318
sg63
g64
sS'trial_loop.thisIndex'
p1559
g59
(g98
S'+\x00\x00\x00'
tRp1560
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1561
I0
sg903
S'49-yorkie.png'
p1562
sS'block_loop.thisRepN'
p1563
I0
sg906
g1324
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1564
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p1565
Nsg69
Vy
sS'block_loop.thisTrialN'
p1566
I0
sg39
F1.2501234473566001
sg34
g752
(S'\x07\xdf\t\x19\x0c(!\x07$ '
tRp1567
sa(dp1568
S'trial_loop.thisTrialN'
p1569
I44
sg894
S'50-polo.png'
p1570
sS'block_loop.thisIndex'
p1571
g888
sg38
S'right'
p1572
sg58
g62
sS'trial_loop.thisN'
p1573
I44
sg33
g1008
sg63
g64
sS'trial_loop.thisIndex'
p1574
g59
(g98
S',\x00\x00\x00'
tRp1575
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1576
I0
sg903
S'48-twix.png'
p1577
sS'block_loop.thisRepN'
p1578
I0
sg906
g1008
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1579
I0
sg909
g1002
sg55
g11
sS'block_loop.thisTrial'
p1580
Nsg69
Vy
sS'block_loop.thisTrialN'
p1581
I0
sg39
F2.2668373072156101
sg34
g752
(S"\x07\xdf\t\x19\x0c('\x0b\x81P"
tRp1582
sa(dp1583
S'trial_loop.thisTrialN'
p1584
I45
sg894
g915
sS'block_loop.thisIndex'
p1585
g888
sg38
S'right'
p1586
sg58
g62
sS'trial_loop.thisN'
p1587
I45
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p1588
g59
(g98
S'-\x00\x00\x00'
tRp1589
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1590
I0
sg903
g923
sS'block_loop.thisRepN'
p1591
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1592
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p1593
Nsg69
Vy
sS'block_loop.thisTrialN'
p1594
I0
sg39
F1.3335328067769296
sg34
g752
(S'\x07\xdf\t\x19\x0c(/\x00\xd6\xd8'
tRp1595
sa(dp1596
S'trial_loop.thisTrialN'
p1597
I46
sg894
g981
sS'block_loop.thisIndex'
p1598
g888
sg38
S'right'
p1599
sg58
g62
sS'trial_loop.thisN'
p1600
I46
sg33
g985
sg63
g64
sS'trial_loop.thisIndex'
p1601
g59
(g98
S'.\x00\x00\x00'
tRp1602
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1603
I0
sg903
g989
sS'block_loop.thisRepN'
p1604
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1605
I0
sg909
g992
sg55
g11
sS'block_loop.thisTrial'
p1606
Nsg69
Vy
sS'block_loop.thisTrialN'
p1607
I0
sg39
F1.233333751477403
sg34
g752
(S'\x07\xdf\t\x19\x0c(5\x06h\xa0'
tRp1608
sa(dp1609
S'trial_loop.thisTrialN'
p1610
I47
sg894
g1218
sS'block_loop.thisIndex'
p1611
g888
sg38
S'left'
p1612
sg58
g62
sS'trial_loop.thisN'
p1613
I47
sg33
g1222
sg63
g64
sS'trial_loop.thisIndex'
p1614
g59
(g98
S'/\x00\x00\x00'
tRp1615
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1616
I0
sg903
g1226
sS'block_loop.thisRepN'
p1617
I0
sg906
g1222
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1618
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p1619
Nsg69
Vy
sS'block_loop.thisTrialN'
p1620
I0
sg39
F1.2500966481620708
sg34
g752
(S'\x07\xdf\t\x19\x0c(;\n\x8b8'
tRp1621
sa(dp1622
S'trial_loop.thisTrialN'
p1623
I48
sg894
S'29-beans.png'
p1624
sS'block_loop.thisIndex'
p1625
g888
sg38
S'left'
p1626
sg58
g62
sS'trial_loop.thisN'
p1627
I48
sg33
g1462
sg63
g64
sS'trial_loop.thisIndex'
p1628
g59
(g98
S'0\x00\x00\x00'
tRp1629
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1630
I0
sg903
S'46-pistachios.png'
p1631
sS'block_loop.thisRepN'
p1632
I0
sg906
g1462
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1633
I0
sg909
g1469
sg55
g11
sS'block_loop.thisTrial'
p1634
Nsg69
Vy
sS'block_loop.thisTrialN'
p1635
I0
sg39
F1.2168750541677582
sg34
g752
(S'\x07\xdf\t\x19\x0c)\x05\x0e\xecP'
tRp1636
sa(dp1637
S'trial_loop.thisTrialN'
p1638
I49
sg894
g1218
sS'block_loop.thisIndex'
p1639
g888
sg38
S'left'
p1640
sg58
g62
sS'trial_loop.thisN'
p1641
I49
sg33
g1222
sg63
g64
sS'trial_loop.thisIndex'
p1642
g59
(g98
S'1\x00\x00\x00'
tRp1643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1644
I0
sg903
g1226
sS'block_loop.thisRepN'
p1645
I0
sg906
g1222
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1646
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p1647
Nsg69
Vy
sS'block_loop.thisTrialN'
p1648
I0
sg39
F0.91722640872467309
sg34
g752
(S'\x07\xdf\t\x19\x0c)\x0c\x03S\x90'
tRp1649
sa(dp1650
S'trial_loop.thisTrialN'
p1651
I50
sg894
S'1-treacle_cookies.png'
p1652
sS'block_loop.thisIndex'
p1653
g888
sg38
S'right'
p1654
sg58
g62
sS'trial_loop.thisN'
p1655
I50
sg33
g1335
sg63
g64
sS'trial_loop.thisIndex'
p1656
g59
(g98
S'2\x00\x00\x00'
tRp1657
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1658
I0
sg903
S'21-nakd_banana_crunch.png'
p1659
sS'block_loop.thisRepN'
p1660
I0
sg906
g1335
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1661
I0
sg909
g1342
sg55
g11
sS'block_loop.thisTrial'
p1662
Nsg69
Vy
sS'block_loop.thisTrialN'
p1663
I0
sg39
F2.466790950311406
sg34
g752
(S'\x07\xdf\t\x19\x0c)\x12\x02\xb3h'
tRp1664
sa(dp1665
S'trial_loop.thisTrialN'
p1666
I51
sg894
S'5-pineapple.png'
p1667
sS'block_loop.thisIndex'
p1668
g888
sg38
S'left'
p1669
sg58
g62
sS'trial_loop.thisN'
p1670
I51
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p1671
g59
(g98
S'3\x00\x00\x00'
tRp1672
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1673
I0
sg903
S'40-sardines.png'
p1674
sS'block_loop.thisRepN'
p1675
I0
sg906
g1115
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1676
I0
sg909
g1122
sg55
g11
sS'block_loop.thisTrial'
p1677
Nsg69
Vy
sS'block_loop.thisTrialN'
p1678
I0
sg39
F1.3000999552969006
sg34
g752
(S'\x07\xdf\t\x19\x0c)\x19\n%\xa8'
tRp1679
sa(dp1680
S'trial_loop.thisTrialN'
p1681
I52
sg894
g1235
sS'block_loop.thisIndex'
p1682
g888
sg38
S'left'
p1683
sg58
g62
sS'trial_loop.thisN'
p1684
I52
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p1685
g59
(g98
S'4\x00\x00\x00'
tRp1686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1687
I0
sg903
g1243
sS'block_loop.thisRepN'
p1688
I0
sg906
g1239
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1689
I0
sg909
g1246
sg55
g11
sS'block_loop.thisTrial'
p1690
Nsg69
Vy
sS'block_loop.thisTrialN'
p1691
I0
sg39
F1.1167675152701122
sg34
g752
(S'\x07\xdf\t\x19\x0c)\x1f\x0f>X'
tRp1692
sa(dp1693
S'trial_loop.thisTrialN'
p1694
I53
sg894
g964
sS'block_loop.thisIndex'
p1695
g888
sg38
S'right'
p1696
sg58
g62
sS'trial_loop.thisN'
p1697
I53
sg33
g968
sg63
g64
sS'trial_loop.thisIndex'
p1698
g59
(g98
S'5\x00\x00\x00'
tRp1699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1700
I0
sg903
g972
sS'block_loop.thisRepN'
p1701
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1702
I0
sg909
g975
sg55
g11
sS'block_loop.thisTrial'
p1703
Nsg69
Vy
sS'block_loop.thisTrialN'
p1704
I0
sg39
F1.8668484830523084
sg34
g752
(S'\x07\xdf\t\x19\x0c)&\x02t\xe8'
tRp1705
sa(dp1706
S'trial_loop.thisTrialN'
p1707
I54
sg894
g1331
sS'block_loop.thisIndex'
p1708
g888
sg38
S'right'
p1709
sg58
g62
sS'trial_loop.thisN'
p1710
I54
sg33
g1342
sg63
g64
sS'trial_loop.thisIndex'
p1711
g59
(g98
S'6\x00\x00\x00'
tRp1712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1713
I0
sg903
g1339
sS'block_loop.thisRepN'
p1714
I0
sg906
g1335
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1715
I0
sg909
g1342
sg55
g11
sS'block_loop.thisTrial'
p1716
Nsg69
Vy
sS'block_loop.thisTrialN'
p1717
I0
sg39
F1.3671908855358197
sg34
g752
(S'\x07\xdf\t\x19\x0c)-\x00\xda\xc0'
tRp1718
sa(dp1719
S'trial_loop.thisTrialN'
p1720
I55
sg894
g1265
sS'block_loop.thisIndex'
p1721
g888
sg38
S'right'
p1722
sg58
g62
sS'trial_loop.thisN'
p1723
I55
sg33
g1275
sg63
g64
sS'trial_loop.thisIndex'
p1724
g59
(g98
S'7\x00\x00\x00'
tRp1725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1726
I0
sg903
g1273
sS'block_loop.thisRepN'
p1727
I0
sg906
g1275
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1728
I0
sg909
g1269
sg55
g11
sS'block_loop.thisTrial'
p1729
Nsg69
Vy
sS'block_loop.thisTrialN'
p1730
I0
sg39
F1.4004064924756676
sg34
g752
(S'\x07\xdf\t\x19\x0c)3\x06\xe5\xa0'
tRp1731
sa(dp1732
S'trial_loop.thisTrialN'
p1733
I56
sg894
g1314
sS'block_loop.thisIndex'
p1734
g888
sg38
S'left'
p1735
sg58
g62
sS'trial_loop.thisN'
p1736
I56
sg33
g1324
sg63
g64
sS'trial_loop.thisIndex'
p1737
g59
(g98
S'8\x00\x00\x00'
tRp1738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1739
I0
sg903
g1322
sS'block_loop.thisRepN'
p1740
I0
sg906
g1324
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1741
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p1742
Nsg69
Vy
sS'block_loop.thisTrialN'
p1743
I0
sg39
F1.0168033805766754
sg34
g752
(S'\x07\xdf\t\x19\x0c)9\r\xa8\x18'
tRp1744
sa(dp1745
S'trial_loop.thisTrialN'
p1746
I57
sg894
g949
sS'block_loop.thisIndex'
p1747
g888
sg38
S'right'
p1748
sg58
g62
sS'trial_loop.thisN'
p1749
I57
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1750
g59
(g98
S'9\x00\x00\x00'
tRp1751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1752
I0
sg903
g956
sS'block_loop.thisRepN'
p1753
I0
sg906
g907
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1754
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1755
Nsg69
Vy
sS'block_loop.thisTrialN'
p1756
I0
sg39
F1.0501313160584687
sg34
g752
(S'\x07\xdf\t\x19\x0c*\x03\x0e8\xa0'
tRp1757
sa(dp1758
S'trial_loop.thisTrialN'
p1759
I58
sg894
g1282
sS'block_loop.thisIndex'
p1760
g888
sg38
S'right'
p1761
sg58
g62
sS'trial_loop.thisN'
p1762
I58
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p1763
g59
(g98
S':\x00\x00\x00'
tRp1764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1765
I0
sg903
g1289
sS'block_loop.thisRepN'
p1766
I0
sg906
g1147
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1767
I0
sg909
g1154
sg55
g11
sS'block_loop.thisTrial'
p1768
Nsg69
Vy
sS'block_loop.thisTrialN'
p1769
I0
sg39
F1.9168512199921679
sg34
g752
(S'\x07\xdf\t\x19\x0c*\n\x00>\x80'
tRp1770
sa(dp1771
S'trial_loop.thisTrialN'
p1772
I59
sg894
g1235
sS'block_loop.thisIndex'
p1773
g888
sg38
S'left'
p1774
sg58
g62
sS'trial_loop.thisN'
p1775
I59
sg33
g1246
sg63
g64
sS'trial_loop.thisIndex'
p1776
g59
(g98
S';\x00\x00\x00'
tRp1777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1778
I0
sg903
g1243
sS'block_loop.thisRepN'
p1779
I0
sg906
g1239
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1780
I0
sg909
g1246
sg55
g11
sS'block_loop.thisTrial'
p1781
Nsg69
Vy
sS'block_loop.thisTrialN'
p1782
I0
sg39
F1.0002426182472846
sg34
g752
(S'\x07\xdf\t\x19\x0c*\x10\x0e\xdc\xb0'
tRp1783
sa(dp1784
S'trial_loop.thisTrialN'
p1785
I60
sg894
S'17-jacobs_mini_cheddars_redo.png'
p1786
sS'block_loop.thisIndex'
p1787
g888
sg38
S'left'
p1788
sg58
g62
sS'trial_loop.thisN'
p1789
I60
sg33
g1042
sg63
g64
sS'trial_loop.thisIndex'
p1790
g59
(g98
S'<\x00\x00\x00'
tRp1791
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1792
I0
sg903
S'8-liquorice_catherine_wheels.png'
p1793
sS'block_loop.thisRepN'
p1794
I0
sg906
g1042
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1795
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p1796
Nsg69
Vy
sS'block_loop.thisTrialN'
p1797
I0
sg39
F1.2168548122244829
sg34
g752
(S'\x07\xdf\t\x19\x0c*\x17\x00*\xf8'
tRp1798
sa(dp1799
S'trial_loop.thisTrialN'
p1800
I61
sg894
S'20-fruit_pastilles.png'
p1801
sS'block_loop.thisIndex'
p1802
g888
sg38
S'left'
p1803
sg58
g62
sS'trial_loop.thisN'
p1804
I61
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1805
g59
(g98
S'=\x00\x00\x00'
tRp1806
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1807
I0
sg903
S'2-steamed_puddings.png'
p1808
sS'block_loop.thisRepN'
p1809
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1810
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p1811
Nsg69
Vy
sS'block_loop.thisTrialN'
p1812
I0
sg39
F1.4001005825120956
sg34
g752
(S'\x07\xdf\t\x19\x0c*\x1d\x03\xd4x'
tRp1813
sa(dp1814
S'trial_loop.thisTrialN'
p1815
I62
sg894
g1387
sS'block_loop.thisIndex'
p1816
g888
sg38
S'left'
p1817
sg58
g62
sS'trial_loop.thisN'
p1818
I62
sg33
g1275
sg63
g64
sS'trial_loop.thisIndex'
p1819
g59
(g98
S'>\x00\x00\x00'
tRp1820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1821
I0
sg903
g1394
sS'block_loop.thisRepN'
p1822
I0
sg906
g1275
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1823
I0
sg909
g1269
sg55
g11
sS'block_loop.thisTrial'
p1824
Nsg69
Vy
sS'block_loop.thisTrialN'
p1825
I0
sg39
F2.4167782349486515
sg34
g752
(S'\x07\xdf\t\x19\x0c*#\n\x96\xf0'
tRp1826
sa(dp1827
S'trial_loop.thisTrialN'
p1828
I63
sg894
S'43-mrporky_pork_crackles_redo.png'
p1829
sS'block_loop.thisIndex'
p1830
g888
sg38
S'right'
p1831
sg58
g62
sS'trial_loop.thisN'
p1832
I63
sg33
g1246
sg63
g64
sS'trial_loop.thisIndex'
p1833
g59
(g98
S'?\x00\x00\x00'
tRp1834
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1835
I0
sg903
S'18-mms.png'
p1836
sS'block_loop.thisRepN'
p1837
I0
sg906
g1239
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1838
I0
sg909
g1246
sg55
g11
sS'block_loop.thisTrial'
p1839
Nsg69
Vy
sS'block_loop.thisTrialN'
p1840
I0
sg39
F1.5834045127558056
sg34
g752
(S'\x07\xdf\t\x19\x0c*+\x02\x0fX'
tRp1841
sa(dp1842
S'trial_loop.thisTrialN'
p1843
I64
sg894
S'10-bounty_redo.png'
p1844
sS'block_loop.thisIndex'
p1845
g888
sg38
S'left'
p1846
sg58
g62
sS'trial_loop.thisN'
p1847
I64
sg33
g1406
sg63
g64
sS'trial_loop.thisIndex'
p1848
g59
(g98
S'@\x00\x00\x00'
tRp1849
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1850
I0
sg903
S'4-corn.png'
p1851
sS'block_loop.thisRepN'
p1852
I0
sg906
g1406
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1853
I0
sg909
g1413
sg55
g11
sS'block_loop.thisTrial'
p1854
Nsg69
Vy
sS'block_loop.thisTrialN'
p1855
I0
sg39
F1.283557724325874
sg34
g752
(S'\x07\xdf\t\x19\x0c*1\x0bm\xc8'
tRp1856
sa(dp1857
S'trial_loop.thisTrialN'
p1858
I65
sg894
g1049
sS'block_loop.thisIndex'
p1859
g888
sg38
S'right'
p1860
sg58
g62
sS'trial_loop.thisN'
p1861
I65
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p1862
g59
(g98
S'A\x00\x00\x00'
tRp1863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1864
I0
sg903
g1057
sS'block_loop.thisRepN'
p1865
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1866
I0
sg909
g1060
sg55
g11
sS'block_loop.thisTrial'
p1867
Nsg69
Vy
sS'block_loop.thisTrialN'
p1868
I0
sg39
F1.3001800677848223
sg34
g752
(S'\x07\xdf\t\x19\x0c*8\x01\x05\xb8'
tRp1869
sa(dp1870
S'trial_loop.thisTrialN'
p1871
I66
sg894
g1570
sS'block_loop.thisIndex'
p1872
g888
sg38
S'left'
p1873
sg58
g62
sS'trial_loop.thisN'
p1874
I66
sg33
g1008
sg63
g64
sS'trial_loop.thisIndex'
p1875
g59
(g98
S'B\x00\x00\x00'
tRp1876
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1877
I0
sg903
g1577
sS'block_loop.thisRepN'
p1878
I0
sg906
g1008
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1879
I0
sg909
g1002
sg55
g11
sS'block_loop.thisTrial'
p1880
Nsg69
Vy
sS'block_loop.thisTrialN'
p1881
I0
sg39
F1.466846829483984
sg34
g752
(S'\x07\xdf\t\x19\x0c+\x02\x06\x1eh'
tRp1882
sa(dp1883
S'trial_loop.thisTrialN'
p1884
I67
sg894
g1128
sS'block_loop.thisIndex'
p1885
g888
sg38
S'right'
p1886
sg58
g62
sS'trial_loop.thisN'
p1887
I67
sg33
g1076
sg63
g64
sS'trial_loop.thisIndex'
p1888
g59
(g98
S'C\x00\x00\x00'
tRp1889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1890
I0
sg903
g1135
sS'block_loop.thisRepN'
p1891
I0
sg906
g1076
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1892
I0
sg909
g1070
sg55
g11
sS'block_loop.thisTrial'
p1893
Nsg69
Vy
sS'block_loop.thisTrialN'
p1894
I0
sg39
F1.6998179365309625
sg34
g752
(S'\x07\xdf\t\x19\x0c+\x08\r\xd3\x10'
tRp1895
sa(dp1896
S'trial_loop.thisTrialN'
p1897
I68
sg894
g981
sS'block_loop.thisIndex'
p1898
g888
sg38
S'right'
p1899
sg58
g62
sS'trial_loop.thisN'
p1900
I68
sg33
g985
sg63
g64
sS'trial_loop.thisIndex'
p1901
g59
(g98
S'D\x00\x00\x00'
tRp1902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1903
I0
sg903
g989
sS'block_loop.thisRepN'
p1904
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1905
I0
sg909
g992
sg55
g11
sS'block_loop.thisTrial'
p1906
Nsg69
Vy
sS'block_loop.thisTrialN'
p1907
I0
sg39
F1.166650796221802
sg34
g752
(S'\x07\xdf\t\x19\x0c+\x0f\t\xd7\x88'
tRp1908
sa(dp1909
S'trial_loop.thisTrialN'
p1910
I69
sg894
g915
sS'block_loop.thisIndex'
p1911
g888
sg38
S'right'
p1912
sg58
g62
sS'trial_loop.thisN'
p1913
I69
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1914
g59
(g98
S'E\x00\x00\x00'
tRp1915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1916
I0
sg903
g923
sS'block_loop.thisRepN'
p1917
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1918
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p1919
Nsg69
Vy
sS'block_loop.thisTrialN'
p1920
I0
sg39
F1.6172165443404083
sg34
g752
(S'\x07\xdf\t\x19\x0c+\x15\x0c\xcdX'
tRp1921
sa(dp1922
S'trial_loop.thisTrialN'
p1923
I70
sg894
g1111
sS'block_loop.thisIndex'
p1924
g888
sg38
S'right'
p1925
sg58
g62
sS'trial_loop.thisN'
p1926
I70
sg33
g1122
sg63
g64
sS'trial_loop.thisIndex'
p1927
g59
(g98
S'F\x00\x00\x00'
tRp1928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1929
I0
sg903
g1119
sS'block_loop.thisRepN'
p1930
I0
sg906
g1115
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1931
I0
sg909
g1122
sg55
g11
sS'block_loop.thisTrial'
p1932
Nsg69
Vy
sS'block_loop.thisTrialN'
p1933
I0
sg39
F1.300181208176582
sg34
g752
(S'\x07\xdf\t\x19\x0c+\x1c\x07b\xa0'
tRp1934
sa(dp1935
S'trial_loop.thisTrialN'
p1936
I71
sg894
g1032
sS'block_loop.thisIndex'
p1937
g888
sg38
S'right'
p1938
sg58
g62
sS'trial_loop.thisN'
p1939
I71
sg33
g1042
sg63
g64
sS'trial_loop.thisIndex'
p1940
g59
(g98
S'G\x00\x00\x00'
tRp1941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1942
I0
sg903
g1040
sS'block_loop.thisRepN'
p1943
I0
sg906
g1042
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1944
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p1945
Nsg69
Vy
sS'block_loop.thisTrialN'
p1946
I0
sg39
F1.3501277808445593
sg34
g752
(S'\x07\xdf\t\x19\x0c+"\x0c{P'
tRp1947
sa(dp1948
S'trial_loop.thisTrialN'
p1949
I72
sg894
g1488
sS'block_loop.thisIndex'
p1950
g888
sg38
S'left'
p1951
sg58
g62
sS'trial_loop.thisN'
p1952
I72
sg33
g1301
sg63
g64
sS'trial_loop.thisIndex'
p1953
g59
(g98
S'H\x00\x00\x00'
tRp1954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1955
I0
sg903
g1495
sS'block_loop.thisRepN'
p1956
I0
sg906
g1301
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1957
I0
sg909
g1308
sg55
g11
sS'block_loop.thisTrial'
p1958
Nsg69
Vy
sS'block_loop.thisTrialN'
p1959
I0
sg39
F1.3500690506934916
sg34
g752
(S'\x07\xdf\t\x19\x0c+)\x03\x05p'
tRp1960
sa(dp1961
S'trial_loop.thisTrialN'
p1962
I73
sg894
g1175
sS'block_loop.thisIndex'
p1963
g888
sg38
S'left'
p1964
sg58
g62
sS'trial_loop.thisN'
p1965
I73
sg33
g985
sg63
g64
sS'trial_loop.thisIndex'
p1966
g59
(g98
S'I\x00\x00\x00'
tRp1967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1968
I0
sg903
g1182
sS'block_loop.thisRepN'
p1969
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1970
I0
sg909
g992
sg55
g11
sS'block_loop.thisTrial'
p1971
Nsg69
Vy
sS'block_loop.thisTrialN'
p1972
I0
sg39
F1.3500217244545638
sg34
g752
(S'\x07\xdf\t\x19\x0c+/\t\x10P'
tRp1973
sa(dp1974
S'trial_loop.thisTrialN'
p1975
I74
sg894
g1387
sS'block_loop.thisIndex'
p1976
g888
sg38
S'left'
p1977
sg58
g62
sS'trial_loop.thisN'
p1978
I74
sg33
g1275
sg63
g64
sS'trial_loop.thisIndex'
p1979
g59
(g98
S'J\x00\x00\x00'
tRp1980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1981
I0
sg903
g1394
sS'block_loop.thisRepN'
p1982
I0
sg906
g1275
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1983
I0
sg909
g1269
sg55
g11
sS'block_loop.thisTrial'
p1984
Nsg69
Vy
sS'block_loop.thisTrialN'
p1985
I0
sg39
F1.3172229305328074
sg34
g752
(S'\x07\xdf\t\x19\x0c+5\x0e\xe0\x98'
tRp1986
sa(dp1987
S'trial_loop.thisTrialN'
p1988
I75
sg894
g1143
sS'block_loop.thisIndex'
p1989
g888
sg38
S'right'
p1990
sg58
g62
sS'trial_loop.thisN'
p1991
I75
sg33
g1154
sg63
g64
sS'trial_loop.thisIndex'
p1992
g59
(g98
S'K\x00\x00\x00'
tRp1993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1994
I0
sg903
g1151
sS'block_loop.thisRepN'
p1995
I0
sg906
g1147
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1996
I0
sg909
g1154
sg55
g11
sS'block_loop.thisTrial'
p1997
Nsg69
Vy
sS'block_loop.thisTrialN'
p1998
I0
sg39
F2.3167394046249683
sg34
g752
(S'\x07\xdf\t\x19\x0c,\x00\x04\xf1\xa0'
tRp1999
sa(dp2000
S'trial_loop.thisTrialN'
p2001
I76
sg894
g1235
sS'block_loop.thisIndex'
p2002
g888
sg38
S'right'
p2003
sg58
g62
sS'trial_loop.thisN'
p2004
I76
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p2005
g59
(g98
S'L\x00\x00\x00'
tRp2006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2007
I0
sg903
g1243
sS'block_loop.thisRepN'
p2008
I0
sg906
g1239
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2009
I0
sg909
g1246
sg55
g11
sS'block_loop.thisTrial'
p2010
Nsg69
Vy
sS'block_loop.thisTrialN'
p2011
I0
sg39
F1.8501294914312894
sg34
g752
(S'\x07\xdf\t\x19\x0c,\x07\nA\x00'
tRp2012
sa(dp2013
S'trial_loop.thisTrialN'
p2014
I77
sg894
S'31-hobnobs.png'
p2015
sS'block_loop.thisIndex'
p2016
g888
sg38
S'right'
p2017
sg58
g62
sS'trial_loop.thisN'
p2018
I77
sg33
g975
sg63
g64
sS'trial_loop.thisIndex'
p2019
g59
(g98
S'M\x00\x00\x00'
tRp2020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2021
I0
sg903
S'25-kitkat.png'
p2022
sS'block_loop.thisRepN'
p2023
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2024
I0
sg909
g975
sg55
g11
sS'block_loop.thisTrial'
p2025
Nsg69
Vy
sS'block_loop.thisTrialN'
p2026
I0
sg39
F2.7333890604550106
sg34
g752
(S'\x07\xdf\t\x19\x0c,\x0e\x08hX'
tRp2027
sa(dp2028
S'trial_loop.thisTrialN'
p2029
I78
sg894
g1488
sS'block_loop.thisIndex'
p2030
g888
sg38
S'left'
p2031
sg58
g62
sS'trial_loop.thisN'
p2032
I78
sg33
g1301
sg63
g64
sS'trial_loop.thisIndex'
p2033
g59
(g98
S'N\x00\x00\x00'
tRp2034
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2035
I0
sg903
g1495
sS'block_loop.thisRepN'
p2036
I0
sg906
g1301
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2037
I0
sg909
g1308
sg55
g11
sS'block_loop.thisTrial'
p2038
Nsg69
Vy
sS'block_loop.thisTrialN'
p2039
I0
sg39
F0.96687020750505326
sg34
g752
(S'\x07\xdf\t\x19\x0c,\x16\x04\xe2\x00'
tRp2040
sa(dp2041
S'trial_loop.thisTrialN'
p2042
I79
sg894
g1555
sS'block_loop.thisIndex'
p2043
g888
sg38
S'right'
p2044
sg58
g62
sS'trial_loop.thisN'
p2045
I79
sg33
g1324
sg63
g64
sS'trial_loop.thisIndex'
p2046
g59
(g98
S'O\x00\x00\x00'
tRp2047
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2048
I0
sg903
g1562
sS'block_loop.thisRepN'
p2049
I0
sg906
g1324
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2050
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p2051
Nsg69
Vy
sS'block_loop.thisTrialN'
p2052
I0
sg39
F1.0672585677584721
sg34
g752
(S'\x07\xdf\t\x19\x0c,\x1c\x04\xf9p'
tRp2053
sa(dp2054
S'trial_loop.thisTrialN'
p2055
I80
sg894
g1143
sS'block_loop.thisIndex'
p2056
g888
sg38
S'left'
p2057
sg58
g62
sS'trial_loop.thisN'
p2058
I80
sg33
g1154
sg63
g64
sS'trial_loop.thisIndex'
p2059
g59
(g98
S'P\x00\x00\x00'
tRp2060
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2061
I0
sg903
g1151
sS'block_loop.thisRepN'
p2062
I0
sg906
g1147
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2063
I0
sg909
g1154
sg55
g11
sS'block_loop.thisTrial'
p2064
Nsg69
Vy
sS'block_loop.thisTrialN'
p2065
I0
sg39
F1.3334087892253592
sg34
g752
(S'\x07\xdf\t\x19\x0c,"\x06\x80\x10'
tRp2066
sa(dp2067
S'trial_loop.thisTrialN'
p2068
I81
sg894
g1402
sS'block_loop.thisIndex'
p2069
g888
sg38
S'right'
p2070
sg58
g62
sS'trial_loop.thisN'
p2071
I81
sg33
g1406
sg63
g64
sS'trial_loop.thisIndex'
p2072
g59
(g98
S'Q\x00\x00\x00'
tRp2073
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2074
I0
sg903
g1410
sS'block_loop.thisRepN'
p2075
I0
sg906
g1406
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2076
I0
sg909
g1413
sg55
g11
sS'block_loop.thisTrial'
p2077
Nsg69
Vy
sS'block_loop.thisTrialN'
p2078
I0
sg39
F1.2334292592458951
sg34
g752
(S'\x07\xdf\t\x19\x0c,(\x0c\r\xf0'
tRp2079
sa(dp2080
S'trial_loop.thisTrialN'
p2081
I82
sg894
g1111
sS'block_loop.thisIndex'
p2082
g888
sg38
S'right'
p2083
sg58
g62
sS'trial_loop.thisN'
p2084
I82
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p2085
g59
(g98
S'R\x00\x00\x00'
tRp2086
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2087
I0
sg903
g1119
sS'block_loop.thisRepN'
p2088
I0
sg906
g1115
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2089
I0
sg909
g1122
sg55
g11
sS'block_loop.thisTrial'
p2090
Nsg69
Vy
sS'block_loop.thisTrialN'
p2091
I0
sg39
F1.5167412292503286
sg34
g752
(S'\x07\xdf\t\x19\x0c,/\x00\xf20'
tRp2092
sa(dp2093
S'trial_loop.thisTrialN'
p2094
I83
sg894
g1387
sS'block_loop.thisIndex'
p2095
g888
sg38
S'right'
p2096
sg58
g62
sS'trial_loop.thisN'
p2097
I83
sg33
g1269
sg63
g64
sS'trial_loop.thisIndex'
p2098
g59
(g98
S'S\x00\x00\x00'
tRp2099
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2100
I0
sg903
g1394
sS'block_loop.thisRepN'
p2101
I0
sg906
g1275
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2102
I0
sg909
g1269
sg55
g11
sS'block_loop.thisTrial'
p2103
Nsg69
Vy
sS'block_loop.thisTrialN'
p2104
I0
sg39
F1.0834418605718383
sg34
g752
(S'\x07\xdf\t\x19\x0c,5\t\x1f\xf0'
tRp2105
sa(dp2106
S'trial_loop.thisTrialN'
p2107
I84
sg894
S'30-spaghetti_hoops.png'
p2108
sS'block_loop.thisIndex'
p2109
g888
sg38
S'right'
p2110
sg58
g62
sS'trial_loop.thisN'
p2111
I84
sg33
g1222
sg63
g64
sS'trial_loop.thisIndex'
p2112
g59
(g98
S'T\x00\x00\x00'
tRp2113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2114
I0
sg903
S'19-caramello_redo.png'
p2115
sS'block_loop.thisRepN'
p2116
I0
sg906
g1222
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2117
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p2118
Nsg69
Vy
sS'block_loop.thisTrialN'
p2119
I0
sg39
F1.1672500718450465
sg34
g752
(S'\x07\xdf\t\x19\x0c,;\n\xe1('
tRp2120
sa(dp2121
S'trial_loop.thisTrialN'
p2122
I85
sg894
g1624
sS'block_loop.thisIndex'
p2123
g888
sg38
S'left'
p2124
sg58
g62
sS'trial_loop.thisN'
p2125
I85
sg33
g1462
sg63
g64
sS'trial_loop.thisIndex'
p2126
g59
(g98
S'U\x00\x00\x00'
tRp2127
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2128
I0
sg903
g1631
sS'block_loop.thisRepN'
p2129
I0
sg906
g1462
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2130
I0
sg909
g1469
sg55
g11
sS'block_loop.thisTrial'
p2131
Nsg69
Vy
sS'block_loop.thisTrialN'
p2132
I0
sg39
F1.3335174114945403
sg34
g752
(S'\x07\xdf\t\x19\x0c-\x05\x0e\x11\x90'
tRp2133
sa(dp2134
S'trial_loop.thisTrialN'
p2135
I86
sg894
g1128
sS'block_loop.thisIndex'
p2136
g888
sg38
S'left'
p2137
sg58
g62
sS'trial_loop.thisN'
p2138
I86
sg33
g1076
sg63
g64
sS'trial_loop.thisIndex'
p2139
g59
(g98
S'V\x00\x00\x00'
tRp2140
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2141
I0
sg903
g1135
sS'block_loop.thisRepN'
p2142
I0
sg906
g1076
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2143
I0
sg909
g1070
sg55
g11
sS'block_loop.thisTrial'
p2144
Nsg69
Vy
sS'block_loop.thisTrialN'
p2145
I0
sg39
F1.4832214229336387
sg34
g752
(S'\x07\xdf\t\x19\x0c-\x0c\x04a\x18'
tRp2146
sa(dp2147
S'trial_loop.thisTrialN'
p2148
I87
sg894
g1458
sS'block_loop.thisIndex'
p2149
g888
sg38
S'right'
p2150
sg58
g62
sS'trial_loop.thisN'
p2151
I87
sg33
g1469
sg63
g64
sS'trial_loop.thisIndex'
p2152
g59
(g98
S'W\x00\x00\x00'
tRp2153
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2154
I0
sg903
g1466
sS'block_loop.thisRepN'
p2155
I0
sg906
g1462
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2156
I0
sg909
g1469
sg55
g11
sS'block_loop.thisTrial'
p2157
Nsg69
Vy
sS'block_loop.thisTrialN'
p2158
I0
sg39
F0.86672874196483463
sg34
g752
(S'\x07\xdf\t\x19\x0c-\x12\x0cT@'
tRp2159
sa(dp2160
S'trial_loop.thisTrialN'
p2161
I88
sg894
g1190
sS'block_loop.thisIndex'
p2162
g888
sg38
S'right'
p2163
sg58
g62
sS'trial_loop.thisN'
p2164
I88
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2165
g59
(g98
S'X\x00\x00\x00'
tRp2166
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2167
I0
sg903
g1197
sS'block_loop.thisRepN'
p2168
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2169
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2170
Nsg69
Vy
sS'block_loop.thisTrialN'
p2171
I0
sg39
F1.6167421415630088
sg34
g752
(S'\x07\xdf\t\x19\x0c-\x18\n\xbe\x00'
tRp2172
sa(dp2173
S'trial_loop.thisTrialN'
p2174
I89
sg894
g1786
sS'block_loop.thisIndex'
p2175
g888
sg38
S'left'
p2176
sg58
g62
sS'trial_loop.thisN'
p2177
I89
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p2178
g59
(g98
S'Y\x00\x00\x00'
tRp2179
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2180
I0
sg903
g1793
sS'block_loop.thisRepN'
p2181
I0
sg906
g1042
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2182
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p2183
Nsg69
Vy
sS'block_loop.thisTrialN'
p2184
I0
sg39
F1.1335440966504393
sg34
g752
(S'\x07\xdf\t\x19\x0c-\x1f\x05W0'
tRp2185
sa(dp2186
S'trial_loop.thisTrialN'
p2187
I90
sg894
g1488
sS'block_loop.thisIndex'
p2188
g888
sg38
S'left'
p2189
sg58
g62
sS'trial_loop.thisN'
p2190
I90
sg33
g1301
sg63
g64
sS'trial_loop.thisIndex'
p2191
g59
(g98
S'Z\x00\x00\x00'
tRp2192
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2193
I0
sg903
g1495
sS'block_loop.thisRepN'
p2194
I0
sg906
g1301
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2195
I0
sg909
g1308
sg55
g11
sS'block_loop.thisTrial'
p2196
Nsg69
Vy
sS'block_loop.thisTrialN'
p2197
I0
sg39
F1.0001140391304943
sg34
g752
(S'\x07\xdf\t\x19\x0c-%\x08\x0e\x80'
tRp2198
sa(dp2199
S'trial_loop.thisTrialN'
p2200
I91
sg894
g1143
sS'block_loop.thisIndex'
p2201
g888
sg38
S'left'
p2202
sg58
g62
sS'trial_loop.thisN'
p2203
I91
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p2204
g59
(g98
S'[\x00\x00\x00'
tRp2205
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2206
I0
sg903
g1151
sS'block_loop.thisRepN'
p2207
I0
sg906
g1147
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2208
I0
sg909
g1154
sg55
g11
sS'block_loop.thisTrial'
p2209
Nsg69
Vy
sS'block_loop.thisTrialN'
p2210
I0
sg39
F1.0834432860610832
sg34
g752
(S'\x07\xdf\t\x19\x0c-+\x08`\x88'
tRp2211
sa(dp2212
S'trial_loop.thisTrialN'
p2213
I92
sg894
g1402
sS'block_loop.thisIndex'
p2214
g888
sg38
S'right'
p2215
sg58
g62
sS'trial_loop.thisN'
p2216
I92
sg33
g1406
sg63
g64
sS'trial_loop.thisIndex'
p2217
g59
(g98
S'\\\x00\x00\x00'
tRp2218
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2219
I0
sg903
g1410
sS'block_loop.thisRepN'
p2220
I0
sg906
g1406
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2221
I0
sg909
g1413
sg55
g11
sS'block_loop.thisTrial'
p2222
Nsg69
Vy
sS'block_loop.thisTrialN'
p2223
I0
sg39
F0.85009727537726576
sg34
g752
(S'\x07\xdf\t\x19\x0c-1\n!\xc0'
tRp2224
sa(dp2225
S'trial_loop.thisTrialN'
p2226
I93
sg894
g1314
sS'block_loop.thisIndex'
p2227
g888
sg38
S'left'
p2228
sg58
g62
sS'trial_loop.thisN'
p2229
I93
sg33
g1324
sg63
g64
sS'trial_loop.thisIndex'
p2230
g59
(g98
S']\x00\x00\x00'
tRp2231
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2232
I0
sg903
g1322
sS'block_loop.thisRepN'
p2233
I0
sg906
g1324
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2234
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p2235
Nsg69
Vy
sS'block_loop.thisTrialN'
p2236
I0
sg39
F0.95010103866843565
sg34
g752
(S'\x07\xdf\t\x19\x0c-7\x08\x8fh'
tRp2237
sa(dp2238
S'trial_loop.thisTrialN'
p2239
I94
sg894
g1402
sS'block_loop.thisIndex'
p2240
g888
sg38
S'right'
p2241
sg58
g62
sS'trial_loop.thisN'
p2242
I94
sg33
g1406
sg63
g64
sS'trial_loop.thisIndex'
p2243
g59
(g98
S'^\x00\x00\x00'
tRp2244
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2245
I0
sg903
g1410
sS'block_loop.thisRepN'
p2246
I0
sg906
g1406
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2247
I0
sg909
g1413
sg55
g11
sS'block_loop.thisTrial'
p2248
Nsg69
Vy
sS'block_loop.thisTrialN'
p2249
I0
sg39
F0.73352334152878029
sg34
g752
(S'\x07\xdf\t\x19\x0c.\x01\x08-\xc0'
tRp2250
sa(dp2251
S'trial_loop.thisTrialN'
p2252
I95
sg894
g998
sS'block_loop.thisIndex'
p2253
g888
sg38
S'right'
p2254
sg58
g62
sS'trial_loop.thisN'
p2255
I95
sg33
g1008
sg63
g64
sS'trial_loop.thisIndex'
p2256
g59
(g98
S'_\x00\x00\x00'
tRp2257
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2258
I0
sg903
g1006
sS'block_loop.thisRepN'
p2259
I0
sg906
g1008
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2260
I0
sg909
g1002
sg55
g11
sS'block_loop.thisTrial'
p2261
Nsg69
Vy
sS'block_loop.thisTrialN'
p2262
I0
sg39
F1.0672041140769579
sg34
g752
(S'\x07\xdf\t\x19\x0c.\x07\x04\xb3 '
tRp2263
sa(dp2264
S'trial_loop.thisTrialN'
p2265
I96
sg894
g1297
sS'block_loop.thisIndex'
p2266
g888
sg38
S'right'
p2267
sg58
g62
sS'trial_loop.thisN'
p2268
I96
sg33
g1301
sg63
g64
sS'trial_loop.thisIndex'
p2269
g59
(g98
S'`\x00\x00\x00'
tRp2270
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2271
I0
sg903
g1305
sS'block_loop.thisRepN'
p2272
I0
sg906
g1301
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2273
I0
sg909
g1308
sg55
g11
sS'block_loop.thisTrial'
p2274
Nsg69
Vy
sS'block_loop.thisTrialN'
p2275
I0
sg39
F1.9001584573688888
sg34
g752
(S'\x07\xdf\t\x19\x0c.\r\x069\xc0'
tRp2276
sa(dp2277
S'trial_loop.thisTrialN'
p2278
I97
sg894
g1190
sS'block_loop.thisIndex'
p2279
g888
sg38
S'right'
p2280
sg58
g62
sS'trial_loop.thisN'
p2281
I97
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2282
g59
(g98
S'a\x00\x00\x00'
tRp2283
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2284
I0
sg903
g1197
sS'block_loop.thisRepN'
p2285
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2286
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2287
Nsg69
Vy
sS'block_loop.thisTrialN'
p2288
I0
sg39
F0.85008530126833648
sg34
g752
(S'\x07\xdf\t\x19\x0c.\x14\x05\x18\xb0'
tRp2289
sa(dp2290
S'trial_loop.thisTrialN'
p2291
I98
sg894
g1265
sS'block_loop.thisIndex'
p2292
g888
sg38
S'left'
p2293
sg58
g62
sS'trial_loop.thisN'
p2294
I98
sg33
g1269
sg63
g64
sS'trial_loop.thisIndex'
p2295
g59
(g98
S'b\x00\x00\x00'
tRp2296
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2297
I0
sg903
g1273
sS'block_loop.thisRepN'
p2298
I0
sg906
g1275
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2299
I0
sg909
g1269
sg55
g11
sS'block_loop.thisTrial'
p2300
Nsg69
Vy
sS'block_loop.thisTrialN'
p2301
I0
sg39
F1.5000841038581711
sg34
g752
(S'\x07\xdf\t\x19\x0c.\x1a\x03G\xd8'
tRp2302
sa(dp2303
S'trial_loop.thisTrialN'
p2304
I99
sg894
g2015
sS'block_loop.thisIndex'
p2305
g888
sg38
S'left'
p2306
sg58
g62
sS'trial_loop.thisN'
p2307
I99
sg33
g968
sg63
g64
sS'trial_loop.thisIndex'
p2308
g59
(g98
S'c\x00\x00\x00'
tRp2309
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2310
I0
sg903
g2022
sS'block_loop.thisRepN'
p2311
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2312
I0
sg909
g975
sg55
g11
sS'block_loop.thisTrial'
p2313
Nsg69
Vy
sS'block_loop.thisTrialN'
p2314
I0
sg39
F1.5667878712538368
sg34
g752
(S'\x07\xdf\t\x19\x0c. \x0by\x80'
tRp2315
sa(dp2316
S'trial_loop.thisTrialN'
p2317
I100
sg894
g1160
sS'block_loop.thisIndex'
p2318
g888
sg38
S'left'
p2319
sg58
g62
sS'trial_loop.thisN'
p2320
I100
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p2321
g59
(g98
S'd\x00\x00\x00'
tRp2322
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2323
I0
sg903
g1167
sS'block_loop.thisRepN'
p2324
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2325
I0
sg909
g1026
sg55
g11
sS'block_loop.thisTrial'
p2326
Nsg69
Vy
sS'block_loop.thisTrialN'
p2327
I0
sg39
F0.81728821793331008
sg34
g752
(S"\x07\xdf\t\x19\x0c.'\x05[\x18"
tRp2328
sa(dp2329
S'trial_loop.thisTrialN'
p2330
I101
sg894
g1175
sS'block_loop.thisIndex'
p2331
g888
sg38
S'left'
p2332
sg58
g62
sS'trial_loop.thisN'
p2333
I101
sg33
g985
sg63
g64
sS'trial_loop.thisIndex'
p2334
g59
(g98
S'e\x00\x00\x00'
tRp2335
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2336
I0
sg903
g1182
sS'block_loop.thisRepN'
p2337
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2338
I0
sg909
g992
sg55
g11
sS'block_loop.thisTrial'
p2339
Nsg69
Vy
sS'block_loop.thisTrialN'
p2340
I0
sg39
F1.166644238970548
sg34
g752
(S'\x07\xdf\t\x19\x0c.-\x03\x11('
tRp2341
sa(dp2342
S'trial_loop.thisTrialN'
p2343
I102
sg894
g2015
sS'block_loop.thisIndex'
p2344
g888
sg38
S'left'
p2345
sg58
g62
sS'trial_loop.thisN'
p2346
I102
sg33
g975
sg63
g64
sS'trial_loop.thisIndex'
p2347
g59
(g98
S'f\x00\x00\x00'
tRp2348
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2349
I0
sg903
g2022
sS'block_loop.thisRepN'
p2350
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2351
I0
sg909
g975
sg55
g11
sS'block_loop.thisTrial'
p2352
Nsg69
Vy
sS'block_loop.thisTrialN'
p2353
I0
sg39
F1.6668041788489063
sg34
g752
(S'\x07\xdf\t\x19\x0c.3\x06=\xa8'
tRp2354
sa(dp2355
S'trial_loop.thisTrialN'
p2356
I103
sg894
g1786
sS'block_loop.thisIndex'
p2357
g888
sg38
S'left'
p2358
sg58
g62
sS'trial_loop.thisN'
p2359
I103
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p2360
g59
(g98
S'g\x00\x00\x00'
tRp2361
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2362
I0
sg903
g1793
sS'block_loop.thisRepN'
p2363
I0
sg906
g1042
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2364
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p2365
Nsg69
Vy
sS'block_loop.thisTrialN'
p2366
I0
sg39
F1.0501281799824937
sg34
g752
(S'\x07\xdf\t\x19\x0c.:\x01\x8ep'
tRp2367
sa(dp2368
S'trial_loop.thisTrialN'
p2369
I104
sg894
g949
sS'block_loop.thisIndex'
p2370
g888
sg38
S'right'
p2371
sg58
g62
sS'trial_loop.thisN'
p2372
I104
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p2373
g59
(g98
S'h\x00\x00\x00'
tRp2374
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2375
I0
sg903
g956
sS'block_loop.thisRepN'
p2376
I0
sg906
g907
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2377
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p2378
Nsg69
Vy
sS'block_loop.thisTrialN'
p2379
I0
sg39
F1.5500851302094816
sg34
g752
(S'\x07\xdf\t\x19\x0c/\x04\x02\xd6\x90'
tRp2380
sa(dp2381
S'trial_loop.thisTrialN'
p2382
I105
sg894
g1282
sS'block_loop.thisIndex'
p2383
g888
sg38
S'right'
p2384
sg58
g62
sS'trial_loop.thisN'
p2385
I105
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p2386
g59
(g98
S'i\x00\x00\x00'
tRp2387
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2388
I0
sg903
g1289
sS'block_loop.thisRepN'
p2389
I0
sg906
g1147
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2390
I0
sg909
g1154
sg55
g11
sS'block_loop.thisTrial'
p2391
Nsg69
Vy
sS'block_loop.thisTrialN'
p2392
I0
sg39
F1.2838468135196308
sg34
g752
(S'\x07\xdf\t\x19\x0c/\n\x0b\xbb\xe8'
tRp2393
sa(dp2394
S'trial_loop.thisTrialN'
p2395
I106
sg894
g1555
sS'block_loop.thisIndex'
p2396
g888
sg38
S'left'
p2397
sg58
g62
sS'trial_loop.thisN'
p2398
I106
sg33
g1324
sg63
g64
sS'trial_loop.thisIndex'
p2399
g59
(g98
S'j\x00\x00\x00'
tRp2400
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2401
I0
sg903
g1562
sS'block_loop.thisRepN'
p2402
I0
sg906
g1324
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2403
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p2404
Nsg69
Vy
sS'block_loop.thisTrialN'
p2405
I0
sg39
F0.85029285248310771
sg34
g752
(S'\x07\xdf\t\x19\x0c/\x11\x01S\xd8'
tRp2406
sa(dp2407
S'trial_loop.thisTrialN'
p2408
I107
sg894
g1015
sS'block_loop.thisIndex'
p2409
g888
sg38
S'right'
p2410
sg58
g62
sS'trial_loop.thisN'
p2411
I107
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p2412
g59
(g98
S'k\x00\x00\x00'
tRp2413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2414
I0
sg903
g1023
sS'block_loop.thisRepN'
p2415
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2416
I0
sg909
g1026
sg55
g11
sS'block_loop.thisTrial'
p2417
Nsg69
Vy
sS'block_loop.thisTrialN'
p2418
I0
sg39
F0.78355059688146866
sg34
g752
(S'\x07\xdf\t\x19\x0c/\x16\x0e\xc5@'
tRp2419
sa(dp2420
S'trial_loop.thisTrialN'
p2421
I108
sg894
g1128
sS'block_loop.thisIndex'
p2422
g888
sg38
S'left'
p2423
sg58
g62
sS'trial_loop.thisN'
p2424
I108
sg33
g1076
sg63
g64
sS'trial_loop.thisIndex'
p2425
g59
(g98
S'l\x00\x00\x00'
tRp2426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2427
I0
sg903
g1135
sS'block_loop.thisRepN'
p2428
I0
sg906
g1076
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2429
I0
sg909
g1070
sg55
g11
sS'block_loop.thisTrial'
p2430
Nsg69
Vy
sS'block_loop.thisTrialN'
p2431
I0
sg39
F1.4498324765190773
sg34
g752
(S'\x07\xdf\t\x19\x0c/\x1c\x0c\x028'
tRp2432
sa(dp2433
S'trial_loop.thisTrialN'
p2434
I109
sg894
g1844
sS'block_loop.thisIndex'
p2435
g888
sg38
S'left'
p2436
sg58
g62
sS'trial_loop.thisN'
p2437
I109
sg33
g1406
sg63
g64
sS'trial_loop.thisIndex'
p2438
g59
(g98
S'm\x00\x00\x00'
tRp2439
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2440
I0
sg903
g1851
sS'block_loop.thisRepN'
p2441
I0
sg906
g1406
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2442
I0
sg909
g1413
sg55
g11
sS'block_loop.thisTrial'
p2443
Nsg69
Vy
sS'block_loop.thisTrialN'
p2444
I0
sg39
F0.90009944212033588
sg34
g752
(S'\x07\xdf\t\x19\x0c/#\x04:\x08'
tRp2445
sa(dp2446
S'trial_loop.thisTrialN'
p2447
I110
sg894
g1032
sS'block_loop.thisIndex'
p2448
g888
sg38
S'right'
p2449
sg58
g62
sS'trial_loop.thisN'
p2450
I110
sg33
g1042
sg63
g64
sS'trial_loop.thisIndex'
p2451
g59
(g98
S'n\x00\x00\x00'
tRp2452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2453
I0
sg903
g1040
sS'block_loop.thisRepN'
p2454
I0
sg906
g1042
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2455
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p2456
Nsg69
Vy
sS'block_loop.thisTrialN'
p2457
I0
sg39
F1.2835340612073196
sg34
g752
(S'\x07\xdf\t\x19\x0c/)\x03 \xc8'
tRp2458
sa(dp2459
S'trial_loop.thisTrialN'
p2460
I111
sg894
g2015
sS'block_loop.thisIndex'
p2461
g888
sg38
S'left'
p2462
sg58
g62
sS'trial_loop.thisN'
p2463
I111
sg33
g975
sg63
g64
sS'trial_loop.thisIndex'
p2464
g59
(g98
S'o\x00\x00\x00'
tRp2465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2466
I0
sg903
g2022
sS'block_loop.thisRepN'
p2467
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2468
I0
sg909
g975
sg55
g11
sS'block_loop.thisTrial'
p2469
Nsg69
Vy
sS'block_loop.thisTrialN'
p2470
I0
sg39
F2.2333947624101711
sg34
g752
(S'\x07\xdf\t\x19\x0c//\x07\xfa\xf8'
tRp2471
sa(dp2472
S'trial_loop.thisTrialN'
p2473
I112
sg894
g1801
sS'block_loop.thisIndex'
p2474
g888
sg38
S'left'
p2475
sg58
g62
sS'trial_loop.thisN'
p2476
I112
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2477
g59
(g98
S'p\x00\x00\x00'
tRp2478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2479
I0
sg903
g1808
sS'block_loop.thisRepN'
p2480
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2481
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p2482
Nsg69
Vy
sS'block_loop.thisTrialN'
p2483
I0
sg39
F1.4335263065477193
sg34
g752
(S'\x07\xdf\t\x19\x0c/6\x0c\x15\xc0'
tRp2484
sa(dp2485
S'trial_loop.thisTrialN'
p2486
I113
sg894
g981
sS'block_loop.thisIndex'
p2487
g888
sg38
S'right'
p2488
sg58
g62
sS'trial_loop.thisN'
p2489
I113
sg33
g992
sg63
g64
sS'trial_loop.thisIndex'
p2490
g59
(g98
S'q\x00\x00\x00'
tRp2491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2492
I0
sg903
g989
sS'block_loop.thisRepN'
p2493
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2494
I0
sg909
g992
sg55
g11
sS'block_loop.thisTrial'
p2495
Nsg69
Vy
sS'block_loop.thisTrialN'
p2496
I0
sg39
F1.033353879382048
sg34
g752
(S'\x07\xdf\t\x19\x0c0\x01\x03\xd4x'
tRp2497
sa(dp2498
S'trial_loop.thisTrialN'
p2499
I114
sg894
g1801
sS'block_loop.thisIndex'
p2500
g888
sg38
S'left'
p2501
sg58
g62
sS'trial_loop.thisN'
p2502
I114
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2503
g59
(g98
S'r\x00\x00\x00'
tRp2504
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2505
I0
sg903
g1808
sS'block_loop.thisRepN'
p2506
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2507
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p2508
Nsg69
Vy
sS'block_loop.thisTrialN'
p2509
I0
sg39
F1.0168629660201987
sg34
g752
(S'\x07\xdf\t\x19\x0c0\x07\x04\xde\x18'
tRp2510
sa(dp2511
S'trial_loop.thisTrialN'
p2512
I115
sg894
g1667
sS'block_loop.thisIndex'
p2513
g888
sg38
S'left'
p2514
sg58
g62
sS'trial_loop.thisN'
p2515
I115
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p2516
g59
(g98
S's\x00\x00\x00'
tRp2517
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2518
I0
sg903
g1674
sS'block_loop.thisRepN'
p2519
I0
sg906
g1115
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2520
I0
sg909
g1122
sg55
g11
sS'block_loop.thisTrial'
p2521
Nsg69
Vy
sS'block_loop.thisTrialN'
p2522
I0
sg39
F1.53353634198902
sg34
g752
(S'\x07\xdf\t\x19\x0c0\r\x05\xad '
tRp2523
sa(dp2524
S'trial_loop.thisTrialN'
p2525
I116
sg894
g2108
sS'block_loop.thisIndex'
p2526
g888
sg38
S'right'
p2527
sg58
g62
sS'trial_loop.thisN'
p2528
I116
sg33
g1222
sg63
g64
sS'trial_loop.thisIndex'
p2529
g59
(g98
S't\x00\x00\x00'
tRp2530
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2531
I0
sg903
g2115
sS'block_loop.thisRepN'
p2532
I0
sg906
g1222
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2533
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p2534
Nsg69
Vy
sS'block_loop.thisTrialN'
p2535
I0
sg39
F1.4168512199921679
sg34
g752
(S'\x07\xdf\t\x19\x0c0\x13\x0eW\xe0'
tRp2536
sa(dp2537
S'trial_loop.thisTrialN'
p2538
I117
sg894
g1175
sS'block_loop.thisIndex'
p2539
g888
sg38
S'left'
p2540
sg58
g62
sS'trial_loop.thisN'
p2541
I117
sg33
g985
sg63
g64
sS'trial_loop.thisIndex'
p2542
g59
(g98
S'u\x00\x00\x00'
tRp2543
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2544
I0
sg903
g1182
sS'block_loop.thisRepN'
p2545
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2546
I0
sg909
g992
sg55
g11
sS'block_loop.thisTrial'
p2547
Nsg69
Vy
sS'block_loop.thisTrialN'
p2548
I0
sg39
F1.0334317110882694
sg34
g752
(S'\x07\xdf\t\x19\x0c0\x1a\x05\xd40'
tRp2549
sa(dp2550
S'trial_loop.thisTrialN'
p2551
I118
sg894
g2015
sS'block_loop.thisIndex'
p2552
g888
sg38
S'left'
p2553
sg58
g62
sS'trial_loop.thisN'
p2554
I118
sg33
g968
sg63
g64
sS'trial_loop.thisIndex'
p2555
g59
(g98
S'v\x00\x00\x00'
tRp2556
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2557
I0
sg903
g2022
sS'block_loop.thisRepN'
p2558
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2559
I0
sg909
g975
sg55
g11
sS'block_loop.thisTrial'
p2560
Nsg69
Vy
sS'block_loop.thisTrialN'
p2561
I0
sg39
F0.83348291465699731
sg34
g752
(S'\x07\xdf\t\x19\x0c0 \x06\xe1\xb8'
tRp2562
sa(dp2563
S'trial_loop.thisTrialN'
p2564
I119
sg894
g1314
sS'block_loop.thisIndex'
p2565
g888
sg38
S'right'
p2566
sg58
g62
sS'trial_loop.thisN'
p2567
I119
sg33
g1324
sg63
g64
sS'trial_loop.thisIndex'
p2568
g59
(g98
S'w\x00\x00\x00'
tRp2569
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2570
I0
sg903
g1322
sS'block_loop.thisRepN'
p2571
I0
sg906
g1324
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2572
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p2573
Nsg69
Vy
sS'block_loop.thisTrialN'
p2574
I0
sg39
F1.2499823239359102
sg34
g752
(S'\x07\xdf\t\x19\x0c0&\x04\xd2`'
tRp2575
sa(dp2576
S'trial_loop.thisTrialN'
p2577
I120
sg894
g1015
sS'block_loop.thisIndex'
p2578
g888
sg38
S'right'
p2579
sg58
g62
sS'trial_loop.thisN'
p2580
I120
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p2581
g59
(g98
S'x\x00\x00\x00'
tRp2582
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2583
I0
sg903
g1023
sS'block_loop.thisRepN'
p2584
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2585
I0
sg909
g1026
sg55
g11
sS'block_loop.thisTrial'
p2586
Nsg69
Vy
sS'block_loop.thisTrialN'
p2587
I0
sg39
F1.0335417588485143
sg34
g752
(S'\x07\xdf\t\x19\x0c0,\t3x'
tRp2588
sa(dp2589
S'trial_loop.thisTrialN'
p2590
I121
sg894
g1458
sS'block_loop.thisIndex'
p2591
g888
sg38
S'right'
p2592
sg58
g62
sS'trial_loop.thisN'
p2593
I121
sg33
g1469
sg63
g64
sS'trial_loop.thisIndex'
p2594
g59
(g98
S'y\x00\x00\x00'
tRp2595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2596
I0
sg903
g1466
sS'block_loop.thisRepN'
p2597
I0
sg906
g1462
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2598
I0
sg909
g1469
sg55
g11
sS'block_loop.thisTrial'
p2599
Nsg69
Vy
sS'block_loop.thisTrialN'
p2600
I0
sg39
F1.1001805239411624
sg34
g752
(S'\x07\xdf\t\x19\x0c02\nA\x00'
tRp2601
sa(dp2602
S'trial_loop.thisTrialN'
p2603
I122
sg894
g1652
sS'block_loop.thisIndex'
p2604
g888
sg38
S'left'
p2605
sg58
g62
sS'trial_loop.thisN'
p2606
I122
sg33
g1335
sg63
g64
sS'trial_loop.thisIndex'
p2607
g59
(g98
S'z\x00\x00\x00'
tRp2608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2609
I0
sg903
g1659
sS'block_loop.thisRepN'
p2610
I0
sg906
g1335
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2611
I0
sg909
g1342
sg55
g11
sS'block_loop.thisTrial'
p2612
Nsg69
Vy
sS'block_loop.thisTrialN'
p2613
I0
sg39
F1.3834109559666103
sg34
g752
(S'\x07\xdf\t\x19\x0c08\x0c<\xd0'
tRp2614
sa(dp2615
S'trial_loop.thisTrialN'
p2616
I123
sg894
g964
sS'block_loop.thisIndex'
p2617
g888
sg38
S'right'
p2618
sg58
g62
sS'trial_loop.thisN'
p2619
I123
sg33
g968
sg63
g64
sS'trial_loop.thisIndex'
p2620
g59
(g98
S'{\x00\x00\x00'
tRp2621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2622
I0
sg903
g972
sS'block_loop.thisRepN'
p2623
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2624
I0
sg909
g975
sg55
g11
sS'block_loop.thisTrial'
p2625
Nsg69
Vy
sS'block_loop.thisTrialN'
p2626
I0
sg39
F1.0000786869986769
sg34
g752
(S'\x07\xdf\t\x19\x0c1\x03\x03C\xf0'
tRp2627
sa(dp2628
S'trial_loop.thisTrialN'
p2629
I124
sg894
g1083
sS'block_loop.thisIndex'
p2630
g888
sg38
S'left'
p2631
sg58
g62
sS'trial_loop.thisN'
p2632
I124
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p2633
g59
(g98
S'|\x00\x00\x00'
tRp2634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2635
I0
sg903
g1090
sS'block_loop.thisRepN'
p2636
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2637
I0
sg909
g1060
sg55
g11
sS'block_loop.thisTrial'
p2638
Nsg69
Vy
sS'block_loop.thisTrialN'
p2639
I0
sg39
F1.2835340612073196
sg34
g752
(S'\x07\xdf\t\x19\x0c1\t\x03\xd4x'
tRp2640
sa(dp2641
S'trial_loop.thisTrialN'
p2642
I125
sg894
g1570
sS'block_loop.thisIndex'
p2643
g888
sg38
S'left'
p2644
sg58
g62
sS'trial_loop.thisN'
p2645
I125
sg33
g1008
sg63
g64
sS'trial_loop.thisIndex'
p2646
g59
(g98
S'}\x00\x00\x00'
tRp2647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2648
I0
sg903
g1577
sS'block_loop.thisRepN'
p2649
I0
sg906
g1008
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2650
I0
sg909
g1002
sg55
g11
sS'block_loop.thisTrial'
p2651
Nsg69
Vy
sS'block_loop.thisTrialN'
p2652
I0
sg39
F1.0668765366772277
sg34
g752
(S'\x07\xdf\t\x19\x0c1\x0f\x08\xae\xa8'
tRp2653
sa(dp2654
S'trial_loop.thisTrialN'
p2655
I126
sg894
g1331
sS'block_loop.thisIndex'
p2656
g888
sg38
S'right'
p2657
sg58
g62
sS'trial_loop.thisN'
p2658
I126
sg33
g1342
sg63
g64
sS'trial_loop.thisIndex'
p2659
g59
(g98
S'~\x00\x00\x00'
tRp2660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2661
I0
sg903
g1339
sS'block_loop.thisRepN'
p2662
I0
sg906
g1335
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2663
I0
sg909
g1342
sg55
g11
sS'block_loop.thisTrial'
p2664
Nsg69
Vy
sS'block_loop.thisTrialN'
p2665
I0
sg39
F1.0335332059130451
sg34
g752
(S'\x07\xdf\t\x19\x0c1\x15\n5H'
tRp2666
sa(dp2667
S'trial_loop.thisTrialN'
p2668
I127
sg894
g1297
sS'block_loop.thisIndex'
p2669
g888
sg38
S'right'
p2670
sg58
g62
sS'trial_loop.thisN'
p2671
I127
sg33
g1301
sg63
g64
sS'trial_loop.thisIndex'
p2672
g59
(g98
S'\x7f\x00\x00\x00'
tRp2673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2674
I0
sg903
g1305
sS'block_loop.thisRepN'
p2675
I0
sg906
g1301
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2676
I0
sg909
g1308
sg55
g11
sS'block_loop.thisTrial'
p2677
Nsg69
Vy
sS'block_loop.thisTrialN'
p2678
I0
sg39
F0.90015075972769409
sg34
g752
(S'\x07\xdf\t\x19\x0c1\x1b\x0b>\xe8'
tRp2679
sa(dp2680
S'trial_loop.thisTrialN'
p2681
I128
sg894
g1282
sS'block_loop.thisIndex'
p2682
g888
sg38
S'right'
p2683
sg58
g62
sS'trial_loop.thisN'
p2684
I128
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p2685
g59
(g98
S'\x80\x00\x00\x00'
tRp2686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2687
I0
sg903
g1289
sS'block_loop.thisRepN'
p2688
I0
sg906
g1147
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2689
I0
sg909
g1154
sg55
g11
sS'block_loop.thisTrial'
p2690
Nsg69
Vy
sS'block_loop.thisTrialN'
p2691
I0
sg39
F1.6167561113579723
sg34
g752
(S'\x07\xdf\t\x19\x0c1!\n%\xa8'
tRp2692
sa(dp2693
S'trial_loop.thisTrialN'
p2694
I129
sg894
g964
sS'block_loop.thisIndex'
p2695
g888
sg38
S'right'
p2696
sg58
g62
sS'trial_loop.thisN'
p2697
I129
sg33
g968
sg63
g64
sS'trial_loop.thisIndex'
p2698
g59
(g98
S'\x81\x00\x00\x00'
tRp2699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2700
I0
sg903
g972
sS'block_loop.thisRepN'
p2701
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2702
I0
sg909
g975
sg55
g11
sS'block_loop.thisTrial'
p2703
Nsg69
Vy
sS'block_loop.thisTrialN'
p2704
I0
sg39
F1.3167528042213235
sg34
g752
(S'\x07\xdf\t\x19\x0c1(\x04\xbe\xd8'
tRp2705
sa(dp2706
S'trial_loop.thisTrialN'
p2707
I130
sg894
g1175
sS'block_loop.thisIndex'
p2708
g888
sg38
S'left'
p2709
sg58
g62
sS'trial_loop.thisN'
p2710
I130
sg33
g985
sg63
g64
sS'trial_loop.thisIndex'
p2711
g59
(g98
S'\x82\x00\x00\x00'
tRp2712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2713
I0
sg903
g1182
sS'block_loop.thisRepN'
p2714
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2715
I0
sg909
g992
sg55
g11
sS'block_loop.thisTrial'
p2716
Nsg69
Vy
sS'block_loop.thisTrialN'
p2717
I0
sg39
F0.75008552934559702
sg34
g752
(S'\x07\xdf\t\x19\x0c1.\nP\xa0'
tRp2718
sa(dp2719
S'trial_loop.thisTrialN'
p2720
I131
sg894
g1143
sS'block_loop.thisIndex'
p2721
g888
sg38
S'right'
p2722
sg58
g62
sS'trial_loop.thisN'
p2723
I131
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p2724
g59
(g98
S'\x83\x00\x00\x00'
tRp2725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2726
I0
sg903
g1151
sS'block_loop.thisRepN'
p2727
I0
sg906
g1147
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2728
I0
sg909
g1154
sg55
g11
sS'block_loop.thisTrial'
p2729
Nsg69
Vy
sS'block_loop.thisTrialN'
p2730
I0
sg39
F2.7335746591379575
sg34
g752
(S'\x07\xdf\t\x19\x0c14\x06\xd6\x00'
tRp2731
sa(dp2732
S'trial_loop.thisTrialN'
p2733
I132
sg894
g1331
sS'block_loop.thisIndex'
p2734
g888
sg38
S'right'
p2735
sg58
g62
sS'trial_loop.thisN'
p2736
I132
sg33
g1342
sg63
g64
sS'trial_loop.thisIndex'
p2737
g59
(g98
S'\x84\x00\x00\x00'
tRp2738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2739
I0
sg903
g1339
sS'block_loop.thisRepN'
p2740
I0
sg906
g1335
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2741
I0
sg909
g1342
sg55
g11
sS'block_loop.thisTrial'
p2742
Nsg69
Vy
sS'block_loop.thisTrialN'
p2743
I0
sg39
F1.1001035475292156
sg34
g752
(S'\x07\xdf\t\x19\x0c2\x00\x03O\xa8'
tRp2744
sa(dp2745
S'trial_loop.thisTrialN'
p2746
I133
sg894
g1160
sS'block_loop.thisIndex'
p2747
g888
sg38
S'left'
p2748
sg58
g62
sS'trial_loop.thisN'
p2749
I133
sg33
g1026
sg63
g64
sS'trial_loop.thisIndex'
p2750
g59
(g98
S'\x85\x00\x00\x00'
tRp2751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2752
I0
sg903
g1167
sS'block_loop.thisRepN'
p2753
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2754
I0
sg909
g1026
sg55
g11
sS'block_loop.thisTrial'
p2755
Nsg69
Vy
sS'block_loop.thisTrialN'
p2756
I0
sg39
F0.70006939280938241
sg34
g752
(S'\x07\xdf\t\x19\x0c2\x06\x05Kx'
tRp2757
sa(dp2758
S'trial_loop.thisTrialN'
p2759
I134
sg894
g1667
sS'block_loop.thisIndex'
p2760
g888
sg38
S'left'
p2761
sg58
g62
sS'trial_loop.thisN'
p2762
I134
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p2763
g59
(g98
S'\x86\x00\x00\x00'
tRp2764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2765
I0
sg903
g1674
sS'block_loop.thisRepN'
p2766
I0
sg906
g1115
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2767
I0
sg909
g1122
sg55
g11
sS'block_loop.thisTrial'
p2768
Nsg69
Vy
sS'block_loop.thisTrialN'
p2769
I0
sg39
F1.0667667740162869
sg34
g752
(S'\x07\xdf\t\x19\x0c2\x0c\x01W\xc0'
tRp2770
sa(dp2771
S'trial_loop.thisTrialN'
p2772
I135
sg894
g949
sS'block_loop.thisIndex'
p2773
g888
sg38
S'right'
p2774
sg58
g62
sS'trial_loop.thisN'
p2775
I135
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p2776
g59
(g98
S'\x87\x00\x00\x00'
tRp2777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2778
I0
sg903
g956
sS'block_loop.thisRepN'
p2779
I0
sg906
g907
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2780
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p2781
Nsg69
Vy
sS'block_loop.thisTrialN'
p2782
I0
sg39
F0.78358851489247172
sg34
g752
(S'\x07\xdf\t\x19\x0c2\x12\x02\xde`'
tRp2783
sa(dp2784
S'trial_loop.thisTrialN'
p2785
I136
sg894
g1829
sS'block_loop.thisIndex'
p2786
g888
sg38
S'right'
p2787
sg58
g62
sS'trial_loop.thisN'
p2788
I136
sg33
g1246
sg63
g64
sS'trial_loop.thisIndex'
p2789
g59
(g98
S'\x88\x00\x00\x00'
tRp2790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2791
I0
sg903
g1836
sS'block_loop.thisRepN'
p2792
I0
sg906
g1239
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2793
I0
sg909
g1246
sg55
g11
sS'block_loop.thisTrial'
p2794
Nsg69
Vy
sS'block_loop.thisTrialN'
p2795
I0
sg39
F2.8667284568691684
sg34
g752
(S'\x07\xdf\t\x19\x0c2\x18\x00\x1bX'
tRp2796
sa(dp2797
S'trial_loop.thisTrialN'
p2798
I137
sg894
g1265
sS'block_loop.thisIndex'
p2799
g888
sg38
S'left'
p2800
sg58
g62
sS'trial_loop.thisN'
p2801
I137
sg33
g1275
sg63
g64
sS'trial_loop.thisIndex'
p2802
g59
(g98
S'\x89\x00\x00\x00'
tRp2803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2804
I0
sg903
g1273
sS'block_loop.thisRepN'
p2805
I0
sg906
g1275
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2806
I0
sg909
g1269
sg55
g11
sS'block_loop.thisTrial'
p2807
Nsg69
Vy
sS'block_loop.thisTrialN'
p2808
I0
sg39
F1.3335051522881258
sg34
g752
(S'\x07\xdf\t\x19\x0c2\x1f\r\xbb\xa0'
tRp2809
sa(dp2810
S'trial_loop.thisTrialN'
p2811
I138
sg894
g1652
sS'block_loop.thisIndex'
p2812
g888
sg38
S'right'
p2813
sg58
g62
sS'trial_loop.thisN'
p2814
I138
sg33
g1335
sg63
g64
sS'trial_loop.thisIndex'
p2815
g59
(g98
S'\x8a\x00\x00\x00'
tRp2816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2817
I0
sg903
g1659
sS'block_loop.thisRepN'
p2818
I0
sg906
g1335
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2819
I0
sg909
g1342
sg55
g11
sS'block_loop.thisTrial'
p2820
Nsg69
Vy
sS'block_loop.thisTrialN'
p2821
I0
sg39
F1.1501926691089466
sg34
g752
(S'\x07\xdf\t\x19\x0c2&\x04\x0b('
tRp2822
sa(dp2823
S'trial_loop.thisTrialN'
p2824
I139
sg894
g1570
sS'block_loop.thisIndex'
p2825
g888
sg38
S'left'
p2826
sg58
g62
sS'trial_loop.thisN'
p2827
I139
sg33
g1008
sg63
g64
sS'trial_loop.thisIndex'
p2828
g59
(g98
S'\x8b\x00\x00\x00'
tRp2829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2830
I0
sg903
g1577
sS'block_loop.thisRepN'
p2831
I0
sg906
g1008
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2832
I0
sg909
g1002
sg55
g11
sS'block_loop.thisTrial'
p2833
Nsg69
Vy
sS'block_loop.thisTrialN'
p2834
I0
sg39
F0.71682658753888973
sg34
g752
(S'\x07\xdf\t\x19\x0c2,\x06\xfd\x10'
tRp2835
sa(dp2836
S'trial_loop.thisTrialN'
p2837
I140
sg894
g2108
sS'block_loop.thisIndex'
p2838
g888
sg38
S'right'
p2839
sg58
g62
sS'trial_loop.thisN'
p2840
I140
sg33
g1222
sg63
g64
sS'trial_loop.thisIndex'
p2841
g59
(g98
S'\x8c\x00\x00\x00'
tRp2842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2843
I0
sg903
g2115
sS'block_loop.thisRepN'
p2844
I0
sg906
g1222
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2845
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p2846
Nsg69
Vy
sS'block_loop.thisTrialN'
p2847
I0
sg39
F1.1001950639292772
sg34
g752
(S'\x07\xdf\t\x19\x0c22\x03\tX'
tRp2848
sa(dp2849
S'trial_loop.thisTrialN'
p2850
I141
sg894
g1282
sS'block_loop.thisIndex'
p2851
g888
sg38
S'left'
p2852
sg58
g62
sS'trial_loop.thisN'
p2853
I141
sg33
g1147
sg63
g64
sS'trial_loop.thisIndex'
p2854
g59
(g98
S'\x8d\x00\x00\x00'
tRp2855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2856
I0
sg903
g1289
sS'block_loop.thisRepN'
p2857
I0
sg906
g1147
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2858
I0
sg909
g1154
sg55
g11
sS'block_loop.thisTrial'
p2859
Nsg69
Vy
sS'block_loop.thisTrialN'
p2860
I0
sg39
F1.1667999023811717
sg34
g752
(S'\x07\xdf\t\x19\x0c28\x05\t\x10'
tRp2861
sa(dp2862
S'trial_loop.thisTrialN'
p2863
I142
sg894
g1667
sS'block_loop.thisIndex'
p2864
g888
sg38
S'left'
p2865
sg58
g62
sS'trial_loop.thisN'
p2866
I142
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p2867
g59
(g98
S'\x8e\x00\x00\x00'
tRp2868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2869
I0
sg903
g1674
sS'block_loop.thisRepN'
p2870
I0
sg906
g1115
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2871
I0
sg909
g1122
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vy
sS'block_loop.thisTrialN'
p2873
I0
sg39
F1.0835271048199502
sg34
g752
(S'\x07\xdf\t\x19\x0c3\x02\x089x'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g1829
sS'block_loop.thisIndex'
p2877
g888
sg38
S'left'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g1836
sS'block_loop.thisRepN'
p2883
I0
sg906
g1239
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2884
I0
sg909
g1246
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vy
sS'block_loop.thisTrialN'
p2886
I0
sg39
F2.2167866738436715
sg34
g752
(S'\x07\xdf\t\x19\x0c3\x08\t\xfa\xb0'
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g1265
sS'block_loop.thisIndex'
p2890
g888
sg38
S'left'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g1275
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g1273
sS'block_loop.thisRepN'
p2896
I0
sg906
g1275
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2897
I0
sg909
g1269
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vy
sS'block_loop.thisTrialN'
p2899
I0
sg39
F1.1167917485854559
sg34
g752
(S'\x07\xdf\t\x19\x0c3\x0f\r\xda\xe0'
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g895
sS'block_loop.thisIndex'
p2903
g888
sg38
S'left'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g904
sS'block_loop.thisRepN'
p2909
I0
sg906
g907
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2910
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vy
sS'block_loop.thisTrialN'
p2912
I0
sg39
F0.91686005802148429
sg34
g752
(S'\x07\xdf\t\x19\x0c3\x16\x00\xd2\xf0'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g1066
sS'block_loop.thisIndex'
p2916
g888
sg38
S'right'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g1076
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g1074
sS'block_loop.thisRepN'
p2922
I0
sg906
g1076
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2923
I0
sg909
g1070
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vy
sS'block_loop.thisTrialN'
p2925
I0
sg39
F1.2166341465090227
sg34
g752
(S'\x07\xdf\t\x19\x0c3\x1b\x0f:p'
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g1555
sS'block_loop.thisIndex'
p2929
g888
sg38
S'left'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g1324
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g1562
sS'block_loop.thisRepN'
p2935
I0
sg906
g1324
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2936
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vy
sS'block_loop.thisTrialN'
p2938
I0
sg39
F0.80020259051343601
sg34
g752
(S'\x07\xdf\t\x19\x0c3"\x03\xdcH'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g1458
sS'block_loop.thisIndex'
p2942
g888
sg38
S'right'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g1462
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g1466
sS'block_loop.thisRepN'
p2948
I0
sg906
g1462
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2949
I0
sg909
g1469
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vy
sS'block_loop.thisTrialN'
p2951
I0
sg39
F0.93356565004614822
sg34
g752
(S'\x07\xdf\t\x19\x0c3(\x01W\xc0'
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g915
sS'block_loop.thisIndex'
p2955
g888
sg38
S'right'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g923
sS'block_loop.thisRepN'
p2961
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2962
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vy
sS'block_loop.thisTrialN'
p2964
I0
sg39
F0.98339305182526005
sg34
g752
(S'\x07\xdf\t\x19\x0c3.\x00\xb7\x98'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g998
sS'block_loop.thisIndex'
p2968
g888
sg38
S'right'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g1008
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g1006
sS'block_loop.thisRepN'
p2974
I0
sg906
g1008
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2975
I0
sg909
g1002
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vy
sS'block_loop.thisTrialN'
p2977
I0
sg39
F0.85021644626795023
sg34
g752
(S'\x07\xdf\t\x19\x0c34\x01\r\x88'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g1049
sS'block_loop.thisIndex'
p2981
g888
sg38
S'right'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g1060
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g1057
sS'block_loop.thisRepN'
p2987
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2988
I0
sg909
g1060
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vy
sS'block_loop.thisTrialN'
p2990
I0
sg39
F0.91686119841506297
sg34
g752
(S'\x07\xdf\t\x19\x0c39\x0e~\xf0'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g1829
sS'block_loop.thisIndex'
p2994
g888
sg38
S'left'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g1836
sS'block_loop.thisRepN'
p3000
I0
sg906
g1239
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3001
I0
sg909
g1246
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vy
sS'block_loop.thisTrialN'
p3003
I0
sg39
F1.1000904330303456
sg34
g752
(S'\x07\xdf\t\x19\x0c4\x03\r\xa40'
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g1297
sS'block_loop.thisIndex'
p3007
g888
sg38
S'left'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g1308
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g1305
sS'block_loop.thisRepN'
p3013
I0
sg906
g1301
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3014
I0
sg909
g1308
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vy
sS'block_loop.thisTrialN'
p3016
I0
sg39
F1.1001779580601578
sg34
g752
(S'\x07\xdf\t\x19\x0c4\n\x00\x9c@'
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g1652
sS'block_loop.thisIndex'
p3020
g888
sg38
S'left'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g1342
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g1659
sS'block_loop.thisRepN'
p3026
I0
sg906
g1335
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3027
I0
sg909
g1342
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vy
sS'block_loop.thisTrialN'
p3029
I0
sg39
F1.7834174561976397
sg34
g752
(S'\x07\xdf\t\x19\x0c4\x10\x02\x9b\xf8'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g2108
sS'block_loop.thisIndex'
p3033
g888
sg38
S'right'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g1222
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g2115
sS'block_loop.thisRepN'
p3039
I0
sg906
g1222
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3040
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vy
sS'block_loop.thisTrialN'
p3042
I0
sg39
F0.98354443876814912
sg34
g752
(S'\x07\xdf\t\x19\x0c4\x16\x0f\x13`'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g1083
sS'block_loop.thisIndex'
p3046
g888
sg38
S'left'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g1060
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g1090
sS'block_loop.thisRepN'
p3052
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3053
I0
sg909
g1060
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vy
sS'block_loop.thisTrialN'
p3055
I0
sg39
F0.83350914365655626
sg34
g752
(S'\x07\xdf\t\x19\x0c4\x1c\x0f*\xd0'
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g1624
sS'block_loop.thisIndex'
p3059
g888
sg38
S'left'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1462
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g1631
sS'block_loop.thisRepN'
p3065
I0
sg906
g1462
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3066
I0
sg909
g1469
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vy
sS'block_loop.thisTrialN'
p3068
I0
sg39
F0.90023087221743481
sg34
g752
(S'\x07\xdf\t\x19\x0c4"\r\x1f`'
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1111
sS'block_loop.thisIndex'
p3072
g888
sg38
S'right'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1119
sS'block_loop.thisRepN'
p3078
I0
sg906
g1115
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3079
I0
sg909
g1122
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vy
sS'block_loop.thisTrialN'
p3081
I0
sg39
F0.93347812501451699
sg34
g752
(S'\x07\xdf\t\x19\x0c4(\x0c@\xb8'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g1032
sS'block_loop.thisIndex'
p3085
g888
sg38
S'right'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g1042
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g1040
sS'block_loop.thisRepN'
p3091
I0
sg906
g1042
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3092
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vy
sS'block_loop.thisTrialN'
p3094
I0
sg39
F1.3334221888198954
sg34
g752
(S'\x07\xdf\t\x19\x0c4.\x0b\xa0\x90'
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g1488
sS'block_loop.thisIndex'
p3098
g888
sg38
S'right'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g1308
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g1495
sS'block_loop.thisRepN'
p3104
I0
sg906
g1301
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3105
I0
sg909
g1308
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vy
sS'block_loop.thisTrialN'
p3107
I0
sg39
F1.3168249339723843
sg34
g752
(S'\x07\xdf\t\x19\x0c45\x01\xf0\x18'
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g998
sS'block_loop.thisIndex'
p3111
g888
sg38
S'right'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g1008
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g1006
sS'block_loop.thisRepN'
p3117
I0
sg906
g1008
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3118
I0
sg909
g1002
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vy
sS'block_loop.thisTrialN'
p3120
I0
sg39
F0.91677909024292603
sg34
g752
(S'\x07\xdf\t\x19\x0c4;\x07C`'
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g1801
sS'block_loop.thisIndex'
p3124
g888
sg38
S'left'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g1808
sS'block_loop.thisRepN'
p3130
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3131
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vy
sS'block_loop.thisTrialN'
p3133
I0
sg39
F0.93343108387307439
sg34
g752
(S'\x07\xdf\t\x19\x0c5\x05\x06\xa7 '
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g1652
sS'block_loop.thisIndex'
p3137
g888
sg38
S'right'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g1342
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g1659
sS'block_loop.thisRepN'
p3143
I0
sg906
g1335
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3144
I0
sg909
g1342
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vy
sS'block_loop.thisTrialN'
p3146
I0
sg39
F1.550159825839728
sg34
g752
(S'\x07\xdf\t\x19\x0c5\x0b\x06\x06\xf8'
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g1314
sS'block_loop.thisIndex'
p3150
g888
sg38
S'right'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g1324
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g1322
sS'block_loop.thisRepN'
p3156
I0
sg906
g1324
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3157
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vy
sS'block_loop.thisTrialN'
p3159
I0
sg39
F1.0334191667843697
sg34
g752
(S'\x07\xdf\t\x19\x0c5\x11\x0e\xecP'
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g1801
sS'block_loop.thisIndex'
p3163
g888
sg38
S'left'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g1808
sS'block_loop.thisRepN'
p3169
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3170
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vy
sS'block_loop.thisTrialN'
p3172
I0
sg39
F0.71689130474442209
sg34
g752
(S'\x07\xdf\t\x19\x0c5\x18\x00\xb3\xb0'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g1844
sS'block_loop.thisIndex'
p3176
g888
sg38
S'left'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g1406
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g1851
sS'block_loop.thisRepN'
p3182
I0
sg906
g1406
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3183
I0
sg909
g1413
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vy
sS'block_loop.thisTrialN'
p3185
I0
sg39
F0.86676837056256772
sg34
g752
(S'\x07\xdf\t\x19\x0c5\x1d\x0c@\xb8'
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g998
sS'block_loop.thisIndex'
p3189
g888
sg38
S'right'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g1008
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g1006
sS'block_loop.thisRepN'
p3195
I0
sg906
g1008
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3196
I0
sg909
g1002
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vy
sS'block_loop.thisTrialN'
p3198
I0
sg39
F0.76679767861969594
sg34
g752
(S'\x07\xdf\t\x19\x0c5#\n\xae`'
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g1083
sS'block_loop.thisIndex'
p3202
g888
sg38
S'left'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1060
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g1090
sS'block_loop.thisRepN'
p3208
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3209
I0
sg909
g1060
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vy
sS'block_loop.thisTrialN'
p3211
I0
sg39
F1.1000870118568855
sg34
g752
(S'\x07\xdf\t\x19\x0c5)\x07\xac\xd8'
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g1555
sS'block_loop.thisIndex'
p3215
g888
sg38
S'left'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g1324
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g1562
sS'block_loop.thisRepN'
p3221
I0
sg906
g1324
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3222
I0
sg909
g1318
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vy
sS'block_loop.thisTrialN'
p3224
I0
sg39
F0.90013165817617846
sg34
g752
(S'\x07\xdf\t\x19\x0c5/\t\xac\x90'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g981
sS'block_loop.thisIndex'
p3228
g888
sg38
S'right'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g985
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g989
sS'block_loop.thisRepN'
p3234
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3235
I0
sg909
g992
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vy
sS'block_loop.thisTrialN'
p3237
I0
sg39
F1.2168340000825992
sg34
g752
(S'\x07\xdf\t\x19\x0c55\x08\x93P'
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g915
sS'block_loop.thisIndex'
p3241
g888
sg38
S'right'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g923
sS'block_loop.thisRepN'
p3247
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3248
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vy
sS'block_loop.thisTrialN'
p3250
I0
sg39
F0.76678028765309136
sg34
g752
(S'\x07\xdf\t\x19\x0c5;\x0cwh'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g932
sS'block_loop.thisIndex'
p3254
g888
sg38
S'left'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g940
sS'block_loop.thisRepN'
p3260
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3261
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vy
sS'block_loop.thisTrialN'
p3263
I0
sg39
F1.2835255082718504
sg34
g752
(S'\x07\xdf\t\x19\x0c6\x05\ty\xc8'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g1844
sS'block_loop.thisIndex'
p3267
g888
sg38
S'left'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g1406
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g1851
sS'block_loop.thisRepN'
p3273
I0
sg906
g1406
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3274
I0
sg909
g1413
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vy
sS'block_loop.thisTrialN'
p3276
I0
sg39
F0.88342863203251909
sg34
g752
(S'\x07\xdf\t\x19\x0c6\x0b\x0eS\xf8'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g1624
sS'block_loop.thisIndex'
p3280
g888
sg38
S'left'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g1469
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g1631
sS'block_loop.thisRepN'
p3286
I0
sg906
g1462
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3287
I0
sg909
g1469
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vy
sS'block_loop.thisTrialN'
p3289
I0
sg39
F1.9168121615894052
sg34
g752
(S'\x07\xdf\t\x19\x0c6\x11\x0c\xfc8'
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g932
sS'block_loop.thisIndex'
p3293
g888
sg38
S'left'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g940
sS'block_loop.thisRepN'
p3299
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3300
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vy
sS'block_loop.thisTrialN'
p3302
I0
sg39
F0.73354529406060465
sg34
g752
(S'\x07\xdf\t\x19\x0c6\x18\x0c\x19\xa8'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g895
sS'block_loop.thisIndex'
p3306
g888
sg38
S'left'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g904
sS'block_loop.thisRepN'
p3312
I0
sg906
g907
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3313
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vy
sS'block_loop.thisTrialN'
p3315
I0
sg39
F1.1834444834694295
sg34
g752
(S'\x07\xdf\t\x19\x0c6\x1e\x08\x9f\x08'
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g1786
sS'block_loop.thisIndex'
p3319
g888
sg38
S'left'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g1042
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g1793
sS'block_loop.thisRepN'
p3325
I0
sg906
g1042
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3326
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vy
sS'block_loop.thisTrialN'
p3328
I0
sg39
F1.0001223069648404
sg34
g752
(S'\x07\xdf\t\x19\x0c6$\x0c\n\x08'
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1235
sS'block_loop.thisIndex'
p3332
g888
sg38
S'left'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1243
sS'block_loop.thisRepN'
p3338
I0
sg906
g1239
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3339
I0
sg909
g1246
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vy
sS'block_loop.thisTrialN'
p3341
I0
sg39
F1.1667537165358226
sg34
g752
(S'\x07\xdf\t\x19\x0c6*\x0c_\xf8'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1570
sS'block_loop.thisIndex'
p3345
g888
sg38
S'left'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g1008
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1577
sS'block_loop.thisRepN'
p3351
I0
sg906
g1008
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3352
I0
sg909
g1002
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vy
sS'block_loop.thisTrialN'
p3354
I0
sg39
F0.66685806233908806
sg34
g752
(S'\x07\xdf\t\x19\x0c61\x00N '
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g1458
sS'block_loop.thisIndex'
p3358
g888
sg38
S'right'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1469
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g1466
sS'block_loop.thisRepN'
p3364
I0
sg906
g1462
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3365
I0
sg909
g1469
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vy
sS'block_loop.thisTrialN'
p3367
I0
sg39
F1.5338992715187487
sg34
g752
(S'\x07\xdf\t\x19\x0c66\n\xe5\x10'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g1160
sS'block_loop.thisIndex'
p3371
g888
sg38
S'left'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g1167
sS'block_loop.thisRepN'
p3377
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3378
I0
sg909
g1026
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vy
sS'block_loop.thisTrialN'
p3380
I0
sg39
F0.78344995734914846
sg34
g752
(S'\x07\xdf\t\x19\x0c7\x01\x04I\xa8'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g895
sS'block_loop.thisIndex'
p3384
g888
sg38
S'right'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g904
sS'block_loop.thisRepN'
p3390
I0
sg906
g907
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3391
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vy
sS'block_loop.thisTrialN'
p3393
I0
sg39
F1.3334717958423425
sg34
g752
(S'\x07\xdf\t\x19\x0c7\x07\x01\x86\xa0'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g1829
sS'block_loop.thisIndex'
p3397
g888
sg38
S'right'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g1239
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g1836
sS'block_loop.thisRepN'
p3403
I0
sg906
g1239
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3404
I0
sg909
g1246
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vy
sS'block_loop.thisTrialN'
p3406
I0
sg39
F0.80013986899211886
sg34
g752
(S'\x07\xdf\t\x19\x0c7\r\x07\x18h'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g1667
sS'block_loop.thisIndex'
p3410
g888
sg38
S'left'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g1674
sS'block_loop.thisRepN'
p3416
I0
sg906
g1115
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3417
I0
sg909
g1122
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vy
sS'block_loop.thisTrialN'
p3419
I0
sg39
F1.2501328555863438
sg34
g752
(S'\x07\xdf\t\x19\x0c7\x13\x04\x8f\xf8'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g1387
sS'block_loop.thisIndex'
p3423
g888
sg38
S'right'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g1275
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g1394
sS'block_loop.thisRepN'
p3429
I0
sg906
g1275
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3430
I0
sg909
g1269
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vy
sS'block_loop.thisTrialN'
p3432
I0
sg39
F1.033528074151036
sg34
g752
(S'\x07\xdf\t\x19\x0c7\x19\x08\xf1\x10'
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g1624
sS'block_loop.thisIndex'
p3436
g888
sg38
S'right'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g1462
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g1631
sS'block_loop.thisRepN'
p3442
I0
sg906
g1462
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3443
I0
sg909
g1469
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vy
sS'block_loop.thisTrialN'
p3445
I0
sg39
F1.7000277685292531
sg34
g752
(S'\x07\xdf\t\x19\x0c7\x1f\t\xfe\x98'
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g1190
sS'block_loop.thisIndex'
p3449
g888
sg38
S'right'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g1197
sS'block_loop.thisRepN'
p3455
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3456
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vy
sS'block_loop.thisTrialN'
p3458
I0
sg39
F0.98344636511683348
sg34
g752
(S'\x07\xdf\t\x19\x0c7&\x05\xc4\x90'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g1844
sS'block_loop.thisIndex'
p3462
g888
sg38
S'left'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g1406
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g1851
sS'block_loop.thisRepN'
p3468
I0
sg906
g1406
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3469
I0
sg909
g1413
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vy
sS'block_loop.thisTrialN'
p3471
I0
sg39
F0.66686604507594893
sg34
g752
(S'\x07\xdf\t\x19\x0c7,\x06\x1a\x80'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g1111
sS'block_loop.thisIndex'
p3475
g888
sg38
S'right'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g1119
sS'block_loop.thisRepN'
p3481
I0
sg906
g1115
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3482
I0
sg909
g1122
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vy
sS'block_loop.thisTrialN'
p3484
I0
sg39
F0.88340981557666964
sg34
g752
(S'\x07\xdf\t\x19\x0c72\x01o0'
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g1160
sS'block_loop.thisIndex'
p3488
g888
sg38
S'left'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g1167
sS'block_loop.thisRepN'
p3494
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3495
I0
sg909
g1026
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vy
sS'block_loop.thisTrialN'
p3497
I0
sg39
F0.66729454710548453
sg34
g752
(S'\x07\xdf\t\x19\x0c78\x00U\xf0'
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g1128
sS'block_loop.thisIndex'
p3501
g888
sg38
S'left'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g1076
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g1135
sS'block_loop.thisRepN'
p3507
I0
sg906
g1076
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3508
I0
sg909
g1070
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vy
sS'block_loop.thisTrialN'
p3510
I0
sg39
F1.3665132080113835
sg34
g752
(S'\x07\xdf\t\x19\x0c8\x01\n\xec\xe0'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g1786
sS'block_loop.thisIndex'
p3514
g888
sg38
S'left'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g1042
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g1793
sS'block_loop.thisRepN'
p3520
I0
sg906
g1042
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3521
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vy
sS'block_loop.thisTrialN'
p3523
I0
sg39
F0.90010400368555565
sg34
g752
(S'\x07\xdf\t\x19\x0c8\x08\x01\xb5\x80'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g1015
sS'block_loop.thisIndex'
p3527
g888
sg38
S'right'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g1023
sS'block_loop.thisRepN'
p3533
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3534
I0
sg909
g1026
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vy
sS'block_loop.thisTrialN'
p3536
I0
sg39
F0.78342657932807924
sg34
g752
(S'\x07\xdf\t\x19\x0c8\x0e\x00\x9c@'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g1049
sS'block_loop.thisIndex'
p3540
g888
sg38
S'left'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g1057
sS'block_loop.thisRepN'
p3546
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3547
I0
sg909
g1060
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vy
sS'block_loop.thisTrialN'
p3549
I0
sg39
F0.78346734831575304
sg34
g752
(S'\x07\xdf\t\x19\x0c8\x13\r\x1bx'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g2108
sS'block_loop.thisIndex'
p3553
g888
sg38
S'right'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g1222
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g2115
sS'block_loop.thisRepN'
p3559
I0
sg906
g1222
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3560
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vy
sS'block_loop.thisTrialN'
p3562
I0
sg39
F1.1002244290066301
sg34
g752
(S'\x07\xdf\t\x19\x0c8\x19\nXp'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g895
sS'block_loop.thisIndex'
p3566
g888
sg38
S'right'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g904
sS'block_loop.thisRepN'
p3572
I0
sg906
g907
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3573
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vy
sS'block_loop.thisTrialN'
p3575
I0
sg39
F1.0167628966846678
sg34
g752
(S'\x07\xdf\t\x19\x0c8\x1f\x0cT@'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g1066
sS'block_loop.thisIndex'
p3579
g888
sg38
S'right'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g1076
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g1074
sS'block_loop.thisRepN'
p3585
I0
sg906
g1076
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3586
I0
sg909
g1070
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vy
sS'block_loop.thisTrialN'
p3588
I0
sg39
F0.94983532749756705
sg34
g752
(S'\x07\xdf\t\x19\x0c8%\r#H'
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g949
sS'block_loop.thisIndex'
p3592
g888
sg38
S'left'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g956
sS'block_loop.thisRepN'
p3598
I0
sg906
g907
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3599
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vy
sS'block_loop.thisTrialN'
p3601
I0
sg39
F0.83344043508259347
sg34
g752
(S'\x07\xdf\t\x19\x0c8+\r\x00 '
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g1049
sS'block_loop.thisIndex'
p3605
g888
sg38
S'right'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g1057
sS'block_loop.thisRepN'
p3611
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3612
I0
sg909
g1060
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vy
sS'block_loop.thisTrialN'
p3614
I0
sg39
F1.4335015030355862
sg34
g752
(S'\x07\xdf\t\x19\x0c81\n\xf0\xc8'
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F24.915938051664853
sg56
Vl
sS'block_loop.thisIndex'
p3618
g888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vy
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vl
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vy
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'20-fruit_pastilles.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'left'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'20-fruit_pastilles.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'2-steamed_puddings.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3645
I1
sS'img_wrong'
p3646
S'2-steamed_puddings.png'
p3647
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vy
sS'block_loop.thisTrialN'
p3649
I0
sg39
F1.2000813669183117
sg34
g752
(S'\x07\xdf\t\x19\x0c9\x1a\x01\xf4\x00'
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'29-beans.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'left'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'29-beans.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'46-pistachios.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3663
I1
sg3646
S'46-pistachios.png'
p3664
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vy
sS'block_loop.thisTrialN'
p3666
I0
sg39
F2.4172187110852974
sg34
g752
(S'\x07\xdf\t\x19\x0c9 \x05\x9d\x80'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'42-mrkipling_lemon_slices.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'left'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
S'16-skips_prawn.png'
p3674
sg63
g64
sS'trial_loop.thisIndex'
p3675
g59
(g98
S'\x02\x00\x00\x00'
tRp3676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3677
I0
sg3641
S'16-skips_prawn.png'
p3678
sS'block_loop.thisRepN'
p3679
I1
sg3644
S'42-mrkipling_lemon_slices.png'
p3680
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3681
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p3682
Nsg69
Vy
sS'block_loop.thisTrialN'
p3683
I0
sg39
F0.78333021626349364
sg34
g752
(S"\x07\xdf\t\x19\x0c9'\x0cX("
tRp3684
sa(dp3685
S'trial_loop.thisTrialN'
p3686
I3
sg3632
S'3-ellas_strawberries_apples.png'
p3687
sS'block_loop.thisIndex'
p3688
g3626
sg38
S'left'
p3689
sg58
g62
sS'trial_loop.thisN'
p3690
I3
sg33
S'3-ellas_strawberries_apples.png'
p3691
sg63
g64
sS'trial_loop.thisIndex'
p3692
g59
(g98
S'\x03\x00\x00\x00'
tRp3693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3694
I0
sg3641
S'13-mccoys_steak_crisps.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3697
I1
sg3646
S'13-mccoys_steak_crisps.png'
p3698
sg55
g11
sS'block_loop.thisTrial'
p3699
Nsg69
Vy
sS'block_loop.thisTrialN'
p3700
I0
sg39
F0.71676785738600302
sg34
g752
(S'\x07\xdf\t\x19\x0c9-\t\x95 '
tRp3701
sa(dp3702
S'trial_loop.thisTrialN'
p3703
I4
sg3632
S'16-skips_prawn.png'
p3704
sS'block_loop.thisIndex'
p3705
g3626
sg38
S'right'
p3706
sg58
g62
sS'trial_loop.thisN'
p3707
I4
sg33
g3680
sg63
g64
sS'trial_loop.thisIndex'
p3708
g59
(g98
S'\x04\x00\x00\x00'
tRp3709
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3710
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p3711
sS'block_loop.thisRepN'
p3712
I1
sg3644
g3680
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3713
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p3714
Nsg69
Vy
sS'block_loop.thisTrialN'
p3715
I0
sg39
F0.83336317357134249
sg34
g752
(S'\x07\xdf\t\x19\x0c93\x05\xdc\x00'
tRp3716
sa(dp3717
S'trial_loop.thisTrialN'
p3718
I5
sg3632
S'4-corn.png'
p3719
sS'block_loop.thisIndex'
p3720
g3626
sg38
S'right'
p3721
sg58
g62
sS'trial_loop.thisN'
p3722
I5
sg33
S'10-bounty_redo.png'
p3723
sg63
g64
sS'trial_loop.thisIndex'
p3724
g59
(g98
S'\x05\x00\x00\x00'
tRp3725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3726
I0
sg3641
S'10-bounty_redo.png'
p3727
sS'block_loop.thisRepN'
p3728
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3729
I1
sg3646
S'4-corn.png'
p3730
sg55
g11
sS'block_loop.thisTrial'
p3731
Nsg69
Vy
sS'block_loop.thisTrialN'
p3732
I0
sg39
F0.85010468792097527
sg34
g752
(S'\x07\xdf\t\x19\x0c99\x03\xd0\x90'
tRp3733
sa(dp3734
S'trial_loop.thisTrialN'
p3735
I6
sg3632
S'45-chewy_nougat_redo.png'
p3736
sS'block_loop.thisIndex'
p3737
g3626
sg38
S'right'
p3738
sg58
g62
sS'trial_loop.thisN'
p3739
I6
sg33
S'41-peanuts_redo.png'
p3740
sg63
g64
sS'trial_loop.thisIndex'
p3741
g59
(g98
S'\x06\x00\x00\x00'
tRp3742
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3743
I0
sg3641
S'41-peanuts_redo.png'
p3744
sS'block_loop.thisRepN'
p3745
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3746
I1
sg3646
S'45-chewy_nougat_redo.png'
p3747
sg55
g11
sS'block_loop.thisTrial'
p3748
Nsg69
Vy
sS'block_loop.thisTrialN'
p3749
I0
sg39
F0.76679539783617656
sg34
g752
(S'\x07\xdf\t\x19\x0c:\x03\x01\xff\xb8'
tRp3750
sa(dp3751
S'trial_loop.thisTrialN'
p3752
I7
sg3632
S'23-crunchie_redo.png'
p3753
sS'block_loop.thisIndex'
p3754
g3626
sg38
S'right'
p3755
sg58
g62
sS'trial_loop.thisN'
p3756
I7
sg33
S'23-crunchie_redo.png'
p3757
sg63
g64
sS'trial_loop.thisIndex'
p3758
g59
(g98
S'\x07\x00\x00\x00'
tRp3759
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3760
I0
sg3641
S'33-ambrosia_rice.png'
p3761
sS'block_loop.thisRepN'
p3762
I1
sg3644
S'33-ambrosia_rice.png'
p3763
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3764
I1
sg3646
g3757
sg55
g11
sS'block_loop.thisTrial'
p3765
Nsg69
Vy
sS'block_loop.thisTrialN'
p3766
I0
sg39
F1.066834342200309
sg34
g752
(S'\x07\xdf\t\x19\x0c:\x08\x0e@p'
tRp3767
sa(dp3768
S'trial_loop.thisTrialN'
p3769
I8
sg3632
S'48-twix.png'
p3770
sS'block_loop.thisIndex'
p3771
g3626
sg38
S'right'
p3772
sg58
g62
sS'trial_loop.thisN'
p3773
I8
sg33
S'50-polo.png'
p3774
sg63
g64
sS'trial_loop.thisIndex'
p3775
g59
(g98
S'\x08\x00\x00\x00'
tRp3776
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3777
I0
sg3641
S'50-polo.png'
p3778
sS'block_loop.thisRepN'
p3779
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3780
I1
sg3646
S'48-twix.png'
p3781
sg55
g11
sS'block_loop.thisTrial'
p3782
Nsg69
Vy
sS'block_loop.thisTrialN'
p3783
I0
sg39
F0.75014597008521378
sg34
g752
(S'\x07\xdf\t\x19\x0c:\x0f\x00\x84\xd0'
tRp3784
sa(dp3785
S'trial_loop.thisTrialN'
p3786
I9
sg3632
S'46-pistachios.png'
p3787
sS'block_loop.thisIndex'
p3788
g3626
sg38
S'right'
p3789
sg58
g62
sS'trial_loop.thisN'
p3790
I9
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p3791
g59
(g98
S'\t\x00\x00\x00'
tRp3792
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3793
I0
sg3641
S'29-beans.png'
p3794
sS'block_loop.thisRepN'
p3795
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3796
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p3797
Nsg69
Vy
sS'block_loop.thisTrialN'
p3798
I0
sg39
F1.3834331935977389
sg34
g752
(S'\x07\xdf\t\x19\x0c:\x14\x0cLp'
tRp3799
sa(dp3800
S'trial_loop.thisTrialN'
p3801
I10
sg3632
S'31-hobnobs.png'
p3802
sS'block_loop.thisIndex'
p3803
g3626
sg38
S'left'
p3804
sg58
g62
sS'trial_loop.thisN'
p3805
I10
sg33
S'25-kitkat.png'
p3806
sg63
g64
sS'trial_loop.thisIndex'
p3807
g59
(g98
S'\n\x00\x00\x00'
tRp3808
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3809
I0
sg3641
S'25-kitkat.png'
p3810
sS'block_loop.thisRepN'
p3811
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3812
I1
sg3646
S'31-hobnobs.png'
p3813
sg55
g11
sS'block_loop.thisTrial'
p3814
Nsg69
Vy
sS'block_loop.thisTrialN'
p3815
I0
sg39
F3.9500212112779991
sg34
g752
(S'\x07\xdf\t\x19\x0c:\x1b\x03\x8e('
tRp3816
sa(dp3817
S'trial_loop.thisTrialN'
p3818
I11
sg3632
S'35-raisins.png'
p3819
sS'block_loop.thisIndex'
p3820
g3626
sg38
S'left'
p3821
sg58
g62
sS'trial_loop.thisN'
p3822
I11
sg33
S'35-raisins.png'
p3823
sg63
g64
sS'trial_loop.thisIndex'
p3824
g59
(g98
S'\x0b\x00\x00\x00'
tRp3825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3826
I0
sg3641
S'49-yorkie.png'
p3827
sS'block_loop.thisRepN'
p3828
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3829
I1
sg3646
S'49-yorkie.png'
p3830
sg55
g11
sS'block_loop.thisTrial'
p3831
Nsg69
Vy
sS'block_loop.thisTrialN'
p3832
I0
sg39
F0.783444255392169
sg34
g752
(S'\x07\xdf\t\x19\x0c:$\x03Wx'
tRp3833
sa(dp3834
S'trial_loop.thisTrialN'
p3835
I12
sg3632
S'1-treacle_cookies.png'
p3836
sS'block_loop.thisIndex'
p3837
g3626
sg38
S'right'
p3838
sg58
g62
sS'trial_loop.thisN'
p3839
I12
sg33
S'1-treacle_cookies.png'
p3840
sg63
g64
sS'trial_loop.thisIndex'
p3841
g59
(g98
S'\x0c\x00\x00\x00'
tRp3842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3843
I0
sg3641
S'21-nakd_banana_crunch.png'
p3844
sS'block_loop.thisRepN'
p3845
I1
sg3644
g3840
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3846
I1
sg3646
S'21-nakd_banana_crunch.png'
p3847
sg55
g11
sS'block_loop.thisTrial'
p3848
Nsg69
Vy
sS'block_loop.thisTrialN'
p3849
I0
sg39
F1.666862909001793
sg34
g752
(S'\x07\xdf\t\x19\x0c:*\x00U\xf0'
tRp3850
sa(dp3851
S'trial_loop.thisTrialN'
p3852
I13
sg3632
S'2-steamed_puddings.png'
p3853
sS'block_loop.thisIndex'
p3854
g3626
sg38
S'right'
p3855
sg58
g62
sS'trial_loop.thisN'
p3856
I13
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p3857
g59
(g98
S'\r\x00\x00\x00'
tRp3858
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3859
I0
sg3641
S'20-fruit_pastilles.png'
p3860
sS'block_loop.thisRepN'
p3861
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3862
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p3863
Nsg69
Vy
sS'block_loop.thisTrialN'
p3864
I0
sg39
F1.1668078851216706
sg34
g752
(S'\x07\xdf\t\x19\x0c:0\x0b#\x90'
tRp3865
sa(dp3866
S'trial_loop.thisTrialN'
p3867
I14
sg3632
S'8-liquorice_catherine_wheels.png'
p3868
sS'block_loop.thisIndex'
p3869
g3626
sg38
S'right'
p3870
sg58
g62
sS'trial_loop.thisN'
p3871
I14
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3872
sg63
g64
sS'trial_loop.thisIndex'
p3873
g59
(g98
S'\x0e\x00\x00\x00'
tRp3874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3875
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p3876
sS'block_loop.thisRepN'
p3877
I1
sg3644
g3872
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3878
I1
sg3646
S'8-liquorice_catherine_wheels.png'
p3879
sg55
g11
sS'block_loop.thisTrial'
p3880
Nsg69
Vy
sS'block_loop.thisTrialN'
p3881
I0
sg39
F0.9335379955573444
sg34
g752
(S'\x07\xdf\t\x19\x0c:6\x0e\x15x'
tRp3882
sa(dp3883
S'trial_loop.thisTrialN'
p3884
I15
sg3632
g3819
sS'block_loop.thisIndex'
p3885
g3626
sg38
S'left'
p3886
sg58
g62
sS'trial_loop.thisN'
p3887
I15
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p3888
g59
(g98
S'\x0f\x00\x00\x00'
tRp3889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3890
I0
sg3641
g3827
sS'block_loop.thisRepN'
p3891
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3892
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p3893
Nsg69
Vy
sS'block_loop.thisTrialN'
p3894
I0
sg39
F0.61686017206193355
sg34
g752
(S'\x07\xdf\t\x19\x0c;\x00\r\xb3\xd0'
tRp3895
sa(dp3896
S'trial_loop.thisTrialN'
p3897
I16
sg3632
S'30-spaghetti_hoops.png'
p3898
sS'block_loop.thisIndex'
p3899
g3626
sg38
S'right'
p3900
sg58
g62
sS'trial_loop.thisN'
p3901
I16
sg33
S'19-caramello_redo.png'
p3902
sg63
g64
sS'trial_loop.thisIndex'
p3903
g59
(g98
S'\x10\x00\x00\x00'
tRp3904
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3905
I0
sg3641
S'19-caramello_redo.png'
p3906
sS'block_loop.thisRepN'
p3907
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3908
I1
sg3646
S'30-spaghetti_hoops.png'
p3909
sg55
g11
sS'block_loop.thisTrial'
p3910
Nsg69
Vy
sS'block_loop.thisTrialN'
p3911
I0
sg39
F1.3834283469332149
sg34
g752
(S'\x07\xdf\t\x19\x0c;\x06\x08P\xe8'
tRp3912
sa(dp3913
S'trial_loop.thisTrialN'
p3914
I17
sg3632
g3753
sS'block_loop.thisIndex'
p3915
g3626
sg38
S'right'
p3916
sg58
g62
sS'trial_loop.thisN'
p3917
I17
sg33
g3763
sg63
g64
sS'trial_loop.thisIndex'
p3918
g59
(g98
S'\x11\x00\x00\x00'
tRp3919
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3920
I0
sg3641
g3761
sS'block_loop.thisRepN'
p3921
I1
sg3644
g3763
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3922
I1
sg3646
g3757
sg55
g11
sS'block_loop.thisTrial'
p3923
Nsg69
Vy
sS'block_loop.thisTrialN'
p3924
I0
sg39
F0.80060999530178378
sg34
g752
(S'\x07\xdf\t\x19\x0c;\x0c\x0e\x9aH'
tRp3925
sa(dp3926
S'trial_loop.thisTrialN'
p3927
I18
sg3632
g3819
sS'block_loop.thisIndex'
p3928
g3626
sg38
S'left'
p3929
sg58
g62
sS'trial_loop.thisN'
p3930
I18
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p3931
g59
(g98
S'\x12\x00\x00\x00'
tRp3932
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3933
I0
sg3641
g3827
sS'block_loop.thisRepN'
p3934
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3935
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p3936
Nsg69
Vy
sS'block_loop.thisTrialN'
p3937
I0
sg39
F0.61680229720514035
sg34
g752
(S'\x07\xdf\t\x19\x0c;\x12\x0c\x11\xd8'
tRp3938
sa(dp3939
S'trial_loop.thisTrialN'
p3940
I19
sg3632
S'40-sardines.png'
p3941
sS'block_loop.thisIndex'
p3942
g3626
sg38
S'right'
p3943
sg58
g62
sS'trial_loop.thisN'
p3944
I19
sg33
S'40-sardines.png'
p3945
sg63
g64
sS'trial_loop.thisIndex'
p3946
g59
(g98
S'\x13\x00\x00\x00'
tRp3947
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3948
I0
sg3641
S'5-pineapple.png'
p3949
sS'block_loop.thisRepN'
p3950
I1
sg3644
S'5-pineapple.png'
p3951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3952
I1
sg3646
g3945
sg55
g11
sS'block_loop.thisTrial'
p3953
Nsg69
Vy
sS'block_loop.thisTrialN'
p3954
I0
sg39
F0.80020259051343601
sg34
g752
(S'\x07\xdf\t\x19\x0c;\x18\x06\xae\xf0'
tRp3955
sa(dp3956
S'trial_loop.thisTrialN'
p3957
I20
sg3632
S'7-olives.png'
p3958
sS'block_loop.thisIndex'
p3959
g3626
sg38
S'left'
p3960
sg58
g62
sS'trial_loop.thisN'
p3961
I20
sg33
S'7-olives.png'
p3962
sg63
g64
sS'trial_loop.thisIndex'
p3963
g59
(g98
S'\x14\x00\x00\x00'
tRp3964
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3965
I0
sg3641
S'22-daim.png'
p3966
sS'block_loop.thisRepN'
p3967
I1
sg3644
g3962
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3968
I1
sg3646
S'22-daim.png'
p3969
sg55
g11
sS'block_loop.thisTrial'
p3970
Nsg69
Vy
sS'block_loop.thisTrialN'
p3971
I0
sg39
F1.2167689977777627
sg34
g752
(S'\x07\xdf\t\x19\x0c;\x1e\x04*h'
tRp3972
sa(dp3973
S'trial_loop.thisTrialN'
p3974
I21
sg3632
S'13-mccoys_steak_crisps.png'
p3975
sS'block_loop.thisIndex'
p3976
g3626
sg38
S'right'
p3977
sg58
g62
sS'trial_loop.thisN'
p3978
I21
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p3979
g59
(g98
S'\x15\x00\x00\x00'
tRp3980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3981
I0
sg3641
S'3-ellas_strawberries_apples.png'
p3982
sS'block_loop.thisRepN'
p3983
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3984
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p3985
Nsg69
Vy
sS'block_loop.thisTrialN'
p3986
I0
sg39
F0.91677167769921653
sg34
g752
(S'\x07\xdf\t\x19\x0c;$\x08\x0e\x80'
tRp3987
sa(dp3988
S'trial_loop.thisTrialN'
p3989
I22
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p3990
sS'block_loop.thisIndex'
p3991
g3626
sg38
S'right'
p3992
sg58
g62
sS'trial_loop.thisN'
p3993
I22
sg33
S'36-fig_rolls.png'
p3994
sg63
g64
sS'trial_loop.thisIndex'
p3995
g59
(g98
S'\x16\x00\x00\x00'
tRp3996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3997
I0
sg3641
S'36-fig_rolls.png'
p3998
sS'block_loop.thisRepN'
p3999
I1
sg3644
g3994
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4000
I1
sg3646
S'34-hula_hoops_bbq_beef_redo.png'
p4001
sg55
g11
sS'block_loop.thisTrial'
p4002
Nsg69
Vy
sS'block_loop.thisTrialN'
p4003
I0
sg39
F1.0834928930817114
sg34
g752
(S'\x07\xdf\t\x19\x0c;*\x073\xc0'
tRp4004
sa(dp4005
S'trial_loop.thisTrialN'
p4006
I23
sg3632
S'22-daim.png'
p4007
sS'block_loop.thisIndex'
p4008
g3626
sg38
S'right'
p4009
sg58
g62
sS'trial_loop.thisN'
p4010
I23
sg33
g3962
sg63
g64
sS'trial_loop.thisIndex'
p4011
g59
(g98
S'\x17\x00\x00\x00'
tRp4012
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4013
I0
sg3641
S'7-olives.png'
p4014
sS'block_loop.thisRepN'
p4015
I1
sg3644
g3962
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4016
I1
sg3646
g3969
sg55
g11
sS'block_loop.thisTrial'
p4017
Nsg69
Vy
sS'block_loop.thisTrialN'
p4018
I0
sg39
F0.80021684540406568
sg34
g752
(S'\x07\xdf\t\x19\x0c;0\t3x'
tRp4019
sa(dp4020
S'trial_loop.thisTrialN'
p4021
I24
sg3632
S'26-walkers_smoky_bacon.png'
p4022
sS'block_loop.thisIndex'
p4023
g3626
sg38
S'right'
p4024
sg58
g62
sS'trial_loop.thisN'
p4025
I24
sg33
S'44-crunch.png'
p4026
sg63
g64
sS'trial_loop.thisIndex'
p4027
g59
(g98
S'\x18\x00\x00\x00'
tRp4028
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4029
I0
sg3641
S'44-crunch.png'
p4030
sS'block_loop.thisRepN'
p4031
I1
sg3644
g4026
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4032
I1
sg3646
S'26-walkers_smoky_bacon.png'
p4033
sg55
g11
sS'block_loop.thisTrial'
p4034
Nsg69
Vy
sS'block_loop.thisTrialN'
p4035
I0
sg39
F1.0501030913728755
sg34
g752
(S'\x07\xdf\t\x19\x0c;6\x06pp'
tRp4036
sa(dp4037
S'trial_loop.thisTrialN'
p4038
I25
sg3632
g3958
sS'block_loop.thisIndex'
p4039
g3626
sg38
S'left'
p4040
sg58
g62
sS'trial_loop.thisN'
p4041
I25
sg33
g3962
sg63
g64
sS'trial_loop.thisIndex'
p4042
g59
(g98
S'\x19\x00\x00\x00'
tRp4043
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4044
I0
sg3641
g3966
sS'block_loop.thisRepN'
p4045
I1
sg3644
g3962
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4046
I1
sg3646
g3969
sg55
g11
sS'block_loop.thisTrial'
p4047
Nsg69
Vy
sS'block_loop.thisTrialN'
p4048
I0
sg39
F0.81676363793849305
sg34
g752
(S'\x07\xdf\t\x19\r\x00\x00\x07\xb8\x90'
tRp4049
sa(dp4050
S'trial_loop.thisTrialN'
p4051
I26
sg3632
S'25-kitkat.png'
p4052
sS'block_loop.thisIndex'
p4053
g3626
sg38
S'right'
p4054
sg58
g62
sS'trial_loop.thisN'
p4055
I26
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p4056
g59
(g98
S'\x1a\x00\x00\x00'
tRp4057
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4058
I0
sg3641
S'31-hobnobs.png'
p4059
sS'block_loop.thisRepN'
p4060
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4061
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p4062
Nsg69
Vy
sS'block_loop.thisTrialN'
p4063
I0
sg39
F1.8333760029745463
sg34
g752
(S'\x07\xdf\t\x19\r\x00\x06\x05n\xa0'
tRp4064
sa(dp4065
S'trial_loop.thisTrialN'
p4066
I27
sg3632
g3736
sS'block_loop.thisIndex'
p4067
g3626
sg38
S'right'
p4068
sg58
g62
sS'trial_loop.thisN'
p4069
I27
sg33
g3747
sg63
g64
sS'trial_loop.thisIndex'
p4070
g59
(g98
S'\x1b\x00\x00\x00'
tRp4071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4072
I0
sg3641
g3744
sS'block_loop.thisRepN'
p4073
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4074
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p4075
Nsg69
Vy
sS'block_loop.thisTrialN'
p4076
I0
sg39
F0.81685971590559348
sg34
g752
(S'\x07\xdf\t\x19\r\x00\r\x03\x95\xf8'
tRp4077
sa(dp4078
S'trial_loop.thisTrialN'
p4079
I28
sg3632
g3836
sS'block_loop.thisIndex'
p4080
g3626
sg38
S'right'
p4081
sg58
g62
sS'trial_loop.thisN'
p4082
I28
sg33
g3840
sg63
g64
sS'trial_loop.thisIndex'
p4083
g59
(g98
S'\x1c\x00\x00\x00'
tRp4084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4085
I0
sg3641
g3844
sS'block_loop.thisRepN'
p4086
I1
sg3644
g3840
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4087
I1
sg3646
g3847
sg55
g11
sS'block_loop.thisTrial'
p4088
Nsg69
Vy
sS'block_loop.thisTrialN'
p4089
I0
sg39
F1.1502080643913359
sg34
g752
(S'\x07\xdf\t\x19\r\x00\x13\x01L\x08'
tRp4090
sa(dp4091
S'trial_loop.thisTrialN'
p4092
I29
sg3632
g3770
sS'block_loop.thisIndex'
p4093
g3626
sg38
S'right'
p4094
sg58
g62
sS'trial_loop.thisN'
p4095
I29
sg33
g3781
sg63
g64
sS'trial_loop.thisIndex'
p4096
g59
(g98
S'\x1d\x00\x00\x00'
tRp4097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4098
I0
sg3641
g3778
sS'block_loop.thisRepN'
p4099
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4100
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p4101
Nsg69
Vy
sS'block_loop.thisTrialN'
p4102
I0
sg39
F0.86683023679142934
sg34
g752
(S'\x07\xdf\t\x19\r\x00\x19\x04\x03X'
tRp4103
sa(dp4104
S'trial_loop.thisTrialN'
p4105
I30
sg3632
g3704
sS'block_loop.thisIndex'
p4106
g3626
sg38
S'right'
p4107
sg58
g62
sS'trial_loop.thisN'
p4108
I30
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4109
g59
(g98
S'\x1e\x00\x00\x00'
tRp4110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4111
I0
sg3641
g3711
sS'block_loop.thisRepN'
p4112
I1
sg3644
g3680
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4113
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p4114
Nsg69
Vy
sS'block_loop.thisTrialN'
p4115
I0
sg39
F1.4667330754527939
sg34
g752
(S'\x07\xdf\t\x19\r\x00\x1f\x02q\x00'
tRp4116
sa(dp4117
S'trial_loop.thisTrialN'
p4118
I31
sg3632
g3898
sS'block_loop.thisIndex'
p4119
g3626
sg38
S'right'
p4120
sg58
g62
sS'trial_loop.thisN'
p4121
I31
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p4122
g59
(g98
S'\x1f\x00\x00\x00'
tRp4123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4124
I0
sg3641
g3906
sS'block_loop.thisRepN'
p4125
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4126
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p4127
Nsg69
Vy
sS'block_loop.thisTrialN'
p4128
I0
sg39
F0.86681569680149551
sg34
g752
(S'\x07\xdf\t\x19\r\x00%\n%\xa8'
tRp4129
sa(dp4130
S'trial_loop.thisTrialN'
p4131
I32
sg3632
g3736
sS'block_loop.thisIndex'
p4132
g3626
sg38
S'right'
p4133
sg58
g62
sS'trial_loop.thisN'
p4134
I32
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p4135
g59
(g98
S' \x00\x00\x00'
tRp4136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4137
I0
sg3641
g3744
sS'block_loop.thisRepN'
p4138
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4139
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p4140
Nsg69
Vy
sS'block_loop.thisTrialN'
p4141
I0
sg39
F0.66678194121959677
sg34
g752
(S'\x07\xdf\t\x19\r\x00+\x08\x93P'
tRp4142
sa(dp4143
S'trial_loop.thisTrialN'
p4144
I33
sg3632
g3787
sS'block_loop.thisIndex'
p4145
g3626
sg38
S'right'
p4146
sg58
g62
sS'trial_loop.thisN'
p4147
I33
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4148
g59
(g98
S'!\x00\x00\x00'
tRp4149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4150
I0
sg3641
g3794
sS'block_loop.thisRepN'
p4151
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4152
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4153
Nsg69
Vy
sS'block_loop.thisTrialN'
p4154
I0
sg39
F1.1335153017698758
sg34
g752
(S'\x07\xdf\t\x19\r\x001\x03\xe8\x00'
tRp4155
sa(dp4156
S'trial_loop.thisTrialN'
p4157
I34
sg3632
g3868
sS'block_loop.thisIndex'
p4158
g3626
sg38
S'right'
p4159
sg58
g62
sS'trial_loop.thisN'
p4160
I34
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p4161
g59
(g98
S'"\x00\x00\x00'
tRp4162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4163
I0
sg3641
g3876
sS'block_loop.thisRepN'
p4164
I1
sg3644
g3872
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4165
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p4166
Nsg69
Vy
sS'block_loop.thisTrialN'
p4167
I0
sg39
F0.83352453893894562
sg34
g752
(S'\x07\xdf\t\x19\r\x007\x06\x9bh'
tRp4168
sa(dp4169
S'trial_loop.thisTrialN'
p4170
I35
sg3632
g3802
sS'block_loop.thisIndex'
p4171
g3626
sg38
S'right'
p4172
sg58
g62
sS'trial_loop.thisN'
p4173
I35
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p4174
g59
(g98
S'#\x00\x00\x00'
tRp4175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4176
I0
sg3641
g3810
sS'block_loop.thisRepN'
p4177
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4178
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p4179
Nsg69
Vy
sS'block_loop.thisTrialN'
p4180
I0
sg39
F1.466731649963549
sg34
g752
(S'\x07\xdf\t\x19\r\x01\x01\x04\x8f\xf8'
tRp4181
sa(dp4182
S'trial_loop.thisTrialN'
p4183
I36
sg3632
g3670
sS'block_loop.thisIndex'
p4184
g3626
sg38
S'left'
p4185
sg58
g62
sS'trial_loop.thisN'
p4186
I36
sg33
g3680
sg63
g64
sS'trial_loop.thisIndex'
p4187
g59
(g98
S'$\x00\x00\x00'
tRp4188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4189
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4190
I1
sg3644
g3680
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4191
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p4192
Nsg69
Vy
sS'block_loop.thisTrialN'
p4193
I0
sg39
F1.1500515456864377
sg34
g752
(S'\x07\xdf\t\x19\r\x01\x07\x0c\n\x08'
tRp4194
sa(dp4195
S'trial_loop.thisTrialN'
p4196
I37
sg3632
S'43-mrporky_pork_crackles_redo.png'
p4197
sS'block_loop.thisIndex'
p4198
g3626
sg38
S'right'
p4199
sg58
g62
sS'trial_loop.thisN'
p4200
I37
sg33
S'43-mrporky_pork_crackles_redo.png'
p4201
sg63
g64
sS'trial_loop.thisIndex'
p4202
g59
(g98
S'%\x00\x00\x00'
tRp4203
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4204
I0
sg3641
S'18-mms.png'
p4205
sS'block_loop.thisRepN'
p4206
I1
sg3644
S'18-mms.png'
p4207
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4208
I1
sg3646
g4201
sg55
g11
sS'block_loop.thisTrial'
p4209
Nsg69
Vy
sS'block_loop.thisTrialN'
p4210
I0
sg39
F0.93344619405797857
sg34
g752
(S'\x07\xdf\t\x19\r\x01\r\x0e\xfb\xf0'
tRp4211
sa(dp4212
S'trial_loop.thisTrialN'
p4213
I38
sg3632
g4022
sS'block_loop.thisIndex'
p4214
g3626
sg38
S'right'
p4215
sg58
g62
sS'trial_loop.thisN'
p4216
I38
sg33
g4026
sg63
g64
sS'trial_loop.thisIndex'
p4217
g59
(g98
S'&\x00\x00\x00'
tRp4218
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4219
I0
sg3641
g4030
sS'block_loop.thisRepN'
p4220
I1
sg3644
g4026
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4221
I1
sg3646
g4033
sg55
g11
sS'block_loop.thisTrial'
p4222
Nsg69
Vy
sS'block_loop.thisTrialN'
p4223
I0
sg39
F0.91728086240800621
sg34
g752
(S'\x07\xdf\t\x19\r\x01\x13\x0e[\xc8'
tRp4224
sa(dp4225
S'trial_loop.thisTrialN'
p4226
I39
sg3632
S'41-peanuts_redo.png'
p4227
sS'block_loop.thisIndex'
p4228
g3626
sg38
S'left'
p4229
sg58
g62
sS'trial_loop.thisN'
p4230
I39
sg33
g3747
sg63
g64
sS'trial_loop.thisIndex'
p4231
g59
(g98
S"'\x00\x00\x00"
tRp4232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4233
I0
sg3641
S'45-chewy_nougat_redo.png'
p4234
sS'block_loop.thisRepN'
p4235
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4236
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p4237
Nsg69
Vy
sS'block_loop.thisTrialN'
p4238
I0
sg39
F0.78353691218580934
sg34
g752
(S'\x07\xdf\t\x19\r\x01\x19\r\xbb\xa0'
tRp4239
sa(dp4240
S'trial_loop.thisTrialN'
p4241
I40
sg3632
g4197
sS'block_loop.thisIndex'
p4242
g3626
sg38
S'right'
p4243
sg58
g62
sS'trial_loop.thisN'
p4244
I40
sg33
g4201
sg63
g64
sS'trial_loop.thisIndex'
p4245
g59
(g98
S'(\x00\x00\x00'
tRp4246
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4247
I0
sg3641
g4205
sS'block_loop.thisRepN'
p4248
I1
sg3644
g4207
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4249
I1
sg3646
g4201
sg55
g11
sS'block_loop.thisTrial'
p4250
Nsg69
Vy
sS'block_loop.thisTrialN'
p4251
I0
sg39
F0.88343747006365447
sg34
g752
(S'\x07\xdf\t\x19\r\x01\x1f\n\xf8\x98'
tRp4252
sa(dp4253
S'trial_loop.thisTrialN'
p4254
I41
sg3632
g3853
sS'block_loop.thisIndex'
p4255
g3626
sg38
S'right'
p4256
sg58
g62
sS'trial_loop.thisN'
p4257
I41
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4258
g59
(g98
S')\x00\x00\x00'
tRp4259
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4260
I0
sg3641
g3860
sS'block_loop.thisRepN'
p4261
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4262
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4263
Nsg69
Vy
sS'block_loop.thisTrialN'
p4264
I0
sg39
F0.73353531563770957
sg34
g752
(S'\x07\xdf\t\x19\r\x01%\t\xa0\xd8'
tRp4265
sa(dp4266
S'trial_loop.thisTrialN'
p4267
I42
sg3632
S'50-polo.png'
p4268
sS'block_loop.thisIndex'
p4269
g3626
sg38
S'left'
p4270
sg58
g62
sS'trial_loop.thisN'
p4271
I42
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p4272
g59
(g98
S'*\x00\x00\x00'
tRp4273
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4274
I0
sg3641
S'48-twix.png'
p4275
sS'block_loop.thisRepN'
p4276
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4277
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p4278
Nsg69
Vy
sS'block_loop.thisTrialN'
p4279
I0
sg39
F0.71681632401669049
sg34
g752
(S'\x07\xdf\t\x19\r\x01+\x05\xeb\xa0'
tRp4280
sa(dp4281
S'trial_loop.thisTrialN'
p4282
I43
sg3632
g4227
sS'block_loop.thisIndex'
p4283
g3626
sg38
S'left'
p4284
sg58
g62
sS'trial_loop.thisN'
p4285
I43
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p4286
g59
(g98
S'+\x00\x00\x00'
tRp4287
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4288
I0
sg3641
g4234
sS'block_loop.thisRepN'
p4289
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4290
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p4291
Nsg69
Vy
sS'block_loop.thisTrialN'
p4292
I0
sg39
F0.71688303690825705
sg34
g752
(S'\x07\xdf\t\x19\r\x011\x022\x80'
tRp4293
sa(dp4294
S'trial_loop.thisTrialN'
p4295
I44
sg3632
g3687
sS'block_loop.thisIndex'
p4296
g3626
sg38
S'left'
p4297
sg58
g62
sS'trial_loop.thisN'
p4298
I44
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4299
g59
(g98
S',\x00\x00\x00'
tRp4300
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4301
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4302
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4303
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4304
Nsg69
Vy
sS'block_loop.thisTrialN'
p4305
I0
sg39
F0.78356542196706869
sg34
g752
(S'\x07\xdf\t\x19\r\x016\r\xbf\x88'
tRp4306
sa(dp4307
S'trial_loop.thisTrialN'
p4308
I45
sg3632
S'5-pineapple.png'
p4309
sS'block_loop.thisIndex'
p4310
g3626
sg38
S'left'
p4311
sg58
g62
sS'trial_loop.thisN'
p4312
I45
sg33
g3951
sg63
g64
sS'trial_loop.thisIndex'
p4313
g59
(g98
S'-\x00\x00\x00'
tRp4314
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4315
I0
sg3641
S'40-sardines.png'
p4316
sS'block_loop.thisRepN'
p4317
I1
sg3644
g3951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4318
I1
sg3646
g3945
sg55
g11
sS'block_loop.thisTrial'
p4319
Nsg69
Vy
sS'block_loop.thisTrialN'
p4320
I0
sg39
F1.216858233396124
sg34
g752
(S'\x07\xdf\t\x19\r\x02\x00\n\xbe\x00'
tRp4321
sa(dp4322
S'trial_loop.thisTrialN'
p4323
I46
sg3632
g3753
sS'block_loop.thisIndex'
p4324
g3626
sg38
S'right'
p4325
sg58
g62
sS'trial_loop.thisN'
p4326
I46
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p4327
g59
(g98
S'.\x00\x00\x00'
tRp4328
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4329
I0
sg3641
g3761
sS'block_loop.thisRepN'
p4330
I1
sg3644
g3763
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4331
I1
sg3646
g3757
sg55
g11
sS'block_loop.thisTrial'
p4332
Nsg69
Vy
sS'block_loop.thisTrialN'
p4333
I0
sg39
F0.80076822459341201
sg34
g752
(S'\x07\xdf\t\x19\r\x02\x06\x0e\xa2\x18'
tRp4334
sa(dp4335
S'trial_loop.thisTrialN'
p4336
I47
sg3632
g3633
sS'block_loop.thisIndex'
p4337
g3626
sg38
S'left'
p4338
sg58
g62
sS'trial_loop.thisN'
p4339
I47
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4340
g59
(g98
S'/\x00\x00\x00'
tRp4341
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4342
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4343
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4344
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4345
Nsg69
Vy
sS'block_loop.thisTrialN'
p4346
I0
sg39
F0.65011056093499064
sg34
g752
(S'\x07\xdf\t\x19\r\x02\x0c\x0c\x1d\x90'
tRp4347
sa(dp4348
S'trial_loop.thisTrialN'
p4349
I48
sg3632
S'18-mms.png'
p4350
sS'block_loop.thisIndex'
p4351
g3626
sg38
S'left'
p4352
sg58
g62
sS'trial_loop.thisN'
p4353
I48
sg33
g4207
sg63
g64
sS'trial_loop.thisIndex'
p4354
g59
(g98
S'0\x00\x00\x00'
tRp4355
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4356
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p4357
sS'block_loop.thisRepN'
p4358
I1
sg3644
g4207
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4359
I1
sg3646
g4201
sg55
g11
sS'block_loop.thisTrial'
p4360
Nsg69
Vy
sS'block_loop.thisTrialN'
p4361
I0
sg39
F1.2500829634664115
sg34
g752
(S'\x07\xdf\t\x19\r\x02\x12\x073\xc0'
tRp4362
sa(dp4363
S'trial_loop.thisTrialN'
p4364
I49
sg3632
g3787
sS'block_loop.thisIndex'
p4365
g3626
sg38
S'right'
p4366
sg58
g62
sS'trial_loop.thisN'
p4367
I49
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4368
g59
(g98
S'1\x00\x00\x00'
tRp4369
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4370
I0
sg3641
g3794
sS'block_loop.thisRepN'
p4371
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4372
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4373
Nsg69
Vy
sS'block_loop.thisTrialN'
p4374
I0
sg39
F0.85010725380197982
sg34
g752
(S'\x07\xdf\t\x19\r\x02\x18\x0b\x94\xd8'
tRp4375
sa(dp4376
S'trial_loop.thisTrialN'
p4377
I50
sg3632
g4268
sS'block_loop.thisIndex'
p4378
g3626
sg38
S'left'
p4379
sg58
g62
sS'trial_loop.thisN'
p4380
I50
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p4381
g59
(g98
S'2\x00\x00\x00'
tRp4382
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4383
I0
sg3641
g4275
sS'block_loop.thisRepN'
p4384
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4385
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p4386
Nsg69
Vy
sS'block_loop.thisTrialN'
p4387
I0
sg39
F0.66686290900179301
sg34
g752
(S'\x07\xdf\t\x19\r\x02\x1e\t\xc4\x00'
tRp4388
sa(dp4389
S'trial_loop.thisTrialN'
p4390
I51
sg3632
g4007
sS'block_loop.thisIndex'
p4391
g3626
sg38
S'right'
p4392
sg58
g62
sS'trial_loop.thisN'
p4393
I51
sg33
g3962
sg63
g64
sS'trial_loop.thisIndex'
p4394
g59
(g98
S'3\x00\x00\x00'
tRp4395
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4396
I0
sg3641
g4014
sS'block_loop.thisRepN'
p4397
I1
sg3644
g3962
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4398
I1
sg3646
g3969
sg55
g11
sS'block_loop.thisTrial'
p4399
Nsg69
Vy
sS'block_loop.thisTrialN'
p4400
I0
sg39
F0.80015668976375309
sg34
g752
(S'\x07\xdf\t\x19\r\x02$\x05W0'
tRp4401
sa(dp4402
S'trial_loop.thisTrialN'
p4403
I52
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p4404
sS'block_loop.thisIndex'
p4405
g3626
sg38
S'left'
p4406
sg58
g62
sS'trial_loop.thisN'
p4407
I52
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p4408
g59
(g98
S'4\x00\x00\x00'
tRp4409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4410
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p4411
sS'block_loop.thisRepN'
p4412
I1
sg3644
g3872
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4413
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p4414
Nsg69
Vy
sS'block_loop.thisTrialN'
p4415
I0
sg39
F0.70011957002679992
sg34
g752
(S'\x07\xdf\t\x19\r\x02*\x02\xce\xc0'
tRp4416
sa(dp4417
S'trial_loop.thisTrialN'
p4418
I53
sg3632
g3802
sS'block_loop.thisIndex'
p4419
g3626
sg38
S'right'
p4420
sg58
g62
sS'trial_loop.thisN'
p4421
I53
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p4422
g59
(g98
S'5\x00\x00\x00'
tRp4423
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4424
I0
sg3641
g3810
sS'block_loop.thisRepN'
p4425
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4426
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p4427
Nsg69
Vy
sS'block_loop.thisTrialN'
p4428
I0
sg39
F1.2334429439433734
sg34
g752
(S'\x07\xdf\t\x19\r\x02/\r\xde\xc8'
tRp4429
sa(dp4430
S'trial_loop.thisTrialN'
p4431
I54
sg3632
g4227
sS'block_loop.thisIndex'
p4432
g3626
sg38
S'left'
p4433
sg58
g62
sS'trial_loop.thisN'
p4434
I54
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p4435
g59
(g98
S'6\x00\x00\x00'
tRp4436
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4437
I0
sg3641
g4234
sS'block_loop.thisRepN'
p4438
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4439
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p4440
Nsg69
Vy
sS'block_loop.thisTrialN'
p4441
I0
sg39
F0.63345001436937309
sg34
g752
(S'\x07\xdf\t\x19\r\x026\x02\xc3\x08'
tRp4442
sa(dp4443
S'trial_loop.thisTrialN'
p4444
I55
sg3632
S'6-sour_patch_kids.png'
p4445
sS'block_loop.thisIndex'
p4446
g3626
sg38
S'right'
p4447
sg58
g62
sS'trial_loop.thisN'
p4448
I55
sg33
S'38-maltesers.png'
p4449
sg63
g64
sS'trial_loop.thisIndex'
p4450
g59
(g98
S'7\x00\x00\x00'
tRp4451
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4452
I0
sg3641
S'38-maltesers.png'
p4453
sS'block_loop.thisRepN'
p4454
I1
sg3644
g4449
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4455
I1
sg3646
S'6-sour_patch_kids.png'
p4456
sg55
g11
sS'block_loop.thisTrial'
p4457
Nsg69
Vy
sS'block_loop.thisTrialN'
p4458
I0
sg39
F0.98326133663067594
sg34
g752
(S'\x07\xdf\t\x19\r\x02;\x0c\xe0\xe0'
tRp4459
sa(dp4460
S'trial_loop.thisTrialN'
p4461
I56
sg3632
g4197
sS'block_loop.thisIndex'
p4462
g3626
sg38
S'right'
p4463
sg58
g62
sS'trial_loop.thisN'
p4464
I56
sg33
g4207
sg63
g64
sS'trial_loop.thisIndex'
p4465
g59
(g98
S'8\x00\x00\x00'
tRp4466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4467
I0
sg3641
g4205
sS'block_loop.thisRepN'
p4468
I1
sg3644
g4207
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4469
I1
sg3646
g4201
sg55
g11
sS'block_loop.thisTrial'
p4470
Nsg69
Vy
sS'block_loop.thisTrialN'
p4471
I0
sg39
F0.66679020905576181
sg34
g752
(S'\x07\xdf\t\x19\r\x03\x05\r2\xe8'
tRp4472
sa(dp4473
S'trial_loop.thisTrialN'
p4474
I57
sg3632
g4309
sS'block_loop.thisIndex'
p4475
g3626
sg38
S'left'
p4476
sg58
g62
sS'trial_loop.thisN'
p4477
I57
sg33
g3951
sg63
g64
sS'trial_loop.thisIndex'
p4478
g59
(g98
S'9\x00\x00\x00'
tRp4479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4480
I0
sg3641
g4316
sS'block_loop.thisRepN'
p4481
I1
sg3644
g3951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4482
I1
sg3646
g3945
sg55
g11
sS'block_loop.thisTrial'
p4483
Nsg69
Vy
sS'block_loop.thisTrialN'
p4484
I0
sg39
F0.83342418450774858
sg34
g752
(S'\x07\xdf\t\x19\r\x03\x0b\x08\x87\x98'
tRp4485
sa(dp4486
S'trial_loop.thisTrialN'
p4487
I58
sg3632
S'33-ambrosia_rice.png'
p4488
sS'block_loop.thisIndex'
p4489
g3626
sg38
S'right'
p4490
sg58
g62
sS'trial_loop.thisN'
p4491
I58
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p4492
g59
(g98
S':\x00\x00\x00'
tRp4493
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4494
I0
sg3641
S'23-crunchie_redo.png'
p4495
sS'block_loop.thisRepN'
p4496
I1
sg3644
g3763
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4497
I1
sg3646
g3757
sg55
g11
sS'block_loop.thisTrial'
p4498
Nsg69
Vy
sS'block_loop.thisTrialN'
p4499
I0
sg39
F0.63345514612956322
sg34
g752
(S'\x07\xdf\t\x19\r\x03\x11\x06|('
tRp4500
sa(dp4501
S'trial_loop.thisTrialN'
p4502
I59
sg3632
g3868
sS'block_loop.thisIndex'
p4503
g3626
sg38
S'right'
p4504
sg58
g62
sS'trial_loop.thisN'
p4505
I59
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p4506
g59
(g98
S';\x00\x00\x00'
tRp4507
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4508
I0
sg3641
g3876
sS'block_loop.thisRepN'
p4509
I1
sg3644
g3872
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4510
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p4511
Nsg69
Vy
sS'block_loop.thisTrialN'
p4512
I0
sg39
F0.86683422816167877
sg34
g752
(S'\x07\xdf\t\x19\r\x03\x17\x01W\xc0'
tRp4513
sa(dp4514
S'trial_loop.thisTrialN'
p4515
I60
sg3632
g3753
sS'block_loop.thisIndex'
p4516
g3626
sg38
S'left'
p4517
sg58
g62
sS'trial_loop.thisN'
p4518
I60
sg33
g3763
sg63
g64
sS'trial_loop.thisIndex'
p4519
g59
(g98
S'<\x00\x00\x00'
tRp4520
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4521
I0
sg3641
g3761
sS'block_loop.thisRepN'
p4522
I1
sg3644
g3763
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4523
I1
sg3646
g3757
sg55
g11
sS'block_loop.thisTrial'
p4524
Nsg69
Vy
sS'block_loop.thisTrialN'
p4525
I0
sg39
F1.2835146745546808
sg34
g752
(S'\x07\xdf\t\x19\r\x03\x1d\x00\x00\x00'
tRp4526
sa(dp4527
S'trial_loop.thisTrialN'
p4528
I61
sg3632
S'36-fig_rolls.png'
p4529
sS'block_loop.thisIndex'
p4530
g3626
sg38
S'left'
p4531
sg58
g62
sS'trial_loop.thisN'
p4532
I61
sg33
g4001
sg63
g64
sS'trial_loop.thisIndex'
p4533
g59
(g98
S'=\x00\x00\x00'
tRp4534
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4535
I0
sg3641
S'34-hula_hoops_bbq_beef_redo.png'
p4536
sS'block_loop.thisRepN'
p4537
I1
sg3644
g3994
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4538
I1
sg3646
g4001
sg55
g11
sS'block_loop.thisTrial'
p4539
Nsg69
Vy
sS'block_loop.thisTrialN'
p4540
I0
sg39
F1.0335962125318474
sg34
g752
(S'\x07\xdf\t\x19\r\x03#\x04\x9b\xb0'
tRp4541
sa(dp4542
S'trial_loop.thisTrialN'
p4543
I62
sg3632
g3687
sS'block_loop.thisIndex'
p4544
g3626
sg38
S'left'
p4545
sg58
g62
sS'trial_loop.thisN'
p4546
I62
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4547
g59
(g98
S'>\x00\x00\x00'
tRp4548
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4549
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4550
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4551
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4552
Nsg69
Vy
sS'block_loop.thisTrialN'
p4553
I0
sg39
F0.6668523603821086
sg34
g752
(S'\x07\xdf\t\x19\r\x03)\x05\xa98'
tRp4554
sa(dp4555
S'trial_loop.thisTrialN'
p4556
I63
sg3632
g4052
sS'block_loop.thisIndex'
p4557
g3626
sg38
S'left'
p4558
sg58
g62
sS'trial_loop.thisN'
p4559
I63
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p4560
g59
(g98
S'?\x00\x00\x00'
tRp4561
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4562
I0
sg3641
g4059
sS'block_loop.thisRepN'
p4563
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4564
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p4565
Nsg69
Vy
sS'block_loop.thisTrialN'
p4566
I0
sg39
F0.93346444031885767
sg34
g752
(S'\x07\xdf\t\x19\r\x03/\x018\x80'
tRp4567
sa(dp4568
S'trial_loop.thisTrialN'
p4569
I64
sg3632
g4529
sS'block_loop.thisIndex'
p4570
g3626
sg38
S'left'
p4571
sg58
g62
sS'trial_loop.thisN'
p4572
I64
sg33
g3994
sg63
g64
sS'trial_loop.thisIndex'
p4573
g59
(g98
S'@\x00\x00\x00'
tRp4574
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4575
I0
sg3641
g4536
sS'block_loop.thisRepN'
p4576
I1
sg3644
g3994
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4577
I1
sg3646
g4001
sg55
g11
sS'block_loop.thisTrial'
p4578
Nsg69
Vy
sS'block_loop.thisTrialN'
p4579
I0
sg39
F1.3167704802872322
sg34
g752
(S'\x07\xdf\t\x19\r\x035\x00\x9c@'
tRp4580
sa(dp4581
S'trial_loop.thisTrialN'
p4582
I65
sg3632
S'51-mars.png'
p4583
sS'block_loop.thisIndex'
p4584
g3626
sg38
S'right'
p4585
sg58
g62
sS'trial_loop.thisN'
p4586
I65
sg33
S'27-hartleys_raspberries_jelly.png'
p4587
sg63
g64
sS'trial_loop.thisIndex'
p4588
g59
(g98
S'A\x00\x00\x00'
tRp4589
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4590
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p4591
sS'block_loop.thisRepN'
p4592
I1
sg3644
g4587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4593
I1
sg3646
S'51-mars.png'
p4594
sg55
g11
sS'block_loop.thisTrial'
p4595
Nsg69
Vy
sS'block_loop.thisTrialN'
p4596
I0
sg39
F0.83352967070095474
sg34
g752
(S'\x07\xdf\t\x19\r\x03;\x05\xef\x88'
tRp4597
sa(dp4598
S'trial_loop.thisTrialN'
p4599
I66
sg3632
S'21-nakd_banana_crunch.png'
p4600
sS'block_loop.thisIndex'
p4601
g3626
sg38
S'left'
p4602
sg58
g62
sS'trial_loop.thisN'
p4603
I66
sg33
g3840
sg63
g64
sS'trial_loop.thisIndex'
p4604
g59
(g98
S'B\x00\x00\x00'
tRp4605
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4606
I0
sg3641
S'1-treacle_cookies.png'
p4607
sS'block_loop.thisRepN'
p4608
I1
sg3644
g3840
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4609
I1
sg3646
g3847
sg55
g11
sS'block_loop.thisTrial'
p4610
Nsg69
Vy
sS'block_loop.thisTrialN'
p4611
I0
sg39
F3.0001687779113126
sg34
g752
(S'\x07\xdf\t\x19\r\x04\x05\x03\xe00'
tRp4612
sa(dp4613
S'trial_loop.thisTrialN'
p4614
I67
sg3632
g3819
sS'block_loop.thisIndex'
p4615
g3626
sg38
S'left'
p4616
sg58
g62
sS'trial_loop.thisN'
p4617
I67
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p4618
g59
(g98
S'C\x00\x00\x00'
tRp4619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4620
I0
sg3641
g3827
sS'block_loop.thisRepN'
p4621
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4622
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p4623
Nsg69
Vy
sS'block_loop.thisTrialN'
p4624
I0
sg39
F0.61676238350992207
sg34
g752
(S'\x07\xdf\t\x19\r\x04\r\x04e\x00'
tRp4625
sa(dp4626
S'trial_loop.thisTrialN'
p4627
I68
sg3632
g3770
sS'block_loop.thisIndex'
p4628
g3626
sg38
S'right'
p4629
sg58
g62
sS'trial_loop.thisN'
p4630
I68
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p4631
g59
(g98
S'D\x00\x00\x00'
tRp4632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4633
I0
sg3641
g3778
sS'block_loop.thisRepN'
p4634
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4635
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p4636
Nsg69
Vy
sS'block_loop.thisTrialN'
p4637
I0
sg39
F0.8167168818981736
sg34
g752
(S'\x07\xdf\t\x19\r\x04\x12\x0eH@'
tRp4638
sa(dp4639
S'trial_loop.thisTrialN'
p4640
I69
sg3632
S'49-yorkie.png'
p4641
sS'block_loop.thisIndex'
p4642
g3626
sg38
S'right'
p4643
sg58
g62
sS'trial_loop.thisN'
p4644
I69
sg33
g3830
sg63
g64
sS'trial_loop.thisIndex'
p4645
g59
(g98
S'E\x00\x00\x00'
tRp4646
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4647
I0
sg3641
S'35-raisins.png'
p4648
sS'block_loop.thisRepN'
p4649
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4650
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p4651
Nsg69
Vy
sS'block_loop.thisTrialN'
p4652
I0
sg39
F0.88347367748792749
sg34
g752
(S'\x07\xdf\t\x19\r\x04\x18\x0b\xfeP'
tRp4653
sa(dp4654
S'trial_loop.thisTrialN'
p4655
I70
sg3632
g3719
sS'block_loop.thisIndex'
p4656
g3626
sg38
S'right'
p4657
sg58
g62
sS'trial_loop.thisN'
p4658
I70
sg33
g3723
sg63
g64
sS'trial_loop.thisIndex'
p4659
g59
(g98
S'F\x00\x00\x00'
tRp4660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4661
I0
sg3641
g3727
sS'block_loop.thisRepN'
p4662
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4663
I1
sg3646
g3730
sg55
g11
sS'block_loop.thisTrial'
p4664
Nsg69
Vy
sS'block_loop.thisTrialN'
p4665
I0
sg39
F1.0835402193206392
sg34
g752
(S'\x07\xdf\t\x19\r\x04\x1e\n\xe5\x10'
tRp4666
sa(dp4667
S'trial_loop.thisTrialN'
p4668
I71
sg3632
g3704
sS'block_loop.thisIndex'
p4669
g3626
sg38
S'right'
p4670
sg58
g62
sS'trial_loop.thisN'
p4671
I71
sg33
g3680
sg63
g64
sS'trial_loop.thisIndex'
p4672
g59
(g98
S'G\x00\x00\x00'
tRp4673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4674
I0
sg3641
g3711
sS'block_loop.thisRepN'
p4675
I1
sg3644
g3680
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4676
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p4677
Nsg69
Vy
sS'block_loop.thisTrialN'
p4678
I0
sg39
F0.94999640776768501
sg34
g752
(S'\x07\xdf\t\x19\r\x04$\x0c\xa6H'
tRp4679
sa(dp4680
S'trial_loop.thisTrialN'
p4681
I72
sg3632
g4600
sS'block_loop.thisIndex'
p4682
g3626
sg38
S'right'
p4683
sg58
g62
sS'trial_loop.thisN'
p4684
I72
sg33
g3840
sg63
g64
sS'trial_loop.thisIndex'
p4685
g59
(g98
S'H\x00\x00\x00'
tRp4686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4687
I0
sg3641
g4607
sS'block_loop.thisRepN'
p4688
I1
sg3644
g3840
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4689
I1
sg3646
g3847
sg55
g11
sS'block_loop.thisTrial'
p4690
Nsg69
Vy
sS'block_loop.thisTrialN'
p4691
I0
sg39
F1.1339178598973376
sg34
g752
(S'\x07\xdf\t\x19\r\x04*\x0cD\xa0'
tRp4692
sa(dp4693
S'trial_loop.thisTrialN'
p4694
I73
sg3632
g3975
sS'block_loop.thisIndex'
p4695
g3626
sg38
S'right'
p4696
sg58
g62
sS'trial_loop.thisN'
p4697
I73
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4698
g59
(g98
S'I\x00\x00\x00'
tRp4699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4700
I0
sg3641
g3982
sS'block_loop.thisRepN'
p4701
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4702
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4703
Nsg69
Vy
sS'block_loop.thisTrialN'
p4704
I0
sg39
F0.68345503209093295
sg34
g752
(S'\x07\xdf\t\x19\r\x040\x0e\xf8\x08'
tRp4705
sa(dp4706
S'trial_loop.thisTrialN'
p4707
I74
sg3632
g3704
sS'block_loop.thisIndex'
p4708
g3626
sg38
S'right'
p4709
sg58
g62
sS'trial_loop.thisN'
p4710
I74
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4711
g59
(g98
S'J\x00\x00\x00'
tRp4712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4713
I0
sg3641
g3711
sS'block_loop.thisRepN'
p4714
I1
sg3644
g3680
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4715
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p4716
Nsg69
Vy
sS'block_loop.thisTrialN'
p4717
I0
sg39
F0.6500692217505275
sg34
g752
(S'\x07\xdf\t\x19\r\x046\n\x8b8'
tRp4718
sa(dp4719
S'trial_loop.thisTrialN'
p4720
I75
sg3632
g3898
sS'block_loop.thisIndex'
p4721
g3626
sg38
S'right'
p4722
sg58
g62
sS'trial_loop.thisN'
p4723
I75
sg33
g3909
sg63
g64
sS'trial_loop.thisIndex'
p4724
g59
(g98
S'K\x00\x00\x00'
tRp4725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4726
I0
sg3641
g3906
sS'block_loop.thisRepN'
p4727
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4728
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p4729
Nsg69
Vy
sS'block_loop.thisTrialN'
p4730
I0
sg39
F0.68341568859250401
sg34
g752
(S'\x07\xdf\t\x19\r\x05\x00\x05\xa1h'
tRp4731
sa(dp4732
S'trial_loop.thisTrialN'
p4733
I76
sg3632
g4404
sS'block_loop.thisIndex'
p4734
g3626
sg38
S'left'
p4735
sg58
g62
sS'trial_loop.thisN'
p4736
I76
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p4737
g59
(g98
S'L\x00\x00\x00'
tRp4738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4739
I0
sg3641
g4411
sS'block_loop.thisRepN'
p4740
I1
sg3644
g3872
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4741
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p4742
Nsg69
Vy
sS'block_loop.thisTrialN'
p4743
I0
sg39
F0.91676825652393745
sg34
g752
(S'\x07\xdf\t\x19\r\x05\x06\x01s\x18'
tRp4744
sa(dp4745
S'trial_loop.thisTrialN'
p4746
I77
sg3632
g4268
sS'block_loop.thisIndex'
p4747
g3626
sg38
S'left'
p4748
sg58
g62
sS'trial_loop.thisN'
p4749
I77
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p4750
g59
(g98
S'M\x00\x00\x00'
tRp4751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4752
I0
sg3641
g4275
sS'block_loop.thisRepN'
p4753
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4754
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p4755
Nsg69
Vy
sS'block_loop.thisTrialN'
p4756
I0
sg39
F0.65010942054504994
sg34
g752
(S'\x07\xdf\t\x19\r\x05\x0c\x00\x94p'
tRp4757
sa(dp4758
S'trial_loop.thisTrialN'
p4759
I78
sg3632
S'27-hartleys_raspberries_jelly.png'
p4760
sS'block_loop.thisIndex'
p4761
g3626
sg38
S'left'
p4762
sg58
g62
sS'trial_loop.thisN'
p4763
I78
sg33
g4587
sg63
g64
sS'trial_loop.thisIndex'
p4764
g59
(g98
S'N\x00\x00\x00'
tRp4765
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4766
I0
sg3641
S'51-mars.png'
p4767
sS'block_loop.thisRepN'
p4768
I1
sg3644
g4587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4769
I1
sg3646
g4594
sg55
g11
sS'block_loop.thisTrial'
p4770
Nsg69
Vy
sS'block_loop.thisTrialN'
p4771
I0
sg39
F0.81686114139483834
sg34
g752
(S'\x07\xdf\t\x19\r\x05\x11\x0b+`'
tRp4772
sa(dp4773
S'trial_loop.thisTrialN'
p4774
I79
sg3632
S'38-maltesers.png'
p4775
sS'block_loop.thisIndex'
p4776
g3626
sg38
S'left'
p4777
sg58
g62
sS'trial_loop.thisN'
p4778
I79
sg33
g4449
sg63
g64
sS'trial_loop.thisIndex'
p4779
g59
(g98
S'O\x00\x00\x00'
tRp4780
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4781
I0
sg3641
S'6-sour_patch_kids.png'
p4782
sS'block_loop.thisRepN'
p4783
I1
sg3644
g4449
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4784
I1
sg3646
g4456
sg55
g11
sS'block_loop.thisTrial'
p4785
Nsg69
Vy
sS'block_loop.thisTrialN'
p4786
I0
sg39
F1.0665019181378739
sg34
g752
(S'\x07\xdf\t\x19\r\x05\x17\x08\xe1p'
tRp4787
sa(dp4788
S'trial_loop.thisTrialN'
p4789
I80
sg3632
g3958
sS'block_loop.thisIndex'
p4790
g3626
sg38
S'left'
p4791
sg58
g62
sS'trial_loop.thisN'
p4792
I80
sg33
g3962
sg63
g64
sS'trial_loop.thisIndex'
p4793
g59
(g98
S'P\x00\x00\x00'
tRp4794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4795
I0
sg3641
g3966
sS'block_loop.thisRepN'
p4796
I1
sg3644
g3962
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4797
I1
sg3646
g3969
sg55
g11
sS'block_loop.thisTrial'
p4798
Nsg69
Vy
sS'block_loop.thisTrialN'
p4799
I0
sg39
F0.9002117706622812
sg34
g752
(S'\x07\xdf\t\x19\r\x05\x1d\nh\x10'
tRp4800
sa(dp4801
S'trial_loop.thisTrialN'
p4802
I81
sg3632
g4641
sS'block_loop.thisIndex'
p4803
g3626
sg38
S'right'
p4804
sg58
g62
sS'trial_loop.thisN'
p4805
I81
sg33
g3830
sg63
g64
sS'trial_loop.thisIndex'
p4806
g59
(g98
S'Q\x00\x00\x00'
tRp4807
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4808
I0
sg3641
g4648
sS'block_loop.thisRepN'
p4809
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4810
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p4811
Nsg69
Vy
sS'block_loop.thisTrialN'
p4812
I0
sg39
F0.76676859864164726
sg34
g752
(S'\x07\xdf\t\x19\r\x05#\tN\xd0'
tRp4813
sa(dp4814
S'trial_loop.thisTrialN'
p4815
I82
sg3632
g3704
sS'block_loop.thisIndex'
p4816
g3626
sg38
S'right'
p4817
sg58
g62
sS'trial_loop.thisN'
p4818
I82
sg33
g3680
sg63
g64
sS'trial_loop.thisIndex'
p4819
g59
(g98
S'R\x00\x00\x00'
tRp4820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4821
I0
sg3641
g3711
sS'block_loop.thisRepN'
p4822
I1
sg3644
g3680
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4823
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p4824
Nsg69
Vy
sS'block_loop.thisTrialN'
p4825
I0
sg39
F0.75000997842289507
sg34
g752
(S'\x07\xdf\t\x19\r\x05)\x06MH'
tRp4826
sa(dp4827
S'trial_loop.thisTrialN'
p4828
I83
sg3632
S'44-crunch.png'
p4829
sS'block_loop.thisIndex'
p4830
g3626
sg38
S'left'
p4831
sg58
g62
sS'trial_loop.thisN'
p4832
I83
sg33
g4026
sg63
g64
sS'trial_loop.thisIndex'
p4833
g59
(g98
S'S\x00\x00\x00'
tRp4834
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4835
I0
sg3641
S'26-walkers_smoky_bacon.png'
p4836
sS'block_loop.thisRepN'
p4837
I1
sg3644
g4026
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4838
I1
sg3646
g4033
sg55
g11
sS'block_loop.thisTrial'
p4839
Nsg69
Vy
sS'block_loop.thisTrialN'
p4840
I0
sg39
F1.1501593126631633
sg34
g752
(S'\x07\xdf\t\x19\r\x05/\x02\xd2\xa8'
tRp4841
sa(dp4842
S'trial_loop.thisTrialN'
p4843
I84
sg3632
g3653
sS'block_loop.thisIndex'
p4844
g3626
sg38
S'left'
p4845
sg58
g62
sS'trial_loop.thisN'
p4846
I84
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4847
g59
(g98
S'T\x00\x00\x00'
tRp4848
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4849
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4850
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4851
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4852
Nsg69
Vy
sS'block_loop.thisTrialN'
p4853
I0
sg39
F0.63388336305979465
sg34
g752
(S'\x07\xdf\t\x19\r\x055\x05\xc4\x90'
tRp4854
sa(dp4855
S'trial_loop.thisTrialN'
p4856
I85
sg3632
g4445
sS'block_loop.thisIndex'
p4857
g3626
sg38
S'right'
p4858
sg58
g62
sS'trial_loop.thisN'
p4859
I85
sg33
g4449
sg63
g64
sS'trial_loop.thisIndex'
p4860
g59
(g98
S'U\x00\x00\x00'
tRp4861
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4862
I0
sg3641
g4453
sS'block_loop.thisRepN'
p4863
I1
sg3644
g4449
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4864
I1
sg3646
g4456
sg55
g11
sS'block_loop.thisTrial'
p4865
Nsg69
Vy
sS'block_loop.thisTrialN'
p4866
I0
sg39
F1.5996841686319385
sg34
g752
(S'\x07\xdf\t\x19\r\x05;\x00\xa0('
tRp4867
sa(dp4868
S'trial_loop.thisTrialN'
p4869
I86
sg3632
g4052
sS'block_loop.thisIndex'
p4870
g3626
sg38
S'left'
p4871
sg58
g62
sS'trial_loop.thisN'
p4872
I86
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p4873
g59
(g98
S'V\x00\x00\x00'
tRp4874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4875
I0
sg3641
g4059
sS'block_loop.thisRepN'
p4876
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4877
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p4878
Nsg69
Vy
sS'block_loop.thisTrialN'
p4879
I0
sg39
F0.90008575742467656
sg34
g752
(S'\x07\xdf\t\x19\r\x06\x05\n=\x18'
tRp4880
sa(dp4881
S'trial_loop.thisTrialN'
p4882
I87
sg3632
g3719
sS'block_loop.thisIndex'
p4883
g3626
sg38
S'right'
p4884
sg58
g62
sS'trial_loop.thisN'
p4885
I87
sg33
g3723
sg63
g64
sS'trial_loop.thisIndex'
p4886
g59
(g98
S'W\x00\x00\x00'
tRp4887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4888
I0
sg3641
g3727
sS'block_loop.thisRepN'
p4889
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4890
I1
sg3646
g3730
sg55
g11
sS'block_loop.thisTrial'
p4891
Nsg69
Vy
sS'block_loop.thisTrialN'
p4892
I0
sg39
F0.70010503003868507
sg34
g752
(S'\x07\xdf\t\x19\r\x06\x0b\tbX'
tRp4893
sa(dp4894
S'trial_loop.thisTrialN'
p4895
I88
sg3632
g3653
sS'block_loop.thisIndex'
p4896
g3626
sg38
S'left'
p4897
sg58
g62
sS'trial_loop.thisN'
p4898
I88
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4899
g59
(g98
S'X\x00\x00\x00'
tRp4900
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4901
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4902
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4903
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4904
Nsg69
Vy
sS'block_loop.thisTrialN'
p4905
I0
sg39
F0.83353622795038973
sg34
g752
(S'\x07\xdf\t\x19\r\x06\x11\x050 '
tRp4906
sa(dp4907
S'trial_loop.thisTrialN'
p4908
I89
sg3632
g4007
sS'block_loop.thisIndex'
p4909
g3626
sg38
S'right'
p4910
sg58
g62
sS'trial_loop.thisN'
p4911
I89
sg33
g3962
sg63
g64
sS'trial_loop.thisIndex'
p4912
g59
(g98
S'Y\x00\x00\x00'
tRp4913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4914
I0
sg3641
g4014
sS'block_loop.thisRepN'
p4915
I1
sg3644
g3962
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4916
I1
sg3646
g3969
sg55
g11
sS'block_loop.thisTrial'
p4917
Nsg69
Vy
sS'block_loop.thisTrialN'
p4918
I0
sg39
F1.0169732988779288
sg34
g752
(S'\x07\xdf\t\x19\r\x06\x17\x03 \xc8'
tRp4919
sa(dp4920
S'trial_loop.thisTrialN'
p4921
I90
sg3632
g3633
sS'block_loop.thisIndex'
p4922
g3626
sg38
S'left'
p4923
sg58
g62
sS'trial_loop.thisN'
p4924
I90
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4925
g59
(g98
S'Z\x00\x00\x00'
tRp4926
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4927
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4928
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4929
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4930
Nsg69
Vy
sS'block_loop.thisTrialN'
p4931
I0
sg39
F0.73354158778965939
sg34
g752
(S'\x07\xdf\t\x19\r\x06\x1d\x03\xef\xd0'
tRp4932
sa(dp4933
S'trial_loop.thisTrialN'
p4934
I91
sg3632
g4600
sS'block_loop.thisIndex'
p4935
g3626
sg38
S'right'
p4936
sg58
g62
sS'trial_loop.thisN'
p4937
I91
sg33
g3840
sg63
g64
sS'trial_loop.thisIndex'
p4938
g59
(g98
S'[\x00\x00\x00'
tRp4939
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4940
I0
sg3641
g4607
sS'block_loop.thisRepN'
p4941
I1
sg3644
g3840
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4942
I1
sg3646
g3847
sg55
g11
sS'block_loop.thisTrial'
p4943
Nsg69
Vy
sS'block_loop.thisTrialN'
p4944
I0
sg39
F1.2001845723316364
sg34
g752
(S'\x07\xdf\t\x19\r\x06#\x00u0'
tRp4945
sa(dp4946
S'trial_loop.thisTrialN'
p4947
I92
sg3632
g4760
sS'block_loop.thisIndex'
p4948
g3626
sg38
S'left'
p4949
sg58
g62
sS'trial_loop.thisN'
p4950
I92
sg33
g4587
sg63
g64
sS'trial_loop.thisIndex'
p4951
g59
(g98
S'\\\x00\x00\x00'
tRp4952
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4953
I0
sg3641
g4767
sS'block_loop.thisRepN'
p4954
I1
sg3644
g4587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4955
I1
sg3646
g4594
sg55
g11
sS'block_loop.thisTrial'
p4956
Nsg69
Vy
sS'block_loop.thisTrialN'
p4957
I0
sg39
F0.70010731082038546
sg34
g752
(S'\x07\xdf\t\x19\r\x06)\x03\xe4\x18'
tRp4958
sa(dp4959
S'trial_loop.thisTrialN'
p4960
I93
sg3632
g3941
sS'block_loop.thisIndex'
p4961
g3626
sg38
S'right'
p4962
sg58
g62
sS'trial_loop.thisN'
p4963
I93
sg33
g3951
sg63
g64
sS'trial_loop.thisIndex'
p4964
g59
(g98
S']\x00\x00\x00'
tRp4965
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4966
I0
sg3641
g3949
sS'block_loop.thisRepN'
p4967
I1
sg3644
g3951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4968
I1
sg3646
g3945
sg55
g11
sS'block_loop.thisTrial'
p4969
Nsg69
Vy
sS'block_loop.thisTrialN'
p4970
I0
sg39
F0.96677042326700757
sg34
g752
(S'\x07\xdf\t\x19\r\x06.\x0f2\xa0'
tRp4971
sa(dp4972
S'trial_loop.thisTrialN'
p4973
I94
sg3632
g3770
sS'block_loop.thisIndex'
p4974
g3626
sg38
S'right'
p4975
sg58
g62
sS'trial_loop.thisN'
p4976
I94
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p4977
g59
(g98
S'^\x00\x00\x00'
tRp4978
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4979
I0
sg3641
g3778
sS'block_loop.thisRepN'
p4980
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4981
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p4982
Nsg69
Vy
sS'block_loop.thisTrialN'
p4983
I0
sg39
F0.80011135920904053
sg34
g752
(S'\x07\xdf\t\x19\r\x064\x0f\x0b\x90'
tRp4984
sa(dp4985
S'trial_loop.thisTrialN'
p4986
I95
sg3632
g4488
sS'block_loop.thisIndex'
p4987
g3626
sg38
S'left'
p4988
sg58
g62
sS'trial_loop.thisN'
p4989
I95
sg33
g3763
sg63
g64
sS'trial_loop.thisIndex'
p4990
g59
(g98
S'_\x00\x00\x00'
tRp4991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4992
I0
sg3641
g4495
sS'block_loop.thisRepN'
p4993
I1
sg3644
g3763
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4994
I1
sg3646
g3757
sg55
g11
sS'block_loop.thisTrial'
p4995
Nsg69
Vy
sS'block_loop.thisTrialN'
p4996
I0
sg39
F1.516904590303966
sg34
g752
(S'\x07\xdf\t\x19\r\x06:\x0c\x83 '
tRp4997
sa(dp4998
S'trial_loop.thisTrialN'
p4999
I96
sg3632
g3802
sS'block_loop.thisIndex'
p5000
g3626
sg38
S'right'
p5001
sg58
g62
sS'trial_loop.thisN'
p5002
I96
sg33
g3813
sg63
g64
sS'trial_loop.thisIndex'
p5003
g59
(g98
S'`\x00\x00\x00'
tRp5004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5005
I0
sg3641
g3810
sS'block_loop.thisRepN'
p5006
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5007
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p5008
Nsg69
Vy
sS'block_loop.thisTrialN'
p5009
I0
sg39
F0.93339715723413974
sg34
g752
(S'\x07\xdf\t\x19\r\x07\x05\x05\xad '
tRp5010
sa(dp5011
S'trial_loop.thisTrialN'
p5012
I97
sg3632
g3719
sS'block_loop.thisIndex'
p5013
g3626
sg38
S'right'
p5014
sg58
g62
sS'trial_loop.thisN'
p5015
I97
sg33
g3723
sg63
g64
sS'trial_loop.thisIndex'
p5016
g59
(g98
S'a\x00\x00\x00'
tRp5017
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5018
I0
sg3641
g3727
sS'block_loop.thisRepN'
p5019
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5020
I1
sg3646
g3730
sg55
g11
sS'block_loop.thisTrial'
p5021
Nsg69
Vy
sS'block_loop.thisTrialN'
p5022
I0
sg39
F0.63344117633641872
sg34
g752
(S'\x07\xdf\t\x19\r\x07\x0b\x05Kx'
tRp5023
sa(dp5024
S'trial_loop.thisTrialN'
p5025
I98
sg3632
g3990
sS'block_loop.thisIndex'
p5026
g3626
sg38
S'right'
p5027
sg58
g62
sS'trial_loop.thisN'
p5028
I98
sg33
g3994
sg63
g64
sS'trial_loop.thisIndex'
p5029
g59
(g98
S'b\x00\x00\x00'
tRp5030
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5031
I0
sg3641
g3998
sS'block_loop.thisRepN'
p5032
I1
sg3644
g3994
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5033
I1
sg3646
g4001
sg55
g11
sS'block_loop.thisTrial'
p5034
Nsg69
Vy
sS'block_loop.thisTrialN'
p5035
I0
sg39
F0.88348280061836704
sg34
g752
(S"\x07\xdf\t\x19\r\x07\x11\x00'\x10"
tRp5036
sa(dp5037
S'trial_loop.thisTrialN'
p5038
I99
sg3632
g3670
sS'block_loop.thisIndex'
p5039
g3626
sg38
S'left'
p5040
sg58
g62
sS'trial_loop.thisN'
p5041
I99
sg33
g3680
sg63
g64
sS'trial_loop.thisIndex'
p5042
g59
(g98
S'c\x00\x00\x00'
tRp5043
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5044
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5045
I1
sg3644
g3680
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5046
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p5047
Nsg69
Vy
sS'block_loop.thisTrialN'
p5048
I0
sg39
F1.6166805604334513
sg34
g752
(S'\x07\xdf\t\x19\r\x07\x16\x0e\x11\x90'
tRp5049
sa(dp5050
S'trial_loop.thisTrialN'
p5051
I100
sg3632
g3990
sS'block_loop.thisIndex'
p5052
g3626
sg38
S'right'
p5053
sg58
g62
sS'trial_loop.thisN'
p5054
I100
sg33
g3994
sg63
g64
sS'trial_loop.thisIndex'
p5055
g59
(g98
S'd\x00\x00\x00'
tRp5056
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5057
I0
sg3641
g3998
sS'block_loop.thisRepN'
p5058
I1
sg3644
g3994
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5059
I1
sg3646
g4001
sg55
g11
sS'block_loop.thisTrial'
p5060
Nsg69
Vy
sS'block_loop.thisTrialN'
p5061
I0
sg39
F1.0168834930645971
sg34
g752
(S'\x07\xdf\t\x19\r\x07\x1d\x08\xaa\xc0'
tRp5062
sa(dp5063
S'trial_loop.thisTrialN'
p5064
I101
sg3632
g3787
sS'block_loop.thisIndex'
p5065
g3626
sg38
S'right'
p5066
sg58
g62
sS'trial_loop.thisN'
p5067
I101
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5068
g59
(g98
S'e\x00\x00\x00'
tRp5069
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5070
I0
sg3641
g3794
sS'block_loop.thisRepN'
p5071
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5072
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5073
Nsg69
Vy
sS'block_loop.thisTrialN'
p5074
I0
sg39
F0.78344596597889904
sg34
g752
(S'\x07\xdf\t\x19\r\x07#\ty\xc8'
tRp5075
sa(dp5076
S'trial_loop.thisTrialN'
p5077
I102
sg3632
S'19-caramello_redo.png'
p5078
sS'block_loop.thisIndex'
p5079
g3626
sg38
S'left'
p5080
sg58
g62
sS'trial_loop.thisN'
p5081
I102
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p5082
g59
(g98
S'f\x00\x00\x00'
tRp5083
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5084
I0
sg3641
S'30-spaghetti_hoops.png'
p5085
sS'block_loop.thisRepN'
p5086
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5087
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p5088
Nsg69
Vy
sS'block_loop.thisTrialN'
p5089
I0
sg39
F0.96687448397278786
sg34
g752
(S'\x07\xdf\t\x19\r\x07)\x06\xb6\xc0'
tRp5090
sa(dp5091
S'trial_loop.thisTrialN'
p5092
I103
sg3632
g4829
sS'block_loop.thisIndex'
p5093
g3626
sg38
S'left'
p5094
sg58
g62
sS'trial_loop.thisN'
p5095
I103
sg33
g4026
sg63
g64
sS'trial_loop.thisIndex'
p5096
g59
(g98
S'g\x00\x00\x00'
tRp5097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5098
I0
sg3641
g4836
sS'block_loop.thisRepN'
p5099
I1
sg3644
g4026
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5100
I1
sg3646
g4033
sg55
g11
sS'block_loop.thisTrial'
p5101
Nsg69
Vy
sS'block_loop.thisTrialN'
p5102
I0
sg39
F0.7668452899561089
sg34
g752
(S'\x07\xdf\t\x19\r\x07/\x06\xce0'
tRp5103
sa(dp5104
S'trial_loop.thisTrialN'
p5105
I104
sg3632
g4309
sS'block_loop.thisIndex'
p5106
g3626
sg38
S'left'
p5107
sg58
g62
sS'trial_loop.thisN'
p5108
I104
sg33
g3951
sg63
g64
sS'trial_loop.thisIndex'
p5109
g59
(g98
S'h\x00\x00\x00'
tRp5110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5111
I0
sg3641
g4316
sS'block_loop.thisRepN'
p5112
I1
sg3644
g3951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5113
I1
sg3646
g3945
sg55
g11
sS'block_loop.thisTrial'
p5114
Nsg69
Vy
sS'block_loop.thisTrialN'
p5115
I0
sg39
F1.6001819494304073
sg34
g752
(S'\x07\xdf\t\x19\r\x075\x03\x8e('
tRp5116
sa(dp5117
S'trial_loop.thisTrialN'
p5118
I105
sg3632
g4583
sS'block_loop.thisIndex'
p5119
g3626
sg38
S'right'
p5120
sg58
g62
sS'trial_loop.thisN'
p5121
I105
sg33
g4587
sg63
g64
sS'trial_loop.thisIndex'
p5122
g59
(g98
S'i\x00\x00\x00'
tRp5123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5124
I0
sg3641
g4591
sS'block_loop.thisRepN'
p5125
I1
sg3644
g4587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5126
I1
sg3646
g4594
sg55
g11
sS'block_loop.thisTrial'
p5127
Nsg69
Vy
sS'block_loop.thisTrialN'
p5128
I0
sg39
F0.75004818153138331
sg34
g752
(S'\x07\xdf\t\x19\r\x07;\ri\x98'
tRp5129
sa(dp5130
S'trial_loop.thisTrialN'
p5131
I106
sg3632
g4268
sS'block_loop.thisIndex'
p5132
g3626
sg38
S'left'
p5133
sg58
g62
sS'trial_loop.thisN'
p5134
I106
sg33
g3781
sg63
g64
sS'trial_loop.thisIndex'
p5135
g59
(g98
S'j\x00\x00\x00'
tRp5136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5137
I0
sg3641
g4275
sS'block_loop.thisRepN'
p5138
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5139
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p5140
Nsg69
Vy
sS'block_loop.thisTrialN'
p5141
I0
sg39
F0.68338347253848042
sg34
g752
(S'\x07\xdf\t\x19\r\x08\x05\t\xee\xf8'
tRp5142
sa(dp5143
S'trial_loop.thisTrialN'
p5144
I107
sg3632
g4350
sS'block_loop.thisIndex'
p5145
g3626
sg38
S'left'
p5146
sg58
g62
sS'trial_loop.thisN'
p5147
I107
sg33
g4201
sg63
g64
sS'trial_loop.thisIndex'
p5148
g59
(g98
S'k\x00\x00\x00'
tRp5149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5150
I0
sg3641
g4357
sS'block_loop.thisRepN'
p5151
I1
sg3644
g4207
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5152
I1
sg3646
g4201
sg55
g11
sS'block_loop.thisTrial'
p5153
Nsg69
Vy
sS'block_loop.thisTrialN'
p5154
I0
sg39
F0.966774414637257
sg34
g752
(S'\x07\xdf\t\x19\r\x08\x0b\x05\xbc\xc0'
tRp5155
sa(dp5156
S'trial_loop.thisTrialN'
p5157
I108
sg3632
g4529
sS'block_loop.thisIndex'
p5158
g3626
sg38
S'left'
p5159
sg58
g62
sS'trial_loop.thisN'
p5160
I108
sg33
g3994
sg63
g64
sS'trial_loop.thisIndex'
p5161
g59
(g98
S'l\x00\x00\x00'
tRp5162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5163
I0
sg3641
g4536
sS'block_loop.thisRepN'
p5164
I1
sg3644
g3994
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5165
I1
sg3646
g4001
sg55
g11
sS'block_loop.thisTrial'
p5166
Nsg69
Vy
sS'block_loop.thisTrialN'
p5167
I0
sg39
F0.7001284080579353
sg34
g752
(S'\x07\xdf\t\x19\r\x08\x11\x05\x95\xb0'
tRp5168
sa(dp5169
S'trial_loop.thisTrialN'
p5170
I109
sg3632
g3836
sS'block_loop.thisIndex'
p5171
g3626
sg38
S'left'
p5172
sg58
g62
sS'trial_loop.thisN'
p5173
I109
sg33
g3840
sg63
g64
sS'trial_loop.thisIndex'
p5174
g59
(g98
S'm\x00\x00\x00'
tRp5175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5176
I0
sg3641
g3844
sS'block_loop.thisRepN'
p5177
I1
sg3644
g3840
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5178
I1
sg3646
g3847
sg55
g11
sS'block_loop.thisTrial'
p5179
Nsg69
Vy
sS'block_loop.thisTrialN'
p5180
I0
sg39
F1.0168623958252283
sg34
g752
(S'\x07\xdf\t\x19\r\x08\x17\x01\xa1\xf8'
tRp5181
sa(dp5182
S'trial_loop.thisTrialN'
p5183
I110
sg3632
g4760
sS'block_loop.thisIndex'
p5184
g3626
sg38
S'left'
p5185
sg58
g62
sS'trial_loop.thisN'
p5186
I110
sg33
g4594
sg63
g64
sS'trial_loop.thisIndex'
p5187
g59
(g98
S'n\x00\x00\x00'
tRp5188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5189
I0
sg3641
g4767
sS'block_loop.thisRepN'
p5190
I1
sg3644
g4587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5191
I1
sg3646
g4594
sg55
g11
sS'block_loop.thisTrial'
p5192
Nsg69
Vy
sS'block_loop.thisTrialN'
p5193
I0
sg39
F0.6167846211392316
sg34
g752
(S'\x07\xdf\t\x19\r\x08\x1d\x02q\x00'
tRp5194
sa(dp5195
S'trial_loop.thisTrialN'
p5196
I111
sg3632
g4197
sS'block_loop.thisIndex'
p5197
g3626
sg38
S'right'
p5198
sg58
g62
sS'trial_loop.thisN'
p5199
I111
sg33
g4201
sg63
g64
sS'trial_loop.thisIndex'
p5200
g59
(g98
S'o\x00\x00\x00'
tRp5201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5202
I0
sg3641
g4205
sS'block_loop.thisRepN'
p5203
I1
sg3644
g4207
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5204
I1
sg3646
g4201
sg55
g11
sS'block_loop.thisTrial'
p5205
Nsg69
Vy
sS'block_loop.thisTrialN'
p5206
I0
sg39
F1.13387737600533
sg34
g752
(S'\x07\xdf\t\x19\r\x08"\x0cPX'
tRp5207
sa(dp5208
S'trial_loop.thisTrialN'
p5209
I112
sg3632
g4641
sS'block_loop.thisIndex'
p5210
g3626
sg38
S'right'
p5211
sg58
g62
sS'trial_loop.thisN'
p5212
I112
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p5213
g59
(g98
S'p\x00\x00\x00'
tRp5214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5215
I0
sg3641
g4648
sS'block_loop.thisRepN'
p5216
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5217
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p5218
Nsg69
Vy
sS'block_loop.thisTrialN'
p5219
I0
sg39
F0.9168706066429877
sg34
g752
(S'\x07\xdf\t\x19\r\x08(\x0e\xc9('
tRp5220
sa(dp5221
S'trial_loop.thisTrialN'
p5222
I113
sg3632
g4829
sS'block_loop.thisIndex'
p5223
g3626
sg38
S'left'
p5224
sg58
g62
sS'trial_loop.thisN'
p5225
I113
sg33
g4026
sg63
g64
sS'trial_loop.thisIndex'
p5226
g59
(g98
S'q\x00\x00\x00'
tRp5227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5228
I0
sg3641
g4836
sS'block_loop.thisRepN'
p5229
I1
sg3644
g4026
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5230
I1
sg3646
g4033
sg55
g11
sS'block_loop.thisTrial'
p5231
Nsg69
Vy
sS'block_loop.thisTrialN'
p5232
I0
sg39
F0.86684506187702937
sg34
g752
(S'\x07\xdf\t\x19\r\x08.\x0e,\xe8'
tRp5233
sa(dp5234
S'trial_loop.thisTrialN'
p5235
I114
sg3632
g3941
sS'block_loop.thisIndex'
p5236
g3626
sg38
S'right'
p5237
sg58
g62
sS'trial_loop.thisN'
p5238
I114
sg33
g3951
sg63
g64
sS'trial_loop.thisIndex'
p5239
g59
(g98
S'r\x00\x00\x00'
tRp5240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5241
I0
sg3641
g3949
sS'block_loop.thisRepN'
p5242
I1
sg3644
g3951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5243
I1
sg3646
g3945
sg55
g11
sS'block_loop.thisTrial'
p5244
Nsg69
Vy
sS'block_loop.thisTrialN'
p5245
I0
sg39
F0.88343262340094952
sg34
g752
(S'\x07\xdf\t\x19\r\x084\x0c\x96\xa8'
tRp5246
sa(dp5247
S'trial_loop.thisTrialN'
p5248
I115
sg3632
g4007
sS'block_loop.thisIndex'
p5249
g3626
sg38
S'right'
p5250
sg58
g62
sS'trial_loop.thisN'
p5251
I115
sg33
g3962
sg63
g64
sS'trial_loop.thisIndex'
p5252
g59
(g98
S's\x00\x00\x00'
tRp5253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5254
I0
sg3641
g4014
sS'block_loop.thisRepN'
p5255
I1
sg3644
g3962
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5256
I1
sg3646
g3969
sg55
g11
sS'block_loop.thisTrial'
p5257
Nsg69
Vy
sS'block_loop.thisTrialN'
p5258
I0
sg39
F0.8501149514431745
sg34
g752
(S'\x07\xdf\t\x19\r\x08:\x0bB\xd0'
tRp5259
sa(dp5260
S'trial_loop.thisTrialN'
p5261
I116
sg3632
S'10-bounty_redo.png'
p5262
sS'block_loop.thisIndex'
p5263
g3626
sg38
S'left'
p5264
sg58
g62
sS'trial_loop.thisN'
p5265
I116
sg33
g3723
sg63
g64
sS'trial_loop.thisIndex'
p5266
g59
(g98
S't\x00\x00\x00'
tRp5267
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5268
I0
sg3641
S'4-corn.png'
p5269
sS'block_loop.thisRepN'
p5270
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5271
I1
sg3646
g3730
sg55
g11
sS'block_loop.thisTrial'
p5272
Nsg69
Vy
sS'block_loop.thisTrialN'
p5273
I0
sg39
F0.83344328605926421
sg34
g752
(S'\x07\xdf\t\x19\r\t\x04\tq\xf8'
tRp5274
sa(dp5275
S'trial_loop.thisTrialN'
p5276
I117
sg3632
g4600
sS'block_loop.thisIndex'
p5277
g3626
sg38
S'right'
p5278
sg58
g62
sS'trial_loop.thisN'
p5279
I117
sg33
g3840
sg63
g64
sS'trial_loop.thisIndex'
p5280
g59
(g98
S'u\x00\x00\x00'
tRp5281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5282
I0
sg3641
g4607
sS'block_loop.thisRepN'
p5283
I1
sg3644
g3840
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5284
I1
sg3646
g3847
sg55
g11
sS'block_loop.thisTrial'
p5285
Nsg69
Vy
sS'block_loop.thisTrialN'
p5286
I0
sg39
F0.85054744483932154
sg34
g752
(S'\x07\xdf\t\x19\r\t\n\x07f\x88'
tRp5287
sa(dp5288
S'trial_loop.thisTrialN'
p5289
I118
sg3632
g4445
sS'block_loop.thisIndex'
p5290
g3626
sg38
S'right'
p5291
sg58
g62
sS'trial_loop.thisN'
p5292
I118
sg33
g4449
sg63
g64
sS'trial_loop.thisIndex'
p5293
g59
(g98
S'v\x00\x00\x00'
tRp5294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5295
I0
sg3641
g4453
sS'block_loop.thisRepN'
p5296
I1
sg3644
g4449
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5297
I1
sg3646
g4456
sg55
g11
sS'block_loop.thisTrial'
p5298
Nsg69
Vy
sS'block_loop.thisTrialN'
p5299
I0
sg39
F0.88326612627315626
sg34
g752
(S'\x07\xdf\t\x19\r\t\x10\x05\x95\xb0'
tRp5300
sa(dp5301
S'trial_loop.thisTrialN'
p5302
I119
sg3632
g4268
sS'block_loop.thisIndex'
p5303
g3626
sg38
S'left'
p5304
sg58
g62
sS'trial_loop.thisN'
p5305
I119
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p5306
g59
(g98
S'w\x00\x00\x00'
tRp5307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5308
I0
sg3641
g4275
sS'block_loop.thisRepN'
p5309
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5310
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p5311
Nsg69
Vy
sS'block_loop.thisTrialN'
p5312
I0
sg39
F0.71679408638738096
sg34
g752
(S'\x07\xdf\t\x19\r\t\x16\x04|p'
tRp5313
sa(dp5314
S'trial_loop.thisTrialN'
p5315
I120
sg3632
g4488
sS'block_loop.thisIndex'
p5316
g3626
sg38
S'left'
p5317
sg58
g62
sS'trial_loop.thisN'
p5318
I120
sg33
g3763
sg63
g64
sS'trial_loop.thisIndex'
p5319
g59
(g98
S'x\x00\x00\x00'
tRp5320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5321
I0
sg3641
g4495
sS'block_loop.thisRepN'
p5322
I1
sg3644
g3763
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5323
I1
sg3646
g3757
sg55
g11
sS'block_loop.thisTrial'
p5324
Nsg69
Vy
sS'block_loop.thisTrialN'
p5325
I0
sg39
F0.96682202597366995
sg34
g752
(S'\x07\xdf\t\x19\r\t\x1c\x00\x88\xb8'
tRp5326
sa(dp5327
S'trial_loop.thisTrialN'
p5328
I121
sg3632
g4529
sS'block_loop.thisIndex'
p5329
g3626
sg38
S'left'
p5330
sg58
g62
sS'trial_loop.thisN'
p5331
I121
sg33
g3994
sg63
g64
sS'trial_loop.thisIndex'
p5332
g59
(g98
S'y\x00\x00\x00'
tRp5333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5334
I0
sg3641
g4536
sS'block_loop.thisRepN'
p5335
I1
sg3644
g3994
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5336
I1
sg3646
g4001
sg55
g11
sS'block_loop.thisTrial'
p5337
Nsg69
Vy
sS'block_loop.thisTrialN'
p5338
I0
sg39
F0.80030351514324138
sg34
g752
(S'\x07\xdf\t\x19\r\t"\x00\xa0('
tRp5339
sa(dp5340
S'trial_loop.thisTrialN'
p5341
I122
sg3632
g3819
sS'block_loop.thisIndex'
p5342
g3626
sg38
S'left'
p5343
sg58
g62
sS'trial_loop.thisN'
p5344
I122
sg33
g3830
sg63
g64
sS'trial_loop.thisIndex'
p5345
g59
(g98
S'z\x00\x00\x00'
tRp5346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5347
I0
sg3641
g3827
sS'block_loop.thisRepN'
p5348
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5349
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p5350
Nsg69
Vy
sS'block_loop.thisTrialN'
p5351
I0
sg39
F0.70020196329642204
sg34
g752
(S"\x07\xdf\t\x19\r\t'\rY\xf8"
tRp5352
sa(dp5353
S'trial_loop.thisTrialN'
p5354
I123
sg3632
g3975
sS'block_loop.thisIndex'
p5355
g3626
sg38
S'right'
p5356
sg58
g62
sS'trial_loop.thisN'
p5357
I123
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5358
g59
(g98
S'{\x00\x00\x00'
tRp5359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5360
I0
sg3641
g3982
sS'block_loop.thisRepN'
p5361
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5362
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5363
Nsg69
Vy
sS'block_loop.thisTrialN'
p5364
I0
sg39
F0.85023583291877003
sg34
g752
(S"\x07\xdf\t\x19\r\t-\t'\xc0"
tRp5365
sa(dp5366
S'trial_loop.thisTrialN'
p5367
I124
sg3632
g3802
sS'block_loop.thisIndex'
p5368
g3626
sg38
S'right'
p5369
sg58
g62
sS'trial_loop.thisN'
p5370
I124
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p5371
g59
(g98
S'|\x00\x00\x00'
tRp5372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5373
I0
sg3641
g3810
sS'block_loop.thisRepN'
p5374
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5375
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p5376
Nsg69
Vy
sS'block_loop.thisTrialN'
p5377
I0
sg39
F0.91681786354456563
sg34
g752
(S'\x07\xdf\t\x19\r\t3\x07\x95h'
tRp5378
sa(dp5379
S'trial_loop.thisTrialN'
p5380
I125
sg3632
g4775
sS'block_loop.thisIndex'
p5381
g3626
sg38
S'left'
p5382
sg58
g62
sS'trial_loop.thisN'
p5383
I125
sg33
g4449
sg63
g64
sS'trial_loop.thisIndex'
p5384
g59
(g98
S'}\x00\x00\x00'
tRp5385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5386
I0
sg3641
g4782
sS'block_loop.thisRepN'
p5387
I1
sg3644
g4449
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5388
I1
sg3646
g4456
sg55
g11
sS'block_loop.thisTrial'
p5389
Nsg69
Vy
sS'block_loop.thisTrialN'
p5390
I0
sg39
F0.94983732318360126
sg34
g752
(S'\x07\xdf\t\x19\r\t9\x06\xba\xa8'
tRp5391
sa(dp5392
S'trial_loop.thisTrialN'
p5393
I126
sg3632
g3719
sS'block_loop.thisIndex'
p5394
g3626
sg38
S'right'
p5395
sg58
g62
sS'trial_loop.thisN'
p5396
I126
sg33
g3723
sg63
g64
sS'trial_loop.thisIndex'
p5397
g59
(g98
S'~\x00\x00\x00'
tRp5398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5399
I0
sg3641
g3727
sS'block_loop.thisRepN'
p5400
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5401
I1
sg3646
g3730
sg55
g11
sS'block_loop.thisTrial'
p5402
Nsg69
Vy
sS'block_loop.thisTrialN'
p5403
I0
sg39
F0.71680891147479997
sg34
g752
(S'\x07\xdf\t\x19\r\n\x03\x06U\x18'
tRp5404
sa(dp5405
S'trial_loop.thisTrialN'
p5406
I127
sg3632
g3670
sS'block_loop.thisIndex'
p5407
g3626
sg38
S'left'
p5408
sg58
g62
sS'trial_loop.thisN'
p5409
I127
sg33
g3680
sg63
g64
sS'trial_loop.thisIndex'
p5410
g59
(g98
S'\x7f\x00\x00\x00'
tRp5411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5412
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5413
I1
sg3644
g3680
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5414
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p5415
Nsg69
Vy
sS'block_loop.thisTrialN'
p5416
I0
sg39
F0.7833285056767636
sg34
g752
(S'\x07\xdf\t\x19\r\n\t\x02\x9f\xe0'
tRp5417
sa(dp5418
S'trial_loop.thisTrialN'
p5419
I128
sg3632
g3853
sS'block_loop.thisIndex'
p5420
g3626
sg38
S'right'
p5421
sg58
g62
sS'trial_loop.thisN'
p5422
I128
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5423
g59
(g98
S'\x80\x00\x00\x00'
tRp5424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5425
I0
sg3641
g3860
sS'block_loop.thisRepN'
p5426
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5427
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5428
Nsg69
Vy
sS'block_loop.thisTrialN'
p5429
I0
sg39
F0.68343507524332381
sg34
g752
(S'\x07\xdf\t\x19\r\n\x0e\x0f\x1f\x18'
tRp5430
sa(dp5431
S'trial_loop.thisTrialN'
p5432
I129
sg3632
g5078
sS'block_loop.thisIndex'
p5433
g3626
sg38
S'left'
p5434
sg58
g62
sS'trial_loop.thisN'
p5435
I129
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p5436
g59
(g98
S'\x81\x00\x00\x00'
tRp5437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5438
I0
sg3641
g5085
sS'block_loop.thisRepN'
p5439
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5440
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p5441
Nsg69
Vy
sS'block_loop.thisTrialN'
p5442
I0
sg39
F0.83352254325473041
sg34
g752
(S'\x07\xdf\t\x19\r\n\x14\n\xae`'
tRp5443
sa(dp5444
S'trial_loop.thisTrialN'
p5445
I130
sg3632
g3868
sS'block_loop.thisIndex'
p5446
g3626
sg38
S'right'
p5447
sg58
g62
sS'trial_loop.thisN'
p5448
I130
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p5449
g59
(g98
S'\x82\x00\x00\x00'
tRp5450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5451
I0
sg3641
g3876
sS'block_loop.thisRepN'
p5452
I1
sg3644
g3872
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5453
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p5454
Nsg69
Vy
sS'block_loop.thisTrialN'
p5455
I0
sg39
F0.76674522062057804
sg34
g752
(S'\x07\xdf\t\x19\r\n\x1a\x08\xa2\xf0'
tRp5456
sa(dp5457
S'trial_loop.thisTrialN'
p5458
I131
sg3632
g4775
sS'block_loop.thisIndex'
p5459
g3626
sg38
S'left'
p5460
sg58
g62
sS'trial_loop.thisN'
p5461
I131
sg33
g4456
sg63
g64
sS'trial_loop.thisIndex'
p5462
g59
(g98
S'\x83\x00\x00\x00'
tRp5463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5464
I0
sg3641
g4782
sS'block_loop.thisRepN'
p5465
I1
sg3644
g4449
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5466
I1
sg3646
g4456
sg55
g11
sS'block_loop.thisTrial'
p5467
Nsg69
Vy
sS'block_loop.thisTrialN'
p5468
I0
sg39
F0.69993340114888269
sg34
g752
(S'\x07\xdf\t\x19\r\n \x05\xa1h'
tRp5469
sa(dp5470
S'trial_loop.thisTrialN'
p5471
I132
sg3632
g3898
sS'block_loop.thisIndex'
p5472
g3626
sg38
S'right'
p5473
sg58
g62
sS'trial_loop.thisN'
p5474
I132
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p5475
g59
(g98
S'\x84\x00\x00\x00'
tRp5476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5477
I0
sg3641
g3906
sS'block_loop.thisRepN'
p5478
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5479
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p5480
Nsg69
Vy
sS'block_loop.thisTrialN'
p5481
I0
sg39
F0.61682567522620957
sg34
g752
(S'\x07\xdf\t\x19\r\n&\x01\xad\xb0'
tRp5482
sa(dp5483
S'trial_loop.thisTrialN'
p5484
I133
sg3632
g4488
sS'block_loop.thisIndex'
p5485
g3626
sg38
S'left'
p5486
sg58
g62
sS'trial_loop.thisN'
p5487
I133
sg33
g3763
sg63
g64
sS'trial_loop.thisIndex'
p5488
g59
(g98
S'\x85\x00\x00\x00'
tRp5489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5490
I0
sg3641
g4495
sS'block_loop.thisRepN'
p5491
I1
sg3644
g3763
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5492
I1
sg3646
g3757
sg55
g11
sS'block_loop.thisTrial'
p5493
Nsg69
Vy
sS'block_loop.thisTrialN'
p5494
I0
sg39
F0.68343450504835346
sg34
g752
(S'\x07\xdf\t\x19\r\n+\x0b\x8d\x08'
tRp5495
sa(dp5496
S'trial_loop.thisTrialN'
p5497
I134
sg3632
g4600
sS'block_loop.thisIndex'
p5498
g3626
sg38
S'right'
p5499
sg58
g62
sS'trial_loop.thisN'
p5500
I134
sg33
g3840
sg63
g64
sS'trial_loop.thisIndex'
p5501
g59
(g98
S'\x86\x00\x00\x00'
tRp5502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5503
I0
sg3641
g4607
sS'block_loop.thisRepN'
p5504
I1
sg3644
g3840
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5505
I1
sg3646
g3847
sg55
g11
sS'block_loop.thisTrial'
p5506
Nsg69
Vy
sS'block_loop.thisTrialN'
p5507
I0
sg39
F0.8668564657909883
sg34
g752
(S'\x07\xdf\t\x19\r\n1\x07 8'
tRp5508
sa(dp5509
S'trial_loop.thisTrialN'
p5510
I135
sg3632
g3633
sS'block_loop.thisIndex'
p5511
g3626
sg38
S'left'
p5512
sg58
g62
sS'trial_loop.thisN'
p5513
I135
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5514
g59
(g98
S'\x87\x00\x00\x00'
tRp5515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5516
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5517
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5518
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5519
Nsg69
Vy
sS'block_loop.thisTrialN'
p5520
I0
sg39
F0.6503027168691915
sg34
g752
(S'\x07\xdf\t\x19\r\n7\x05\xc8x'
tRp5521
sa(dp5522
S'trial_loop.thisTrialN'
p5523
I136
sg3632
g3687
sS'block_loop.thisIndex'
p5524
g3626
sg38
S'left'
p5525
sg58
g62
sS'trial_loop.thisN'
p5526
I136
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5527
g59
(g98
S'\x88\x00\x00\x00'
tRp5528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5529
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5530
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5531
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5532
Nsg69
Vy
sS'block_loop.thisTrialN'
p5533
I0
sg39
F0.84996213900922157
sg34
g752
(S'\x07\xdf\t\x19\r\x0b\x01\x00\xe2\x90'
tRp5534
sa(dp5535
S'trial_loop.thisTrialN'
p5536
I137
sg3632
g4488
sS'block_loop.thisIndex'
p5537
g3626
sg38
S'left'
p5538
sg58
g62
sS'trial_loop.thisN'
p5539
I137
sg33
g3763
sg63
g64
sS'trial_loop.thisIndex'
p5540
g59
(g98
S'\x89\x00\x00\x00'
tRp5541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5542
I0
sg3641
g4495
sS'block_loop.thisRepN'
p5543
I1
sg3644
g3763
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5544
I1
sg3646
g3757
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vy
sS'block_loop.thisTrialN'
p5546
I0
sg39
F0.71678211227845168
sg34
g752
(S'\x07\xdf\t\x19\r\x0b\x06\x0eS\xf8'
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g3941
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'right'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g3951
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g3949
sS'block_loop.thisRepN'
p5556
I1
sg3644
g3951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5557
I1
sg3646
g3945
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vy
sS'block_loop.thisTrialN'
p5559
I0
sg39
F0.96677184875625244
sg34
g752
(S'\x07\xdf\t\x19\r\x0b\x0c\n\x9a\xd8'
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g3853
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'right'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g3860
sS'block_loop.thisRepN'
p5569
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5570
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vy
sS'block_loop.thisTrialN'
p5572
I0
sg39
F0.75018132221521228
sg34
g752
(S'\x07\xdf\t\x19\r\x0b\x12\nw\xb0'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g5262
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'left'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g3723
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g5269
sS'block_loop.thisRepN'
p5582
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5583
I1
sg3646
g3730
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vy
sS'block_loop.thisTrialN'
p5585
I0
sg39
F0.7334375270838791
sg34
g752
(S'\x07\xdf\t\x19\r\x0b\x18\x077\xa8'
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g5078
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'left'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g5085
sS'block_loop.thisRepN'
p5595
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5596
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vy
sS'block_loop.thisTrialN'
p5598
I0
sg39
F1.2005628971419355
sg34
g752
(S'\x07\xdf\t\x19\r\x0b\x1e\x03\xbd\x08'
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g4445
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'right'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g4449
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g4453
sS'block_loop.thisRepN'
p5608
I1
sg3644
g4449
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5609
I1
sg3646
g4456
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vy
sS'block_loop.thisTrialN'
p5611
I0
sg39
F0.78319622028720914
sg34
g752
(S'\x07\xdf\t\x19\r\x0b$\x07+\xf0'
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g4760
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'left'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g4587
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g4767
sS'block_loop.thisRepN'
p5621
I1
sg3644
g4587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5622
I1
sg3646
g4594
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vy
sS'block_loop.thisTrialN'
p5624
I0
sg39
F0.70018913389503723
sg34
g752
(S'\x07\xdf\t\x19\r\x0b*\x04e\x00'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g3990
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'right'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g3994
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g3998
sS'block_loop.thisRepN'
p5634
I1
sg3644
g3994
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5635
I1
sg3646
g4001
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vy
sS'block_loop.thisTrialN'
p5637
I0
sg39
F0.85018879177914641
sg34
g752
(S'\x07\xdf\t\x19\r\x0b0\x00qH'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g4775
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'left'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g4449
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g4782
sS'block_loop.thisRepN'
p5647
I1
sg3644
g4449
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5648
I1
sg3646
g4456
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vy
sS'block_loop.thisTrialN'
p5650
I0
sg39
F0.93321640521207883
sg34
g752
(S'\x07\xdf\t\x19\r\x0b5\r\xe2\xb0'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g4641
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'right'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g4648
sS'block_loop.thisRepN'
p5660
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5661
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vy
sS'block_loop.thisTrialN'
p5663
I0
sg39
F0.73348513842211105
sg34
g752
(S'\x07\xdf\t\x19\r\x0b;\rFp'
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g4829
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'left'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g4033
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g4836
sS'block_loop.thisRepN'
p5673
I1
sg3644
g4026
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5674
I1
sg3646
g4033
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vy
sS'block_loop.thisTrialN'
p5676
I0
sg39
F1.0335406184567546
sg34
g752
(S'\x07\xdf\t\x19\r\x0c\x05\t\xcb\xd0'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g3687
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'left'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5686
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5687
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vy
sS'block_loop.thisTrialN'
p5689
I0
sg39
F0.61678718701841717
sg34
g752
(S'\x07\xdf\t\x19\r\x0c\x0b\n\xd5p'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g3941
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'right'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g3951
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g3949
sS'block_loop.thisRepN'
p5699
I1
sg3644
g3951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5700
I1
sg3646
g3945
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vy
sS'block_loop.thisTrialN'
p5702
I0
sg39
F0.65017356755379296
sg34
g752
(S'\x07\xdf\t\x19\r\x0c\x11\x05r\x88'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g3975
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'right'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g3982
sS'block_loop.thisRepN'
p5712
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5713
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vy
sS'block_loop.thisTrialN'
p5715
I0
sg39
F1.0501333117426839
sg34
g752
(S'\x07\xdf\t\x19\r\x0c\x17\x00\x8c\xa0'
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g3670
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'left'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g3680
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5725
I1
sg3644
g3680
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5726
I1
sg3646
g3674
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vy
sS'block_loop.thisTrialN'
p5728
I0
sg39
F0.65008148095876095
sg34
g752
(S'\x07\xdf\t\x19\r\x0c\x1d\x01\xd4\xc0'
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g3753
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'right'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g3761
sS'block_loop.thisRepN'
p5738
I1
sg3644
g3763
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5739
I1
sg3646
g3757
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vy
sS'block_loop.thisTrialN'
p5741
I0
sg39
F0.91676911181821197
sg34
g752
(S'\x07\xdf\t\x19\r\x0c"\x0c-0'
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g4227
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'left'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g3747
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g4234
sS'block_loop.thisRepN'
p5751
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5752
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vy
sS'block_loop.thisTrialN'
p5754
I0
sg39
F0.68346244463464245
sg34
g752
(S'\x07\xdf\t\x19\r\x0c(\x0b\x8d\x08'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g4022
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'right'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g4026
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g4030
sS'block_loop.thisRepN'
p5764
I1
sg3644
g4026
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5765
I1
sg3646
g4033
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vy
sS'block_loop.thisTrialN'
p5767
I0
sg39
F0.73344921609532321
sg34
g752
(S'\x07\xdf\t\x19\r\x0c.\x07 8'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g3836
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'left'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g3840
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g3844
sS'block_loop.thisRepN'
p5777
I1
sg3644
g3840
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5778
I1
sg3646
g3847
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vy
sS'block_loop.thisTrialN'
p5780
I0
sg39
F0.75011660500967992
sg34
g752
(S'\x07\xdf\t\x19\r\x0c4\x03\xa5\x98'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g4529
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'left'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g3994
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g4536
sS'block_loop.thisRepN'
p5790
I1
sg3644
g3994
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5791
I1
sg3646
g4001
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vy
sS'block_loop.thisTrialN'
p5793
I0
sg39
F0.75019443671408226
sg34
g752
(S'\x07\xdf\t\x19\r\x0c:\x00ix'
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g3836
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'left'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g3847
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g3844
sS'block_loop.thisRepN'
p5803
I1
sg3644
g3840
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5804
I1
sg3646
g3847
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vy
sS'block_loop.thisTrialN'
p5806
I0
sg39
F0.70013382491924858
sg34
g752
(S'\x07\xdf\t\x19\r\r\x03\x0c1\x18'
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g5078
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'left'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g5085
sS'block_loop.thisRepN'
p5816
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5817
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vy
sS'block_loop.thisTrialN'
p5819
I0
sg39
F0.66691223092493601
sg34
g752
(S'\x07\xdf\t\x19\r\r\t\x089x'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g4404
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'left'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g4411
sS'block_loop.thisRepN'
p5829
I1
sg3644
g3872
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5830
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vy
sS'block_loop.thisTrialN'
p5832
I0
sg39
F0.90054790099566162
sg34
g752
(S'\x07\xdf\t\x19\r\r\x0f\x03\x8e('
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g4775
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'left'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g4449
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g4782
sS'block_loop.thisRepN'
p5842
I1
sg3644
g4449
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5843
I1
sg3646
g4456
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vy
sS'block_loop.thisTrialN'
p5845
I0
sg39
F0.63321765964428778
sg34
g752
(S'\x07\xdf\t\x19\r\r\x15\x02\xb3h'
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g4197
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'right'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g4207
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g4205
sS'block_loop.thisRepN'
p5855
I1
sg3644
g4207
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5856
I1
sg3646
g4201
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vy
sS'block_loop.thisTrialN'
p5858
I0
sg39
F1.5502031607084064
sg34
g752
(S'\x07\xdf\t\x19\r\r\x1a\x0c\xd1@'
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g3958
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'left'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g3962
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g3966
sS'block_loop.thisRepN'
p5868
I1
sg3644
g3962
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5869
I1
sg3646
g3969
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vy
sS'block_loop.thisTrialN'
p5871
I0
sg39
F1.5667681995055318
sg34
g752
(S'\x07\xdf\t\x19\r\r!\x06tX'
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g4583
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'right'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g4594
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g4591
sS'block_loop.thisRepN'
p5881
I1
sg3644
g4587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5882
I1
sg3646
g4594
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vy
sS'block_loop.thisTrialN'
p5884
I0
sg39
F0.73344237374840304
sg34
g752
(S'\x07\xdf\t\x19\r\r(\x00U\xf0'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g3958
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'left'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g3962
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g3966
sS'block_loop.thisRepN'
p5894
I1
sg3644
g3962
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5895
I1
sg3646
g3969
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vy
sS'block_loop.thisTrialN'
p5897
I0
sg39
F0.70025955305936805
sg34
g752
(S'\x07\xdf\t\x19\r\r-\x0c\x1d\x90'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g4641
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'right'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g3823
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g4648
sS'block_loop.thisRepN'
p5907
I1
sg3644
g3823
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5908
I1
sg3646
g3830
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vy
sS'block_loop.thisTrialN'
p5910
I0
sg39
F0.75009778855383047
sg34
g752
(S'\x07\xdf\t\x19\r\r3\x07\xebX'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g5262
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'left'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g3723
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g5269
sS'block_loop.thisRepN'
p5920
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5921
I1
sg3646
g3730
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vy
sS'block_loop.thisTrialN'
p5923
I0
sg39
F0.66682499099078996
sg34
g752
(S'\x07\xdf\t\x19\r\r9\x04\xaf8'
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g4829
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'left'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g4026
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g4836
sS'block_loop.thisRepN'
p5933
I1
sg3644
g4026
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5934
I1
sg3646
g4033
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vy
sS'block_loop.thisTrialN'
p5936
I0
sg39
F1.0001351363680442
sg34
g752
(S'\x07\xdf\t\x19\r\x0e\x03\x00\x03\xe8'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g4583
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'right'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g4587
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g4591
sS'block_loop.thisRepN'
p5946
I1
sg3644
g4587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5947
I1
sg3646
g4594
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vy
sS'block_loop.thisTrialN'
p5949
I0
sg39
F0.80023395127318508
sg34
g752
(S'\x07\xdf\t\x19\r\x0e\t\x00\x94p'
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g4309
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'left'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g3951
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g4316
sS'block_loop.thisRepN'
p5959
I1
sg3644
g3951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5960
I1
sg3646
g3945
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vy
sS'block_loop.thisTrialN'
p5962
I0
sg39
F0.78344824676241842
sg34
g752
(S'\x07\xdf\t\x19\r\x0e\x0e\rN@'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g4022
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'right'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g4026
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g4030
sS'block_loop.thisRepN'
p5972
I1
sg3644
g4026
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5973
I1
sg3646
g4033
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vy
sS'block_loop.thisTrialN'
p5975
I0
sg39
F0.76722504025565286
sg34
g752
(S'\x07\xdf\t\x19\r\x0e\x14\n\x8b8'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g4350
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'left'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g4207
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g4357
sS'block_loop.thisRepN'
p5985
I1
sg3644
g4207
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5986
I1
sg3646
g4201
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vy
sS'block_loop.thisTrialN'
p5988
I0
sg39
F1.9668052052020357
sg34
g752
(S'\x07\xdf\t\x19\r\x0e\x1a\x07\x89\xb0'
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g4052
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'left'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g4059
sS'block_loop.thisRepN'
p5998
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5999
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vy
sS'block_loop.thisTrialN'
p6001
I0
sg39
F0.71674077309398854
sg34
g752
(S'\x07\xdf\t\x19\r\x0e!\x07^\xb8'
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g5078
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'left'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g3909
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g5085
sS'block_loop.thisRepN'
p6011
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6012
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vy
sS'block_loop.thisTrialN'
p6014
I0
sg39
F0.86679545485640119
sg34
g752
(S"\x07\xdf\t\x19\r\x0e'\x03\xa9\x80"
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g3990
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'right'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g4001
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g3998
sS'block_loop.thisRepN'
p6024
I1
sg3644
g3994
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6025
I1
sg3646
g4001
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vy
sS'block_loop.thisTrialN'
p6027
I0
sg39
F0.93349266500445083
sg34
g752
(S'\x07\xdf\t\x19\r\x0e-\x02\x13@'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g4404
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'left'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g4411
sS'block_loop.thisRepN'
p6037
I1
sg3644
g3872
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6038
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vy
sS'block_loop.thisTrialN'
p6040
I0
sg39
F0.68356336926262884
sg34
g752
(S'\x07\xdf\t\x19\r\x0e3\x01\xb1\x98'
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g4022
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'right'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g4026
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g4030
sS'block_loop.thisRepN'
p6050
I1
sg3644
g4026
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6051
I1
sg3646
g4033
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vy
sS'block_loop.thisTrialN'
p6053
I0
sg39
F0.8335462063732848
sg34
g752
(S'\x07\xdf\t\x19\r\x0e8\x0c\x87\x08'
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g3653
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'left'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g3661
sS'block_loop.thisRepN'
p6063
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6064
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vy
sS'block_loop.thisTrialN'
p6066
I0
sg39
F0.91683240353449946
sg34
g752
(S'\x07\xdf\t\x19\r\x0f\x02\nw\xb0'
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g4309
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'right'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g3951
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g4316
sS'block_loop.thisRepN'
p6076
I1
sg3644
g3951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6077
I1
sg3646
g3945
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vy
sS'block_loop.thisTrialN'
p6079
I0
sg39
F0.73350053370268142
sg34
g752
(S'\x07\xdf\t\x19\r\x0f\x08\t\x9c\xf0'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g3853
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'right'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g3860
sS'block_loop.thisRepN'
p6089
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6090
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vy
sS'block_loop.thisTrialN'
p6092
I0
sg39
F0.71679408638556197
sg34
g752
(S'\x07\xdf\t\x19\r\x0f\x0e\x06"P'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g4007
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'right'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g3969
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g4014
sS'block_loop.thisRepN'
p6102
I1
sg3644
g3962
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6103
I1
sg3646
g3969
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vy
sS'block_loop.thisTrialN'
p6105
I0
sg39
F0.96687277338605782
sg34
g752
(S'\x07\xdf\t\x19\r\x0f\x14\x02i0'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g3736
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'right'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g3744
sS'block_loop.thisRepN'
p6115
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6116
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vy
sS'block_loop.thisTrialN'
p6118
I0
sg39
F0.75050690392890829
sg34
g752
(S'\x07\xdf\t\x19\r\x0f\x1a\x02F\x08'
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g4350
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'left'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g4207
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g4357
sS'block_loop.thisRepN'
p6128
I1
sg3644
g4207
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6129
I1
sg3646
g4201
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vy
sS'block_loop.thisTrialN'
p6131
I0
sg39
F1.1168191179767746
sg34
g752
(S'\x07\xdf\t\x19\r\x0f\x1f\x0eH@'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g4760
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'left'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g4587
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g4767
sS'block_loop.thisRepN'
p6141
I1
sg3644
g4587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6142
I1
sg3646
g4594
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vy
sS'block_loop.thisTrialN'
p6144
I0
sg39
F0.81685258846118813
sg34
g752
(S'\x07\xdf\t\x19\r\x0f&\x01D8'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g3898
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'right'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g3906
sS'block_loop.thisRepN'
p6154
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6155
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vy
sS'block_loop.thisTrialN'
p6157
I0
sg39
F0.96677498483222735
sg34
g752
(S'\x07\xdf\t\x19\r\x0f+\x0e<\x88'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g4052
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'left'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g4059
sS'block_loop.thisRepN'
p6167
I1
sg3644
g3806
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6168
I1
sg3646
g3813
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vy
sS'block_loop.thisTrialN'
p6170
I0
sg39
F0.7167476154409087
sg34
g752
(S'\x07\xdf\t\x19\r\x0f1\x0eS\xf8'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g5262
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'left'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g3723
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g5269
sS'block_loop.thisRepN'
p6180
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6181
I1
sg3646
g3730
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vy
sS'block_loop.thisTrialN'
p6183
I0
sg39
F1.1334656947474286
sg34
g752
(S'\x07\xdf\t\x19\r\x0f7\n`@'
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g4445
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'right'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g4449
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g4453
sS'block_loop.thisRepN'
p6193
I1
sg3644
g4449
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6194
I1
sg3646
g4456
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vy
sS'block_loop.thisTrialN'
p6196
I0
sg39
F1.3003174849345669
sg34
g752
(S'\x07\xdf\t\x19\r\x10\x01\r\x13\xa8'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g3868
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'right'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g3876
sS'block_loop.thisRepN'
p6206
I1
sg3644
g3872
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6207
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vy
sS'block_loop.thisTrialN'
p6209
I0
sg39
F1.3335333769719
sg34
g752
(S'\x07\xdf\t\x19\r\x10\x08\x02\xea\x18'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g4227
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'left'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g3747
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g4234
sS'block_loop.thisRepN'
p6219
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6220
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vy
sS'block_loop.thisTrialN'
p6222
I0
sg39
F1.3334595366359281
sg34
g752
(S'\x07\xdf\t\x19\r\x10\x0e\x08{\xe0'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g4404
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'left'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g3872
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g4411
sS'block_loop.thisRepN'
p6232
I1
sg3644
g3872
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6233
I1
sg3646
g3879
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vy
sS'block_loop.thisTrialN'
p6235
I0
sg39
F1.5667585061801219
sg34
g752
(S'\x07\xdf\t\x19\r\x10\x14\x0e\r\xa8'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g3787
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'right'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g3794
sS'block_loop.thisRepN'
p6245
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6246
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vy
sS'block_loop.thisTrialN'
p6248
I0
sg39
F2.5501227631229995
sg34
g752
(S'\x07\xdf\t\x19\r\x10\x1b\x07\xebX'
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g3736
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'right'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g3744
sS'block_loop.thisRepN'
p6258
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6259
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vy
sS'block_loop.thisTrialN'
p6261
I0
sg39
F1.1835493994694843
sg34
g752
(S'\x07\xdf\t\x19\r\x10#\x01\x8a\x88'
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g4350
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'left'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g4207
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g4357
sS'block_loop.thisRepN'
p6271
I1
sg3644
g4207
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6272
I1
sg3646
g4201
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vy
sS'block_loop.thisTrialN'
p6274
I0
sg39
F1.4001071397615306
sg34
g752
(S'\x07\xdf\t\x19\r\x10)\x04\xf5\x88'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g3633
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'left'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g3642
sS'block_loop.thisRepN'
p6284
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6285
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vy
sS'block_loop.thisTrialN'
p6287
I0
sg39
F1.3500587871712924
sg34
g752
(S'\x07\xdf\t\x19\r\x10/\x0b}h'
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g3653
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'left'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g3661
sS'block_loop.thisRepN'
p6297
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6298
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vy
sS'block_loop.thisTrialN'
p6300
I0
sg39
F1.3835021872710058
sg34
g752
(S'\x07\xdf\t\x19\r\x106\x02\x07\x88'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g3975
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'right'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g3982
sS'block_loop.thisRepN'
p6310
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6311
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vy
sS'block_loop.thisTrialN'
p6313
I0
sg39
F1.3667230400096742
sg34
g752
(S'\x07\xdf\t\x19\r\x11\x00\x08P\xe8'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g3770
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'right'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g3778
sS'block_loop.thisRepN'
p6323
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6324
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vy
sS'block_loop.thisTrialN'
p6326
I0
sg39
F1.1672566290944815
sg34
g752
(S'\x07\xdf\t\x19\r\x11\x06\x0e\x96`'
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g4583
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'right'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g4587
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g4591
sS'block_loop.thisRepN'
p6336
I1
sg3644
g4587
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6337
I1
sg3646
g4594
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vy
sS'block_loop.thisTrialN'
p6339
I0
sg39
F0.80010964862231049
sg34
g752
(S'\x07\xdf\t\x19\r\x11\r\x02F\x08'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g5262
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'left'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g3723
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g5269
sS'block_loop.thisRepN'
p6349
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6350
I1
sg3646
g3730
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vy
sS'block_loop.thisTrialN'
p6352
I0
sg39
F0.96676187033335736
sg34
g752
(S'\x07\xdf\t\x19\r\x11\x12\x0f\x03\xc0'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F37.249254754291542
sg56
Vl
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vy
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vl
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vy
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'29-beans.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'left'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'46-pistachios.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'46-pistachios.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
S'29-beans.png'
p6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vy
sS'block_loop.thisTrialN'
p6387
I0
sg39
F1.0000926567936403
sg34
g752
(S'\x07\xdf\t\x19\r\x12\x07\x04\x0f\x10'
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'50-polo.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'left'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'50-polo.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'48-twix.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6401
I2
sg6385
S'48-twix.png'
p6402
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vy
sS'block_loop.thisTrialN'
p6404
I0
sg39
F0.80017636151387705
sg34
g752
(S'\x07\xdf\t\x19\r\x12\r\x04\x9f\x98'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'23-crunchie_redo.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'right'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'23-crunchie_redo.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'33-ambrosia_rice.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
S'33-ambrosia_rice.png'
p6418
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6419
I2
sg6385
g6412
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vy
sS'block_loop.thisTrialN'
p6421
I0
sg39
F0.96677384444046766
sg34
g752
(S'\x07\xdf\t\x19\r\x12\x13\x02\x1b\x10'
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
S'27-hartleys_raspberries_jelly.png'
p6425
sS'block_loop.thisIndex'
p6426
g6364
sg38
S'left'
p6427
sg58
g62
sS'trial_loop.thisN'
p6428
I3
sg33
S'27-hartleys_raspberries_jelly.png'
p6429
sg63
g64
sS'trial_loop.thisIndex'
p6430
g59
(g98
S'\x03\x00\x00\x00'
tRp6431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6432
I0
sg6379
S'51-mars.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6435
I2
sg6385
S'51-mars.png'
p6436
sg55
g11
sS'block_loop.thisTrial'
p6437
Nsg69
Vy
sS'block_loop.thisTrialN'
p6438
I0
sg39
F0.61682111366098979
sg34
g752
(S'\x07\xdf\t\x19\r\x12\x19\x01\xf4\x00'
tRp6439
sa(dp6440
S'trial_loop.thisTrialN'
p6441
I4
sg6370
S'20-fruit_pastilles.png'
p6442
sS'block_loop.thisIndex'
p6443
g6364
sg38
S'left'
p6444
sg58
g62
sS'trial_loop.thisN'
p6445
I4
sg33
S'20-fruit_pastilles.png'
p6446
sg63
g64
sS'trial_loop.thisIndex'
p6447
g59
(g98
S'\x04\x00\x00\x00'
tRp6448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6449
I0
sg6379
S'2-steamed_puddings.png'
p6450
sS'block_loop.thisRepN'
p6451
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6452
I2
sg6385
S'2-steamed_puddings.png'
p6453
sg55
g11
sS'block_loop.thisTrial'
p6454
Nsg69
Vy
sS'block_loop.thisTrialN'
p6455
I0
sg39
F0.63354409665043931
sg34
g752
(S'\x07\xdf\t\x19\r\x12\x1e\x0c\x11\xd8'
tRp6456
sa(dp6457
S'trial_loop.thisTrialN'
p6458
I5
sg6370
S'7-olives.png'
p6459
sS'block_loop.thisIndex'
p6460
g6364
sg38
S'left'
p6461
sg58
g62
sS'trial_loop.thisN'
p6462
I5
sg33
S'7-olives.png'
p6463
sg63
g64
sS'trial_loop.thisIndex'
p6464
g59
(g98
S'\x05\x00\x00\x00'
tRp6465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6466
I0
sg6379
S'22-daim.png'
p6467
sS'block_loop.thisRepN'
p6468
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6469
I2
sg6385
S'22-daim.png'
p6470
sg55
g11
sS'block_loop.thisTrial'
p6471
Nsg69
Vy
sS'block_loop.thisTrialN'
p6472
I0
sg39
F0.75019529200835677
sg34
g752
(S'\x07\xdf\t\x19\r\x12$\x06\xedp'
tRp6473
sa(dp6474
S'trial_loop.thisTrialN'
p6475
I6
sg6370
S'36-fig_rolls.png'
p6476
sS'block_loop.thisIndex'
p6477
g6364
sg38
S'left'
p6478
sg58
g62
sS'trial_loop.thisN'
p6479
I6
sg33
S'36-fig_rolls.png'
p6480
sg63
g64
sS'trial_loop.thisIndex'
p6481
g59
(g98
S'\x06\x00\x00\x00'
tRp6482
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6483
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p6484
sS'block_loop.thisRepN'
p6485
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6486
I2
sg6385
S'34-hula_hoops_bbq_beef_redo.png'
p6487
sg55
g11
sS'block_loop.thisTrial'
p6488
Nsg69
Vy
sS'block_loop.thisTrialN'
p6489
I0
sg39
F0.78353947806499491
sg34
g752
(S'\x07\xdf\t\x19\r\x12*\x03\xadh'
tRp6490
sa(dp6491
S'trial_loop.thisTrialN'
p6492
I7
sg6370
S'2-steamed_puddings.png'
p6493
sS'block_loop.thisIndex'
p6494
g6364
sg38
S'right'
p6495
sg58
g62
sS'trial_loop.thisN'
p6496
I7
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p6497
g59
(g98
S'\x07\x00\x00\x00'
tRp6498
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6499
I0
sg6379
S'20-fruit_pastilles.png'
p6500
sS'block_loop.thisRepN'
p6501
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6502
I2
sg6385
g6453
sg55
g11
sS'block_loop.thisTrial'
p6503
Nsg69
Vy
sS'block_loop.thisTrialN'
p6504
I0
sg39
F0.95012299120026
sg34
g752
(S'\x07\xdf\t\x19\r\x120\x00\xab\xe0'
tRp6505
sa(dp6506
S'trial_loop.thisTrialN'
p6507
I8
sg6370
S'48-twix.png'
p6508
sS'block_loop.thisIndex'
p6509
g6364
sg38
S'right'
p6510
sg58
g62
sS'trial_loop.thisN'
p6511
I8
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6512
g59
(g98
S'\x08\x00\x00\x00'
tRp6513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6514
I0
sg6379
S'50-polo.png'
p6515
sS'block_loop.thisRepN'
p6516
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6517
I2
sg6385
g6402
sg55
g11
sS'block_loop.thisTrial'
p6518
Nsg69
Vy
sS'block_loop.thisTrialN'
p6519
I0
sg39
F0.90011540759769559
sg34
g752
(S'\x07\xdf\t\x19\r\x126\x00\x88\xb8'
tRp6520
sa(dp6521
S'trial_loop.thisTrialN'
p6522
I9
sg6370
g6476
sS'block_loop.thisIndex'
p6523
g6364
sg38
S'left'
p6524
sg58
g62
sS'trial_loop.thisN'
p6525
I9
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p6526
g59
(g98
S'\t\x00\x00\x00'
tRp6527
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6528
I0
sg6379
g6484
sS'block_loop.thisRepN'
p6529
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6530
I2
sg6385
g6487
sg55
g11
sS'block_loop.thisTrial'
p6531
Nsg69
Vy
sS'block_loop.thisTrialN'
p6532
I0
sg39
F0.68343878151426907
sg34
g752
(S'\x07\xdf\t\x19\r\x12;\x0e\xb1\xb8'
tRp6533
sa(dp6534
S'trial_loop.thisTrialN'
p6535
I10
sg6370
S'30-spaghetti_hoops.png'
p6536
sS'block_loop.thisIndex'
p6537
g6364
sg38
S'right'
p6538
sg58
g62
sS'trial_loop.thisN'
p6539
I10
sg33
S'19-caramello_redo.png'
p6540
sg63
g64
sS'trial_loop.thisIndex'
p6541
g59
(g98
S'\n\x00\x00\x00'
tRp6542
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6543
I0
sg6379
S'19-caramello_redo.png'
p6544
sS'block_loop.thisRepN'
p6545
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6546
I2
sg6385
S'30-spaghetti_hoops.png'
p6547
sg55
g11
sS'block_loop.thisTrial'
p6548
Nsg69
Vy
sS'block_loop.thisTrialN'
p6549
I0
sg39
F0.71685566751693841
sg34
g752
(S'\x07\xdf\t\x19\r\x13\x05\n\x7f\x80'
tRp6550
sa(dp6551
S'trial_loop.thisTrialN'
p6552
I11
sg6370
S'16-skips_prawn.png'
p6553
sS'block_loop.thisIndex'
p6554
g6364
sg38
S'right'
p6555
sg58
g62
sS'trial_loop.thisN'
p6556
I11
sg33
S'42-mrkipling_lemon_slices.png'
p6557
sg63
g64
sS'trial_loop.thisIndex'
p6558
g59
(g98
S'\x0b\x00\x00\x00'
tRp6559
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6560
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p6561
sS'block_loop.thisRepN'
p6562
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6563
I2
sg6385
S'16-skips_prawn.png'
p6564
sg55
g11
sS'block_loop.thisTrial'
p6565
Nsg69
Vy
sS'block_loop.thisTrialN'
p6566
I0
sg39
F0.86717691574449418
sg34
g752
(S'\x07\xdf\t\x19\r\x13\x0b\x06\x8b\xc8'
tRp6567
sa(dp6568
S'trial_loop.thisTrialN'
p6569
I12
sg6370
S'45-chewy_nougat_redo.png'
p6570
sS'block_loop.thisIndex'
p6571
g6364
sg38
S'right'
p6572
sg58
g62
sS'trial_loop.thisN'
p6573
I12
sg33
S'41-peanuts_redo.png'
p6574
sg63
g64
sS'trial_loop.thisIndex'
p6575
g59
(g98
S'\x0c\x00\x00\x00'
tRp6576
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6577
I0
sg6379
S'41-peanuts_redo.png'
p6578
sS'block_loop.thisRepN'
p6579
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6580
I2
sg6385
S'45-chewy_nougat_redo.png'
p6581
sg55
g11
sS'block_loop.thisTrial'
p6582
Nsg69
Vy
sS'block_loop.thisTrialN'
p6583
I0
sg39
F0.73355042582079477
sg34
g752
(S'\x07\xdf\t\x19\r\x13\x11\x054\x08'
tRp6584
sa(dp6585
S'trial_loop.thisTrialN'
p6586
I13
sg6370
S'33-ambrosia_rice.png'
p6587
sS'block_loop.thisIndex'
p6588
g6364
sg38
S'left'
p6589
sg58
g62
sS'trial_loop.thisN'
p6590
I13
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p6591
g59
(g98
S'\r\x00\x00\x00'
tRp6592
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6593
I0
sg6379
S'23-crunchie_redo.png'
p6594
sS'block_loop.thisRepN'
p6595
I2
sg6382
g6418
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6596
I2
sg6385
g6412
sg55
g11
sS'block_loop.thisTrial'
p6597
Nsg69
Vy
sS'block_loop.thisTrialN'
p6598
I0
sg39
F0.70014893510233378
sg34
g752
(S'\x07\xdf\t\x19\r\x13\x17\x01~\xd0'
tRp6599
sa(dp6600
S'trial_loop.thisTrialN'
p6601
I14
sg6370
S'4-corn.png'
p6602
sS'block_loop.thisIndex'
p6603
g6364
sg38
S'right'
p6604
sg58
g62
sS'trial_loop.thisN'
p6605
I14
sg33
S'10-bounty_redo.png'
p6606
sg63
g64
sS'trial_loop.thisIndex'
p6607
g59
(g98
S'\x0e\x00\x00\x00'
tRp6608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6609
I0
sg6379
S'10-bounty_redo.png'
p6610
sS'block_loop.thisRepN'
p6611
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6612
I2
sg6385
S'4-corn.png'
p6613
sg55
g11
sS'block_loop.thisTrial'
p6614
Nsg69
Vy
sS'block_loop.thisTrialN'
p6615
I0
sg39
F0.73353132426746015
sg34
g752
(S'\x07\xdf\t\x19\r\x13\x1c\x0c\xc9p'
tRp6616
sa(dp6617
S'trial_loop.thisTrialN'
p6618
I15
sg6370
g6493
sS'block_loop.thisIndex'
p6619
g6364
sg38
S'right'
p6620
sg58
g62
sS'trial_loop.thisN'
p6621
I15
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p6622
g59
(g98
S'\x0f\x00\x00\x00'
tRp6623
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6624
I0
sg6379
g6500
sS'block_loop.thisRepN'
p6625
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6626
I2
sg6385
g6453
sg55
g11
sS'block_loop.thisTrial'
p6627
Nsg69
Vy
sS'block_loop.thisTrialN'
p6628
I0
sg39
F0.73352077564777574
sg34
g752
(S'\x07\xdf\t\x19\r\x13"\t\x148'
tRp6629
sa(dp6630
S'trial_loop.thisTrialN'
p6631
I16
sg6370
S'43-mrporky_pork_crackles_redo.png'
p6632
sS'block_loop.thisIndex'
p6633
g6364
sg38
S'right'
p6634
sg58
g62
sS'trial_loop.thisN'
p6635
I16
sg33
S'43-mrporky_pork_crackles_redo.png'
p6636
sg63
g64
sS'trial_loop.thisIndex'
p6637
g59
(g98
S'\x10\x00\x00\x00'
tRp6638
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6639
I0
sg6379
S'18-mms.png'
p6640
sS'block_loop.thisRepN'
p6641
I2
sg6382
S'18-mms.png'
p6642
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6643
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p6644
Nsg69
Vy
sS'block_loop.thisTrialN'
p6645
I0
sg39
F1.0001128987387347
sg34
g752
(S'\x07\xdf\t\x19\r\x13(\x05\x99\x98'
tRp6646
sa(dp6647
S'trial_loop.thisTrialN'
p6648
I17
sg6370
S'42-mrkipling_lemon_slices.png'
p6649
sS'block_loop.thisIndex'
p6650
g6364
sg38
S'left'
p6651
sg58
g62
sS'trial_loop.thisN'
p6652
I17
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p6653
g59
(g98
S'\x11\x00\x00\x00'
tRp6654
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6655
I0
sg6379
S'16-skips_prawn.png'
p6656
sS'block_loop.thisRepN'
p6657
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6658
I2
sg6385
g6564
sg55
g11
sS'block_loop.thisTrial'
p6659
Nsg69
Vy
sS'block_loop.thisTrialN'
p6660
I0
sg39
F0.66676169927450246
sg34
g752
(S'\x07\xdf\t\x19\r\x13.\x06* '
tRp6661
sa(dp6662
S'trial_loop.thisTrialN'
p6663
I18
sg6370
S'17-jacobs_mini_cheddars_redo.png'
p6664
sS'block_loop.thisIndex'
p6665
g6364
sg38
S'left'
p6666
sg58
g62
sS'trial_loop.thisN'
p6667
I18
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6668
sg63
g64
sS'trial_loop.thisIndex'
p6669
g59
(g98
S'\x12\x00\x00\x00'
tRp6670
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6671
I0
sg6379
S'8-liquorice_catherine_wheels.png'
p6672
sS'block_loop.thisRepN'
p6673
I2
sg6382
g6668
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6674
I2
sg6385
S'8-liquorice_catherine_wheels.png'
p6675
sg55
g11
sS'block_loop.thisTrial'
p6676
Nsg69
Vy
sS'block_loop.thisTrialN'
p6677
I0
sg39
F0.73344151845412853
sg34
g752
(S'\x07\xdf\t\x19\r\x134\x01~\xd0'
tRp6678
sa(dp6679
S'trial_loop.thisTrialN'
p6680
I19
sg6370
S'25-kitkat.png'
p6681
sS'block_loop.thisIndex'
p6682
g6364
sg38
S'left'
p6683
sg58
g62
sS'trial_loop.thisN'
p6684
I19
sg33
S'25-kitkat.png'
p6685
sg63
g64
sS'trial_loop.thisIndex'
p6686
g59
(g98
S'\x13\x00\x00\x00'
tRp6687
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6688
I0
sg6379
S'31-hobnobs.png'
p6689
sS'block_loop.thisRepN'
p6690
I2
sg6382
g6685
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6691
I2
sg6385
S'31-hobnobs.png'
p6692
sg55
g11
sS'block_loop.thisTrial'
p6693
Nsg69
Vy
sS'block_loop.thisTrialN'
p6694
I0
sg39
F0.85012350437682471
sg34
g752
(S'\x07\xdf\t\x19\r\x139\rFp'
tRp6695
sa(dp6696
S'trial_loop.thisTrialN'
p6697
I20
sg6370
S'40-sardines.png'
p6698
sS'block_loop.thisIndex'
p6699
g6364
sg38
S'right'
p6700
sg58
g62
sS'trial_loop.thisN'
p6701
I20
sg33
S'5-pineapple.png'
p6702
sg63
g64
sS'trial_loop.thisIndex'
p6703
g59
(g98
S'\x14\x00\x00\x00'
tRp6704
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6705
I0
sg6379
S'5-pineapple.png'
p6706
sS'block_loop.thisRepN'
p6707
I2
sg6382
g6702
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6708
I2
sg6385
S'40-sardines.png'
p6709
sg55
g11
sS'block_loop.thisTrial'
p6710
Nsg69
Vy
sS'block_loop.thisTrialN'
p6711
I0
sg39
F1.6667471592845686
sg34
g752
(S'\x07\xdf\t\x19\r\x14\x03\x0bu\x98'
tRp6712
sa(dp6713
S'trial_loop.thisTrialN'
p6714
I21
sg6370
S'6-sour_patch_kids.png'
p6715
sS'block_loop.thisIndex'
p6716
g6364
sg38
S'right'
p6717
sg58
g62
sS'trial_loop.thisN'
p6718
I21
sg33
S'38-maltesers.png'
p6719
sg63
g64
sS'trial_loop.thisIndex'
p6720
g59
(g98
S'\x15\x00\x00\x00'
tRp6721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6722
I0
sg6379
S'38-maltesers.png'
p6723
sS'block_loop.thisRepN'
p6724
I2
sg6382
g6719
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6725
I2
sg6385
S'6-sour_patch_kids.png'
p6726
sg55
g11
sS'block_loop.thisTrial'
p6727
Nsg69
Vy
sS'block_loop.thisTrialN'
p6728
I0
sg39
F0.91649513280935935
sg34
g752
(S'\x07\xdf\t\x19\r\x14\n\x06\xc6`'
tRp6729
sa(dp6730
S'trial_loop.thisTrialN'
p6731
I22
sg6370
S'5-pineapple.png'
p6732
sS'block_loop.thisIndex'
p6733
g6364
sg38
S'left'
p6734
sg58
g62
sS'trial_loop.thisN'
p6735
I22
sg33
g6702
sg63
g64
sS'trial_loop.thisIndex'
p6736
g59
(g98
S'\x16\x00\x00\x00'
tRp6737
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6738
I0
sg6379
S'40-sardines.png'
p6739
sS'block_loop.thisRepN'
p6740
I2
sg6382
g6702
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6741
I2
sg6385
g6709
sg55
g11
sS'block_loop.thisTrial'
p6742
Nsg69
Vy
sS'block_loop.thisTrialN'
p6743
I0
sg39
F0.95021393740717031
sg34
g752
(S'\x07\xdf\t\x19\r\x14\x10\x06&8'
tRp6744
sa(dp6745
S'trial_loop.thisTrialN'
p6746
I23
sg6370
g6553
sS'block_loop.thisIndex'
p6747
g6364
sg38
S'right'
p6748
sg58
g62
sS'trial_loop.thisN'
p6749
I23
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p6750
g59
(g98
S'\x17\x00\x00\x00'
tRp6751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6752
I0
sg6379
g6561
sS'block_loop.thisRepN'
p6753
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6754
I2
sg6385
g6564
sg55
g11
sS'block_loop.thisTrial'
p6755
Nsg69
Vy
sS'block_loop.thisTrialN'
p6756
I0
sg39
F1.0333698448612267
sg34
g752
(S'\x07\xdf\t\x19\r\x14\x16\x05\xc4\x90'
tRp6757
sa(dp6758
S'trial_loop.thisTrialN'
p6759
I24
sg6370
S'8-liquorice_catherine_wheels.png'
p6760
sS'block_loop.thisIndex'
p6761
g6364
sg38
S'right'
p6762
sg58
g62
sS'trial_loop.thisN'
p6763
I24
sg33
g6675
sg63
g64
sS'trial_loop.thisIndex'
p6764
g59
(g98
S'\x18\x00\x00\x00'
tRp6765
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6766
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p6767
sS'block_loop.thisRepN'
p6768
I2
sg6382
g6668
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6769
I2
sg6385
g6675
sg55
g11
sS'block_loop.thisTrial'
p6770
Nsg69
Vy
sS'block_loop.thisTrialN'
p6771
I0
sg39
F0.90010856525259442
sg34
g752
(S'\x07\xdf\t\x19\r\x14\x1c\x06\xce0'
tRp6772
sa(dp6773
S'trial_loop.thisTrialN'
p6774
I25
sg6370
S'10-bounty_redo.png'
p6775
sS'block_loop.thisIndex'
p6776
g6364
sg38
S'left'
p6777
sg58
g62
sS'trial_loop.thisN'
p6778
I25
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p6779
g59
(g98
S'\x19\x00\x00\x00'
tRp6780
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6781
I0
sg6379
S'4-corn.png'
p6782
sS'block_loop.thisRepN'
p6783
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6784
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p6785
Nsg69
Vy
sS'block_loop.thisTrialN'
p6786
I0
sg39
F1.4500768053530919
sg34
g752
(S'\x07\xdf\t\x19\r\x14"\x05\xf3p'
tRp6787
sa(dp6788
S'trial_loop.thisTrialN'
p6789
I26
sg6370
g6408
sS'block_loop.thisIndex'
p6790
g6364
sg38
S'right'
p6791
sg58
g62
sS'trial_loop.thisN'
p6792
I26
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6793
g59
(g98
S'\x1a\x00\x00\x00'
tRp6794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6795
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6796
I2
sg6382
g6418
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6797
I2
sg6385
g6412
sg55
g11
sS'block_loop.thisTrial'
p6798
Nsg69
Vy
sS'block_loop.thisTrialN'
p6799
I0
sg39
F0.68345360660168808
sg34
g752
(S'\x07\xdf\t\x19\r\x14(\r/\x00'
tRp6800
sa(dp6801
S'trial_loop.thisTrialN'
p6802
I27
sg6370
S'13-mccoys_steak_crisps.png'
p6803
sS'block_loop.thisIndex'
p6804
g6364
sg38
S'right'
p6805
sg58
g62
sS'trial_loop.thisN'
p6806
I27
sg33
S'13-mccoys_steak_crisps.png'
p6807
sg63
g64
sS'trial_loop.thisIndex'
p6808
g59
(g98
S'\x1b\x00\x00\x00'
tRp6809
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6810
I0
sg6379
S'3-ellas_strawberries_apples.png'
p6811
sS'block_loop.thisRepN'
p6812
I2
sg6382
S'3-ellas_strawberries_apples.png'
p6813
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6814
I2
sg6385
g6807
sg55
g11
sS'block_loop.thisTrial'
p6815
Nsg69
Vy
sS'block_loop.thisTrialN'
p6816
I0
sg39
F1.0672571422710462
sg34
g752
(S'\x07\xdf\t\x19\r\x14.\x08\xfc\xc8'
tRp6817
sa(dp6818
S'trial_loop.thisTrialN'
p6819
I28
sg6370
g6587
sS'block_loop.thisIndex'
p6820
g6364
sg38
S'left'
p6821
sg58
g62
sS'trial_loop.thisN'
p6822
I28
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p6823
g59
(g98
S'\x1c\x00\x00\x00'
tRp6824
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6825
I0
sg6379
g6594
sS'block_loop.thisRepN'
p6826
I2
sg6382
g6418
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6827
I2
sg6385
g6412
sg55
g11
sS'block_loop.thisTrial'
p6828
Nsg69
Vy
sS'block_loop.thisTrialN'
p6829
I0
sg39
F0.68345674267766299
sg34
g752
(S'\x07\xdf\t\x19\r\x144\n\x83h'
tRp6830
sa(dp6831
S'trial_loop.thisTrialN'
p6832
I29
sg6370
S'26-walkers_smoky_bacon.png'
p6833
sS'block_loop.thisIndex'
p6834
g6364
sg38
S'right'
p6835
sg58
g62
sS'trial_loop.thisN'
p6836
I29
sg33
S'26-walkers_smoky_bacon.png'
p6837
sg63
g64
sS'trial_loop.thisIndex'
p6838
g59
(g98
S'\x1d\x00\x00\x00'
tRp6839
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6840
I0
sg6379
S'44-crunch.png'
p6841
sS'block_loop.thisRepN'
p6842
I2
sg6382
S'44-crunch.png'
p6843
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6844
I2
sg6385
g6837
sg55
g11
sS'block_loop.thisTrial'
p6845
Nsg69
Vy
sS'block_loop.thisTrialN'
p6846
I0
sg39
F0.76681136331535527
sg34
g752
(S'\x07\xdf\t\x19\r\x14:\x06\x12\xb0'
tRp6847
sa(dp6848
S'trial_loop.thisTrialN'
p6849
I30
sg6370
S'38-maltesers.png'
p6850
sS'block_loop.thisIndex'
p6851
g6364
sg38
S'left'
p6852
sg58
g62
sS'trial_loop.thisN'
p6853
I30
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p6854
g59
(g98
S'\x1e\x00\x00\x00'
tRp6855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6856
I0
sg6379
S'6-sour_patch_kids.png'
p6857
sS'block_loop.thisRepN'
p6858
I2
sg6382
g6719
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6859
I2
sg6385
g6726
sg55
g11
sS'block_loop.thisTrial'
p6860
Nsg69
Vy
sS'block_loop.thisTrialN'
p6861
I0
sg39
F0.69995877485416713
sg34
g752
(S'\x07\xdf\t\x19\r\x15\x04\x03\x11('
tRp6862
sa(dp6863
S'trial_loop.thisTrialN'
p6864
I31
sg6370
S'35-raisins.png'
p6865
sS'block_loop.thisIndex'
p6866
g6364
sg38
S'left'
p6867
sg58
g62
sS'trial_loop.thisN'
p6868
I31
sg33
S'35-raisins.png'
p6869
sg63
g64
sS'trial_loop.thisIndex'
p6870
g59
(g98
S'\x1f\x00\x00\x00'
tRp6871
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6872
I0
sg6379
S'49-yorkie.png'
p6873
sS'block_loop.thisRepN'
p6874
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6875
I2
sg6385
S'49-yorkie.png'
p6876
sg55
g11
sS'block_loop.thisTrial'
p6877
Nsg69
Vy
sS'block_loop.thisTrialN'
p6878
I0
sg39
F0.73323054606407823
sg34
g752
(S'\x07\xdf\t\x19\r\x15\t\x0e%\x18'
tRp6879
sa(dp6880
S'trial_loop.thisTrialN'
p6881
I32
sg6370
g6425
sS'block_loop.thisIndex'
p6882
g6364
sg38
S'left'
p6883
sg58
g62
sS'trial_loop.thisN'
p6884
I32
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6885
g59
(g98
S' \x00\x00\x00'
tRp6886
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6887
I0
sg6379
g6433
sS'block_loop.thisRepN'
p6888
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6889
I2
sg6385
g6436
sg55
g11
sS'block_loop.thisTrial'
p6890
Nsg69
Vy
sS'block_loop.thisTrialN'
p6891
I0
sg39
F0.65014591306498914
sg34
g752
(S'\x07\xdf\t\x19\r\x15\x0f\n\xaax'
tRp6892
sa(dp6893
S'trial_loop.thisTrialN'
p6894
I33
sg6370
g6459
sS'block_loop.thisIndex'
p6895
g6364
sg38
S'left'
p6896
sg58
g62
sS'trial_loop.thisN'
p6897
I33
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p6898
g59
(g98
S'!\x00\x00\x00'
tRp6899
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6900
I0
sg6379
g6467
sS'block_loop.thisRepN'
p6901
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6902
I2
sg6385
g6470
sg55
g11
sS'block_loop.thisTrial'
p6903
Nsg69
Vy
sS'block_loop.thisTrialN'
p6904
I0
sg39
F0.71686821182083804
sg34
g752
(S'\x07\xdf\t\x19\r\x15\x15\x05\xc0\xa8'
tRp6905
sa(dp6906
S'trial_loop.thisTrialN'
p6907
I34
sg6370
g6391
sS'block_loop.thisIndex'
p6908
g6364
sg38
S'left'
p6909
sg58
g62
sS'trial_loop.thisN'
p6910
I34
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6911
g59
(g98
S'"\x00\x00\x00'
tRp6912
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6913
I0
sg6379
g6399
sS'block_loop.thisRepN'
p6914
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6915
I2
sg6385
g6402
sg55
g11
sS'block_loop.thisTrial'
p6916
Nsg69
Vy
sS'block_loop.thisTrialN'
p6917
I0
sg39
F0.68348097599300672
sg34
g752
(S'\x07\xdf\t\x19\r\x15\x1b\x02\x07\x88'
tRp6918
sa(dp6919
S'trial_loop.thisTrialN'
p6920
I35
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p6921
sS'block_loop.thisIndex'
p6922
g6364
sg38
S'right'
p6923
sg58
g62
sS'trial_loop.thisN'
p6924
I35
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p6925
g59
(g98
S'#\x00\x00\x00'
tRp6926
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6927
I0
sg6379
S'36-fig_rolls.png'
p6928
sS'block_loop.thisRepN'
p6929
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6930
I2
sg6385
g6487
sg55
g11
sS'block_loop.thisTrial'
p6931
Nsg69
Vy
sS'block_loop.thisTrialN'
p6932
I0
sg39
F0.7834827435999614
sg34
g752
(S'\x07\xdf\t\x19\r\x15 \x0c\xdc\xf8'
tRp6933
sa(dp6934
S'trial_loop.thisTrialN'
p6935
I36
sg6370
S'46-pistachios.png'
p6936
sS'block_loop.thisIndex'
p6937
g6364
sg38
S'right'
p6938
sg58
g62
sS'trial_loop.thisN'
p6939
I36
sg33
g6383
sg63
g64
sS'trial_loop.thisIndex'
p6940
g59
(g98
S'$\x00\x00\x00'
tRp6941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6942
I0
sg6379
S'29-beans.png'
p6943
sS'block_loop.thisRepN'
p6944
I2
sg6382
g6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6945
I2
sg6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p6946
Nsg69
Vy
sS'block_loop.thisTrialN'
p6947
I0
sg39
F0.71686707142907835
sg34
g752
(S'\x07\xdf\t\x19\r\x15&\n\x19\xf0'
tRp6948
sa(dp6949
S'trial_loop.thisTrialN'
p6950
I37
sg6370
S'51-mars.png'
p6951
sS'block_loop.thisIndex'
p6952
g6364
sg38
S'right'
p6953
sg58
g62
sS'trial_loop.thisN'
p6954
I37
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6955
g59
(g98
S'%\x00\x00\x00'
tRp6956
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6957
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p6958
sS'block_loop.thisRepN'
p6959
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6960
I2
sg6385
g6436
sg55
g11
sS'block_loop.thisTrial'
p6961
Nsg69
Vy
sS'block_loop.thisTrialN'
p6962
I0
sg39
F0.66688429133864702
sg34
g752
(S'\x07\xdf\t\x19\r\x15,\x06`\xd0'
tRp6963
sa(dp6964
S'trial_loop.thisTrialN'
p6965
I38
sg6370
g6803
sS'block_loop.thisIndex'
p6966
g6364
sg38
S'right'
p6967
sg58
g62
sS'trial_loop.thisN'
p6968
I38
sg33
g6813
sg63
g64
sS'trial_loop.thisIndex'
p6969
g59
(g98
S'&\x00\x00\x00'
tRp6970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6971
I0
sg6379
g6811
sS'block_loop.thisRepN'
p6972
I2
sg6382
g6813
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6973
I2
sg6385
g6807
sg55
g11
sS'block_loop.thisTrial'
p6974
Nsg69
Vy
sS'block_loop.thisTrialN'
p6975
I0
sg39
F0.7501639312486077
sg34
g752
(S'\x07\xdf\t\x19\r\x152\x01\xb5\x80'
tRp6976
sa(dp6977
S'trial_loop.thisTrialN'
p6978
I39
sg6370
S'1-treacle_cookies.png'
p6979
sS'block_loop.thisIndex'
p6980
g6364
sg38
S'left'
p6981
sg58
g62
sS'trial_loop.thisN'
p6982
I39
sg33
S'1-treacle_cookies.png'
p6983
sg63
g64
sS'trial_loop.thisIndex'
p6984
g59
(g98
S"'\x00\x00\x00"
tRp6985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6986
I0
sg6379
S'21-nakd_banana_crunch.png'
p6987
sS'block_loop.thisRepN'
p6988
I2
sg6382
g6983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6989
I2
sg6385
S'21-nakd_banana_crunch.png'
p6990
sg55
g11
sS'block_loop.thisTrial'
p6991
Nsg69
Vy
sS'block_loop.thisTrialN'
p6992
I0
sg39
F0.83394591352225689
sg34
g752
(S'\x07\xdf\t\x19\r\x157\r\xbb\xa0'
tRp6993
sa(dp6994
S'trial_loop.thisTrialN'
p6995
I40
sg6370
g6936
sS'block_loop.thisIndex'
p6996
g6364
sg38
S'right'
p6997
sg58
g62
sS'trial_loop.thisN'
p6998
I40
sg33
g6383
sg63
g64
sS'trial_loop.thisIndex'
p6999
g59
(g98
S'(\x00\x00\x00'
tRp7000
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7001
I0
sg6379
g6943
sS'block_loop.thisRepN'
p7002
I2
sg6382
g6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7003
I2
sg6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p7004
Nsg69
Vy
sS'block_loop.thisTrialN'
p7005
I0
sg39
F1.0667716206771729
sg34
g752
(S'\x07\xdf\t\x19\r\x16\x01\x0b\xb00'
tRp7006
sa(dp7007
S'trial_loop.thisTrialN'
p7008
I41
sg6370
g6715
sS'block_loop.thisIndex'
p7009
g6364
sg38
S'right'
p7010
sg58
g62
sS'trial_loop.thisN'
p7011
I41
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p7012
g59
(g98
S')\x00\x00\x00'
tRp7013
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7014
I0
sg6379
g6723
sS'block_loop.thisRepN'
p7015
I2
sg6382
g6719
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7016
I2
sg6385
g6726
sg55
g11
sS'block_loop.thisTrial'
p7017
Nsg69
Vy
sS'block_loop.thisTrialN'
p7018
I0
sg39
F0.68317392563767498
sg34
g752
(S'\x07\xdf\t\x19\r\x16\x07\r2\xe8'
tRp7019
sa(dp7020
S'trial_loop.thisTrialN'
p7021
I42
sg6370
S'49-yorkie.png'
p7022
sS'block_loop.thisIndex'
p7023
g6364
sg38
S'right'
p7024
sg58
g62
sS'trial_loop.thisN'
p7025
I42
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p7026
g59
(g98
S'*\x00\x00\x00'
tRp7027
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7028
I0
sg6379
S'35-raisins.png'
p7029
sS'block_loop.thisRepN'
p7030
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7031
I2
sg6385
g6876
sg55
g11
sS'block_loop.thisTrial'
p7032
Nsg69
Vy
sS'block_loop.thisTrialN'
p7033
I0
sg39
F1.1001183726166346
sg34
g752
(S'\x07\xdf\t\x19\r\x16\r\x08\xc6\x18'
tRp7034
sa(dp7035
S'trial_loop.thisTrialN'
p7036
I43
sg6370
S'19-caramello_redo.png'
p7037
sS'block_loop.thisIndex'
p7038
g6364
sg38
S'left'
p7039
sg58
g62
sS'trial_loop.thisN'
p7040
I43
sg33
g6540
sg63
g64
sS'trial_loop.thisIndex'
p7041
g59
(g98
S'+\x00\x00\x00'
tRp7042
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7043
I0
sg6379
S'30-spaghetti_hoops.png'
p7044
sS'block_loop.thisRepN'
p7045
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7046
I2
sg6385
g6547
sg55
g11
sS'block_loop.thisTrial'
p7047
Nsg69
Vy
sS'block_loop.thisTrialN'
p7048
I0
sg39
F0.8500892926385859
sg34
g752
(S'\x07\xdf\t\x19\r\x16\x13\x0b\x00h'
tRp7049
sa(dp7050
S'trial_loop.thisTrialN'
p7051
I44
sg6370
g6442
sS'block_loop.thisIndex'
p7052
g6364
sg38
S'left'
p7053
sg58
g62
sS'trial_loop.thisN'
p7054
I44
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7055
g59
(g98
S',\x00\x00\x00'
tRp7056
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7057
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7058
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7059
I2
sg6385
g6453
sg55
g11
sS'block_loop.thisTrial'
p7060
Nsg69
Vy
sS'block_loop.thisTrialN'
p7061
I0
sg39
F0.76684985152132867
sg34
g752
(S'\x07\xdf\t\x19\r\x16\x19\t/\x90'
tRp7062
sa(dp7063
S'trial_loop.thisTrialN'
p7064
I45
sg6370
S'31-hobnobs.png'
p7065
sS'block_loop.thisIndex'
p7066
g6364
sg38
S'right'
p7067
sg58
g62
sS'trial_loop.thisN'
p7068
I45
sg33
g6685
sg63
g64
sS'trial_loop.thisIndex'
p7069
g59
(g98
S'-\x00\x00\x00'
tRp7070
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7071
I0
sg6379
S'25-kitkat.png'
p7072
sS'block_loop.thisRepN'
p7073
I2
sg6382
g6685
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7074
I2
sg6385
g6692
sg55
g11
sS'block_loop.thisTrial'
p7075
Nsg69
Vy
sS'block_loop.thisTrialN'
p7076
I0
sg39
F0.73356639129997347
sg34
g752
(S'\x07\xdf\t\x19\r\x16\x1f\x061\xf0'
tRp7077
sa(dp7078
S'trial_loop.thisTrialN'
p7079
I46
sg6370
g6760
sS'block_loop.thisIndex'
p7080
g6364
sg38
S'right'
p7081
sg58
g62
sS'trial_loop.thisN'
p7082
I46
sg33
g6668
sg63
g64
sS'trial_loop.thisIndex'
p7083
g59
(g98
S'.\x00\x00\x00'
tRp7084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7085
I0
sg6379
g6767
sS'block_loop.thisRepN'
p7086
I2
sg6382
g6668
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7087
I2
sg6385
g6675
sg55
g11
sS'block_loop.thisTrial'
p7088
Nsg69
Vy
sS'block_loop.thisTrialN'
p7089
I0
sg39
F0.80013331174268387
sg34
g752
(S'\x07\xdf\t\x19\r\x16%\x02x\xd0'
tRp7090
sa(dp7091
S'trial_loop.thisTrialN'
p7092
I47
sg6370
g6833
sS'block_loop.thisIndex'
p7093
g6364
sg38
S'right'
p7094
sg58
g62
sS'trial_loop.thisN'
p7095
I47
sg33
g6843
sg63
g64
sS'trial_loop.thisIndex'
p7096
g59
(g98
S'/\x00\x00\x00'
tRp7097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7098
I0
sg6379
g6841
sS'block_loop.thisRepN'
p7099
I2
sg6382
g6843
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7100
I2
sg6385
g6837
sg55
g11
sS'block_loop.thisTrial'
p7101
Nsg69
Vy
sS'block_loop.thisTrialN'
p7102
I0
sg39
F1.0001445445959689
sg34
g752
(S'\x07\xdf\t\x19\r\x16*\x0f2\xa0'
tRp7103
sa(dp7104
S'trial_loop.thisTrialN'
p7105
I48
sg6370
g6681
sS'block_loop.thisIndex'
p7106
g6364
sg38
S'left'
p7107
sg58
g62
sS'trial_loop.thisN'
p7108
I48
sg33
g6685
sg63
g64
sS'trial_loop.thisIndex'
p7109
g59
(g98
S'0\x00\x00\x00'
tRp7110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7111
I0
sg6379
g6689
sS'block_loop.thisRepN'
p7112
I2
sg6382
g6685
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7113
I2
sg6385
g6692
sg55
g11
sS'block_loop.thisTrial'
p7114
Nsg69
Vy
sS'block_loop.thisTrialN'
p7115
I0
sg39
F0.76680537626089063
sg34
g752
(S'\x07\xdf\t\x19\r\x161\x00\x84\xd0'
tRp7116
sa(dp7117
S'trial_loop.thisTrialN'
p7118
I49
sg6370
g6936
sS'block_loop.thisIndex'
p7119
g6364
sg38
S'right'
p7120
sg58
g62
sS'trial_loop.thisN'
p7121
I49
sg33
g6383
sg63
g64
sS'trial_loop.thisIndex'
p7122
g59
(g98
S'1\x00\x00\x00'
tRp7123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7124
I0
sg6379
g6943
sS'block_loop.thisRepN'
p7125
I2
sg6382
g6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7126
I2
sg6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p7127
Nsg69
Vy
sS'block_loop.thisTrialN'
p7128
I0
sg39
F0.7334740196056373
sg34
g752
(S'\x07\xdf\t\x19\r\x166\x0c\xc5\x88'
tRp7129
sa(dp7130
S'trial_loop.thisTrialN'
p7131
I50
sg6370
g6865
sS'block_loop.thisIndex'
p7132
g6364
sg38
S'left'
p7133
sg58
g62
sS'trial_loop.thisN'
p7134
I50
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p7135
g59
(g98
S'2\x00\x00\x00'
tRp7136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7137
I0
sg6379
g6873
sS'block_loop.thisRepN'
p7138
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7139
I2
sg6385
g6876
sg55
g11
sS'block_loop.thisTrial'
p7140
Nsg69
Vy
sS'block_loop.thisTrialN'
p7141
I0
sg39
F0.55017664661136223
sg34
g752
(S'\x07\xdf\t\x19\r\x17\x00\t\x0ch'
tRp7142
sa(dp7143
S'trial_loop.thisTrialN'
p7144
I51
sg6370
g6570
sS'block_loop.thisIndex'
p7145
g6364
sg38
S'right'
p7146
sg58
g62
sS'trial_loop.thisN'
p7147
I51
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p7148
g59
(g98
S'3\x00\x00\x00'
tRp7149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7150
I0
sg6379
g6578
sS'block_loop.thisRepN'
p7151
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7152
I2
sg6385
g6581
sg55
g11
sS'block_loop.thisTrial'
p7153
Nsg69
Vy
sS'block_loop.thisTrialN'
p7154
I0
sg39
F0.66686005802330328
sg34
g752
(S'\x07\xdf\t\x19\r\x17\x06\x02\xb7P'
tRp7155
sa(dp7156
S'trial_loop.thisTrialN'
p7157
I52
sg6370
g7037
sS'block_loop.thisIndex'
p7158
g6364
sg38
S'left'
p7159
sg58
g62
sS'trial_loop.thisN'
p7160
I52
sg33
g6540
sg63
g64
sS'trial_loop.thisIndex'
p7161
g59
(g98
S'4\x00\x00\x00'
tRp7162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7163
I0
sg6379
g7044
sS'block_loop.thisRepN'
p7164
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7165
I2
sg6385
g6547
sg55
g11
sS'block_loop.thisTrial'
p7166
Nsg69
Vy
sS'block_loop.thisTrialN'
p7167
I0
sg39
F1.0000949375753407
sg34
g752
(S'\x07\xdf\t\x19\r\x17\x0b\r\x8c\xc0'
tRp7168
sa(dp7169
S'trial_loop.thisTrialN'
p7170
I53
sg6370
g6850
sS'block_loop.thisIndex'
p7171
g6364
sg38
S'left'
p7172
sg58
g62
sS'trial_loop.thisN'
p7173
I53
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p7174
g59
(g98
S'5\x00\x00\x00'
tRp7175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7176
I0
sg6379
g6857
sS'block_loop.thisRepN'
p7177
I2
sg6382
g6719
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7178
I2
sg6385
g6726
sg55
g11
sS'block_loop.thisTrial'
p7179
Nsg69
Vy
sS'block_loop.thisTrialN'
p7180
I0
sg39
F0.64992211127537303
sg34
g752
(S'\x07\xdf\t\x19\r\x17\x11\r\xde\xc8'
tRp7181
sa(dp7182
S'trial_loop.thisTrialN'
p7183
I54
sg6370
g6775
sS'block_loop.thisIndex'
p7184
g6364
sg38
S'left'
p7185
sg58
g62
sS'trial_loop.thisN'
p7186
I54
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p7187
g59
(g98
S'6\x00\x00\x00'
tRp7188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7189
I0
sg6379
g6782
sS'block_loop.thisRepN'
p7190
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7191
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p7192
Nsg69
Vy
sS'block_loop.thisTrialN'
p7193
I0
sg39
F0.7334600498124928
sg34
g752
(S'\x07\xdf\t\x19\r\x17\x17\t3x'
tRp7194
sa(dp7195
S'trial_loop.thisTrialN'
p7196
I55
sg6370
g6951
sS'block_loop.thisIndex'
p7197
g6364
sg38
S'right'
p7198
sg58
g62
sS'trial_loop.thisN'
p7199
I55
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7200
g59
(g98
S'7\x00\x00\x00'
tRp7201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7202
I0
sg6379
g6958
sS'block_loop.thisRepN'
p7203
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7204
I2
sg6385
g6436
sg55
g11
sS'block_loop.thisTrial'
p7205
Nsg69
Vy
sS'block_loop.thisTrialN'
p7206
I0
sg39
F0.78344568088141386
sg34
g752
(S'\x07\xdf\t\x19\r\x17\x1d\x05~@'
tRp7207
sa(dp7208
S'trial_loop.thisTrialN'
p7209
I56
sg6370
g6649
sS'block_loop.thisIndex'
p7210
g6364
sg38
S'left'
p7211
sg58
g62
sS'trial_loop.thisN'
p7212
I56
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p7213
g59
(g98
S'8\x00\x00\x00'
tRp7214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7215
I0
sg6379
g6656
sS'block_loop.thisRepN'
p7216
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7217
I2
sg6385
g6564
sg55
g11
sS'block_loop.thisTrial'
p7218
Nsg69
Vy
sS'block_loop.thisTrialN'
p7219
I0
sg39
F0.93342196074263484
sg34
g752
(S'\x07\xdf\t\x19\r\x17#\x02\xb7P'
tRp7220
sa(dp7221
S'trial_loop.thisTrialN'
p7222
I57
sg6370
g6570
sS'block_loop.thisIndex'
p7223
g6364
sg38
S'right'
p7224
sg58
g62
sS'trial_loop.thisN'
p7225
I57
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p7226
g59
(g98
S'9\x00\x00\x00'
tRp7227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7228
I0
sg6379
g6578
sS'block_loop.thisRepN'
p7229
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7230
I2
sg6385
g6581
sg55
g11
sS'block_loop.thisTrial'
p7231
Nsg69
Vy
sS'block_loop.thisTrialN'
p7232
I0
sg39
F0.61729580153587449
sg34
g752
(S'\x07\xdf\t\x19\r\x17)\x02U\xa8'
tRp7233
sa(dp7234
S'trial_loop.thisTrialN'
p7235
I58
sg6370
g6921
sS'block_loop.thisIndex'
p7236
g6364
sg38
S'right'
p7237
sg58
g62
sS'trial_loop.thisN'
p7238
I58
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p7239
g59
(g98
S':\x00\x00\x00'
tRp7240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7241
I0
sg6379
g6928
sS'block_loop.thisRepN'
p7242
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7243
I2
sg6385
g6487
sg55
g11
sS'block_loop.thisTrial'
p7244
Nsg69
Vy
sS'block_loop.thisTrialN'
p7245
I0
sg39
F0.83345041350548854
sg34
g752
(S'\x07\xdf\t\x19\r\x17.\x0c5\x00'
tRp7246
sa(dp7247
S'trial_loop.thisTrialN'
p7248
I59
sg6370
g6508
sS'block_loop.thisIndex'
p7249
g6364
sg38
S'right'
p7250
sg58
g62
sS'trial_loop.thisN'
p7251
I59
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7252
g59
(g98
S';\x00\x00\x00'
tRp7253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7254
I0
sg6379
g6515
sS'block_loop.thisRepN'
p7255
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7256
I2
sg6385
g6402
sg55
g11
sS'block_loop.thisTrial'
p7257
Nsg69
Vy
sS'block_loop.thisTrialN'
p7258
I0
sg39
F0.7834345620667591
sg34
g752
(S'\x07\xdf\t\x19\r\x174\n)\x90'
tRp7259
sa(dp7260
S'trial_loop.thisTrialN'
p7261
I60
sg6370
g6536
sS'block_loop.thisIndex'
p7262
g6364
sg38
S'right'
p7263
sg58
g62
sS'trial_loop.thisN'
p7264
I60
sg33
g6540
sg63
g64
sS'trial_loop.thisIndex'
p7265
g59
(g98
S'<\x00\x00\x00'
tRp7266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7267
I0
sg6379
g6544
sS'block_loop.thisRepN'
p7268
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7269
I2
sg6385
g6547
sg55
g11
sS'block_loop.thisTrial'
p7270
Nsg69
Vy
sS'block_loop.thisTrialN'
p7271
I0
sg39
F1.4167443083078979
sg34
g752
(S'\x07\xdf\t\x19\r\x17:\x07f\x88'
tRp7272
sa(dp7273
S'trial_loop.thisTrialN'
p7274
I61
sg6370
g6553
sS'block_loop.thisIndex'
p7275
g6364
sg38
S'right'
p7276
sg58
g62
sS'trial_loop.thisN'
p7277
I61
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p7278
g59
(g98
S'=\x00\x00\x00'
tRp7279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7280
I0
sg6379
g6561
sS'block_loop.thisRepN'
p7281
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7282
I2
sg6385
g6564
sg55
g11
sS'block_loop.thisTrial'
p7283
Nsg69
Vy
sS'block_loop.thisTrialN'
p7284
I0
sg39
F0.76665398931618256
sg34
g752
(S'\x07\xdf\t\x19\r\x18\x04\x0e)\x00'
tRp7285
sa(dp7286
S'trial_loop.thisTrialN'
p7287
I62
sg6370
g6391
sS'block_loop.thisIndex'
p7288
g6364
sg38
S'left'
p7289
sg58
g62
sS'trial_loop.thisN'
p7290
I62
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7291
g59
(g98
S'>\x00\x00\x00'
tRp7292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7293
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7294
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7295
I2
sg6385
g6402
sg55
g11
sS'block_loop.thisTrial'
p7296
Nsg69
Vy
sS'block_loop.thisTrialN'
p7297
I0
sg39
F1.666854641163809
sg34
g752
(S"\x07\xdf\t\x19\r\x18\n\x0b'x"
tRp7298
sa(dp7299
S'trial_loop.thisTrialN'
p7300
I63
sg6370
g7037
sS'block_loop.thisIndex'
p7301
g6364
sg38
S'left'
p7302
sg58
g62
sS'trial_loop.thisN'
p7303
I63
sg33
g6547
sg63
g64
sS'trial_loop.thisIndex'
p7304
g59
(g98
S'?\x00\x00\x00'
tRp7305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7306
I0
sg6379
g7044
sS'block_loop.thisRepN'
p7307
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7308
I2
sg6385
g6547
sg55
g11
sS'block_loop.thisTrial'
p7309
Nsg69
Vy
sS'block_loop.thisTrialN'
p7310
I0
sg39
F0.8334219037242292
sg34
g752
(S'\x07\xdf\t\x19\r\x18\x11\x06\xb2\xd8'
tRp7311
sa(dp7312
S'trial_loop.thisTrialN'
p7313
I64
sg6370
S'44-crunch.png'
p7314
sS'block_loop.thisIndex'
p7315
g6364
sg38
S'left'
p7316
sg58
g62
sS'trial_loop.thisN'
p7317
I64
sg33
g6843
sg63
g64
sS'trial_loop.thisIndex'
p7318
g59
(g98
S'@\x00\x00\x00'
tRp7319
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7320
I0
sg6379
S'26-walkers_smoky_bacon.png'
p7321
sS'block_loop.thisRepN'
p7322
I2
sg6382
g6843
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7323
I2
sg6385
g6837
sg55
g11
sS'block_loop.thisTrial'
p7324
Nsg69
Vy
sS'block_loop.thisTrialN'
p7325
I0
sg39
F0.76678057275057654
sg34
g752
(S'\x07\xdf\t\x19\r\x18\x17\x04\xa7h'
tRp7326
sa(dp7327
S'trial_loop.thisTrialN'
p7328
I65
sg6370
g6664
sS'block_loop.thisIndex'
p7329
g6364
sg38
S'left'
p7330
sg58
g62
sS'trial_loop.thisN'
p7331
I65
sg33
g6668
sg63
g64
sS'trial_loop.thisIndex'
p7332
g59
(g98
S'A\x00\x00\x00'
tRp7333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7334
I0
sg6379
g6672
sS'block_loop.thisRepN'
p7335
I2
sg6382
g6668
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7336
I2
sg6385
g6675
sg55
g11
sS'block_loop.thisTrial'
p7337
Nsg69
Vy
sS'block_loop.thisTrialN'
p7338
I0
sg39
F0.80011192940582987
sg34
g752
(S'\x07\xdf\t\x19\r\x18\x1d\x01g`'
tRp7339
sa(dp7340
S'trial_loop.thisTrialN'
p7341
I66
sg6370
g6425
sS'block_loop.thisIndex'
p7342
g6364
sg38
S'left'
p7343
sg58
g62
sS'trial_loop.thisN'
p7344
I66
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7345
g59
(g98
S'B\x00\x00\x00'
tRp7346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7347
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7348
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7349
I2
sg6385
g6436
sg55
g11
sS'block_loop.thisTrial'
p7350
Nsg69
Vy
sS'block_loop.thisTrialN'
p7351
I0
sg39
F0.70011272767987975
sg34
g752
(S'\x07\xdf\t\x19\r\x18"\x0e%\x18'
tRp7352
sa(dp7353
S'trial_loop.thisTrialN'
p7354
I67
sg6370
g6760
sS'block_loop.thisIndex'
p7355
g6364
sg38
S'right'
p7356
sg58
g62
sS'trial_loop.thisN'
p7357
I67
sg33
g6668
sg63
g64
sS'trial_loop.thisIndex'
p7358
g59
(g98
S'C\x00\x00\x00'
tRp7359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7360
I0
sg6379
g6767
sS'block_loop.thisRepN'
p7361
I2
sg6382
g6668
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7362
I2
sg6385
g6675
sg55
g11
sS'block_loop.thisTrial'
p7363
Nsg69
Vy
sS'block_loop.thisTrialN'
p7364
I0
sg39
F2.6671380283987673
sg34
g752
(S'\x07\xdf\t\x19\r\x18(\n-x'
tRp7365
sa(dp7366
S'trial_loop.thisTrialN'
p7367
I68
sg6370
g7314
sS'block_loop.thisIndex'
p7368
g6364
sg38
S'left'
p7369
sg58
g62
sS'trial_loop.thisN'
p7370
I68
sg33
g6843
sg63
g64
sS'trial_loop.thisIndex'
p7371
g59
(g98
S'D\x00\x00\x00'
tRp7372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7373
I0
sg6379
g7321
sS'block_loop.thisRepN'
p7374
I2
sg6382
g6843
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7375
I2
sg6385
g6837
sg55
g11
sS'block_loop.thisTrial'
p7376
Nsg69
Vy
sS'block_loop.thisTrialN'
p7377
I0
sg39
F0.68344847484149795
sg34
g752
(S'\x07\xdf\t\x19\r\x180\x05vp'
tRp7378
sa(dp7379
S'trial_loop.thisTrialN'
p7380
I69
sg6370
S'18-mms.png'
p7381
sS'block_loop.thisIndex'
p7382
g6364
sg38
S'left'
p7383
sg58
g62
sS'trial_loop.thisN'
p7384
I69
sg33
g6642
sg63
g64
sS'trial_loop.thisIndex'
p7385
g59
(g98
S'E\x00\x00\x00'
tRp7386
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7387
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p7388
sS'block_loop.thisRepN'
p7389
I2
sg6382
g6642
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7390
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p7391
Nsg69
Vy
sS'block_loop.thisTrialN'
p7392
I0
sg39
F1.0333872358296503
sg34
g752
(S'\x07\xdf\t\x19\r\x186\x01D8'
tRp7393
sa(dp7394
S'trial_loop.thisTrialN'
p7395
I70
sg6370
g6760
sS'block_loop.thisIndex'
p7396
g6364
sg38
S'right'
p7397
sg58
g62
sS'trial_loop.thisN'
p7398
I70
sg33
g6675
sg63
g64
sS'trial_loop.thisIndex'
p7399
g59
(g98
S'F\x00\x00\x00'
tRp7400
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7401
I0
sg6379
g6767
sS'block_loop.thisRepN'
p7402
I2
sg6382
g6668
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7403
I2
sg6385
g6675
sg55
g11
sS'block_loop.thisTrial'
p7404
Nsg69
Vy
sS'block_loop.thisTrialN'
p7405
I0
sg39
F0.66676911181821197
sg34
g752
(S'\x07\xdf\t\x19\r\x19\x00\x02Q\xc0'
tRp7406
sa(dp7407
S'trial_loop.thisTrialN'
p7408
I71
sg6370
g6536
sS'block_loop.thisIndex'
p7409
g6364
sg38
S'right'
p7410
sg58
g62
sS'trial_loop.thisN'
p7411
I71
sg33
g6540
sg63
g64
sS'trial_loop.thisIndex'
p7412
g59
(g98
S'G\x00\x00\x00'
tRp7413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7414
I0
sg6379
g6544
sS'block_loop.thisRepN'
p7415
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7416
I2
sg6385
g6547
sg55
g11
sS'block_loop.thisTrial'
p7417
Nsg69
Vy
sS'block_loop.thisTrialN'
p7418
I0
sg39
F0.8001030913728755
sg34
g752
(S'\x07\xdf\t\x19\r\x19\x05\x0c\xe8\xb0'
tRp7419
sa(dp7420
S'trial_loop.thisTrialN'
p7421
I72
sg6370
g6951
sS'block_loop.thisIndex'
p7422
g6364
sg38
S'right'
p7423
sg58
g62
sS'trial_loop.thisN'
p7424
I72
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7425
g59
(g98
S'H\x00\x00\x00'
tRp7426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7427
I0
sg6379
g6958
sS'block_loop.thisRepN'
p7428
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7429
I2
sg6385
g6436
sg55
g11
sS'block_loop.thisTrial'
p7430
Nsg69
Vy
sS'block_loop.thisTrialN'
p7431
I0
sg39
F0.63360339699647739
sg34
g752
(S'\x07\xdf\t\x19\r\x19\x0b\n`@'
tRp7432
sa(dp7433
S'trial_loop.thisTrialN'
p7434
I73
sg6370
g6632
sS'block_loop.thisIndex'
p7435
g6364
sg38
S'right'
p7436
sg58
g62
sS'trial_loop.thisN'
p7437
I73
sg33
g6642
sg63
g64
sS'trial_loop.thisIndex'
p7438
g59
(g98
S'I\x00\x00\x00'
tRp7439
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7440
I0
sg6379
g6640
sS'block_loop.thisRepN'
p7441
I2
sg6382
g6642
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7442
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p7443
Nsg69
Vy
sS'block_loop.thisTrialN'
p7444
I0
sg39
F0.98352590740796586
sg34
g752
(S'\x07\xdf\t\x19\r\x19\x11\x05;\xd8'
tRp7445
sa(dp7446
S'trial_loop.thisTrialN'
p7447
I74
sg6370
g7022
sS'block_loop.thisIndex'
p7448
g6364
sg38
S'right'
p7449
sg58
g62
sS'trial_loop.thisN'
p7450
I74
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p7451
g59
(g98
S'J\x00\x00\x00'
tRp7452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7453
I0
sg6379
g7029
sS'block_loop.thisRepN'
p7454
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7455
I2
sg6385
g6876
sg55
g11
sS'block_loop.thisTrial'
p7456
Nsg69
Vy
sS'block_loop.thisTrialN'
p7457
I0
sg39
F1.7833986397417902
sg34
g752
(S'\x07\xdf\t\x19\r\x19\x17\x05\x91\xc8'
tRp7458
sa(dp7459
S'trial_loop.thisTrialN'
p7460
I75
sg6370
g6391
sS'block_loop.thisIndex'
p7461
g6364
sg38
S'left'
p7462
sg58
g62
sS'trial_loop.thisN'
p7463
I75
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7464
g59
(g98
S'K\x00\x00\x00'
tRp7465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7466
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7467
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7468
I2
sg6385
g6402
sg55
g11
sS'block_loop.thisTrial'
p7469
Nsg69
Vy
sS'block_loop.thisTrialN'
p7470
I0
sg39
F1.1000929989095312
sg34
g752
(S'\x07\xdf\t\x19\r\x19\x1e\x02\xc6\xf0'
tRp7471
sa(dp7472
S'trial_loop.thisTrialN'
p7473
I76
sg6370
g6371
sS'block_loop.thisIndex'
p7474
g6364
sg38
S'left'
p7475
sg58
g62
sS'trial_loop.thisN'
p7476
I76
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7477
g59
(g98
S'L\x00\x00\x00'
tRp7478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7479
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7480
I2
sg6382
g6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7481
I2
sg6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p7482
Nsg69
Vy
sS'block_loop.thisTrialN'
p7483
I0
sg39
F0.86676095802067721
sg34
g752
(S'\x07\xdf\t\x19\r\x19$\x04\xc6\xa8'
tRp7484
sa(dp7485
S'trial_loop.thisTrialN'
p7486
I77
sg6370
g7022
sS'block_loop.thisIndex'
p7487
g6364
sg38
S'right'
p7488
sg58
g62
sS'trial_loop.thisN'
p7489
I77
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p7490
g59
(g98
S'M\x00\x00\x00'
tRp7491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7492
I0
sg6379
g7029
sS'block_loop.thisRepN'
p7493
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7494
I2
sg6385
g6876
sg55
g11
sS'block_loop.thisTrial'
p7495
Nsg69
Vy
sS'block_loop.thisTrialN'
p7496
I0
sg39
F0.75008524424993084
sg34
g752
(S'\x07\xdf\t\x19\r\x19*\x030h'
tRp7497
sa(dp7498
S'trial_loop.thisTrialN'
p7499
I78
sg6370
g6715
sS'block_loop.thisIndex'
p7500
g6364
sg38
S'right'
p7501
sg58
g62
sS'trial_loop.thisN'
p7502
I78
sg33
g6726
sg63
g64
sS'trial_loop.thisIndex'
p7503
g59
(g98
S'N\x00\x00\x00'
tRp7504
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7505
I0
sg6379
g6723
sS'block_loop.thisRepN'
p7506
I2
sg6382
g6719
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7507
I2
sg6385
g6726
sg55
g11
sS'block_loop.thisTrial'
p7508
Nsg69
Vy
sS'block_loop.thisTrialN'
p7509
I0
sg39
F0.866900370854637
sg34
g752
(S'\x07\xdf\t\x19\r\x19/\x0f6\x88'
tRp7510
sa(dp7511
S'trial_loop.thisTrialN'
p7512
I79
sg6370
S'21-nakd_banana_crunch.png'
p7513
sS'block_loop.thisIndex'
p7514
g6364
sg38
S'right'
p7515
sg58
g62
sS'trial_loop.thisN'
p7516
I79
sg33
g6990
sg63
g64
sS'trial_loop.thisIndex'
p7517
g59
(g98
S'O\x00\x00\x00'
tRp7518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7519
I0
sg6379
S'1-treacle_cookies.png'
p7520
sS'block_loop.thisRepN'
p7521
I2
sg6382
g6983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7522
I2
sg6385
g6990
sg55
g11
sS'block_loop.thisTrial'
p7523
Nsg69
Vy
sS'block_loop.thisTrialN'
p7524
I0
sg39
F1.233425838074254
sg34
g752
(S'\x07\xdf\t\x19\r\x195\r\xa40'
tRp7525
sa(dp7526
S'trial_loop.thisTrialN'
p7527
I80
sg6370
g6632
sS'block_loop.thisIndex'
p7528
g6364
sg38
S'right'
p7529
sg58
g62
sS'trial_loop.thisN'
p7530
I80
sg33
g6636
sg63
g64
sS'trial_loop.thisIndex'
p7531
g59
(g98
S'P\x00\x00\x00'
tRp7532
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7533
I0
sg6379
g6640
sS'block_loop.thisRepN'
p7534
I2
sg6382
g6642
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7535
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p7536
Nsg69
Vy
sS'block_loop.thisTrialN'
p7537
I0
sg39
F1.2501473955744586
sg34
g752
(S'\x07\xdf\t\x19\r\x1a\x00\x02\x84\x88'
tRp7538
sa(dp7539
S'trial_loop.thisTrialN'
p7540
I81
sg6370
g6442
sS'block_loop.thisIndex'
p7541
g6364
sg38
S'left'
p7542
sg58
g62
sS'trial_loop.thisN'
p7543
I81
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7544
g59
(g98
S'Q\x00\x00\x00'
tRp7545
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7546
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7547
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7548
I2
sg6385
g6453
sg55
g11
sS'block_loop.thisTrial'
p7549
Nsg69
Vy
sS'block_loop.thisTrialN'
p7550
I0
sg39
F0.76678342372906627
sg34
g752
(S'\x07\xdf\t\x19\r\x1a\x06\x06\xe5\xa0'
tRp7551
sa(dp7552
S'trial_loop.thisTrialN'
p7553
I82
sg6370
g6408
sS'block_loop.thisIndex'
p7554
g6364
sg38
S'right'
p7555
sg58
g62
sS'trial_loop.thisN'
p7556
I82
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7557
g59
(g98
S'R\x00\x00\x00'
tRp7558
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7559
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7560
I2
sg6382
g6418
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7561
I2
sg6385
g6412
sg55
g11
sS'block_loop.thisTrial'
p7562
Nsg69
Vy
sS'block_loop.thisTrialN'
p7563
I0
sg39
F0.80019432267727097
sg34
g752
(S'\x07\xdf\t\x19\r\x1a\x0c\x03\xa9\x80'
tRp7564
sa(dp7565
S'trial_loop.thisTrialN'
p7566
I83
sg6370
g6803
sS'block_loop.thisIndex'
p7567
g6364
sg38
S'right'
p7568
sg58
g62
sS'trial_loop.thisN'
p7569
I83
sg33
g6813
sg63
g64
sS'trial_loop.thisIndex'
p7570
g59
(g98
S'S\x00\x00\x00'
tRp7571
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7572
I0
sg6379
g6811
sS'block_loop.thisRepN'
p7573
I2
sg6382
g6813
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7574
I2
sg6385
g6807
sg55
g11
sS'block_loop.thisTrial'
p7575
Nsg69
Vy
sS'block_loop.thisTrialN'
p7576
I0
sg39
F0.71686393535310344
sg34
g752
(S'\x07\xdf\t\x19\r\x1a\x12\x01!\x10'
tRp7577
sa(dp7578
S'trial_loop.thisTrialN'
p7579
I84
sg6370
g6833
sS'block_loop.thisIndex'
p7580
g6364
sg38
S'right'
p7581
sg58
g62
sS'trial_loop.thisN'
p7582
I84
sg33
g6843
sg63
g64
sS'trial_loop.thisIndex'
p7583
g59
(g98
S'T\x00\x00\x00'
tRp7584
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7585
I0
sg6379
g6841
sS'block_loop.thisRepN'
p7586
I2
sg6382
g6843
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7587
I2
sg6385
g6837
sg55
g11
sS'block_loop.thisTrial'
p7588
Nsg69
Vy
sS'block_loop.thisTrialN'
p7589
I0
sg39
F0.73351621408437495
sg34
g752
(S'\x07\xdf\t\x19\r\x1a\x17\x0c\xaa0'
tRp7590
sa(dp7591
S'trial_loop.thisTrialN'
p7592
I85
sg6370
g7513
sS'block_loop.thisIndex'
p7593
g6364
sg38
S'right'
p7594
sg58
g62
sS'trial_loop.thisN'
p7595
I85
sg33
g6983
sg63
g64
sS'trial_loop.thisIndex'
p7596
g59
(g98
S'U\x00\x00\x00'
tRp7597
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7598
I0
sg6379
g7520
sS'block_loop.thisRepN'
p7599
I2
sg6382
g6983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7600
I2
sg6385
g6990
sg55
g11
sS'block_loop.thisTrial'
p7601
Nsg69
Vy
sS'block_loop.thisTrialN'
p7602
I0
sg39
F0.8501269255502848
sg34
g752
(S'\x07\xdf\t\x19\r\x1a\x1d\t/\x90'
tRp7603
sa(dp7604
S'trial_loop.thisTrialN'
p7605
I86
sg6370
g7314
sS'block_loop.thisIndex'
p7606
g6364
sg38
S'left'
p7607
sg58
g62
sS'trial_loop.thisN'
p7608
I86
sg33
g6843
sg63
g64
sS'trial_loop.thisIndex'
p7609
g59
(g98
S'V\x00\x00\x00'
tRp7610
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7611
I0
sg6379
g7321
sS'block_loop.thisRepN'
p7612
I2
sg6382
g6843
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7613
I2
sg6385
g6837
sg55
g11
sS'block_loop.thisTrial'
p7614
Nsg69
Vy
sS'block_loop.thisTrialN'
p7615
I0
sg39
F1.0835094287540414
sg34
g752
(S'\x07\xdf\t\x19\r\x1a#\x07b\xa0'
tRp7616
sa(dp7617
S'trial_loop.thisTrialN'
p7618
I87
sg6370
g6425
sS'block_loop.thisIndex'
p7619
g6364
sg38
S'left'
p7620
sg58
g62
sS'trial_loop.thisN'
p7621
I87
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7622
g59
(g98
S'W\x00\x00\x00'
tRp7623
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7624
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7625
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7626
I2
sg6385
g6436
sg55
g11
sS'block_loop.thisTrial'
p7627
Nsg69
Vy
sS'block_loop.thisTrialN'
p7628
I0
sg39
F0.85010725380016083
sg34
g752
(S'\x07\xdf\t\x19\r\x1a)\t#\xd8'
tRp7629
sa(dp7630
S'trial_loop.thisTrialN'
p7631
I88
sg6370
g7065
sS'block_loop.thisIndex'
p7632
g6364
sg38
S'right'
p7633
sg58
g62
sS'trial_loop.thisN'
p7634
I88
sg33
g6685
sg63
g64
sS'trial_loop.thisIndex'
p7635
g59
(g98
S'X\x00\x00\x00'
tRp7636
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7637
I0
sg6379
g7072
sS'block_loop.thisRepN'
p7638
I2
sg6382
g6685
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7639
I2
sg6385
g6692
sg55
g11
sS'block_loop.thisTrial'
p7640
Nsg69
Vy
sS'block_loop.thisTrialN'
p7641
I0
sg39
F0.83352681972246501
sg34
g752
(S'\x07\xdf\t\x19\r\x1a/\x07S\x00'
tRp7642
sa(dp7643
S'trial_loop.thisTrialN'
p7644
I89
sg6370
S'41-peanuts_redo.png'
p7645
sS'block_loop.thisIndex'
p7646
g6364
sg38
S'left'
p7647
sg58
g62
sS'trial_loop.thisN'
p7648
I89
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p7649
g59
(g98
S'Y\x00\x00\x00'
tRp7650
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7651
I0
sg6379
S'45-chewy_nougat_redo.png'
p7652
sS'block_loop.thisRepN'
p7653
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7654
I2
sg6385
g6581
sg55
g11
sS'block_loop.thisTrial'
p7655
Nsg69
Vy
sS'block_loop.thisTrialN'
p7656
I0
sg39
F0.70059568339092948
sg34
g752
(S'\x07\xdf\t\x19\r\x1a5\x05G\x90'
tRp7657
sa(dp7658
S'trial_loop.thisTrialN'
p7659
I90
sg6370
g6371
sS'block_loop.thisIndex'
p7660
g6364
sg38
S'left'
p7661
sg58
g62
sS'trial_loop.thisN'
p7662
I90
sg33
g6383
sg63
g64
sS'trial_loop.thisIndex'
p7663
g59
(g98
S'Z\x00\x00\x00'
tRp7664
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7665
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7666
I2
sg6382
g6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7667
I2
sg6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p7668
Nsg69
Vy
sS'block_loop.thisTrialN'
p7669
I0
sg39
F0.93352003439395048
sg34
g752
(S'\x07\xdf\t\x19\r\x1a;\x01O\xf0'
tRp7670
sa(dp7671
S'trial_loop.thisTrialN'
p7672
I91
sg6370
g6698
sS'block_loop.thisIndex'
p7673
g6364
sg38
S'right'
p7674
sg58
g62
sS'trial_loop.thisN'
p7675
I91
sg33
g6702
sg63
g64
sS'trial_loop.thisIndex'
p7676
g59
(g98
S'[\x00\x00\x00'
tRp7677
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7678
I0
sg6379
g6706
sS'block_loop.thisRepN'
p7679
I2
sg6382
g6702
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7680
I2
sg6385
g6709
sg55
g11
sS'block_loop.thisTrial'
p7681
Nsg69
Vy
sS'block_loop.thisTrialN'
p7682
I0
sg39
F1.1667676863271481
sg34
g752
(S'\x07\xdf\t\x19\r\x1b\x05\x00\xb3\xb0'
tRp7683
sa(dp7684
S'trial_loop.thisTrialN'
p7685
I92
sg6370
g6833
sS'block_loop.thisIndex'
p7686
g6364
sg38
S'right'
p7687
sg58
g62
sS'trial_loop.thisN'
p7688
I92
sg33
g6837
sg63
g64
sS'trial_loop.thisIndex'
p7689
g59
(g98
S'\\\x00\x00\x00'
tRp7690
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7691
I0
sg6379
g6841
sS'block_loop.thisRepN'
p7692
I2
sg6382
g6843
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7693
I2
sg6385
g6837
sg55
g11
sS'block_loop.thisTrial'
p7694
Nsg69
Vy
sS'block_loop.thisTrialN'
p7695
I0
sg39
F0.75012116657489969
sg34
g752
(S'\x07\xdf\t\x19\r\x1b\x0b\x03\xa5\x98'
tRp7696
sa(dp7697
S'trial_loop.thisTrialN'
p7698
I93
sg6370
g6602
sS'block_loop.thisIndex'
p7699
g6364
sg38
S'right'
p7700
sg58
g62
sS'trial_loop.thisN'
p7701
I93
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p7702
g59
(g98
S']\x00\x00\x00'
tRp7703
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7704
I0
sg6379
g6610
sS'block_loop.thisRepN'
p7705
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7706
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p7707
Nsg69
Vy
sS'block_loop.thisTrialN'
p7708
I0
sg39
F0.68353314889463945
sg34
g752
(S'\x07\xdf\t\x19\r\x1b\x11\x00e\x90'
tRp7709
sa(dp7710
S'trial_loop.thisTrialN'
p7711
I94
sg6370
g6459
sS'block_loop.thisIndex'
p7712
g6364
sg38
S'left'
p7713
sg58
g62
sS'trial_loop.thisN'
p7714
I94
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p7715
g59
(g98
S'^\x00\x00\x00'
tRp7716
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7717
I0
sg6379
g6467
sS'block_loop.thisRepN'
p7718
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7719
I2
sg6385
g6470
sg55
g11
sS'block_loop.thisTrial'
p7720
Nsg69
Vy
sS'block_loop.thisTrialN'
p7721
I0
sg39
F0.78343342167499941
sg34
g752
(S'\x07\xdf\t\x19\r\x1b\x16\x0by\x80'
tRp7722
sa(dp7723
S'trial_loop.thisTrialN'
p7724
I95
sg6370
S'3-ellas_strawberries_apples.png'
p7725
sS'block_loop.thisIndex'
p7726
g6364
sg38
S'left'
p7727
sg58
g62
sS'trial_loop.thisN'
p7728
I95
sg33
g6813
sg63
g64
sS'trial_loop.thisIndex'
p7729
g59
(g98
S'_\x00\x00\x00'
tRp7730
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7731
I0
sg6379
S'13-mccoys_steak_crisps.png'
p7732
sS'block_loop.thisRepN'
p7733
I2
sg6382
g6813
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7734
I2
sg6385
g6807
sg55
g11
sS'block_loop.thisTrial'
p7735
Nsg69
Vy
sS'block_loop.thisTrialN'
p7736
I0
sg39
F0.65048631986610417
sg34
g752
(S'\x07\xdf\t\x19\r\x1b\x1c\x08\xb2\x90'
tRp7737
sa(dp7738
S'trial_loop.thisTrialN'
p7739
I96
sg6370
S'22-daim.png'
p7740
sS'block_loop.thisIndex'
p7741
g6364
sg38
S'right'
p7742
sg58
g62
sS'trial_loop.thisN'
p7743
I96
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7744
g59
(g98
S'`\x00\x00\x00'
tRp7745
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7746
I0
sg6379
S'7-olives.png'
p7747
sS'block_loop.thisRepN'
p7748
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7749
I2
sg6385
g6470
sg55
g11
sS'block_loop.thisTrial'
p7750
Nsg69
Vy
sS'block_loop.thisTrialN'
p7751
I0
sg39
F0.73353674112695444
sg34
g752
(S'\x07\xdf\t\x19\r\x1b"\x03\xcc\xa8'
tRp7752
sa(dp7753
S'trial_loop.thisTrialN'
p7754
I97
sg6370
g6951
sS'block_loop.thisIndex'
p7755
g6364
sg38
S'right'
p7756
sg58
g62
sS'trial_loop.thisN'
p7757
I97
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7758
g59
(g98
S'a\x00\x00\x00'
tRp7759
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7760
I0
sg6379
g6958
sS'block_loop.thisRepN'
p7761
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7762
I2
sg6385
g6436
sg55
g11
sS'block_loop.thisTrial'
p7763
Nsg69
Vy
sS'block_loop.thisTrialN'
p7764
I0
sg39
F0.88355236448660435
sg34
g752
(S'\x07\xdf\t\x19\r\x1b(\x00\x13\x88'
tRp7765
sa(dp7766
S'trial_loop.thisTrialN'
p7767
I98
sg6370
g6570
sS'block_loop.thisIndex'
p7768
g6364
sg38
S'right'
p7769
sg58
g62
sS'trial_loop.thisN'
p7770
I98
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p7771
g59
(g98
S'b\x00\x00\x00'
tRp7772
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7773
I0
sg6379
g6578
sS'block_loop.thisRepN'
p7774
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7775
I2
sg6385
g6581
sg55
g11
sS'block_loop.thisTrial'
p7776
Nsg69
Vy
sS'block_loop.thisTrialN'
p7777
I0
sg39
F0.81678616066710674
sg34
g752
(S'\x07\xdf\t\x19\r\x1b-\x0e<\x88'
tRp7778
sa(dp7779
S'trial_loop.thisTrialN'
p7780
I99
sg6370
g7513
sS'block_loop.thisIndex'
p7781
g6364
sg38
S'right'
p7782
sg58
g62
sS'trial_loop.thisN'
p7783
I99
sg33
g6983
sg63
g64
sS'trial_loop.thisIndex'
p7784
g59
(g98
S'c\x00\x00\x00'
tRp7785
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7786
I0
sg6379
g7520
sS'block_loop.thisRepN'
p7787
I2
sg6382
g6983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7788
I2
sg6385
g6990
sg55
g11
sS'block_loop.thisTrial'
p7789
Nsg69
Vy
sS'block_loop.thisTrialN'
p7790
I0
sg39
F0.76680908253365487
sg34
g752
(S'\x07\xdf\t\x19\r\x1b3\x0b\xf2\x98'
tRp7791
sa(dp7792
S'trial_loop.thisTrialN'
p7793
I100
sg6370
g6833
sS'block_loop.thisIndex'
p7794
g6364
sg38
S'right'
p7795
sg58
g62
sS'trial_loop.thisN'
p7796
I100
sg33
g6843
sg63
g64
sS'trial_loop.thisIndex'
p7797
g59
(g98
S'd\x00\x00\x00'
tRp7798
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7799
I0
sg6379
g6841
sS'block_loop.thisRepN'
p7800
I2
sg6382
g6843
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7801
I2
sg6385
g6837
sg55
g11
sS'block_loop.thisTrial'
p7802
Nsg69
Vy
sS'block_loop.thisTrialN'
p7803
I0
sg39
F0.68338660861445533
sg34
g752
(S'\x07\xdf\t\x19\r\x1b9\x08\xf4\xf8'
tRp7804
sa(dp7805
S'trial_loop.thisTrialN'
p7806
I101
sg6370
g6587
sS'block_loop.thisIndex'
p7807
g6364
sg38
S'left'
p7808
sg58
g62
sS'trial_loop.thisN'
p7809
I101
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p7810
g59
(g98
S'e\x00\x00\x00'
tRp7811
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7812
I0
sg6379
g6594
sS'block_loop.thisRepN'
p7813
I2
sg6382
g6418
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7814
I2
sg6385
g6412
sg55
g11
sS'block_loop.thisTrial'
p7815
Nsg69
Vy
sS'block_loop.thisTrialN'
p7816
I0
sg39
F0.73357437404047232
sg34
g752
(S'\x07\xdf\t\x19\r\x1c\x03\x04\x84@'
tRp7817
sa(dp7818
S'trial_loop.thisTrialN'
p7819
I102
sg6370
g6553
sS'block_loop.thisIndex'
p7820
g6364
sg38
S'right'
p7821
sg58
g62
sS'trial_loop.thisN'
p7822
I102
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p7823
g59
(g98
S'f\x00\x00\x00'
tRp7824
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7825
I0
sg6379
g6561
sS'block_loop.thisRepN'
p7826
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7827
I2
sg6385
g6564
sg55
g11
sS'block_loop.thisTrial'
p7828
Nsg69
Vy
sS'block_loop.thisTrialN'
p7829
I0
sg39
F0.91666904248086212
sg34
g752
(S'\x07\xdf\t\x19\r\x1c\t\x01\t\xa0'
tRp7830
sa(dp7831
S'trial_loop.thisTrialN'
p7832
I103
sg6370
g7314
sS'block_loop.thisIndex'
p7833
g6364
sg38
S'left'
p7834
sg58
g62
sS'trial_loop.thisN'
p7835
I103
sg33
g6843
sg63
g64
sS'trial_loop.thisIndex'
p7836
g59
(g98
S'g\x00\x00\x00'
tRp7837
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7838
I0
sg6379
g7321
sS'block_loop.thisRepN'
p7839
I2
sg6382
g6843
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7840
I2
sg6385
g6837
sg55
g11
sS'block_loop.thisTrial'
p7841
Nsg69
Vy
sS'block_loop.thisTrialN'
p7842
I0
sg39
F0.68346044894860825
sg34
g752
(S'\x07\xdf\t\x19\r\x1c\x0f\x00.\xe0'
tRp7843
sa(dp7844
S'trial_loop.thisTrialN'
p7845
I104
sg6370
g6865
sS'block_loop.thisIndex'
p7846
g6364
sg38
S'left'
p7847
sg58
g62
sS'trial_loop.thisN'
p7848
I104
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p7849
g59
(g98
S'h\x00\x00\x00'
tRp7850
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7851
I0
sg6379
g6873
sS'block_loop.thisRepN'
p7852
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7853
I2
sg6385
g6876
sg55
g11
sS'block_loop.thisTrial'
p7854
Nsg69
Vy
sS'block_loop.thisTrialN'
p7855
I0
sg39
F1.0167865598032222
sg34
g752
(S'\x07\xdf\t\x19\r\x1c\x14\x0b\x00h'
tRp7856
sa(dp7857
S'trial_loop.thisTrialN'
p7858
I105
sg6370
g6921
sS'block_loop.thisIndex'
p7859
g6364
sg38
S'right'
p7860
sg58
g62
sS'trial_loop.thisN'
p7861
I105
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p7862
g59
(g98
S'i\x00\x00\x00'
tRp7863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7864
I0
sg6379
g6928
sS'block_loop.thisRepN'
p7865
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7866
I2
sg6385
g6487
sg55
g11
sS'block_loop.thisTrial'
p7867
Nsg69
Vy
sS'block_loop.thisTrialN'
p7868
I0
sg39
F1.1668649046860082
sg34
g752
(S'\x07\xdf\t\x19\r\x1c\x1a\x0b\xcfp'
tRp7869
sa(dp7870
S'trial_loop.thisTrialN'
p7871
I106
sg6370
g7022
sS'block_loop.thisIndex'
p7872
g6364
sg38
S'right'
p7873
sg58
g62
sS'trial_loop.thisN'
p7874
I106
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p7875
g59
(g98
S'j\x00\x00\x00'
tRp7876
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7877
I0
sg6379
g7029
sS'block_loop.thisRepN'
p7878
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7879
I2
sg6385
g6876
sg55
g11
sS'block_loop.thisTrial'
p7880
Nsg69
Vy
sS'block_loop.thisTrialN'
p7881
I0
sg39
F1.2672213339828886
sg34
g752
(S'\x07\xdf\t\x19\r\x1c \x0e\xff\xd8'
tRp7882
sa(dp7883
S'trial_loop.thisTrialN'
p7884
I107
sg6370
g7645
sS'block_loop.thisIndex'
p7885
g6364
sg38
S'left'
p7886
sg58
g62
sS'trial_loop.thisN'
p7887
I107
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p7888
g59
(g98
S'k\x00\x00\x00'
tRp7889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7890
I0
sg6379
g7652
sS'block_loop.thisRepN'
p7891
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7892
I2
sg6385
g6581
sg55
g11
sS'block_loop.thisTrial'
p7893
Nsg69
Vy
sS'block_loop.thisTrialN'
p7894
I0
sg39
F0.71672680330084404
sg34
g752
(S"\x07\xdf\t\x19\r\x1c'\x04YH"
tRp7895
sa(dp7896
S'trial_loop.thisTrialN'
p7897
I108
sg6370
g7740
sS'block_loop.thisIndex'
p7898
g6364
sg38
S'right'
p7899
sg58
g62
sS'trial_loop.thisN'
p7900
I108
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p7901
g59
(g98
S'l\x00\x00\x00'
tRp7902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7903
I0
sg6379
g7747
sS'block_loop.thisRepN'
p7904
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7905
I2
sg6385
g6470
sg55
g11
sS'block_loop.thisTrial'
p7906
Nsg69
Vy
sS'block_loop.thisTrialN'
p7907
I0
sg39
F0.9001068546622264
sg34
g752
(S'\x07\xdf\t\x19\r\x1c-\x00e\x90'
tRp7908
sa(dp7909
S'trial_loop.thisTrialN'
p7910
I109
sg6370
g6715
sS'block_loop.thisIndex'
p7911
g6364
sg38
S'right'
p7912
sg58
g62
sS'trial_loop.thisN'
p7913
I109
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p7914
g59
(g98
S'm\x00\x00\x00'
tRp7915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7916
I0
sg6379
g6723
sS'block_loop.thisRepN'
p7917
I2
sg6382
g6719
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7918
I2
sg6385
g6726
sg55
g11
sS'block_loop.thisTrial'
p7919
Nsg69
Vy
sS'block_loop.thisTrialN'
p7920
I0
sg39
F0.78322387477601296
sg34
g752
(S'\x07\xdf\t\x19\r\x1c2\x0e\xcd\x10'
tRp7921
sa(dp7922
S'trial_loop.thisTrialN'
p7923
I110
sg6370
g6442
sS'block_loop.thisIndex'
p7924
g6364
sg38
S'left'
p7925
sg58
g62
sS'trial_loop.thisN'
p7926
I110
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p7927
g59
(g98
S'n\x00\x00\x00'
tRp7928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7929
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7930
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7931
I2
sg6385
g6453
sg55
g11
sS'block_loop.thisTrial'
p7932
Nsg69
Vy
sS'block_loop.thisTrialN'
p7933
I0
sg39
F0.81679100733163068
sg34
g752
(S'\x07\xdf\t\x19\r\x1c8\x0b\xcb\x88'
tRp7934
sa(dp7935
S'trial_loop.thisTrialN'
p7936
I111
sg6370
g6408
sS'block_loop.thisIndex'
p7937
g6364
sg38
S'right'
p7938
sg58
g62
sS'trial_loop.thisN'
p7939
I111
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p7940
g59
(g98
S'o\x00\x00\x00'
tRp7941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7942
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7943
I2
sg6382
g6418
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7944
I2
sg6385
g6412
sg55
g11
sS'block_loop.thisTrial'
p7945
Nsg69
Vy
sS'block_loop.thisTrialN'
p7946
I0
sg39
F0.68353485948136949
sg34
g752
(S'\x07\xdf\t\x19\r\x1d\x02\t\x81\x98'
tRp7947
sa(dp7948
S'trial_loop.thisTrialN'
p7949
I112
sg6370
g7381
sS'block_loop.thisIndex'
p7950
g6364
sg38
S'left'
p7951
sg58
g62
sS'trial_loop.thisN'
p7952
I112
sg33
g6642
sg63
g64
sS'trial_loop.thisIndex'
p7953
g59
(g98
S'p\x00\x00\x00'
tRp7954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7955
I0
sg6379
g7388
sS'block_loop.thisRepN'
p7956
I2
sg6382
g6642
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7957
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p7958
Nsg69
Vy
sS'block_loop.thisTrialN'
p7959
I0
sg39
F0.93399158619286027
sg34
g752
(S'\x07\xdf\t\x19\r\x1d\x08\x05O`'
tRp7960
sa(dp7961
S'trial_loop.thisTrialN'
p7962
I113
sg6370
g7725
sS'block_loop.thisIndex'
p7963
g6364
sg38
S'left'
p7964
sg58
g62
sS'trial_loop.thisN'
p7965
I113
sg33
g6813
sg63
g64
sS'trial_loop.thisIndex'
p7966
g59
(g98
S'q\x00\x00\x00'
tRp7967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7968
I0
sg6379
g7732
sS'block_loop.thisRepN'
p7969
I2
sg6382
g6813
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7970
I2
sg6385
g6807
sg55
g11
sS'block_loop.thisTrial'
p7971
Nsg69
Vy
sS'block_loop.thisTrialN'
p7972
I0
sg39
F0.70009277083227062
sg34
g752
(S'\x07\xdf\t\x19\r\x1d\x0e\x04\xaf8'
tRp7973
sa(dp7974
S'trial_loop.thisTrialN'
p7975
I114
sg6370
g7037
sS'block_loop.thisIndex'
p7976
g6364
sg38
S'left'
p7977
sg58
g62
sS'trial_loop.thisN'
p7978
I114
sg33
g6540
sg63
g64
sS'trial_loop.thisIndex'
p7979
g59
(g98
S'r\x00\x00\x00'
tRp7980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7981
I0
sg6379
g7044
sS'block_loop.thisRepN'
p7982
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7983
I2
sg6385
g6547
sg55
g11
sS'block_loop.thisTrial'
p7984
Nsg69
Vy
sS'block_loop.thisTrialN'
p7985
I0
sg39
F1.1835417018301087
sg34
g752
(S'\x07\xdf\t\x19\r\x1d\x14\x00\xbb\x80'
tRp7986
sa(dp7987
S'trial_loop.thisTrialN'
p7988
I115
sg6370
g6865
sS'block_loop.thisIndex'
p7989
g6364
sg38
S'left'
p7990
sg58
g62
sS'trial_loop.thisN'
p7991
I115
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p7992
g59
(g98
S's\x00\x00\x00'
tRp7993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7994
I0
sg6379
g6873
sS'block_loop.thisRepN'
p7995
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7996
I2
sg6385
g6876
sg55
g11
sS'block_loop.thisTrial'
p7997
Nsg69
Vy
sS'block_loop.thisTrialN'
p7998
I0
sg39
F0.66681216158758616
sg34
g752
(S'\x07\xdf\t\x19\r\x1d\x1a\x03\xeb\xe8'
tRp7999
sa(dp8000
S'trial_loop.thisTrialN'
p8001
I116
sg6370
g6442
sS'block_loop.thisIndex'
p8002
g6364
sg38
S'left'
p8003
sg58
g62
sS'trial_loop.thisN'
p8004
I116
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p8005
g59
(g98
S't\x00\x00\x00'
tRp8006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8007
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8008
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8009
I2
sg6385
g6453
sg55
g11
sS'block_loop.thisTrial'
p8010
Nsg69
Vy
sS'block_loop.thisTrialN'
p8011
I0
sg39
F0.9501144382666098
sg34
g752
(S'\x07\xdf\t\x19\r\x1d\x1f\x0e\xc1X'
tRp8012
sa(dp8013
S'trial_loop.thisTrialN'
p8014
I117
sg6370
g7645
sS'block_loop.thisIndex'
p8015
g6364
sg38
S'left'
p8016
sg58
g62
sS'trial_loop.thisN'
p8017
I117
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p8018
g59
(g98
S'u\x00\x00\x00'
tRp8019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8020
I0
sg6379
g7652
sS'block_loop.thisRepN'
p8021
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8022
I2
sg6385
g6581
sg55
g11
sS'block_loop.thisTrial'
p8023
Nsg69
Vy
sS'block_loop.thisTrialN'
p8024
I0
sg39
F0.63352613548704539
sg34
g752
(S'\x07\xdf\t\x19\r\x1d%\x0e_\xb0'
tRp8025
sa(dp8026
S'trial_loop.thisTrialN'
p8027
I118
sg6370
g6921
sS'block_loop.thisIndex'
p8028
g6364
sg38
S'right'
p8029
sg58
g62
sS'trial_loop.thisN'
p8030
I118
sg33
g6487
sg63
g64
sS'trial_loop.thisIndex'
p8031
g59
(g98
S'v\x00\x00\x00'
tRp8032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8033
I0
sg6379
g6928
sS'block_loop.thisRepN'
p8034
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8035
I2
sg6385
g6487
sg55
g11
sS'block_loop.thisTrial'
p8036
Nsg69
Vy
sS'block_loop.thisTrialN'
p8037
I0
sg39
F0.78355230746819871
sg34
g752
(S'\x07\xdf\t\x19\r\x1d+\t7`'
tRp8038
sa(dp8039
S'trial_loop.thisTrialN'
p8040
I119
sg6370
g7740
sS'block_loop.thisIndex'
p8041
g6364
sg38
S'right'
p8042
sg58
g62
sS'trial_loop.thisN'
p8043
I119
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8044
g59
(g98
S'w\x00\x00\x00'
tRp8045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8046
I0
sg6379
g7747
sS'block_loop.thisRepN'
p8047
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8048
I2
sg6385
g6470
sg55
g11
sS'block_loop.thisTrial'
p8049
Nsg69
Vy
sS'block_loop.thisTrialN'
p8050
I0
sg39
F0.750261434703134
sg34
g752
(S'\x07\xdf\t\x19\r\x1d1\x06tX'
tRp8051
sa(dp8052
S'trial_loop.thisTrialN'
p8053
I120
sg6370
g6570
sS'block_loop.thisIndex'
p8054
g6364
sg38
S'right'
p8055
sg58
g62
sS'trial_loop.thisN'
p8056
I120
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p8057
g59
(g98
S'x\x00\x00\x00'
tRp8058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8059
I0
sg6379
g6578
sS'block_loop.thisRepN'
p8060
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8061
I2
sg6385
g6581
sg55
g11
sS'block_loop.thisTrial'
p8062
Nsg69
Vy
sS'block_loop.thisTrialN'
p8063
I0
sg39
F3.4168078851216706
sg34
g752
(S'\x07\xdf\t\x19\r\x1d7\x0388'
tRp8064
sa(dp8065
S'trial_loop.thisTrialN'
p8066
I121
sg6370
g6602
sS'block_loop.thisIndex'
p8067
g6364
sg38
S'right'
p8068
sg58
g62
sS'trial_loop.thisN'
p8069
I121
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p8070
g59
(g98
S'y\x00\x00\x00'
tRp8071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8072
I0
sg6379
g6610
sS'block_loop.thisRepN'
p8073
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8074
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p8075
Nsg69
Vy
sS'block_loop.thisTrialN'
p8076
I0
sg39
F1.483519635257835
sg34
g752
(S'\x07\xdf\t\x19\r\x1e\x03\n)\x90'
tRp8077
sa(dp8078
S'trial_loop.thisTrialN'
p8079
I122
sg6370
g6803
sS'block_loop.thisIndex'
p8080
g6364
sg38
S'right'
p8081
sg58
g62
sS'trial_loop.thisN'
p8082
I122
sg33
g6813
sg63
g64
sS'trial_loop.thisIndex'
p8083
g59
(g98
S'z\x00\x00\x00'
tRp8084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8085
I0
sg6379
g6811
sS'block_loop.thisRepN'
p8086
I2
sg6382
g6813
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8087
I2
sg6385
g6807
sg55
g11
sS'block_loop.thisTrial'
p8088
Nsg69
Vy
sS'block_loop.thisTrialN'
p8089
I0
sg39
F0.61681313092049095
sg34
g752
(S'\x07\xdf\t\x19\r\x1e\n\x02\x9b\xf8'
tRp8090
sa(dp8091
S'trial_loop.thisTrialN'
p8092
I123
sg6370
g6536
sS'block_loop.thisIndex'
p8093
g6364
sg38
S'right'
p8094
sg58
g62
sS'trial_loop.thisN'
p8095
I123
sg33
g6547
sg63
g64
sS'trial_loop.thisIndex'
p8096
g59
(g98
S'{\x00\x00\x00'
tRp8097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8098
I0
sg6379
g6544
sS'block_loop.thisRepN'
p8099
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8100
I2
sg6385
g6547
sg55
g11
sS'block_loop.thisTrial'
p8101
Nsg69
Vy
sS'block_loop.thisTrialN'
p8102
I0
sg39
F1.116880699106332
sg34
g752
(S'\x07\xdf\t\x19\r\x1e\x0f\x0c\xb9\xd0'
tRp8103
sa(dp8104
S'trial_loop.thisTrialN'
p8105
I124
sg6370
g6681
sS'block_loop.thisIndex'
p8106
g6364
sg38
S'left'
p8107
sg58
g62
sS'trial_loop.thisN'
p8108
I124
sg33
g6685
sg63
g64
sS'trial_loop.thisIndex'
p8109
g59
(g98
S'|\x00\x00\x00'
tRp8110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8111
I0
sg6379
g6689
sS'block_loop.thisRepN'
p8112
I2
sg6382
g6685
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8113
I2
sg6385
g6692
sg55
g11
sS'block_loop.thisTrial'
p8114
Nsg69
Vy
sS'block_loop.thisTrialN'
p8115
I0
sg39
F1.2501670673245826
sg34
g752
(S'\x07\xdf\t\x19\r\x1e\x15\x0e\xf4 '
tRp8116
sa(dp8117
S'trial_loop.thisTrialN'
p8118
I125
sg6370
g7740
sS'block_loop.thisIndex'
p8119
g6364
sg38
S'right'
p8120
sg58
g62
sS'trial_loop.thisN'
p8121
I125
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8122
g59
(g98
S'}\x00\x00\x00'
tRp8123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8124
I0
sg6379
g7747
sS'block_loop.thisRepN'
p8125
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8126
I2
sg6385
g6470
sg55
g11
sS'block_loop.thisTrial'
p8127
Nsg69
Vy
sS'block_loop.thisTrialN'
p8128
I0
sg39
F0.81682179789640941
sg34
g752
(S'\x07\xdf\t\x19\r\x1e\x1c\x04\x12\xf8'
tRp8129
sa(dp8130
S'trial_loop.thisTrialN'
p8131
I126
sg6370
g6664
sS'block_loop.thisIndex'
p8132
g6364
sg38
S'left'
p8133
sg58
g62
sS'trial_loop.thisN'
p8134
I126
sg33
g6668
sg63
g64
sS'trial_loop.thisIndex'
p8135
g59
(g98
S'~\x00\x00\x00'
tRp8136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8137
I0
sg6379
g6672
sS'block_loop.thisRepN'
p8138
I2
sg6382
g6668
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8139
I2
sg6385
g6675
sg55
g11
sS'block_loop.thisTrial'
p8140
Nsg69
Vy
sS'block_loop.thisTrialN'
p8141
I0
sg39
F0.950144373538933
sg34
g752
(S'\x07\xdf\t\x19\r\x1e"\x01\xc9\x08'
tRp8142
sa(dp8143
S'trial_loop.thisTrialN'
p8144
I127
sg6370
g6632
sS'block_loop.thisIndex'
p8145
g6364
sg38
S'right'
p8146
sg58
g62
sS'trial_loop.thisN'
p8147
I127
sg33
g6642
sg63
g64
sS'trial_loop.thisIndex'
p8148
g59
(g98
S'\x7f\x00\x00\x00'
tRp8149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8150
I0
sg6379
g6640
sS'block_loop.thisRepN'
p8151
I2
sg6382
g6642
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8152
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p8153
Nsg69
Vy
sS'block_loop.thisTrialN'
p8154
I0
sg39
F0.91663910721035791
sg34
g752
(S'\x07\xdf\t\x19\r\x1e(\x01g`'
tRp8155
sa(dp8156
S'trial_loop.thisTrialN'
p8157
I128
sg6370
g6508
sS'block_loop.thisIndex'
p8158
g6364
sg38
S'right'
p8159
sg58
g62
sS'trial_loop.thisN'
p8160
I128
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8161
g59
(g98
S'\x80\x00\x00\x00'
tRp8162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8163
I0
sg6379
g6515
sS'block_loop.thisRepN'
p8164
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8165
I2
sg6385
g6402
sg55
g11
sS'block_loop.thisTrial'
p8166
Nsg69
Vy
sS'block_loop.thisTrialN'
p8167
I0
sg39
F0.86680885445457534
sg34
g752
(S'\x07\xdf\t\x19\r\x1e.\x00\xc78'
tRp8168
sa(dp8169
S'trial_loop.thisTrialN'
p8170
I129
sg6370
g7513
sS'block_loop.thisIndex'
p8171
g6364
sg38
S'right'
p8172
sg58
g62
sS'trial_loop.thisN'
p8173
I129
sg33
g6990
sg63
g64
sS'trial_loop.thisIndex'
p8174
g59
(g98
S'\x81\x00\x00\x00'
tRp8175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8176
I0
sg6379
g7520
sS'block_loop.thisRepN'
p8177
I2
sg6382
g6983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8178
I2
sg6385
g6990
sg55
g11
sS'block_loop.thisTrial'
p8179
Nsg69
Vy
sS'block_loop.thisTrialN'
p8180
I0
sg39
F4.59999406996576
sg34
g752
(S'\x07\xdf\t\x19\r\x1e3\x0ew '
tRp8181
sa(dp8182
S'trial_loop.thisTrialN'
p8183
I130
sg6370
g7740
sS'block_loop.thisIndex'
p8184
g6364
sg38
S'right'
p8185
sg58
g62
sS'trial_loop.thisN'
p8186
I130
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p8187
g59
(g98
S'\x82\x00\x00\x00'
tRp8188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8189
I0
sg6379
g7747
sS'block_loop.thisRepN'
p8190
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8191
I2
sg6385
g6470
sg55
g11
sS'block_loop.thisTrial'
p8192
Nsg69
Vy
sS'block_loop.thisTrialN'
p8193
I0
sg39
F0.85010753889764601
sg34
g752
(S'\x07\xdf\t\x19\r\x1f\x01\x08\xbeH'
tRp8194
sa(dp8195
S'trial_loop.thisTrialN'
p8196
I131
sg6370
g6698
sS'block_loop.thisIndex'
p8197
g6364
sg38
S'right'
p8198
sg58
g62
sS'trial_loop.thisN'
p8199
I131
sg33
g6702
sg63
g64
sS'trial_loop.thisIndex'
p8200
g59
(g98
S'\x83\x00\x00\x00'
tRp8201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8202
I0
sg6379
g6706
sS'block_loop.thisRepN'
p8203
I2
sg6382
g6702
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8204
I2
sg6385
g6709
sg55
g11
sS'block_loop.thisTrial'
p8205
Nsg69
Vy
sS'block_loop.thisTrialN'
p8206
I0
sg39
F0.63343889555471833
sg34
g752
(S'\x07\xdf\t\x19\r\x1f\x07\x06\xedp'
tRp8207
sa(dp8208
S'trial_loop.thisTrialN'
p8209
I132
sg6370
g6649
sS'block_loop.thisIndex'
p8210
g6364
sg38
S'left'
p8211
sg58
g62
sS'trial_loop.thisN'
p8212
I132
sg33
g6564
sg63
g64
sS'trial_loop.thisIndex'
p8213
g59
(g98
S'\x84\x00\x00\x00'
tRp8214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8215
I0
sg6379
g6656
sS'block_loop.thisRepN'
p8216
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8217
I2
sg6385
g6564
sg55
g11
sS'block_loop.thisTrial'
p8218
Nsg69
Vy
sS'block_loop.thisTrialN'
p8219
I0
sg39
F0.7500139697931445
sg34
g752
(S'\x07\xdf\t\x19\r\x1f\r\x02\x07\x88'
tRp8220
sa(dp8221
S'trial_loop.thisTrialN'
p8222
I133
sg6370
g6775
sS'block_loop.thisIndex'
p8223
g6364
sg38
S'left'
p8224
sg58
g62
sS'trial_loop.thisN'
p8225
I133
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p8226
g59
(g98
S'\x85\x00\x00\x00'
tRp8227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8228
I0
sg6379
g6782
sS'block_loop.thisRepN'
p8229
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8230
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p8231
Nsg69
Vy
sS'block_loop.thisTrialN'
p8232
I0
sg39
F0.6835379955573444
sg34
g752
(S'\x07\xdf\t\x19\r\x1f\x12\r\xcf('
tRp8233
sa(dp8234
S'trial_loop.thisTrialN'
p8235
I134
sg6370
g6850
sS'block_loop.thisIndex'
p8236
g6364
sg38
S'left'
p8237
sg58
g62
sS'trial_loop.thisN'
p8238
I134
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p8239
g59
(g98
S'\x86\x00\x00\x00'
tRp8240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8241
I0
sg6379
g6857
sS'block_loop.thisRepN'
p8242
I2
sg6382
g6719
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8243
I2
sg6385
g6726
sg55
g11
sS'block_loop.thisTrial'
p8244
Nsg69
Vy
sS'block_loop.thisTrialN'
p8245
I0
sg39
F0.94984359533373208
sg34
g752
(S'\x07\xdf\t\x19\r\x1f\x18\t\x9c\xf0'
tRp8246
sa(dp8247
S'trial_loop.thisTrialN'
p8248
I135
sg6370
g6371
sS'block_loop.thisIndex'
p8249
g6364
sg38
S'left'
p8250
sg58
g62
sS'trial_loop.thisN'
p8251
I135
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8252
g59
(g98
S'\x87\x00\x00\x00'
tRp8253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8254
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8255
I2
sg6382
g6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8256
I2
sg6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p8257
Nsg69
Vy
sS'block_loop.thisTrialN'
p8258
I0
sg39
F1.0333909420987766
sg34
g752
(S'\x07\xdf\t\x19\r\x1f\x1e\t;H'
tRp8259
sa(dp8260
S'trial_loop.thisTrialN'
p8261
I136
sg6370
g6775
sS'block_loop.thisIndex'
p8262
g6364
sg38
S'left'
p8263
sg58
g62
sS'trial_loop.thisN'
p8264
I136
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p8265
g59
(g98
S'\x88\x00\x00\x00'
tRp8266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8267
I0
sg6379
g6782
sS'block_loop.thisRepN'
p8268
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8269
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p8270
Nsg69
Vy
sS'block_loop.thisTrialN'
p8271
I0
sg39
F0.61678519133420195
sg34
g752
(S'\x07\xdf\t\x19\r\x1f$\nD\xe8'
tRp8272
sa(dp8273
S'trial_loop.thisTrialN'
p8274
I137
sg6370
g6459
sS'block_loop.thisIndex'
p8275
g6364
sg38
S'left'
p8276
sg58
g62
sS'trial_loop.thisN'
p8277
I137
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p8278
g59
(g98
S'\x89\x00\x00\x00'
tRp8279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8280
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8281
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8282
I2
sg6385
g6470
sg55
g11
sS'block_loop.thisTrial'
p8283
Nsg69
Vy
sS'block_loop.thisTrialN'
p8284
I0
sg39
F0.71675474288713303
sg34
g752
(S'\x07\xdf\t\x19\r\x1f*\x04\xe5\xe8'
tRp8285
sa(dp8286
S'trial_loop.thisTrialN'
p8287
I138
sg6370
g6732
sS'block_loop.thisIndex'
p8288
g6364
sg38
S'left'
p8289
sg58
g62
sS'trial_loop.thisN'
p8290
I138
sg33
g6702
sg63
g64
sS'trial_loop.thisIndex'
p8291
g59
(g98
S'\x8a\x00\x00\x00'
tRp8292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8293
I0
sg6379
g6739
sS'block_loop.thisRepN'
p8294
I2
sg6382
g6702
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8295
I2
sg6385
g6709
sg55
g11
sS'block_loop.thisTrial'
p8296
Nsg69
Vy
sS'block_loop.thisTrialN'
p8297
I0
sg39
F1.6335244249021343
sg34
g752
(S'\x07\xdf\t\x19\r\x1f0\x01,\xc8'
tRp8298
sa(dp8299
S'trial_loop.thisTrialN'
p8300
I139
sg6370
g6587
sS'block_loop.thisIndex'
p8301
g6364
sg38
S'left'
p8302
sg58
g62
sS'trial_loop.thisN'
p8303
I139
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p8304
g59
(g98
S'\x8b\x00\x00\x00'
tRp8305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8306
I0
sg6379
g6594
sS'block_loop.thisRepN'
p8307
I2
sg6382
g6418
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8308
I2
sg6385
g6412
sg55
g11
sS'block_loop.thisTrial'
p8309
Nsg69
Vy
sS'block_loop.thisTrialN'
p8310
I0
sg39
F0.71679209070134675
sg34
g752
(S'\x07\xdf\t\x19\r\x1f6\x0bB\xd0'
tRp8311
sa(dp8312
S'trial_loop.thisTrialN'
p8313
I140
sg6370
g6979
sS'block_loop.thisIndex'
p8314
g6364
sg38
S'left'
p8315
sg58
g62
sS'trial_loop.thisN'
p8316
I140
sg33
g6983
sg63
g64
sS'trial_loop.thisIndex'
p8317
g59
(g98
S'\x8c\x00\x00\x00'
tRp8318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8319
I0
sg6379
g6987
sS'block_loop.thisRepN'
p8320
I2
sg6382
g6983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8321
I2
sg6385
g6990
sg55
g11
sS'block_loop.thisTrial'
p8322
Nsg69
Vy
sS'block_loop.thisTrialN'
p8323
I0
sg39
F0.71672737349581439
sg34
g752
(S'\x07\xdf\t\x19\r \x00\x07\x8d\x98'
tRp8324
sa(dp8325
S'trial_loop.thisTrialN'
p8326
I141
sg6370
g7645
sS'block_loop.thisIndex'
p8327
g6364
sg38
S'left'
p8328
sg58
g62
sS'trial_loop.thisN'
p8329
I141
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p8330
g59
(g98
S'\x8d\x00\x00\x00'
tRp8331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8332
I0
sg6379
g7652
sS'block_loop.thisRepN'
p8333
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8334
I2
sg6385
g6581
sg55
g11
sS'block_loop.thisTrial'
p8335
Nsg69
Vy
sS'block_loop.thisTrialN'
p8336
I0
sg39
F0.63338672265126661
sg34
g752
(S'\x07\xdf\t\x19\r \x06\x03\xd4x'
tRp8337
sa(dp8338
S'trial_loop.thisTrialN'
p8339
I142
sg6370
g6715
sS'block_loop.thisIndex'
p8340
g6364
sg38
S'right'
p8341
sg58
g62
sS'trial_loop.thisN'
p8342
I142
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p8343
g59
(g98
S'\x8e\x00\x00\x00'
tRp8344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8345
I0
sg6379
g6723
sS'block_loop.thisRepN'
p8346
I2
sg6382
g6719
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8347
I2
sg6385
g6726
sg55
g11
sS'block_loop.thisTrial'
p8348
Nsg69
Vy
sS'block_loop.thisTrialN'
p8349
I0
sg39
F0.79988385114847915
sg34
g752
(S'\x07\xdf\t\x19\r \x0b\r\xf2P'
tRp8350
sa(dp8351
S'trial_loop.thisTrialN'
p8352
I143
sg6370
g6681
sS'block_loop.thisIndex'
p8353
g6364
sg38
S'left'
p8354
sg58
g62
sS'trial_loop.thisN'
p8355
I143
sg33
g6685
sg63
g64
sS'trial_loop.thisIndex'
p8356
g59
(g98
S'\x8f\x00\x00\x00'
tRp8357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8358
I0
sg6379
g6689
sS'block_loop.thisRepN'
p8359
I2
sg6382
g6685
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8360
I2
sg6385
g6692
sg55
g11
sS'block_loop.thisTrial'
p8361
Nsg69
Vy
sS'block_loop.thisTrialN'
p8362
I0
sg39
F0.6167663748801715
sg34
g752
(S'\x07\xdf\t\x19\r \x11\x0bi\xe0'
tRp8363
sa(dp8364
S'trial_loop.thisTrialN'
p8365
I144
sg6370
g6602
sS'block_loop.thisIndex'
p8366
g6364
sg38
S'right'
p8367
sg58
g62
sS'trial_loop.thisN'
p8368
I144
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p8369
g59
(g98
S'\x90\x00\x00\x00'
tRp8370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8371
I0
sg6379
g6610
sS'block_loop.thisRepN'
p8372
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8373
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p8374
Nsg69
Vy
sS'block_loop.thisTrialN'
p8375
I0
sg39
F1.0668999146982969
sg34
g752
(S'\x07\xdf\t\x19\r \x17\x06\x06\xf8'
tRp8376
sa(dp8377
S'trial_loop.thisTrialN'
p8378
I145
sg6370
g6865
sS'block_loop.thisIndex'
p8379
g6364
sg38
S'left'
p8380
sg58
g62
sS'trial_loop.thisN'
p8381
I145
sg33
g6876
sg63
g64
sS'trial_loop.thisIndex'
p8382
g59
(g98
S'\x91\x00\x00\x00'
tRp8383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8384
I0
sg6379
g6873
sS'block_loop.thisRepN'
p8385
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8386
I2
sg6385
g6876
sg55
g11
sS'block_loop.thisTrial'
p8387
Nsg69
Vy
sS'block_loop.thisTrialN'
p8388
I0
sg39
F0.73350880153884646
sg34
g752
(S'\x07\xdf\t\x19\r \x1d\x07\x8d\x98'
tRp8389
sa(dp8390
S'trial_loop.thisTrialN'
p8391
I146
sg6370
g6587
sS'block_loop.thisIndex'
p8392
g6364
sg38
S'left'
p8393
sg58
g62
sS'trial_loop.thisN'
p8394
I146
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p8395
g59
(g98
S'\x92\x00\x00\x00'
tRp8396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8397
I0
sg6379
g6594
sS'block_loop.thisRepN'
p8398
I2
sg6382
g6418
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8399
I2
sg6385
g6412
sg55
g11
sS'block_loop.thisTrial'
p8400
Nsg69
Vy
sS'block_loop.thisTrialN'
p8401
I0
sg39
F0.76704827960566035
sg34
g752
(S'\x07\xdf\t\x19\r #\x04\x12\xf8'
tRp8402
sa(dp8403
S'trial_loop.thisTrialN'
p8404
I147
sg6370
g6936
sS'block_loop.thisIndex'
p8405
g6364
sg38
S'right'
p8406
sg58
g62
sS'trial_loop.thisN'
p8407
I147
sg33
g6383
sg63
g64
sS'trial_loop.thisIndex'
p8408
g59
(g98
S'\x93\x00\x00\x00'
tRp8409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8410
I0
sg6379
g6943
sS'block_loop.thisRepN'
p8411
I2
sg6382
g6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8412
I2
sg6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p8413
Nsg69
Vy
sS'block_loop.thisTrialN'
p8414
I0
sg39
F0.78331995274311339
sg34
g752
(S'\x07\xdf\t\x19\r )\x00\xd6\xd8'
tRp8415
sa(dp8416
S'trial_loop.thisTrialN'
p8417
I148
sg6370
g6979
sS'block_loop.thisIndex'
p8418
g6364
sg38
S'left'
p8419
sg58
g62
sS'trial_loop.thisN'
p8420
I148
sg33
g6990
sg63
g64
sS'trial_loop.thisIndex'
p8421
g59
(g98
S'\x94\x00\x00\x00'
tRp8422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8423
I0
sg6379
g6987
sS'block_loop.thisRepN'
p8424
I2
sg6382
g6983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8425
I2
sg6385
g6990
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vy
sS'block_loop.thisTrialN'
p8427
I0
sg39
F0.66686062821827363
sg34
g752
(S'\x07\xdf\t\x19\r .\rR('
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g6602
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'right'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g6610
sS'block_loop.thisRepN'
p8437
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8438
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vy
sS'block_loop.thisTrialN'
p8440
I0
sg39
F0.68351632812300522
sg34
g752
(S'\x07\xdf\t\x19\r 4\x08\xe5X'
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g6936
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'right'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6383
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g6943
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8451
I2
sg6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vy
sS'block_loop.thisTrialN'
p8453
I0
sg39
F0.8835389648884302
sg34
g752
(S'\x07\xdf\t\x19\r :\x04x\x88'
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g6760
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'right'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g6668
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g6767
sS'block_loop.thisRepN'
p8463
I2
sg6382
g6668
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8464
I2
sg6385
g6675
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vy
sS'block_loop.thisTrialN'
p8466
I0
sg39
F0.83340137667983072
sg34
g752
(S'\x07\xdf\t\x19\r!\x04\x03 \xc8'
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g7022
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'right'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g7029
sS'block_loop.thisRepN'
p8476
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8477
I2
sg6385
g6876
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vy
sS'block_loop.thisTrialN'
p8479
I0
sg39
F0.86677692349803692
sg34
g752
(S'\x07\xdf\t\x19\r!\n\x01\x15X'
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g6803
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'right'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6813
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g6811
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6813
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8490
I2
sg6385
g6807
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vy
sS'block_loop.thisTrialN'
p8492
I0
sg39
F1.966838561646
sg34
g752
(S'\x07\xdf\t\x19\r!\x0f\x0e\xff\xd8'
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g7065
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'right'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6685
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g7072
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6685
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8503
I2
sg6385
g6692
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vy
sS'block_loop.thisTrialN'
p8505
I0
sg39
F1.2501476806719438
sg34
g752
(S'\x07\xdf\t\x19\r!\x16\x0e\xd4\xe0'
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g7725
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'left'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6807
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g7732
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6813
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8516
I2
sg6385
g6807
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vy
sS'block_loop.thisTrialN'
p8518
I0
sg39
F0.76694535929163976
sg34
g752
(S'\x07\xdf\t\x19\r!\x1d\x03\xf3\xb8'
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g6476
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'left'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g6484
sS'block_loop.thisRepN'
p8528
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8529
I2
sg6385
g6487
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vy
sS'block_loop.thisTrialN'
p8531
I0
sg39
F0.76672355318441987
sg34
g752
(S'\x07\xdf\t\x19\r!#\x00\xf20'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g6732
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'left'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6702
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g6739
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6702
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8542
I2
sg6385
g6709
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vy
sS'block_loop.thisTrialN'
p8544
I0
sg39
F5.5000133995963552
sg34
g752
(S'\x07\xdf\t\x19\r!(\r2\xe8'
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g7381
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'left'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g6636
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g7388
sS'block_loop.thisRepN'
p8554
I2
sg6382
g6642
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8555
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vy
sS'block_loop.thisTrialN'
p8557
I0
sg39
F0.86657849541370524
sg34
g752
(S'\x07\xdf\t\x19\r!3\x06\x06\xf8'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g6476
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'left'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g6484
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8568
I2
sg6385
g6487
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vy
sS'block_loop.thisTrialN'
p8570
I0
sg39
F0.61687556734432292
sg34
g752
(S'\x07\xdf\t\x19\r!9\x04t\xa0'
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g6493
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'right'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g6500
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8581
I2
sg6385
g6453
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vy
sS'block_loop.thisTrialN'
p8583
I0
sg39
F2.0168261884009553
sg34
g752
(S'\x07\xdf\t\x19\r"\x02\x0eS\xf8'
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g6632
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'right'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g6642
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g6640
sS'block_loop.thisRepN'
p8593
I2
sg6382
g6642
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8594
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vy
sS'block_loop.thisTrialN'
p8596
I0
sg39
F0.90010086760958075
sg34
g752
(S'\x07\xdf\t\x19\r"\t\x0f\x1b0'
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g6850
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'left'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g6857
sS'block_loop.thisRepN'
p8606
I2
sg6382
g6719
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8607
I2
sg6385
g6726
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vy
sS'block_loop.thisTrialN'
p8609
I0
sg39
F0.74993414240270795
sg34
g752
(S'\x07\xdf\t\x19\r"\x0f\x0e\x01\xf0'
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g6775
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'left'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g6782
sS'block_loop.thisRepN'
p8619
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8620
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vy
sS'block_loop.thisTrialN'
p8622
I0
sg39
F0.66684637332764396
sg34
g752
(S'\x07\xdf\t\x19\r"\x15\n\xc5\xd0'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g7065
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'right'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g6692
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g7072
sS'block_loop.thisRepN'
p8632
I2
sg6382
g6685
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8633
I2
sg6385
g6692
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vy
sS'block_loop.thisTrialN'
p8635
I0
sg39
F1.0501370180136291
sg34
g752
(S'\x07\xdf\t\x19\r"\x1b\x06Y\x00'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g6536
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'right'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g6540
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g6544
sS'block_loop.thisRepN'
p8645
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8646
I2
sg6385
g6547
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vy
sS'block_loop.thisTrialN'
p8648
I0
sg39
F1.3334432860592642
sg34
g752
(S'\x07\xdf\t\x19\r"!\x07\xa1 '
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g6951
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'right'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g6958
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8659
I2
sg6385
g6436
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vy
sS'block_loop.thisTrialN'
p8661
I0
sg39
F0.71705438069875527
sg34
g752
(S'\x07\xdf\t\x19\r"\'\r/\x00'
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g7381
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'left'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g6642
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g7388
sS'block_loop.thisRepN'
p8671
I2
sg6382
g6642
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8672
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vy
sS'block_loop.thisTrialN'
p8674
I0
sg39
F0.78348331379493175
sg34
g752
(S'\x07\xdf\t\x19\r"-\t;H'
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g6508
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'right'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g6515
sS'block_loop.thisRepN'
p8684
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8685
I2
sg6385
g6402
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vy
sS'block_loop.thisTrialN'
p8687
I0
sg39
F1.1001617074853129
sg34
g752
(S'\x07\xdf\t\x19\r"3\x06x@'
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g6649
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'left'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g6656
sS'block_loop.thisRepN'
p8697
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8698
I2
sg6385
g6564
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vy
sS'block_loop.thisTrialN'
p8700
I0
sg39
F0.85001830327928474
sg34
g752
(S'\x07\xdf\t\x19\r"9\x08w\xf8'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g6732
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'left'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6702
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g6739
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6702
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8711
I2
sg6385
g6709
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vy
sS'block_loop.thisTrialN'
p8713
I0
sg39
F1.433302219658799
sg34
g752
(S'\x07\xdf\t\x19\r#\x03\x06\xa7 '
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g6921
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'right'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g6928
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8724
I2
sg6385
g6487
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vy
sS'block_loop.thisTrialN'
p8726
I0
sg39
F1.1502109153698257
sg34
g752
(S'\x07\xdf\t\x19\r#\t\r\xe2\xb0'
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g7314
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'left'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6843
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g7321
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6843
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8737
I2
sg6385
g6837
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vy
sS'block_loop.thisTrialN'
p8739
I0
sg39
F0.81677903322088241
sg34
g752
(S'\x07\xdf\t\x19\r#\x10\x01W\xc0'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g6732
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'left'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g6709
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g6739
sS'block_loop.thisRepN'
p8749
I2
sg6382
g6702
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8750
I2
sg6385
g6709
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vy
sS'block_loop.thisTrialN'
p8752
I0
sg39
F1.9333823321467207
sg34
g752
(S'\x07\xdf\t\x19\r#\x15\x0eP\x10'
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g7037
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'left'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6540
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g7044
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8763
I2
sg6385
g6547
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vy
sS'block_loop.thisTrialN'
p8765
I0
sg39
F0.66677281808915723
sg34
g752
(S'\x07\xdf\t\x19\r#\x1c\r\xe6\x98'
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g6664
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'left'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6668
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g6672
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6668
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8776
I2
sg6385
g6675
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vy
sS'block_loop.thisTrialN'
p8778
I0
sg39
F1.100120653398335
sg34
g752
(S'\x07\xdf\t\x19\r#"\t;H'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g7513
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'right'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6983
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g7520
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8789
I2
sg6385
g6990
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vy
sS'block_loop.thisTrialN'
p8791
I0
sg39
F0.93367170643614372
sg34
g752
(S'\x07\xdf\t\x19\r#(\x0b;\x00'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g7725
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'left'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g6807
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g7732
sS'block_loop.thisRepN'
p8801
I2
sg6382
g6813
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8802
I2
sg6385
g6807
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vy
sS'block_loop.thisTrialN'
p8804
I0
sg39
F0.66678650278481655
sg34
g752
(S'\x07\xdf\t\x19\r#.\n\xd9X'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g6553
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'right'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g6561
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8815
I2
sg6385
g6564
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vy
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.7500096933254099
sg34
g752
(S'\x07\xdf\t\x19\r#4\x06.\x08'
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g7065
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'right'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g6692
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g7072
sS'block_loop.thisRepN'
p8827
I2
sg6382
g6685
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8828
I2
sg6385
g6692
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vy
sS'block_loop.thisTrialN'
p8830
I0
sg39
F1.1168299516939442
sg34
g752
(S'\x07\xdf\t\x19\r#:\x02\xee\x00'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g6476
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'left'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6487
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g6484
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6480
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8841
I2
sg6385
g6487
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vy
sS'block_loop.thisTrialN'
p8843
I0
sg39
F0.81681181947169534
sg34
g752
(S'\x07\xdf\t\x19\r$\x04\x05,8'
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g6681
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'left'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6685
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g6689
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6685
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8854
I2
sg6385
g6692
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vy
sS'block_loop.thisTrialN'
p8856
I0
sg39
F0.65014534287001879
sg34
g752
(S'\x07\xdf\t\x19\r$\n\x02\xe2H'
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g7381
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'left'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6642
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g7388
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6642
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8867
I2
sg6385
g6636
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vy
sS'block_loop.thisTrialN'
p8869
I0
sg39
F0.73349882311595138
sg34
g752
(S'\x07\xdf\t\x19\r$\x0f\r:\xb8'
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g7725
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'left'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g6813
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g7732
sS'block_loop.thisRepN'
p8879
I2
sg6382
g6813
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8880
I2
sg6385
g6807
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vy
sS'block_loop.thisTrialN'
p8882
I0
sg39
F0.61683223247564456
sg34
g752
(S'\x07\xdf\t\x19\r$\x15\t\xc0\x18'
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g6698
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'right'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g6702
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g6706
sS'block_loop.thisRepN'
p8892
I2
sg6382
g6702
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8893
I2
sg6385
g6709
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vy
sS'block_loop.thisTrialN'
p8895
I0
sg39
F1.3501001263557555
sg34
g752
(S'\x07\xdf\t\x19\r$\x1b\x04]0'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g6459
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'left'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8905
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8906
I2
sg6385
g6470
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vy
sS'block_loop.thisTrialN'
p8908
I0
sg39
F1.0334362726534891
sg34
g752
(S'\x07\xdf\t\x19\r$!\n-x'
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g6493
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'right'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g6500
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8919
I2
sg6385
g6453
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vy
sS'block_loop.thisTrialN'
p8921
I0
sg39
F1.0500936831431318
sg34
g752
(S"\x07\xdf\t\x19\r$'\x0b7\x18"
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g6425
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'left'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8932
I2
sg6385
g6436
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vy
sS'block_loop.thisTrialN'
p8934
I0
sg39
F0.65021120046731085
sg34
g752
(S'\x07\xdf\t\x19\r$-\x0c\x7f8'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g6391
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'left'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8945
I2
sg6385
g6402
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vy
sS'block_loop.thisTrialN'
p8947
I0
sg39
F0.85023041605927574
sg34
g752
(S'\x07\xdf\t\x19\r$3\x07\xd3\xe8'
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g6850
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'left'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6719
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g6857
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6719
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8958
I2
sg6385
g6726
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vy
sS'block_loop.thisTrialN'
p8960
I0
sg39
F1.2165186818911025
sg34
g752
(S'\x07\xdf\t\x19\r$9\x06\x03\x10'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g6979
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'left'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g6990
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g6987
sS'block_loop.thisRepN'
p8970
I2
sg6382
g6983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8971
I2
sg6385
g6990
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vy
sS'block_loop.thisTrialN'
p8973
I0
sg39
F0.96683742125605932
sg34
g752
(S'\x07\xdf\t\x19\r%\x03\t\xac\x90'
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g6371
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'left'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g6383
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8983
I2
sg6382
g6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8984
I2
sg6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vy
sS'block_loop.thisTrialN'
p8986
I0
sg39
F0.76677144962013699
sg34
g752
(S'\x07\xdf\t\x19\r%\t\t\xc4\x00'
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g7645
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'left'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6581
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g7652
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8997
I2
sg6385
g6581
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vy
sS'block_loop.thisTrialN'
p8999
I0
sg39
F0.75005958544352325
sg34
g752
(S'\x07\xdf\t\x19\r%\x0f\x06\xc6`'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g6664
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'left'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g6668
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g6672
sS'block_loop.thisRepN'
p9009
I2
sg6382
g6668
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9010
I2
sg6385
g6675
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vy
sS'block_loop.thisTrialN'
p9012
I0
sg39
F0.81684432062320411
sg34
g752
(S'\x07\xdf\t\x19\r%\x15\x03\x86X'
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g6979
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'left'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g6990
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g6987
sS'block_loop.thisRepN'
p9022
I2
sg6382
g6983
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9023
I2
sg6385
g6990
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vy
sS'block_loop.thisTrialN'
p9025
I0
sg39
F1.5666989207347797
sg34
g752
(S'\x07\xdf\t\x19\r%\x1b\x01<h'
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g6493
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'right'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g6500
sS'block_loop.thisRepN'
p9035
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9036
I2
sg6385
g6453
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vy
sS'block_loop.thisTrialN'
p9038
I0
sg39
F0.7002065248634608
sg34
g752
(S'\x07\xdf\t\x19\r%!\n`@'
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g6698
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'right'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g6702
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g6706
sS'block_loop.thisRepN'
p9048
I2
sg6382
g6702
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9049
I2
sg6385
g6709
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vy
sS'block_loop.thisTrialN'
p9051
I0
sg39
F1.1500945954576309
sg34
g752
(S"\x07\xdf\t\x19\r%'\x06.\x08"
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g6408
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'right'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g6416
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6418
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9062
I2
sg6385
g6412
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vy
sS'block_loop.thisTrialN'
p9064
I0
sg39
F1.1834359305357793
sg34
g752
(S'\x07\xdf\t\x19\r%-\x08\xe5X'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g6649
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'left'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g6656
sS'block_loop.thisRepN'
p9074
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9075
I2
sg6385
g6564
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vy
sS'block_loop.thisTrialN'
p9077
I0
sg39
F0.83336003749718657
sg34
g752
(S'\x07\xdf\t\x19\r%3\x0cPX'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g6508
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'right'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g6515
sS'block_loop.thisRepN'
p9087
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9088
I2
sg6385
g6402
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vy
sS'block_loop.thisTrialN'
p9090
I0
sg39
F0.78398394557007123
sg34
g752
(S'\x07\xdf\t\x19\r%9\nD\xe8'
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vl
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vy
sa(dp9098
g63
g64
sg43
I63
sg56
Vl
sg57
Vn
sg42
I537
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vy
sa(dp9099
g63
g64
sg43
I63
sg55
g11
sg56
Vl
sg45
F2.3300000000000001
sg42
I537
sg49
F0.01
sg57
Vn
sg58
g62
sg44
I00
sg48
I25
sg47
g596
sg51
F30.370000000000001
sg46
F1.5000000000000002
sg65
g66
sg67
g68
sg50
I0
sg69
Vy
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I80765776
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00?\x00\x00\x00\x00\x00\x00\x00?\x00\x00\x80?\x1f\x85\xeb>\\\x8f\x82?\n\xd7\xa3<\x00\x00\x00\x00\n\xd7\xa3=H\xe1z?\x00\x00\x00\x00\x00\x00\xc0?q=\xca?\x00\x00\x00?\\\x8f\x82?\x00\x00\x00?\x00\x00\x00?fff?q=\x8a?\xa4p\xbd?\x00\x00\x00\x00\x8f\xc2u?\xcd\xcc\xcc=\xcd\xcc\x8c?\x8f\xc2u>\xb8\x1e\x85?\xd7\xa3p?\\\x8f\x82?\x00\x00\xc0?\n\xd7\xa3<H\xe1\xba?\xcd\xccL?)\\\x0f>\xb8\x1e\x85?\xc3\xf5(?\n\xd7#@H\xe1z?=\n\xd7>\xcd\xccL?\x00\x00\xc0?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S'\x96CS@u\x93H@u\x93\x08@\x87\x16\x01@\xee|\x07@\xaa\xf1\xb6@u\x93X@b\x100@u\x93\x18@\x87\x16\x01@\xdb\xf9>@\xee|\xff@\xdb\xf9N@T\xe3\x1d@\xbaI\x04@ff\xee@\xfe\xd4\xbc@\xc9vv@\xcb\xa1\xa9@\xb2\x9d%A\xdb\xf9N@\x96CS@T\xe3\x1d@\xa8\xc6{@\x87\x16\x11@d;\x93@\x0e-B@\x0e-R@b\x10\x00@\x0e-B@B`\xf5?\xaa\xf1\x02A!\xb0J@u\x93(@\xa8\xc6K@\x87\x16\xa9@1\x08\xf0@u\x93(@\xf8S\xf3?\x0e-\xa2?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00@A\x00\x00\x80@\x00\x00\xd0A\x00\x00\xc0A\x00\x00\x08B\x00\x00\x80A\x00\x000A\x00\x00\xa8A\x00\x00\x0cB\x00\x00\x10A\x00\x00\xa0@\x00\x00@@\x00\x00\xb0A\x00\x00 A\x00\x00\xd8A\x00\x00\x00\x00\x00\x00pA\x00\x00\x14B\x00\x00\xc8A\x00\x00\x00A\x00\x00\x00B\x00\x00\xa0A\x00\x00\x18B\x00\x00\x10B\x00\x00\xb8A\x00\x00PA\x00\x00\xe0A\x00\x00\x04B\x00\x00\xe0@\x00\x00\x90A\x00\x00\x88A\x00\x00\xc0@\x00\x00\x00@\x00\x00\xe8A\x00\x00\xf8A\x00\x00\x1cB\x00\x00\x80?\x00\x00\x98A\x00\x00`A\x00\x00\xf0A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'\x9a\x99\xd9?\xcd\xcc\xcc?\xcd\xcc\x8c?ff\xa6?\xcd\xcc\xcc?\xcd\xcc\x8c?ff\xe6?33\xb3?\x9a\x99\xd9?\x9a\x99\xd9?ff\xe6?\x00\x00\xc0?33\xf3?\x9a\x99\xd9?\xcd\xcc\xcc?ff\xa6?\x00\x00\xc0?ff\xa6?\xcd\xcc\xcc?\x00\x00\x00@\x9a\x99\xd9?\x9a\x99\x99?\x9a\x99\x99?\x9a\x99\xd9?ff\xe6?\x9a\x99\x99?ff\xe6?33\xf3?\x9a\x99\x99?\x9a\x99\xd9?ff\xe6?\x9a\x99\x99?\xcd\xcc\x8c?ff\xe6?\xcd\xcc\xcc?ff\xe6?ff\xe6?\x9a\x99\xd9?ff\xa6?\x00\x00\xc0?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'\x0f\x00\x00\x00$\x00\x00\x00 \x00\x00\x00\x0b\x00\x00\x00\x01\x00\x00\x00\n\x00\x00\x00\x1f\x00\x00\x00\x1c\x00\x00\x00\x13\x00\x00\x00\t\x00\x00\x00\r\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x00&\x00\x00\x00\x10\x00\x00\x00\x05\x00\x00\x00\x1e\x00\x00\x00\x1d\x00\x00\x00%\x00\x00\x00\x15\x00\x00\x00\x07\x00\x00\x00\x0c\x00\x00\x00\x18\x00\x00\x00\x03\x00\x00\x00\x12\x00\x00\x00\x02\x00\x00\x00\x0e\x00\x00\x00\x1a\x00\x00\x00!\x00\x00\x00\'\x00\x00\x00"\x00\x00\x00\x14\x00\x00\x00\x1b\x00\x00\x00\x04\x00\x00\x00\x08\x00\x00\x00\x17\x00\x00\x00\x11\x00\x00\x00\x16\x00\x00\x00#\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g186
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g130
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g284
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g270
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g340
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g214
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g179
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g249
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g347
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g165
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g137
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g123
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g256
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g172
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g291
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g102
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g207
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g361
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g277
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g158
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g326
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g242
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g368
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g354
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g263
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g193
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g298
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g333
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g151
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g228
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g221
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g144
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g116
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g305
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g319
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g375
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g109
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g235
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g200
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g312
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I80765776
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xc0@\x00\x00\xc0@33\x83@ff\x06@\x9a\x99\xa9@\x9a\x99\x99@33\xb3?33\xb3@\x00\x00\xc0@\x9a\x99y@\x9a\x999@\x00\x00\xa0@\x00\x00\xc0@ff\x96@33\xb3@333@\xcd\xcc\x9c@\x00\x00\xc0@33\xb3?\xcd\xcc\x9c@ff\xb6@\x9a\x99\xa9@\x00\x00 @\xcd\xcc\x8c?\x00\x00\xc0@\x00\x00\x90@\x00\x00\x00@\x00\x00@@\xcd\xcc\x9c@ff\x86@\x00\x00\xb0@\x9a\x99y@\x00\x00@@33\xa3@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\x80?\x00\x00\xa0@\x00\x00\xc0@33\xf3?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S'^\x99Y@L"\x12@s\xef\x0e@\x7f\xbb\xc3@\xb4W\x15@jU\x05@V\x86\xf0@UH\xe4?\xb0#B@\xc7Ad@{\xac\n@\xb1\xcf\x0c@\xfa\xd0\xac?-{\xd7?I\x12\xb1?mU\x15@.\xbe\xbb?w \x91?\xbfT9A\xc34\x13@\xd3\x11\xd1?\xb2\x87\xa8?*D\xc4?\x03\x121@\x1bN\xb5?\x1c\x11!@\x94e6@6\\\x05@\xb7\x89\x08@k\x11A@DD\xc4@\xd2\xcdL@0g6@|\xcf\xec?\xe7#\x82?\xb3W\x95?\xc5w\x07A\x8ad\xc6?\xee\xf1\x0e@\xc0\xef\x86@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'ff\x86@\x9a\x99Y@\x00\x00@@\x00\x00@@33s@33S@33S@ffF@ff\x86@\x9a\x999@fff@33\x83@fff@333@\xcd\xccL@\x9a\x99Y@\x9a\x99Y@\x00\x00@@\x00\x00`@\x00\x00`@\x9a\x99y@ffF@ffF@\x9a\x999@33S@\xcd\xccl@ffF@\x9a\x99y@\x9a\x999@333@333@\x00\x00\x80@\x00\x00\x80@33\x83@\x9a\x999@33s@33\x83@\x9a\x99\x89@33S@\x00\x00@@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\xe0-\x1b\x03\x80\xb0\x9f\r\x80OO\r\xa0{Q\r\x80zQ\r`\xdf\x9d\r\x80\xdf\x9d\r\xa0\xdc\x9d\r\xc0\xdd\x9d\r`\xdc\x9d\r\xc0{Q\r\xe0OO\r`OO\r@\xdf\x9d\r\xc0\xe0O\r`\xe0O\r\xa0\xdf\x9d\r\x00tQ\r\x80JO\r\xe0zQ\r`xQ\r`zP\r`\xe1O\r`P\x1c\x03\xc0Q\x1c\x03\x80P\x1c\x03 Q\x1c\x03\x80U\x1c\x03\x80R\x1c\x03\xe0R\x1c\x03@R\x1c\x03\x00R\x1c\x03 S\x1c\x03\xe0Q\x1c\x03\xa0Q\x1c\x03\xa0P\x1c\x03@S\x1c\x03\x80\xe0O\r P\x1c\x03 R\x1c\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S'\xd5x\x0bA\xf8S\x93?\xdb\xf9\xae?\xf8S\xb3?P\x8d\x97?m\xe7{?\xb6\xf3\x9d?\x1dZ\x84?\xb6\xf3]?\xf0\xa7f?\x06\x81U?\xdb\xf9\xee?\xa8\xc6\xfb?\xa0\x1ao?9\xb4H?\xe9&\x91?\xf0\xa7&?\xb6\xf3]?V\x0e\r??5\x1e?y\xe9\xe6>\x1dZD?#\xdb\x19?y\xe9\xe6>\x83\xc0*?\x06\x81\x15?\xdb\xf9\x0e@P\x8dG@\xc5 \xe0?!\xb0\x1a@\xa0\x1ao?\x0e-\x02@V\x0eM?\xb6\xf3\x9d?\x1dZ\xa4?\xb6\xf3\x9d?\x83\xc0\xca?u\x93\x88?\xdb\xf9\x8e?V\x0eM?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I80765776
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'\xf0b\xe2\r F\x1c\x03\x80F\x1c\x03\x08d\xe2\r F\x1c\x03PF\x1c\x03hc\xe2\r\x90c\xe2\r\x00A\xe2\r\x08d\xe2\r\x80F\x1c\x03hc\xe2\r\x90c\xe2\r\xf0b\xe2\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S'\xa8k^\x04P|\x00\x05h\xc9X\x02P\x90\xff\x04X\x94\xff\x04(\x9d\xff\x048\x9c\xff\x04\xf8\x90\xff\x04X\x97\xff\x04\xd0\x94\xff\x04\xf0\x9b\xff\x04\x10\x91\xff\x04(\x94\xff\x04 \x9f\xff\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g777
sg82
g778
sg83
g782
sg84
g783
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g755
sg82
g788
sg83
g760
sg84
g792
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g797
sg82
g798
sg83
g802
sg84
g803
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g808
sg82
g809
sg83
g813
sg84
g814
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g819
sg82
g820
sg83
g824
sg84
g825
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g797
sg82
g830
sg83
g802
sg84
g834
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g777
sg82
g839
sg83
g782
sg84
g843
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g766
sg82
g848
sg83
g771
sg84
g852
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g808
sg82
g857
sg83
g813
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g819
sg82
g866
sg83
g824
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g743
sg82
g875
sg83
g748
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I80765776
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I80765776
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S"\xa0q\xe4\r\x10q\xe4\r@&\xe4\r\xa0q\xe4\r\xb8c\xe4\rx&\xe4\r\x00\t\x1a\x03\xe0c\xe4\r '\xe4\r\x08d\xe4\r`r\xe4\r\x08d\xe4\r@&\xe4\rXd\xe4\r0d\xe4\r\x80d\xe4\r\xe0c\xe4\rx&\xe4\r@\x06\x1a\x03\x08d\xe4\r@q\xe4\r\xa0R\x1c\x03@&\xe4\r\xc0r\xe4\r\x80d\xe4\r\xa8d\xe4\r\xe8e\xe4\rpq\xe4\r0d\xe4\rpe\xe4\r\xe0c\xe4\r\xe8&\xe4\r\xf8d\xe4\r`r\xe4\r@&\xe4\r\xb0&\xe4\r e\xe4\rpq\xe4\r\xa8d\xe4\r@q\xe4\r\xf8d\xe4\r@q\xe4\r\xa8d\xe4\r\xe8e\xe4\r\x00Q\x1c\x03\xd0q\xe4\rx&\xe4\r@q\xe4\r e\xe4\r@q\xe4\rpq\xe4\rXd\xe4\r\xa0R\x1c\x03\xb8c\xe4\r\xf0r\xe4\r\xe8&\xe4\r\xd0d\xe4\r\xe0p\xe4\r\x80d\xe4\r\x90'\xe4\r\xb0&\xe4\r\x10q\xe4\r\xe8&\xe4\r\x90'\xe4\r\xf8d\xe4\r\x08d\xe4\r\x00Q\x1c\x030d\xe4\rx&\xe4\r\x10q\xe4\r\xc0e\xe4\r\xb0&\xe4\r\xa8d\xe4\rx&\xe4\r\xe8&\xe4\rX'\xe4\r\xa0R\x1c\x03pe\xe4\r\xa8d\xe4\r\xd0d\xe4\rX'\xe4\r\xf8d\xe4\rXd\xe4\r\xc0r\xe4\r@q\xe4\r e\xe4\r0d\xe4\r\x10f\xe4\r@&\xe4\r '\xe4\r\xa8d\xe4\r\x80d\xe4\r\xf8d\xe4\r\xd0d\xe4\r\xf8d\xe4\r\x00Q\x1c\x03\xa8d\xe4\r@&\xe4\r\xc0r\xe4\r\xb8c\xe4\r\xe0c\xe4\rx&\xe4\rpe\xe4\r '\xe4\r\xe0p\xe4\r\x80d\xe4\r\xd0d\xe4\r\xe0c\xe4\r0d\xe4\r\xf8d\xe4\r\xb0&\xe4\rpe\xe4\r\x10q\xe4\r\x98e\xe4\r\x10q\xe4\rXd\xe4\r@q\xe4\rx&\xe4\r\xb8c\xe4\r\xd0d\xe4\r\xe0c\xe4\r\x10f\xe4\rpq\xe4\r\xb8c\xe4\r\x08d\xe4\r\x00Q\x1c\x03\xf0r\xe4\r\xa8d\xe4\r\x80d\xe4\r\xb8c\xe4\rx&\xe4\r\x80d\xe4\r\xf0r\xe4\r\x00r\xe4\rXd\xe4\r\xe0p\xe4\r\x90'\xe4\r\xe8&\xe4\rpq\xe4\r\x00Q\x1c\x03@q\xe4\r\x80d\xe4\rXd\xe4\r\xa0R\x1c\x03\xe8&\xe4\r\xe0p\xe4\r0d\xe4\r\xd0d\xe4\r e\xe4\r\x10q\xe4\r\x00Q\x1c\x030r\xe4\r\xa0R\x1c\x03\xe0\n\x1a\x03\xf0r\xe4\r@q\xe4\r0r\xe4\r e\xe4\rXd\xe4\r\xb0&\xe4\r\xe0\n\x1a\x03\x00Q\x1c\x03\x10q\xe4\r\xf0r\xe4\r\xd0d\xe4\r\xd0q\xe4\r\xf8d\xe4\r\x00Q\x1c\x030r\xe4\r\xd0d\xe4\rx&\xe4\r\x10q\xe4\r@&\xe4\r\xf8d\xe4\r\x10f\xe4\r@&\xe4\r\xe0p\xe4\r\xb0&\xe4\r\xa0R\x1c\x03\x00Q\x1c\x03\x10f\xe4\r\xe0c\xe4\r\xe0p\xe4\r\xa0R\x1c\x03Xd\xe4\r\xe8&\xe4\r e\xe4\r@&\xe4\r\xf8d\xe4\rXd\xe4\r\xe0c\xe4\r0d\xe4\r\xb0&\xe4\r\xe0c\xe4\r\x08d\xe4\r@q\xe4\r\xe0p\xe4\r0d\xe4\r\xe0p\xe4\r\x08d\xe4\r"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S'\x80\xe4O\r\x00\xc5\x1b\x03\xc0\xc3\x1b\x03@\xc5\x1b\x03\xa0\xcf\x1b\x03`\xcf\x1b\x03 \xcf\x1b\x03\x80\xcf\x1b\x03\xe0\xc4\x1b\x03\xc0\xcf\x1b\x03\x80\xce\x1b\x03`\xca\x1b\x03\xa0\xc0\x1b\x03\x80\xc3\x1b\x03 \xc9\x1b\x03\xc0\xc5\x1b\x03\xc0\xca\x1b\x03 \xcb\x1b\x03\xa0\xc4\x1b\x03 \xc6\x1b\x03\x00\xce\x1b\x03\x80\xc5\x1b\x03\x00\xca\x1b\x03@\xca\x1b\x03`\xc4\x1b\x03@\xc8\x1b\x03\x80\xca\x1b\x03@\xcf\x1b\x03`\xcd\x1b\x03\xa0\xc8\x1b\x03\xe0\xcc\x1b\x03@\xc9\x1b\x03 \xc4\x1b\x03@\xc3\x1b\x03@\xcb\x1b\x03@\xc6\x1b\x03\xe0\xc9\x1b\x03\x80\xcd\x1b\x03 \xcc\x1b\x03\xe0\xca\x1b\x03\xa0\xca\x1b\x03\x00\xcc\x1b\x03\xe0\xcb\x1b\x03`\xc9\x1b\x03\xa0\xce\x1b\x03\xc0\xc8\x1b\x03\x80\xcc\x1b\x03\x00\xcb\x1b\x03 \xc8\x1b\x03`\xcb\x1b\x03\xa0\xc9\x1b\x03`\xc6\x1b\x03\xe0\xcf\x1b\x03\x00\xc9\x1b\x03\x80\xcb\x1b\x03\xc0\xc9\x1b\x03\x80r\xa0\r\xa0\xcb\x1b\x03`\xc8\x1b\x03\xe0bD\r\x00cD\r gD\r\xe0fD\r`gD\r\x80cD\r@fD\r\x80gD\r\xa0gD\r\xc0gD\r kD\r\x00kD\r\xa0cD\r\xc0kD\r\x80kD\r`fD\r`lD\r\x00lD\r\xa0lD\r\x80lD\r\x80fD\r mD\r@mD\r@cD\r\xa0bD\r\x00fD\r@kD\r\xe0kD\r\xc0bD\r\x80mD\r@gD\r fD\r\xe0oD\r`mD\r@`D\r\xe0gD\r `D\r\x00l\x1a\x03\x80\xc6\x1b\x03\x00gD\r\xa0R\xc0\x04\xe0Q\xc0\x04\xe0R\xc0\x04\xc0R\xc0\x04\x80Q\xc0\x04\x00S\xc0\x04`S\xc0\x04\x80S\xc0\x04 Q\xc0\x04\xc0S\xc0\x04\xa0S\xc0\x04\xa0P\xc0\x04 T\xc0\x04\x00T\xc0\x04\x00R\xc0\x04\x80T\xc0\x04`T\xc0\x04`R\xc0\x04\xe0T\xc0\x04\xc0T\xc0\x04\xe0\xc8\x1b\x03@S\xc0\x04@U\xc0\x04\xa0Q\xc0\x04\xa0U\xc0\x04@T\xc0\x04`U\xc0\x04\xc0U\xc0\x04\xe0S\xc0\x04`Q\xc0\x04 U\xc0\x04\x80V\xc0\x04\xa0V\xc0\x04\xc0Q\xc0\x04@Q\xc0\x04\x00W\xc0\x04 W\xc0\x04\x80U\xc0\x04@R\xc0\x04\x00U\xc0\x04@W\xc0\x04\xe0P\xc0\x04\xa0T\xc0\x04\x00X\xc0\x04 X\xc0\x04\xc0W\xc0\x04@V\xc0\x04\xe0V\xc0\x04\xe0W\xc0\x04\xc0X\xc0\x04\x00V\xc0\x04\x80X\xc0\x04 V\xc0\x04\x80R\xc0\x04 S\xc0\x04@Y\xc0\x04\xa0Y\xc0\x04\x00Q\xc0\x04 Y\xc0\x04\xc0Y\xc0\x04\x00Z\xc0\x04@Z\xc0\x04`Z\xc0\x04 R\xc0\x04\xa0W\xc0\x04 Z\xc0\x04\xe0Z\xc0\x04\x00[\xc0\x04\x80Y\xc0\x04\xc0Z\xc0\x04`Y\xc0\x04\x80[\xc0\x04\x00Y\xc0\x04\xa0X\xc0\x04\xc0P\xc0\x04\x80Z\xc0\x04\xe0U\xc0\x04\xa0Z\xc0\x04`\\\xc0\x04\x80\\\xc0\x04 \\\xc0\x04\xe0X\xc0\x04@X\xc0\x04\xe0\\\xc0\x04\xa0\\\xc0\x04@\\\xc0\x04\xa0[\xc0\x04@[\xc0\x04`[\xc0\x04 ]\xc0\x04`X\xc0\x04\x00^\xc0\x04`W\xc0\x04\xc0V\xc0\x04\x00\\\xc0\x04`^\xc0\x04`]\xc0\x04\xc0\\\xc0\x04\xa0^\xc0\x04\xe0Y\xc0\x04 [\xc0\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S"O\x020@\x99\x8a\xe8?sX\x95?\xb4\x8a\xc8?wi\x16@\xb2\x88X@\x9d#\x12@\xd2\x05\xa0?\xab5\x13@\xc76\x93?\xb0\xb7\xbb?\xcc\xab*@\xa8\x16\x91?\xb6\xe1\xbd?J\xa8\xaa?\xd8\xf4\xae?!\x04\x80?IvG@*\xd0\xcc?\x16\x86\xb7?\xa1F\xe4?B\xd3\x8c?\xa6\x9f\xb9?\xd2\x06\xc0?\xb4H\xe4?\xf2\x17\xb1?\x17$\xc2?\x99\xae\xea?\xccQ\x15@&\x06\xc0?\xd4\xd1\x8c?!i\x06@?l\xa6?\xad-\xb3?F\x06 @\xc3J\xe4?\xc3\x9e\xf9?\xbc\x9c\xf9?\x9e\x02\xe0?~\xb1\x8a?\x08\x9e\x99?\xc7\x13\xd1?\xdf5\xb3?\x0c\x04\xa0?\xdd\x13\x11@4\xb1\xaa?\xe1\xdd\x9d?+\x03\xa0?\x90\xc2\x9b?Z\xcfj?\xe7\xdf\x1d@\xadi\xa6?=\xf2\x8e?\xe4\xf4\xee?\x1c\x00\xaf?\x85@\xb3?\x9d&\x82?\xb4j\x86?a[\xf5?\xf3\x07\x80?\xe6\xc1\x9b?\x7f6\xb3?\x7f\xac\x1a@\x00\xad\xca?\x9fK\xa4?Ml\xa6?\xa3\xc1\xbb?\xa2\x93\xd9?\xd0T\x95?\xf4\x00\xcf?Vl\xa6?\xfd\xd0\xac?\x10\xcf\xac?\x83\xcd\xac?\xc3\x9a\xa8?uE\x14@\x0b\xd1\xec?\xd9\xef.@\xce\x84w?\xee\x9b\x88?$\xad\xaa?\x03\xe1\x9d?\x94$\xc2?9\xae\x8a?sh\x95?\xb3\xb0\xaa?3\xda\xbd?\xef\xe1]?h\xf1\xce?\xf9\x17\x91?\xbd\x03\x80?E\xae\x8a?\xfa\x9fY?\xd29s?0\xc8;?%\x9a\x88?d8\xf3?1\x9fY?\xc2\x02\xc0?\x81\x8c\xc8?\xcd9Q?\x99T\x95?\xd7Y\xd5?\x9aj\x86?1i\xc6?\x18U\xa4?\xcb\xacY?\xc6\x96H?\x1c\x94\xb9?\xeblf?\xd8J\xa4?\xf1\xef\x0e@\xca}\xb7?\xf1D\x84?\x91(\x82?\xebJ\xc4?a[\xb5?~G\x84?#_U?l\xff\x9f?\x19K\x84?\xb7\xd2\x8c?\x9c\x13\xb1?\x94\x02\x80?\xd8J\xa4?i\x8f\x88?\xd1J\x84?Hpf?\xdd\xf1\xce?[\x8b\xa8?\x9b\x05@?\xe3\xf2.@1\xd0\x8c?\xbf73?\xd0\x8b\x88?B\x99H?{x7@L\xb0\xaa?\x839\x93?\xf2\x817?1\xd3\x8c?\xb3Y\x95?\x04\xb1\x8a?\xd5\xdf\r@\x08\xf3\x8e?W\xb7j?\xab\xba\x9b?\x14\xdaL?)\xfen?\xa6\xbf{?\xc9\xa7Y?j\xb7j?\xc3\xcf\x8c?\xa2\xd2\x8c?\x06G\xe4?\x91\xc9{?\xdb`U?\x88uf?l\xf8n?\x94\xad\xaa?\xb8\x8d\xa8?\t\xb2j?W\xf5n?\xa3k\xc6?\x14G\x84?0\x867?\x88\xe4]?\xdaLD?\xa7\xcf\x8c?\x07of?7\xc1\x9b?\xb7KD?\x90J\xa4?a(b?\x1aZ\xf5?\xa0\xc9;?\x1c{\x97?\x02\x04\x80?0X\x95?6\xb7*?\xd0V\xc4?-\x90H?4\xaf\xaa?\xf7\xd5L?Z\x04\xa0?\xa6J\x84?\x83\x9a\xd9?$\xc3{?\xbc\xb7*?%'b?\xd1\xd3*?\xe8\xe9\xae?7mf?\xa5\x8eH?Q\x91H?'\xd4\x8c?I%\x82?h(s?Z\\U?\xfa|\xb7?"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S'\x98\x96\xff\x04\x98\x9f\xff\x04\x90\xb5\xf8\x04\xa0\xb1\xf8\x04\xb0\xb6\xf8\x04p\xbd\xf8\x04\xe0\xbc\xf8\x04\xa0\xb4\xf8\x04 \xb9\xf8\x04P\xbc\xf8\x04\xa8\xb2\xf8\x04\x10\xb1\xf8\x040\xbe\xf8\x04\x08\xb9\xf8\x048\xbf\xf8\x04`\xbb\xf8\x04\xa0\xba\xf8\x04p\xba\xf8\x04p\xb7\xf8\x04`\xb2\xf8\x04@\xb4\xf8\x04x\xbe\xf8\x04\xc8\xbf\xf8\x04 \xbf\xf8\x04\xf0\xbe\xf8\x04\xf8\xb9\xf8\x04\xe8\xb7\xf8\x048\xb3\xf8\x048\xbc\xf8\x040\xb5\xf8\x04\x88\xb4\xf8\x04H\xb5\xf8\x04@\xbd\xf8\x04P\xbf\xf8\x04\x90\xbe\xf8\x04\xf8\xb3\xf8\x04\xd8\xbe\xf8\x04(\xb1\xf8\x04\xb0\xbc\xf8\x04X\xb1\xf8\x04\x98\xb9\xf8\x04\xd8\xb5\xf8\x04\x18\xb2\xf8\x04\xc8\xb9\xf8\x04\x00\xb2\xf8\x04\x00\xb5\xf8\x04@\xb7\xf8\x04\x98\xbf\xf8\x04\x08\xbc\xf8\x04\x80\xb6\xf8\x04\x08\xbf\xf8\x04`\xbe\xf8\x04(\xba\xf8\x04\xf0\xb8\xf8\x04\xe0\xb9\xf8\x04x\xb5\xf8\x04\xb8\xb1\xf8\x04\x90\xb8\xf8\x04\x10\xb7\xf8\x04\x98\xbc\xf8\x04\xb8\xbd\xf8\x04\x80\xbc\xf8\x04\x88\xba\xf8\x04p\xb1\xf8\x04\xe0\xb6\xf8\x04\x98\xb0\xf8\x04 \xb3\xf8\x04X\xb4\xf8\x04H\xbb\xf8\x04\xb0\xbf\xf8\x04\x98\xb6\xf8\x04\xa0\xb7\xf8\x04h\xb9\xf8\x04\x18\xb8\xf8\x04\xc8\xbc\xf8\x04\x18\xb5\xf8\x04\xd0\xb7\xf8\x04\xd8\xbb\xf8\x04 \xbc\xf8\x04(\xbd\xf8\x04\xe0\xb0\xf8\x04X\xbd\xf8\x040\xb8\xf8\x04x\xb2\xf8\x04\x88\xb7\xf8\x04h\xbc\xf8\x04\xb8\xba\xf8\x04\xe0\xbf\xf8\x04\xc8\xb6\xf8\x04\xe8\xbd\xf8\x04\xd8\xb8\xf8\x04\x80\xb9\xf8\x04\xc0\xb8\xf8\x04\x80\x13\xf6\x04\x98\x10\xf6\x04\xf8\x10\xf6\x04`\x12\xf6\x04\xf8\x1c\xf6\x040\x12\xf6\x048\x13\xf6\x04\xa8\x12\xf6\x04 \x13\xf6\x04X\x11\xf6\x04\xa0\x1d\xf6\x04\xe8\x14\xf6\x04\xa8\x1b\xf6\x04h\x13\xf6\x04`\x1b\xf6\x048\x10\xf6\x04@\x14\xf6\x04\x80\x10\xf6\x04\xe0\x10\xf6\x04\xd0\x11\xf6\x04\xb8\x17\xf6\x04H\x18\xf6\x04\xc8\x13\xf6\x04p\x1d\xf6\x04@\x17\xf6\x048\x16\xf6\x04(\x14\xf6\x04\x88\x1a\xf6\x04\xb8\x1a\xf6\x04h\x10\xf6\x04\xa8\x15\xf6\x04@\x11\xf6\x04\x00\x12\xf6\x04\x10\x11\xf6\x04\xe0\x13\xf6\x04\xe0\x1f\xf6\x040\x15\xf6\x04\xc8\x16\xf6\x04X\x1d\xf6\x04P\x10\xf6\x04P\x1c\xf6\x04\xa0\x1a\xf6\x04\x80\x16\xf6\x04 \x19\xf6\x04\x88\x14\xf6\x04\xf8\x16\xf6\x04\xa0\x11\xf6\x04\xc0\x1b\xf6\x04\xc0\x1e\xf6\x04\x80\x1f\xf6\x04\xc8\x19\xf6\x04\xe0\x16\xf6\x04\x08\x19\xf6\x04\xb8\x14\xf6\x04\x18\x12\xf6\x04\xd0\xb4\xf8\x04\xb0\xb0\xf8\x04\xe8\xb1\xf8\x04\xa8\xb8\xf8\x04H\xb2\xf8\x04\x00\xbb\xf8\x04\xd0\xbd\xf8\x04\xc0\xbb\xf8\x04\xc0\xb2\xf8\x04\x88\xb1\xf8\x04\xa8\xb5\xf8\x04\x90\xbb\xf8\x04h\xb3\xf8\x04\xb0\xb9\xf8\x04X\xb7\xf8\x040\xb2\xf8\x04\xe8\xba\xf8\x04@\xb1\xf8\x04\xf8\xbc\xf8\x04\xf8\xb6\xf8\x04\xf0\xb2\xf8\x04\x00\xbe\xf8\x04\xb8\xb4\xf8\x04\xd8\xb2\xf8\x04\x80\xbf\xf8\x048\xb0\xf8\x04\xd0\xb1\xf8\x04\x90\xb2\xf8\x04\x80\xb3\xf8\x04\x88\xbd\xf8\x04H\xbe\xf8\x04\xc8\xb0\xf8\x04\xb8\xb7\xf8\x04\x00\xb8\xf8\x04x\xb8\xf8\x04P\xb0\xf8\x04h\xbf\xf8\x04(\xb7\xf8\x04\x80\xb0\xf8\x04@\xba\xf8\x04x\xbb\xf8\x04\xf8\xb0\xf8\x04\x98\xb3\xf8\x040\xbb\xf8\x04\xf0\xbb\xf8\x04 \xb0\xf8\x04P\xb3\xf8\x04h\xb0\xf8\x04`\xb5\xf8\x04`\xb8\xf8\x04H\xb8\xf8\x048\xb9\xf8\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g907
sg894
g949
sg909
g899
sg903
g956
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g968
sg894
g964
sg909
g975
sg903
g972
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g985
sg894
g981
sg909
g992
sg903
g989
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g1008
sg894
g998
sg909
g1002
sg903
g1006
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g1019
sg894
g1015
sg909
g1026
sg903
g1023
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g1042
sg894
g1032
sg909
g1036
sg903
g1040
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g1053
sg894
g1049
sg909
g1060
sg903
g1057
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g1076
sg894
g1066
sg909
g1070
sg903
g1074
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g1053
sg894
g1083
sg909
g1060
sg903
g1090
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g1115
sg894
g1111
sg909
g1122
sg903
g1119
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g1076
sg894
g1128
sg909
g1070
sg903
g1135
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g1147
sg894
g1143
sg909
g1154
sg903
g1151
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g1019
sg894
g1160
sg909
g1026
sg903
g1167
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g985
sg894
g1175
sg909
g992
sg903
g1182
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g936
sg894
g1190
sg909
g943
sg903
g1197
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g1053
sg894
g1083
sg909
g1060
sg903
g1090
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g1222
sg894
g1218
sg909
g1229
sg903
g1226
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g1239
sg894
g1235
sg909
g1246
sg903
g1243
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g936
sg894
g1190
sg909
g943
sg903
g1197
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g1275
sg894
g1265
sg909
g1269
sg903
g1273
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g1147
sg894
g1282
sg909
g1154
sg903
g1289
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g1301
sg894
g1297
sg909
g1308
sg903
g1305
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g1324
sg894
g1314
sg909
g1318
sg903
g1322
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g1335
sg894
g1331
sg909
g1342
sg903
g1339
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g1076
sg894
g1066
sg909
g1070
sg903
g1074
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g968
sg894
g964
sg909
g975
sg903
g972
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g1019
sg894
g1015
sg909
g1026
sg903
g1023
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g1275
sg894
g1387
sg909
g1269
sg903
g1394
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g1406
sg894
g1402
sg909
g1413
sg903
g1410
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g1076
sg894
g1066
sg909
g1070
sg903
g1074
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g1042
sg894
g1032
sg909
g1036
sg903
g1040
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g1462
sg894
g1458
sg909
g1469
sg903
g1466
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g1335
sg894
g1331
sg909
g1342
sg903
g1339
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g1301
sg894
g1488
sg909
g1308
sg903
g1495
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g1222
sg894
g1218
sg909
g1229
sg903
g1226
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g1406
sg894
g1402
sg909
g1413
sg903
g1410
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g1222
sg894
g1218
sg909
g1229
sg903
g1226
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g1301
sg894
g1297
sg909
g1308
sg903
g1305
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g1324
sg894
g1555
sg909
g1318
sg903
g1562
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g1008
sg894
g1570
sg909
g1002
sg903
g1577
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g985
sg894
g981
sg909
g992
sg903
g989
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g1222
sg894
g1218
sg909
g1229
sg903
g1226
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g1462
sg894
g1624
sg909
g1469
sg903
g1631
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g1222
sg894
g1218
sg909
g1229
sg903
g1226
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g1335
sg894
g1652
sg909
g1342
sg903
g1659
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g1115
sg894
g1667
sg909
g1122
sg903
g1674
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g1239
sg894
g1235
sg909
g1246
sg903
g1243
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g968
sg894
g964
sg909
g975
sg903
g972
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g1335
sg894
g1331
sg909
g1342
sg903
g1339
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g1275
sg894
g1265
sg909
g1269
sg903
g1273
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g1324
sg894
g1314
sg909
g1318
sg903
g1322
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g907
sg894
g949
sg909
g899
sg903
g956
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g1147
sg894
g1282
sg909
g1154
sg903
g1289
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g1239
sg894
g1235
sg909
g1246
sg903
g1243
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g1042
sg894
g1786
sg909
g1036
sg903
g1793
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g919
sg894
g1801
sg909
g926
sg903
g1808
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g1275
sg894
g1387
sg909
g1269
sg903
g1394
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g1239
sg894
g1829
sg909
g1246
sg903
g1836
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g1406
sg894
g1844
sg909
g1413
sg903
g1851
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g1053
sg894
g1049
sg909
g1060
sg903
g1057
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g1008
sg894
g1570
sg909
g1002
sg903
g1577
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g1076
sg894
g1128
sg909
g1070
sg903
g1135
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g985
sg894
g981
sg909
g992
sg903
g989
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g1115
sg894
g1111
sg909
g1122
sg903
g1119
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g1042
sg894
g1032
sg909
g1036
sg903
g1040
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g1301
sg894
g1488
sg909
g1308
sg903
g1495
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g985
sg894
g1175
sg909
g992
sg903
g1182
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g1275
sg894
g1387
sg909
g1269
sg903
g1394
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g1147
sg894
g1143
sg909
g1154
sg903
g1151
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g1239
sg894
g1235
sg909
g1246
sg903
g1243
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g968
sg894
g2015
sg909
g975
sg903
g2022
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g1301
sg894
g1488
sg909
g1308
sg903
g1495
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g1324
sg894
g1555
sg909
g1318
sg903
g1562
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g1147
sg894
g1143
sg909
g1154
sg903
g1151
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g1406
sg894
g1402
sg909
g1413
sg903
g1410
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g1115
sg894
g1111
sg909
g1122
sg903
g1119
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g1275
sg894
g1387
sg909
g1269
sg903
g1394
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g1222
sg894
g2108
sg909
g1229
sg903
g2115
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g1462
sg894
g1624
sg909
g1469
sg903
g1631
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g1076
sg894
g1128
sg909
g1070
sg903
g1135
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g1462
sg894
g1458
sg909
g1469
sg903
g1466
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g936
sg894
g1190
sg909
g943
sg903
g1197
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g1042
sg894
g1786
sg909
g1036
sg903
g1793
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g1301
sg894
g1488
sg909
g1308
sg903
g1495
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g1147
sg894
g1143
sg909
g1154
sg903
g1151
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g1406
sg894
g1402
sg909
g1413
sg903
g1410
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g1324
sg894
g1314
sg909
g1318
sg903
g1322
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g1406
sg894
g1402
sg909
g1413
sg903
g1410
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g1008
sg894
g998
sg909
g1002
sg903
g1006
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g1301
sg894
g1297
sg909
g1308
sg903
g1305
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g936
sg894
g1190
sg909
g943
sg903
g1197
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g1275
sg894
g1265
sg909
g1269
sg903
g1273
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g968
sg894
g2015
sg909
g975
sg903
g2022
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g1019
sg894
g1160
sg909
g1026
sg903
g1167
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g985
sg894
g1175
sg909
g992
sg903
g1182
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g968
sg894
g2015
sg909
g975
sg903
g2022
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g1042
sg894
g1786
sg909
g1036
sg903
g1793
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g907
sg894
g949
sg909
g899
sg903
g956
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g1147
sg894
g1282
sg909
g1154
sg903
g1289
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g1324
sg894
g1555
sg909
g1318
sg903
g1562
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g1019
sg894
g1015
sg909
g1026
sg903
g1023
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g1076
sg894
g1128
sg909
g1070
sg903
g1135
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g1406
sg894
g1844
sg909
g1413
sg903
g1851
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g1042
sg894
g1032
sg909
g1036
sg903
g1040
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g968
sg894
g2015
sg909
g975
sg903
g2022
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g919
sg894
g1801
sg909
g926
sg903
g1808
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g985
sg894
g981
sg909
g992
sg903
g989
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g919
sg894
g1801
sg909
g926
sg903
g1808
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g1115
sg894
g1667
sg909
g1122
sg903
g1674
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g1222
sg894
g2108
sg909
g1229
sg903
g2115
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g985
sg894
g1175
sg909
g992
sg903
g1182
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g968
sg894
g2015
sg909
g975
sg903
g2022
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g1324
sg894
g1314
sg909
g1318
sg903
g1322
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g1019
sg894
g1015
sg909
g1026
sg903
g1023
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g1462
sg894
g1458
sg909
g1469
sg903
g1466
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1335
sg894
g1652
sg909
g1342
sg903
g1659
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g968
sg894
g964
sg909
g975
sg903
g972
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g1053
sg894
g1083
sg909
g1060
sg903
g1090
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g1008
sg894
g1570
sg909
g1002
sg903
g1577
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g1335
sg894
g1331
sg909
g1342
sg903
g1339
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g1301
sg894
g1297
sg909
g1308
sg903
g1305
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g1147
sg894
g1282
sg909
g1154
sg903
g1289
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g968
sg894
g964
sg909
g975
sg903
g972
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g985
sg894
g1175
sg909
g992
sg903
g1182
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g1147
sg894
g1143
sg909
g1154
sg903
g1151
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g1335
sg894
g1331
sg909
g1342
sg903
g1339
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g1019
sg894
g1160
sg909
g1026
sg903
g1167
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g1115
sg894
g1667
sg909
g1122
sg903
g1674
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g907
sg894
g949
sg909
g899
sg903
g956
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g1239
sg894
g1829
sg909
g1246
sg903
g1836
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g1275
sg894
g1265
sg909
g1269
sg903
g1273
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g1335
sg894
g1652
sg909
g1342
sg903
g1659
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g1008
sg894
g1570
sg909
g1002
sg903
g1577
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g1222
sg894
g2108
sg909
g1229
sg903
g2115
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g1147
sg894
g1282
sg909
g1154
sg903
g1289
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g1115
sg894
g1667
sg909
g1122
sg903
g1674
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g1239
sg894
g1829
sg909
g1246
sg903
g1836
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g1275
sg894
g1265
sg909
g1269
sg903
g1273
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g1076
sg894
g1066
sg909
g1070
sg903
g1074
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g1324
sg894
g1555
sg909
g1318
sg903
g1562
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g1462
sg894
g1458
sg909
g1469
sg903
g1466
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g1008
sg894
g998
sg909
g1002
sg903
g1006
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g1053
sg894
g1049
sg909
g1060
sg903
g1057
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g1239
sg894
g1829
sg909
g1246
sg903
g1836
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g1301
sg894
g1297
sg909
g1308
sg903
g1305
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g1335
sg894
g1652
sg909
g1342
sg903
g1659
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g1222
sg894
g2108
sg909
g1229
sg903
g2115
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g1053
sg894
g1083
sg909
g1060
sg903
g1090
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1462
sg894
g1624
sg909
g1469
sg903
g1631
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g1115
sg894
g1111
sg909
g1122
sg903
g1119
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g1042
sg894
g1032
sg909
g1036
sg903
g1040
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g1301
sg894
g1488
sg909
g1308
sg903
g1495
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g1008
sg894
g998
sg909
g1002
sg903
g1006
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g919
sg894
g1801
sg909
g926
sg903
g1808
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g1335
sg894
g1652
sg909
g1342
sg903
g1659
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g1324
sg894
g1314
sg909
g1318
sg903
g1322
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g919
sg894
g1801
sg909
g926
sg903
g1808
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g1406
sg894
g1844
sg909
g1413
sg903
g1851
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g1008
sg894
g998
sg909
g1002
sg903
g1006
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1053
sg894
g1083
sg909
g1060
sg903
g1090
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g1324
sg894
g1555
sg909
g1318
sg903
g1562
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g985
sg894
g981
sg909
g992
sg903
g989
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g1406
sg894
g1844
sg909
g1413
sg903
g1851
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g1462
sg894
g1624
sg909
g1469
sg903
g1631
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g1042
sg894
g1786
sg909
g1036
sg903
g1793
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1239
sg894
g1235
sg909
g1246
sg903
g1243
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g1008
sg894
g1570
sg909
g1002
sg903
g1577
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1462
sg894
g1458
sg909
g1469
sg903
g1466
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g1019
sg894
g1160
sg909
g1026
sg903
g1167
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g1239
sg894
g1829
sg909
g1246
sg903
g1836
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g1115
sg894
g1667
sg909
g1122
sg903
g1674
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g1275
sg894
g1387
sg909
g1269
sg903
g1394
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g1462
sg894
g1624
sg909
g1469
sg903
g1631
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g936
sg894
g1190
sg909
g943
sg903
g1197
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g1406
sg894
g1844
sg909
g1413
sg903
g1851
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g1115
sg894
g1111
sg909
g1122
sg903
g1119
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g1019
sg894
g1160
sg909
g1026
sg903
g1167
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g1076
sg894
g1128
sg909
g1070
sg903
g1135
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g1042
sg894
g1786
sg909
g1036
sg903
g1793
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g1019
sg894
g1015
sg909
g1026
sg903
g1023
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g1053
sg894
g1049
sg909
g1060
sg903
g1057
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g1222
sg894
g2108
sg909
g1229
sg903
g2115
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g1076
sg894
g1066
sg909
g1070
sg903
g1074
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g907
sg894
g949
sg909
g899
sg903
g956
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g1053
sg894
g1049
sg909
g1060
sg903
g1057
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I80765776
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'pw;\x13\xd8\xa6;\x13\xb8\xa8;\x13p\x1f;\x138\x1f;\x13\x00\xa7;\x13(\xa7;\x13\xc0x;\x13\xc0]\xc0\x04\xd8\xa6;\x13P\xa7;\x13x\xa7;\x13\xd0w;\x13pw;\x13\xa8\x1f;\x13x\xa7;\x13\x00x;\x13\xa0w;\x13x\xa7;\x130\xa9;\x13\xc8\xa7;\x13p\x1f;\x13\xf0\xa7;\x13\xc8\xa7;\x13\x18\xa8;\x13\xc8\xa7;\x13P\xa7;\x13\x90x;\x13\xd0w;\x13\xc0_\xc0\x04\xb8\xa8;\x13\x00x;\x13(\xa7;\x13\xd8\xa6;\x13\xa8\x1f;\x13P\xa7;\x138\x1f;\x13\xc8\xc0;\x13\x18\xa8;\x13\x90x;\x13\xc8\xc0;\x13pw;\x13\xc0]\xc0\x04(\xa7;\x13p\x1f;\x13\xa0\xa7;\x13\xc0x;\x13pw;\x13`_\xc0\x04\xd8\xa6;\x13\xc0]\xc0\x04\xc8\xa7;\x13\xa8\x1f;\x13P\xa7;\x13(\xa7;\x13@\xa8;\x13`_\xc0\x04\xa0\xa7;\x13\xc0x;\x13\xa8\x1f;\x13\xa0w;\x13\x90\xc0;\x13p\x1f;\x13P\xa7;\x13\xf0\xa7;\x13 \xc0;\x13\xd0w;\x13x\xa7;\x13\xc0]\xc0\x04\x08\xa9;\x13\x00\xa7;\x138\x1f;\x13\xd0w;\x13p\x1f;\x13\xb8\xa8;\x13 y;\x13\xa8\x1f;\x13\xc0]\xc0\x04 \xc0;\x13@\xa8;\x13\xc8\xa7;\x13\x08\xa9;\x138\x1f;\x13\x18\xa8;\x13\xd8\xa6;\x13@\xa8;\x13P\xa7;\x13\x00\xa7;\x13\xd8\xa6;\x13\xc8\xa7;\x13pw;\x13\xd0w;\x13 \xc0;\x13\xa0\xa7;\x13\xc0]\xc0\x04\xa0w;\x13\xe0\xa8;\x13\x00\xa7;\x13\xf0\xa7;\x138\x1f;\x13\xf0\xa7;\x13\xd8\xa6;\x13\x00x;\x13\x18\xa8;\x13\xa0\xa7;\x13 \xc0;\x13\xc0_\xc0\x04\xc8\xc0;\x13\xf0\xa7;\x13\xd0w;\x13\xe0_\xc0\x04\xc8\xc0;\x13x\xa7;\x13\x18\xa8;\x13\xa0\xa7;\x13\xc8\xa7;\x13\x00\xa7;\x13\xd0w;\x13@\xa8;\x13\xc0]\xc0\x04\xa0w;\x13\xf0\xa7;\x13\x08\xa9;\x13p\x1f;\x13P\xa7;\x13@\xa8;\x13\x00\xa7;\x138\x1f;\x13pw;\x13\x00x;\x13\xa8\x1f;\x13\x80y;\x13\x00x;\x13\xa0w;\x13\xd0w;\x13pw;\x13p\x1f;\x13\xa0w;\x13\xa0\xa7;\x13pw;\x13\x00\xa7;\x13\x00x;\x13@\xa8;\x13 \xc0;\x13\xf0\xa7;\x13@\xa8;\x13x\xa7;\x13Py;\x13p\x1f;\x13\xa0\xa7;\x13p\x1f;\x138\x1f;\x13\xc0x;\x13\x90x;\x13\x18\xa8;\x13\xd0w;\x13\xf0\xa7;\x13\xf0x;\x13\x00x;\x13\xa8\x1f;\x13@\xa8;\x13`_\xc0\x04\xc8\xa7;\x13\xe0_\xc0\x04\xc8\xa7;\x13x\xa7;\x13\x00\xa7;\x13\x18\xa8;\x13 \xc0;\x13\xa0\xa7;\x13\x18\xa8;\x13`_\xc0\x04P\xa7;\x13 y;\x13\x90\xc0;\x13\xa8\x1f;\x13\x18\xa8;\x13\x90\xa8;\x13\xa0\xa7;\x13pw;\x13\x80_\xc0\x04(\xa7;\x13`_\xc0\x04 \xc0;\x13\x00x;\x13P\xa7;\x13\x00\xa7;\x13@\xa8;\x13\xa8\x1f;\x13\x90x;\x13\xa8\x1f;\x13\xd8\xa6;\x13(\xa7;\x13`_\xc0\x04pw;\x13\xd8\xa6;\x13`x;\x13\xc0]\xc0\x04 \xc0;\x13\x00\xa7;\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S'\xe0\xd1;\x13@\xd1;\x13\xc0\xd2;\x13`\xd2;\x13 \xd0;\x13\xe0\xd2;\x13\x00\xd3;\x13 \xd3;\x13 a\x1a\x03\x80]\xc0\x04\x80bD\r\x80\xd2;\x13\x00\xd1;\x13 \xd2;\x13 \xd1;\x13\xc0\xd3;\x13\xa0\xd3;\x13\xe0\xd3;\x13\x00\xd4;\x13@\xd2;\x13\xa0\xd2;\x13 \xd4;\x13\x80\xd4;\x13`\xd4;\x13\xe0\xd0;\x13\xa0\xd4;\x13\xc0\xd4;\x13 \xd5;\x13@\xd5;\x13`\xd0;\x13@\xd0;\x13\xa0\xd5;\x13\xc0\xd5;\x13\xe0\xd5;\x13\x80\xd0;\x13 \xd6;\x13\x00\xd6;\x13\xa0\xd1;\x13@\xd6;\x13`\xd6;\x13\xc0\xd6;\x13\xa0\xd6;\x13`\xd1;\x13\xe0\xd6;\x13@\xd7;\x13 \xd7;\x13\x00\xd5;\x13\xa0\xd7;\x13\x80\xd7;\x13\xe0\xd7;\x13\xc0\xd7;\x13\x80\xd5;\x13\x00\xd8;\x13 \xd8;\x13@\xd8;\x13\xa0\xd8;\x13\x80\xd8;\x13\x80\xd1;\x13\xc0\xd8;\x13 \xd9;\x13@\xd9;\x13`\xd9;\x13\x80\xd9;\x13`\xd3;\x13\xc0\xd9;\x13\xe0\xd9;\x13@\xd3;\x13 \xda;\x13\x00\xda;\x13\xc0\xd0;\x13\x80\xda;\x13 ,\x1b\x03\xa0-\x1b\x03\xc0)\x1b\x03\x80-\x1b\x03\xc0-\x1b\x03\x00.\x1b\x03 .\x1b\x03@.\x1b\x03\xe0)\x1b\x03@/\x1b\x03\x00/\x1b\x03\x80+\x1b\x03\xc0+\x1b\x03\xe0*\x1b\x03@\xcd\x1b\x03\x80/\x1b\x03\xa0,\x1b\x03\xc0.\x1b\x03@-\x1b\x03\x80.\x1b\x03\x00-\x1b\x03\x00,\x1b\x03\x80,\x1b\x03`/\x1b\x03\xa0.\x1b\x03@,\x1b\x03`,\x1b\x03\x00)\x1b\x03\xe0,\x1b\x03\xa0fD\r\xa0\xcd\x1b\x03\xc0\xcd\x1b\x03@rP\r \xca\x1b\x03\x00"\x1b\x03\xc0,\x1b\x03`-\x1b\x03\xa0/\x1b\x03\xc0/\x1b\x03\xe0+\x1b\x03 -\x1b\x03\xa0)\x1b\x03\x00+\x1b\x03@+\x1b\x03 +\x1b\x03 /\x1b\x03\x80pP\r\x00\xd3\x9c\r \xd3\x9c\r@\xd3\x9c\r\xa0\xda\x9c\r@\xd0\x9c\r\x00\xdb\x9c\r\xc0\xd0\x9c\r\xa0\xd2\x9c\r \xd0\x9c\r\xc0\xd2\x9c\r\x00\xd1\x9c\r\x80\xd0\x9c\r\x00\xd9\x9c\r\xc0\xda\x9c\r`\xda\x9c\r\x00\xd7\x9c\r\xe0\xd0\x9c\r@\xd1\x9c\r\xe0\xcf\xbd\x04`\xd1\x9c\r\xe0\xd2\x9c\r\x00zQ\r uQ\r\x00rQ\r\xa0tQ\r@{Q\r\xc0uQ\r\x00{Q\r\xc0yQ\r xQ\r\xe0uQ\r`+\x1b\x03\x00LR\r\xc0GR\r\xe0BR\r`CR\r`NR\r\xc0BR\r\x80DR\r\x00AR\r\xe0AR\r\xa0KR\r\xe0OR\r\xe0KR\r\xa0JR\r\xa0AR\r\xc0DR\r AR\r CR\r\x00KR\r\xa0DR\r\xe0DR\r\xc0@R\r`bD\r\x00ER\r\x00BR\r\x00CR\r`\xb9\x9f\r`\xb0\x9f\r\xc0\xb5\x9f\r\xe0\xb2\x9f\r@\xb0\x9f\r\x00\xb7\x9f\r\xa0\xb0\x9f\r\xa0\xb5\x9f\r \xbf\x9f\r\xc0\xb6\x9f\r\xc0\xb3\x9f\r \xb7\x9f\r\x80\xb2\x9f\r\xc0\xb0\x9f\r\xe0\xb0\x9f\r\xa0\xb6\x9f\r\xc0\xb4\x9f\r\x00\xb6\x9f\r\xe0\xb6\x9f\r@`\x1a\x03\xc0a\x1a\x03\x00a\x1a\x03@i\x1a\x03\xe0a\x1a\x03 k\x1a\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'D\x9c\x99?\xb6\xb3\x1a@T\x88H?\x19~7?JWU?v\xa0Y?\xb4LD?\x07\x8e\x88?\x91\t@?W\x14\xb1?&\xcd|@\xcd\x8fH?\xc4[\xd5?\xf6Y\x95?Y\xfcn?\x8c\xea\x1d?.\x14\xb1?\xc7\xf4L?\xc1\xe6\x1d?\x14\xdaL?\x16\xbf\x9b?\x8c\xb1j?\xe5\xaf\x8a?\x03\xdbL?\xc7i\x86?l\x17Q?\x11\xac\xea?\xb8\x1dQ?\x05:\x93?\x96\xe8]?\xe9\xbd\xbb?\xa2\xe7]?9\xb2*?\x08\x17\x91?\xddaU?\xdd\xbd\xbb?\xe44\x93?T\xf6n?\xeb\xd2j?\xe0\x95H?\xf5(b?\xf8\xc8;?F\x817?\xa6\x857?\xbe\x97H?\x03\xc2\x9b?%\xffL?\xa5m&?\xb8\x02\xa0?\xa1\xa0Y?\x87\xb7*?\x12\xd7L?\t;3?u\xe1\x9d?\xc8)"?\x04\xb7{?\xc3\xb2*?J[U?\x1e*"?\xd9\xe8]?5J\xa4?\xe1L\x84?\xd6\xb6*?\x87\xf7n?\xef\x8b\xa8?3bU?\xc4\x02@@$\xe4\x1d?\\\x14Q?U+b?r\xb1\x8a?\xf72s?8$\x91?\xe9\xf6.?\xf0j&?U\xf4.?S\xb1j?\x92m&?\xd0\x1dQ?#\x83\x88?Gtf?\xf2JD?\xa7\x00@?l8\x93?.F"?s\xc2\xcc?\x05lf?\x15:3?\xa1bU?.,\x82?b\xc9;?\xa6\x9f\x99?<:3?D~w?\x19\xd4L?\xee)\xc2?\x1e\xf3n?3)"?\xee+b?c\xef\xce?=)\x82?\xea\x8fH?\x16\x85w?\xf9OD?\xc3\xd2\xcc?(\x03@?8\xf2.?\x87~w?\x9e;3?\x8c(\x82?\x99\xe5\x1d?\xe5"\x91?\x08\xb8j?\x8f\xe9]?\xa4(b?"\xa1Y?\x8a\\U?z\xbdY?\xbb\x1db?\xd1\x7f7?\xa6\x81w?\xb1\xe0L?p@3?\x0e\xa9Y?\x93\xb4j?\x8a(s?\xca\x807?8\x88H?\x9a\xf5.?\xbcaU?jID?\xd6.3?J\xe8\x1d?\x90\xf5.?N\xea]?=z&?\x1e\x97Y?\x08\x7f7?\\~w?\xe2\x0b@?\x90\xc2;?\x0c\xac\x99?\x8c\x7fH?\x98?3?\xf9\xa5Y?E\xe7n?\xaf\xc5;?\x0fK\x84?\xc4\xe5\x1d?\xc6q&?\xc5j\x86?\xbdk&?a\xb1j?e\xf7.?T\xc3;?\xa4\x07@?\xbe\x0c@?\xf8;3?\xc3\xba*?O\x8af?\x8d\x1a"?\x0fm\xc6?\xdc\x8b\xc8?\xe1\xc2;?6D3?i\x06@?\x0b\xb5*?n\x04\x80?"\xdcL?\x10\x90H?\xdchD?F\xc0\xfb?S|7?O\xe6]?`\xf9n?\x02\xfe.?IcU?\x87\xb5j?\xb1\xc6;?\xd1\x7f7?\xf9\x84w?8!@?\xee\xf3\x8e?@\x1dQ?\x91~w?\xc6|7?g\x15\x91?\xcep\xa6?9\xb1\xaa?\xcd\xae\xaa?\x8b\x8b\xc8?65#@\x8c~\x97?\xb66\xb3?\xba\xce\xac?\x9a\x16\xb1?\xc8\xf0\xae?\xaah\x95?\xfc\xd3L?\xb5}w?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'\xe8\x17\xf6\x04\x10\x1d\xf6\x04\x10t\xf7\x04\x80y\xf7\x04\xa8~\xf7\x04(w\xf7\x04\x08s\xf7\x04\xd8~\xf7\x04\xe0v\xf7\x04pq\xf7\x04\xf0x\xf7\x04\x88q\xf7\x04 |\xf7\x04\xd8{\xf7\x04h\x7f\xf7\x04\xc8\x7f\xf7\x04\xa8{\xf7\x04`r\xf7\x04H~\xf7\x04\xe0y\xf7\x04\x90~\xf7\x04h|\xf7\x04\x98\x7f\xf7\x04\xb0\x7f\xf7\x04\xb0y\xf7\x04\x08v\xf7\x04@t\xf7\x04\xe8z\xf7\x04\x88t\xf7\x04\xf8v\xf7\x04hy\xf7\x04`{\xf7\x04Hx\xf7\x04@z\xf7\x04\x18{\xf7\x04xu\xf7\x04\xf0~\xf7\x04\x10z\xf7\x04 \x7f\xf7\x04\xa0q\xf7\x04\x10w\xf7\x04Xt\xf7\x04\xa0z\xf7\x04(q\xf7\x04\xa8u\xf7\x04\xd8x\xf7\x04\xc0~\xf7\x04Xz\xf7\x04\x88z\xf7\x04\x98|\xf7\x04(z\xf7\x04P\x7f\xf7\x04\xb8\xea\xd9\x04@\xed\xd9\x04\x98\xe6\xd9\x04\xa8\xe2\xd9\x04`\xeb\xd9\x04\x88\xea\xd9\x04(\xe1\xd9\x04\x80\xef\xd9\x04\x10\xea\xd9\x04\x08\xe6\xd9\x04\x80\xe9\xd9\x04\xf8\xec\xd9\x04\x08\xe9\xd9\x048\xe3\xd9\x04\x10\xe7\xd9\x04\x10\x94\xff\x04\xa0\x91\xff\x04(\x97\xff\x04`\x95\xff\x04\x80\x9f\xff\x04\x88\x91\xff\x04h\x90\xff\x04\xd8\x9b\xff\x04H\x9e\xff\x04\xe8\x9a\xff\x04`\x9e\xff\x04\x18\x9b\xff\x04H\x98\xff\x04@\x94\xff\x04@\x9d\xff\x04\xa0\x9d\xff\x04 \x90\xff\x04\x80\x9c\xff\x04\xc0\x98\xff\x04\xc0\x9e\xff\x04\x10\x97\xff\x04@\x91\xff\x04\xb0\x90\xff\x04\x88\x9a\xff\x04\xa0t\xf7\x04`~\xf7\x04\x10}\xf7\x048s\xf7\x04H{\xf7\x04\x90x\xf7\x04\x18r\xf7\x04\xe8q\xf7\x04\xb0|\xf7\x04\x90u\xf7\x04hp\xf7\x04Ps\xf7\x048p\xf7\x04(}\xf7\x04 y\xf7\x04\x98s\xf7\x04\xa0w\xf7\x04\x90{\xf7\x04pz\xf7\x04Pv\xf7\x04\x18u\xf7\x048\x7f\xf7\x04pw\xf7\x04\xc0{\xf7\x04\x80\x7f\xf7\x04\x98v\xf7\x04\xf8y\xf7\x04`u\xf7\x04\x08y\xf7\x04\x18x\xf7\x04\xb8q\xf7\x04x~\xf7\x04\xc8v\xf7\x04hv\xf7\x040x\xf7\x04\xb0p\xf7\x04\xa0}\xf7\x048v\xf7\x04 p\xf7\x04\xf8|\xf7\x04\xc8|\xf7\x04\xd0z\xf7\x04 s\xf7\x04\xe0\x7f\xf7\x04x{\xf7\x04\xc8y\xf7\x04\xc8s\xf7\x04Xw\xf7\x04\xd0t\xf7\x04\xf8s\xf7\x048|\xf7\x04\x88}\xf7\x04\x08|\xf7\x048y\xf7\x04\xf8p\xf7\x04\xc0x\xf7\x04\x00u\xf7\x04\xa8r\xf7\x04\xb8w\xf7\x04\xb8t\xf7\x04`x\xf7\x04\x08\x7f\xf7\x04hs\xf7\x04\x98y\xf7\x04@}\xf7\x04pt\xf7\x04\xe0|\xf7\x04Pp\xf7\x04\xd8u\xf7\x04\xd8r\xf7\x04\x80p\xf7\x040r\xf7\x04\xc0r\xf7\x04\x90r\xf7\x04Hu\xf7\x04\x98p\xf7\x04\x80s\xf7\x04Xq\xf7\x04\xe0p\xf7\x04\x00{\xf7\x04\xc0u\xf7\x04\x88w\xf7\x04\x10q\xf7\x04\xb0v\xf7\x04@w\xf7\x04\x80|\xf7\x04\xc8p\xf7\x04\xa8x\xf7\x04xr\xf7\x04@q\xf7\x04\xb8z\xf7\x04\xe8t\xf7\x04\xd0q\xf7\x04\xf0r\xf7\x04\xe0s\xf7\x04\xb0s\xf7\x04 v\xf7\x04\x00x\xf7\x04Py\xf7\x04Hr\xf7\x04\xe8w\xf7\x04\xf0u\xf7\x04(t\xf7\x04xx\xf7\x04\x80v\xf7\x040{\xf7\x040u\xf7\x04\x00r\xf7\x04p}\xf7\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3680
sg3632
g3670
sg3646
g3674
sg3641
g3678
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3680
sg3632
g3704
sg3646
g3674
sg3641
g3711
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3723
sg3632
g3719
sg3646
g3730
sg3641
g3727
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3763
sg3632
g3753
sg3646
g3757
sg3641
g3761
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3657
sg3632
g3787
sg3646
g3664
sg3641
g3794
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3840
sg3632
g3836
sg3646
g3847
sg3641
g3844
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3637
sg3632
g3853
sg3646
g3647
sg3641
g3860
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3872
sg3632
g3868
sg3646
g3879
sg3641
g3876
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3763
sg3632
g3753
sg3646
g3757
sg3641
g3761
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3951
sg3632
g3941
sg3646
g3945
sg3641
g3949
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3962
sg3632
g3958
sg3646
g3969
sg3641
g3966
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3691
sg3632
g3975
sg3646
g3698
sg3641
g3982
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3994
sg3632
g3990
sg3646
g4001
sg3641
g3998
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g3962
sg3632
g4007
sg3646
g3969
sg3641
g4014
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g4026
sg3632
g4022
sg3646
g4033
sg3641
g4030
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g3962
sg3632
g3958
sg3646
g3969
sg3641
g3966
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g3806
sg3632
g4052
sg3646
g3813
sg3641
g4059
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g3840
sg3632
g3836
sg3646
g3847
sg3641
g3844
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g3680
sg3632
g3704
sg3646
g3674
sg3641
g3711
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g3657
sg3632
g3787
sg3646
g3664
sg3641
g3794
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3872
sg3632
g3868
sg3646
g3879
sg3641
g3876
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g3680
sg3632
g3670
sg3646
g3674
sg3641
g3678
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g4207
sg3632
g4197
sg3646
g4201
sg3641
g4205
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g4026
sg3632
g4022
sg3646
g4033
sg3641
g4030
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g3740
sg3632
g4227
sg3646
g3747
sg3641
g4234
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g4207
sg3632
g4197
sg3646
g4201
sg3641
g4205
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g3637
sg3632
g3853
sg3646
g3647
sg3641
g3860
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g3774
sg3632
g4268
sg3646
g3781
sg3641
g4275
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g3740
sg3632
g4227
sg3646
g3747
sg3641
g4234
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g3951
sg3632
g4309
sg3646
g3945
sg3641
g4316
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g3763
sg3632
g3753
sg3646
g3757
sg3641
g3761
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g4207
sg3632
g4350
sg3646
g4201
sg3641
g4357
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g3657
sg3632
g3787
sg3646
g3664
sg3641
g3794
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g3774
sg3632
g4268
sg3646
g3781
sg3641
g4275
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g3962
sg3632
g4007
sg3646
g3969
sg3641
g4014
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g3872
sg3632
g4404
sg3646
g3879
sg3641
g4411
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g3740
sg3632
g4227
sg3646
g3747
sg3641
g4234
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g4449
sg3632
g4445
sg3646
g4456
sg3641
g4453
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g4207
sg3632
g4197
sg3646
g4201
sg3641
g4205
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g3951
sg3632
g4309
sg3646
g3945
sg3641
g4316
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g3763
sg3632
g4488
sg3646
g3757
sg3641
g4495
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g3872
sg3632
g3868
sg3646
g3879
sg3641
g3876
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g3763
sg3632
g3753
sg3646
g3757
sg3641
g3761
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g3994
sg3632
g4529
sg3646
g4001
sg3641
g4536
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g3806
sg3632
g4052
sg3646
g3813
sg3641
g4059
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g3994
sg3632
g4529
sg3646
g4001
sg3641
g4536
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g4587
sg3632
g4583
sg3646
g4594
sg3641
g4591
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g3840
sg3632
g4600
sg3646
g3847
sg3641
g4607
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g3823
sg3632
g4641
sg3646
g3830
sg3641
g4648
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g3723
sg3632
g3719
sg3646
g3730
sg3641
g3727
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g3680
sg3632
g3704
sg3646
g3674
sg3641
g3711
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g3840
sg3632
g4600
sg3646
g3847
sg3641
g4607
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g3691
sg3632
g3975
sg3646
g3698
sg3641
g3982
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g3680
sg3632
g3704
sg3646
g3674
sg3641
g3711
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g3872
sg3632
g4404
sg3646
g3879
sg3641
g4411
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g3774
sg3632
g4268
sg3646
g3781
sg3641
g4275
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g4587
sg3632
g4760
sg3646
g4594
sg3641
g4767
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g4449
sg3632
g4775
sg3646
g4456
sg3641
g4782
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g3962
sg3632
g3958
sg3646
g3969
sg3641
g3966
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g3823
sg3632
g4641
sg3646
g3830
sg3641
g4648
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g3680
sg3632
g3704
sg3646
g3674
sg3641
g3711
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g4026
sg3632
g4829
sg3646
g4033
sg3641
g4836
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g4449
sg3632
g4445
sg3646
g4456
sg3641
g4453
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g3806
sg3632
g4052
sg3646
g3813
sg3641
g4059
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g3723
sg3632
g3719
sg3646
g3730
sg3641
g3727
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g3962
sg3632
g4007
sg3646
g3969
sg3641
g4014
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g3840
sg3632
g4600
sg3646
g3847
sg3641
g4607
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g4587
sg3632
g4760
sg3646
g4594
sg3641
g4767
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g3951
sg3632
g3941
sg3646
g3945
sg3641
g3949
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g3763
sg3632
g4488
sg3646
g3757
sg3641
g4495
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g3723
sg3632
g3719
sg3646
g3730
sg3641
g3727
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g3994
sg3632
g3990
sg3646
g4001
sg3641
g3998
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g3680
sg3632
g3670
sg3646
g3674
sg3641
g3678
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g3994
sg3632
g3990
sg3646
g4001
sg3641
g3998
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g3657
sg3632
g3787
sg3646
g3664
sg3641
g3794
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g3902
sg3632
g5078
sg3646
g3909
sg3641
g5085
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g4026
sg3632
g4829
sg3646
g4033
sg3641
g4836
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g3951
sg3632
g4309
sg3646
g3945
sg3641
g4316
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g4587
sg3632
g4583
sg3646
g4594
sg3641
g4591
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g3774
sg3632
g4268
sg3646
g3781
sg3641
g4275
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g4207
sg3632
g4350
sg3646
g4201
sg3641
g4357
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g3994
sg3632
g4529
sg3646
g4001
sg3641
g4536
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g3840
sg3632
g3836
sg3646
g3847
sg3641
g3844
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g4587
sg3632
g4760
sg3646
g4594
sg3641
g4767
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g4207
sg3632
g4197
sg3646
g4201
sg3641
g4205
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g3823
sg3632
g4641
sg3646
g3830
sg3641
g4648
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g4026
sg3632
g4829
sg3646
g4033
sg3641
g4836
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g3951
sg3632
g3941
sg3646
g3945
sg3641
g3949
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g3962
sg3632
g4007
sg3646
g3969
sg3641
g4014
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g3723
sg3632
g5262
sg3646
g3730
sg3641
g5269
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g3840
sg3632
g4600
sg3646
g3847
sg3641
g4607
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g4449
sg3632
g4445
sg3646
g4456
sg3641
g4453
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g3774
sg3632
g4268
sg3646
g3781
sg3641
g4275
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g3763
sg3632
g4488
sg3646
g3757
sg3641
g4495
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g3994
sg3632
g4529
sg3646
g4001
sg3641
g4536
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g3823
sg3632
g3819
sg3646
g3830
sg3641
g3827
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g3691
sg3632
g3975
sg3646
g3698
sg3641
g3982
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g3806
sg3632
g3802
sg3646
g3813
sg3641
g3810
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g4449
sg3632
g4775
sg3646
g4456
sg3641
g4782
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g3723
sg3632
g3719
sg3646
g3730
sg3641
g3727
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g3680
sg3632
g3670
sg3646
g3674
sg3641
g3678
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g3637
sg3632
g3853
sg3646
g3647
sg3641
g3860
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g3902
sg3632
g5078
sg3646
g3909
sg3641
g5085
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g3872
sg3632
g3868
sg3646
g3879
sg3641
g3876
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g4449
sg3632
g4775
sg3646
g4456
sg3641
g4782
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g3763
sg3632
g4488
sg3646
g3757
sg3641
g4495
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g3840
sg3632
g4600
sg3646
g3847
sg3641
g4607
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g3763
sg3632
g4488
sg3646
g3757
sg3641
g4495
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g3951
sg3632
g3941
sg3646
g3945
sg3641
g3949
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g3637
sg3632
g3853
sg3646
g3647
sg3641
g3860
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g3723
sg3632
g5262
sg3646
g3730
sg3641
g5269
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g3902
sg3632
g5078
sg3646
g3909
sg3641
g5085
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g4449
sg3632
g4445
sg3646
g4456
sg3641
g4453
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g4587
sg3632
g4760
sg3646
g4594
sg3641
g4767
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g3994
sg3632
g3990
sg3646
g4001
sg3641
g3998
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g4449
sg3632
g4775
sg3646
g4456
sg3641
g4782
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g3823
sg3632
g4641
sg3646
g3830
sg3641
g4648
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g4026
sg3632
g4829
sg3646
g4033
sg3641
g4836
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g3951
sg3632
g3941
sg3646
g3945
sg3641
g3949
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g3691
sg3632
g3975
sg3646
g3698
sg3641
g3982
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g3680
sg3632
g3670
sg3646
g3674
sg3641
g3678
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g3763
sg3632
g3753
sg3646
g3757
sg3641
g3761
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g3740
sg3632
g4227
sg3646
g3747
sg3641
g4234
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g4026
sg3632
g4022
sg3646
g4033
sg3641
g4030
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g3840
sg3632
g3836
sg3646
g3847
sg3641
g3844
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g3994
sg3632
g4529
sg3646
g4001
sg3641
g4536
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g3840
sg3632
g3836
sg3646
g3847
sg3641
g3844
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g3902
sg3632
g5078
sg3646
g3909
sg3641
g5085
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g3872
sg3632
g4404
sg3646
g3879
sg3641
g4411
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g4449
sg3632
g4775
sg3646
g4456
sg3641
g4782
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g4207
sg3632
g4197
sg3646
g4201
sg3641
g4205
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g3962
sg3632
g3958
sg3646
g3969
sg3641
g3966
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g4587
sg3632
g4583
sg3646
g4594
sg3641
g4591
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g3962
sg3632
g3958
sg3646
g3969
sg3641
g3966
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g3823
sg3632
g4641
sg3646
g3830
sg3641
g4648
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g3723
sg3632
g5262
sg3646
g3730
sg3641
g5269
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g4026
sg3632
g4829
sg3646
g4033
sg3641
g4836
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g4587
sg3632
g4583
sg3646
g4594
sg3641
g4591
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g3951
sg3632
g4309
sg3646
g3945
sg3641
g4316
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g4026
sg3632
g4022
sg3646
g4033
sg3641
g4030
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g4207
sg3632
g4350
sg3646
g4201
sg3641
g4357
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g3806
sg3632
g4052
sg3646
g3813
sg3641
g4059
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g3902
sg3632
g5078
sg3646
g3909
sg3641
g5085
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g3994
sg3632
g3990
sg3646
g4001
sg3641
g3998
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g3872
sg3632
g4404
sg3646
g3879
sg3641
g4411
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g4026
sg3632
g4022
sg3646
g4033
sg3641
g4030
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g3951
sg3632
g4309
sg3646
g3945
sg3641
g4316
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g3637
sg3632
g3853
sg3646
g3647
sg3641
g3860
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g3962
sg3632
g4007
sg3646
g3969
sg3641
g4014
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g4207
sg3632
g4350
sg3646
g4201
sg3641
g4357
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g4587
sg3632
g4760
sg3646
g4594
sg3641
g4767
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g3806
sg3632
g4052
sg3646
g3813
sg3641
g4059
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g3723
sg3632
g5262
sg3646
g3730
sg3641
g5269
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g4449
sg3632
g4445
sg3646
g4456
sg3641
g4453
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g3872
sg3632
g3868
sg3646
g3879
sg3641
g3876
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g3740
sg3632
g4227
sg3646
g3747
sg3641
g4234
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g3872
sg3632
g4404
sg3646
g3879
sg3641
g4411
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g3657
sg3632
g3787
sg3646
g3664
sg3641
g3794
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g4207
sg3632
g4350
sg3646
g4201
sg3641
g4357
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g3691
sg3632
g3975
sg3646
g3698
sg3641
g3982
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g4587
sg3632
g4583
sg3646
g4594
sg3641
g4591
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g3723
sg3632
g5262
sg3646
g3730
sg3641
g5269
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I80765776
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S'\xc0p\x80\x13@\x00\xa0\r\xe0l\x7f\x13\xb0V\x80\x13Pl\x7f\x13\xf8.\x80\x13 /\x80\x13Pl\x7f\x13@\x00\xa0\r /\x80\x13\x80l\x7f\x13\xe8V\x80\x13H/\x80\x13 l\x7f\x13p/\x80\x13\x10m\x7f\x13\xc8W\x80\x13\xe8V\x80\x13 W\x80\x13\x98/\x80\x13\xc0/\x80\x13 p\x80\x13\xc0/\x80\x13\xe8V\x80\x13\x00X\x80\x13p/\x80\x13\xe0l\x7f\x13\xd0m\x7f\x13 l\x7f\x13\x00n\x7f\x13 p\x80\x13pp\x80\x13\xb0V\x80\x13\xf8.\x80\x13@\x00\xa0\r /\x80\x13\xd0.\x80\x13\xb0V\x80\x13XW\x80\x13\xb0l\x7f\x13\xd0.\x80\x13 p\x80\x13pp\x80\x13\x80l\x7f\x13Pl\x7f\x13\x98/\x80\x13 W\x80\x13Hp\x80\x13\x98/\x80\x13\xd0.\x80\x13pp\x80\x13H/\x80\x13\x80l\x7f\x13 p\x80\x13p/\x80\x13\xb0V\x80\x13\xe8V\x80\x13H/\x80\x13 /\x80\x13@\x00\xa0\r\x80l\x7f\x13\xe8V\x80\x13@\x00\xa0\r@m\x7f\x13Hp\x80\x13 W\x80\x13\xb0V\x80\x13 W\x80\x13Hp\x80\x13\xa0\t\xa0\r\x00X\x80\x13\x80l\x7f\x13\xb0V\x80\x13\xa0\t\xa0\rpp\x80\x13@\x00\xa0\r\xc0p\x80\x13pp\x80\x13\xa0m\x7f\x130n\x7f\x13\xc8W\x80\x13Pl\x7f\x13\xe0l\x7f\x13XW\x80\x13Hp\x80\x13\xb0l\x7f\x13Hp\x80\x13\xb0V\x80\x13\x98/\x80\x13H/\x80\x13\xd0.\x80\x13\xc0/\x80\x13\x00n\x7f\x13p/\x80\x13 \x0b\xa0\rXW\x80\x13\xf8.\x80\x13\xb0V\x80\x13H/\x80\x13\xb0l\x7f\x13Hp\x80\x13 l\x7f\x13\xe8V\x80\x13Hp\x80\x13pp\x80\x13 /\x80\x13pp\x80\x13H/\x80\x13 \x0b\xa0\r p\x80\x13\x10m\x7f\x13 l\x7f\x13\xa0\t\xa0\rXW\x80\x13\x80l\x7f\x13pp\x80\x13\x10m\x7f\x13H/\x80\x13\x90W\x80\x13\xf8.\x80\x13H/\x80\x13p/\x80\x13XW\x80\x13@m\x7f\x13\x98/\x80\x13\xf8.\x80\x13 W\x80\x13\xa0\t\xa0\r@\x00\xa0\r0n\x7f\x13 \x0b\xa0\r\xc0/\x80\x13\xe8p\x80\x13p/\x80\x13 p\x80\x13\xc0p\x80\x13p/\x80\x13 \x0b\xa0\r\xc0/\x80\x13 l\x7f\x13\xb0l\x7f\x13H/\x80\x13 p\x80\x13\x98/\x80\x13p/\x80\x13`q\x80\x13 l\x7f\x13\xd0.\x80\x130n\x7f\x13p/\x80\x13\xd0.\x80\x13 W\x80\x13pp\x80\x13XW\x80\x13\x98/\x80\x13\xd0m\x7f\x13 /\x80\x13\xc0/\x80\x13\xc8W\x80\x13 /\x80\x13Pl\x7f\x13\xa0\t\xa0\r p\x80\x13p/\x80\x13\x10q\x80\x13\x80l\x7f\x13\xb0V\x80\x13\xa0\t\xa0\r@\x00\xa0\r\xe8V\x80\x13\xc0/\x80\x13 /\x80\x13Hp\x80\x138q\x80\x13\x80l\x7f\x13 W\x80\x13\xb0l\x7f\x13\xd0m\x7f\x13\xe8V\x80\x13\x10q\x80\x13\x90W\x80\x13\x98/\x80\x13\xa0\t\xa0\rXW\x80\x13\xc0/\x80\x13\xf8.\x80\x13Pl\x7f\x13\xc0\t\xa0\r@\x00\xa0\r p\x80\x130n\x7f\x13\xd0.\x80\x13pm\x7f\x13 W\x80\x130n\x7f\x13Pl\x7f\x13\xc0/\x80\x13 l\x7f\x13\xe8V\x80\x13@\x00\xa0\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x00L\x81\x13@L\x81\x13`}Q\r`K\x81\x13\xa0L\x81\x13\xc0J\x81\x13 M\x81\x13@M\x81\x13\xc0L\x81\x13@K\x81\x13\x80M\x81\x13\xa0M\x81\x13\xc0M\x81\x13\xe0M\x81\x13\x00N\x81\x13 N\x81\x13\x80K\x81\x13 L\x81\x13@N\x81\x13`N\x81\x13\xc0N\x81\x13\xa0N\x81\x13\xe0K\x81\x13\xe0N\x81\x13@O\x81\x13`O\x81\x13\xe0L\x81\x13\xc0O\x81\x13\xe0O\x81\x13\xe0J\x81\x13 O\x81\x13`J\x81\x13\x00K\x81\x13\xc0K\x81\x13\x80N\x81\x13`M\x81\x13\xa0O\x81\x13\x80L\x81\x13\xa0K\x81\x13`L\x81\x13\xa0J\x81\x13\x00M\x81\x13 K\x81\x13\x00O\x81\x13\x80J\x81\x13\x80O\x81\x13\xc0A\x95\x13@B\x95\x13\xa0A\x95\x13`B\x95\x13\xa0B\x95\x13\xa0@\x95\x13\xe0B\x95\x13\xc0B\x95\x13 B\x95\x13\x00C\x95\x13 C\x95\x13@C\x95\x13\xa0C\x95\x13\x80C\x95\x13@A\x95\x13\x00D\x95\x13 D\x95\x13\xe0A\x95\x13\x80A\x95\x13@D\x95\x13`D\x95\x13\x80D\x95\x13\xe0D\x95\x13\xc0D\x95\x13 E\x95\x13@E\x95\x13`E\x95\x13\x00A\x95\x13`C\x95\x13\xc0E\x95\x13\xa0E\x95\x13\x00F\x95\x13 F\x95\x13\xe0C\x95\x13`F\x95\x13@F\x95\x13 @\x95\x13\xc0F\x95\x13\xe0F\x95\x13\xa0D\x95\x13 G\x95\x13\x00G\x95\x13\x00E\x95\x13@G\x95\x13\xa0G\x95\x13\xc0G\x95\x13\xe0E\x95\x13`@\x95\x13 H\x95\x13\x00H\x95\x13@@\x95\x13@H\x95\x13`H\x95\x13\xc0H\x95\x13\xe0H\x95\x13\xa0F\x95\x13 I\x95\x13@I\x95\x13 A\x95\x13\x80G\x95\x13`I\x95\x13\xc0I\x95\x13\xe0I\x95\x13`A\x95\x13\xc0C\x95\x13\x00J\x95\x13`J\x95\x13\x80J\x95\x13\x80F\x95\x13\xe0@\x95\x13\xa0J\x95\x13\xc0J\x95\x13 K\x95\x13\x00K\x95\x13\xa0H\x95\x13\x80K\x95\x13\xa0K\x95\x13\xc0K\x95\x13\xe0K\x95\x13\x00L\x95\x13\x00B\x95\x13@K\x95\x13 L\x95\x13@L\x95\x13\xa0L\x95\x13\x80L\x95\x13\x80@\x95\x13\xc0L\x95\x13\xe0L\x95\x13\x00M\x95\x13`M\x95\x13@M\x95\x13\xa0I\x95\x13\x80M\x95\x13\xe0M\x95\x13\xc0M\x95\x13 N\x95\x13\x00N\x95\x13`N\x95\x13\x80N\x95\x13@J\x95\x13 bD\r\xa0N\x95\x13\x00O\x95\x13\x00I\x95\x13\xc0@\x95\x13\x80H\x95\x13`O\x95\x13\xc0O\x95\x13\xe0O\x95\x13\xc0N\x95\x13\x80E\x95\x13@N\x95\x13\x80B\x95\x13 J\x95\x13\x80I\x95\x13\x80O\x95\x13`K\x95\x13\xa0O\x95\x13\xe0J\x95\x13`L\x95\x13@O\x95\x13 O\x95\x13`G\x95\x13\xe0G\x95\x13\xa0s\xa0\r\xa0M\x95\x13@\x00\xc0\x13\xe0\x01\xc0\x13@\x01\xc0\x13\xc0\x01\xc0\x13\x80\x02\xc0\x13\xc0\x02\xc0\x13\xe0\x02\xc0\x13\xa0\x02\xc0\x13 \x03\xc0\x13@\x03\xc0\x13`\x03\xc0\x13 \x01\xc0\x13@\x02\xc0\x13\x80\x03\xc0\x13\xa0\x03\xc0\x13\xc0\x03\xc0\x13\xe0\x03\xc0\x13\x00\x04\xc0\x13`\x00\xc0\x13\xe0\x00\xc0\x13\xc0\x00\xc0\x13\x00\x03\xc0\x13 \x02\xc0\x13\x80\x04\xc0\x13\x00\x05\xc0\x13@\x05\xc0\x13\xe0\x04\xc0\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S'\t\x03\x80?\\\xd8L?~~w?\xfd\xe7\x1d?\xf2/"?\xcc\x0c@?\x0b\x96H?C;s?\xf7mf?\xd8\xf5.?\xda\x837?N\xff]?\xf6\xc9;?\xf6<3?\xb5\xc8;?\x04\xc8;?\xb3\x03\x80?\xe5\xb0*?\xd3\xc2;?\xb2\xa1Y?\xf9W\xd5?m\x9fj?8As?wE\x84?\x84mf?\x1e\x9c\xb9?\xd1\xf6.?\xe2\x9b\x88?\x05\xf7.?\xc0MD?\x8003?\xff\xb4;?\xf6o&?\xad\x847?\x9c\xf8.?S\x92H?\x9a\x847?\xee\xb8*?\xbe\n@?{}U?\xf9\x8b\x88?}\xe4.?\xae\xd0\x8c?t\x9fY?FPD?\x02\xcb;?\x89\xd5L?\xbd\x04\x80?[MD?\xf4\xc4;?`\xd8\x0c?W\xb7*?\x1c\x03\x80?La&?\n\xc4;?\xe5\x8fH?\xbe\xf4n?\x19\x07\x1e?\x02]U?+\x8fH?\xe1W\xb5?pCD?~[\xd5?#[U?\xbbKD?#\xd4L?\x96:3?d\xb2*@{\xf6.?\x08F\x84?a\xb1*?\x8e\xd3L?\xd53"?[\xc8{?hF\xe4?\xd9\xcf\x8c?\x0c\xe4]?\x96\x05@?/\xed]?\xe6\xe0\x9d?\xd4\x04\xa0?\xebKD?\x89\xd9L?e\x847?\xb8\xc7;?\xeb\xa1Y?p\xb0\x8a?\xa1\xa0Y?\x03bU?=Z3?+\xfbn?\xa5X\x95?\xf1\x07@?\x07\xfc.?\x18\x8fH?E\x86&?\x10\xc9;?}0b?\xe6\x18Q?\x9aMD?m\xf2.?\x88\xcb;?\xd3\xaaj?D\xf7.?\x10&\x82?\xd4[\x95?O4\xa2?h{7?gmf?\\\x81H?7\x19Q?$\xfc.?\x13\x1ao?H93?K~\x97?4\xb4*?\xb3:s?\xc5."?\xe2\x96H?"\x11@?\xfb\xacZ@\xf9\xe3\xbd?w\xe7\x1d?\xf2\xf5\x8e?y\x05\xa0?<\x1bQ?\xa9<s?\xdc\xa8j?/\xe7]?\'3\x93@\xa6\xa0Y?\r)"?\xea\x00@?Y\xfc.?\xf3(s?(F\x84?\xa2\xe5\x1d?=}7?T\x17\xd1?\xb0\x7f7?r{7?\xa2%"?0\xc5L?g\xe4\x1d?-\x90\x88?<\xc7;?G]D?\xa8\x87H?a\xb7*?\xed\xfa.?\x9c/b?\xcbYU?\x18\xe5]?^\xc1\xfb?\xd7\x04\xa0?\x88VD?\xffGD?\x1c\x00\xb0@\x17\xd8]?\x8f\xeb\x1d?\xae\x13\x01@\x03mf?\xaf\xfb??r\xb6*?\xe4j\x86?E\xae\xaa?\xe0\x907?]\x92H?\x19\xd2\x8c?\xcd\x9aY?rv\xb7?\x1c:\x93?n\x18Q?\x12y\xf7?\xa0\xb1*?\xc1\xd0\x8c?\x1c\x05o?\x85\xb2*?\xa3\x00@?I\xf4\x8e?\x94\x1aQ?\xedo&?\x94\xc6;?\xb8\xe8\x1d?\x15\xd0\xac?\xa4G\x84?xi\x86?>t&?\xb3\xa8Y?\xe2\xb6\x9b?\xa8\x82w?"KD?\xe8\x03@?\xb6\x1cQ?\x97\x89\xc8?\xbc@3?M6\x93?\xd4z\x97?\x15WU?,\xb3H?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S'\x18\xe5\xd9\x040\xeb\xd9\x04\xc0\xab\xf5\x04\xf0\xae\xf5\x04\xe0\xa6\xf5\x04\x98\xa9\xf5\x04\xe8\xad\xf5\x04\xc8\xac\xf5\x04@\xad\xf5\x04\x08\xa9\xf5\x0480\x90\x04\xa88\x90\x04\xd8>\x90\x04 6\x90\x04\xf80\x90\x04\xe06\x90\x04\x800\x90\x04x2\x90\x04P0\x90\x04\x008\x90\x04H2\x90\x04h3\x90\x04p4\x90\x04\xc05\x90\x04\xc89\x90\x04(1\x90\x04@1\x90\x04\xe00\x90\x04\xb09\x90\x0486\x90\x04\xe03\x90\x0483\x90\x04P9\x90\x04\xa01\x90\x04\x809\x90\x04\xc02\x90\x04\x887\x90\x04\xb81\x90\x04h6\x90\x04x8\x90\x04\xc80\x90\x04P3\x90\x04 9\x90\x04\x18;\x90\x04@=\x90\x04`8\x90\x04\xa07\x90\x04\xd85\x90\x04\xb00\x90\x0489\x90\x04p7\x90\x04p:\x90\x04 0\x90\x0408\x90\x04\x188\x90\x04\x101\x90\x048<\x90\x04\xd01\x90\x04`2\x90\x04@7\x90\x04\xe8:\x90\x0402\x90\x04\xb06\x90\x04\xa85\x90\x04\xa0:\x90\x04\xe09\x90\x04\xe87\x90\x04\xf05\x90\x04\xb03\x90\x04\x10:\x90\x04@:\x90\x04\x104\x90\x04X=\x90\x04\x80<\x90\x04\x002\x90\x04\xf08\x90\x04H>\x90\x04\xb87\x90\x04\xf89\x90\x04\x806\x90\x04X:\x90\x04\x08<\x90\x04\x980\x90\x04\xc83\x90\x04 <\x90\x04\x00>\x90\x04\xd88\x90\x04(=\x90\x04\x086\x90\x04\x908\x90\x04\xd07\x90\x04\x98<\x90\x04\xc86\x90\x04\x986\x90\x04\x00;\x90\x04h0\x90\x04\x88:\x90\x04\x88=\x90\x04\x881\x90\x04 ?\x90\x04h9\x90\x04\xe8=\x90\x04h<\x90\x04X1\x90\x04P?\x90\x04p1\x90\x04\x90>\x90\x04\x905\x90\x04\xf0>\x90\x04\x902\x90\x04\x80?\x90\x04h?\x90\x04\x18>\x90\x04\xd0=\x90\x04\xc8<\x90\x04\x98?\x90\x048?\x90\x04\xb8:\x90\x04H8\x90\x04\x983\x90\x04x>\x90\x04\xc0>\x90\x04(7\x90\x04\x989\x90\x04\xa8>\x90\x04P6\x90\x04(:\x90\x04H;\x90\x04\x08?\x90\x04\xc0;\x90\x04\x90;\x90\x04\xd8;\x90\x04p=\x90\x04\xc08\x90\x04\x803\x90\x040;\x90\x04\xa0=\x90\x04\x107\x90\x04x;\x90\x04\xe0<\x90\x04\x10=\x90\x04\xc8?\x90\x040>\x90\x04\xb0<\x90\x04\xf8<\x90\x04`;\x90\x04\xe0?\x90\x04\xb0?\x90\x04`>\x90\x04\x089\x90\x04\xf0;\x90\x04P<\x90\x04\xe81\x90\x04\xf86\x90\x04X7\x90\x04\x90\xa2\xf5\x04\xf0\xa8\xf5\x04\xb8\xa1\xf5\x04h\xa6\xf5\x04\xf8\xa3\xf5\x04\xb0\xa3\xf5\x04\x00\xa2\xf5\x04\xe8\xa1\xf5\x04P\xa3\xf5\x04\xd8\xa5\xf5\x040\xa2\xf5\x04h\xa9\xf5\x04`\xa5\xf5\x04X\xa7\xf5\x04\x88\xa7\xf5\x04\xe8\xa7\xf5\x04X\xa4\xf5\x04x\xa5\xf5\x04\xf0\xa2\xf5\x04 \xa0\xf5\x04\x98\xa6\xf5\x04\xf8\xa0\xf5\x04H\xa8\xf5\x04 \xaf\xf5\x04`\xa8\xf5\x04p\xa4\xf5\x04\xb0\xa9\xf5\x04\xa0\xa7\xf5\x04\xc8\xa0\xf5\x04\x18\xa5\xf5\x04\x98\xa3\xf5\x04x\xa2\xf5\x04\xa8\xa5\xf5\x04\xa0\xa4\xf5\x04\x10\xaa\xf5\x04(\xa1\xf5\x04\xa8\xae\xf5\x04\xd8\xa2\xf5\x04\x00\xa8\xf5\x04`\xa2\xf5\x04P\xa0\xf5\x04\x80\xa9\xf5\x04h\xa0\xf5\x04\xe0\xac\xf5\x04\x98\xa0\xf5\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6383
sg6370
g6371
sg6385
g6375
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6395
sg6370
g6391
sg6385
g6402
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6418
sg6370
g6408
sg6385
g6412
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6429
sg6370
g6425
sg6385
g6436
sg6379
g6433
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6446
sg6370
g6442
sg6385
g6453
sg6379
g6450
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6463
sg6370
g6459
sg6385
g6470
sg6379
g6467
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6480
sg6370
g6476
sg6385
g6487
sg6379
g6484
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6446
sg6370
g6493
sg6385
g6453
sg6379
g6500
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6395
sg6370
g6508
sg6385
g6402
sg6379
g6515
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6480
sg6370
g6476
sg6385
g6487
sg6379
g6484
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6540
sg6370
g6536
sg6385
g6547
sg6379
g6544
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6557
sg6370
g6553
sg6385
g6564
sg6379
g6561
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6574
sg6370
g6570
sg6385
g6581
sg6379
g6578
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6418
sg6370
g6587
sg6385
g6412
sg6379
g6594
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6606
sg6370
g6602
sg6385
g6613
sg6379
g6610
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6446
sg6370
g6493
sg6385
g6453
sg6379
g6500
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6642
sg6370
g6632
sg6385
g6636
sg6379
g6640
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6557
sg6370
g6649
sg6385
g6564
sg6379
g6656
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6668
sg6370
g6664
sg6385
g6675
sg6379
g6672
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6685
sg6370
g6681
sg6385
g6692
sg6379
g6689
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6702
sg6370
g6698
sg6385
g6709
sg6379
g6706
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6719
sg6370
g6715
sg6385
g6726
sg6379
g6723
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6702
sg6370
g6732
sg6385
g6709
sg6379
g6739
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6557
sg6370
g6553
sg6385
g6564
sg6379
g6561
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6668
sg6370
g6760
sg6385
g6675
sg6379
g6767
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6606
sg6370
g6775
sg6385
g6613
sg6379
g6782
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6418
sg6370
g6408
sg6385
g6412
sg6379
g6416
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6813
sg6370
g6803
sg6385
g6807
sg6379
g6811
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6418
sg6370
g6587
sg6385
g6412
sg6379
g6594
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6843
sg6370
g6833
sg6385
g6837
sg6379
g6841
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6719
sg6370
g6850
sg6385
g6726
sg6379
g6857
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6869
sg6370
g6865
sg6385
g6876
sg6379
g6873
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6429
sg6370
g6425
sg6385
g6436
sg6379
g6433
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6463
sg6370
g6459
sg6385
g6470
sg6379
g6467
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6395
sg6370
g6391
sg6385
g6402
sg6379
g6399
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6480
sg6370
g6921
sg6385
g6487
sg6379
g6928
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6383
sg6370
g6936
sg6385
g6375
sg6379
g6943
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6429
sg6370
g6951
sg6385
g6436
sg6379
g6958
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6813
sg6370
g6803
sg6385
g6807
sg6379
g6811
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6983
sg6370
g6979
sg6385
g6990
sg6379
g6987
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6383
sg6370
g6936
sg6385
g6375
sg6379
g6943
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6719
sg6370
g6715
sg6385
g6726
sg6379
g6723
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g6869
sg6370
g7022
sg6385
g6876
sg6379
g7029
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6540
sg6370
g7037
sg6385
g6547
sg6379
g7044
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g6446
sg6370
g6442
sg6385
g6453
sg6379
g6450
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6685
sg6370
g7065
sg6385
g6692
sg6379
g7072
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g6668
sg6370
g6760
sg6385
g6675
sg6379
g6767
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6843
sg6370
g6833
sg6385
g6837
sg6379
g6841
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6685
sg6370
g6681
sg6385
g6692
sg6379
g6689
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6383
sg6370
g6936
sg6385
g6375
sg6379
g6943
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6869
sg6370
g6865
sg6385
g6876
sg6379
g6873
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6574
sg6370
g6570
sg6385
g6581
sg6379
g6578
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g6540
sg6370
g7037
sg6385
g6547
sg6379
g7044
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6719
sg6370
g6850
sg6385
g6726
sg6379
g6857
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6606
sg6370
g6775
sg6385
g6613
sg6379
g6782
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6429
sg6370
g6951
sg6385
g6436
sg6379
g6958
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g6557
sg6370
g6649
sg6385
g6564
sg6379
g6656
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6574
sg6370
g6570
sg6385
g6581
sg6379
g6578
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6480
sg6370
g6921
sg6385
g6487
sg6379
g6928
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6395
sg6370
g6508
sg6385
g6402
sg6379
g6515
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g6540
sg6370
g6536
sg6385
g6547
sg6379
g6544
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g6557
sg6370
g6553
sg6385
g6564
sg6379
g6561
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6395
sg6370
g6391
sg6385
g6402
sg6379
g6399
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g6540
sg6370
g7037
sg6385
g6547
sg6379
g7044
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g6843
sg6370
g7314
sg6385
g6837
sg6379
g7321
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6668
sg6370
g6664
sg6385
g6675
sg6379
g6672
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6429
sg6370
g6425
sg6385
g6436
sg6379
g6433
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g6668
sg6370
g6760
sg6385
g6675
sg6379
g6767
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6843
sg6370
g7314
sg6385
g6837
sg6379
g7321
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g6642
sg6370
g7381
sg6385
g6636
sg6379
g7388
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6668
sg6370
g6760
sg6385
g6675
sg6379
g6767
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6540
sg6370
g6536
sg6385
g6547
sg6379
g6544
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6429
sg6370
g6951
sg6385
g6436
sg6379
g6958
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g6642
sg6370
g6632
sg6385
g6636
sg6379
g6640
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6869
sg6370
g7022
sg6385
g6876
sg6379
g7029
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6395
sg6370
g6391
sg6385
g6402
sg6379
g6399
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6383
sg6370
g6371
sg6385
g6375
sg6379
g6380
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g6869
sg6370
g7022
sg6385
g6876
sg6379
g7029
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6719
sg6370
g6715
sg6385
g6726
sg6379
g6723
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g6983
sg6370
g7513
sg6385
g6990
sg6379
g7520
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g6642
sg6370
g6632
sg6385
g6636
sg6379
g6640
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g6446
sg6370
g6442
sg6385
g6453
sg6379
g6450
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g6418
sg6370
g6408
sg6385
g6412
sg6379
g6416
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g6813
sg6370
g6803
sg6385
g6807
sg6379
g6811
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g6843
sg6370
g6833
sg6385
g6837
sg6379
g6841
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6983
sg6370
g7513
sg6385
g6990
sg6379
g7520
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g6843
sg6370
g7314
sg6385
g6837
sg6379
g7321
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g6429
sg6370
g6425
sg6385
g6436
sg6379
g6433
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g6685
sg6370
g7065
sg6385
g6692
sg6379
g7072
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6574
sg6370
g7645
sg6385
g6581
sg6379
g7652
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g6383
sg6370
g6371
sg6385
g6375
sg6379
g6380
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g6702
sg6370
g6698
sg6385
g6709
sg6379
g6706
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g6843
sg6370
g6833
sg6385
g6837
sg6379
g6841
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g6606
sg6370
g6602
sg6385
g6613
sg6379
g6610
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6463
sg6370
g6459
sg6385
g6470
sg6379
g6467
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g6813
sg6370
g7725
sg6385
g6807
sg6379
g7732
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g6463
sg6370
g7740
sg6385
g6470
sg6379
g7747
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6429
sg6370
g6951
sg6385
g6436
sg6379
g6958
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g6574
sg6370
g6570
sg6385
g6581
sg6379
g6578
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6983
sg6370
g7513
sg6385
g6990
sg6379
g7520
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6843
sg6370
g6833
sg6385
g6837
sg6379
g6841
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g6418
sg6370
g6587
sg6385
g6412
sg6379
g6594
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6557
sg6370
g6553
sg6385
g6564
sg6379
g6561
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6843
sg6370
g7314
sg6385
g6837
sg6379
g7321
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g6869
sg6370
g6865
sg6385
g6876
sg6379
g6873
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g6480
sg6370
g6921
sg6385
g6487
sg6379
g6928
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6869
sg6370
g7022
sg6385
g6876
sg6379
g7029
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g6574
sg6370
g7645
sg6385
g6581
sg6379
g7652
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g6463
sg6370
g7740
sg6385
g6470
sg6379
g7747
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6719
sg6370
g6715
sg6385
g6726
sg6379
g6723
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g6446
sg6370
g6442
sg6385
g6453
sg6379
g6450
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6418
sg6370
g6408
sg6385
g6412
sg6379
g6416
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g6642
sg6370
g7381
sg6385
g6636
sg6379
g7388
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g6813
sg6370
g7725
sg6385
g6807
sg6379
g7732
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6540
sg6370
g7037
sg6385
g6547
sg6379
g7044
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g6869
sg6370
g6865
sg6385
g6876
sg6379
g6873
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g6446
sg6370
g6442
sg6385
g6453
sg6379
g6450
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6574
sg6370
g7645
sg6385
g6581
sg6379
g7652
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g6480
sg6370
g6921
sg6385
g6487
sg6379
g6928
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g6463
sg6370
g7740
sg6385
g6470
sg6379
g7747
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g6574
sg6370
g6570
sg6385
g6581
sg6379
g6578
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g6606
sg6370
g6602
sg6385
g6613
sg6379
g6610
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6813
sg6370
g6803
sg6385
g6807
sg6379
g6811
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g6540
sg6370
g6536
sg6385
g6547
sg6379
g6544
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g6685
sg6370
g6681
sg6385
g6692
sg6379
g6689
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g6463
sg6370
g7740
sg6385
g6470
sg6379
g7747
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6668
sg6370
g6664
sg6385
g6675
sg6379
g6672
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g6642
sg6370
g6632
sg6385
g6636
sg6379
g6640
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g6395
sg6370
g6508
sg6385
g6402
sg6379
g6515
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6983
sg6370
g7513
sg6385
g6990
sg6379
g7520
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6463
sg6370
g7740
sg6385
g6470
sg6379
g7747
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g6702
sg6370
g6698
sg6385
g6709
sg6379
g6706
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g6557
sg6370
g6649
sg6385
g6564
sg6379
g6656
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6606
sg6370
g6775
sg6385
g6613
sg6379
g6782
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6719
sg6370
g6850
sg6385
g6726
sg6379
g6857
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6383
sg6370
g6371
sg6385
g6375
sg6379
g6380
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g6606
sg6370
g6775
sg6385
g6613
sg6379
g6782
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g6463
sg6370
g6459
sg6385
g6470
sg6379
g6467
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g6702
sg6370
g6732
sg6385
g6709
sg6379
g6739
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6418
sg6370
g6587
sg6385
g6412
sg6379
g6594
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g6983
sg6370
g6979
sg6385
g6990
sg6379
g6987
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g6574
sg6370
g7645
sg6385
g6581
sg6379
g7652
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6719
sg6370
g6715
sg6385
g6726
sg6379
g6723
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g6685
sg6370
g6681
sg6385
g6692
sg6379
g6689
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g6606
sg6370
g6602
sg6385
g6613
sg6379
g6610
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6869
sg6370
g6865
sg6385
g6876
sg6379
g6873
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6418
sg6370
g6587
sg6385
g6412
sg6379
g6594
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6383
sg6370
g6936
sg6385
g6375
sg6379
g6943
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6983
sg6370
g6979
sg6385
g6990
sg6379
g6987
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6606
sg6370
g6602
sg6385
g6613
sg6379
g6610
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6383
sg6370
g6936
sg6385
g6375
sg6379
g6943
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g6668
sg6370
g6760
sg6385
g6675
sg6379
g6767
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g6869
sg6370
g7022
sg6385
g6876
sg6379
g7029
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6813
sg6370
g6803
sg6385
g6807
sg6379
g6811
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6685
sg6370
g7065
sg6385
g6692
sg6379
g7072
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6813
sg6370
g7725
sg6385
g6807
sg6379
g7732
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g6480
sg6370
g6476
sg6385
g6487
sg6379
g6484
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6702
sg6370
g6732
sg6385
g6709
sg6379
g6739
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g6642
sg6370
g7381
sg6385
g6636
sg6379
g7388
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6480
sg6370
g6476
sg6385
g6487
sg6379
g6484
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6446
sg6370
g6493
sg6385
g6453
sg6379
g6500
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g6642
sg6370
g6632
sg6385
g6636
sg6379
g6640
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g6719
sg6370
g6850
sg6385
g6726
sg6379
g6857
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g6606
sg6370
g6775
sg6385
g6613
sg6379
g6782
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g6685
sg6370
g7065
sg6385
g6692
sg6379
g7072
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g6540
sg6370
g6536
sg6385
g6547
sg6379
g6544
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6429
sg6370
g6951
sg6385
g6436
sg6379
g6958
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g6642
sg6370
g7381
sg6385
g6636
sg6379
g7388
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g6395
sg6370
g6508
sg6385
g6402
sg6379
g6515
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g6557
sg6370
g6649
sg6385
g6564
sg6379
g6656
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6702
sg6370
g6732
sg6385
g6709
sg6379
g6739
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6480
sg6370
g6921
sg6385
g6487
sg6379
g6928
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6843
sg6370
g7314
sg6385
g6837
sg6379
g7321
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g6702
sg6370
g6732
sg6385
g6709
sg6379
g6739
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6540
sg6370
g7037
sg6385
g6547
sg6379
g7044
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6668
sg6370
g6664
sg6385
g6675
sg6379
g6672
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6983
sg6370
g7513
sg6385
g6990
sg6379
g7520
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g6813
sg6370
g7725
sg6385
g6807
sg6379
g7732
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6557
sg6370
g6553
sg6385
g6564
sg6379
g6561
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g6685
sg6370
g7065
sg6385
g6692
sg6379
g7072
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6480
sg6370
g6476
sg6385
g6487
sg6379
g6484
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6685
sg6370
g6681
sg6385
g6692
sg6379
g6689
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6642
sg6370
g7381
sg6385
g6636
sg6379
g7388
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g6813
sg6370
g7725
sg6385
g6807
sg6379
g7732
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g6702
sg6370
g6698
sg6385
g6709
sg6379
g6706
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g6463
sg6370
g6459
sg6385
g6470
sg6379
g6467
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6446
sg6370
g6493
sg6385
g6453
sg6379
g6500
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6429
sg6370
g6425
sg6385
g6436
sg6379
g6433
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6395
sg6370
g6391
sg6385
g6402
sg6379
g6399
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6719
sg6370
g6850
sg6385
g6726
sg6379
g6857
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g6983
sg6370
g6979
sg6385
g6990
sg6379
g6987
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g6383
sg6370
g6371
sg6385
g6375
sg6379
g6380
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6574
sg6370
g7645
sg6385
g6581
sg6379
g7652
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g6668
sg6370
g6664
sg6385
g6675
sg6379
g6672
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g6983
sg6370
g6979
sg6385
g6990
sg6379
g6987
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g6446
sg6370
g6493
sg6385
g6453
sg6379
g6500
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g6702
sg6370
g6698
sg6385
g6709
sg6379
g6706
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6418
sg6370
g6408
sg6385
g6412
sg6379
g6416
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g6557
sg6370
g6649
sg6385
g6564
sg6379
g6656
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g6395
sg6370
g6508
sg6385
g6402
sg6379
g6515
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.